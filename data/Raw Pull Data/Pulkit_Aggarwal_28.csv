pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
463865894,Milestone 3.1 : Add Ratio Expression Input Interaction ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~1. This PR fixes or fixes part of #[fill_in_number_here].~
2. This PR does the following: 
### Adds RatioExpressionInput Interaction
RatioExpressionInput Interaction with the 3 rules namely -

1. HasNumberOfTermsEqualsTo
2. Equals
3. IsEquivalent

It also adds `RatioExpression` - a dedicated object for ratio interaction which stores the list of non-negative integers and in order to parse it correctly a `RatioObjectFactory was also introduced in this PR.

This PR only adds the creator's flow of the interaction and therefore this cannot be used in production unless the learner's flow is completed which would be completed by @aks681.

In order to use this interaction, you have to remove the flag below https://github.com/oppia/oppia/blob/c65d1e31a7fb5bf3156353f960e41a034ca418c1/core/templates/pages/exploration-editor-page/editor-tab/templates/modal-templates/customize-interaction-modal.template.html#L21


## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10175,https://api.github.com/repos/oppia/oppia/pulls/10175,https://github.com/oppia/oppia/pull/10175,closed,1423,46,38,106,41,373,0,2,[],2020-08-06 08:18:30+00:00,2020-08-29 07:15:35+00:00,1983425.0,"22 days, 22:57:05","[{'comment_id': 469192372, 'comment_body': 'Why is this deleted? This is used in MathEquationInput.', 'comment_created': datetime.datetime(2020, 8, 12, 11, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 469193109, 'comment_body': 'Incorrect docstring.', 'comment_created': datetime.datetime(2020, 8, 12, 11, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 469193551, 'comment_body': ""ratio's -> ratios"", 'comment_created': datetime.datetime(2020, 8, 12, 11, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 469194154, 'comment_body': 'incorrect name', 'comment_created': datetime.datetime(2020, 8, 12, 11, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 469194673, 'comment_body': ""So, the input is a string, right? What if the learner enters '5 : 3', will it be matched to '5:3' (i.e are spaces handled)?"", 'comment_created': datetime.datetime(2020, 8, 12, 11, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 469195262, 'comment_body': 'Should there be an isEquivalent rule as well which will match 1:2 with 2:4 and so on?', 'comment_created': datetime.datetime(2020, 8, 12, 11, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 469205156, 'comment_body': 'reverted\r\n', 'comment_created': datetime.datetime(2020, 8, 12, 12, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469205673, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 8, 12, 12, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469205949, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 8, 12, 12, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469205993, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 8, 12, 12, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469206637, 'comment_body': ""if users enter a space that won't be identified as a valid regex pattern and submit button would be disabled"", 'comment_created': datetime.datetime(2020, 8, 12, 12, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469206698, 'comment_body': 'yep i would be adding that too', 'comment_created': datetime.datetime(2020, 8, 12, 12, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469268954, 'comment_body': 'I think you need to use the `_createFromRatioExpressionInputCustomizationArgsBackendDict` function here.', 'comment_created': datetime.datetime(2020, 8, 12, 13, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469269007, 'comment_body': '2017 -> 2020', 'comment_created': datetime.datetime(2020, 8, 12, 13, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469269996, 'comment_body': 'Incorrect description.', 'comment_created': datetime.datetime(2020, 8, 12, 13, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469270168, 'comment_body': 'Incorrect abbreviation.', 'comment_created': datetime.datetime(2020, 8, 12, 13, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469270821, 'comment_body': '2019 -> 2020', 'comment_created': datetime.datetime(2020, 8, 12, 13, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469271690, 'comment_body': 'I think we should handle spaces. Since this is just a text box, the user might end up entering some spaces.\r\nAlso, do we support decimals? Like `1.5:3`?', 'comment_created': datetime.datetime(2020, 8, 12, 13, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469273856, 'comment_body': 'Please add unit tests for this file.', 'comment_created': datetime.datetime(2020, 8, 12, 13, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469276548, 'comment_body': ""This should match with the object you've added in the `_customization_arg_specs` list in the `RatioExpressionInput.py` file."", 'comment_created': datetime.datetime(2020, 8, 12, 13, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469278449, 'comment_body': 'Maybe instead of `is equal to length {{x|NonnegativeInt}}`, something like `has number of terms equal to {{x|NonnegativeInt}}` would be more appropriate?', 'comment_created': datetime.datetime(2020, 8, 12, 13, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469278652, 'comment_body': 'Ditto about statement.', 'comment_created': datetime.datetime(2020, 8, 12, 13, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469281437, 'comment_body': 'Extra underscore.', 'comment_created': datetime.datetime(2020, 8, 12, 14, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469281471, 'comment_body': ""You need to test with rations, there aren't ratios."", 'comment_created': datetime.datetime(2020, 8, 12, 14, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469282659, 'comment_body': '2017 -> 2020', 'comment_created': datetime.datetime(2020, 8, 12, 14, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469282924, 'comment_body': 'Please change this into a component instead of a directive.', 'comment_created': datetime.datetime(2020, 8, 12, 14, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469285056, 'comment_body': 'Why do you need to convert `ctrl.value` to string? Is it not already in string format?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469285073, 'comment_body': 'What does ""...N"" mean? If it means you can add multiple values, then this is not an understandable error message, please improve this.', 'comment_created': datetime.datetime(2020, 8, 12, 14, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 469289844, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 14, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469293069, 'comment_body': ""no, we don't support decimal for now"", 'comment_created': datetime.datetime(2020, 8, 12, 14, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469293809, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 14, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469294067, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 14, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469294328, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 14, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469294505, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 12, 14, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469368389, 'comment_body': ""Make sure this matches what is in ```RatioExpressionInput.py```. customPlaceholder here should be type: 'custom', etc."", 'comment_created': datetime.datetime(2020, 8, 12, 15, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shavavo', 'type': 'User'}, {'comment_id': 469378786, 'comment_body': 'Yeah i did figure it out thanks 😅', 'comment_created': datetime.datetime(2020, 8, 12, 16, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469643152, 'comment_body': 'Please add lots more tests -- empty string, single number, multi-digit numbers, letters, etc. \r\n\r\nThere should probably be at least 3 times as many cases as you currently have.', 'comment_created': datetime.datetime(2020, 8, 13, 1, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 469692061, 'comment_body': 'Okay would do that', 'comment_created': datetime.datetime(2020, 8, 13, 4, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469708307, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 13, 5, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469709578, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 13, 5, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469709586, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 13, 5, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469709612, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 13, 5, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469709721, 'comment_body': '@seanlip what are your thoughts on this', 'comment_created': datetime.datetime(2020, 8, 13, 5, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469712321, 'comment_body': 'OK not to support decimals.\r\n\r\nBut it seems reasonable to support spaces? Just trim them before comparing.', 'comment_created': datetime.datetime(2020, 8, 13, 5, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 469712660, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 13, 5, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469712664, 'comment_body': 'Btw, also, please come up with a list of error messages to show, and send to me for review. @iamprayush can help you with that (he did it for his math input interactions).', 'comment_created': datetime.datetime(2020, 8, 13, 5, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 469748650, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 13, 7, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 469750297, 'comment_body': 'okay would do that', 'comment_created': datetime.datetime(2020, 8, 13, 7, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 470430581, 'comment_body': '@seanlip should I make a object factory to display different error messages of simple string comparison would be good enough?', 'comment_created': datetime.datetime(2020, 8, 14, 6, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 470433982, 'comment_body': 'Oh, just to clarify the point above, I meant, make a spreadsheet of error messages and the conditions under which they occur (perhaps ask @iamprayush to send you his, so you have an example.\r\n\r\nRe how to display them: look at other interactions and follow existing patterns.', 'comment_created': datetime.datetime(2020, 8, 14, 6, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470450208, 'comment_body': ""I did make the spreadsheet(sharing in few minutes) but this was regarding the existing pattern that you are mentioning above(for eg fraction - it have fraction object factory which throws the error) but in case of ratio i don't think so that I would be requiring an object factory.\r\n\r\nI'm thinking something like this\r\n```\r\n        ctrl.isValidRatio = function(value) {\r\n          if (value.length === 0) {\r\n            errorMessage = 'Please enter a non-empty ratio value.';\r\n            return false;\r\n          }\r\n          var RATIO_REGEX = /^\\d+(:\\d+)+$$/;\r\n          if (!RATIO_REGEX.test(value)) {\r\n            errorMessage =\r\n              ObjectsDomainConstants.RATIO_PARSING_ERRORS.INVALID_FORMAT;\r\n          } else {\r\n            ctrl.value = value.toString();\r\n            errorMessage = '';\r\n          }\r\n          return true;\r\n        };\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 14, 7, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 470450534, 'comment_body': '@aks681 your thoughts on this?', 'comment_created': datetime.datetime(2020, 8, 14, 7, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 470463277, 'comment_body': 'My previous comments still apply: follow whatever pattern is used by other interactions.', 'comment_created': datetime.datetime(2020, 8, 14, 7, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 470725818, 'comment_body': ""> should I make a object factory to display different error messages of simple string comparison would be good enough?\r\n\r\nI don't think you need an object factory if you just want to show warnings based on some given conditions. If the same warnings are being shown in multiple components, maybe create a service and call functions from there; if not, you can simply implement this in the validation function itself."", 'comment_created': datetime.datetime(2020, 8, 14, 16, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 472019974, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 18, 8, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 472020024, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 18, 8, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 472041351, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 18, 9, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 472093784, 'comment_body': 'will revert this ', 'comment_created': datetime.datetime(2020, 8, 18, 11, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 472521676, 'comment_body': 'Please do. :)', 'comment_created': datetime.datetime(2020, 8, 18, 22, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 472522809, 'comment_body': 'Suggest using a clearer name than ``value``: what does this value actually contain/represent?', 'comment_created': datetime.datetime(2020, 8, 18, 22, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 472523650, 'comment_body': 'I think you also need to do whitespace normalization for this rule as well, otherwise spaces will likely break ``convertToSimplestForm``.', 'comment_created': datetime.datetime(2020, 8, 18, 22, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 472525126, 'comment_body': ""Also: spaces in various places, starting with colon, using semicolons instead of colons (typo), decimals, fractions representing ratios, digits starting with zero, and maybe negatives & invalid ratios.\r\n\r\n@seanlip should we be considering '0:0' a valid ratio? I can see merit in supporting 'x:0' and '0:x'. Also, should we be supporting negative ratios? My inclination is that '0:0' is always incorrect, and that negative ratios should be conditionally supported based on a configuration value."", 'comment_created': datetime.datetime(2020, 8, 18, 22, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 472525691, 'comment_body': 'Needs to factor in spaces. ``   1 : 2 `` should be a valid ratio.', 'comment_created': datetime.datetime(2020, 8, 18, 22, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 472526782, 'comment_body': ""This seems a bit like codesmell to me--validation methods probably shouldn't be changing state. ``warningText`` is itself not great, but justifiable (alternatively you could return the error & assign it in the caller, instead), but we shouldn't be performing any sort of cleaning on the value here. Let's do that at the callsite."", 'comment_created': datetime.datetime(2020, 8, 18, 22, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 472526851, 'comment_body': 'Please add documentation for this function.', 'comment_created': datetime.datetime(2020, 8, 18, 22, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 472527346, 'comment_body': ""We shouldn't just be using a string to represent ratios, we should be using a structure like we do for fractions."", 'comment_created': datetime.datetime(2020, 8, 18, 22, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 472527511, 'comment_body': 'Ditto here--should be a structure, not a string.', 'comment_created': datetime.datetime(2020, 8, 18, 22, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 472529313, 'comment_body': ""Ah good point, I missed this. For now, let's require that elements in a ratio should always be positive whole numbers (not zero, not negative -- we never use those cases)."", 'comment_created': datetime.datetime(2020, 8, 18, 22, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 472732993, 'comment_body': 'not after changing it to list of numbers', 'comment_created': datetime.datetime(2020, 8, 19, 5, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 472736157, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 19, 6, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 473687669, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 20, 7, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 473687803, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 20, 7, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 473687932, 'comment_body': 'not valid anymore', 'comment_created': datetime.datetime(2020, 8, 20, 7, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 473688281, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 20, 7, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 473688354, 'comment_body': 'not valid anymore', 'comment_created': datetime.datetime(2020, 8, 20, 7, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 473958841, 'comment_body': ""This error seems to occur even if the rule is 'IsEqualsTo', which doesn't seem right? Since there may be cases where the creator can expect exactly equal to '2:4', and not 1:2 or 3:6."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 473961023, 'comment_body': 'Allow learners', 'comment_created': datetime.datetime(2020, 8, 20, 13, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 473961163, 'comment_body': 'Minimum', 'comment_created': datetime.datetime(2020, 8, 20, 13, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 473964168, 'comment_body': ""yes that's is correct because 2:4 and 1:2 both should be considered as a valid answer right?"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 473965007, 'comment_body': ""Also, what's the use of this cust arg? Since, even if I set minimum number of terms required to 5, I can still add an answer group like '2:3' with only 2 terms.."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 473965948, 'comment_body': '@aks681 can I exclude this check based upon the selected rule?', 'comment_created': datetime.datetime(2020, 8, 20, 13, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 473969387, 'comment_body': ""Well, if the rule is 'ExactlyEqualTo', 1:2 and 3:6 should not be matched with 2:4."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 473970933, 'comment_body': ""it would be required for the learners part if i'm not wrong ?"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 473973958, 'comment_body': 'If the rule is 2:3 and the minimum terms is 5, how can the learner submit the answer for this?', 'comment_created': datetime.datetime(2020, 8, 20, 13, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 473979958, 'comment_body': ""okay got it to let me update that but if I add a check into input validation service for this (would it affect the creator as well ?) i mean i can't check anything for rules/customization arg in editor component "", 'comment_created': datetime.datetime(2020, 8, 20, 13, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474030086, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 20, 14, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474069863, 'comment_body': ""The `gcdResult` could be 0, in which case we shouldn't be dividing the numbers by `gcdResult`, right?"", 'comment_created': datetime.datetime(2020, 8, 20, 15, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474070765, 'comment_body': 'Perhaps add some cases with whitespace in the string?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474071407, 'comment_body': 'Add cases with 0', 'comment_created': datetime.datetime(2020, 8, 20, 15, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474076829, 'comment_body': 'Add a case for [2, 4, 6] here, and I assume that should be false, right?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474077927, 'comment_body': 'I think you can combine them into a single test, right? Just add multiple test cases.', 'comment_created': datetime.datetime(2020, 8, 20, 15, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474081609, 'comment_body': ""Should there be a validation warning for cases where the number of terms in some of the creator's inputs is lesser than the minimum number of terms required from the learner since that rule input would never match?"", 'comment_created': datetime.datetime(2020, 8, 20, 15, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474085520, 'comment_body': ""Does this not conflict with the customization arg? Since according to that arg, the user can enter a ratio with 0 or 1 terms but this will validate it as wrong. Also, what would a ratio with one term look like? Just a number? If so, isn't that considered as an invalid ratio according to your validations?"", 'comment_created': datetime.datetime(2020, 8, 20, 15, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474088105, 'comment_body': ""Shouldn't this be handled with the rest of the validations in the object factory?"", 'comment_created': datetime.datetime(2020, 8, 20, 15, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474091182, 'comment_body': 'yes, correct @seanlip @BenHenning  how should I handle 0 number?\r\nShould I throw an error or something else?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474091353, 'comment_body': 'will do', 'comment_created': datetime.datetime(2020, 8, 20, 15, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474092016, 'comment_body': ""2, 4, 6 is incorrect input in the first place. Creator won't be able to add such ratio"", 'comment_created': datetime.datetime(2020, 8, 20, 15, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474092271, 'comment_body': 'okay would do', 'comment_created': datetime.datetime(2020, 8, 20, 15, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474092767, 'comment_body': 'yes that is correct but @seanlip @BenHenning agreed on sentinel value of 0 ', 'comment_created': datetime.datetime(2020, 8, 20, 15, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474094412, 'comment_body': 'yes I have added that in a later commit', 'comment_created': datetime.datetime(2020, 8, 20, 15, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474095058, 'comment_body': ""I don't understand, why is that incorrect input?"", 'comment_created': datetime.datetime(2020, 8, 20, 15, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474095754, 'comment_body': 'Then perhaps change this validator to allow a min value of 0 and also change your frontend validations to allow ratios with 0 or 1 terms.', 'comment_created': datetime.datetime(2020, 8, 20, 16, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474097149, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 20, 16, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474098473, 'comment_body': 'donee', 'comment_created': datetime.datetime(2020, 8, 20, 16, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474176024, 'comment_body': 'oh nevermind it would be correct i miss interpreted with something else\r\n', 'comment_created': datetime.datetime(2020, 8, 20, 18, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474474042, 'comment_body': 'no --> number, here and elsewhere\r\n\r\nAlso ... why swap the args compared to lines 349-353? Keeping them in the same order is a bit nicer for readability.', 'comment_created': datetime.datetime(2020, 8, 21, 7, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474475771, 'comment_body': 'Use 2-space indentation', 'comment_created': datetime.datetime(2020, 8, 21, 7, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474476461, 'comment_body': 'No --> Number, here and elsewhere', 'comment_created': datetime.datetime(2020, 8, 21, 7, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474478201, 'comment_body': 'Under what circumstances does this occur?', 'comment_created': datetime.datetime(2020, 8, 21, 7, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474517102, 'comment_body': 'Why do you need this?', 'comment_created': datetime.datetime(2020, 8, 21, 8, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474519135, 'comment_body': 'NON_INTEGER_ELEMENTS might be a better error name?', 'comment_created': datetime.datetime(2020, 8, 21, 8, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474519834, 'comment_body': ""Isn't this named the opposite of what it should be? Should be INCLUDES_ZERO or something like that?"", 'comment_created': datetime.datetime(2020, 8, 21, 8, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474521037, 'comment_body': 'This is only relevant for a particular rule, right? Ratios do not always need to be in simplest form when entered, especially if we have not taught that concept yet.', 'comment_created': datetime.datetime(2020, 8, 21, 8, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474521880, 'comment_body': 'Did you test manually that this works correctly?', 'comment_created': datetime.datetime(2020, 8, 21, 8, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474523448, 'comment_body': 'placeholder', 'comment_created': datetime.datetime(2020, 8, 21, 8, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474523863, 'comment_body': 'numberOfTerms', 'comment_created': datetime.datetime(2020, 8, 21, 8, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474524489, 'comment_body': 'I already mentioned this in the design doc, but you should explain to the creator what 0 means.\r\n\r\nAlso, this is not the minimum number of terms -- if specified, it should be the actual number of terms. It should not be allowed to equal 1 (enforce this using validation errors).\r\n\r\nYou can use the following explanation:\r\n\r\n```\r\nThe number of elements that the answer must have. If set to 0, a ratio of any length will be accepted.\r\n```', 'comment_created': datetime.datetime(2020, 8, 21, 8, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474525879, 'comment_body': 'Drop extra newline.', 'comment_created': datetime.datetime(2020, 8, 21, 8, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474526287, 'comment_body': 'Here and below, this is misnamed. It is not a string.', 'comment_created': datetime.datetime(2020, 8, 21, 8, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474527817, 'comment_body': ""In all this, you haven't tested a case where the learner's answer is a positive or mixed number multiple of the target ratio."", 'comment_created': datetime.datetime(2020, 8, 21, 8, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474528154, 'comment_body': ""You do not need this. Break after '('."", 'comment_created': datetime.datetime(2020, 8, 21, 8, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474529118, 'comment_body': 'Number', 'comment_created': datetime.datetime(2020, 8, 21, 8, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474529257, 'comment_body': 'Drop extra newline.', 'comment_created': datetime.datetime(2020, 8, 21, 8, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474529703, 'comment_body': '@nishantwrp is this typecasting expected?', 'comment_created': datetime.datetime(2020, 8, 21, 8, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474532132, 'comment_body': 'No, this won\'t do. What do you mean by ""there\'s no creator""? The validation still needs to stay, and pass.', 'comment_created': datetime.datetime(2020, 8, 21, 8, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474532629, 'comment_body': 'Same question.', 'comment_created': datetime.datetime(2020, 8, 21, 8, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474532779, 'comment_body': 'No question marks, here and below.', 'comment_created': datetime.datetime(2020, 8, 21, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474534582, 'comment_body': 'No, this should still have a min value of 2. The sentinel value of 0 needs to be more clearly explained in the customization arg.', 'comment_created': datetime.datetime(2020, 8, 21, 8, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474593415, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474594452, 'comment_body': ""when 1:0 or 0:0 is passed but this won't be required anymore so removing this"", 'comment_created': datetime.datetime(2020, 8, 21, 9, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474594501, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474595450, 'comment_body': 'removed ', 'comment_created': datetime.datetime(2020, 8, 21, 9, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474595875, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474596076, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474596383, 'comment_body': 'yes would be shifting this to input validation\r\n', 'comment_created': datetime.datetime(2020, 8, 21, 9, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474597343, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474597402, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474597766, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 8, 21, 9, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474598465, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474598614, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474599114, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474599527, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474599559, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 9, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474599907, 'comment_body': 'I added this check if this only if the value is > 2. Would that be okay ?', 'comment_created': datetime.datetime(2020, 8, 21, 9, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474600370, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 21, 10, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474633840, 'comment_body': 'yup, its fine!', 'comment_created': datetime.datetime(2020, 8, 21, 11, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nishantwrp', 'type': 'User'}, {'comment_id': 474671002, 'comment_body': ""Hmm, I still don't see any cases with zeros."", 'comment_created': datetime.datetime(2020, 8, 21, 12, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474671647, 'comment_body': 'In that case, can you add cases with said input?', 'comment_created': datetime.datetime(2020, 8, 21, 12, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474674986, 'comment_body': '""less no of terms"" -> ""fewer number of terms""', 'comment_created': datetime.datetime(2020, 8, 21, 12, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 474799764, 'comment_body': ""oh this comment was meant to be there is no leaner's flow that's why adding an if condition here @aks681 this is correct right ?"", 'comment_created': datetime.datetime(2020, 8, 21, 16, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474800074, 'comment_body': 'linters will fail if i do that', 'comment_created': datetime.datetime(2020, 8, 21, 16, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474800400, 'comment_body': 'yeah just saw that it should be `&&`', 'comment_created': datetime.datetime(2020, 8, 21, 16, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474800849, 'comment_body': ""I don't follow exactly what do you mean by that ? "", 'comment_created': datetime.datetime(2020, 8, 21, 16, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474862611, 'comment_body': '```\r\nexport interface RatioInputEqualRuleInputs {\r\n  x: number[];\r\n}\r\n\r\nexport interface RatioInputHasNumberOfTermsEqualToRuleInputs {\r\n  y: number;\r\n}\r\n\r\nexport type RatioInputRuleInputs = (\r\n  RatioInputEqualRuleInputs |\r\n  RatioInputHasNumberOfTermsEqualToRuleInputs);\r\n```\r\n\r\n@BenHenning it should be this instead of just a number. Correct ?', 'comment_created': datetime.datetime(2020, 8, 21, 18, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 474999369, 'comment_body': ""What's the error message?\r\n\r\nAlso /cc @Hudda @nishantwrp -- why would the linters fail? I thought we enforce 2-space indentation everywhere for JS/TS."", 'comment_created': datetime.datetime(2020, 8, 21, 22, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474999507, 'comment_body': 'I do not understand your previous comment. Please rewrite it again properly.', 'comment_created': datetime.datetime(2020, 8, 21, 22, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474999651, 'comment_body': 'E.g. If x is [2, 4, 6], check for [4, 8, 12], [3, 6, 9] (which are 2x and 1.5x the desired ratio respectively)', 'comment_created': datetime.datetime(2020, 8, 21, 22, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 474999757, 'comment_body': ""No, this validation should still exist. You can't just drop the tests."", 'comment_created': datetime.datetime(2020, 8, 21, 22, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475002225, 'comment_body': ""Instead of ignoring this validation if the value is zero I'm only checking this validation if the value is greater than two. Does that make sense ?"", 'comment_created': datetime.datetime(2020, 8, 21, 22, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475003046, 'comment_body': 'Well, these both sound the same to me, so yup. Though technically I think you mean ""> 0"" in your prior comment.', 'comment_created': datetime.datetime(2020, 8, 21, 22, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475043938, 'comment_body': ""But this tests checks validity for different files but there are certain files that doesn't exist as of now "", 'comment_created': datetime.datetime(2020, 8, 22, 4, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475049228, 'comment_body': 'yeah correct', 'comment_created': datetime.datetime(2020, 8, 22, 5, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475049551, 'comment_body': 'but this tests will fail here because we are not converting the answer to the simplest form. We are only converting the user input in this case but yeah we do have an input validation that will stop the creator from giving such inputs.', 'comment_created': datetime.datetime(2020, 8, 22, 5, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475052153, 'comment_body': 'The default check does not consider classes for indentation rule. We already have this check listed in #8423 ', 'comment_created': datetime.datetime(2020, 8, 22, 6, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475052697, 'comment_body': 'As far as I understand, yes. ', 'comment_created': datetime.datetime(2020, 8, 22, 6, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475052943, 'comment_body': 'I have already updated this @BenHenning  @seanlip can you review this again', 'comment_created': datetime.datetime(2020, 8, 22, 6, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475058920, 'comment_body': 'In what circumstances will it be 0?', 'comment_created': datetime.datetime(2020, 8, 22, 7, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475058995, 'comment_body': '@Hudda but why does the linter fail? We have many other ""export class"" and those have 2-space indentation, so @aggarwalpulkit596 you should still fix this. Perhaps work directly with @Hudda if you arer running into issues with the linter.', 'comment_created': datetime.datetime(2020, 8, 22, 7, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475059156, 'comment_body': 'I\'m afraid I don\'t understand what you are trying to say here. Please be precise: when you say ""answer"" are you referring to the value of x or to the learner\'s answer?\r\n\r\nIn any case I suggest that you have this function convert *both* ratios to the simplest form and then do an equality comparison on them.', 'comment_created': datetime.datetime(2020, 8, 22, 7, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475059297, 'comment_body': ""All the files should be made to exist. If it's the learner view that's a concern, I suggest that you make simple straightforward versions of it that are no more complex than TextInput, and defer to @aks681 to finish them up (please make sure to file an issue enumerating clearly what the remaining work is)."", 'comment_created': datetime.datetime(2020, 8, 22, 7, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475060165, 'comment_body': 'okay got it would do that :)', 'comment_created': datetime.datetime(2020, 8, 22, 7, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475060384, 'comment_body': ""it won't be zero now as we would be throwing a validation error if any term is 0."", 'comment_created': datetime.datetime(2020, 8, 22, 7, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475086393, 'comment_body': ""I'm not entirely sure if we can (or need to) just have placeholder files, just to pass the tests, since the full flow isn't ready yet anyway, and the files would have to be modified a lot anyway. I was actually fine with ignoring RatioExpression for the tests, with an issue filed to revert those lines that can be assigned to me.\r\nSince we aren't showing this in the creator view for now, isn't it fine to do this?"", 'comment_created': datetime.datetime(2020, 8, 22, 12, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 475088580, 'comment_body': 'numbers -> number', 'comment_created': datetime.datetime(2020, 8, 22, 13, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475089081, 'comment_body': 'While editing this cust arg it is allowing decimal values:\r\n![decimals](https://user-images.githubusercontent.com/35144226/90956756-0b641080-e4a7-11ea-9955-2b0c9ee6cb09.gif)\r\n', 'comment_created': datetime.datetime(2020, 8, 22, 13, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475089215, 'comment_body': 'You could add a case with [2, 4, 6] and ensure that the rule returns false for that.', 'comment_created': datetime.datetime(2020, 8, 22, 13, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475089265, 'comment_body': ""Rename this. It's not a list."", 'comment_created': datetime.datetime(2020, 8, 22, 13, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475089497, 'comment_body': '""less no of terms"" -> ""fewer number of terms""', 'comment_created': datetime.datetime(2020, 8, 22, 13, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475090039, 'comment_body': 'This warning is not being displayed:\r\n![nowarning](https://user-images.githubusercontent.com/35144226/90956971-b2957780-e4a8-11ea-9dac-c8f582006881.gif)\r\n\r\nAm I doing something wrong?', 'comment_created': datetime.datetime(2020, 8, 22, 13, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475090263, 'comment_body': 'Add a space after the period.', 'comment_created': datetime.datetime(2020, 8, 22, 13, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475091581, 'comment_body': ""actually 0 isn't a valid input anymore we would be throwing a validation error for 0 input"", 'comment_created': datetime.datetime(2020, 8, 22, 13, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475091796, 'comment_body': 'by writing type `int` should be sufficient right? or should some other check for this', 'comment_created': datetime.datetime(2020, 8, 22, 13, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475091842, 'comment_body': 'let me check', 'comment_created': datetime.datetime(2020, 8, 22, 13, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475092117, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 22, 13, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475092263, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 22, 13, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475092452, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 22, 13, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475092453, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 22, 13, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475092571, 'comment_body': ""The object type should be a NonNegativeInt (which I think you have used), so I'm not sure why it's allowing decimal values as well. Please dig a little more and see other usages of this object and make sure you're using it right."", 'comment_created': datetime.datetime(2020, 8, 22, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475093703, 'comment_body': 'i just checked item selection interaction and that one too allows floating point values', 'comment_created': datetime.datetime(2020, 8, 22, 13, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475094960, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 22, 14, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475103410, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 22, 15, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475103414, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 22, 15, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475108562, 'comment_body': '@seanlip it depends on the first indentation, if the first indentation is of 4 spaces, then it will allow 4-space indentation, if the first indentation in class is of 2 spaces, then all indentation below it should be of 2-spaces', 'comment_created': datetime.datetime(2020, 8, 22, 16, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475108565, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2020, 8, 22, 16, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475139969, 'comment_body': ""Yup, I'm also fine with that as long there's a TODO/issue for reverting, which seems to be missing here."", 'comment_created': datetime.datetime(2020, 8, 22, 21, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475141494, 'comment_body': 'INVALID_FORMAT is too vague. Everything here is an ""invalid format"" and that error message is not helpful for the student. Be clearer about what exactly this particular regex is catching.', 'comment_created': datetime.datetime(2020, 8, 22, 21, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475141606, 'comment_body': '""elements"" suggests an array. If you\'re talking about a single number here, use ""element"".', 'comment_created': datetime.datetime(2020, 8, 22, 21, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475141636, 'comment_body': 'Is this private? If so, prefix with ""private"".', 'comment_created': datetime.datetime(2020, 8, 22, 21, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475141702, 'comment_body': 'covert --> convert\r\n\r\nYou can still add 0 cases, since those tests would still be relevant if 0 was accepted as an input in the future.', 'comment_created': datetime.datetime(2020, 8, 22, 21, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475141785, 'comment_body': ""Don't use INVALID_FORMAT -- have a more specific error. The actual error message you have in this case is good but perhaps you can reconceptualize it as RATIO_PARSING_ERRORS.EMPTY_STRING"", 'comment_created': datetime.datetime(2020, 8, 22, 21, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475141915, 'comment_body': '```\r\n\'description\': (\r\n    \'The number ...\'\r\n    \' If set to ...\'\r\n)\r\n```\r\n\r\nAlso, note that you do not need a ""+"" between the lines (in Python). They will be automatically concatenated.', 'comment_created': datetime.datetime(2020, 8, 22, 21, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475141958, 'comment_body': 'simplified is misspelled', 'comment_created': datetime.datetime(2020, 8, 22, 21, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475142067, 'comment_body': ""Also, this validation removal needs to be over a range of code that is as small as possible. Only apply it to the specific parts which are going to be implemented by @aks681, not a blanket exception for the whole thing. Most of the checks here should still apply to what you've implemented so far."", 'comment_created': datetime.datetime(2020, 8, 22, 21, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475142131, 'comment_body': 'As above; please clarify this comment, file a TODO/issue, etc.', 'comment_created': datetime.datetime(2020, 8, 22, 21, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475172354, 'comment_body': 'nope this is not private', 'comment_created': datetime.datetime(2020, 8, 23, 5, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475172566, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 23, 5, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475172810, 'comment_body': 'This error would handle only cases which have a format like `:2:3:4` missing a digit in the first place or `1:2 3:4` missing a colon between digits. So I think this message is quite straight forward for such cases. Below is the list of \r\nerror codes https://docs.google.com/spreadsheets/d/1UzWpcp5zsJbRf892zB3taOjTecGT8bi4Gj0_JBnv9Mc/edit#gid=0 ', 'comment_created': datetime.datetime(2020, 8, 23, 5, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475172960, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 23, 5, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475173165, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 23, 5, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475173187, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 23, 5, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475173234, 'comment_body': 'Hm, OK. In that case, perhaps add a comment here with the examples you gave.', 'comment_created': datetime.datetime(2020, 8, 23, 5, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475173257, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 23, 5, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475173808, 'comment_body': '@seanlip is there anything else that I need to fix other than checks for tests? Just heads up so that I could replicate the same thing in android.', 'comment_created': datetime.datetime(2020, 8, 23, 5, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475189238, 'comment_body': ""My previous set of comments should be comprehensive, unless I've missed something."", 'comment_created': datetime.datetime(2020, 8, 23, 8, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475264046, 'comment_body': 'updated with a customization arg warning ', 'comment_created': datetime.datetime(2020, 8, 23, 20, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475509723, 'comment_body': 'Zeros are not allowed in the input, right? If so, I think these tests should throw an error.', 'comment_created': datetime.datetime(2020, 8, 24, 10, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475509909, 'comment_body': 'Incorrect spelling.', 'comment_created': datetime.datetime(2020, 8, 24, 10, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475514235, 'comment_body': ""A couple of minor things to note:\r\n - This warning gets shown even when it's not really relevant, for eg, when the input field is empty.\r\n - You may want to change the isInt checker -- I entered a decimal and it got rounded off to an integer\r\n\r\n![nits](https://user-images.githubusercontent.com/35144226/91036609-44c28a80-e625-11ea-9842-0a6ec57348d4.gif)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 24, 10, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 475522538, 'comment_body': ""why would someone would want to enter such value in the first place and it does get's rounded off because that's done by javascript itself and it cannot store that value so it would just round of that value which i think is completely fine.\r\n@BenHenning @seanlip your thoughts ?\r\n."", 'comment_created': datetime.datetime(2020, 8, 24, 11, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475523212, 'comment_body': ""no, it shouldn't throw an error because 0:2 is a valid ratio input and if we want to allow this input as valid we just need to remove the frontend validation nothing else. @seanlip your thoughts?"", 'comment_created': datetime.datetime(2020, 8, 24, 11, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475745595, 'comment_body': ""Thanks @iamprayush for checking this.\r\n\r\n@aggarwalpulkit596 could we guard against this by also ensuring the input doesn't contain a decimal at all? That might be a more reliable check than the mod check currently being done.\r\n\r\nAlso, shouldn't we ensure the number of terms are also > 0?"", 'comment_created': datetime.datetime(2020, 8, 24, 16, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475748299, 'comment_body': ""I thought we decided that we weren't accepting 0s in any of the ratios, per an earlier comment thread on this PR."", 'comment_created': datetime.datetime(2020, 8, 24, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 475748376, 'comment_body': 'We could do that but instead of doing the above displaying error message is much more sensible to me as we can customise this message as per needs instead of just not allowing the input in the first place and yes we are ensuring of a positive number here and this same approach is being used for the text input interaction number of rows as well so i think we should stick to this only.', 'comment_created': datetime.datetime(2020, 8, 24, 16, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475749159, 'comment_body': 'Sean insisted to add a check for zero input so that if in future we allow ratio with zero we can leverage that', 'comment_created': datetime.datetime(2020, 8, 24, 16, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475864699, 'comment_body': ""Yup, I think that's still fine. But shouldn't the simplified value be [0, 0, 1] since the gcd of 0, 0 and 4 is 1?"", 'comment_created': datetime.datetime(2020, 8, 24, 20, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475865739, 'comment_body': ""@aggarwalpulkit596 I've read your last comment three times and I still can't figure out what it is saying. Can you please use shorter sentences and be clear about what approach you want to pursue (precisely) and why?"", 'comment_created': datetime.datetime(2020, 8, 24, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475865815, 'comment_body': ""I'm just returning the original value as it is in case of 0 i could change this but i think it should be returned as it is in case any of the term is zero"", 'comment_created': datetime.datetime(2020, 8, 24, 20, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475866627, 'comment_body': ""What you're proposing is not correct mathematically; the correct return value in such a case is [0, 0, 1]."", 'comment_created': datetime.datetime(2020, 8, 24, 20, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475866990, 'comment_body': ""I'm just saying that instead of not able to type decimal values we should be throwing an error because that way we could customize the message that would be shown to user.\r\nIf we disable it right away creator might think why he's not able to type decimal."", 'comment_created': datetime.datetime(2020, 8, 24, 20, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475867228, 'comment_body': '@seanlip does that clarifies ?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475867993, 'comment_body': 'Okay would do that ', 'comment_created': datetime.datetime(2020, 8, 24, 20, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 475868196, 'comment_body': 'Yes, that sounds fine to me. Just make sure that the submit button is properly disabled (it should not be green and clickable) if the decimal is invalid.', 'comment_created': datetime.datetime(2020, 8, 24, 20, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475868986, 'comment_body': ""That's already being taken care of."", 'comment_created': datetime.datetime(2020, 8, 24, 20, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476186045, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 5, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476186291, 'comment_body': '@seanlip should I change the warning message in the case of empty value?', 'comment_created': datetime.datetime(2020, 8, 25, 5, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476194849, 'comment_body': 'Yup, always be specific. Thanks! ', 'comment_created': datetime.datetime(2020, 8, 25, 5, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476206278, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 6, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476212370, 'comment_body': '@seanlip i just need to clarify one thing that if terms are 2, 0, 4 in that case the simplest form would be 1, 0, 2 right ?', 'comment_created': datetime.datetime(2020, 8, 25, 6, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476213132, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476216752, 'comment_body': ""I'm just asking this because `0` is taken as an invalid input especially in case of a list and if I do handle such cases I have to basically iterate over every element and check whether that number is zero or not."", 'comment_created': datetime.datetime(2020, 8, 25, 6, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476223486, 'comment_body': '@seanlip done', 'comment_created': datetime.datetime(2020, 8, 25, 7, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476223618, 'comment_body': '@iamprayush done', 'comment_created': datetime.datetime(2020, 8, 25, 7, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476232231, 'comment_body': ""You don't actually need the branching here. Just returning currentValue/gcdResult will give you the correct answer."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476234415, 'comment_body': 'Ditto on Android @aggarwalpulkit596. I missed this when reviewing that code earlier. :)', 'comment_created': datetime.datetime(2020, 8, 25, 7, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476235950, 'comment_body': ""Newline above this for consistent spacing.\r\n\r\nAlso, please add documentation for this function since it may not be obvious to the reader what 'simplest form' means in this context."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476236071, 'comment_body': ""We call these 'components' on Android. Let's be consistent."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476236675, 'comment_body': ""It seems like this should actually be part of the ratio object, not a generic function for checking if two arrays of numbers are equal (e.g., it's more semantically meaningful & relevant to be checking the equality of two ratios instead)."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476237306, 'comment_body': ""It may be cleaner to return a ratio object here rather than an array of numbers. Using 'Ratio' everywhere that we can seems preferable since it's a dedicated & semantically defined type to represent ratios vs. a more generic array of numbers."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476237726, 'comment_body': ""Shouldn't we just be checking if it contains a non-integer? E.g. ``/[^\\d:]?/g``"", 'comment_created': datetime.datetime(2020, 8, 25, 7, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476240033, 'comment_body': '0/0 would lead to undefined value.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476240665, 'comment_body': '```suggestion\r\n  it(\'should return the correct length of list\', () => {\r\n```\r\n\r\nAlso, this doesn\'t quite read correctly. The full test would read ""Ratio Object Factory should return the correct length of list"" but what you\'re really testing is ``getNumberOfTerms``. See other test suites for an example. In cases like this, we usually cascade the describes to make the suite clearer, e.g.:\r\n\r\n```typescript\r\ndescribe(\'RatioObjectFactory\', () => {\r\n  describe(\'.getNumberOfTerms()\', () => {\r\n    it(\'should return the number of components\', () => {\r\n      ...\r\n    })\r\n  })\r\n})\r\n```\r\n\r\nIn this way, the test is contextualized.\r\n\r\nDitto for all other tests in this suite. Generic properties being evaluated can be top-level, but otherwise the API should be in the nearest \'describe\'.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476240894, 'comment_body': 'Please split into a test for each distinct error being checked since each one is a different behavior.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476242047, 'comment_body': 'Empty line above for consistent spacing.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476242392, 'comment_body': ""```suggestion\r\n      'Ratios cannot have 0 as a element.',\r\n```\r\n\r\nOtherwise this reads slightly like broken English."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476242976, 'comment_body': 'Suggest renaming ``toString`` to clarify that it converts the object to a valid answer string (e.g. ``toAnswerString``) & add corresponding documentation to the method to make this clear.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476243793, 'comment_body': ""Nit: add below ``NumberWithUnits`` for consistency with how you've been ordering this elsewhere in the PR (in general, try to keep code in a consistent order when updating it).\r\n\r\nDitto for all other changes in this PR that involve adding a ratio expression input-related line (please make sure it's consistently in the same place everywhere)."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476247638, 'comment_body': ""This test seems to be verifying three distinct behaviors: I suggest splitting this up into three distinct test (quick check is if you test doesn't look like it has single arrange, act, assert blocks in that order, then that indicates your test is probably verifying multiple behaviors)."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476247880, 'comment_body': 'Suggest also adding a test for the number of terms being empty vs. undefined. Also, when is it valid for the value of number of terms to be undefined and not empty?', 'comment_created': datetime.datetime(2020, 8, 25, 7, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476249683, 'comment_body': '```suggestion\r\n    // The following validations ensure that there are no redundant rules present in\r\n    // the answer groups. In particular, an Equals rule will make all of the following rules\r\n    // with a matching input invalid. A HasNumberOfTermsEqualTo rule will make the\r\n    // following rules of the same rule type and a matching input invalid.\r\n```\r\n\r\nSuggested rewording--just some grammar nits. Also note how the documentation was changed to flow like a paragraph vs. being close-by single-line doc comments.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476251018, 'comment_body': 'Are there tests covering both this & the above error?', 'comment_created': datetime.datetime(2020, 8, 25, 7, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476252143, 'comment_body': 'This line-wrapping seems wrong. I suggest using a template string (https://basarat.gitbook.io/typescript/future-javascript/template-strings) here to avoid concatenation, and then reformat it so that continuation is one level indented (2 spaces) from the original variable. Ditto elsewhere.', 'comment_created': datetime.datetime(2020, 8, 25, 7, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476252895, 'comment_body': ""Suggest moving this condition logic to a helper to associate it with a single conceptual meaning to simplify the logic happening here (it's currently a bit hard to follow)."", 'comment_created': datetime.datetime(2020, 8, 25, 7, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476253348, 'comment_body': 'Suggest moving this to a helper to simplify the conditional (see my related comment below).', 'comment_created': datetime.datetime(2020, 8, 25, 8, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476253701, 'comment_body': '```suggestion\r\n            # TODO(#10212): Ignoring the RatioExpressionInput for now as\r\n```\r\n\r\nFor consistency.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476254128, 'comment_body': ""Please be specific to what needs to be removed (since we certainly don't want to remove the whole test here)."", 'comment_created': datetime.datetime(2020, 8, 25, 8, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476254791, 'comment_body': 'Add space after ``:`` here to be consistent, as well.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476255134, 'comment_body': 'Is this relevant? It seems like only ratio expression input is being ignored.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476256481, 'comment_body': '``is equal to`` similar to other equals rules.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476258269, 'comment_body': ""```suggestion\r\n  it('should initialize ctrl.warningText with a non-integer ratio', function() {\r\n```\r\n\r\nDitto elsewhere for the test wording."", 'comment_created': datetime.datetime(2020, 8, 25, 8, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476258937, 'comment_body': ""This test description doesn't seem to match the value being asserted--please clarify the test name."", 'comment_created': datetime.datetime(2020, 8, 25, 8, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 476269085, 'comment_body': 'Then the issue is with gcdResult being 0, right, not currentValue?', 'comment_created': datetime.datetime(2020, 8, 25, 8, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476271035, 'comment_body': ""That's correct also if the result is 4 and we do 0/4 in that case js foes throw an of undefined idky 😅"", 'comment_created': datetime.datetime(2020, 8, 25, 8, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476272149, 'comment_body': ""> That's correct also if the result is 4 and we do 0/4 in that case js foes throw an of undefined idky \r\n\r\nI really cannot understand what you are writing, but typing `0/4` in a browser console gives me `0`, as expected..."", 'comment_created': datetime.datetime(2020, 8, 25, 8, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476273628, 'comment_body': 'we could do that as well but in this case, we wanted to specific about the fraction or decimal values.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476278185, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 8, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476285636, 'comment_body': ""It wouldn't make any sense to me because if we do that we need to convert it again to a number list in order to save it into the backend."", 'comment_created': datetime.datetime(2020, 8, 25, 8, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476286449, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 8, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476287578, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 8, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476288226, 'comment_body': 'there would be a bunch of files that need to be taken care of should I specify all of them? it would be roughly 6 - 8 files', 'comment_created': datetime.datetime(2020, 8, 25, 8, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476288284, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 8, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476288627, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 8, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476288711, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 8, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476298824, 'comment_body': '@aggarwalpulkit596 Could you please not delete all these newlines? They are here intentionally to break up the test into segments. Leave them as they were.', 'comment_created': datetime.datetime(2020, 8, 25, 9, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476298931, 'comment_body': ""Here and elsewhere, please **do not introduce new pylint pragmas**. We already have enough of them that we're trying to get rid of. If you are unsure about how to avoid a particular pragma, you can consult @Hudda."", 'comment_created': datetime.datetime(2020, 8, 25, 9, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476318986, 'comment_body': '```suggestion\r\n  Equals(\r\n      answer: RatioInputAnswer, inputs: RatioInputEqualRuleInputs): boolean {\r\n    return this.ratioObjectFactory.arrayEquals(answer, inputs.x);\r\n  }\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476321696, 'comment_body': '```suggestion\r\n      stateName: string,\r\n      customizationArgs: RatioExpressionInputCustomizationArgs,\r\n      answerGroups: AnswerGroup[], \r\n      defaultOutcome: Outcome): Warning[] {\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476324607, 'comment_body': 'Why these changes, the lines are shorter than 80 lines.', 'comment_created': datetime.datetime(2020, 8, 25, 9, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476325139, 'comment_body': 'Why is this removed?', 'comment_created': datetime.datetime(2020, 8, 25, 9, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476326515, 'comment_body': 'Also, it is not needed here since the line is shorter than 80 characters.', 'comment_created': datetime.datetime(2020, 8, 25, 9, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476327145, 'comment_body': 'Also, a lot of unneeded changes in this file.', 'comment_created': datetime.datetime(2020, 8, 25, 9, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476360303, 'comment_body': '@aggarwalpulkit596 This is still not done. If invalid inputs like \'--3\' or \'++3\' are entered, the warning reads ""Number of terms cannot be empty."" which is not right.\r\nAlso, if a negative number is entered, no warnings are shown, only the save button is disabled and the input box turns red.', 'comment_created': datetime.datetime(2020, 8, 25, 10, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 476426847, 'comment_body': 'We could handle negative values but handling something like expression is not feasible because an empty value and a value like `--1`  both are treated as undefined because we are having the type as a number so we could a common message for both @seanlip @iamprayush any suggestion what should be the warning message?  ', 'comment_created': datetime.datetime(2020, 8, 25, 12, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476428328, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 12, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476429730, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476430987, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476431681, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476432687, 'comment_body': ""Didn't get it what you are asking here?"", 'comment_created': datetime.datetime(2020, 8, 25, 13, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476433958, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476434046, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476437699, 'comment_body': ""we can't have an empty value because we have bounded type as a number for customization arg and for the number, there is no such thing as empty value."", 'comment_created': datetime.datetime(2020, 8, 25, 13, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476438476, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476439577, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476439734, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476445547, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476445645, 'comment_body': 'In one of the places, we want to check this equality of arrays and by default, there are in the format of a list of integers and does not make any sense to me to convert it first to Ratio and then check it.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476449263, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476449707, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476450149, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476453539, 'comment_body': 'I could write a test for empty value but that would never be achieved until we make changes in backend and frontend both.', 'comment_created': datetime.datetime(2020, 8, 25, 13, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476454369, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476454877, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 13, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476490525, 'comment_body': 'Yes i would be reverting them ', 'comment_created': datetime.datetime(2020, 8, 25, 14, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476491621, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476493396, 'comment_body': ""Nevermind it's done now.\r\nI misinterpreted some other test which lead to the above statement."", 'comment_created': datetime.datetime(2020, 8, 25, 14, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476495008, 'comment_body': 'Would be reverting them.', 'comment_created': datetime.datetime(2020, 8, 25, 14, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476618870, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 8, 25, 17, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476618940, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 8, 25, 17, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476654125, 'comment_body': ""It's is being checked for both of the cases"", 'comment_created': datetime.datetime(2020, 8, 25, 18, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476672163, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 19, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476676205, 'comment_body': ""@seanlip @iamprayush just to clarify the above comment\r\nIn the backend, for numberOfTerms customization arg we type as number and if anything other than number is given as input - e.b --1--1 or -1-1-1-1 or any expression it would basically convert it to undefined and therefore we can't have different warnings for empty and invalid values(empty value is undefined too).\r\n\r\nI was thinking to show a common warning if the value is defined and we are already handling negative and decimal values separately.\r\n\r\nError message \r\nUndefined Value(Empty Value too) -  Number of terms should be an integer value.\r\nDecimal Value -  Number of terms cannot have decimal places.\r\nNegative Value -  Number of terms must be a positive integer."", 'comment_created': datetime.datetime(2020, 8, 25, 19, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476676409, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 19, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 476699123, 'comment_body': ""Still not done? It's not `RatioAExpressionInput`, right?\r\nHave you verified locally that this is not visible in the customize interaction modal?"", 'comment_created': datetime.datetime(2020, 8, 25, 19, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 476700981, 'comment_body': 'Add both these in the same line?', 'comment_created': datetime.datetime(2020, 8, 25, 19, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 476701325, 'comment_body': 'Not done? Line wrapping is still wrong, since this line just has (i+1).', 'comment_created': datetime.datetime(2020, 8, 25, 19, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 476713540, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 25, 20, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477119826, 'comment_body': ""Thanks for the clear explanation, @aggarwalpulkit596! The error messages you've listed above seem fine to me."", 'comment_created': datetime.datetime(2020, 8, 26, 8, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'iamprayush', 'type': 'User'}, {'comment_id': 477126252, 'comment_body': ""```\r\n        'description': (\r\n            'The number of elements that the answer must have.'\r\n            ' .... ')\r\n```"", 'comment_created': datetime.datetime(2020, 8, 26, 8, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 477127173, 'comment_body': 'Use parens if you are breaking a statement across multiple lines.', 'comment_created': datetime.datetime(2020, 8, 26, 8, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 477128095, 'comment_body': 'Ah, I see. Then let\'s just go with a standard ""The number of terms should be a positive integer."" for all the cases.', 'comment_created': datetime.datetime(2020, 8, 26, 8, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 477128897, 'comment_body': 'Yes. The instructions in a TODO should be fully explicit.\r\n\r\nIn addition, the TODO is in the wrong place. Put it at the places which need to be removed. Make it so that the person who is sorting out the TODO has to do as little work as possible to figure out what is going on.\r\n\r\nFinally, phrase your TODO as an instruction. ""Remove ... as soon as ..."". You don\'t need all the preamble, just state the action to be done, and the trigger for when it can be done.', 'comment_created': datetime.datetime(2020, 8, 26, 8, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 477129776, 'comment_body': '@iamprayush updated', 'comment_created': datetime.datetime(2020, 8, 26, 8, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477130183, 'comment_body': 'Are you forbidding 1 and negative numbers and non-integers and null/undefined from being submitted in the frontend? If not, you should, to make it consistent.', 'comment_created': datetime.datetime(2020, 8, 26, 8, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 477132469, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 26, 8, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477133008, 'comment_body': 'got it', 'comment_created': datetime.datetime(2020, 8, 26, 8, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477133213, 'comment_body': 'yes we are forbidding that', 'comment_created': datetime.datetime(2020, 8, 26, 8, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477134813, 'comment_body': ""the break wasn't needed in the first place, therefore moved to a single line instead."", 'comment_created': datetime.datetime(2020, 8, 26, 8, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477137314, 'comment_body': ""Updated @seanlip . Let me know if there's anything missing."", 'comment_created': datetime.datetime(2020, 8, 26, 8, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477147398, 'comment_body': ""moved to a single line as break wasn't needed"", 'comment_created': datetime.datetime(2020, 8, 26, 9, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477147427, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 8, 26, 9, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477450230, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 8, 26, 16, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477451152, 'comment_body': ""couldn't think of anything much simpler also think keeping the logic here makes more sense as the person using this could read out the thing straight away. Same for below"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 477471786, 'comment_body': 'Is this not used?', 'comment_created': datetime.datetime(2020, 8, 26, 17, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 477480174, 'comment_body': 'Removed. Thanks ', 'comment_created': datetime.datetime(2020, 8, 26, 17, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478003870, 'comment_body': 'I suggest checking for all non integer cases here, unless that’s covered elsewhere. It will make the overall checking more robust. For example, what error will be shown for the input string: “1$:4”?', 'comment_created': datetime.datetime(2020, 8, 27, 3, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478011924, 'comment_body': 'Are we verifying anywhere that this can’t be 1?', 'comment_created': datetime.datetime(2020, 8, 27, 3, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478012904, 'comment_body': 'Space before boolean', 'comment_created': datetime.datetime(2020, 8, 27, 3, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478024500, 'comment_body': '#10212 doesn’t seem like the right reference here. Please fix. ', 'comment_created': datetime.datetime(2020, 8, 27, 3, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478037844, 'comment_body': 'Is this done @aggarwalpulkit596 ?', 'comment_created': datetime.datetime(2020, 8, 27, 3, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478045121, 'comment_body': 'The confusion is that the reader doesn’t need to understand the nuances of the check to reason at the conditional level here. As written, this is hard to read. Consider one alternative:\r\n\r\n```typescript\r\nif (!isInExpectedSimplestForm(currentRuleType, ratio, input)) { \r\n```\r\n\r\nYou could also split the check into two helper methods. The problem is there are irrelevant details which are adding to the visual complexity of this conditional check. Factoring the logic into helpers puts a named context on what’s being checked and hides the extra details. ', 'comment_created': datetime.datetime(2020, 8, 27, 3, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478097194, 'comment_body': ""No we don't check this because this logic only works if value is greater than 2 otherwise treat this as 0 and don't throw any errors for learner"", 'comment_created': datetime.datetime(2020, 8, 27, 4, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478098501, 'comment_body': '$ is an invalid sign so invalid character error would be thrown here.', 'comment_created': datetime.datetime(2020, 8, 27, 4, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478103221, 'comment_body': 'Just to clarify this if we write anything less than 2 for example 0 or 1 in that case if the user writes something 1:2:3 this would be valid but if the creator sets the value as 4 in that 1:2:3 would lead to a submit time error in Android. Does that make sense?\r\n Also, i did have this conversation with sean and we agreed on having the term as 0.', 'comment_created': datetime.datetime(2020, 8, 27, 4, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478114166, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 4, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478118337, 'comment_body': '#10460 updated.', 'comment_created': datetime.datetime(2020, 8, 27, 4, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478198509, 'comment_body': 'resolving this', 'comment_created': datetime.datetime(2020, 8, 27, 6, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478275350, 'comment_body': ""You can't treat 1 as 0. That's unclear.\r\n\r\nMy suggestion would just be, in the logic, to treat 1 as representing a 1-element ratio (no colons). I know that can't happen in practice but that would help make the logic of the check simpler and clearer.\r\n\r\nMake sure also that in the editor we forbid creators from specifying 1. (Or, TBH, I'm also OK with allowing 1 if that makes things simpler.)"", 'comment_created': datetime.datetime(2020, 8, 27, 9, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478281196, 'comment_body': ""In the current scenario if the creator enter's 0(default) or 1 that wouldn't affect anything because current logic works if the number of terms is greater than 2. We could show a description text that entering 0 or 1 won't have any effect. Would that work? @seanlip "", 'comment_created': datetime.datetime(2020, 8, 27, 9, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478281930, 'comment_body': ""Also if learners are entering 1: that would give a validation error and won't allow the user to submit the answer in the first place so it doesn't make any sense."", 'comment_created': datetime.datetime(2020, 8, 27, 9, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478283030, 'comment_body': '@seanlip @BenHenning we could show a warning if the number of terms is 1 but it would be confusing that having 0 is okay but having 1 is not allowed that sounds a bit weird to me.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478295198, 'comment_body': 'For the 1 case, I meant just ""1"", not ""1:"". Wouldn\'t that work? I\'m OK with ""1"" being considered OK for now, at least in the backend; strictly speaking, it shouldn\'t mess up any of the checks. You can still have a validation error for it in the editor frontend.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478315581, 'comment_body': ""nope, that won't work it would throw a frontend validation error (for the creator). If you referring to leaner's flow we could change that but for now, that too does throw a validation error. \r\nAlso it would mess up the backend because we have validation of `is_atleast` with a value of 2"", 'comment_created': datetime.datetime(2020, 8, 27, 10, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478319333, 'comment_body': 'OK, I think there is some confusion. My suggestion is:\r\n\r\n- For creators, have a validation error in the frontend if they enter anything that is not ""0"" or an integer >= 2.\r\n- For learners, accept ratios that have the correct number of elements as stated by the cust. arg. If the cust. arg value happens to be 1 (which it won\'t be), just have the validation be that it\'s a single integer (with no colons). You do not need to check the validity of the cust. arg.\r\n- For the backend, the code that this comment is attached to has a validation of ""at least 0"", which is correct.', 'comment_created': datetime.datetime(2020, 8, 27, 10, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478323868, 'comment_body': 'For creators, have a validation error in the frontend if they enter anything that is not ""0"" or an integer >= 2.\r\nyou mean integer <=2 correct?', 'comment_created': datetime.datetime(2020, 8, 27, 10, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478325018, 'comment_body': '... that is not (""0"" or an integer >= 2).', 'comment_created': datetime.datetime(2020, 8, 27, 10, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478329679, 'comment_body': 'Thanks for the clarification :) Also for the error message if the value = 1 \r\n`Number of terms cannot be 1`\r\nThe above message would be sufficient or should i add some context for the creator?', 'comment_created': datetime.datetime(2020, 8, 27, 10, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478332723, 'comment_body': '""The number of terms in a ratio should be greater than 1"" is sufficient.', 'comment_created': datetime.datetime(2020, 8, 27, 11, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478584691, 'comment_body': 'This & above need to be column aligned like the strings below.', 'comment_created': datetime.datetime(2020, 8, 27, 17, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478585342, 'comment_body': 'Suggest adding parenthesis to the return, e.g. ``return (currentRuleType...)`` then fix the indentation here to be correctly aligned & continued (we always continue & align at 2 spaces further than the indentation of the line containing the open parenthesis.', 'comment_created': datetime.datetime(2020, 8, 27, 17, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478609025, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 18, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478609042, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 27, 18, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aggarwalpulkit596', 'type': 'User'}, {'comment_id': 478724078, 'comment_body': ""Doesn't seem done--``seenRuleType...`` is still not indented as expected."", 'comment_created': datetime.datetime(2020, 8, 27, 22, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478756721, 'comment_body': ""Suggest adding a ``(`` after the ``&&`` to fix indentation. I actually think the linter is wrong here.\r\n\r\n@bansalnitish & @Hudda FYI--is the linter correctly prohibiting indentation here? It doesn't seem correct since nested expressions should continue indentation from their parent nodes in the AST."", 'comment_created': datetime.datetime(2020, 8, 27, 23, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 478764078, 'comment_body': 'FYI, the usual convention for this sort of thing is:\r\n\r\n```\r\n      return (\r\n        currentRuleType === \'HasNumberOfTermsEqualTo\' &&\r\n        seenRuleType !== \'HasNumberOfTermsEqualTo\' &&\r\n        ratioRulesService.HasNumberOfTermsEqualTo(\r\n          seenInput, {y: currentInput}));\r\n```\r\n\r\nI.e. if a statement spans more than 1 line overall, add a ""("" at the beginning of it and break after the ""("".', 'comment_created': datetime.datetime(2020, 8, 28, 0, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': '70d38d2e50cd62470400d5761ead20ce4ebe9298', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9438c9a887dc80f01a8f64d867c263eceb307bb9', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '808116fba0757085023d886fd94815737ccc0b94', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '709e52d5d3320cb8a76523e94ab9bf13db5843e8', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4816a90061b881d4158ce46433d3849101147415', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5f60630b2173f5c9df0f8766cea0b9c381197d6', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '698e59c2667c078cf19492d04f58d30e8c4efb1c', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c51f2ece95df882ca626d608c212ab084b5804b', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df3535ab944e24c04b2ab03883edf7892c47bbce', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c6a422ca01bd6101a147e3b7c8f2cbc4533c0e4', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61e884a2981eceec64f070a5e5ca002b0aa05b43', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7e2eb65a2a6a450496c5b888ca9f1f4fe6bdd45', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7e48fff4dfd50293d304e580f2379ec1bbb94d4', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b53b5fe0cf1bf7dd9ca02f1f84e844dd581573', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6666924005afcaca2f67528f4ea983ad2315925f', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e347eb445849499362ec2020c936c68afa54d3', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3ef98fa5eaeaf9673d50b292958e5bae209efc0', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db238cf34fda19d4fd9dedc72f1e503540262c04', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e4e760dd52f55df648a961f3c0e99a7e24e7aa', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a9e8c50dd1c1754f94fed482135d11fe45d9b40', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e7dad7d539e196690c74fedf44aaa897f1896ed', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e15dd4181b69083f24a392101dd65c779f9f81', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de3447b610d78de701fa967da3c84da01a20145c', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7fa84f15d2a8597a0362f99a713454aa8b56fc5', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929e6f4d1a448d1fba7470ed2038386eb2a4135f', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b86bba5287bb3eefbd909387842011815223025a', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37be9e4fe24ffef76d68d792d37f4fbbcad25d87', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8d22234720bdec7d92828627eaf2ce257e876f4', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4de6dd11f1aad421dc2c1c5870d414144d9cdf76', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14f4c8d2439eff3c0d6c030fa997db9f46c0fb70', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cd0bf3214b36e8b79a2813c4d18226325211cee', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '350e0bd9df380efc77950d7f0f80c57398278707', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cffdeb067b6ae0d1e565e8433418c0956b89544d', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a8a220f970d8536b02ca77639a058d05ff1c4d', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0476ad8dff2e9a68871919f69109be92fc4cdc4e', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca239af48f19074c4425599a5748a259d930d602', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c977c013e6726a6713b4971a2251db570d7efe58', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc7843961d55536b5b783b3fdf5a04f97d93d65', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea169e3fd1a1be5877d5e3ee4c13de79b33a9e5e', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009feedbfa663fc5e080fbdb8bea29e5903496b7', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b28c89485795e79fae6cbc9e606851562c3dfa4e', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '587d26fcc30b0aa1ae257ace3b7b6372faa7bb72', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baee33eec118ccffa9b97d516aba6a60b2b2d63c', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af06fb87bbf4a5b34f87bb197c182ca072149e3a', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5cd1394ade2bbc63e4cf4f2a6103fe664f77e9d', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd605294cd271d461d306c3f87e49efe202bfa79f', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3d0e085bbc0933fb5c93d23fe963ff45cb021e7', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3236134f2061619be0482cf08d88d92305eea4', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39b51739b78f64479e93f27ecb2de0fe487c117d', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34c29cface9393fc45d40c8855851d3b0f62947f', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a1a60ca4a5457f6ad58779442709a072055e56a', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbfcd67d0bd63a57ea1b95d6be747290b8d55102', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab6a0b3383164cd31029cddbda729ceb4d4feae', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2860a1f66f633eec71691e610cd86a36b26bfb4', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24f3d011536d7af405992cb4be10ab3afa29c978', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7904dd72940de12f9922e5f3373ca9b83a3f4d8', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38587b22abe37bfb4a448517d0b36e3ce9a05af6', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39fbef4a4559487dd8fa5a44e4fdd6eef7799eab', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3abf13e9ddc1ff964d0981815dddab68f7765d5', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c21fbc336d99b623ca7ad4bbaa2b96e8ab76a9f', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13c00af409b978d0b43b126e19eb05ab60c36a03', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3071d025f183c70982e672b42a139ca064b06f', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3cb12dc095ebf1fa5d17cfe6961469a3654f769', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e66bedc2c65c8aad8fa74c3be146d9c3a5d1fcb1', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c40dd9b9348686fbb7f85724ad9a5a692c3176a6', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02982ba5fa3279d6279d6c2493b0b06a3a37e748', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4171889f4b619d544e5e0f20eeef2d570ef26e8e', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0de89edae6adee9aa4bdfc4545937e2ef6e7e425', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebfb5144c1b2e058b0ba1169fccd13bd538625da', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb12bb575bcabe807ab328693c6ca1de3ef3f36d', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5724db775374059be027fe4eb13e441d2a486e12', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72f4c6f5616cadc39f0f0762f086bafda0737faf', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45dfc6b51b7d5feb946b086ef3a5d70b8d9914ef', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ae65a0792cad5222a03f253204a4006d6b5467', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe83203e6886a067b8ae0f8894f38a482c7365d9', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71fb2b90ab4eb059e1bae186f8f2be4cb693181c', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e61c7a01d540e81d957e99820937b3f7ab973da3', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '744a493aa264405568eaed07e86ae3ea69665324', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dc9797690e6c900fda2bbf3c449645dddeea501', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '340ce09baa2ef2d552d82859d88278960d289f15', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba56f7da498481ba985bc0efe1a055e9f01a32f9', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54738b63dd8a25bfd413981303f4a6700a8c0dd9', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b23a0d9b8a47b68d7a3d5a0b10d1ab23af5150c', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3771c3265ef082bfd7daf65c3a0b547923eab8e0', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1d121747ec0c5b51c112f2a64703cffa667a51e', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ac8330626d42d201a042cfca77923e089df79a', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d4d90d0feae8a93cf737fe7939ae42230fdc60e', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c65d1e31a7fb5bf3156353f960e41a034ca418c1', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1886d6054f922014576d04b5bfe10ef89fda32a1', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '549e7ab69b2fea8728ccf03b2907390dc1d0afb6', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '489aeb81af0580502d634c5293ca597432a556c6', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ef6928a77afce47f2bfc4da947a215840a1c3ec', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d7e1c49bbb6c9ad58481fcdf39d1de7743d9c02', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f97397926af740b9e9d1945b46a9f7c7a7bad6e', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '598cd7c86286eb3e401f710ee47281fc6cb61513', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca685a01c3fa6dc373d09f7744f09876358d9131', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e5e24878a0c5ca175eef86f7ee00010230f6e4', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5ff2eb110d2312be41ff93b1334da923c538c62', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e5cbddb42d60cf4d7a6027ae62c1a503de61e6', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad325e08209dad730fa34b787948d9d02ab51ae1', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2c8d89631695e774c7980b4c6bff0bc7ec2819a', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c79b104935fbe9adb13abfbfd038cee98f60963', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c213141af06f292649779e2ed9c945db1869c509', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e58afa1c37c3aa182eeb52ee409dad5640983f', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef1cfd5e6ed864db9b60ba67cd68423ac3cc27ec', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b4ed768d6aaa5e3a0e1cec2a68ede85331f6e1d', 'committer_username': 'aggarwalpulkit596', 'committer_name': 'Pulkit Aggarwal', 'committer_email': 'aggarwalpulkit596@gmail.com', 'commit_date': datetime.datetime(2017, 6, 2, 7, 13, 59, tzinfo=datetime.timezone.utc)}]",Pulkit Aggarwal,29139786,aggarwalpulkit596@gmail.com,User,,118,,157,514

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3846,5717,241,775,15760,1411,419,20,"[{'id': 525488708, 'number': 11251, 'closed': datetime.datetime(2020, 11, 26, 20, 28, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 23, 6, 32, 5, tzinfo=datetime.timezone.utc), 'time_taken': 309389.0, 'time_delta': '3 days, 13:56:29', 'additions': 12, 'deletions': 28, 'state': 'closed'}, {'id': 523781584, 'number': 11215, 'closed': datetime.datetime(2020, 11, 23, 5, 48, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 19, 8, 53, 20, tzinfo=datetime.timezone.utc), 'time_taken': 334487.0, 'time_delta': '3 days, 20:54:47', 'additions': 2, 'deletions': 28, 'state': 'closed'}, {'id': 463865894, 'number': 10175, 'closed': datetime.datetime(2020, 8, 29, 7, 15, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 8, 18, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1983425.0, 'time_delta': '22 days, 22:57:05', 'additions': 1423, 'deletions': 46, 'state': 'closed'}, {'id': 453253147, 'number': 9966, 'closed': datetime.datetime(2020, 8, 12, 13, 24, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 9, 34, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2000966.0, 'time_delta': '23 days, 3:49:26', 'additions': 259, 'deletions': 23, 'state': 'closed'}, {'id': 407734585, 'number': 9139, 'closed': datetime.datetime(2020, 7, 2, 17, 0, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 23, 7, 33, 24, tzinfo=datetime.timezone.utc), 'time_taken': 6082033.0, 'time_delta': '70 days, 9:27:13', 'additions': 128, 'deletions': 0, 'state': 'closed'}, {'id': 405573496, 'number': 9111, 'closed': datetime.datetime(2020, 4, 19, 16, 53, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 18, 23, 7, 52, tzinfo=datetime.timezone.utc), 'time_taken': 63932.0, 'time_delta': '17:45:32', 'additions': 44, 'deletions': 0, 'state': 'closed'}, {'id': 401482994, 'number': 9030, 'closed': datetime.datetime(2020, 4, 12, 17, 48, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 9, 15, 13, 28, tzinfo=datetime.timezone.utc), 'time_taken': 268531.0, 'time_delta': '3 days, 2:35:31', 'additions': 7, 'deletions': 4, 'state': 'closed'}]"
