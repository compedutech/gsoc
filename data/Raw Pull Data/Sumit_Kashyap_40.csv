pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
988706588,Setup the base of project based on FastApi,"### What
- Initializing the project based on FastApi 
- Also add docker-compose 
- updated readme

### Fixes bug(s)
- #1
",True,4,https://api.github.com/repos/openfoodfacts/facets-knowledge-panels/pulls/4,https://github.com/openfoodfacts/facets-knowledge-panels/pull/4,closed,138,0,8,10,5,9,0,1,[],2022-07-06 11:56:49+00:00,2022-07-07 17:13:24+00:00,105395.0,"1 day, 5:16:35","[{'comment_id': 914990197, 'comment_body': 'you should put test in a tests/ directory at root of you project.', 'comment_created': datetime.datetime(2022, 7, 6, 15, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 914991172, 'comment_body': 'I always prefer if we keep safe and only publish to localhost:\r\n\r\n```suggestion\r\n      - ""127.0.0.1:80:80""\r\n```', 'comment_created': datetime.datetime(2022, 7, 6, 15, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 914996123, 'comment_body': 'if you move to test directory, this becomes:\xa0from app.main import app', 'comment_created': datetime.datetime(2022, 7, 6, 15, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 915573989, 'comment_body': 'This is more the why of knowledge panels. (not specific to facets)\r\n\r\nBut the examples that are given are not consistent with facet.\r\n\r\nI would rather say.:\r\n```suggestion\r\nProvides applications with a set of informative or actionable items which are contextual to a specific facet.\r\n\r\nThe primary goal is to allow high level contributions by users that maybe interested in a particular subset of the database, like a particular food category or a brand, a location, etc...\r\n\r\nWe reuse the knowledge panel format, which remove the need for the application to change as the server side code change, or to implement specific business logic.\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 7, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 915576492, 'comment_body': '```suggestion\r\ndef test_answer_questions_brand_president_bad():\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 7, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 915576627, 'comment_body': '```suggestion\r\ndef test_answer_questions_brand_president():\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 7, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 915577560, 'comment_body': 'A more specific name is better (because we may put this container in same space as other containers in the future).\r\n\r\n```suggestion\r\n  facets-api:\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 7, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 915578468, 'comment_body': 'This is true if you use ""virtual env"" if you use docker you have to launch with docker-compose.\r\n````suggestion\r\n### docker setup\r\n```\r\ndocker-compose run --rm facets-api pytest tests\r\n```\r\n\r\n### virtual env setup\r\n- Checkout `tests` directory\r\n```\r\npytest \r\n```\r\n````', 'comment_created': datetime.datetime(2022, 7, 7, 8, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 916100624, 'comment_body': ""I don't think this two values are ok, but it's not blocking right now :-)"", 'comment_created': datetime.datetime(2022, 7, 7, 17, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': 'ff7de1c05cea357e6d881a7772537ce4c312866a', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4f0c3de3dc5ce465cdb38d889dddd6d69b907a0', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53f7f32c9424a79305a93d924a73715a68a51cae', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f4d9846035d398929764f9e0f704e37f9e4474', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f913e70eff1f4e0cbe989f196def0470f51555', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61f098a933f9ef04e028b3c552a1c8f7093af5f2', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cc044a971da53a78940e29e4bf419c460d33df9', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcad7751337715e4be6e42b1f1df9bddc6054aad', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34b48075aea4c5ff247a94c37839600165dd5fb4', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc5b6ff184345de6bf629989a06af41a5ad97c3', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}]",Sumit Kashyap,96618001,mr.sumitkrr@gmail.com,User,,47,,11,11
991588711,Api point for KP,"### What
- Creating Api point for KP

### Fixes bug(s)
- #2
",True,6,https://api.github.com/repos/openfoodfacts/facets-knowledge-panels/pulls/6,https://github.com/openfoodfacts/facets-knowledge-panels/pull/6,closed,29,1,2,2,1,2,0,1,[],2022-07-08 12:08:32+00:00,2022-07-08 17:04:09+00:00,17737.0,4:55:37,"[{'comment_id': 916809710, 'comment_body': 'why not just use a str for facet_value ?', 'comment_created': datetime.datetime(2022, 7, 8, 13, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 916811013, 'comment_body': 'Facetname should be in singular for how we will use them.\r\n\r\nhttps://world.openfoodfacts.org/countries/ for all countries\r\n\r\nBut **country** for a single country : https://world.openfoodfacts.org/country/india\r\n(and your urls are for single values)', 'comment_created': datetime.datetime(2022, 7, 8, 13, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': 'd442bbb6c72c3f43bc18c023bd22e62cc7b7c68e', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd20505505937a7d3730815bd3849248c879a4c41', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}]",Sumit Kashyap,96618001,mr.sumitkrr@gmail.com,User,,47,,11,11
992927162,Update Readme,"### What
- Update readme
",True,7,https://api.github.com/repos/openfoodfacts/facets-knowledge-panels/pulls/7,https://github.com/openfoodfacts/facets-knowledge-panels/pull/7,closed,3,6,1,2,3,0,0,1,[],2022-07-11 10:25:59+00:00,2022-07-15 15:27:37+00:00,363698.0,"4 days, 5:01:38",[],"[{'commit_sha': '0e1b518e846ac8e063fdf473c1bcdfa841ac494c', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c7622beb8a5782db54d62e0098d12304a1405a', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}]",Sumit Kashyap,96618001,mr.sumitkrr@gmail.com,User,,47,,11,11
994167722,feat: Adding a knowledge panel for Hunger Games,"### What
- Implementing simple hunger game KP
- Add tests 

### Fixes bug(s)
- #3",True,8,https://api.github.com/repos/openfoodfacts/facets-knowledge-panels/pulls/8,https://github.com/openfoodfacts/facets-knowledge-panels/pull/8,closed,241,52,5,13,5,21,0,1,[],2022-07-12 11:26:16+00:00,2022-07-15 16:40:56+00:00,278080.0,"3 days, 5:14:40","[{'comment_id': 919785695, 'comment_body': 'the idea is more:\r\n\r\n```python\r\npanels = []\r\nif facet_name in Hunger_game_filter:\r\n  panels.append(hunger_game_kp(....))\r\nreturn {""knowledge_panels"": panels}\r\n```\r\n\r\nbut I would better have the hunger_game_kp in a knowledge_panels.py', 'comment_created': datetime.datetime(2022, 7, 13, 8, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 919788795, 'comment_body': '```suggestion\r\nclass HungerGameFilter(str, Enum):\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 919789031, 'comment_body': '```suggestion\r\nclass FacetName(str, Enum):\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 8, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920117864, 'comment_body': 'Maybe you should also manage the case where facet_name == ""country"". (It\'s cool however to also have the specific country argument), that should be equivalent to setting country. (the facet should have priority over country parameter)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 13, 14, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920145417, 'comment_body': 'you should not do that because it brakes the API, just ignore this case.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 14, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920148713, 'comment_body': 'More pythonic + correct Facetname --> FacetName:\r\n\r\n```suggestion\r\n        return [c.value for c in  FacetName]\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 14, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920149804, 'comment_body': '```suggestion\r\n        return [c.value for c in HungerGameFilter]\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 14, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920152387, 'comment_body': 'you should just remove this test.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 14, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920312699, 'comment_body': 'This code should be far more readable ;-)\r\n\r\nPlease use urllib.parse.urlencode and treat country and value separately !\r\n', 'comment_created': datetime.datetime(2022, 7, 13, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921203852, 'comment_body': ""I can do that but currently hunger game doesn't support country filter"", 'comment_created': datetime.datetime(2022, 7, 14, 14, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 921222350, 'comment_body': '@alexgarel can you please help me with this test , its failing with assertion Error', 'comment_created': datetime.datetime(2022, 7, 14, 14, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 921380212, 'comment_body': 'Solved :)', 'comment_created': datetime.datetime(2022, 7, 14, 17, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 921939609, 'comment_body': 'You didn\'t get it about urlencode ;-) the idea is to de-correlate both argument handling, by treating them separately.\r\nAlso your link does not have a text so would be invisible to users.\r\nAlso note that you should alway use `== None` but instead use `is None`. (same for `!= None` ==> `is not None`.\r\n\r\nHere is how you can separate problems:\r\n\r\n```suggestion\r\n    query = {}\r\n    description = """"\r\n    if hunger_game_filter == ""country"":\r\n        # superseed country parameter\r\n        country = value\r\n        # and do not use facet\r\n        hunger_game_filter = value = None\r\n    if country is not None:\r\n        query[""country""] = country\r\n        description = country\r\n    if hunger_game_filter is not None:\r\n        query[""type""] = hunger_game_filter\r\n        description = f""{hunger_game_filter}""\r\n    if value_tag is not None:\r\n        query[""value_tag""] = value\r\n        description = f""{value} {hunger_game_filter}""\r\n    questions_url = ""https://hunger.openfoodfacts.org/""\r\n    if query:\r\n        questions_url += f""?{urlencode(query)}""\r\n    description = f""Answer robotoff questions about {description}""\r\n    html = f""<p><a href=\'{questions_url}\'>{description}</a></p>\\n""\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 8, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921940402, 'comment_body': 'you should add country, because this is a valid facet (it will superseed country parameter)', 'comment_created': datetime.datetime(2022, 7, 15, 8, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921940772, 'comment_body': ""I forgot to add that you didn't handle using country facet… the above code does this."", 'comment_created': datetime.datetime(2022, 7, 15, 8, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921942323, 'comment_body': 'As I see that in your test you even test hunger_game_filter alone, I have just updated code suggestion to enable that.', 'comment_created': datetime.datetime(2022, 7, 15, 8, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921943587, 'comment_body': 'Please, also add a test where we have  hunger_game_filter=""country"" and value=""germany"" and country=""france"".\r\n(should result in a url for questions in germany)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 15, 8, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921944702, 'comment_body': 'Please also assert the content of response. (should be an empty list of knowledge panels)', 'comment_created': datetime.datetime(2022, 7, 15, 8, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921948293, 'comment_body': ""As you already tested the hunger_game_kp function quite heavily, it's sufficient here to have a test including a facet_name, a facet_value and a country.\r\n\r\nNote: the main usage will be facet_name + facet_value (not facet_name alone). So this is better to test this one."", 'comment_created': datetime.datetime(2022, 7, 15, 8, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 922322385, 'comment_body': 'I think we can skip those tests, which we already did for category (the test below is good enough to test the label facet exists).', 'comment_created': datetime.datetime(2022, 7, 15, 16, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 922322592, 'comment_body': 'I think we can skip those tests, which we already did for category (the test below is good enough to test the brand facet exists).', 'comment_created': datetime.datetime(2022, 7, 15, 16, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': 'ec0adf37d7a66568723b680ab02dc19067dfcda3', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09240a539cf11c037032eea4d4d59201e379c19d', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b4228809786ffa5ef5279abc15a575e27cb05b', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f99f888651d5f842785e7e729ac734563aa6b554', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c29ac05dc0aa33da95d017b1d00fd59ec550658', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dec5f7851a7165a9bf62b3f9472a5d1b18ba266', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc7d0caec90c2cb35a0328f1303b2a333b9be24b', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dba7081b232a664bbd03f9927dc44a97fd774a05', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dfba91a7aad2fea55b8a5d91b661c320343c9c0', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e66e007bb9d8dd7e265ec4a62476ed4124ded80', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6719c38036cfd7e6c7840c27c1f8354c97b385fb', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9ccb0742d7cc9efb821d83d75db13981a9d3017', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e29800b0e2c4b92fe978104754f7f7b73fd691d', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}]",Sumit Kashyap,96618001,mr.sumitkrr@gmail.com,User,,47,,11,11
998445587,feat: Adding a Knowledge Panel for data-quality,"### What
- Added a knowledge panel for data-quality



### Fixes bug(s)
- #9 
",True,10,https://api.github.com/repos/openfoodfacts/facets-knowledge-panels/pulls/10,https://github.com/openfoodfacts/facets-knowledge-panels/pull/10,closed,268,58,8,22,1,48,0,1,[],2022-07-16 15:12:16+00:00,2022-07-29 14:44:39+00:00,1121543.0,"12 days, 23:32:23","[{'comment_id': 922717167, 'comment_body': '```suggestion\r\n    description = f""data-quality issues related to this {description}""\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 20, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'teolemon', 'type': 'User'}, {'comment_id': 922717259, 'comment_body': '```suggestion\r\n                    ""description"": ""data-quality issues related to this packaging based for Hungary"",\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 20, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'teolemon', 'type': 'User'}, {'comment_id': 922717317, 'comment_body': '```suggestion\r\n                            ""description"": ""data-quality issues related to this packaging based on italy"",\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 20, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'teolemon', 'type': 'User'}, {'comment_id': 922717325, 'comment_body': '```suggestion\r\n                            ""description"": ""data-quality issues related to this origin based on india"",\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 20, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': 'teolemon', 'type': 'User'}, {'comment_id': 922717348, 'comment_body': '```suggestion\r\n                            ""description"": ""data-quality issues related to this allergen"",\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 20, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'teolemon', 'type': 'User'}, {'comment_id': 925318639, 'comment_body': '```suggestion\r\n    url = ""https://<country>-en.openfoodfacts.org/""\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 8, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925319663, 'comment_body': '```suggestion\r\ncountry = value\r\ndescription = f""{value}""\r\nfacet = value = None\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 8, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925322380, 'comment_body': '```suggestion\r\n    quality_url = f""{source_url}/data-quality.json""\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 8, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925322963, 'comment_body': 'maybe ?\r\n```suggestion\r\n    data = response_API.json()\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 8, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925323738, 'comment_body': '```suggestion\r\n    # tags are already sorted by the most common\r\n    first_three = tags[0:3]\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 8, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925324533, 'comment_body': 'change to html, and add a link to see all but not as json (just remove the "".json"" at the end of url)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 20, 8, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925325045, 'comment_body': 'use monkeypatch to simulate the requests.get', 'comment_created': datetime.datetime(2022, 7, 20, 8, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925480783, 'comment_body': ""@alexgarel it doesn't return desired value , when I change wold to any country\r\n"", 'comment_created': datetime.datetime(2022, 7, 20, 11, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 925482237, 'comment_body': 'If I hit this link https://fr.openfoodfacts.org/label/bio/data-quality.json with change in value it return something else', 'comment_created': datetime.datetime(2022, 7, 20, 11, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 925634907, 'comment_body': '@alexgarel I only think of this solution , which might not that great , please let me know if I can optimize it?', 'comment_created': datetime.datetime(2022, 7, 20, 13, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 926715139, 'comment_body': 'Hey @alexgarel , can you please check my current approach for this ', 'comment_created': datetime.datetime(2022, 7, 21, 14, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 927831276, 'comment_body': 'and with https://fr-en.openfoodfacts.org/label/bio/data-quality.json ? (which is my suggestion)', 'comment_created': datetime.datetime(2022, 7, 22, 16, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928104039, 'comment_body': ""I'm so sorry I didn't noticed that! "", 'comment_created': datetime.datetime(2022, 7, 23, 9, 51, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 928139109, 'comment_body': 'No problem :-)', 'comment_created': datetime.datetime(2022, 7, 23, 16, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928139489, 'comment_body': ""Where did you take this habit of commenting after the code ?\r\nIt's the first time I see this. Is there a good reason to do this ?\r\n\r\n(I'm open to understanding but it's the first time I remember to see this)"", 'comment_created': datetime.datetime(2022, 7, 23, 16, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928140918, 'comment_body': '@sumit-158, what happens if we choose to now add 10 items ?\r\n\r\nYou really have to abstract this out, this can be 3, 4, 5… A loop have to save you here, you should not be unrolling this kind of thing ""manually"".\r\nYou\'ve seen you use the same code with 0, 1, 2… so why not abstract this out with i and an `for i, tag in enumerate(tags)` ?\r\n\r\nMoreover you don\'t have to create more than one element, you should not either introduce new fields to knowledge panels, like known, products, etc...\r\n\r\nyou should instead have a html with data for every tag, which display useful info to the user\r\n\r\nI can do this in one line :-)\r\n\r\n```python\r\nhtml = ""\\n"".join(\r\n    f\'<li><a href=""{tag.url}"">{tag.products} products with {tag.name}</a></li>\'  \r\n    for tag in first_three\r\n)\r\nhtml = f""<ul>{html}</ul>""\r\n```\r\n\r\nI let you build the text_element from that.', 'comment_created': datetime.datetime(2022, 7, 23, 16, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928140951, 'comment_body': 'There is no added value to do this. On the contrary the previous structure is far better.', 'comment_created': datetime.datetime(2022, 7, 23, 16, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928141010, 'comment_body': 'We should change first_three to a better name (we may choose to keep 10 in the future).\r\n\r\nSo I would call it `short_list` or `top_tags`', 'comment_created': datetime.datetime(2022, 7, 23, 16, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928141092, 'comment_body': 'Yeah ! You nailed it :-)\r\n\r\nAnd the idea of MockResponse class is right ! ', 'comment_created': datetime.datetime(2022, 7, 23, 16, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928141703, 'comment_body': 'This part is really to ""mimick"" the Open Food Facts application, not your application (this is a classic mistake when people mock for the first time :-)). Remember you use because you don\'t want to depend of open food facts application.\r\n\r\nSo this really should return a piece of json taken from, eg.  https://fr-en.openfoodfacts.org/label/bio/data-quality.json', 'comment_created': datetime.datetime(2022, 7, 23, 16, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 928215910, 'comment_body': 'I do ,to make it more readable', 'comment_created': datetime.datetime(2022, 7, 24, 8, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 929732176, 'comment_body': 'same comment as for the PR on last edits. If you want you may try to do as the first kp and unify the facet == ""country"" case with other cases.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929732764, 'comment_body': 'same remark as the last-edits PR, description should add to the previous.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929735314, 'comment_body': ""Yes commenting is very useful, but why **after** the code and not **before** ?\r\n\r\nThe idea of comments is to help a human reader understand what you do. It's easier to see first plain english and then read the code (it also helps seeing if I'm interested in this piece of code or if I\xa0might skip reading it)."", 'comment_created': datetime.datetime(2022, 7, 26, 9, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929737300, 'comment_body': ""here again, if you don't mind, it would be cleaner to have a function that we put in off.py file.\r\n\r\n(it's about [separation of concerns](https://en.wikipedia.org/wiki/Separation_of_concerns))"", 'comment_created': datetime.datetime(2022, 7, 26, 9, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929738410, 'comment_body': 'Add this info to the html, do not invent new tags to the knowledge panel paradigm, because a client would ignore it.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929739919, 'comment_body': 'There again there are no such fields in knowledge panels. That said we can keep it if we want.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929740649, 'comment_body': 'or maybe put it in source_text ?', 'comment_created': datetime.datetime(2022, 7, 26, 9, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929742150, 'comment_body': 'It seems we could add a `title_element` to all the panels we made.\r\n\r\nIt should have a sensible title. Here for example:\xa0""Quality"" is enough', 'comment_created': datetime.datetime(2022, 7, 26, 9, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929747105, 'comment_body': 'on an unexpected exception you should return a 503 not a 404.\r\n```suggestion\r\n    except:\r\n        raise HTTPException(status_code=500, detail=""Server error"")\r\n```\r\n\r\nBut I\xa0think we should be more modular here. \r\nThat is the try / except should be facet by facet, and we should just either ignore the facet, or add a message to say this facet is HS.\r\nYou should be able to have a function to do this.\r\n\r\nAlso you should only catch specific errors. This kind of blind try / except might be very difficult to debug otherwise.\r\n\r\nAt least you should always log an error message in those cases (log.exception is your friend)', 'comment_created': datetime.datetime(2022, 7, 26, 9, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929766947, 'comment_body': ""It's a bit hard to read.\r\nI think you should put the html in a expected_html variable, and use it here.\r\n\r\nAlso I'm wondering if we should [prettify the html](https://stackoverflow.com/a/6167432/2886726)"", 'comment_created': datetime.datetime(2022, 7, 26, 9, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929769766, 'comment_body': ""you initialized a url, which is a good idea but you don't check it's the one thats used.\r\n\r\nIn all your mock (not only this one), you should add an assert:\r\n\r\n```suggestion\r\n        response = MockResponse()\r\n        assert quality_url == response.url\r\n        return response\r\n```"", 'comment_created': datetime.datetime(2022, 7, 26, 10, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 929777075, 'comment_body': 'The MockResponse pattern is repeated a lot, and you could factorize it in a function that just take the json content.\r\n\r\nIt could be in a test_utils.py\r\n\r\nSomething like:\r\n\r\n```python\r\nclass MockResponse:\r\n    def __init__(self, json_content):\r\n        self.json_content = json_content\r\n    def json(self):\r\n        return self.json_content\r\n        \r\ndef mock_get_factory(target_url, json_content):\r\n    """"""generate a mock to patch request.get with a json response""""""\r\n    #\xa0this is the function we will return\r\n    def mock_get(url):\r\n        assert url == target_url\r\n        return MockResponse(json_content)\r\n    return mock_get\r\n```\r\n\r\nAnd in your test you just have to call:\r\n\r\n```\r\nexpected_url = ""https://xxxx""\r\nexpected_json = {...}\r\nmonkeypatch.setattr(requests, ""get"", mock_get_factory(expected_url, expected_json)\r\n```', 'comment_created': datetime.datetime(2022, 7, 26, 10, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 930136547, 'comment_body': 'I used couples of library but its not working properly in swagger ui , although it work fine in terminal', 'comment_created': datetime.datetime(2022, 7, 26, 15, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 930755601, 'comment_body': 'something like: \r\n\r\n```python\r\n    result = app.main.data_quality_kp(facet=""brand"", value=""lidl"")\r\n    first_element = result[""Quality""][""elements""][0]\r\n    first_element[""text_element""] = tidy_html(first_element[""text_element""])\r\n    expected_text = tidy_html(""""""\r\n    <p>The total number of issues are 173,here couples of issues</p>\r\n    <ul>\r\n      <li>\r\n        <a href=""https://world.openfoodfacts.org/brand/lidl/data-quality/ecoscore-origins-of-ingredients-origins-are-100-percent-unknown"">6474 products with ecoscore-origins-of-ingredients-origins-are-100-percent-unknown</a>\r\n        </li>\r\n        <li>\r\n           <a href=""https://world.openfoodfacts.org/brand/lidl/data-quality/ecoscore-production-system-no-label"">6467 products with ecoscore-production-system-no-label</a>\r\n         </li>\r\n         <li>\r\n            <a href=""https://world.openfoodfacts.org/brand/lidl/data-quality/no-packaging-data"">5042 products with no-packaging-data</a>\r\n          </li>\r\n       </ul>\r\n        """""")\r\n\r\n    assert result == {\r\n        ""Quality"": {\r\n            ""title"": ""Data-quality issues"",\r\n            ""subtitle"": ""Data-quality issues related to brand lidl"",\r\n            ""source_url"": ""https://world.openfoodfacts.org/brand/lidl/data-quality"",\r\n            ""elements"": [\r\n                {\r\n                    ""element_type"": ""text"",\r\n                    ""text_element"": expected_text,\r\n```', 'comment_created': datetime.datetime(2022, 7, 27, 8, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 933224640, 'comment_body': 'move this above the test.\r\n', 'comment_created': datetime.datetime(2022, 7, 29, 12, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 933226218, 'comment_body': 'If you do this, your test will certainly pass in any situation, for you are crushing the result with what you except !\r\nYou just want to tidy it !\r\n\r\n```suggestion\r\n    # tidy html before comparison\r\n    first_element[""text_element""] = tidy_html(first_element[""text_element""])\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 12, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 933227011, 'comment_body': 'This test will always work to ;-) \r\nhere you should have your expected_result.\r\n\r\n```suggestion\r\n                    ""text_element"": tidy_html(expected_text),\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 12, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 933227811, 'comment_body': 'Here you have all three same problems as above.', 'comment_created': datetime.datetime(2022, 7, 29, 12, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 933259923, 'comment_body': 'it\'s strange to use `expected_html` as a name here (""expected"" is in tests).\r\nMaybe `quality_html` or just `html` ?', 'comment_created': datetime.datetime(2022, 7, 29, 13, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 933282288, 'comment_body': 'To ease test I\xa0propose add spaces between elements:\r\n\r\n```suggestion\r\n    html = ""\\n"".join(\r\n        f\'<li> <a href=""{tag[""url""]}"">{tag[""products""]} products with {tag[""name""]}</a> </li>\'\r\n        for tag in tags[0:3]\r\n    )\r\n    expected_html = f"" <p>The total number of issues are {total_issues},here couples of issues</p> <ul> {html} </ul> ""\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 13, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 933287051, 'comment_body': ""it doesn't working"", 'comment_created': datetime.datetime(2022, 7, 29, 13, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 933326897, 'comment_body': '```suggestion\r\n    return html.strip()\r\n```', 'comment_created': datetime.datetime(2022, 7, 29, 14, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': 'a688eeeb419029157fd0d9a05fc6470a225c35eb', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8fb1a1dfa2b57ddcfba040294f85da364ba9ec3', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa38525c877f4e54a7a43666b0bf8d6b48075f83', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29679cacd72fb4f4f50523beeb409364fa5f4b51', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7d0155cf3df6e30a9abb823682effd9191b306e', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ef027ceaed54f332fd9907233ac4d33c21e739', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15252dc6e9fd56eca41884af69de8955db215696', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eceed22a830dda86ad0a4874344c310547d33fe7', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b908e13f14168ad98558828ff5a5cda1e9127d61', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2355c948fdbbc7520da2634c365358804274b52b', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0c0cce279e58679bba7cfe1c0840cf6e7b53ab0', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00c28d5964a93e498785c2eef01ba36cbf3be860', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5666944fe5770833d82d31cf2cf2aa1068dda4a1', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b45d9d53851ab3f01ee9b8581c50cdb747e6ce3', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fa24f492952f14d0cd5bdc4c438c3f6cadcac96', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b179b3fbf8ea1893d91570bd06934fcaecece7af', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cb404415384ab2ce35547e2d5d50c01b6f475d9', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfd7a9082e7cc3a7f2ddf8c6187bdfeb31c962f3', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69d77073e047575ee743d0eaac710f590423ea90', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6203d22fd7e9da43bcd53fcd5f98827cc42be4a4', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2101eeca984eb256f4d2c56efe00200b4819c6a8', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca320f8c22ce87544ce1116f9970ddfccb4ef946', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}]",Sumit Kashyap,96618001,mr.sumitkrr@gmail.com,User,,47,,11,11
1012134849,Added last_edits_kp,"### What
- Added knowledge panel for last Edits
- Updated mock test for taking parameter
- 
### Fixes bug(s)
- #12 

",True,16,https://api.github.com/repos/openfoodfacts/facets-knowledge-panels/pulls/16,https://github.com/openfoodfacts/facets-knowledge-panels/pull/16,closed,169,14,6,2,0,3,0,1,[],2022-07-29 15:54:39+00:00,2022-08-01 10:55:31+00:00,241252.0,"2 days, 19:00:52","[{'comment_id': 934022727, 'comment_body': 'cool you nailed how to do this :-)', 'comment_created': datetime.datetime(2022, 7, 31, 18, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 934022865, 'comment_body': 'this is a function so name should be last_edit (camel case is for classes)', 'comment_created': datetime.datetime(2022, 7, 31, 18, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 934023163, 'comment_body': 'we named previous variables because expected_url and expected_kwargs are meant to check effective url and kwargs used.\r\n\r\nWhile the json is more something you are giving to build the test. So I\xa0would name it `json_content`', 'comment_created': datetime.datetime(2022, 7, 31, 18, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': '039fa1389c4e3531cef3d256e2a115af756eb258', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a02fc2de9308c25b5eb1ff0c5faa6427cbca7054', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}]",Sumit Kashyap,96618001,mr.sumitkrr@gmail.com,User,,47,,11,11
1023986593,feat: Initialize Internationalization,"### What
- Initializing Internationalization",True,18,https://api.github.com/repos/openfoodfacts/facets-knowledge-panels/pulls/18,https://github.com/openfoodfacts/facets-knowledge-panels/pull/18,closed,495,80,18,20,6,7,2,1,"[{'name': '✨ enhancement'}, {'name': 'i18n'}]",2022-08-11 15:06:48+00:00,2022-08-26 18:01:47+00:00,1306499.0,"15 days, 2:54:59","[{'comment_id': 950850795, 'comment_body': '@alexgarel I want to use this `lang` value in my [i18n.py](https://github.com/openfoodfacts/facets-knowledge-panels/pull/18/files#diff-3a40654f02707d2912abff8e55fc35240fdabfec2dac01d3881e597d394e648f) as languages in lang_translations, can you help me out with this? Last thing to complete this pr.', 'comment_created': datetime.datetime(2022, 8, 21, 13, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 951326228, 'comment_body': 'First:\r\n1. you have a typo in i18n.py: ""defualt_lang"" instead of ""default_lang""\r\n2. your methods needs to get self as first parameter !\r\n\r\nNow I\xa0would better do this:\r\n- have this class be instanciated once, at module level:\r\n  at the end, just add `translation_store = TranslationStore()`\r\n  from then on you never call the class but your instance (this is known as ""singleton pattern"")\r\n- have a method  load_all to load languages and put every lang_translations objects in a dict (a class member) and call it just after translation_store instantiation, or better at [server startup](https://fastapi.tiangolo.com/advanced/events/). The list of language is either a configuration parameter, or determined by looking at existing folders in I18N_DIR.\r\n- the lang method should then just return the gettext method of the corrensponding lang_translation object (which is the dict at the entry corresponding to the language)\r\n\r\nSo in you API\xa0method, you can just use:\r\n```python\r\nfrom .i18n import translation_store\r\n...\r\ndef xxx(...):\r\n   _ =  translation_store.lang(lang_code)\r\n   msg = _(""This will be translated"")\r\n```\r\n\r\nAlthough what I\xa0find cumbersome is that you will have to carry this lang or _ variable all around.\r\n\r\nOn smarter solution could be to use a context manager with a [ContextVar](https://docs.python.org/3/library/contextvars.html) such that you could invoke it all around your code, magically.\r\n\r\n1. in i18n.py you need a ContextVar current_lang which default value is ""en""\r\n2. write a context manager LangManager that sets this value to a value provided by the user\r\n3. have get_translation (aka _) be a new function which read this variable, get the right translation lang (by mechanism described above) according to current_lang and use it\'s gettext function\r\n4. in your api you know write:\r\n```\r\nfrom .i18n import LangManager\r\nfrom .i18n import translate as _\r\n\r\ndef xxx(...):\r\n\xa0  with LangManager(""fr""):\r\n\xa0      call_function()\r\n\xa0      ...\r\n\xa0      msg = _(""my message"")\r\n\xa0\r\n```\r\n\r\nand in inner functions, just use `from .i18n import translate as _` without carrling, the current_lang should be set.\r\n', 'comment_created': datetime.datetime(2022, 8, 22, 11, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 951327740, 'comment_body': 'see https://github.com/openfoodfacts/facets-knowledge-panels/pull/18/files#r951326228', 'comment_created': datetime.datetime(2022, 8, 22, 11, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 955712593, 'comment_body': '@alexgarel Just a question what does `stack_info=True` do?', 'comment_created': datetime.datetime(2022, 8, 26, 6, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 955716763, 'comment_body': 'it prints the stack trace along with the log message (like for exceptions).\r\nHere I added it, because if I\xa0just log the developer won\'t see where the translation function was called, whereas here he sees the lines.\r\n\r\nEg:\r\n\r\n```\r\nknowledge-panel | Looking up a translation while language was not set. Use active_translation context manager\r\nknowledge-panel | Stack (most recent call last):\r\nknowledge-panel |   File ""/usr/local/lib/python3.9/threading.py"", line 937, in _bootstrap\r\nknowledge-panel |     self._bootstrap_inner()\r\nknowledge-panel |   File ""/usr/local/lib/python3.9/threading.py"", line 980, in _bootstrap_inner\r\nknowledge-panel |     self.run()\r\nknowledge-panel |   File ""/usr/local/lib/python3.9/site-packages/anyio/_backends/_asyncio.py"", line 867, in run\r\nknowledge-panel |     result = context.run(func, *args)\r\nknowledge-panel |   File ""/code/./app/main.py"", line 45, in knowledge_panel\r\nknowledge-panel |     panels.append(last_edits_kp(facet=facet_tag, value=value_tag, country=country))\r\nknowledge-panel |   File ""/code/./app/knowledge_panels.py"", line 121, in last_edits_kp\r\nknowledge-panel |     expected_html, t_description, t_title = last_edit(url=url, query=query)\r\nknowledge-panel |   File ""/code/./app/off.py"", line 80, in last_edit\r\nknowledge-panel |     description = _(""last-edits issues related to"")\r\nknowledge-panel |   File ""/code/./app/i18n.py"", line 66, in translate\r\nknowledge-panel |     return get_current_translation().gettext(message)\r\nknowledge-panel |   File ""/code/./app/i18n.py"", line 55, in get_current_translation\r\nknowledge-panel |     log.warning(\r\n```\r\n\r\nSo you see the problem is in off.py line 80', 'comment_created': datetime.datetime(2022, 8, 26, 6, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 955721820, 'comment_body': 'Oh cool! sorry but can I know how to get that log message?', 'comment_created': datetime.datetime(2022, 8, 26, 7, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 956287486, 'comment_body': 'Remove the activate_translation line in main.py :-)', 'comment_created': datetime.datetime(2022, 8, 26, 18, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': 'f9d1e2d4b630b10013d1f6c125b0b37ff8976387', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd666fce64d1feb066a42b16ca5bb978c4b86de', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31031f1bcb5f7608d64fc5c96fb02dd2f283682f', 'committer_username': 'teolemon', 'committer_name': 'Pierre Slamich', 'committer_email': 'pierre@openfoodfacts.org', 'commit_date': datetime.datetime(2012, 4, 29, 10, 48, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24340000851e6e5ca07fc30102307f59f39f5e74', 'committer_username': 'teolemon', 'committer_name': 'Pierre Slamich', 'committer_email': 'pierre@openfoodfacts.org', 'commit_date': datetime.datetime(2012, 4, 29, 10, 48, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4debea15162800fa3ebc989108955a86e898303', 'committer_username': 'teolemon', 'committer_name': 'Pierre Slamich', 'committer_email': 'pierre@openfoodfacts.org', 'commit_date': datetime.datetime(2012, 4, 29, 10, 48, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2213f7196ca3088da7e663974b9194952d0aefea', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34afe3f2995c4fddd586b486d2abb2491a285684', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f573936d476c8e9247d872deabd827dd91aa986', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee6567ffd62363508eb3caa02cf56c9161b217a', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55ea4cd8ca99aba5737004cf36668b60b6109ea8', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6ac33ae35b114dd39cabbcf0af5e1743533ae61', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd871e580479190b48c4f15122523441b923fb9c5', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe905964503698ac1ea782a30d0711ae9497f674', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c371c32985406e602e070d7dd8fb6d0b528e426', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a62601ab8db5971cbd8ecd3ec6096a188161bdf', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82a4439580a01b89f102e5846408bcd903d0408e', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec392e1896005dec07effcd9742fbd0700c2d825', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1ad25784a54d0714fdb32af10a496ab9ca20c99', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c32e4a6bd72fd17520c3afd4e7c65b3f0ecd11', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '427af6aa9c465fe35c464f43c3fe824685cc55f8', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}]",Sumit Kashyap,96618001,mr.sumitkrr@gmail.com,User,,47,,11,11
1013906718,feat: Wikidata knowledge panel,"### What
- will return wikidata knowledge panel
- data that fetching form wikidata are label , description and image url

### Fixes bug(s)
- #11 
",True,17,https://api.github.com/repos/openfoodfacts/facets-knowledge-panels/pulls/17,https://github.com/openfoodfacts/facets-knowledge-panels/pull/17,closed,322,18,9,21,1,16,0,1,[],2022-08-01 13:52:00+00:00,2022-09-02 14:27:34+00:00,2766934.0,"32 days, 0:35:34","[{'comment_id': 953476417, 'comment_body': ""I like the way you separate concerns.\r\n\r\nJust a possible improvement:\xa0when you have so much data, it's time to think about using a [named tuple](https://docs.python.org/3/library/collections.html#collections.namedtuple).\r\nNot mandatory to change but would be a good idea."", 'comment_created': datetime.datetime(2022, 8, 24, 7, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 953478199, 'comment_body': ""Don't capitalize a variable. Argument is a variable. Also if you don't use it underneath, do not use it:\r\n\r\n```suggestion\r\n    except Exception:\r\n```\r\n\r\nYou should correct it everywhere it's the case."", 'comment_created': datetime.datetime(2022, 8, 24, 8, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 953513202, 'comment_body': ""I would better use \r\n```pythof\r\nimport wikidata.client\r\n```\r\n\r\nand latter on\r\n\r\n```python\r\n    client = wikidata.client.Client()\r\n```\r\n\r\nI think it's worth it because, it hard otherwise to remember we are talking about wikidata."", 'comment_created': datetime.datetime(2022, 8, 24, 8, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 953517382, 'comment_body': 'here you would return your namedtuple :-)', 'comment_created': datetime.datetime(2022, 8, 24, 8, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 953520800, 'comment_body': 'It would be better if we also monkeypatch the wikidata client…\r\nThis is not very difficult there again, you should be able to do it, in fact you just have to monkeypatch the ""get"" method of ""wikidata.client.Client""\r\nYou monkey patch would return the current output of this function (you may put it in a separate json file if it\'s big)', 'comment_created': datetime.datetime(2022, 8, 24, 8, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 953641437, 'comment_body': ""@alexgarel I'm confuse little bit this method `wikidata.client.Client` doesn't return any json it return a link like this `('https://www.wikidata.org/')`"", 'comment_created': datetime.datetime(2022, 8, 24, 10, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 954823381, 'comment_body': 'Do not use a capita El, this is a variable ! --> `entities`', 'comment_created': datetime.datetime(2022, 8, 25, 11, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 954824302, 'comment_body': 'Define it at module level, not in the function. \r\n\r\nAnd (just to clarify) here capital letter is welcome because namedtuple return you a class :-)', 'comment_created': datetime.datetime(2022, 8, 25, 11, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 954825169, 'comment_body': '```suggestion\r\n    entities = Entities(\r\n```\r\nHere we got an instance of the class, a variable, so you should not use a capital letter.', 'comment_created': datetime.datetime(2022, 8, 25, 11, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 954826932, 'comment_body': ""huum  (not sure to understand)\r\n\r\n> `wikidata.client.Client` doesn't return any json \r\n\r\nMaybe when you call it without any argument, but your code will call it with a code, isn't it ?"", 'comment_created': datetime.datetime(2022, 8, 25, 11, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 954831416, 'comment_body': 'The lib handle all that search things for me , it return specific data according to entity.property', 'comment_created': datetime.datetime(2022, 8, 25, 11, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sumit-158', 'type': 'User'}, {'comment_id': 954846192, 'comment_body': 'Ok, so we are targeting those lines:\r\n\r\n```python\r\n    client = wikidata.client.Client()\r\n    entity = client.get(entity_id)\r\n```\r\n\r\nThe first line returns you an instance of the Client class, as expected:\r\n\r\n```python\r\n>>> client = wikidata.client.Client()\r\n>>> type(client)\r\n<class \'wikidata.client.Client\'>\r\n>>> client\r\nwikidata.client.Client(\'https://www.wikidata.org/\')\r\n```\r\n\r\nWe don\'t need to change this, what we want to change is what we get on when we call client.get:\r\n\r\n```\r\n>>> client.get(""Q47472153"")\r\n<wikidata.entity.Entity Q47472153>\r\n```\r\n\r\nWhen you use monkeypatch you can replace a function at module level, but you can also replace a method of a specific class.\r\nSo here the idea is to replace the ""get"" method (which we call in our code) with your fake implementation of the get.\r\n\r\nOriginal get return an Entity instance which seems to have [a somewhat complicated implementation](https://github.com/dahlia/wikidata/blob/main/wikidata/entity.py#L138), so we can\'t create one in a simple mode in our code.\r\nInstead you may simply return a namedtuple with the attributes your code use, and sample values in them.', 'comment_created': datetime.datetime(2022, 8, 25, 11, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 954847318, 'comment_body': ""just to explain:\xa0namedtuple really return a class, it's just a shortcut to define a class with a specific behaviour.\r\nThat's why it belongs to module level (except specific use case)"", 'comment_created': datetime.datetime(2022, 8, 25, 11, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 954850279, 'comment_body': '>  So here the idea is to replace the ""get"" method (which we call in our code) with your fake implementation of the get.\r\n\r\nI forgot to point to an example. [In the documentation](https://docs.pytest.org/en/6.2.x/monkeypatch.html#simple-example-monkeypatching-functions) the first example monkey patch the Path class by changing its ""home"" method.\r\nYou want to do the same:\xa0monkey patch the wikidata.client.Client class by changing its ""get"" method.', 'comment_created': datetime.datetime(2022, 8, 25, 11, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 956294507, 'comment_body': ""You misunderstood me @sumit-158 we don't need the test_external_lib.py test (I\xa0think you were just using it to experiment).\r\n\r\nWe need to monkeypatch the Client.get in this test. \r\nThis is why you will need the FakeEntity class.\r\n\r\nThat said putting the mocking machinary in a separate file (wikidata_utils.py) is a good idea :-)"", 'comment_created': datetime.datetime(2022, 8, 26, 18, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 956295320, 'comment_body': ""Try again, and if it's really too hard, I\xa0will give an help !"", 'comment_created': datetime.datetime(2022, 8, 26, 18, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}]","[{'commit_sha': '38ec3e7811248bdd0ab2b179ca31e1832b4a899b', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73af0c69274fc105bd9fa589746272beab130471', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93804ad7955658f293b018bf717b32bbd5afd513', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd37b80b1ad50dc1aaaf018e89cbe086d1795258', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e0d23bb494a693bc710da8db4a957bb3e8a1c0e', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd256ec5cd8fb9378337941226e51400e3c2a0793', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ff480f40a3311beab683ec1f65627cf7db4055a', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13a13888f1e295ac2fae05f8582acafb9d19960d', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6041860c4a45acb12db574ae4fbdea5ed51013b7', 'committer_username': 'teolemon', 'committer_name': 'Pierre Slamich', 'committer_email': 'pierre@openfoodfacts.org', 'commit_date': datetime.datetime(2012, 4, 29, 10, 48, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1baf3872c38f1aaee831339d9e360153febbf7ac', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '116c6ca42af85cc48a8a92792c469265b2a69eeb', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef567ab9b51931980395dec2b63c13eec0e269bd', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88fa68a1cf8baad68204b59983d96828426c3686', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d38a40552b131d19549571e603f390b828ff747', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36a0e211219d28308499095eb53847dc8473129a', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bce6a394e3144b6fab6d8826e69c0eb66507d17', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bc1c716aa81e3a58972cf3606f348f3860a0041', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb7392a8024f32170dca318b5dde95d7cc410df', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bbdf713e5b253bead44cb84ecead729ce4cc3c3', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c10dbf28fc3095bbc80fb80c51fd377eee4cbac', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8649067a873f446270ccb5f5c3b6470c097cd6e6', 'committer_username': 'sumit-158', 'committer_name': 'Sumit Kashyap', 'committer_email': 'mr.sumitkrr@gmail.com', 'commit_date': datetime.datetime(2021, 12, 24, 10, 30, 27, tzinfo=datetime.timezone.utc)}]",Sumit Kashyap,96618001,mr.sumitkrr@gmail.com,User,,47,,11,11

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
510764828,facets-knowledge-panels,openfoodfacts/facets-knowledge-panels,Python,6,6,6,12,118,13,9,3,"[{'id': 1440397781, 'number': 117, 'closed': datetime.datetime(2023, 7, 20, 15, 28, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 6, 20, 48, tzinfo=datetime.timezone.utc), 'time_taken': 119270.0, 'time_delta': '1 day, 9:07:50', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 1294560144, 'number': 107, 'closed': datetime.datetime(2023, 3, 31, 15, 45, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 29, 12, 32, 41, tzinfo=datetime.timezone.utc), 'time_taken': 184382.0, 'time_delta': '2 days, 3:13:02', 'additions': 10, 'deletions': 11, 'state': 'closed'}, {'id': 1270767858, 'number': 100, 'closed': datetime.datetime(2023, 3, 10, 10, 20, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 10, 7, 58, 23, tzinfo=datetime.timezone.utc), 'time_taken': 8541.0, 'time_delta': '2:22:21', 'additions': 32, 'deletions': 30, 'state': 'closed'}, {'id': 1250140757, 'number': 97, 'closed': datetime.datetime(2023, 2, 22, 14, 40, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 22, 13, 28, 59, tzinfo=datetime.timezone.utc), 'time_taken': 4263.0, 'time_delta': '1:11:03', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1229396506, 'number': 95, 'closed': datetime.datetime(2023, 2, 6, 10, 7, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 5, 9, 58, 59, tzinfo=datetime.timezone.utc), 'time_taken': 86933.0, 'time_delta': '1 day, 0:08:53', 'additions': 36, 'deletions': 19, 'state': 'closed'}, {'id': 1228159259, 'number': 94, 'closed': datetime.datetime(2023, 2, 3, 16, 1, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 3, 13, 44, 2, tzinfo=datetime.timezone.utc), 'time_taken': 8274.0, 'time_delta': '2:17:54', 'additions': 182, 'deletions': 48, 'state': 'closed'}, {'id': 1226660891, 'number': 93, 'closed': datetime.datetime(2023, 2, 3, 10, 26, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 2, 14, 15, 3, tzinfo=datetime.timezone.utc), 'time_taken': 72675.0, 'time_delta': '20:11:15', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1220594252, 'number': 92, 'closed': datetime.datetime(2023, 1, 30, 9, 33, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 29, 11, 33, 28, tzinfo=datetime.timezone.utc), 'time_taken': 79194.0, 'time_delta': '21:59:54', 'additions': 76, 'deletions': 63, 'state': 'closed'}, {'id': 1216506063, 'number': 90, 'closed': datetime.datetime(2023, 1, 27, 10, 21, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 25, 12, 36, 43, tzinfo=datetime.timezone.utc), 'time_taken': 164680.0, 'time_delta': '1 day, 21:44:40', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 1196566263, 'number': 86, 'closed': datetime.datetime(2023, 1, 17, 5, 7, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 13, 11, 7, 11, tzinfo=datetime.timezone.utc), 'time_taken': 324006.0, 'time_delta': '3 days, 18:00:06', 'additions': 80, 'deletions': 69, 'state': 'closed'}, {'id': 1195110294, 'number': 84, 'closed': datetime.datetime(2023, 1, 13, 9, 30, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 12, 10, 41, 34, tzinfo=datetime.timezone.utc), 'time_taken': 82146.0, 'time_delta': '22:49:06', 'additions': 13, 'deletions': 10, 'state': 'closed'}, {'id': 1192285675, 'number': 82, 'closed': datetime.datetime(2023, 1, 10, 13, 15, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 10, 12, 17, 24, tzinfo=datetime.timezone.utc), 'time_taken': 3513.0, 'time_delta': '0:58:33', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1176323830, 'number': 79, 'closed': datetime.datetime(2023, 1, 10, 11, 29, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 23, 11, 31, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1555071.0, 'time_delta': '17 days, 23:57:51', 'additions': 118, 'deletions': 60, 'state': 'closed'}, {'id': 1146350359, 'number': 74, 'closed': datetime.datetime(2022, 12, 22, 13, 27, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 5, 11, 2, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1477485.0, 'time_delta': '17 days, 2:24:45', 'additions': 99, 'deletions': 22, 'state': 'closed'}, {'id': 1142706822, 'number': 73, 'closed': datetime.datetime(2022, 12, 2, 7, 58, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 2, 3, 55, 21, tzinfo=datetime.timezone.utc), 'time_taken': 14591.0, 'time_delta': '4:03:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1138816757, 'number': 68, 'closed': datetime.datetime(2022, 11, 30, 16, 21, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 29, 11, 18, 58, tzinfo=datetime.timezone.utc), 'time_taken': 104580.0, 'time_delta': '1 day, 5:03:00', 'additions': 78, 'deletions': 23, 'state': 'closed'}, {'id': 1110623830, 'number': 59, 'closed': datetime.datetime(2022, 11, 24, 15, 0, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 4, 10, 15, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1745096.0, 'time_delta': '20 days, 4:44:56', 'additions': 191, 'deletions': 48, 'state': 'closed'}, {'id': 1088380900, 'number': 50, 'closed': datetime.datetime(2022, 10, 17, 9, 0, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 16, 11, 52, 24, tzinfo=datetime.timezone.utc), 'time_taken': 76064.0, 'time_delta': '21:07:44', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 1088150984, 'number': 49, 'closed': datetime.datetime(2022, 10, 21, 8, 54, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 15, 13, 16, 31, tzinfo=datetime.timezone.utc), 'time_taken': 502678.0, 'time_delta': '5 days, 19:37:58', 'additions': 194, 'deletions': 224, 'state': 'closed'}, {'id': 1083241688, 'number': 47, 'closed': datetime.datetime(2022, 10, 17, 16, 46, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 11, 12, 25, 36, tzinfo=datetime.timezone.utc), 'time_taken': 534069.0, 'time_delta': '6 days, 4:21:09', 'additions': 52, 'deletions': 0, 'state': 'closed'}, {'id': 1082776420, 'number': 46, 'closed': datetime.datetime(2022, 10, 11, 9, 20, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 11, 5, 21, 58, tzinfo=datetime.timezone.utc), 'time_taken': 14317.0, 'time_delta': '3:58:37', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 1071178003, 'number': 41, 'closed': datetime.datetime(2022, 9, 29, 14, 52, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 29, 11, 6, 23, tzinfo=datetime.timezone.utc), 'time_taken': 13543.0, 'time_delta': '3:45:43', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1064001101, 'number': 36, 'closed': datetime.datetime(2022, 9, 23, 10, 41, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 22, 10, 58, 53, tzinfo=datetime.timezone.utc), 'time_taken': 85368.0, 'time_delta': '23:42:48', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1044778046, 'number': 29, 'closed': datetime.datetime(2022, 9, 21, 10, 41, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 10, 57, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1640630.0, 'time_delta': '18 days, 23:43:50', 'additions': 170, 'deletions': 113, 'state': 'closed'}, {'id': 1042275990, 'number': 27, 'closed': datetime.datetime(2022, 9, 16, 19, 20, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 11, 33, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1410413.0, 'time_delta': '16 days, 7:46:53', 'additions': 620, 'deletions': 249, 'state': 'closed'}, {'id': 1038863756, 'number': 24, 'closed': datetime.datetime(2022, 9, 28, 14, 51, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 28, 12, 11, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2687999.0, 'time_delta': '31 days, 2:39:59', 'additions': 282, 'deletions': 85, 'state': 'closed'}, {'id': 1023986593, 'number': 18, 'closed': datetime.datetime(2022, 8, 26, 18, 1, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 15, 6, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1306499.0, 'time_delta': '15 days, 2:54:59', 'additions': 495, 'deletions': 80, 'state': 'closed'}, {'id': 1013906718, 'number': 17, 'closed': datetime.datetime(2022, 9, 2, 14, 27, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 1, 13, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2766934.0, 'time_delta': '32 days, 0:35:34', 'additions': 322, 'deletions': 18, 'state': 'closed'}, {'id': 1012134849, 'number': 16, 'closed': datetime.datetime(2022, 8, 1, 10, 55, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 15, 54, 39, tzinfo=datetime.timezone.utc), 'time_taken': 241252.0, 'time_delta': '2 days, 19:00:52', 'additions': 169, 'deletions': 14, 'state': 'closed'}, {'id': 1001708147, 'number': 15, 'closed': datetime.datetime(2022, 8, 1, 11, 6, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 20, 7, 15, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1050631.0, 'time_delta': '12 days, 3:50:31', 'additions': 22, 'deletions': 1, 'state': 'closed'}, {'id': 1000663543, 'number': 13, 'closed': datetime.datetime(2022, 7, 29, 15, 39, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 11, 35, 17, tzinfo=datetime.timezone.utc), 'time_taken': 878644.0, 'time_delta': '10 days, 4:04:04', 'additions': 207, 'deletions': 54, 'state': 'closed'}, {'id': 998445587, 'number': 10, 'closed': datetime.datetime(2022, 7, 29, 14, 44, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 16, 15, 12, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1121543.0, 'time_delta': '12 days, 23:32:23', 'additions': 268, 'deletions': 58, 'state': 'closed'}, {'id': 994167722, 'number': 8, 'closed': datetime.datetime(2022, 7, 15, 16, 40, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 11, 26, 16, tzinfo=datetime.timezone.utc), 'time_taken': 278080.0, 'time_delta': '3 days, 5:14:40', 'additions': 241, 'deletions': 52, 'state': 'closed'}, {'id': 992927162, 'number': 7, 'closed': datetime.datetime(2022, 7, 15, 15, 27, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 10, 25, 59, tzinfo=datetime.timezone.utc), 'time_taken': 363698.0, 'time_delta': '4 days, 5:01:38', 'additions': 3, 'deletions': 6, 'state': 'closed'}, {'id': 991588711, 'number': 6, 'closed': datetime.datetime(2022, 7, 8, 17, 4, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 12, 8, 32, tzinfo=datetime.timezone.utc), 'time_taken': 17737.0, 'time_delta': '4:55:37', 'additions': 29, 'deletions': 1, 'state': 'closed'}, {'id': 991476491, 'number': 5, 'closed': datetime.datetime(2022, 7, 8, 17, 7, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 10, 18, 22, tzinfo=datetime.timezone.utc), 'time_taken': 24535.0, 'time_delta': '6:48:55', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 988706588, 'number': 4, 'closed': datetime.datetime(2022, 7, 7, 17, 13, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 11, 56, 49, tzinfo=datetime.timezone.utc), 'time_taken': 105395.0, 'time_delta': '1 day, 5:16:35', 'additions': 138, 'deletions': 0, 'state': 'closed'}]"
