pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
895297760,Add DNS support.,"#### Description

- implemented UDP layer that mimics `asyncio.start_server` and `asyncio.open_connection`
- introduced `DNSFlow` and `DNSLayer`, together with console and web representation
- extended filtering, saving and tests to DNS
- full coverage for `DNSLayer`
- DNS server addon, UDP and `DNSLayer` not yet fully covered
- changed `lightred` to `red` for failed flows in web UI and made method sort consistent with what the user sees (regarding WS and WSS)

#### Checklist

 - [x] I have updated tests where applicable.
 - [x] I have added an entry to the CHANGELOG.
",True,5232,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/5232,https://github.com/mitmproxy/mitmproxy/pull/5232,closed,4051,561,84,100,14,45,0,0,[],2022-03-31 02:35:17+00:00,2022-04-24 21:17:24+00:00,2140927.0,"24 days, 18:42:07","[{'comment_id': 839433153, 'comment_body': ""Potentially stupid question: Why do we need to store that? Isn't that generally inferrable from the flow type?"", 'comment_created': datetime.datetime(2022, 3, 31, 10, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839442205, 'comment_body': ""This type of metaprogramming (both SerializableIntEnum and CustomValueSerializableIntEnum) is a good source of ugly bugs. You think it's an enum and start comparing with `is`, then you realize that `_missing_` actually does not work with `is`, etc. - let's just keep using basic data types. I think it's useful to have these constants around for legible comparisons (similar to https://github.com/mitmproxy/mitmproxy/blob/main/mitmproxy/net/http/status_codes.py), but let's keep our datastructures as simple ints, strs and bytes."", 'comment_created': datetime.datetime(2022, 3, 31, 10, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839450478, 'comment_body': 'This still blocks, we need the asyncio version: https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.getaddrinfo. Hooks can be async since v8, so this should be easy to adopt. :)', 'comment_created': datetime.datetime(2022, 3, 31, 10, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839749063, 'comment_body': ""I don't understand this part. How is decreasing the TTL helpful? Can't we just reuse what we get from upstream?"", 'comment_created': datetime.datetime(2022, 3, 31, 15, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839756375, 'comment_body': ""Let's do proper `if self.type == ...:` blocks, we're just evading test coverage here 😛 "", 'comment_created': datetime.datetime(2022, 3, 31, 15, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839758766, 'comment_body': ""This is a bit weird because it will work for some IP addresses that happen to be UTF8/ASCII. Maybe it's better if we just don't catch any errors so that people don't use it to test for existence? We could/should potentially add an assertion instead that ensures that type matches."", 'comment_created': datetime.datetime(2022, 3, 31, 15, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839765611, 'comment_body': ""I haven't looked in detail, but two different `unpack_domain_name` implementations?\r\nIt likely makes sense to move that into a private helper function (`_unpack_domain_name`) outside of either class. That's generally nicer than dealing with `@classmethod`/`@staticmethod`."", 'comment_created': datetime.datetime(2022, 3, 31, 15, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839768415, 'comment_body': ""Reimport from https://github.com/mitmproxy/mitmproxy/blob/aa2f935dbbbf59d76b30cd1afffca2cf791ae782/mitmproxy/connection.py#L21-L24?\r\n\r\n(I don't know if the comment there is still true with current mypy, in any case we should just be consistent)"", 'comment_created': datetime.datetime(2022, 3, 31, 15, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839779227, 'comment_body': ""Is there a reason why we even want to cater for that case? Can't we just make `id` read-only?"", 'comment_created': datetime.datetime(2022, 3, 31, 16, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839787087, 'comment_body': '```suggestion\r\n                disabled={flow.type !== ""http""}>Export▾</Button>\r\n```', 'comment_created': datetime.datetime(2022, 3, 31, 16, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839797570, 'comment_body': ""If we provide a `.to_json()` method as part of our public Python API (I like it!), we should use the same casing as we have for our Python identifiers, i.e. `recursion_desired` and not `recursionDesired`.\r\nFor mitmweb/JS one could make an argument to convert to camelCase because that's a convention in JS land, but then we'd need two slightly different `to_json` implementations, which again is terrible. So let's just use snake_case for DNS flows in mitmweb as well (we already do that for HTTP)."", 'comment_created': datetime.datetime(2022, 3, 31, 16, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839808530, 'comment_body': 'Nit:\r\n```suggestion\r\n    loop = asyncio.events.get_running_loop()\r\n```', 'comment_created': datetime.datetime(2022, 3, 31, 16, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839812250, 'comment_body': 'Is there a reason why we work with markers instead of using an `asyncio.Queue`?', 'comment_created': datetime.datetime(2022, 3, 31, 16, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839846810, 'comment_body': ""This multi-inheritance here makes it incredibly hard to figure out what's going on. I think I also don't understand why we inherit from `base_events.Server`? How can we make this easier to understand?"", 'comment_created': datetime.datetime(2022, 3, 31, 17, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839851221, 'comment_body': ""Doing this in a separate task means we won't catch any exceptions from this, ideally we should do this outside of the constructor."", 'comment_created': datetime.datetime(2022, 3, 31, 17, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839870489, 'comment_body': ""Conceptually this needs to be integrated into the `proxyserver` addon so that commands like `inject.websocket` work for QUIC as well. [^1] Let's move it into a single addon right away.\r\n\r\n[^1]: `inject.websocket` isn't a great example, but the plan is to make it possible to also inject kills for HTTP flows, see https://github.com/mitmproxy/mitmproxy/issues/4711."", 'comment_created': datetime.datetime(2022, 3, 31, 17, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839878254, 'comment_body': 'I haven\'t fully made my mind up for this, but some preliminary feedback:\r\n\r\n1. Right now this module is incredibly hard to understand and requires in-depth knowledge of asyncio internals. The high-level idea is clear to me, but it\'s very hard to figure out what\'s actually going on. We need to figure out how we can simplify here.\r\n2. The idea of shoehorning UDP into connection-style classes is interesting, but does not work perfectly with QUIC\'s connection migration (we\'d have multiple ""connections"". Maybe we need to embrace that UDP is not TCP, just call `create_datagram_endpoint()`, and then have some application layer-specific logic to route them to different sublayers and handle expiration. I\'m not sure yet, right now it just feels very messy.', 'comment_created': datetime.datetime(2022, 3, 31, 17, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841058133, 'comment_body': 'Somewhat related: For HTTP/1, we have tucked all packing/unpacking into https://github.com/mitmproxy/mitmproxy/tree/main/mitmproxy/net/http/http1. It may make sense to be consistent here for UDP and not make packing/unpacking part of the public API for now.', 'comment_created': datetime.datetime(2022, 4, 2, 10, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841066866, 'comment_body': 'This becomes necessary in `open_connection` in ./proxy/server.py, where we react to `commands.OpenConnection` which only gives us the `Connection`, not the flow. Also - in theory - there might be some protocol-agnostic flows/layers in the future.', 'comment_created': datetime.datetime(2022, 4, 2, 11, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841068224, 'comment_body': ""If `dns_mode=forward:...` is used, upstream's TTL will be returned to the client (if no `dns_response` hook decides to change it). If `simple` mode is used, we don't really get a TTL from `getaddrinfo`, so I felt it should be as low as possible by default, in case someone wants to get a flow for every time a client tries to resolve an address. Totally open to different default suggestions, though."", 'comment_created': datetime.datetime(2022, 4, 2, 11, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841069888, 'comment_body': 'Actually `asyncio.start_server` also calls `get_event_loop`. So if raising `RuntimeError` is important, `refresh_server` in `./addons/proxyserver.py` should provide `loop=` in its call to `asyncio.start_server`.', 'comment_created': datetime.datetime(2022, 4, 2, 12, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841071077, 'comment_body': 'We cannot (or rather: should not) really hide all data from the underlying `StreamReader`, as it does a bunch of stuff internally, like pausing the transport if certain limits are exceeded. By using a marker, we translate limits from bytes to packets. It also eliminates the need to provide an entire custom implementation.\r\n(As a side note, the SelectorEvents implementation in general has heavy dependencies on methods not declared in the public API. So reimplementing is never the best choice. Also the reason for the `TODO` in `UdpWriteTransport`.)', 'comment_created': datetime.datetime(2022, 4, 2, 12, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841075764, 'comment_body': ""Let's assume a minute, see https://textslashplain.com/2022/03/31/chromiums-dns-cache/"", 'comment_created': datetime.datetime(2022, 4, 2, 13, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841076146, 'comment_body': ""I think that's mostly not to break compat with existing code. See the note at https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop"", 'comment_created': datetime.datetime(2022, 4, 2, 13, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841076705, 'comment_body': ""While the primary goal was to keep changes to mitmproxy at a minimum (~ +3k/-100), it also felt that this approach - while I wholeheartedly agree that it _does_ require in-depth knowledge of asyncio - is actually quite clean, in the sense that it doesn't dilute mitmproxy's existing concept of a connection. I've actually first experimented with another concept that would replace the `Address` as connection identifier with a generic, layer-dependent 'classifier'. The problem, however, was that this does not bode well with transparent mode. E.g. with DNS, a client could use the same id with different target servers. While I'm sure that this too could have been worked out, changes to the code base would - in generell - not have been trivial.\r\n\r\nQUICs connection migration btw. could actually be implemented similar to the way packet routing is implemented in `UdpServer.datagram_received` and `UdpServerConnection.datagram_received`. Once a new connection is made (I think it's okay if migration is also logged as a new connection) and gets to the QUIC layer, if the connection ID of the first packet matches an existing one, the flow of the old connection is migrated to the new one (replace `client_conn`, check for matching `server_conn`, same problem as mentioned before with DNS in transparent mode), and the old connection is closed.\r\n\r\nAnother advantage of keeping it to a `base_events.Server` abstraction is, that if we ever plan to support listening on multiple ports, we could actually build a simple aggregating `base_events.Server`, as it already supports multiple sockets."", 'comment_created': datetime.datetime(2022, 4, 2, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841076762, 'comment_body': ""Thanks for the explanation. My naive understanding was that flow control etc don't really apply to us, but I've also only glossed over the StreamReader implementation. I'll take a closer look again on Monday. :)"", 'comment_created': datetime.datetime(2022, 4, 2, 13, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841256486, 'comment_body': 'Fixed in f535045e69207402f224f8f28c355caec84040e6', 'comment_created': datetime.datetime(2022, 4, 3, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841256742, 'comment_body': 'Changed to 1 minute in f535045e69207402f224f8f28c355caec84040e6.', 'comment_created': datetime.datetime(2022, 4, 3, 17, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841257039, 'comment_body': 'Changed in f535045e69207402f224f8f28c355caec84040e6, tests still missing, but will be implemented shortly :)', 'comment_created': datetime.datetime(2022, 4, 3, 18, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841257952, 'comment_body': 'Agreed, the reason for the soft fail was the use in `__str__`, this has been reworked in f535045e69207402f224f8f28c355caec84040e6. It now also notifies the user that the data is invalid.\r\nShould exception information and actual data (in hex) also be included in the string representation?\r\n\r\nMaybe introduce a `human` function: Use `str()` in flow detail views and search, falling back to hex. Use, say `human.resource_record`, in flow overviews, which then shows the ""invalid data"" message.', 'comment_created': datetime.datetime(2022, 4, 3, 18, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841258657, 'comment_body': ""Agreed, moved in f535045e69207402f224f8f28c355caec84040e6 to `mitmproxy.net.dns` and simplified common code. The difference between the two implementations is DNS compression support. Also renamed the functions to make that clearer. Introduced `domain_name.cache` for (un)compressed domain names, which can be used transparently by invoking code, instead of relying that it's a `dict`."", 'comment_created': datetime.datetime(2022, 4, 3, 18, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841259007, 'comment_body': ""I had issues using the definition without the 4-tuple IPv6 part. I'll check again, if the issues persist I'll rename the definition to `SockAddress`, so that it doesn't get confused/gets clear why `Address` isn't used."", 'comment_created': datetime.datetime(2022, 4, 3, 18, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841259282, 'comment_body': ""No architectural reason, it's just if someone wants to test how an upstream server reacts to a given id. I'll gladly remove this ability and make id read-only if that's not needed..."", 'comment_created': datetime.datetime(2022, 4, 3, 18, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841263408, 'comment_body': ""I don't see a good practical reason why DNS request IDs should have any meaning, let's just make it read-only. :)"", 'comment_created': datetime.datetime(2022, 4, 3, 18, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841270928, 'comment_body': ""Since my last comment didn't really provide constructive and concrete feedback on how we might continue from this point:\r\n\r\nIf we stick with the asyncio mimicry solution, we could:\r\n- Modify the `DNSLayer` to close connections once the reply has been sent (since post-Kaminsky ports shouldn't be reused anyways).\r\n- Make the connection watchdog timeout faster on UDP (with some inspiration from rfc4787: 2min).\r\n- Add a description to `udp.py` to explain the architecture behind it.\r\n\r\nIf we decide to abstract away from `Connection`s to support TCP-connection-less protocols and connection migration, I'd suggest:\r\n1. Introducing a `ServerView` class:\r\n  For everything except transparent mode, there will be just one instance (unless we one day provide the ability to listen on multiple ports). In transparent mode, however, whenever a client initiates communication (connects or sends a packet) with a not-seen-before ip:port pair, a new `ServerView` for that server is created. Since the concept of listen ports applies to both UDP and TCP, this approach (i.e. using ip and port) should be fine.\r\n2. Providing a new `LogicalConnection` class, that is based on a unique (within a `ServerView`), layer dependent identifier.\r\n   For HTTP1 this would be the clients ip:port pair, QUIC and DNS have an id.\r\n3. Associating `Connection` instances with the new `LogicalConnection` class for connection-based protocols. Maybe also specify some `allow_multiple_connections` flag, that, if not set, will ensure that old client `Connection`s get closed.\r\n4. For UDP we would then send directly from the listening socket. In transparent mode we would (under Linux) open a single raw socket with IP_TRANSPARENT, that allows us to send from different source ip/ports. So there are no more `Connection`s to close. However, `LogicalConnection`s still need to have a watchdog or be closed.\r\n\r\n[Edit: More concise description, removed speculative part.]\r\n\r\n"", 'comment_created': datetime.datetime(2022, 4, 3, 20, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841342726, 'comment_body': 'Fixed in ea6f9727dab03b0811c180bab761d28b7e57ef50, also reused `status_code` to simplify column handling.', 'comment_created': datetime.datetime(2022, 4, 4, 3, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846799635, 'comment_body': 'Fixed in 079a59039de5910f88031eee0045be1819e0b474, used `Address` everywhere except in `TransparentSocket` where mypy complained.', 'comment_created': datetime.datetime(2022, 4, 10, 15, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846800416, 'comment_body': 'Removed the feature in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d, kept `id` writeable, however, since needed in a lot of test cases.', 'comment_created': datetime.datetime(2022, 4, 10, 16, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846800566, 'comment_body': 'No longer applies after UDP rewrite in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d.', 'comment_created': datetime.datetime(2022, 4, 10, 16, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846800732, 'comment_body': 'No longer applies after UDP rewrite in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d.', 'comment_created': datetime.datetime(2022, 4, 10, 16, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846800813, 'comment_body': 'Fixed in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d.', 'comment_created': datetime.datetime(2022, 4, 10, 16, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846802098, 'comment_body': 'After the UDP rewrite in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d, there is now a similar issue in https://github.com/Meitinger/mitmproxy/blob/f2c17a71987115dd0245495a9c415dd59edb6283/mitmproxy/addons/proxyserver.py#L260\r\nAlthough the effect should be same as for tasks created by https://github.com/Meitinger/mitmproxy/blob/f2c17a71987115dd0245495a9c415dd59edb6283/mitmproxy/addons/proxyserver.py#L69', 'comment_created': datetime.datetime(2022, 4, 10, 16, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846865472, 'comment_body': 'Fixed in 9a55989b25b763763cd03378017314edd581f25b.', 'comment_created': datetime.datetime(2022, 4, 10, 23, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 857151437, 'comment_body': 'The main intention of this exclude list was to be temporary - so unless there really is no way around it of having 100% individual test coverage, I would like to see this list here shrink over time (and not grow).', 'comment_created': datetime.datetime(2022, 4, 24, 16, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Kriechi', 'type': 'User'}, {'comment_id': 857154197, 'comment_body': 'The transparent proxying bits of `net/udp.py` are not really testable without lots of monkeypatching, which is a bit pointless. I guess we can exclude those liberally with `# pragma: no cover` statements and remove the entry here.', 'comment_created': datetime.datetime(2022, 4, 24, 17, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}]","[{'commit_sha': '8c700ec6e45fc69379eec230da1bd840854ac20e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c12db9e42e4acbda2dc6b33eb06f5dbd35c480b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d79837837126abf78244588017f15418281b881', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d3e4fcc3b364fa792156a351ae0cb8b8d2ecb0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62cfc7079e9fcd4358c90a8feb03ebfeb4a05a1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef3270dd6a18c5728027ae57887a5a4d87222d83', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e301e56cee52a683c24056aac252cf21ee4cb16', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '052ea829535bcb2092eb38a6dd802a152c21e495', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b118f83eb68d00fd5e69ba06ebc470baa1e5bae', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d8b0afa894469ac3a9318c2c1c92fb10abd84f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9981ff0a1315c35e2ecd5c8b49f5be0b1283ca6c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d7eb987e90de7a1200a9d1049c0cedca74d7333', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ea5801dd9642b04b2bc058ad3ec6db1c39f1b94', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4012a0d7dad7613dc7833f71cb121ae931d6c76d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580d266f87fd5cc1db1e653aae9efd688c7d80e0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9142b30d04b6b4513ee72de21eeb8549b1e233e9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2af09ca36cc2ad2b2bc1a3b8e3535faedc6a186e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d41b8e8c0d814e15160af6e4a9b077af0a3e79f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8443fef6406e1cc535a22c04d8136ede4da8269a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2445360a47c77153ae9224f76e5de3afc6ad9fa1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2365ebebf45cdab66692bdda0e32c6d23b23a1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2251c2ef2056df069a50d87c54854e2a7cd54e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '417b4c811bf450991418a12d2223717d409fe257', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49a91d5ffc163221d7776c61fed5cf34f2846b67', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08a9a1be5c251a081b8730e72c94f0bc380ddf8b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74603dd1154108738a1c80d03963c45bd612545e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f328e22ea50d580caa0928c1069c36ded765c54', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad264781b3ff2697e08252350ba61a81b067701', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525ac67605f40c0a1d68212f64734129e4b3a5a3', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc0bdc143cd28e59e5aecaad9d37ea40badf64f1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c504bc6eb1b132cdbdefe8be94138492080706cd', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86adb1a5a01d9bc3ec07bf4a2a5fbce3b027baae', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2f918a17e8d06c638b1bb5b06b3150a786d77a0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1d937bf4b0f705c1e6cb9eef4591b08b7076cd1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd713a01841535aea63a336237a9bdaedfc32f17a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917d57265e5a57e52a267443c548d991e78b33c2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fff28e2a52799e19ac8d7b43da5544ea427eac2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '993c3e4ee22c424f482b182135d142986059c475', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26120534151cb7afc63d29ca76d164eb5e272cae', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9adf715124210b3e1ede343b2ecf750cbc508117', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30cd490c7946535c8b6bc0127e5c616d4a4d5887', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff22e54dbc9f074d9095e0861b83051bfdd6b70d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a68ff773676869c3ea74fc46bb8460e28175d57', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d1e525f0a25220918eea21ae04f84a83c1bcb41', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86ddac327fbafce85ce063790025649fef3f4090', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f535045e69207402f224f8f28c355caec84040e6', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e7662c87858063ba42c86d8b974c60ee4b5688', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c115c7a184b5776802d1bc0f3186f47edd7e51', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a4f5f61e7dd8fa41440b6590e4bea5aa1d3f174', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea6f9727dab03b0811c180bab761d28b7e57ef50', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7acc1b2590d3cf13974bea76da422754b9d1dcc7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c43dbdc79bbdd3dde2b7412db0dfe547d15a9aa2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d495f10348ad14176b0f116b6df1fca979c209', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '563f041ba62cc36aaa849d10fbd5b663165741ec', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '079a59039de5910f88031eee0045be1819e0b474', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec1f7361714ed9e49295a56ef4821467341f82b5', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '383dd67a613eec8dbbcc1178bbaf5aae381ce837', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c17a71987115dd0245495a9c415dd59edb6283', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e04d1c4909a999741b9472ef07fe7bfdbbc3f5', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5139c5a4cba0a4412a31a946bd2efc0ddfafdc9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a55989b25b763763cd03378017314edd581f25b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b69087a194ac14bbd9149784a84e493c3300b39', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc671de3976158c0649d6797515514cad32ce82d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e114391642d1802bd9007b74d9048bf955d3b3', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6692baed83549421673b7cf5f68fca58cdff8547', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976b1a5f27035cc469e936f1fafd2d5c89c48f2b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b84848be24db969e62d33837269c9abe45bfb31', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9338f80a282fecf55fc29558527503d796fdb77', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6a279818854bbad9fc4548dea324291d7822b1', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c9ab2e7747aafb89d2099d0ac0db9c2e5ca0db5', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c17e3a16ec3257f66ee1b1cc1ca8f39244117f1e', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74f0965a0b6527b0d25c546f1c746cff0c238036', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bc43fc10d1c599e92138d43380b2b0054027208', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0407d9697b0c854a96265108d88363f2618ab943', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c33870ac8025d889b8c1db6a604d3cc102b6195', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b731ed7707b2ca3daf7bcd2862c28435d7ce553', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af1974b3016537997813cf1afabdc7e4d062605d', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b640b600da782b40d61dbc382b62d49bee43e7', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '196c8819719e50fe947180794b1081daa65637ed', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab7016b318d7c37fc30cef9c0567b9b620b883e', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9b55385df52428f82a52bbb5203399b30d34baf', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08df89618e497bc50fdd38ed01813cc431da2061', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1761033d9b10203d3caab72e4187c6b51a86422', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c821d02e096386611c4d0640398eef2f4a231e4e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99bcfb7f551edda7d35c2ffbd8a5aa05fc7e5f94', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0553b73d368f16ec137e62cc7f3687888dd78841', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd61b21ce37c112c3b1e35774396da9ad0d51b76', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4229c7c85c7f391aafd97cccd9bc9c066054de43', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda488d87120e3091b9e28468544d6753a91f414', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebaacfd85070ea62812bb275250608ecd2e2a14d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffca36cf9b5067493bc127d3fecd5eab58562a64', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdd3db07c626cb16a58e5e899e6eaeaffc29fbd', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '886a752addb8e0de37fa8a57622d812cef0eedec', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16cb6058646036a42ecc186d29cf748066583c49', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f253a65a461aaf74a7d3d3f05029ea6243633213', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f6da5180e759c02d54ef80c575ebd503f3b0c82', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6881332a215eec1bbef9a574593adb8100e48b72', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6554924eeb7446b407b33027c5bb06ba9ee039a', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '330243f2abe9fbaa0bd663ea811473f210ab67cf', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Manuel Meitinger,3720329,,User,,36,,1,19
967051333,Add support for raw UDP.,"#### Description

To support ignoring connections in QUIC and for #5397 & #5283 a raw UDP layer is needed.
With this small change, the (raw) TCP layer works equally well in the meantime (and has UI support), as half-closing will fail in supported way.

Of course I could also extend this PR and rename the TCPLayer to RAWLayer (or StreamLayer?), TCPFlow to RAWFlow etc., so it can be used for both protocols without confusion about the name. (The TCPLayer could also be duplicated under the name UDPLayer, but that's _a lot_ of duplicated code without real added value.)
User entry points like the 'inject.tcp' command or the 'tcp' filter should be kept and filter for/restrict to the underlying protocol.

Comments are very welcome :)

EDIT: UDP layer and flow have now been implemented without basing it on TCP or unifying RAW hooks.

#### Checklist

 - [x] I have updated tests where applicable.
 - [X] I have added an entry to the CHANGELOG.
",True,5414,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/5414,https://github.com/mitmproxy/mitmproxy/pull/5414,closed,1290,245,54,10,18,0,0,0,[],2022-06-14 14:59:14+00:00,2022-07-27 00:20:30+00:00,3662476.0,"42 days, 9:21:16",[],"[{'commit_sha': '9c9b1d88745d41301f6436fd47df41276fdae55a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff826911fb8ae3a957bc2e7b65b70efd10d81e6', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4740e0f7801947dc770dfbe5570f0ed477e00ca', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '653d9222e3f2df0d255a0632391a1ade0e19192f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1185732cc44f396bfb95d9773d9d43acee2f3fbd', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c61bd333ca451d4ac65f82f5f66b0993f336e548', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1bf3a4f51d0e53ad8628878c462053f3b75b628', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd6be8b8c8e7eb56583a1ad3fa762e20f351e559', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d2ba99c2fd2fa1c0c817c5bbbb6ab87bf7b87b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95a2940ca63169756db64f72b8011aae4c95a60d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}]",Manuel Meitinger,3720329,,User,,36,,1,19
980394527,Add QUIC support.,"#### Description

This is the PR for QUIC support in mitmproxy.

#### Checklist

 - [x] Stream and datagram relay layer for arbitrary protocols. (See also #5414)
 - [x] Support `TlsClienthelloHook`, `TlsFailedClientHook` and `TlsEstablishedClientHook`.
 - [x] Use hooks for TLS settings (`QuicTlsStartClientHook` and `QuicTlsStartServerHook`).
 - [x] Implement `Http3Client` and `Http3Server`.
 - [x] Support `NextLayer` decisions.
 - [x] ~~Extended UDP implementation to support connection roaming.~~ [dropped by request]
 - [x] ~~Implement and test upstream mode and `via` handling (if possible).~~ [postponed until UDP/TCP mode merge]
 - [x] Write tests.
 - [x] Add entry to CHANGELOG.
",True,5435,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/5435,https://github.com/mitmproxy/mitmproxy/pull/5435,closed,5434,277,67,135,22,30,0,0,[],2022-06-27 18:28:01+00:00,2022-11-28 17:58:14+00:00,13303813.0,"153 days, 23:30:13","[{'comment_id': 947910284, 'comment_body': ""Let's add an `<0.10` upper bound, otherwise we're in for fun surprises."", 'comment_created': datetime.datetime(2022, 8, 17, 13, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 947911836, 'comment_body': 'Any particular reason for this change?', 'comment_created': datetime.datetime(2022, 8, 17, 13, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 947914294, 'comment_body': ""This is presumably to support connection migration? I'm not too excited about this permeating into our very core commands and events. Could we potentially add an artificial `ConnectionMigrated` event or something like this? And/or have the mode instance just modify `DatagramWriter._remote_addr`?"", 'comment_created': datetime.datetime(2022, 8, 17, 13, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 948455562, 'comment_body': ""Then let's just `assert context.client.alpn` :-)"", 'comment_created': datetime.datetime(2022, 8, 17, 21, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 948462813, 'comment_body': 'Can you quickly explain how a single client layer can have multiple connection ids?', 'comment_created': datetime.datetime(2022, 8, 17, 21, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 948464370, 'comment_body': ""Seeing this here inspired https://github.com/mitmproxy/mitmproxy/discussions/5535, but this shouldn't block merging this here. I'm happy with having these provisional mode names for now."", 'comment_created': datetime.datetime(2022, 8, 17, 21, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 948468608, 'comment_body': ""This needs to happen here because we otherwise don't get a connection id yet?"", 'comment_created': datetime.datetime(2022, 8, 17, 22, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 950063957, 'comment_body': ""That's due to QUIC allowing multiple connection IDs for the same endpoint. (Also as a privacy measure: https://datatracker.ietf.org/doc/html/rfc9000#section-9.5)"", 'comment_created': datetime.datetime(2022, 8, 19, 10, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 950066038, 'comment_body': ""We're already checking the returned scheme in `mode_specs.py`, so instead of adding `h1`, `h2` and `h3` (which will be checked again in `QuicMode` anyways), I think it's better to make `server_spec.parse` scheme-agnostic."", 'comment_created': datetime.datetime(2022, 8, 19, 10, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 964780589, 'comment_body': ""Are there any browsers for which this is testable yet? (or other clients that do multiplexing?)\r\n\r\nI vaguely recall Firefox breaking because it tried CONNECT-over-HTTP/2 after some update and we didn't support that properly yet. Here's the WIP branch to add support: https://github.com/mitmproxy/mitmproxy/compare/main...mhils:mitmproxy:http2-proxy. To be honest I have no recollection of any of the particular issues here, but I would presume that some of them may be present for HTTP/3 as well."", 'comment_created': datetime.datetime(2022, 9, 7, 12, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 964783583, 'comment_body': '```suggestion\r\n        if spec.scheme in (""https"", ""http3"", ""quic"", ""tls"", ""dtls""):\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 12, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965015694, 'comment_body': 'Is there a particular reason why we want this to be configurable?', 'comment_created': datetime.datetime(2022, 9, 7, 15, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965020037, 'comment_body': ""Can we vendor this method here please? I'd like to depend on aioquic as little as possible. Some of their TLS crypto stuff is just a bit frightening, and I don't want the primitives there to permeate anywhere."", 'comment_created': datetime.datetime(2022, 9, 7, 15, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965335511, 'comment_body': 'datagrams refers to https://www.rfc-editor.org/rfc/rfc9221.html? Do we have any clients/servers to test this with?', 'comment_created': datetime.datetime(2022, 9, 7, 21, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965336594, 'comment_body': 'Do I get this right that there\'s a fake top level ""UDP flow"" that is only use for signalling?', 'comment_created': datetime.datetime(2022, 9, 7, 22, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965338088, 'comment_body': 'Do I see this correctly that DatagramFrameReceived is completely undocumented in aioquic?', 'comment_created': datetime.datetime(2022, 9, 7, 22, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965338476, 'comment_body': 'Name suggestion: RawQuicStreamsLayer?', 'comment_created': datetime.datetime(2022, 9, 7, 22, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965339627, 'comment_body': 'Clarification question: This would also work perfectly fine to proxy HTTP/3 streams, correct?', 'comment_created': datetime.datetime(2022, 9, 7, 22, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965344279, 'comment_body': 'FYI one reason why HttpStream subclasses layer.Layer is that streams can block independently. Here we handle all message hooks in QuicStreamLayer (the HTTP equivalent would be HttpLayer), which means that one intercepted stream blocks all other streams.\r\n\r\nThis here is definitely good enough for a first iteration though.', 'comment_created': datetime.datetime(2022, 9, 7, 22, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965884212, 'comment_body': 'Yes, Chromium (with _a lot_ of debugging to get the proper command line):\r\n```shell\r\nchrome.exe \\\r\n    --proxy-server=""http=quic://localhost:8080;https=quic://127.0.0.1:8080"" \\  # needs to be set per proto\r\n    --force-fieldtrial-params=QUIC.Enabled:enable_quic_proxies_for_https_urls/true \\  # flag buried deep in Finch\r\n    --origin-to-force-quic-on=127.0.0.1:8080 \\  # only way to get around a custom root CA, --ignore-certificate-errors-spki-list doesn\'t work for proxies\r\n    https://mitmproxy.org\r\n```\r\n\r\nCurrently, as you pointed out, this triggers https://github.com/mitmproxy/mitmproxy/blob/891dae031c65a3268a18056bff9719ac9ee2a66f/mitmproxy/proxy/layers/http/_http2.py#L605 and is not implemented.', 'comment_created': datetime.datetime(2022, 9, 8, 12, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965887111, 'comment_body': ""It's the only settings that's actually used in multiple places, but otherwise... I'll remove it :)"", 'comment_created': datetime.datetime(2022, 9, 8, 12, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965901852, 'comment_body': ""Yes, and I think it's also what WebTransport uses (https://web.dev/webtransport/#datagram).\r\naioquic's own client/server examples support it:\r\nhttps://github.com/aiortc/aioquic/blob/239f99b8a3d4f5bc88cb280df765f35722cefe57/examples/http3_server.py#L249"", 'comment_created': datetime.datetime(2022, 9, 8, 12, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965902936, 'comment_body': 'And datagrams :)', 'comment_created': datetime.datetime(2022, 9, 8, 12, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965916943, 'comment_body': ""Well at least there's docstring 😅https://github.com/aiortc/aioquic/blob/725ff50172f3a1eb5415458e231bdc1d92282904/src/aioquic/quic/events.py#L40 \r\n(compared to what I had to go through to get Chromium to talk QUIC to mitmproxy, that's almost a full spec ;)"", 'comment_created': datetime.datetime(2022, 9, 8, 12, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965920299, 'comment_body': ""Yes, I've actually tested that in the previous implementation (before multi-server). This layer is basically TCPLayer/UDPLayer for QUIC."", 'comment_created': datetime.datetime(2022, 9, 8, 12, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965930413, 'comment_body': ""Well in that case... I was actually exploring the idea of doing `QuicStreamLayer` differently before, namely splitting up the  client connection per stream, and merging it back together at the server. That would allow for doing `NextLayer` per stream (implementing DNS over QUIC would be a breeze), but also ease implementation of CONNECT/upstream support. With the new multi-server mode I dropped it, because of how connections are registered now, since I planned to use proxyserver's connections for routing. But if the additional complexity of layer routing like in HTTP is desired anyways, I'll give it another try :)"", 'comment_created': datetime.datetime(2022, 9, 8, 12, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965931108, 'comment_body': 'Will do, unless https://github.com/mitmproxy/mitmproxy/pull/5435#discussion_r965930413.', 'comment_created': datetime.datetime(2022, 9, 8, 12, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 966197690, 'comment_body': ""Yeah, IIRC it's not just this check though. I think this was added to preempt issues further down the line. I have no specific memories though, sorry for being unhelpful on this. 😅 \r\n\r\n👍 👍 👍  on the Chromium invocation."", 'comment_created': datetime.datetime(2022, 9, 8, 16, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 966198273, 'comment_body': ""Let's just make it a constant somewhere, I don't see why users would want to configure it."", 'comment_created': datetime.datetime(2022, 9, 8, 16, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 966200251, 'comment_body': 'Awesome!', 'comment_created': datetime.datetime(2022, 9, 8, 16, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}]","[{'commit_sha': '7d5b820642580e334c3e5118c2c3992581e5aeb6', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4f0e28dc09e767d366457d4b2b4926c406cdb7a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '568d03c600a9df429e410a6f0ab5d702304de151', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5926c45aa51316e0d9031eeeaaebcaa22d1055be', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff42d291147eb444c785842b71aac07ee7bfa46e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c271f246e247d2cf847141a80fdd31a595e99993', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e49eebe62dbe3e527ba95934e05ade39fde62d8', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4cb656b431a5667dbc09f1fff4971e3fa67fafa', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '366e696538061d13540ced440998193e4c1e4c31', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08aa838e9681746c64beb0f3f3f085863501ac49', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34776c1298f571abc7581054bbac642a9699269b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aaa2f9b9b9c519291df455e1922c614e285613c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac21eac71ebfed537933a7842c84557ec4a84b9e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f129a1e5a30fa3534028b667af90c2f5ece517d1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71645ddc8d4236bb23de8f35793a25929dad1b39', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5454a71bb69b0836c135074725fe60ee7cd044fc', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a9c962caa0ededd0f39b84bd7a25bc8633ae577', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5608b0629a3a82493f8ecad7d41200f02115b863', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e66875e73ad1cb3dd2b93b69fd6079ea348da87', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97e482998b76e8a3f18821a409b6eaa5c52d3754', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b5afe54c46eca45ef70bb1ac82828735fe8d7ef', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2426d3d03847e0273707436268d79c24616b3e74', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1426dec45e360f790367a9ce851a4b75779cdee6', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9afc502a699bfc66e14fe439dd1902727ebf36c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8b7b6e173ad0167da3de9482bd04a484ce069f1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9f4b5a2df6cea4d8f6f455ead3a10b55eba122', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5902c7b0fa9d354172a3d438ec408d88c959857a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd213b4a25d6da2692aab6f4cf9ec6d645e22b1d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46096e6af9b8431301897a4b3f411dcf401c09ea', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534bc598337c29d3c004b028bd1c975c4a449715', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '569faf41d0f20257a96bdf1c05d3e4b132b9e883', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e71b0331b8de95c4204d5cc26fb07e967883972', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a221ad9b7c376135386af4eecf444182ae0322f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f33e70a82f2b955b7521e9aaa1c08bc401221a0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d52f3416c1f7a43603742876167f124c4d3ba1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46195ce4a6d0e803e3a0593325647cdf8990e518', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1355e4a118a672bff0681ddfe351cf9d90c7e9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f92a20af4cda9d1b01102e9177eda5b53f65e818', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b4894f3c00c1dcbaec3ff79cce0dbb30449789', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd94345b2f32aa04ed57dadac99c1ce9724ec15b2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4c6e01399ebc5e78e4a52b78a694459485ffdeb', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eff13002e8e11a30db2c7d763d6995f03944b00e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea6de335f078ac3426df20813beac257d0205414', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8dc62a101d2acbd086ff3d0b5d14768bba163b1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ac83aab00e653f307227405f056edffad40dbe4', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b87123ef2fa28b4736118608fdf9fffcc94877', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0465d815c53b10bfb2ef3eac0513afe250683bf8', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4dfcc0b8e93b184bd07de4c7f359ff06fe24510', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49c3fc2c637c5ea35ca1cc284a7191ea174ef54b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f702b695d5cc2656c529024a5d5b674ed18c932', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b1d779f02598e06631aaedfc33d28262892a0c4', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09ab2b765d45713d719951b59fdfd9f50d4e4015', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d3380706bedbbb07960ccf43606cd8d7420002b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45c98d19bb3dbf8227c94e53887e21626cf0a21', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4cfd06bb151da64b5619c53cb16f4fda8554847', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f462e0bfc922d46ea9af41a66eb5b3f604b01aff', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82397c9bbba8b1dab38ea3ca64c1361219eb1fe7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52f40eb10d3c550ba5dc5676fdbf8ab8b7ee6e50', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '272880d158b71db9b7a9036363bfadabb6e8f45e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b9dcc47b9a808356a70988ced9484c18fca83e0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41e56327da6dbe622e0f7394ea72f91d673c1496', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f4a393328581db0c7d6e98ff3fe3d20415e1b1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8770e8a9a712dbd5e1333946155b161364201cd2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce34957938e2897e3a923dc904b5123cb8c9859d', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a164a08b412effeed6963859e1478e18c358f6bd', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf237d69db2d4f70d5d38cf05b9849dfc556686d', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01dba16eb1faef1d1dc502d694ebe8edb3daaf32', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b15e7605b06bc52e2000278afc9455ab2155dd38', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65e7aef5accde4833307be4e13d3d476f6666feb', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ccc85b6f1881d92b55e411ba9719f26459b720', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7831c05019a015077be5daac382a90d0f73af86', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50d0aa2256ba32ecd59f642e4cc601d8ec0610e1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ee9b5d039d2d66f2553c6dd11572838af30fb7d', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d26814bb8eaf094635039e2cec6a450cc9ccd9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba5f8f06d9854fea16e393c2731516b61b071bf0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cada1b7bfe58322b299979f69ae314a13c89a814', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b6472f8d9ab6d040a87377a2c19101b5a09d69c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04c7892ba437c2e4a33ce7fa487fc5194aef9dc1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ea0e1b17fe8578f293bb65183abd3b0d98a96c1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b166f5cd5b00df2116bc7fdf2ec69cb3d83172', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc59698cb2a3767972c35f6749eddf98af08cb4', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d17c8f263cb9d7f1bdd40a3c9b5c33648cf5d4e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6d6bf91092d4013aa7e37d76362f9723d32fe1f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e5790f9e2d2077cd004679d99a0a57c47f042e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c46e53c7d67f0a3632add11e1421e7b92edabe6d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cfd50bd830663b41f5f011bab40882256f3c74c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0015d469585c5696698bbf56ef291f591903416', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a68b6d86840b3ed74c2b0b123a736e6257dd68', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995ff0207cb3dd8ebced8f9fc7b8772d662966d9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d59b57791d4ab242d2d7be68e419bee46233694', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0812b36f20ad35921760ea24d212d51e0d7fec47', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb494033c10d2c266dd3ab38cd1be424c083fb0c', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b1d18857604545b11753cf7c2ed3adee59bd2a2', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98ce1c2b2b115f2cfa4b8198e20eb93a5b49ba1d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f95b6a3144d0fa2ec99164fb89d31e3dafa991', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519b91c9a2b254f5a932f5c92601d663dfeb1cc3', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd45a7f262eb43bda137a9fe7abe75d959d8e2eb2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec04569027d0b208659b97d1b22e186896174485', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83dac8dc39d57419f20f5bcf2ad3b1e3e268acc7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6c629cfe294436b01f19e2a3e22c3a879b00711', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54350292d94b91c5d3a462f7ebd9b2fd2ae5b33b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07fe8b4f20bbe7f152a6c226634a5d05a019551b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac59fe369c04ad2ff7e10a36c696f3e0034a811', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a78191a5fbb6acbeddc0a5f90dc65233fc8d04e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b2545dc2ab5ea4f006b6d5a2cf5b55e9899896', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d39c52048e64a626aedaa24163bc2a4cac99264', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aba003099c26531eda5d9802cb205f2e6a55115', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c552455ccd20b05a4e0c1d319e6651fe1b63d873', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8dc5a66832183bd7f0acc99a96359bf32b69ed8', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49cca5301c8eb3b461db4028861f4bcd6b948362', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c1a23bf39c91747f8d43c7a950ab6211575b25', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a308d3dabcbb938a79902bfd02cf2be0b711c308', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d962b09a5095fd253941a4ccffbdf76cb59fbc', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '201f03082af882e6895b0a116d39e5137495344d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ca30ce6fd566931ceff92602813c39196a37aa', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '206e2f50eb9b6f9154f07316285d8964a4c9018d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf2a1202aaa24156b471e6f0a4c1fd58ad57602', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64fa241825bd5b61a1da9c3f3bc90b5125a5919a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d5f4b838b16c63f4e4b51aa3e53939c7c47625', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bda324d94143cda4c6d21e06c678e4ad6d71bb3', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa6c9b9f9b7c1bf4de71d561a9b900b5ee0aea6', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcee888f35d6248efb1946069d24bf4fdcd86d49', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75504e38a2bc2e042eba19487b84cdcb8bed6f2c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7bf1c44b6531b251a4b8ebd54cd08bad0d63fcb', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7285c250ff1b7e4c39ee6e1bab4dc1c11540331f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6360f388df72684c516626762bed397a6dc06f47', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e8b05619a76cd65634d294ded363b9895679b7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f23a1887bb76501f6dbb57573847767e7c1538f1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b3784f8d2709cd4b546f5ecf9ee128e8fad566', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd88541f658b6257c230b35ec73f6ef0ec601fb', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d0947acb7d4b4ef2cf87bbaf2ac5ffbfe2fc18e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30135ea36a40d78cecde621630b403814e6a744c', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec4bbf496075c66c818dce644493ad936de95c2', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a41fe08ebc8179ece25aa8b95cc4a27511f0c9f', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f297f6a54179559d7d227266f579ac13a82250', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Manuel Meitinger,3720329,,User,,36,,1,19
1009119713,Include server information in bind/listen errors.,"#### Description

With multi server comes multi responsibility... for more verbose errors.
As pointed out in #5491, some platforms don't include host and port information in address-in-use and other related errors.
Before #5393 this wasn't an issue, as there were only two possible suspects, now there can be more.
This PR includes name, host and port in `OSError`s.

#### Checklist

 - [x] I have updated tests where applicable.
 - [x] I have added an entry to the CHANGELOG.
 - [x] Check if `# pragma: no error` in web master is okay. EDIT: now covered
 - [x] Handle address-in-use errors separately and make suggestions if the user didn't enter a port.
 - [x] reduce code duplication of UDP servers
",True,5495,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/5495,https://github.com/mitmproxy/mitmproxy/pull/5495,closed,181,125,5,7,2,0,0,0,[],2022-07-27 02:14:49+00:00,2022-08-02 17:00:34+00:00,571545.0,"6 days, 14:45:45",[],"[{'commit_sha': 'a80f466fb3b59a90dca48f678e85d369bbc835b9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28171ccde50b5b22c0c10c5ede166826c8c65846', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc6a9eab496c69f71a70beee7dadba83ffbdd20c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95490b3d4418f1fbc2d94ebd20b4cb36159a360', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c8760d72cc09b6b82655346084d55a58a88b1a0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df1ddbdc22a0aa7b369f5a488a1ae02c2a04ecea', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a5924d1c21b26647875fa7aca02a5914b494e7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}]",Manuel Meitinger,3720329,,User,,36,,1,19
1016450840,Fix running hook issue and signal proxyserver updates.,"#### Description

Fix #5376 by introducing `StartupHook`, which allows addons to execute tasks after everything is loaded, but before the running state is reached.
For `proxyserver.py` this means: If any server instance fails to start, mitmproxy shows the appropriate error and exits, so there is no ""half-loaded"" state.

@mhils: Ideally we should also handle the case if a mode change after startup fails.
What would you think about removing the mode from `ctx.options.mode` if the shutdown succeeds but starting the new mode fails? That way the UI would be in sync with the current modes. Or maybe even starting the new instance first and do the shutdown later, that way having a better fallback? (I.e. keeping the old instance alive and reverting the mode to the old one.)

#### Checklist

 - [x] I have updated tests where applicable.
 - [x] I have added an entry to the CHANGELOG.
",True,5512,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/5512,https://github.com/mitmproxy/mitmproxy/pull/5512,closed,431,192,26,13,20,9,0,0,[],2022-08-03 15:09:20+00:00,2022-08-13 22:11:01+00:00,889301.0,"10 days, 7:01:41","[{'comment_id': 939863212, 'comment_body': ""Side note: I have growing sympathies for replacing our logging event hook setup with the builtin `logging` module. We wouldn't need such `asyncio.sleep(0)` shenanigans anymore and we wouldn't need to add plumbing for log events everywhere. That's definitely a project for another day though."", 'comment_created': datetime.datetime(2022, 8, 8, 6, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 939985332, 'comment_body': ""Nit: `except Exception:` please, `except:` defaults to `except BaseException:` and we generally don't want to catch KeyboardInterrupt or SystemExit. Always using `except Exception` saves us from thinking about whether it's necessary or not."", 'comment_created': datetime.datetime(2022, 8, 8, 8, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 939987595, 'comment_body': ':+1:', 'comment_created': datetime.datetime(2022, 8, 8, 8, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 940653798, 'comment_body': ""It might make sense to add a standalone async blinker implementation somewhere (simple homegrown or third-party) so that we can just `await self.changed.send(...)`? Implementation should be rather trivial, we can assume everything is safely on the same thread. It's basically a simple collection of weak references that can be called. Supporting both sync and async is easy (see [here](https://github.com/mitmproxy/mitmproxy/blob/fbcffee87f6ca0e8a4bb48123ddd7778ae64a946/mitmproxy/addonmanager.py#L261-L264)).\r\n\r\nWe can probably replace most of our usage of `blinker` with that if we add a `SyncSignal` subclass that errors when adding async listeners and provides a non-async send method."", 'comment_created': datetime.datetime(2022, 8, 8, 20, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 940656520, 'comment_body': ""No strong opinion here (I'd be fine with requiring 3.10 for build scripts, but I also don't care), but any particular reason for changing this? :)"", 'comment_created': datetime.datetime(2022, 8, 8, 20, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 940941485, 'comment_body': ""Good idea, I'll implement `AsyncSignal` and `SyncSignal` classes. Do you prefer in-order like with hooks in addons, i.e.\r\n```python\r\nfor aw in aws:\r\n  await aw\r\n```\r\nor concurrently as in this PR with `asyncio.gather`? (Since it's a signal, I personally lean towards gather.)"", 'comment_created': datetime.datetime(2022, 8, 9, 6, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 940944305, 'comment_body': 'Some `tox -e ...` commands failed on Python 3.9 with syntax error. Hopefully, #5233 will arrive soon :)', 'comment_created': datetime.datetime(2022, 8, 9, 6, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 941087696, 'comment_body': 'Either is perfectly fine for me. Feel free to land this in a separate PR that just adds the signals (but does not add any usage), whatever is easier for you. :)', 'comment_created': datetime.datetime(2022, 8, 9, 9, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 945191435, 'comment_body': ""I strongly support adding better typing support, but let's not delay this PR here. While refactoring, have you seen any case where we use blinker for more than just simple notifications?"", 'comment_created': datetime.datetime(2022, 8, 13, 21, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}]","[{'commit_sha': '4b92472e829d49bb5a7ee755b2ee1e243a7f13bd', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48e31a15cd1ce4f8f73dec1605764b2b40b381c7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8be43e8d6abc470dfc0fda3b4e341f666c218f51', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b88d5b5e02cbc61c14398b1e4e1186a20ae046e8', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c01f4f2956611be52f7c867667b9f424d7423a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9b52645e427eccadff57a99f0db76a0e5311bb5', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b291d6110f93daa834aaf4d84cd01667d14fdd4', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '626ff94fc8f2c44969f9cdbe6cee353da97076c3', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f8d6842a4740b348f795bb370c7eebf40d9d041', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be62fb44fcda359076edc630b54ab9aa5eb9853f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd242ed690006fdba6ff69fd90550194b325cfe', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bbcace26c82c5206a49a82182b052c412a96994', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c62a17811c6c6be09fedd03a2f5bba87cf29de6', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Manuel Meitinger,3720329,,User,,36,,1,19
1037959956,"Unify proxy modes, introduce UDP protocol detection.","#### Description

Contains changes for #5535.

1. Removed transparent mode in UDP. The way transparent mode for UDP is implemented is far from ideal: It's only supported on Linux, requires sudo for the whole process, prevents full coverage of `udp.py` and is not even used/enabled.
    Together with #5543, I'll plan to do re-add transparent UDP mode later in a similar fashion, i.e. a separate process, asking for sudo if necessary, setting everything up for the user. In the meantime, `udp.py` has now full coverage.
2. Updated `AsyncioServerInstance` and `ProxyMode` to support both protocols for one `ProxyMode`. In the process, the need for additional `ServerInstances` disappeared, so `ProxyMode`s now fully describe proto, port and layer.
3. Removed `make_connection_id`. Since we don't know on what layer we'll detect what protocol, we can't use the DNS-ID in `ServerManager` connection-ID trick anymore - same as goes for QUIC, if we don't want to alter `SendData` and `DataReceived` (see https://github.com/mitmproxy/mitmproxy/pull/5435#pullrequestreview-1075694658).
4. Changed the proxy mode syntax to what was discussed in #5535. Also DNS has now `--mode reverse:dns://8.8.8.8` if used with an upstream, `--mode dns` will launch a local-resolve server.
5. Adjusted DNS layer to match packets by their ID. As mentioned above, this was previously done through `ServerManager` connection-IDs, but if we detect DNS higher up, or in the future use some transparent mode, this can't be done this way anymore.
6. Copied and adjusted TCP layer decisions for UDP.

",True,5556,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/5556,https://github.com/mitmproxy/mitmproxy/pull/5556,closed,538,543,21,13,3,9,0,0,[],2022-08-26 13:22:19+00:00,2022-08-30 03:27:52+00:00,309933.0,"3 days, 14:05:33","[{'comment_id': 956534409, 'comment_body': ""What's the reason for moving this out of mode_specs?"", 'comment_created': datetime.datetime(2022, 8, 27, 4, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 956593599, 'comment_body': '👍 👍 ', 'comment_created': datetime.datetime(2022, 8, 27, 15, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 956599492, 'comment_body': 'How/why do we end up having multiple DNS flows here now?', 'comment_created': datetime.datetime(2022, 8, 27, 16, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 956601875, 'comment_body': 'I feel this complicates things more than it helps. Maybe we can move `description` into ProxyMode itself and then keep the layer information as part of individual server instance subclasses? That avoids the special-casing in `ServerInstance.make`, keeps all modes as immediate subclasses of ProxyMode,  retains a dumb 1-1 mapping between modes and instances, and avoids any circular spec -> layer -> spec dependencies. This may entirely be ""code I wrote myself is easier to understand"" bias, so feel free to go ahead with this approach if you feel it\'s more straightforward. Just a subjective impression. :)', 'comment_created': datetime.datetime(2022, 8, 27, 16, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 956616061, 'comment_body': ""Python and it's cyclic dependencies 😅\r\nBut I'll restore the 1:1 `ServerInstance`s, which will move the `layers`-dependency to `mode_servers.py` again, so I can move `mode.py` back into `mode_specs.py`."", 'comment_created': datetime.datetime(2022, 8, 27, 19, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 956616348, 'comment_body': ""I guess it's just my code-compressing attitude, but you're right. Having 1:1 `ServerInstance`s removes all the `if TYPE_CHECKING` stuff, so I'll undo the changes.\r\n"", 'comment_created': datetime.datetime(2022, 8, 27, 19, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 956617180, 'comment_body': ""So the history here is: We had that before, in the DNS draft. Then we moved the ID into the connection_id of proxyserver (i.e. essentially the `dict`). However, if we want to do protocol detection and fancy transparent stuff, DNS might not be at the top layer, so the layer itself will have to do it.\r\n\r\nIt's the same with QUIC. We've talked about connection migration (which currently also uses connection_id in proxyserver) and the change of `SendData` and `DataReceived` to include the remote address, that ideally should not happen. So there we will also need a layer that does the routing instead, keeping the old `SendData` and not using custom `connection_id`.\r\n\r\nAnd that's actually a good thing: Having uniform connection id's is the only way to reliably do `inject_udp` in the future."", 'comment_created': datetime.datetime(2022, 8, 27, 19, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 957481469, 'comment_body': 'Looking at this it probably would make sense to make the default port scheme-specific for reverse proxy mode. DNS should be on 53 by default. :)', 'comment_created': datetime.datetime(2022, 8, 29, 15, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 958292658, 'comment_body': ""You're right, here's the PR: #5563 :)"", 'comment_created': datetime.datetime(2022, 8, 30, 10, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}]","[{'commit_sha': '33e4e211c8fe97f48d3fff4b5b149c784005ab5c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aa9aa786e7eabebda5ad7a5066d306d0f5373b9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b232901d421a34196e0d423371314cd6cc077f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45e9129bac040b02430d4f7a46e57b7356fd964f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f81f02226f79261b43c2fd773ef7ea159f50367', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e3ea1a0f38c3cbc1753418788d28f3a25e042e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3fe43f926cb27af846605c6324a60113f42a06', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7c4afd841d5f0ebb057938f8a9eb174b7806bf7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785a40c011222256be6b2e901ed433820390f572', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4791fbd906b1eb92f946f5efe15b3b2e4ba27f4f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead157bd4fbcede2e76746ee5296b35431f514c5', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d37f68f04c9025ba88bb6d910908186fd8bfda', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f229f22c121d1b2c649520b4ae97e8e3d0e8323', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}]",Manuel Meitinger,3720329,,User,,36,,1,19
1037959956,"Unify proxy modes, introduce UDP protocol detection.","#### Description

Contains changes for #5535.

1. Removed transparent mode in UDP. The way transparent mode for UDP is implemented is far from ideal: It's only supported on Linux, requires sudo for the whole process, prevents full coverage of `udp.py` and is not even used/enabled.
    Together with #5543, I'll plan to do re-add transparent UDP mode later in a similar fashion, i.e. a separate process, asking for sudo if necessary, setting everything up for the user. In the meantime, `udp.py` has now full coverage.
2. Updated `AsyncioServerInstance` and `ProxyMode` to support both protocols for one `ProxyMode`. In the process, the need for additional `ServerInstances` disappeared, so `ProxyMode`s now fully describe proto, port and layer.
3. Removed `make_connection_id`. Since we don't know on what layer we'll detect what protocol, we can't use the DNS-ID in `ServerManager` connection-ID trick anymore - same as goes for QUIC, if we don't want to alter `SendData` and `DataReceived` (see https://github.com/mitmproxy/mitmproxy/pull/5435#pullrequestreview-1075694658).
4. Changed the proxy mode syntax to what was discussed in #5535. Also DNS has now `--mode reverse:dns://8.8.8.8` if used with an upstream, `--mode dns` will launch a local-resolve server.
5. Adjusted DNS layer to match packets by their ID. As mentioned above, this was previously done through `ServerManager` connection-IDs, but if we detect DNS higher up, or in the future use some transparent mode, this can't be done this way anymore.
6. Copied and adjusted TCP layer decisions for UDP.

",True,5556,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/5556,https://github.com/mitmproxy/mitmproxy/pull/5556,closed,538,543,21,13,3,9,0,0,[],2022-08-26 13:22:19+00:00,2022-08-30 03:27:52+00:00,309933.0,"3 days, 14:05:33","[{'comment_id': 956534409, 'comment_body': ""What's the reason for moving this out of mode_specs?"", 'comment_created': datetime.datetime(2022, 8, 27, 4, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 956593599, 'comment_body': '👍 👍 ', 'comment_created': datetime.datetime(2022, 8, 27, 15, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 956599492, 'comment_body': 'How/why do we end up having multiple DNS flows here now?', 'comment_created': datetime.datetime(2022, 8, 27, 16, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 956601875, 'comment_body': 'I feel this complicates things more than it helps. Maybe we can move `description` into ProxyMode itself and then keep the layer information as part of individual server instance subclasses? That avoids the special-casing in `ServerInstance.make`, keeps all modes as immediate subclasses of ProxyMode,  retains a dumb 1-1 mapping between modes and instances, and avoids any circular spec -> layer -> spec dependencies. This may entirely be ""code I wrote myself is easier to understand"" bias, so feel free to go ahead with this approach if you feel it\'s more straightforward. Just a subjective impression. :)', 'comment_created': datetime.datetime(2022, 8, 27, 16, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 956616061, 'comment_body': ""Python and it's cyclic dependencies 😅\r\nBut I'll restore the 1:1 `ServerInstance`s, which will move the `layers`-dependency to `mode_servers.py` again, so I can move `mode.py` back into `mode_specs.py`."", 'comment_created': datetime.datetime(2022, 8, 27, 19, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 956616348, 'comment_body': ""I guess it's just my code-compressing attitude, but you're right. Having 1:1 `ServerInstance`s removes all the `if TYPE_CHECKING` stuff, so I'll undo the changes.\r\n"", 'comment_created': datetime.datetime(2022, 8, 27, 19, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 956617180, 'comment_body': ""So the history here is: We had that before, in the DNS draft. Then we moved the ID into the connection_id of proxyserver (i.e. essentially the `dict`). However, if we want to do protocol detection and fancy transparent stuff, DNS might not be at the top layer, so the layer itself will have to do it.\r\n\r\nIt's the same with QUIC. We've talked about connection migration (which currently also uses connection_id in proxyserver) and the change of `SendData` and `DataReceived` to include the remote address, that ideally should not happen. So there we will also need a layer that does the routing instead, keeping the old `SendData` and not using custom `connection_id`.\r\n\r\nAnd that's actually a good thing: Having uniform connection id's is the only way to reliably do `inject_udp` in the future."", 'comment_created': datetime.datetime(2022, 8, 27, 19, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 957481469, 'comment_body': 'Looking at this it probably would make sense to make the default port scheme-specific for reverse proxy mode. DNS should be on 53 by default. :)', 'comment_created': datetime.datetime(2022, 8, 29, 15, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 958292658, 'comment_body': ""You're right, here's the PR: #5563 :)"", 'comment_created': datetime.datetime(2022, 8, 30, 10, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}]","[{'commit_sha': '33e4e211c8fe97f48d3fff4b5b149c784005ab5c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aa9aa786e7eabebda5ad7a5066d306d0f5373b9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b232901d421a34196e0d423371314cd6cc077f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45e9129bac040b02430d4f7a46e57b7356fd964f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f81f02226f79261b43c2fd773ef7ea159f50367', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e3ea1a0f38c3cbc1753418788d28f3a25e042e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3fe43f926cb27af846605c6324a60113f42a06', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7c4afd841d5f0ebb057938f8a9eb174b7806bf7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '785a40c011222256be6b2e901ed433820390f572', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4791fbd906b1eb92f946f5efe15b3b2e4ba27f4f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead157bd4fbcede2e76746ee5296b35431f514c5', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44d37f68f04c9025ba88bb6d910908186fd8bfda', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f229f22c121d1b2c649520b4ae97e8e3d0e8323', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}]",Manuel Meitinger,3720329,,User,,36,,1,19
895297760,Add DNS support.,"#### Description

- implemented UDP layer that mimics `asyncio.start_server` and `asyncio.open_connection`
- introduced `DNSFlow` and `DNSLayer`, together with console and web representation
- extended filtering, saving and tests to DNS
- full coverage for `DNSLayer`
- DNS server addon, UDP and `DNSLayer` not yet fully covered
- changed `lightred` to `red` for failed flows in web UI and made method sort consistent with what the user sees (regarding WS and WSS)

#### Checklist

 - [x] I have updated tests where applicable.
 - [x] I have added an entry to the CHANGELOG.
",True,5232,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/5232,https://github.com/mitmproxy/mitmproxy/pull/5232,closed,4051,561,84,100,14,45,0,0,[],2022-03-31 02:35:17+00:00,2022-04-24 21:17:24+00:00,2140927.0,"24 days, 18:42:07","[{'comment_id': 839433153, 'comment_body': ""Potentially stupid question: Why do we need to store that? Isn't that generally inferrable from the flow type?"", 'comment_created': datetime.datetime(2022, 3, 31, 10, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839442205, 'comment_body': ""This type of metaprogramming (both SerializableIntEnum and CustomValueSerializableIntEnum) is a good source of ugly bugs. You think it's an enum and start comparing with `is`, then you realize that `_missing_` actually does not work with `is`, etc. - let's just keep using basic data types. I think it's useful to have these constants around for legible comparisons (similar to https://github.com/mitmproxy/mitmproxy/blob/main/mitmproxy/net/http/status_codes.py), but let's keep our datastructures as simple ints, strs and bytes."", 'comment_created': datetime.datetime(2022, 3, 31, 10, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839450478, 'comment_body': 'This still blocks, we need the asyncio version: https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.getaddrinfo. Hooks can be async since v8, so this should be easy to adopt. :)', 'comment_created': datetime.datetime(2022, 3, 31, 10, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839749063, 'comment_body': ""I don't understand this part. How is decreasing the TTL helpful? Can't we just reuse what we get from upstream?"", 'comment_created': datetime.datetime(2022, 3, 31, 15, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839756375, 'comment_body': ""Let's do proper `if self.type == ...:` blocks, we're just evading test coverage here 😛 "", 'comment_created': datetime.datetime(2022, 3, 31, 15, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839758766, 'comment_body': ""This is a bit weird because it will work for some IP addresses that happen to be UTF8/ASCII. Maybe it's better if we just don't catch any errors so that people don't use it to test for existence? We could/should potentially add an assertion instead that ensures that type matches."", 'comment_created': datetime.datetime(2022, 3, 31, 15, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839765611, 'comment_body': ""I haven't looked in detail, but two different `unpack_domain_name` implementations?\r\nIt likely makes sense to move that into a private helper function (`_unpack_domain_name`) outside of either class. That's generally nicer than dealing with `@classmethod`/`@staticmethod`."", 'comment_created': datetime.datetime(2022, 3, 31, 15, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839768415, 'comment_body': ""Reimport from https://github.com/mitmproxy/mitmproxy/blob/aa2f935dbbbf59d76b30cd1afffca2cf791ae782/mitmproxy/connection.py#L21-L24?\r\n\r\n(I don't know if the comment there is still true with current mypy, in any case we should just be consistent)"", 'comment_created': datetime.datetime(2022, 3, 31, 15, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839779227, 'comment_body': ""Is there a reason why we even want to cater for that case? Can't we just make `id` read-only?"", 'comment_created': datetime.datetime(2022, 3, 31, 16, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839787087, 'comment_body': '```suggestion\r\n                disabled={flow.type !== ""http""}>Export▾</Button>\r\n```', 'comment_created': datetime.datetime(2022, 3, 31, 16, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839797570, 'comment_body': ""If we provide a `.to_json()` method as part of our public Python API (I like it!), we should use the same casing as we have for our Python identifiers, i.e. `recursion_desired` and not `recursionDesired`.\r\nFor mitmweb/JS one could make an argument to convert to camelCase because that's a convention in JS land, but then we'd need two slightly different `to_json` implementations, which again is terrible. So let's just use snake_case for DNS flows in mitmweb as well (we already do that for HTTP)."", 'comment_created': datetime.datetime(2022, 3, 31, 16, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839808530, 'comment_body': 'Nit:\r\n```suggestion\r\n    loop = asyncio.events.get_running_loop()\r\n```', 'comment_created': datetime.datetime(2022, 3, 31, 16, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839812250, 'comment_body': 'Is there a reason why we work with markers instead of using an `asyncio.Queue`?', 'comment_created': datetime.datetime(2022, 3, 31, 16, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839846810, 'comment_body': ""This multi-inheritance here makes it incredibly hard to figure out what's going on. I think I also don't understand why we inherit from `base_events.Server`? How can we make this easier to understand?"", 'comment_created': datetime.datetime(2022, 3, 31, 17, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839851221, 'comment_body': ""Doing this in a separate task means we won't catch any exceptions from this, ideally we should do this outside of the constructor."", 'comment_created': datetime.datetime(2022, 3, 31, 17, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839870489, 'comment_body': ""Conceptually this needs to be integrated into the `proxyserver` addon so that commands like `inject.websocket` work for QUIC as well. [^1] Let's move it into a single addon right away.\r\n\r\n[^1]: `inject.websocket` isn't a great example, but the plan is to make it possible to also inject kills for HTTP flows, see https://github.com/mitmproxy/mitmproxy/issues/4711."", 'comment_created': datetime.datetime(2022, 3, 31, 17, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 839878254, 'comment_body': 'I haven\'t fully made my mind up for this, but some preliminary feedback:\r\n\r\n1. Right now this module is incredibly hard to understand and requires in-depth knowledge of asyncio internals. The high-level idea is clear to me, but it\'s very hard to figure out what\'s actually going on. We need to figure out how we can simplify here.\r\n2. The idea of shoehorning UDP into connection-style classes is interesting, but does not work perfectly with QUIC\'s connection migration (we\'d have multiple ""connections"". Maybe we need to embrace that UDP is not TCP, just call `create_datagram_endpoint()`, and then have some application layer-specific logic to route them to different sublayers and handle expiration. I\'m not sure yet, right now it just feels very messy.', 'comment_created': datetime.datetime(2022, 3, 31, 17, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841058133, 'comment_body': 'Somewhat related: For HTTP/1, we have tucked all packing/unpacking into https://github.com/mitmproxy/mitmproxy/tree/main/mitmproxy/net/http/http1. It may make sense to be consistent here for UDP and not make packing/unpacking part of the public API for now.', 'comment_created': datetime.datetime(2022, 4, 2, 10, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841066866, 'comment_body': 'This becomes necessary in `open_connection` in ./proxy/server.py, where we react to `commands.OpenConnection` which only gives us the `Connection`, not the flow. Also - in theory - there might be some protocol-agnostic flows/layers in the future.', 'comment_created': datetime.datetime(2022, 4, 2, 11, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841068224, 'comment_body': ""If `dns_mode=forward:...` is used, upstream's TTL will be returned to the client (if no `dns_response` hook decides to change it). If `simple` mode is used, we don't really get a TTL from `getaddrinfo`, so I felt it should be as low as possible by default, in case someone wants to get a flow for every time a client tries to resolve an address. Totally open to different default suggestions, though."", 'comment_created': datetime.datetime(2022, 4, 2, 11, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841069888, 'comment_body': 'Actually `asyncio.start_server` also calls `get_event_loop`. So if raising `RuntimeError` is important, `refresh_server` in `./addons/proxyserver.py` should provide `loop=` in its call to `asyncio.start_server`.', 'comment_created': datetime.datetime(2022, 4, 2, 12, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841071077, 'comment_body': 'We cannot (or rather: should not) really hide all data from the underlying `StreamReader`, as it does a bunch of stuff internally, like pausing the transport if certain limits are exceeded. By using a marker, we translate limits from bytes to packets. It also eliminates the need to provide an entire custom implementation.\r\n(As a side note, the SelectorEvents implementation in general has heavy dependencies on methods not declared in the public API. So reimplementing is never the best choice. Also the reason for the `TODO` in `UdpWriteTransport`.)', 'comment_created': datetime.datetime(2022, 4, 2, 12, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841075764, 'comment_body': ""Let's assume a minute, see https://textslashplain.com/2022/03/31/chromiums-dns-cache/"", 'comment_created': datetime.datetime(2022, 4, 2, 13, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841076146, 'comment_body': ""I think that's mostly not to break compat with existing code. See the note at https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop"", 'comment_created': datetime.datetime(2022, 4, 2, 13, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841076705, 'comment_body': ""While the primary goal was to keep changes to mitmproxy at a minimum (~ +3k/-100), it also felt that this approach - while I wholeheartedly agree that it _does_ require in-depth knowledge of asyncio - is actually quite clean, in the sense that it doesn't dilute mitmproxy's existing concept of a connection. I've actually first experimented with another concept that would replace the `Address` as connection identifier with a generic, layer-dependent 'classifier'. The problem, however, was that this does not bode well with transparent mode. E.g. with DNS, a client could use the same id with different target servers. While I'm sure that this too could have been worked out, changes to the code base would - in generell - not have been trivial.\r\n\r\nQUICs connection migration btw. could actually be implemented similar to the way packet routing is implemented in `UdpServer.datagram_received` and `UdpServerConnection.datagram_received`. Once a new connection is made (I think it's okay if migration is also logged as a new connection) and gets to the QUIC layer, if the connection ID of the first packet matches an existing one, the flow of the old connection is migrated to the new one (replace `client_conn`, check for matching `server_conn`, same problem as mentioned before with DNS in transparent mode), and the old connection is closed.\r\n\r\nAnother advantage of keeping it to a `base_events.Server` abstraction is, that if we ever plan to support listening on multiple ports, we could actually build a simple aggregating `base_events.Server`, as it already supports multiple sockets."", 'comment_created': datetime.datetime(2022, 4, 2, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841076762, 'comment_body': ""Thanks for the explanation. My naive understanding was that flow control etc don't really apply to us, but I've also only glossed over the StreamReader implementation. I'll take a closer look again on Monday. :)"", 'comment_created': datetime.datetime(2022, 4, 2, 13, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841256486, 'comment_body': 'Fixed in f535045e69207402f224f8f28c355caec84040e6', 'comment_created': datetime.datetime(2022, 4, 3, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841256742, 'comment_body': 'Changed to 1 minute in f535045e69207402f224f8f28c355caec84040e6.', 'comment_created': datetime.datetime(2022, 4, 3, 17, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841257039, 'comment_body': 'Changed in f535045e69207402f224f8f28c355caec84040e6, tests still missing, but will be implemented shortly :)', 'comment_created': datetime.datetime(2022, 4, 3, 18, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841257952, 'comment_body': 'Agreed, the reason for the soft fail was the use in `__str__`, this has been reworked in f535045e69207402f224f8f28c355caec84040e6. It now also notifies the user that the data is invalid.\r\nShould exception information and actual data (in hex) also be included in the string representation?\r\n\r\nMaybe introduce a `human` function: Use `str()` in flow detail views and search, falling back to hex. Use, say `human.resource_record`, in flow overviews, which then shows the ""invalid data"" message.', 'comment_created': datetime.datetime(2022, 4, 3, 18, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841258657, 'comment_body': ""Agreed, moved in f535045e69207402f224f8f28c355caec84040e6 to `mitmproxy.net.dns` and simplified common code. The difference between the two implementations is DNS compression support. Also renamed the functions to make that clearer. Introduced `domain_name.cache` for (un)compressed domain names, which can be used transparently by invoking code, instead of relying that it's a `dict`."", 'comment_created': datetime.datetime(2022, 4, 3, 18, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841259007, 'comment_body': ""I had issues using the definition without the 4-tuple IPv6 part. I'll check again, if the issues persist I'll rename the definition to `SockAddress`, so that it doesn't get confused/gets clear why `Address` isn't used."", 'comment_created': datetime.datetime(2022, 4, 3, 18, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841259282, 'comment_body': ""No architectural reason, it's just if someone wants to test how an upstream server reacts to a given id. I'll gladly remove this ability and make id read-only if that's not needed..."", 'comment_created': datetime.datetime(2022, 4, 3, 18, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841263408, 'comment_body': ""I don't see a good practical reason why DNS request IDs should have any meaning, let's just make it read-only. :)"", 'comment_created': datetime.datetime(2022, 4, 3, 18, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 841270928, 'comment_body': ""Since my last comment didn't really provide constructive and concrete feedback on how we might continue from this point:\r\n\r\nIf we stick with the asyncio mimicry solution, we could:\r\n- Modify the `DNSLayer` to close connections once the reply has been sent (since post-Kaminsky ports shouldn't be reused anyways).\r\n- Make the connection watchdog timeout faster on UDP (with some inspiration from rfc4787: 2min).\r\n- Add a description to `udp.py` to explain the architecture behind it.\r\n\r\nIf we decide to abstract away from `Connection`s to support TCP-connection-less protocols and connection migration, I'd suggest:\r\n1. Introducing a `ServerView` class:\r\n  For everything except transparent mode, there will be just one instance (unless we one day provide the ability to listen on multiple ports). In transparent mode, however, whenever a client initiates communication (connects or sends a packet) with a not-seen-before ip:port pair, a new `ServerView` for that server is created. Since the concept of listen ports applies to both UDP and TCP, this approach (i.e. using ip and port) should be fine.\r\n2. Providing a new `LogicalConnection` class, that is based on a unique (within a `ServerView`), layer dependent identifier.\r\n   For HTTP1 this would be the clients ip:port pair, QUIC and DNS have an id.\r\n3. Associating `Connection` instances with the new `LogicalConnection` class for connection-based protocols. Maybe also specify some `allow_multiple_connections` flag, that, if not set, will ensure that old client `Connection`s get closed.\r\n4. For UDP we would then send directly from the listening socket. In transparent mode we would (under Linux) open a single raw socket with IP_TRANSPARENT, that allows us to send from different source ip/ports. So there are no more `Connection`s to close. However, `LogicalConnection`s still need to have a watchdog or be closed.\r\n\r\n[Edit: More concise description, removed speculative part.]\r\n\r\n"", 'comment_created': datetime.datetime(2022, 4, 3, 20, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 841342726, 'comment_body': 'Fixed in ea6f9727dab03b0811c180bab761d28b7e57ef50, also reused `status_code` to simplify column handling.', 'comment_created': datetime.datetime(2022, 4, 4, 3, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846799635, 'comment_body': 'Fixed in 079a59039de5910f88031eee0045be1819e0b474, used `Address` everywhere except in `TransparentSocket` where mypy complained.', 'comment_created': datetime.datetime(2022, 4, 10, 15, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846800416, 'comment_body': 'Removed the feature in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d, kept `id` writeable, however, since needed in a lot of test cases.', 'comment_created': datetime.datetime(2022, 4, 10, 16, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846800566, 'comment_body': 'No longer applies after UDP rewrite in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d.', 'comment_created': datetime.datetime(2022, 4, 10, 16, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846800732, 'comment_body': 'No longer applies after UDP rewrite in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d.', 'comment_created': datetime.datetime(2022, 4, 10, 16, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846800813, 'comment_body': 'Fixed in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d.', 'comment_created': datetime.datetime(2022, 4, 10, 16, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846802098, 'comment_body': 'After the UDP rewrite in ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d, there is now a similar issue in https://github.com/Meitinger/mitmproxy/blob/f2c17a71987115dd0245495a9c415dd59edb6283/mitmproxy/addons/proxyserver.py#L260\r\nAlthough the effect should be same as for tasks created by https://github.com/Meitinger/mitmproxy/blob/f2c17a71987115dd0245495a9c415dd59edb6283/mitmproxy/addons/proxyserver.py#L69', 'comment_created': datetime.datetime(2022, 4, 10, 16, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 846865472, 'comment_body': 'Fixed in 9a55989b25b763763cd03378017314edd581f25b.', 'comment_created': datetime.datetime(2022, 4, 10, 23, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 857151437, 'comment_body': 'The main intention of this exclude list was to be temporary - so unless there really is no way around it of having 100% individual test coverage, I would like to see this list here shrink over time (and not grow).', 'comment_created': datetime.datetime(2022, 4, 24, 16, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Kriechi', 'type': 'User'}, {'comment_id': 857154197, 'comment_body': 'The transparent proxying bits of `net/udp.py` are not really testable without lots of monkeypatching, which is a bit pointless. I guess we can exclude those liberally with `# pragma: no cover` statements and remove the entry here.', 'comment_created': datetime.datetime(2022, 4, 24, 17, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}]","[{'commit_sha': '8c700ec6e45fc69379eec230da1bd840854ac20e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c12db9e42e4acbda2dc6b33eb06f5dbd35c480b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d79837837126abf78244588017f15418281b881', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d3e4fcc3b364fa792156a351ae0cb8b8d2ecb0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62cfc7079e9fcd4358c90a8feb03ebfeb4a05a1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef3270dd6a18c5728027ae57887a5a4d87222d83', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e301e56cee52a683c24056aac252cf21ee4cb16', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '052ea829535bcb2092eb38a6dd802a152c21e495', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b118f83eb68d00fd5e69ba06ebc470baa1e5bae', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d8b0afa894469ac3a9318c2c1c92fb10abd84f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9981ff0a1315c35e2ecd5c8b49f5be0b1283ca6c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d7eb987e90de7a1200a9d1049c0cedca74d7333', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ea5801dd9642b04b2bc058ad3ec6db1c39f1b94', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4012a0d7dad7613dc7833f71cb121ae931d6c76d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580d266f87fd5cc1db1e653aae9efd688c7d80e0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9142b30d04b6b4513ee72de21eeb8549b1e233e9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2af09ca36cc2ad2b2bc1a3b8e3535faedc6a186e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d41b8e8c0d814e15160af6e4a9b077af0a3e79f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8443fef6406e1cc535a22c04d8136ede4da8269a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2445360a47c77153ae9224f76e5de3afc6ad9fa1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2365ebebf45cdab66692bdda0e32c6d23b23a1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2251c2ef2056df069a50d87c54854e2a7cd54e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '417b4c811bf450991418a12d2223717d409fe257', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49a91d5ffc163221d7776c61fed5cf34f2846b67', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08a9a1be5c251a081b8730e72c94f0bc380ddf8b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74603dd1154108738a1c80d03963c45bd612545e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f328e22ea50d580caa0928c1069c36ded765c54', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad264781b3ff2697e08252350ba61a81b067701', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525ac67605f40c0a1d68212f64734129e4b3a5a3', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc0bdc143cd28e59e5aecaad9d37ea40badf64f1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c504bc6eb1b132cdbdefe8be94138492080706cd', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86adb1a5a01d9bc3ec07bf4a2a5fbce3b027baae', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2f918a17e8d06c638b1bb5b06b3150a786d77a0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1d937bf4b0f705c1e6cb9eef4591b08b7076cd1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd713a01841535aea63a336237a9bdaedfc32f17a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917d57265e5a57e52a267443c548d991e78b33c2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fff28e2a52799e19ac8d7b43da5544ea427eac2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '993c3e4ee22c424f482b182135d142986059c475', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26120534151cb7afc63d29ca76d164eb5e272cae', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9adf715124210b3e1ede343b2ecf750cbc508117', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30cd490c7946535c8b6bc0127e5c616d4a4d5887', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff22e54dbc9f074d9095e0861b83051bfdd6b70d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a68ff773676869c3ea74fc46bb8460e28175d57', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d1e525f0a25220918eea21ae04f84a83c1bcb41', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86ddac327fbafce85ce063790025649fef3f4090', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f535045e69207402f224f8f28c355caec84040e6', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e7662c87858063ba42c86d8b974c60ee4b5688', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c115c7a184b5776802d1bc0f3186f47edd7e51', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a4f5f61e7dd8fa41440b6590e4bea5aa1d3f174', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea6f9727dab03b0811c180bab761d28b7e57ef50', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef3f9e492e8f1d197ddab24bf5f80a76d2fe566d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7acc1b2590d3cf13974bea76da422754b9d1dcc7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c43dbdc79bbdd3dde2b7412db0dfe547d15a9aa2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d495f10348ad14176b0f116b6df1fca979c209', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '563f041ba62cc36aaa849d10fbd5b663165741ec', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '079a59039de5910f88031eee0045be1819e0b474', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec1f7361714ed9e49295a56ef4821467341f82b5', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '383dd67a613eec8dbbcc1178bbaf5aae381ce837', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c17a71987115dd0245495a9c415dd59edb6283', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e04d1c4909a999741b9472ef07fe7bfdbbc3f5', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5139c5a4cba0a4412a31a946bd2efc0ddfafdc9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a55989b25b763763cd03378017314edd581f25b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b69087a194ac14bbd9149784a84e493c3300b39', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc671de3976158c0649d6797515514cad32ce82d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e114391642d1802bd9007b74d9048bf955d3b3', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6692baed83549421673b7cf5f68fca58cdff8547', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '976b1a5f27035cc469e936f1fafd2d5c89c48f2b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b84848be24db969e62d33837269c9abe45bfb31', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9338f80a282fecf55fc29558527503d796fdb77', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6a279818854bbad9fc4548dea324291d7822b1', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c9ab2e7747aafb89d2099d0ac0db9c2e5ca0db5', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c17e3a16ec3257f66ee1b1cc1ca8f39244117f1e', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74f0965a0b6527b0d25c546f1c746cff0c238036', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bc43fc10d1c599e92138d43380b2b0054027208', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0407d9697b0c854a96265108d88363f2618ab943', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c33870ac8025d889b8c1db6a604d3cc102b6195', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b731ed7707b2ca3daf7bcd2862c28435d7ce553', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af1974b3016537997813cf1afabdc7e4d062605d', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51b640b600da782b40d61dbc382b62d49bee43e7', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '196c8819719e50fe947180794b1081daa65637ed', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab7016b318d7c37fc30cef9c0567b9b620b883e', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9b55385df52428f82a52bbb5203399b30d34baf', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08df89618e497bc50fdd38ed01813cc431da2061', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1761033d9b10203d3caab72e4187c6b51a86422', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c821d02e096386611c4d0640398eef2f4a231e4e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99bcfb7f551edda7d35c2ffbd8a5aa05fc7e5f94', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0553b73d368f16ec137e62cc7f3687888dd78841', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd61b21ce37c112c3b1e35774396da9ad0d51b76', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4229c7c85c7f391aafd97cccd9bc9c066054de43', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda488d87120e3091b9e28468544d6753a91f414', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebaacfd85070ea62812bb275250608ecd2e2a14d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffca36cf9b5067493bc127d3fecd5eab58562a64', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdd3db07c626cb16a58e5e899e6eaeaffc29fbd', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '886a752addb8e0de37fa8a57622d812cef0eedec', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16cb6058646036a42ecc186d29cf748066583c49', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f253a65a461aaf74a7d3d3f05029ea6243633213', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f6da5180e759c02d54ef80c575ebd503f3b0c82', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6881332a215eec1bbef9a574593adb8100e48b72', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6554924eeb7446b407b33027c5bb06ba9ee039a', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '330243f2abe9fbaa0bd663ea811473f210ab67cf', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Manuel Meitinger,3720329,,User,,36,,1,19
980394527,Add QUIC support.,"#### Description

This is the PR for QUIC support in mitmproxy.

#### Checklist

 - [x] Stream and datagram relay layer for arbitrary protocols. (See also #5414)
 - [x] Support `TlsClienthelloHook`, `TlsFailedClientHook` and `TlsEstablishedClientHook`.
 - [x] Use hooks for TLS settings (`QuicTlsStartClientHook` and `QuicTlsStartServerHook`).
 - [x] Implement `Http3Client` and `Http3Server`.
 - [x] Support `NextLayer` decisions.
 - [x] ~~Extended UDP implementation to support connection roaming.~~ [dropped by request]
 - [x] ~~Implement and test upstream mode and `via` handling (if possible).~~ [postponed until UDP/TCP mode merge]
 - [x] Write tests.
 - [x] Add entry to CHANGELOG.
",True,5435,https://api.github.com/repos/mitmproxy/mitmproxy/pulls/5435,https://github.com/mitmproxy/mitmproxy/pull/5435,closed,5434,277,67,135,22,30,0,0,[],2022-06-27 18:28:01+00:00,2022-11-28 17:58:14+00:00,13303813.0,"153 days, 23:30:13","[{'comment_id': 947910284, 'comment_body': ""Let's add an `<0.10` upper bound, otherwise we're in for fun surprises."", 'comment_created': datetime.datetime(2022, 8, 17, 13, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 947911836, 'comment_body': 'Any particular reason for this change?', 'comment_created': datetime.datetime(2022, 8, 17, 13, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 947914294, 'comment_body': ""This is presumably to support connection migration? I'm not too excited about this permeating into our very core commands and events. Could we potentially add an artificial `ConnectionMigrated` event or something like this? And/or have the mode instance just modify `DatagramWriter._remote_addr`?"", 'comment_created': datetime.datetime(2022, 8, 17, 13, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 948455562, 'comment_body': ""Then let's just `assert context.client.alpn` :-)"", 'comment_created': datetime.datetime(2022, 8, 17, 21, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 948462813, 'comment_body': 'Can you quickly explain how a single client layer can have multiple connection ids?', 'comment_created': datetime.datetime(2022, 8, 17, 21, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 948464370, 'comment_body': ""Seeing this here inspired https://github.com/mitmproxy/mitmproxy/discussions/5535, but this shouldn't block merging this here. I'm happy with having these provisional mode names for now."", 'comment_created': datetime.datetime(2022, 8, 17, 21, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 948468608, 'comment_body': ""This needs to happen here because we otherwise don't get a connection id yet?"", 'comment_created': datetime.datetime(2022, 8, 17, 22, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 950063957, 'comment_body': ""That's due to QUIC allowing multiple connection IDs for the same endpoint. (Also as a privacy measure: https://datatracker.ietf.org/doc/html/rfc9000#section-9.5)"", 'comment_created': datetime.datetime(2022, 8, 19, 10, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 950066038, 'comment_body': ""We're already checking the returned scheme in `mode_specs.py`, so instead of adding `h1`, `h2` and `h3` (which will be checked again in `QuicMode` anyways), I think it's better to make `server_spec.parse` scheme-agnostic."", 'comment_created': datetime.datetime(2022, 8, 19, 10, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 964780589, 'comment_body': ""Are there any browsers for which this is testable yet? (or other clients that do multiplexing?)\r\n\r\nI vaguely recall Firefox breaking because it tried CONNECT-over-HTTP/2 after some update and we didn't support that properly yet. Here's the WIP branch to add support: https://github.com/mitmproxy/mitmproxy/compare/main...mhils:mitmproxy:http2-proxy. To be honest I have no recollection of any of the particular issues here, but I would presume that some of them may be present for HTTP/3 as well."", 'comment_created': datetime.datetime(2022, 9, 7, 12, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 964783583, 'comment_body': '```suggestion\r\n        if spec.scheme in (""https"", ""http3"", ""quic"", ""tls"", ""dtls""):\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 12, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965015694, 'comment_body': 'Is there a particular reason why we want this to be configurable?', 'comment_created': datetime.datetime(2022, 9, 7, 15, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965020037, 'comment_body': ""Can we vendor this method here please? I'd like to depend on aioquic as little as possible. Some of their TLS crypto stuff is just a bit frightening, and I don't want the primitives there to permeate anywhere."", 'comment_created': datetime.datetime(2022, 9, 7, 15, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965335511, 'comment_body': 'datagrams refers to https://www.rfc-editor.org/rfc/rfc9221.html? Do we have any clients/servers to test this with?', 'comment_created': datetime.datetime(2022, 9, 7, 21, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965336594, 'comment_body': 'Do I get this right that there\'s a fake top level ""UDP flow"" that is only use for signalling?', 'comment_created': datetime.datetime(2022, 9, 7, 22, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965338088, 'comment_body': 'Do I see this correctly that DatagramFrameReceived is completely undocumented in aioquic?', 'comment_created': datetime.datetime(2022, 9, 7, 22, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965338476, 'comment_body': 'Name suggestion: RawQuicStreamsLayer?', 'comment_created': datetime.datetime(2022, 9, 7, 22, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965339627, 'comment_body': 'Clarification question: This would also work perfectly fine to proxy HTTP/3 streams, correct?', 'comment_created': datetime.datetime(2022, 9, 7, 22, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965344279, 'comment_body': 'FYI one reason why HttpStream subclasses layer.Layer is that streams can block independently. Here we handle all message hooks in QuicStreamLayer (the HTTP equivalent would be HttpLayer), which means that one intercepted stream blocks all other streams.\r\n\r\nThis here is definitely good enough for a first iteration though.', 'comment_created': datetime.datetime(2022, 9, 7, 22, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 965884212, 'comment_body': 'Yes, Chromium (with _a lot_ of debugging to get the proper command line):\r\n```shell\r\nchrome.exe \\\r\n    --proxy-server=""http=quic://localhost:8080;https=quic://127.0.0.1:8080"" \\  # needs to be set per proto\r\n    --force-fieldtrial-params=QUIC.Enabled:enable_quic_proxies_for_https_urls/true \\  # flag buried deep in Finch\r\n    --origin-to-force-quic-on=127.0.0.1:8080 \\  # only way to get around a custom root CA, --ignore-certificate-errors-spki-list doesn\'t work for proxies\r\n    https://mitmproxy.org\r\n```\r\n\r\nCurrently, as you pointed out, this triggers https://github.com/mitmproxy/mitmproxy/blob/891dae031c65a3268a18056bff9719ac9ee2a66f/mitmproxy/proxy/layers/http/_http2.py#L605 and is not implemented.', 'comment_created': datetime.datetime(2022, 9, 8, 12, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965887111, 'comment_body': ""It's the only settings that's actually used in multiple places, but otherwise... I'll remove it :)"", 'comment_created': datetime.datetime(2022, 9, 8, 12, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965901852, 'comment_body': ""Yes, and I think it's also what WebTransport uses (https://web.dev/webtransport/#datagram).\r\naioquic's own client/server examples support it:\r\nhttps://github.com/aiortc/aioquic/blob/239f99b8a3d4f5bc88cb280df765f35722cefe57/examples/http3_server.py#L249"", 'comment_created': datetime.datetime(2022, 9, 8, 12, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965902936, 'comment_body': 'And datagrams :)', 'comment_created': datetime.datetime(2022, 9, 8, 12, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965916943, 'comment_body': ""Well at least there's docstring 😅https://github.com/aiortc/aioquic/blob/725ff50172f3a1eb5415458e231bdc1d92282904/src/aioquic/quic/events.py#L40 \r\n(compared to what I had to go through to get Chromium to talk QUIC to mitmproxy, that's almost a full spec ;)"", 'comment_created': datetime.datetime(2022, 9, 8, 12, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965920299, 'comment_body': ""Yes, I've actually tested that in the previous implementation (before multi-server). This layer is basically TCPLayer/UDPLayer for QUIC."", 'comment_created': datetime.datetime(2022, 9, 8, 12, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965930413, 'comment_body': ""Well in that case... I was actually exploring the idea of doing `QuicStreamLayer` differently before, namely splitting up the  client connection per stream, and merging it back together at the server. That would allow for doing `NextLayer` per stream (implementing DNS over QUIC would be a breeze), but also ease implementation of CONNECT/upstream support. With the new multi-server mode I dropped it, because of how connections are registered now, since I planned to use proxyserver's connections for routing. But if the additional complexity of layer routing like in HTTP is desired anyways, I'll give it another try :)"", 'comment_created': datetime.datetime(2022, 9, 8, 12, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 965931108, 'comment_body': 'Will do, unless https://github.com/mitmproxy/mitmproxy/pull/5435#discussion_r965930413.', 'comment_created': datetime.datetime(2022, 9, 8, 12, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'meitinger', 'type': 'User'}, {'comment_id': 966197690, 'comment_body': ""Yeah, IIRC it's not just this check though. I think this was added to preempt issues further down the line. I have no specific memories though, sorry for being unhelpful on this. 😅 \r\n\r\n👍 👍 👍  on the Chromium invocation."", 'comment_created': datetime.datetime(2022, 9, 8, 16, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 966198273, 'comment_body': ""Let's just make it a constant somewhere, I don't see why users would want to configure it."", 'comment_created': datetime.datetime(2022, 9, 8, 16, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}, {'comment_id': 966200251, 'comment_body': 'Awesome!', 'comment_created': datetime.datetime(2022, 9, 8, 16, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mhils', 'type': 'User'}]","[{'commit_sha': '7d5b820642580e334c3e5118c2c3992581e5aeb6', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4f0e28dc09e767d366457d4b2b4926c406cdb7a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '568d03c600a9df429e410a6f0ab5d702304de151', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5926c45aa51316e0d9031eeeaaebcaa22d1055be', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff42d291147eb444c785842b71aac07ee7bfa46e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c271f246e247d2cf847141a80fdd31a595e99993', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e49eebe62dbe3e527ba95934e05ade39fde62d8', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4cb656b431a5667dbc09f1fff4971e3fa67fafa', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '366e696538061d13540ced440998193e4c1e4c31', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08aa838e9681746c64beb0f3f3f085863501ac49', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34776c1298f571abc7581054bbac642a9699269b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aaa2f9b9b9c519291df455e1922c614e285613c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac21eac71ebfed537933a7842c84557ec4a84b9e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f129a1e5a30fa3534028b667af90c2f5ece517d1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71645ddc8d4236bb23de8f35793a25929dad1b39', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5454a71bb69b0836c135074725fe60ee7cd044fc', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a9c962caa0ededd0f39b84bd7a25bc8633ae577', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5608b0629a3a82493f8ecad7d41200f02115b863', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e66875e73ad1cb3dd2b93b69fd6079ea348da87', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97e482998b76e8a3f18821a409b6eaa5c52d3754', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b5afe54c46eca45ef70bb1ac82828735fe8d7ef', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2426d3d03847e0273707436268d79c24616b3e74', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1426dec45e360f790367a9ce851a4b75779cdee6', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9afc502a699bfc66e14fe439dd1902727ebf36c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8b7b6e173ad0167da3de9482bd04a484ce069f1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db9f4b5a2df6cea4d8f6f455ead3a10b55eba122', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5902c7b0fa9d354172a3d438ec408d88c959857a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd213b4a25d6da2692aab6f4cf9ec6d645e22b1d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46096e6af9b8431301897a4b3f411dcf401c09ea', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534bc598337c29d3c004b028bd1c975c4a449715', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '569faf41d0f20257a96bdf1c05d3e4b132b9e883', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e71b0331b8de95c4204d5cc26fb07e967883972', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a221ad9b7c376135386af4eecf444182ae0322f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f33e70a82f2b955b7521e9aaa1c08bc401221a0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d52f3416c1f7a43603742876167f124c4d3ba1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46195ce4a6d0e803e3a0593325647cdf8990e518', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1355e4a118a672bff0681ddfe351cf9d90c7e9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f92a20af4cda9d1b01102e9177eda5b53f65e818', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b4894f3c00c1dcbaec3ff79cce0dbb30449789', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd94345b2f32aa04ed57dadac99c1ce9724ec15b2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4c6e01399ebc5e78e4a52b78a694459485ffdeb', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eff13002e8e11a30db2c7d763d6995f03944b00e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea6de335f078ac3426df20813beac257d0205414', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8dc62a101d2acbd086ff3d0b5d14768bba163b1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ac83aab00e653f307227405f056edffad40dbe4', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b87123ef2fa28b4736118608fdf9fffcc94877', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0465d815c53b10bfb2ef3eac0513afe250683bf8', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4dfcc0b8e93b184bd07de4c7f359ff06fe24510', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49c3fc2c637c5ea35ca1cc284a7191ea174ef54b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f702b695d5cc2656c529024a5d5b674ed18c932', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b1d779f02598e06631aaedfc33d28262892a0c4', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09ab2b765d45713d719951b59fdfd9f50d4e4015', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d3380706bedbbb07960ccf43606cd8d7420002b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e45c98d19bb3dbf8227c94e53887e21626cf0a21', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4cfd06bb151da64b5619c53cb16f4fda8554847', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f462e0bfc922d46ea9af41a66eb5b3f604b01aff', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82397c9bbba8b1dab38ea3ca64c1361219eb1fe7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52f40eb10d3c550ba5dc5676fdbf8ab8b7ee6e50', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '272880d158b71db9b7a9036363bfadabb6e8f45e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b9dcc47b9a808356a70988ced9484c18fca83e0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41e56327da6dbe622e0f7394ea72f91d673c1496', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f4a393328581db0c7d6e98ff3fe3d20415e1b1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8770e8a9a712dbd5e1333946155b161364201cd2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce34957938e2897e3a923dc904b5123cb8c9859d', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a164a08b412effeed6963859e1478e18c358f6bd', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf237d69db2d4f70d5d38cf05b9849dfc556686d', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01dba16eb1faef1d1dc502d694ebe8edb3daaf32', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b15e7605b06bc52e2000278afc9455ab2155dd38', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65e7aef5accde4833307be4e13d3d476f6666feb', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ccc85b6f1881d92b55e411ba9719f26459b720', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7831c05019a015077be5daac382a90d0f73af86', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50d0aa2256ba32ecd59f642e4cc601d8ec0610e1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ee9b5d039d2d66f2553c6dd11572838af30fb7d', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08d26814bb8eaf094635039e2cec6a450cc9ccd9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba5f8f06d9854fea16e393c2731516b61b071bf0', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cada1b7bfe58322b299979f69ae314a13c89a814', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b6472f8d9ab6d040a87377a2c19101b5a09d69c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04c7892ba437c2e4a33ce7fa487fc5194aef9dc1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ea0e1b17fe8578f293bb65183abd3b0d98a96c1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b166f5cd5b00df2116bc7fdf2ec69cb3d83172', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc59698cb2a3767972c35f6749eddf98af08cb4', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d17c8f263cb9d7f1bdd40a3c9b5c33648cf5d4e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6d6bf91092d4013aa7e37d76362f9723d32fe1f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e5790f9e2d2077cd004679d99a0a57c47f042e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c46e53c7d67f0a3632add11e1421e7b92edabe6d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cfd50bd830663b41f5f011bab40882256f3c74c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0015d469585c5696698bbf56ef291f591903416', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a68b6d86840b3ed74c2b0b123a736e6257dd68', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995ff0207cb3dd8ebced8f9fc7b8772d662966d9', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d59b57791d4ab242d2d7be68e419bee46233694', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0812b36f20ad35921760ea24d212d51e0d7fec47', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb494033c10d2c266dd3ab38cd1be424c083fb0c', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b1d18857604545b11753cf7c2ed3adee59bd2a2', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98ce1c2b2b115f2cfa4b8198e20eb93a5b49ba1d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f95b6a3144d0fa2ec99164fb89d31e3dafa991', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519b91c9a2b254f5a932f5c92601d663dfeb1cc3', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd45a7f262eb43bda137a9fe7abe75d959d8e2eb2', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec04569027d0b208659b97d1b22e186896174485', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83dac8dc39d57419f20f5bcf2ad3b1e3e268acc7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6c629cfe294436b01f19e2a3e22c3a879b00711', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54350292d94b91c5d3a462f7ebd9b2fd2ae5b33b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07fe8b4f20bbe7f152a6c226634a5d05a019551b', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac59fe369c04ad2ff7e10a36c696f3e0034a811', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a78191a5fbb6acbeddc0a5f90dc65233fc8d04e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b2545dc2ab5ea4f006b6d5a2cf5b55e9899896', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d39c52048e64a626aedaa24163bc2a4cac99264', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aba003099c26531eda5d9802cb205f2e6a55115', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c552455ccd20b05a4e0c1d319e6651fe1b63d873', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8dc5a66832183bd7f0acc99a96359bf32b69ed8', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49cca5301c8eb3b461db4028861f4bcd6b948362', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c1a23bf39c91747f8d43c7a950ab6211575b25', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a308d3dabcbb938a79902bfd02cf2be0b711c308', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d962b09a5095fd253941a4ccffbdf76cb59fbc', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '201f03082af882e6895b0a116d39e5137495344d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ca30ce6fd566931ceff92602813c39196a37aa', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '206e2f50eb9b6f9154f07316285d8964a4c9018d', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf2a1202aaa24156b471e6f0a4c1fd58ad57602', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64fa241825bd5b61a1da9c3f3bc90b5125a5919a', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d5f4b838b16c63f4e4b51aa3e53939c7c47625', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bda324d94143cda4c6d21e06c678e4ad6d71bb3', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa6c9b9f9b7c1bf4de71d561a9b900b5ee0aea6', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcee888f35d6248efb1946069d24bf4fdcd86d49', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75504e38a2bc2e042eba19487b84cdcb8bed6f2c', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7bf1c44b6531b251a4b8ebd54cd08bad0d63fcb', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7285c250ff1b7e4c39ee6e1bab4dc1c11540331f', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6360f388df72684c516626762bed397a6dc06f47', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e8b05619a76cd65634d294ded363b9895679b7', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f23a1887bb76501f6dbb57573847767e7c1538f1', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8b3784f8d2709cd4b546f5ecf9ee128e8fad566', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd88541f658b6257c230b35ec73f6ef0ec601fb', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d0947acb7d4b4ef2cf87bbaf2ac5ffbfe2fc18e', 'committer_username': 'meitinger', 'committer_name': 'Manuel Meitinger', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 27, 20, 27, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30135ea36a40d78cecde621630b403814e6a744c', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec4bbf496075c66c818dce644493ad936de95c2', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a41fe08ebc8179ece25aa8b95cc4a27511f0c9f', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f297f6a54179559d7d227266f579ac13a82250', 'committer_username': 'mhils', 'committer_name': 'Maximilian Hils', 'committer_email': 'github@hi.ls', 'commit_date': datetime.datetime(2011, 9, 1, 11, 3, 17, tzinfo=datetime.timezone.utc)}]",Manuel Meitinger,3720329,,User,,36,,1,19

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
519832,mitmproxy,mitmproxy/mitmproxy,Python,3975,35648,622,542,10688,351,9,36,"[{'id': 1040772455, 'number': 5563, 'closed': datetime.datetime(2022, 9, 7, 12, 14, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 30, 10, 15, 28, tzinfo=datetime.timezone.utc), 'time_taken': 698361.0, 'time_delta': '8 days, 1:59:21', 'additions': 19, 'deletions': 5, 'state': 'closed'}, {'id': 1037959956, 'number': 5556, 'closed': datetime.datetime(2022, 8, 30, 3, 27, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 13, 22, 19, tzinfo=datetime.timezone.utc), 'time_taken': 309933.0, 'time_delta': '3 days, 14:05:33', 'additions': 538, 'deletions': 543, 'state': 'closed'}, {'id': 1016450840, 'number': 5512, 'closed': datetime.datetime(2022, 8, 13, 22, 11, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 3, 15, 9, 20, tzinfo=datetime.timezone.utc), 'time_taken': 889301.0, 'time_delta': '10 days, 7:01:41', 'additions': 431, 'deletions': 192, 'state': 'closed'}, {'id': 1012912240, 'number': 5505, 'closed': datetime.datetime(2022, 7, 31, 7, 40, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 23, 12, 27, tzinfo=datetime.timezone.utc), 'time_taken': 30510.0, 'time_delta': '8:28:30', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1009119713, 'number': 5495, 'closed': datetime.datetime(2022, 8, 2, 17, 0, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 2, 14, 49, tzinfo=datetime.timezone.utc), 'time_taken': 571545.0, 'time_delta': '6 days, 14:45:45', 'additions': 181, 'deletions': 125, 'state': 'closed'}, {'id': 1007007495, 'number': 5483, 'closed': datetime.datetime(2022, 7, 25, 9, 53, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 8, 58, 51, tzinfo=datetime.timezone.utc), 'time_taken': 3298.0, 'time_delta': '0:54:58', 'additions': 23, 'deletions': 22, 'state': 'closed'}, {'id': 1000679795, 'number': 5465, 'closed': datetime.datetime(2022, 7, 27, 6, 6, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 11, 52, 22, tzinfo=datetime.timezone.utc), 'time_taken': 670434.0, 'time_delta': '7 days, 18:13:54', 'additions': 8, 'deletions': 2, 'state': 'closed'}, {'id': 980394527, 'number': 5435, 'closed': datetime.datetime(2022, 11, 28, 17, 58, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 18, 28, 1, tzinfo=datetime.timezone.utc), 'time_taken': 13303813.0, 'time_delta': '153 days, 23:30:13', 'additions': 5434, 'deletions': 277, 'state': 'closed'}, {'id': 967051333, 'number': 5414, 'closed': datetime.datetime(2022, 7, 27, 0, 20, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 14, 59, 14, tzinfo=datetime.timezone.utc), 'time_taken': 3662476.0, 'time_delta': '42 days, 9:21:16', 'additions': 1290, 'deletions': 245, 'state': 'closed'}, {'id': 944298958, 'number': 5366, 'closed': datetime.datetime(2022, 5, 23, 14, 54, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 23, 11, 19, 53, tzinfo=datetime.timezone.utc), 'time_taken': 12873.0, 'time_delta': '3:34:33', 'additions': 33, 'deletions': 5, 'state': 'closed'}, {'id': 895297760, 'number': 5232, 'closed': datetime.datetime(2022, 4, 24, 21, 17, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 31, 2, 35, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2140927.0, 'time_delta': '24 days, 18:42:07', 'additions': 4051, 'deletions': 561, 'state': 'closed'}]"
