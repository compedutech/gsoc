pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
991663722,Initial JNI support,"This PR adds JNI support on Android and Linux.

__Notes on generated files__:
  * The generated files account for majority of code.
  * lib/src/jni_bindings_generated.dart is generated using a personal fork of FFIGEN, which I am not vendoring in this PR because once vendored, we can't see the diff from original. So I have added a git dependency if you want to see the JNI-specific patch to FFIGEN.
  * The bindings can be regenerated by running `dart run ffigen --config ffigen.yaml` in `jni/`. When they are regenerated, there should be no change to any files in the working tree. (Can be verified using git status).
  * It generates bindings for `third_party/jni.h` which is copied from Android NDK and annotated (I copied the file from NDK 23.1, but the file doesn't seem to be updated in a while anyway.
  * I will vendor ffigen_patch_jni in a later PR

  * `lib/src/{jni_object_methods_generated.dart, jni_class_methods_generated.dart, direct_methods_generated.dart}` are generated using a script in tool/ directory. Rerunning it from package root should result in no changes to these files.
 
__Context on platform support__:
  * Android support is the priority of the project. Desktop support is experimental. Currently linux desktop is somewhat well-supported. The package tests pass on linux using the desktop JVM. Dart standalone support is also possible. Example and CI workflow will be added in a later PR.
  * Support for other platforms: tracking issue dart-lang/native#804",True,11,https://api.github.com/repos/dart-archive/jnigen/pulls/11,https://github.com/dart-archive/jnigen/pull/11,closed,8622,447,44,24,12,65,0,0,[],2022-07-08 13:22:24+00:00,2022-07-23 14:21:46+00:00,1299562.0,"15 days, 0:59:22","[{'comment_id': 917614171, 'comment_body': 'What we usually do as a process is:\r\n\r\n1. File a an issue on GitHub.\r\n2. Leave a comment here with `// TODO(https://github.com/dart-lang/jni_gen/issues/<number>): Short description.`.\r\n\r\nThat way we can easily find back things without having to go through the comments of previous PRs. 🙂  And the  issuelist on Github can function as a todo-list for my forgetful mind! 🙃 ', 'comment_created': datetime.datetime(2022, 7, 11, 7, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917625722, 'comment_body': 'nice!', 'comment_created': datetime.datetime(2022, 7, 11, 7, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917630867, 'comment_body': ""Use consistent punctuation (also above and below).\r\n\r\nI think the best solution here would be:\r\n\r\n* Functions to spawn a JVM on desktop platforms (`Jni.spawn`).\r\n\r\nPeriod ad the end of the sentence, the brackets within the sentence.\r\n\r\nThe following two punctuation approaches don't work [for reasons added in the square brackets].\r\n\r\n* Functions to spawn a JVM on desktop platforms. (`Jni.spawn`). [The last part is not a sentence. A sentence needs a verb. So it shouldn't have a period.]\r\n* Functions to spawn a JVM on desktop platforms. (`Jni.spawn`) [The symbol within brackets belongs to the previous sentence, but now it looks like it stands on its own.]"", 'comment_created': datetime.datetime(2022, 7, 11, 7, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917631986, 'comment_body': 'Either \r\n\r\n* Some utility functions to make it easier to work with JNI in Dart; eg: To convert a java string object to Dart string (mostly as extension methods on `Pointer<JniEnv>`).\r\n\r\nOr\r\n\r\n* Some utility functions to make it easier to work with JNI in Dart; eg: To convert a java string object to Dart string. (Mostly as extension methods on `Pointer<JniEnv>`.)\r\n\r\nProbably the first one if we want to keep it consistent with the previous bullet points (also below).', 'comment_created': datetime.datetime(2022, 7, 11, 7, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917635217, 'comment_body': 'Avoid ""you"". Maybe use the following: It will reduce some boilerplate during debugging.\r\n\r\nAvoid speaking language: ""That said, "". Maybe use the following: Please note this API is incomplete.', 'comment_created': datetime.datetime(2022, 7, 11, 7, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917635625, 'comment_body': 'Avoid ""you"".', 'comment_created': datetime.datetime(2022, 7, 11, 7, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917639098, 'comment_body': 'The focus of this project is Flutter Android, since Flutter Android apps already have a JVM, and JNI enables interop with existing Java code and Android Platform APIs. This project also (partially) supports Linux desktop by spawning a JVM through JNI.', 'comment_created': datetime.datetime(2022, 7, 11, 7, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917639741, 'comment_body': 'This library is at an early stage of development and we do not provide backwards compatibility of the API at this point.', 'comment_created': datetime.datetime(2022, 7, 11, 7, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917642180, 'comment_body': '""There are"" and ""exists"" are usually signs a sentence can be rewritten. (Inverting the sentence usually helps.)\r\n\r\nThe `test/` directory contains files with comments explaining <...>, and the `example/` directory contains a flutter example.', 'comment_created': datetime.datetime(2022, 7, 11, 7, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917642768, 'comment_body': '> The current focus is on the Android platform.\r\n\r\nThis was already mentioned earlier in the readme.', 'comment_created': datetime.datetime(2022, 7, 11, 7, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917644646, 'comment_body': ""Great! This readme contains precisely the information someone new to this package would be looking for! 🚀  I've added a bunch of comments regarding grammar/punctuation/style and some clarifications below. (P.S. Don't worry about not getting this right the first time.)"", 'comment_created': datetime.datetime(2022, 7, 11, 7, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917671245, 'comment_body': 'Try with `File.open` if the exists, and document in the exception which command to run to build the library.\r\n\r\n(Make it easy for users who try to `dart pub get && dart run test`.)', 'comment_created': datetime.datetime(2022, 7, 11, 8, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917678456, 'comment_body': 'Please provide a `bin/setup.dart` that invokes CMake with the right arguments.', 'comment_created': datetime.datetime(2022, 7, 11, 8, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917679435, 'comment_body': 'Please move this kind of logic into `build/setup.dart` that way we can also use it locally instead of only on the CI. (Just invoke the dart script here.)', 'comment_created': datetime.datetime(2022, 7, 11, 8, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917711190, 'comment_body': 'Please file GitHub issues for open issues and paste the link in the TODO.\r\n\r\n`// TODO(http....):`\r\n\r\nFinish sentences with a period.', 'comment_created': datetime.datetime(2022, 7, 11, 9, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917718991, 'comment_body': ""Please provide a `bin/setup.dart` script that uses the right arguments. You're expecting the lib to be in `src/build` afterwards, so `-B` must be specified or it must be run from that folder as working directory. Having a script simplifies that."", 'comment_created': datetime.datetime(2022, 7, 11, 9, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917719234, 'comment_body': 'Punctuation 😄 \r\n\r\n(Either, the bullet points are all complete sentences with a capital in the beginning and period at the end. Or, the sentence runs through all bullet points, meaning a period in the last one and no capitals.)', 'comment_created': datetime.datetime(2022, 7, 11, 9, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917721225, 'comment_body': 'Avoid ""you"". \r\n\r\n```\r\n/// This module depends on a shared library written in C. To use in Dart standalone:\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 9, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917722781, 'comment_body': 'Combine both `CheckJNI` bullets, they are about the same thing.', 'comment_created': datetime.datetime(2022, 7, 11, 9, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917728757, 'comment_body': 'Use `Uri` for paths.\r\n\r\n* It enables both absolute and relative paths for users if they want.\r\n* It is Windows-safe.\r\n* It has a `resolve` method which works better than string concat (do use `/` at the end for folders).\r\n* Use `toFilePath()` when using it in a string place.\r\n', 'comment_created': datetime.datetime(2022, 7, 11, 9, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917737755, 'comment_body': ""If we pass the allocator as an argument, the user should decide when to free.\r\n\r\nAssuming that `NewStringUTF` copies the string to Java memory, I'd write this function as:\r\n\r\n```dart\r\n  /// Return a new [JString] from contents of [s].\r\n  JString asJString(String s) {\r\n    return using((Arena allocator) {\r\n      final utf = s.toNativeUtf8(allocator: allocator).cast<Char>();\r\n      return NewStringUTF(utf);\r\n    });\r\n  }\r\n```\r\n\r\nBecause we can free the UTF-8 string in C memory immediately, we don't need to provide flexibility for the user what allocator to use. (If `NewStringUTF` was pointing to the UTF-8 string in C memory, we could not free in this method and the user has to free it. Then taking an allocator as argument makes sense.)\r\n\r\nUsing `using` with the `Arena` allocator will automatically free the memory at the end of the inner closure scope.\r\n\r\nThis also works when there are exceptions, then it will be freed as well."", 'comment_created': datetime.datetime(2022, 7, 11, 9, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917739934, 'comment_body': 'Prefer `const` and `final` over `var`.\r\n\r\nMaybe enable some lints:\r\n\r\n* prefer_const_declarations\r\n* prefer_final_locals\r\n', 'comment_created': datetime.datetime(2022, 7, 11, 9, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917742069, 'comment_body': 'Usually named `*.<target-language>.tmpl`, so `*.dart.tmpl`.', 'comment_created': datetime.datetime(2022, 7, 11, 9, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917743449, 'comment_body': 'Please file an issue and add a TODO here.', 'comment_created': datetime.datetime(2022, 7, 11, 9, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917748634, 'comment_body': 'This file contains code that is a derivative work of `third_party/jni.h`. As a derivative work, it needs to have the same copyright as the input file:\r\n\r\n```\r\n/*\r\n * Copyright (C) 2006 The Android Open Source Project\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the ""License"");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an ""AS IS"" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n * JNI specification, as defined by Sun:\r\n * http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html\r\n *\r\n * Everything here is expected to be VM-neutral.\r\n */\r\n```\r\n\r\nTo follow the Dart package conventions with regard to having a different copyright in a file, this file should be in `lib/src/third_party/`.', 'comment_created': datetime.datetime(2022, 7, 11, 9, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917756155, 'comment_body': '`flutter pub run ffigen --config ffigen.yaml` and `dart run ffigen --config ffigen.yaml` should work without having to find a path to `ffigen.dart`. (It is the magic of `bin/<package-name>.dart`.)', 'comment_created': datetime.datetime(2022, 7, 11, 10, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917760122, 'comment_body': 'Add a `boolean _deleted = false;` to `class JniObject`. Set it to true here. And check in all methods that it is false before using it.', 'comment_created': datetime.datetime(2022, 7, 11, 10, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917762746, 'comment_body': 'What happens if I make two `JniObject`s out of one `JObject`, and I call `delete` on one of them? Is that safe? In other words, does the `delete` only delete the `JniObject` object? Or does it also delete the underlying things?', 'comment_created': datetime.datetime(2022, 7, 11, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 917878976, 'comment_body': ""It deletes the underlying reference, i.e original JObject.\r\n\r\nI think a warning in documentation is enough. Since there aren't many times you would want to convert a JObject (that's just raw `Pointer<Void>`) -> JniObject. And even then Jni.wrap() is enough.\r\n\r\nSafer semantics can be implemented by creating new LocalRef whenever we are copying like this. But that will also prevent us from doing things like `Jni.wrap(low_level_expression_returning_jobject)`, because we will lose original LocalRef and that will leak."", 'comment_created': datetime.datetime(2022, 7, 11, 12, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 917888708, 'comment_body': ""Let's wait and see what we generate for end users of JNIgen. If we can hide these implementation details from them, we only have to make sure that we generate the right thing ourselves. If we cannot fully hide this API we should come up with good documentation and a good API to manage these native resources.\r\n\r\nPlease file a bug for us to look into this later."", 'comment_created': datetime.datetime(2022, 7, 11, 12, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 918952603, 'comment_body': 'Sorry I missed 18 comments because github folded them.\r\n\r\nThis install and configure step is specific to linux on CI.', 'comment_created': datetime.datetime(2022, 7, 12, 13, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 918957290, 'comment_body': '```\r\n      - run: |\r\n          cd ../src/\r\n          mkdir build\r\n          cd build\r\n          cmake .. && cmake --build .\r\n```\r\n\r\nI see this twice in the file (both Linux).', 'comment_created': datetime.datetime(2022, 7, 12, 13, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 918991804, 'comment_body': 'Can I use exists()?', 'comment_created': datetime.datetime(2022, 7, 12, 13, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 918995033, 'comment_body': 'Ah yes, better.', 'comment_created': datetime.datetime(2022, 7, 12, 13, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 919013659, 'comment_body': 'Should this be in bin/ or tool/ ?', 'comment_created': datetime.datetime(2022, 7, 12, 14, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 919020932, 'comment_body': 'Should I do the same for helperDir in Jni.spawn? or is it better kept as string?', 'comment_created': datetime.datetime(2022, 7, 12, 14, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 919021458, 'comment_body': 'Lets see, `bin/` can be run by users of the package, `tool/` not.\r\n\r\nSo, if someone makes a `package:x` and they have `package:jni` in their `dependencies` in `yaml`, they will need to run `dart run jni:setup` from their package after `dart pub get`, otherwise they will not have the helper lib. So then it needs to be `bin/`.', 'comment_created': datetime.datetime(2022, 7, 12, 14, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 919022733, 'comment_body': 'I prefer `Uri`s everywhere they are just more flexible and precise than a `String`.', 'comment_created': datetime.datetime(2022, 7, 12, 14, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 920462593, 'comment_body': ""Avoid throwing `Exception` directly. Throw a subclass instead. For example, in this case you could throw an `UnsupportedError`. Check these lists for built in exceptions and errors:\r\n\r\nhttps://api.dart.dev/be/180360/dart-core/dart-core-library.html#exceptions\r\nhttps://api.dart.dev/be/180360/dart-io/dart-io-library.html#exceptions\r\n\r\nOr just write your own Exception, like you're already doing in jni_exceptions."", 'comment_created': datetime.datetime(2022, 7, 13, 20, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920467528, 'comment_body': 'nit: `length` is unnecessary, and `count` could be final', 'comment_created': datetime.datetime(2022, 7, 13, 20, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920470482, 'comment_body': 'Also need to free all those strings.', 'comment_created': datetime.datetime(2022, 7, 13, 20, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920476588, 'comment_body': 'Maybe call `findClass`, to reduce repetition? Also `newInstance` could probably call `findJniClass`', 'comment_created': datetime.datetime(2022, 7, 13, 20, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920484285, 'comment_body': ""Strictly speaking, all these branches that might throw an exception leak memory, because the `calloc.free` calls below are skipped. You can fix most of those issues by just moving the frees further up. Or you can try Daco's suggestion in one of the other comments, about `Arena.using`."", 'comment_created': datetime.datetime(2022, 7, 13, 20, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920493994, 'comment_body': ""Is there a plan to make this class and `JniObject` finalizable? Doesn't have to happen now, but it might be a nice usability feature in the future."", 'comment_created': datetime.datetime(2022, 7, 13, 20, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920497828, 'comment_body': 'Reuse `_getMethodID`?', 'comment_created': datetime.datetime(2022, 7, 13, 20, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920498840, 'comment_body': 'This is another case where if the exception is thrown, this memory will leak. Like a lot of the other cases, you can fix this one just by moving `calloc.free` above `checkException`', 'comment_created': datetime.datetime(2022, 7, 13, 20, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920506733, 'comment_body': 'Do you need to do `NewLocalRef` here, like you do below?', 'comment_created': datetime.datetime(2022, 7, 13, 20, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920507215, 'comment_body': 'Move above `checkException`. Same below.', 'comment_created': datetime.datetime(2022, 7, 13, 20, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920514323, 'comment_body': ""My understanding is that local refs only last as long as the current native scope. Maybe this doesn't matter too much since the outermost scope will be Dart. But I think it might matter in cases where the user passes a Dart callback to Java, and Java calls back into Dart? In that case, if the user makes some local references (perhaps inadvertently, using one of these Dart wrapper objects), and puts them in a global variable or something, then they'll end up with dangling pointers after their Dart callback finishes.\r\n\r\nWhat if we replace all `(New/Delete)LocalRef` with `(New/Delete)GlobalRef`? In other words, make it so that the only kind of reference ever held by Dart is a global reference? You don't have to do this migration right now if it would be a lot of work."", 'comment_created': datetime.datetime(2022, 7, 13, 21, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920515581, 'comment_body': 'Might be good to catch any exceptions this throws, call `delete()`, then rethrow the exception?', 'comment_created': datetime.datetime(2022, 7, 13, 21, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 920933719, 'comment_body': ""Wow this broke flutter, because DynamicLibrary::Load calls dlopen or the windows equivalent, which does lookup in default paths etc...\r\n\r\nAnd CI can't test this meaningfully, `flutter test` takes library path, integration test can catch this, but doesn't run on CI.\r\n\r\nLesson learned."", 'comment_created': datetime.datetime(2022, 7, 14, 9, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 920936532, 'comment_body': 'Currently user can specify an explicit source path package_jni/source with -S option.\r\n\r\nIs there a way to get path of source in pub cache? `Platform.scipt` returns a path in `.dart-tool`.\r\n\r\nAnything else you recommend? Like cloning repo or downloading sources to .dart-tool?\r\n', 'comment_created': datetime.datetime(2022, 7, 14, 9, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 920955622, 'comment_body': 'Wow that was an obvious oversight, (allocating with custom allocator but freeing with malloc), thanks.', 'comment_created': datetime.datetime(2022, 7, 14, 9, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 920957640, 'comment_body': ""Btw, with an Arena don't we want to not actually free memory at the end of scope? Since arena is something passed & managed from outer function."", 'comment_created': datetime.datetime(2022, 7, 14, 9, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 920960783, 'comment_body': 'findClass returns a raw JClass (seemed consistent with getApplicationContext etc..), findJniClass returns a JniClass wrapper.', 'comment_created': datetime.datetime(2022, 7, 14, 9, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 920963628, 'comment_body': ""What's the overhead of NativeFinalizers? Are they intended to be used for file descriptor's etc.. resources or more purposes?\r\n\r\nI will look into NativeFinalizers."", 'comment_created': datetime.datetime(2022, 7, 14, 9, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 920968010, 'comment_body': ""This is actually what Daco & I were discussing as well. There are quite a few edge cases like this, and it makes sense to use Global references entirely, and also provide a thread-safe indirection over JniEnv if possible.\r\n\r\ntracking issue: #12 \r\n\r\n> My understanding is that local refs only last as long as the current native scope. Maybe this doesn't matter too much since the outermost scope will be Dart. But I think it might matter in cases where the user passes a Dart callback to Java, and Java calls back into Dart?\r\n\r\nI don't know how to verify the following\r\n>> One unusual case deserves separate mention. If you attach a native thread with AttachCurrentThread, the code you are running will never automatically free local references until the thread detaches. Any local references you create will have to be deleted manually. In general, any native code that creates local references in a loop probably needs to do some manual deletion.\r\n\r\nhttps://developer.android.com/training/articles/perf-jni\r\n\r\nBut the concern is valid. On Android, thread is attached manually so far in my experimentation, but there may be cases it isn't."", 'comment_created': datetime.datetime(2022, 7, 14, 9, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 920969966, 'comment_body': 'I changed this to catch `Error` on DynamicLibrary.open and rethrow as HelpersNotFoundException. Seemed the best way. dlopen has many cases (eg: specific variables like LD_LIBRARY_PATH and linking flags like RPATH).', 'comment_created': datetime.datetime(2022, 7, 14, 9, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 920994713, 'comment_body': 'I am not saving it in original object, so I think this would be fine.\r\n\r\nI need to do NewLocalRef in second case, because `JniObject._cls` also gets deleted (`DeleteLocalRef`) on `JniObject.delete`.', 'comment_created': datetime.datetime(2022, 7, 14, 10, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 921907557, 'comment_body': ""I have been thinking the same thing, but it'd be fine a future thing. Also depends a bit on what the generator will output. E.g. how much do users need to do. So maybe we should postpone making it a `Finalizable` with a `NativeFinalizer` till we can see what kind of code we will generate."", 'comment_created': datetime.datetime(2022, 7, 15, 7, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 922417073, 'comment_body': 'Yeah, but it looks like this function shares a lot of code with `findClass`, so you can do this:\r\n\r\n```dart\r\nJniClass findJniClass(String qualifiedName) {\r\n  return JniClass.of(getEnv(), findClass(qualifiedName));\r\n}\r\n```\r\n\r\nAnd `newInstance` can similarly call `findJniClass`', 'comment_created': datetime.datetime(2022, 7, 15, 18, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 922418997, 'comment_body': 'Agreed, this should be follow up work. Just file a bug to remind yourself to look into it later.', 'comment_created': datetime.datetime(2022, 7, 15, 18, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 922769965, 'comment_body': ""Ah didn't notice this. thanks."", 'comment_created': datetime.datetime(2022, 7, 17, 4, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}]","[{'commit_sha': '7551ff39fc1939452fd53a64e7af8800d6130002', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bbeda4b8078de613d61964aa3a13acdf61e10d2', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b1a49d2e35525c89f7c1560e1aa0039d5cc387', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '686ae258a929fd22d09d23df054586c387c698f6', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852691fbf0458b12c0fef5cad8b9eb971b7522e9', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a1e7e0f79ffe1952f6e069ff61b32253bbfc210', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09ddda6321e388429ab045a9c9d53884e00851d', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab793ae9a6ed49cc8c8fc70bee33d6f9c725bbfa', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01aef564c3d8bb1aadb7413528cf73c18f28b907', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4e3fd0bab586c545c4ca977628b79f52c073ffc', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fa0c921b4c9bfc281161a20adde09e3ed2c7dc9', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e443a2bfdea257ff0c8454076d9183dea295265', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b85ac507c43d46182bfe217b00c9651c8bba886', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f820996087dda8d87292165ead42f13df8a30fb6', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd7dfefdaa45e75ceccbabb1105cff93a6d1bc47', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea680d5e83d104ab18f9c38c8740befbb55c7184', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0ed0cc9703dee02b06af09b8476e5b987b1fa3', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f92678a1aedfaf0c3e536101d5712a1755ce6b5a', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a72f63b57051b0821dd6135aad102e28da77ce09', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f60e261c2a0d2e4c8f98fbaae6a146c2d9c331', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f0f41d96ae2617cc09b8daf65d1598b8e3d6e7', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '849901ecfb98e48b2840017dcba691cf33c34b0e', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36fee46c7d54b3ed30a295f8f938d9306f9feb72', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a61e92cff6a0caeca5c839e5e81684d719e714a', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}]",Mahesh Hegde,46179734,,User,,34,,33,34
1022362187,Initial code generator support draft,"This PR adds initial support for code generator.

There are 2 parts;

    * ApiSummarizer: Java component that generates JSON representation of Java APIs.
    * jni_gen: takes JSON and generates code based on it.

test package is in jni_gen_test, which tests generating code for a very simple java class.

Locally I am able to generate code for some PDFBox classes and some packages from android libraries as well. Still contemplating how to add these to CI. PDFBox requires 5-6 jar dependencies to be downloaded from apache and bouncy castle sites. Looking for a way to automate it with maven or something. Similarly `android-stubs-src.jar` from SDK-28 is the one working with Android libraries.

TODO: (Before merging this PR)
* How to add a LICENSE to `ApiSummarizer`? It depends on some JDK APIs, should it be GPL?",True,19,https://api.github.com/repos/dart-archive/jnigen/pulls/19,https://github.com/dart-archive/jnigen/pull/19,closed,12414,101,104,32,17,147,0,0,[],2022-08-10 07:56:39+00:00,2022-08-25 07:11:29+00:00,1293290.0,"14 days, 23:14:50","[{'comment_id': 945857278, 'comment_body': 'Can `jni_gen_test` be `jni_gen/test` instead?\r\n\r\nIt should be the unit tests and integration tests for `package:jni_gen`.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945858499, 'comment_body': 'Prefer using a Dart script. E.g. a `setup.dart` with `Process.run`s.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945860848, 'comment_body': 'You could invoke the setup script from the `setUp` in the test, so it is automatically run.\r\nBe sure to print that is running as well for if the setup fails.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945863881, 'comment_body': 'Generate a comment on the `aux` getter it creates a reference from Dart to Java that must be `delete`d later.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945865298, 'comment_body': 'This comment is not on `static Example_Aux get aux` but on a private member.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945866292, 'comment_body': 'Idem here. The dartdoc for `Example()` should document it must be `delete`d.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945868424, 'comment_body': ""nit: Add comma's between the closing brackets so that the formatting becomes all 2 spaces indented.\r\n\r\nIt makes the code easier to read."", 'comment_created': datetime.datetime(2022, 8, 15, 15, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945869956, 'comment_body': ""This doesn't print the stacktrace, correct? Just the toString() of the exception or error.\r\n\r\nMaybe don't catch them at all, then they will just be uncaught and reported to the user with all available information."", 'comment_created': datetime.datetime(2022, 8, 15, 15, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945870239, 'comment_body': 'This is super cool to see! 🔥 ', 'comment_created': datetime.datetime(2022, 8, 15, 15, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945871935, 'comment_body': 'Is this default Java formatting? No space between the + and its operands? Please run a formatter.\r\n\r\n(Does Java really use tabs by default to format. 😭 Can we change it to spaces? 💪 )', 'comment_created': datetime.datetime(2022, 8, 15, 15, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945877358, 'comment_body': 'This should be a command-line interface in `jni_gen/bin/jni_gen.dart` so that we can do `dart run jni_gen --config <some-config-file>.yaml`.\r\n\r\nFor a test that uses the Dart API instead of a config file: We should in a test regenerate the file and check that it is equal to what we had before. (Give the `_test.dart` file a parameter to keep the temporary files, so we can easily inspect the API summary as well.)', 'comment_created': datetime.datetime(2022, 8, 15, 15, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945879174, 'comment_body': 'should this be `bin/setup.dart` instead?', 'comment_created': datetime.datetime(2022, 8, 15, 15, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945879387, 'comment_body': 'this -> This', 'comment_created': datetime.datetime(2022, 8, 15, 15, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945879973, 'comment_body': ""Remove this. We're not using this in Flutter apps."", 'comment_created': datetime.datetime(2022, 8, 15, 15, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945889817, 'comment_body': 'Is `setup.dart` a common convention? If so I will rename it.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 945892721, 'comment_body': 'I should have run google-java-format on it (As rest of the summarizer).', 'comment_created': datetime.datetime(2022, 8, 15, 15, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 945893440, 'comment_body': 'More common than a specific name. The `bin/*.dart` files are not easily discoverable. `dart run jni_gen:setup` seems clearer in docs to me than `dart run jni_gen:build_summarizer`. The users of `package:jni_gen` do not have to know that we have two separate components on the inside (the summarizer and generator). They just want to run one setup step and be done.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945894068, 'comment_body': ""Maybe run the formatter on CI as well, that way we don't break it again later. 🥇 "", 'comment_created': datetime.datetime(2022, 8, 15, 15, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945894371, 'comment_body': 'jni_gen_test is a complete dart package with some tests after wrapper code is generated. Is it fine to nest a package like that in test/ folder?', 'comment_created': datetime.datetime(2022, 8, 15, 15, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 945894969, 'comment_body': 'I am actually not using it anywhere but local machine :). On CI, each `dart run` is separate named step.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 945897244, 'comment_body': 'Is `golden file` testing viable at this point? Because generated code structure is still in flux.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 945897481, 'comment_body': ""Why do you need a package?\r\n\r\n* Any dependencies only use in tests can go in dev dependencies\r\n* The wrapper code can be generated in the `setUp` of the test.\r\n\r\nIs there something I'm missing?"", 'comment_created': datetime.datetime(2022, 8, 15, 15, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945898511, 'comment_body': 'Well, I was running it as well, because I did not want to have to figure out in which order to do things and what steps to run! 😆 \r\n\r\nIt would be nice if we could just `cd jni_gen`, `dart test` and then everything needed for the setup of the tests is automatically run.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945899186, 'comment_body': '`FilesWriter` copies this along with generated C file, because generated library needs to be linked to JVM libraries etc.. depending on the platform. This applies to both flutter and standalone.', 'comment_created': datetime.datetime(2022, 8, 15, 15, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 945899652, 'comment_body': 'If you want full-package integration tests, you can take a look at how they are setup in:\r\n\r\nhttps://github.com/dart-lang/ffigen/tree/master/example/c_json\r\nhttps://github.com/dart-lang/ffigen/blob/master/test/large_integration_tests/large_test.dart#L62\r\nhttps://github.com/dart-lang/ffigen/blob/master/test/large_integration_tests/_expected_cjson_bindings.dart\r\n', 'comment_created': datetime.datetime(2022, 8, 15, 15, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945901265, 'comment_body': ""I'm blind and didn't see the `.tmpl` 🙈 "", 'comment_created': datetime.datetime(2022, 8, 15, 15, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945902377, 'comment_body': ""Yeah I think it's fine. It also makes it easy to see how we change our generated code on subsequent PRs."", 'comment_created': datetime.datetime(2022, 8, 15, 15, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945931947, 'comment_body': ""> Why do you need a package?\r\n\r\nThe details are now slightly fuzzy in my head. But you can't generate code and use that in single test file. Test file that calls generated code should be loaded _after_setup is run.\r\n\r\nAlso code in `test/` is analyzed by `dart analyze` which may catch code depending on yet-to-be-generated sources.\r\n\r\nI will see if there's another way to do this.\r\n\r\n> large_test.dart\r\n\r\nI think it only compares with expected bindings and does not run anything based on generated code. I wanted something end-to-end, that runs some test on generated code.\r\n\r\nAt this point jni_gen is at very early version and I think it's not viable to rely on exact comparison of generated bindings."", 'comment_created': datetime.datetime(2022, 8, 15, 16, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 945944925, 'comment_body': 'In `ffigen` I saw there was quite a bit of code dedicated for YAML parsing. Is there now something like `json_serializable` for YAML? I think YAML config would not be an immediate priority.', 'comment_created': datetime.datetime(2022, 8, 15, 16, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 945947322, 'comment_body': ""> But you can't generate code and use that in single test file.\r\n\r\nCorrect, but you can (1) commit the generated code and generate code and use it in tests, and then (2) run the generator and compare the output string with the committed generated code in a second test.\r\n\r\nIn general, you cannot have test referring to generated files and not committing the generated file, even if you do it in a setup step.\r\n\r\n> At this point jni_gen is at very early version and I think it's not viable to rely on exact comparison of generated bindings.\r\n\r\nI think it's fine to update generated files every PR. This is what we have done with the `libclang` bindings in `ffigen` as well."", 'comment_created': datetime.datetime(2022, 8, 15, 16, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945949332, 'comment_body': 'We can leave the config for later.\r\n\r\nIn that case we will not have a `bin/jni_gen.dart` for now.\r\n\r\nWe will only have a `lib/jin_gen.dart` that exposes a Dart API that is directly used by our tests.', 'comment_created': datetime.datetime(2022, 8, 15, 16, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 945970296, 'comment_body': 'It will require to either download the jar from google-java-format release or use a third party GH action (axel-op/googlejavaformat-action).\r\n\r\nWhich one is preferred?', 'comment_created': datetime.datetime(2022, 8, 15, 17, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 945977750, 'comment_body': 'The easiest one. (Which is the GitHub action I would think, because it downloads the jar for us.)', 'comment_created': datetime.datetime(2022, 8, 15, 17, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946169448, 'comment_body': ""Perhaps this is more of an example than a test? In that case you could put it in jni_gen/example? You can still run an example on github CI as if it was an integration test, it just won't be picked up by `dart test`"", 'comment_created': datetime.datetime(2022, 8, 15, 22, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 946203184, 'comment_body': 'If you expect there to be exactly one result, you can use `single`: https://api.dart.dev/stable/2.17.6/dart-async/Stream/single.html', 'comment_created': datetime.datetime(2022, 8, 15, 22, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 946205195, 'comment_body': 'Can you replace this loop with this function? https://pub.dev/documentation/package_config/latest/package_config.package_config_types/PackageConfig/operator_get.html', 'comment_created': datetime.datetime(2022, 8, 15, 23, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 946206437, 'comment_body': 'Duplicate of the `getLastName` function below?', 'comment_created': datetime.datetime(2022, 8, 15, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 946208502, 'comment_body': ""It's a shame that Dart doesn't have multi-return. Returning a List is pretty gross, but the only other option is writing a one-time-use class for the return type. A class would be cleaner, but I'll leave it up to you to decide if it's worth the effort."", 'comment_created': datetime.datetime(2022, 8, 15, 23, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 946209623, 'comment_body': ""Are these Dart's keywords? There's quite a few missing. Did you add Dart's keywords but then exclude Java keywords or something?"", 'comment_created': datetime.datetime(2022, 8, 15, 23, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 946222827, 'comment_body': 'Move all these to github issues?', 'comment_created': datetime.datetime(2022, 8, 15, 23, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 946290568, 'comment_body': ""Yes I was lazy and excluded Java's keywords because they cannot be in Java's identifier names."", 'comment_created': datetime.datetime(2022, 8, 16, 2, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 946508544, 'comment_body': 'I think it\'s more common have either (1) test without ""sample"" or ""example"" in the path or (2) have a top level examples folder and optionally run the example from the test folder (like in package:ffigen).', 'comment_created': datetime.datetime(2022, 8, 16, 8, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946550491, 'comment_body': '`sourcePathsOption` and `classPathsOption` should be a static const, they will never change.', 'comment_created': datetime.datetime(2022, 8, 16, 9, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946553494, 'comment_body': 'Should this be a ""backend"" option instead of a yes/no flag? With ""asm"" and ""doclet"" as valid arguments.\r\n\r\n`java ...jar --backend asm` or `java ...jar --backend doclet` (or `doctool`).\r\n\r\nThis should document what both backends can do and can\'t do?\r\n\r\nHave we implemented both backends?', 'comment_created': datetime.datetime(2022, 8, 16, 9, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946554707, 'comment_body': 'nit: I think ""v"" is more common. Or is it always ""V"" in Java land?', 'comment_created': datetime.datetime(2022, 8, 16, 9, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946555009, 'comment_body': 'What is this option for?', 'comment_created': datetime.datetime(2022, 8, 16, 9, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946563424, 'comment_body': 'In `package:ffigen` we have the concepts of ""entry-points"" and ""include-directives"":\r\n\r\n> The header entry-points and include-directives. Glob syntax is allowed. If include-directives are not specified ffigen will generate everything directly/transitively under the entry-points.\r\n\r\nhttps://github.com/dart-lang/ffigen/blob/master/README.md\r\n\r\nI\'d prefer having an include-directives option as well here.\r\n\r\nFeel free to leave it for a follow up PR. I\'ve filed https://github.com/dart-lang/jni_gen/issues/24, please add a TODO.\r\n', 'comment_created': datetime.datetime(2022, 8, 16, 9, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946563678, 'comment_body': 'What are Java modules?', 'comment_created': datetime.datetime(2022, 8, 16, 9, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946670961, 'comment_body': '`<SOURCE_FILES>` It expects `Main` not `Main.java`.\r\n\r\nShould it be called `<CLASSES>`?\r\n\r\nThis raises the question whether the ""entry-points"" should be files (and folders with glob) or classes (and all classes in a package if a package is specified).', 'comment_created': datetime.datetime(2022, 8, 16, 11, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946674879, 'comment_body': 'Should the Java package have some unit tests that have a Java file as input and a JSON summary as output?\r\n\r\nThat way we can see breaking changes on the format boundary more easily.', 'comment_created': datetime.datetime(2022, 8, 16, 11, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946677050, 'comment_body': 'We should have a unit test or two for the Dart package that takes a fixed API summary and checks the generated output.\r\n\r\nThat way we can also iterate on the feature set of the generator without running the jar the whole time.\r\n\r\nHaving these two tested separately effectively standardizes the summary format, which is a good thing. Then we can see if it is a good format. We can always change the format, because it is only internal. But having this format makes it easier to see what is going on both in the summarizer and in the generator.', 'comment_created': datetime.datetime(2022, 8, 16, 11, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946677517, 'comment_body': 'For both of these. Feel free to file bugs on this repo and leave a TODO instead of addressing it in this PR.', 'comment_created': datetime.datetime(2022, 8, 16, 11, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946682371, 'comment_body': 'Please add javadoc comments for all of these.\r\n\r\nFor clarity, add an example from some class. For example from our test:\r\n\r\n```\r\n  ""qualifiedName"" : ""dev.dart.sample.Example"",\r\n  ""simpleName"" : ""Example"",\r\n  ""binaryName"" : ""dev.dart.sample.Example"",\r\n  ""internalName"" : ""dev/dart/sample/Example"",\r\n  ""parentName"" : null,\r\n  ""packageName"" : ""dev.dart.sample"",\r\n```\r\n\r\n->\r\n\r\n```java\r\n  /**\r\n   * Class name prefixed with the package name and a dot.\r\n   *\r\n   * For example `dev.dart.sample.Example`.\r\n   */\r\n  public String qualifiedName;\r\n\r\n  /**\r\n   * Class name.\r\n   *\r\n   * For example `Example`.\r\n   */\r\n  public String simpleName;\r\n```\r\n\r\nSomeone (you, me, or someone else) might have to edit this code later to add more features. So having some documentation would be nice. 😀 ', 'comment_created': datetime.datetime(2022, 8, 16, 11, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946683039, 'comment_body': 'Do we need all of these?\r\n\r\nIs binaryName always the same as qualifiedName?\r\nIs internalName always qualifiedName with slashes instead of dots?', 'comment_created': datetime.datetime(2022, 8, 16, 11, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946685620, 'comment_body': 'Agreed. Please remove this file and file GitHub issues with open todos.\r\n\r\nAlso, on the CLI help message, document the difference between the two backends.', 'comment_created': datetime.datetime(2022, 8, 16, 11, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946686343, 'comment_body': 'Document the CLI here.', 'comment_created': datetime.datetime(2022, 8, 16, 11, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946686995, 'comment_body': 'Document how to build this Java package here. (For if people want to use it manually instead of through the Dart package.)', 'comment_created': datetime.datetime(2022, 8, 16, 11, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946687528, 'comment_body': 'Document how to run tests here. (And add a test or two.)\r\n\r\nFeel free to not write an exhaustive unit test suite, but having some tests would be nice.', 'comment_created': datetime.datetime(2022, 8, 16, 11, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946689806, 'comment_body': ""Punctuation. Start with a capital, and with a dot.\r\n\r\n(Or remove the comment, the DeclKind is an enum, so it's self documenting what kinds it can be.)"", 'comment_created': datetime.datetime(2022, 8, 16, 12, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946689961, 'comment_body': ""Don't commit commented out code."", 'comment_created': datetime.datetime(2022, 8, 16, 12, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946691195, 'comment_body': 'File a bug on this repo, and link to the bug. (Idem other TODOs. Ctrl+f TODO and see if all have a link to a GitHub issue. 😄)\r\n\r\nReasoning for TODOs on GitHub instead of in code: it is easier to discuss alternative solutions and if we want to prioritize it on a GitHub issue. Also a GitHub issue has more space for elaborating (instead of leaving a 10 line TODO in the code).', 'comment_created': datetime.datetime(2022, 8, 16, 12, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946693195, 'comment_body': ""Punctuation\r\n\r\n```\r\n  // Could've made made it just a type hierarchy, but client code parsing JSON often needs\r\n  // to know the type beforehand.\r\n```"", 'comment_created': datetime.datetime(2022, 8, 16, 12, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946694149, 'comment_body': 'Should this extend SkipException?', 'comment_created': datetime.datetime(2022, 8, 16, 12, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946694228, 'comment_body': 'Should this extend SkipException?', 'comment_created': datetime.datetime(2022, 8, 16, 12, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946695213, 'comment_body': 'This is not self-documenting. What is not proper about it? Please file a GitHub issue.\r\n\r\nnit: punctuation.', 'comment_created': datetime.datetime(2022, 8, 16, 12, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946698459, 'comment_body': ""The method collect(List<T>, Function<T,R>) from the type ElementBuilders is never used locally.\r\n\r\nMaybe run a Java analyzer over the codebase.\r\nCan we also run a Java analyzer on the CI?\r\n\r\nHere's what my IDE is reporting: https://gist.github.com/dcharkes/77f3ec4c99f4a4f63faed385a1817c60"", 'comment_created': datetime.datetime(2022, 8, 16, 12, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946720044, 'comment_body': ""I toyed around a bit with ASM library (I had also written some ASM code while writing the prototype for this project), but it doesn't work yet. I will get to this option if & when ASM is implemented."", 'comment_created': datetime.datetime(2022, 8, 16, 12, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 946725237, 'comment_body': ""Qualified name is not binary name. Binary name will be unique, qualified name is not.\n\nThat said, I think I will do away with both qualName and internalName. BinaryName is enough.\n\nApiSummarizer's ElementBuilder parts are some of the highly boilerplate parts, so I just listed out all the properties I could see at once and wrote builders for them in flow. :P"", 'comment_created': datetime.datetime(2022, 8, 16, 12, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 946727798, 'comment_body': 'I think I can do away with SkipMethodException and SkipClassException, because realistically only handler will know to which extent to skip.', 'comment_created': datetime.datetime(2022, 8, 16, 12, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 946727909, 'comment_body': 'Then just fully remove the code from the PR for now.\r\n\r\n(Be sure to save it somewhere on a branch or something.)', 'comment_created': datetime.datetime(2022, 8, 16, 12, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 946728314, 'comment_body': 'Correct. At some point replaced it with `StreamUtils.mapped`.', 'comment_created': datetime.datetime(2022, 8, 16, 12, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 946729069, 'comment_body': 'Now that we have a generator, we can prune the JSON summary to only contain the things we use (or will likely use in the future).', 'comment_created': datetime.datetime(2022, 8, 16, 12, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 947524871, 'comment_body': ""I just thought that's neater than littering the test folder with subdirectories like lib/ and src/. Now what's the best place to keep it?"", 'comment_created': datetime.datetime(2022, 8, 17, 7, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 947552429, 'comment_body': 'If the example is useful for people as documentation, put it in a top-level example folder.', 'comment_created': datetime.datetime(2022, 8, 17, 7, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 948187715, 'comment_body': ""From java 9 there's a feature called modules which changes package layout if used. I am just forwarding this option to javadoc tool. It seems it is required to generate javadoc for stdlib but didnt figure out how."", 'comment_created': datetime.datetime(2022, 8, 17, 16, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 948511930, 'comment_body': 'Are there any dependencies that the user has to install? eg JDK/maven? If so, mention that here.', 'comment_created': datetime.datetime(2022, 8, 17, 22, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 948516266, 'comment_body': 'The format we typically use is `TODO(#15):`. Makes it easy to see that every TODO has a github issue', 'comment_created': datetime.datetime(2022, 8, 17, 23, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 948555365, 'comment_body': 'No. maven should take care of that.', 'comment_created': datetime.datetime(2022, 8, 18, 0, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 952398113, 'comment_body': ""Please remove the disasm subpackage, it is dead code as long as we don't support it. (Be sure to keep the code somewhere in a repo or a gist, in case we want to revive it.)"", 'comment_created': datetime.datetime(2022, 8, 23, 9, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952417596, 'comment_body': 'nit: comment newlines.', 'comment_created': datetime.datetime(2022, 8, 23, 10, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952418746, 'comment_body': 'nit: This type of comment does not communicate what can be improved. Either document what can be improved in a GitHub issue, or remove the comment.', 'comment_created': datetime.datetime(2022, 8, 23, 10, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952421610, 'comment_body': 'Punctuation, no period at the end of sentence.\n\nAlso, https://dart.dev/guides/language/effective-dart/documentation#prefer-starting-library-or-type-comments-with-noun-phrases\n\nFor example: ""Container of utility classes initialized from DocletEnvironment.""', 'comment_created': datetime.datetime(2022, 8, 23, 10, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952423105, 'comment_body': 'Please clean up all TODOs. Either (1) remove the TODO if it is not relevant, or (2) Make a GitHub issue with some background details.', 'comment_created': datetime.datetime(2022, 8, 23, 10, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952424129, 'comment_body': 'Consider adding a default case with throwing an exception, otherwise c.declKind will be uninitialized.', 'comment_created': datetime.datetime(2022, 8, 23, 10, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952425553, 'comment_body': 'https://dart.dev/guides/language/effective-dart/documentation#prefer-starting-library-or-type-comments-with-noun-phrases\n\n```java\n/**\n * A class or interface declaration.\n *\n * Here\'s an example for various kinds of names stored in this structure: simpleName : ""Example"",\n * binaryName : ""dev.dart.sample.Example"", parentName : null, packageName : ""dev.dart.sample"",\n */\n```', 'comment_created': datetime.datetime(2022, 8, 23, 10, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952428174, 'comment_body': 'Please remove this for now.', 'comment_created': datetime.datetime(2022, 8, 23, 10, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952431848, 'comment_body': 'This file is generated from a Java API with a license, so this generated file must have the same license as a derivative work, and be in a third_party folder.\n\n', 'comment_created': datetime.datetime(2022, 8, 23, 10, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952432237, 'comment_body': 'Sweet! :D', 'comment_created': datetime.datetime(2022, 8, 23, 10, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952434615, 'comment_body': 'Is this file generated? Then\n* add a header similar to the generated file, and\n* this file should have the copyright of the file it was generated from.', 'comment_created': datetime.datetime(2022, 8, 23, 10, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952435045, 'comment_body': 'Is this file generated? Then add a comment it is generated by JNIgen.', 'comment_created': datetime.datetime(2022, 8, 23, 10, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952436472, 'comment_body': ""// Compares 2 hierarchies, with and without the prefix 'test_'.\n\nhttps://dart.dev/guides/language/effective-dart/documentation#prefer-starting-function-or-method-comments-with-third-person-verbs\n\nCompare -> Compares"", 'comment_created': datetime.datetime(2022, 8, 23, 10, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 952523453, 'comment_body': ""It's actually working. I will add an example when I add examples to the repo."", 'comment_created': datetime.datetime(2022, 8, 23, 12, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 952527417, 'comment_body': 'Can we merge it in a follow up PR with those examples together? That makes this easier to review.', 'comment_created': datetime.datetime(2022, 8, 23, 12, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953605922, 'comment_body': 'More TODOs without GitHub issues.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953606091, 'comment_body': 'More TODOs without GitHub issues.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953620481, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953625898, 'comment_body': ""We don't have any Dart files in here, do we?"", 'comment_created': datetime.datetime(2022, 8, 24, 10, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953629358, 'comment_body': 'This needs better documentation.\r\n\r\n/// Deletes the JNI reference to the backing `this` JlObject.\r\n///\r\n/// Without deleting the JNI reference, the Java object would be forever kept alive in the Java heap.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953633204, 'comment_body': 'Move these comments to on the classes.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#prefer-starting-library-or-type-comments-with-noun-phrases\r\n\r\nMaybe\r\n\r\n/// A Dart wrapper for a JNI reference.\r\n///\r\n/// A base class for classes generated by jni_gen.\r\n\r\nand\r\n\r\n/// A Dart wrapper for a JNI String reference.\r\n///\r\n/// A base class for classes generated by jni_gen.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953633650, 'comment_body': 'Prefer ///\r\n\r\nand start sentence with capital.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953635004, 'comment_body': ""> test/simple_package/**.dart\r\n\r\nShouldn't those files be valid Dart?"", 'comment_created': datetime.datetime(2022, 8, 24, 10, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953635557, 'comment_body': 'They are not vendored anymore.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953637286, 'comment_body': 'if -> If', 'comment_created': datetime.datetime(2022, 8, 24, 10, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953637521, 'comment_body': 'Prefer ending comments with a period.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953639519, 'comment_body': 'Prefer using making complete sentences in comments.\r\n\r\n// If normal instance method: jobject self.\r\n\r\nOr, make the code self documenting.\r\n* if: is obvious from the if statement on the next line\r\n* hasSelfParam already communicates that it is an instance method. (You could consider renaming `hasSelfParam` to `isInstanceMethod`.)\r\nThen no comment is needed.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953639895, 'comment_body': '// ""self"" is ...\r\n// ... named ""self"".\r\n\r\n(or with \'self\')', 'comment_created': datetime.datetime(2022, 8, 24, 10, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953640502, 'comment_body': 'Comment makes more sense one line below.\r\n\r\nPunctuation.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953640672, 'comment_body': 'Add punctuation.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953641076, 'comment_body': '/// Returns the JNI signature of the method.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953641475, 'comment_body': 'punctuation, also next comments.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953641627, 'comment_body': 'This comment is not needed I think.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953642439, 'comment_body': 'To bad string interpolation cannot be done as consts. 😄 ', 'comment_created': datetime.datetime(2022, 8, 24, 10, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953642622, 'comment_body': 'Can it be final and not late?', 'comment_created': datetime.datetime(2022, 8, 24, 10, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953643480, 'comment_body': 'Remove comment, or make it communicate something.\r\n\r\nE.g. a snippet of what the code will look like. (If that would be useful here.)', 'comment_created': datetime.datetime(2022, 8, 24, 10, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953643684, 'comment_body': 'Punctuation.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953644883, 'comment_body': '/// Type for FFI Function signature.\r\n\r\nYou could consider making it an extension method on TypeUsage.\r\n\r\n\r\n```dart\r\nextension TypeUsageExt on TypeUsage {\r\n  String get dartFfiType {\r\n     // ...\r\n  }\r\n}', 'comment_created': datetime.datetime(2022, 8, 24, 10, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953645946, 'comment_body': '/// Preprocessor for tasks common to both generators.\r\n///\r\n/// ...\r\n\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#prefer-starting-library-or-type-comments-with-noun-phrases', 'comment_created': datetime.datetime(2022, 8, 24, 10, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953646869, 'comment_body': '// -> ///\r\n\r\nreturn -> Returns\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#prefer-starting-function-or-method-comments-with-third-person-verbs\r\n\r\ntype -> type.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#prefer-starting-function-or-method-comments-with-third-person-verbs', 'comment_created': datetime.datetime(2022, 8, 24, 10, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953647159, 'comment_body': '// -> ///\r\n\r\nreturns -> Returns\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#prefer-starting-function-or-method-comments-with-third-person-verbs\r\n\r\nfound -> found.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#prefer-starting-function-or-method-comments-with-third-person-verbs\r\n\r\nnull -> `null`', 'comment_created': datetime.datetime(2022, 8, 24, 10, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953649054, 'comment_body': '/// Methods and properties already defined by dart JlObject base class.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953649550, 'comment_body': 'Did you mean\r\n\r\n/// Empty if the declaration is not an ENUM.\r\n\r\n?', 'comment_created': datetime.datetime(2022, 8, 24, 10, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953649753, 'comment_body': 'https://dart.dev/guides/language/effective-dart/documentation#do-format-comments-like-sentences', 'comment_created': datetime.datetime(2022, 8, 24, 10, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953649796, 'comment_body': 'https://dart.dev/guides/language/effective-dart/documentation#do-format-comments-like-sentences', 'comment_created': datetime.datetime(2022, 8, 24, 10, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953650010, 'comment_body': 'https://dart.dev/guides/language/effective-dart/documentation#do-format-comments-like-sentences', 'comment_created': datetime.datetime(2022, 8, 24, 10, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953650578, 'comment_body': 'Process.run -> `Process.run`.', 'comment_created': datetime.datetime(2022, 8, 24, 10, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953651038, 'comment_body': ""😆  beautiful 🚀 \r\n\r\nConsider instead using multi-line comments which would capture the indentation and newlines.\r\n\r\n```dart\r\nfinal foo = '''\r\nthis:\r\n  will:\r\n    be:\r\n      indented\r\n''';\r\n```"", 'comment_created': datetime.datetime(2022, 8, 24, 10, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953652870, 'comment_body': 'https://dart.dev/guides/language/effective-dart/documentation#prefer-starting-library-or-type-comments-with-noun-phrases\r\n\r\n/// Maven dependency with group ID, artifact ID and version. ', 'comment_created': datetime.datetime(2022, 8, 24, 11, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953653404, 'comment_body': 'new line in between single line summary and example.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#do-start-doc-comments-with-a-single-sentence-summary', 'comment_created': datetime.datetime(2022, 8, 24, 11, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953653619, 'comment_body': 'names -> names.', 'comment_created': datetime.datetime(2022, 8, 24, 11, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953653748, 'comment_body': 'keyword -> keyword.', 'comment_created': datetime.datetime(2022, 8, 24, 11, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953654464, 'comment_body': 'Maybe\r\n\r\n/// If name is a keyword, postfixes 0.\r\n///\r\n/// Examples:\r\n/// class -> class0\r\n/// foo -> foo', 'comment_created': datetime.datetime(2022, 8, 24, 11, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953656074, 'comment_body': 'Maybe\r\n\r\n/// Writer of generated dart files. \r\n///\r\n/// Writes dart files to specified directory.\r\n/// The name of the files themselves is decided by package name.', 'comment_created': datetime.datetime(2022, 8, 24, 11, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953656413, 'comment_body': '👍 ', 'comment_created': datetime.datetime(2022, 8, 24, 11, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953656991, 'comment_body': '?', 'comment_created': datetime.datetime(2022, 8, 24, 11, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953657186, 'comment_body': 'these -> These\r\n\r\nlibrary -> library.', 'comment_created': datetime.datetime(2022, 8, 24, 11, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953657416, 'comment_body': 'https://dart.dev/guides/language/effective-dart/documentation#do-format-comments-like-sentences', 'comment_created': datetime.datetime(2022, 8, 24, 11, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953658849, 'comment_body': ""Maybe remove these comments.\r\n\r\nUnless you'd like to signify why these language constructs need to stay. (E.g. Static fields for testing JNI bindings to static fields.) But I'd say it is obvious from the context that this a test file that should not be modified to remove the unused things. (We have checked in the expected generated bindings, the test would start failing anyway.)"", 'comment_created': datetime.datetime(2022, 8, 24, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 953689160, 'comment_body': 'I had another branch in which ffigen_patch_jni is vendored but not added to git yet. So it will remain in working tree and be analyzed.. It is a stopgap measure to prevent that..', 'comment_created': datetime.datetime(2022, 8, 24, 11, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953708547, 'comment_body': ""Removed comment.\r\n\r\nIn case of constructor, there's no self param but it's actually an instance method. (Impl detail: see https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#NewObject) So hasSelfParam is separate from static / instance check."", 'comment_created': datetime.datetime(2022, 8, 24, 12, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953712429, 'comment_body': ""Good catch, I once had FFI import prefix in options that's why it remained as late."", 'comment_created': datetime.datetime(2022, 8, 24, 12, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953713538, 'comment_body': 'Lesson learned. I used to write the layout / section as comments before implementation, in a top-down approach. But forgot to delete the comments.', 'comment_created': datetime.datetime(2022, 8, 24, 12, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953715700, 'comment_body': ""I think it can remain along with other methods in binding generator class, because 1) It's not used elsewhere, 2) Future changes may make it require some more context eg: from options."", 'comment_created': datetime.datetime(2022, 8, 24, 12, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953716249, 'comment_body': 'Again, lesson learned. I used to be sloppy with comments on internal APIs.', 'comment_created': datetime.datetime(2022, 8, 24, 12, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953733386, 'comment_body': ""Doesn't that require string flowing to the left of variable declaration? If so, doesn't look that neat inside a method?"", 'comment_created': datetime.datetime(2022, 8, 24, 12, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953735298, 'comment_body': ""oops I knew this. But it's taking me time to internalize these rules haha."", 'comment_created': datetime.datetime(2022, 8, 24, 12, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953752913, 'comment_body': ""Updated comment. These 2 are function pointer variables initialized by dart code to concrete implementations in `dartjni` base library.\r\n\r\nThis is because\r\n\r\n* we don't know at compile time where in build artifacts folder `dartjni.so` exists -> No compile time linking.\r\n* Default dlopen is RTLD_LOCAL on linux and android at least, thus the symbols are not automatically initialized from previously DLOpen'd library.\r\n\r\nI am working around this by having dart code set whatever we need to lookup. I think using `dlsym` in C will become more complex and also probably less portable."", 'comment_created': datetime.datetime(2022, 8, 24, 12, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 953786105, 'comment_body': '👍 \r\n\r\nI was just confused by the comment, thanks for clarifying.', 'comment_created': datetime.datetime(2022, 8, 24, 13, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}]","[{'commit_sha': '2881082afed50dd1aac426744d5ceef782bf6310', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fea6d59c716fe6aef50c36fea6f17b2715a8be9', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52b6270eadad9cdd9270020c02c5ef21e5af99de', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289d0cadc950b9de1d79fa4f7953b43d0b23d913', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e352af9a65eff1b244ee4397906ef4d2930ad73', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a17052c5f6d208ee74f655801454a7ab0bb42a87', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8300e27086e5a020d9c0fa6210f71d06703983', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '965645065e45e08351daa6007308a6917eb71d11', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c1812a66c566228aed89cd7f77b41c3e5b9ed2', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b95f5147bca187234137864bbba5db9c3b3b687', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26cb7efe62582e1aea2797094915f69e4bde654b', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08fb877cb07fb3947c13279521abd70a49e5be5a', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7157cc0b8eaf1fcd1ae237bbdeb6e3d957edf6de', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63c34bef0529705c3e3e1fddd26df940aa6f4bd3', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b17cb895305de6b6d963a8c9b4bb30956a5a237', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91533c2d292ff057ce4d9fc08d6f4484c62286d5', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c02c06cf3cb62ae1b44226bbbd75ff2c3adf6b82', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '898521de0631a527e81dad0759d45baa24126ce9', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10a905d725445f25ac7dcce89b431378a6f89545', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a072f86819366f4d6dc9c3b3e4f2f97d9dfcb3a', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfcb5e8b6733240442f29870e1941af3bcc0416e', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac0802112a960ef13ca6ac0ed64b745a6ef4d36e', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7c9d958be8b1dbd2c97a76ad82ea7e162e42e59', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71d865d2e0c1cd590bef642336584263449c4f12', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eeb3237ae22f306c5f75ea88113089e3047184d', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0576ad7ce800dba9c32fad7df68be0c3c31163f', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '622a7c5a0266e1d9b0dcad0f73a9596d926906c9', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6680f4154a9fd00adb34bd62450dd02c23c6ffa', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc5e59cf9a8e2ce49520c8a97cdd7a964628892', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf0887e7d0a4fe93d58f5d4da0e901c9aa6e2ce7', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '706d5c2a6841e5cbb69c793a6298bf0937875fcf', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b8373629670b0461105e1ed074fc402799deef', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}]",Mahesh Hegde,46179734,,User,,34,,33,34
1041149172,Jni_gen Examples,"Add 2 examples under `jni_gen/examples`

#### `in_app_java`
 It's an example on how to write some custom java code in a flutter app or plugin package, and call that using `jnigen`.

Current caveat is we can't get the gradle classpath until one build is executed, which leads to somewhat unpleasant user experience.

More info dart-lang/native#793 

#### `pdfbox_plugin`
This is an example how to generate bindings for an existing java library using maven. Works on both dart standalone and as flutter plugin. I have not committed generated code because that's around 50K lines, but it should generate and build in CI.

dart_example contains a command line app which prints info about PDF file. example/ contains a flutter linux app that does the same but with a file manager UI.",True,36,https://api.github.com/repos/dart-archive/jnigen/pulls/36,https://github.com/dart-archive/jnigen/pull/36,closed,10986,59,130,22,16,42,0,0,[],2022-08-30 15:30:05+00:00,2022-09-02 14:21:30+00:00,255085.0,"2 days, 22:51:25","[{'comment_id': 958741393, 'comment_body': 'Delete this file?', 'comment_created': datetime.datetime(2022, 8, 30, 17, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 958741589, 'comment_body': 'Delete this file?', 'comment_created': datetime.datetime(2022, 8, 30, 17, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 958744036, 'comment_body': ""I'm a bit confused about this directory structure. Why is `dart_example` a child of `pdfbox_plugin`, and not the other way around? If it's just because you have 2 examples that depend on it, `dart_example` and `example`, then you could just make the flutter `example` the parent, put `pdfbox_plugin` inside example, and just put `dart_example/bin/pdf_info.dart` the `example/bin` (since it's a standalone script)."", 'comment_created': datetime.datetime(2022, 8, 30, 17, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 958747141, 'comment_body': 'Delete these lines of commented out code, here and below.', 'comment_created': datetime.datetime(2022, 8, 30, 17, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 958758986, 'comment_body': 'Where is this class used? Why is it added in this PR?', 'comment_created': datetime.datetime(2022, 8, 30, 17, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'liamappelbe', 'type': 'User'}, {'comment_id': 959060038, 'comment_body': ""`dart_example` is a standalone dart project example without flutter dependency, `example` is a flutter GUI app example. There's also one more difference that one requires to run jni:setup and other does not. Should I merge them both?"", 'comment_created': datetime.datetime(2022, 8, 31, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 959060683, 'comment_body': 'Sorry I mishandled a merge conflict. This was renamed to YamlReader in an earlier commit. The old file got reintroduced in a local merge. Deleting it.', 'comment_created': datetime.datetime(2022, 8, 31, 1, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 959342646, 'comment_body': '`bin/pdf_info.dart` ?', 'comment_created': datetime.datetime(2022, 8, 31, 9, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959346782, 'comment_body': ""```\r\n$ dart pub get\r\nResolving dependencies... \r\nBecause pdfbox_plugin_example depends on flutter_test from sdk which doesn't exist (the Flutter SDK is not available), version solving failed.\r\n\r\nFlutter users should run `flutter pub get` instead of `dart pub get`.\r\n```"", 'comment_created': datetime.datetime(2022, 8, 31, 9, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959347082, 'comment_body': ""```\r\n$ dart pub get\r\nResolving dependencies... \r\nBecause pdfbox_plugin_example depends on flutter_test from sdk which doesn't exist (the Flutter SDK is not available), version solving failed.\r\n\r\nFlutter users should run `flutter pub get` instead of `dart pub get`.\r\n```"", 'comment_created': datetime.datetime(2022, 8, 31, 9, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959347557, 'comment_body': ""```\r\n$ dart pub get\r\nResolving dependencies... \r\nBecause pdfbox_plugin_example depends on flutter_test from sdk which doesn't exist (the Flutter SDK is not available), version solving failed.\r\n\r\nFlutter users should run `flutter pub get` instead of `dart pub get`.\r\n```"", 'comment_created': datetime.datetime(2022, 8, 31, 9, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959348108, 'comment_body': ""```\r\n$ dart pub get\r\nResolving dependencies... \r\nBecause pdfbox_plugin_example depends on flutter from sdk which doesn't exist (the Flutter SDK is not available), version solving failed.\r\n\r\nFlutter users should run `flutter pub get` instead of `dart pub get`.\r\n```"", 'comment_created': datetime.datetime(2022, 8, 31, 9, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959348456, 'comment_body': ""```\r\n$ dart pub get\r\nResolving dependencies... \r\nBecause pdfbox_plugin_example depends on flutter from sdk which doesn't exist (the Flutter SDK is not available), version solving failed.\r\n\r\nFlutter users should run `flutter pub get` instead of `dart pub get`.\r\n```\r\n\r\nI think the Dart app should be in a separate folder with a separate pubspec.yaml, because the Flutter app doesn't build with out the `flutter:` dependency, and the Dart app can't run with the `flutter:` dependency."", 'comment_created': datetime.datetime(2022, 8, 31, 9, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959355991, 'comment_body': '```\r\n$ jni:setup && jni:setup -p pdfbox_plugin\r\n-bash: jni:setup: command not found\r\n```\r\n\r\nYou mean:\r\n\r\n\r\n```\r\ndart run jni:setup && dart run jni:setup -p pdfbox_plugin\r\n```', 'comment_created': datetime.datetime(2022, 8, 31, 9, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959361889, 'comment_body': 'Please make sure the name is the same as the folder.', 'comment_created': datetime.datetime(2022, 8, 31, 9, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959364673, 'comment_body': ""Maybe just add the link to the language spec here as well:\r\n\r\n```bash\r\nwget 'https://dart.dev/guides/language/specifications/DartLangSpec-v2.2.pdf'\r\ndart run bin/pdf_info.dart DartLangSpec-v2.2.pdf\r\n```\r\n\r\nAnd consider using `dart run pdfbox_plugin_example:pdf_info DartLangSpec-v2.2.pdf`. (If you want to provide the full path it's more common to leave `run` out: `dart bin/pdf_info.dart DartLangSpec-v2.2.pdf`.)\r\n\r\nAnd rename the package to `pdfbox_example` instead of `pdfbox_plugin_example` so that it is consistent with the folder name.\r\n"", 'comment_created': datetime.datetime(2022, 8, 31, 9, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959375477, 'comment_body': '@eernstg The spec is serving many purposes! 🚀 (In this case testing our Java interop by using a Java PDF reading library. 😄)\r\n\r\nNext step, make Dart sentient, so that it can actually read the contents of its own spec. 😆 🤯 ', 'comment_created': datetime.datetime(2022, 8, 31, 9, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959381986, 'comment_body': 'The jni_gen/examples folder needs a README.md with the documentation that is on this PR.\r\n\r\n* What both examples do.\r\n* Links to the examples.\r\n* Where the run on.', 'comment_created': datetime.datetime(2022, 8, 31, 9, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959382765, 'comment_body': 'Make it a happy smiley. `:-)`', 'comment_created': datetime.datetime(2022, 8, 31, 9, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959397321, 'comment_body': 'On Android emulator:\r\n\r\n```\r\nW/DartWorker( 3136): type=1400 audit(0.0:92): avc: denied { read } for name=""/"" dev=""dm-4"" ino=2 scontext=u:r:untrusted_app:s0:c125,c256,c512,c768 tcontext=u:object_r:rootfs:s0 tclass=dir permissive=0 app=com.example.pdfbox_plugin_example\r\nE/flutter ( 3136): [ERROR:flutter/lib/ui/ui_dart_state.cc(198)] Unhandled Exception: FileSystemException: Directory listing failed, path = \'./\' (OS Error: Permission denied, errno = 13)\r\nE/flutter ( 3136): \r\nThe Flutter DevTools debugger and profiler on Android SDK built for x86 is available at:\r\n```\r\n\r\nOn Flutter desktop:\r\n\r\n```\r\n$ flutter run -d linux\r\nLaunching lib/main.dart on Linux in debug mode...\r\nBuilding Linux application...                                           \r\n[ERROR:flutter/lib/ui/ui_dart_state.cc(198)] Unhandled Exception: FileSystemException: Directory listing failed, path = \'../mvn_jar/\' (OS Error: No such file or directory, errno = 2)\r\n#0      _Directory._fillWithDirectoryListing (dart:io-patch/directory_patch.dart:42:24)\r\n#1      _Directory.listSync (dart:io/directory_impl.dart:243:5)\r\n```\r\n\r\nShould it maybe have a file dialog so you can browse to a single PDF file instead?\r\n', 'comment_created': datetime.datetime(2022, 8, 31, 9, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959409504, 'comment_body': ""I think you have to run `flutter pub get` itself, since I moved the pdf_info.dart as standalone script in flutter example, according to Liam's suggestion."", 'comment_created': datetime.datetime(2022, 8, 31, 10, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 959411864, 'comment_body': 'It is _not_ a Dart standalone script, because it requires dependencies and therefore a `pubspec.yaml`.\r\n\r\nMerging means that the Dart example cannot be run anymore by users with just the Dart SDK without Flutter. So please unmerge them.', 'comment_created': datetime.datetime(2022, 8, 31, 10, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959412164, 'comment_body': ""(Replied on Liam's suggestion.)"", 'comment_created': datetime.datetime(2022, 8, 31, 10, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959414373, 'comment_body': 'Editor gets confused. Should I put an actual unicode smiley so that dart is millennial-compatible? :P', 'comment_created': datetime.datetime(2022, 8, 31, 10, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 959418127, 'comment_body': ""Let's keep it millennial compatible, then at least it will always work =D"", 'comment_created': datetime.datetime(2022, 8, 31, 10, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959419576, 'comment_body': ""It's not really supposed to run on android right now. (Have to add proguard rules to not chop off PDFBox classes but more importantly, file access on android changed a lot recently, just didn't want to deal with that.).\r\n\r\nOn linux, I forgot to test it after moving folders as Liam suggested. It should open 'pdfbox_plugin/mvn_jar' now."", 'comment_created': datetime.datetime(2022, 8, 31, 10, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 959421503, 'comment_body': ""Make the app not throw an exception on Android but display a message in the UI that it's currently only supported on Flutter desktop."", 'comment_created': datetime.datetime(2022, 8, 31, 10, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 959422026, 'comment_body': 'Alright, reverting the commit.', 'comment_created': datetime.datetime(2022, 8, 31, 10, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 960299587, 'comment_body': ':smile:', 'comment_created': datetime.datetime(2022, 9, 1, 7, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'eernstg', 'type': 'User'}, {'comment_id': 960810301, 'comment_body': ""Give a reasonable error message here (when users jump straight to the readme in this folder and follow the steps they miss the steps from the above readme).\r\n\r\n```\r\njni_gen/examples/pdfbox_plugin/dart_example$ dart run pdf_info\r\nBuilding package executable... \r\nBuilt pdf_info:pdf_info.\r\nUnhandled exception:\r\nFileSystemException: Directory listing failed, path = '../mvn_jar/' (OS Error: No such file or directory, errno = 2)\r\n```"", 'comment_created': datetime.datetime(2022, 9, 1, 15, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 960815321, 'comment_body': ""```\r\njni_gen/examples/pdfbox_plugin$ dart run jni_gen --config jnigen.yaml\r\nResolving dependencies in /usr/local/google/home/dacoharkes/src/dart-lang/jni_gen/jni_gen/examples/pdfbox_plugin... \r\nBecause pdfbox_plugin depends on flutter_test from sdk which doesn't exist (the Flutter SDK is not available), version solving failed.\r\n```"", 'comment_created': datetime.datetime(2022, 9, 1, 15, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 960824430, 'comment_body': 'Flutter project -> Flutter Android plugin', 'comment_created': datetime.datetime(2022, 9, 1, 15, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 960824857, 'comment_body': 'Flutter Linux and Standalone -> Flutter Desktop and Dart standalone on Linux', 'comment_created': datetime.datetime(2022, 9, 1, 15, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 960826144, 'comment_body': 'mvnDl -> mavenDownloads', 'comment_created': datetime.datetime(2022, 9, 1, 15, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 960847783, 'comment_body': ""No it's flutter app. Not plugin. See #42 once, it details some usage modes.. For android plugin mode it's hard to get gradle dependency paths, unless you depend only on core libraries and no androidx."", 'comment_created': datetime.datetime(2022, 9, 1, 16, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 960853733, 'comment_body': ""I can't realistically test this because I have flutter installed also. I guess.\r\n\r\nI will try removing flutter_test.\r\n\r\nBtw can you post any clear examples on how to create a hybrid plugin? I am just trying to comment out flutter-specific lines now."", 'comment_created': datetime.datetime(2022, 9, 1, 16, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 960856517, 'comment_body': ""is `plugin_platform_interface` also flutter-specific? I think it's added by plugin_ffi template."", 'comment_created': datetime.datetime(2022, 9, 1, 16, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 960913159, 'comment_body': 'Just replacing `flutter_test:` with `test: any` works.', 'comment_created': datetime.datetime(2022, 9, 1, 17, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 960914152, 'comment_body': ""Ah you're right 👌  I was assuming the FFI plugin layout when there's an FFI plugin and then an app in the `example` subfolder."", 'comment_created': datetime.datetime(2022, 9, 1, 17, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 960914406, 'comment_body': ""Let's call it a Flutter application then."", 'comment_created': datetime.datetime(2022, 9, 1, 17, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 961389903, 'comment_body': 'Can we make it a millennial compatible happy smiley though?', 'comment_created': datetime.datetime(2022, 9, 2, 7, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 961400927, 'comment_body': 'Thanks! 😄 ', 'comment_created': datetime.datetime(2022, 9, 2, 8, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}]","[{'commit_sha': '93e0a5302252c7e6c64744dfc3fc571db05fcccf', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a205a70e7d7b5e02ca2b72a5dcaa56084448155', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19fa90f279d356f154137daf6342b19bd2011a66', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84902d13b260dd678545fd181c01d488b03c066b', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f118d81e3171082cc68b370677140758a6748e8', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59249a4a0860d33aa4742194168dec45c65f61f5', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2021db333f44335248b110e7be8049e20bcafbc', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9d5c89fff654e1a05e240a5f6dc17fc804b9ba', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bb635cbcd9743210d457316fcdd5bf5347f3d5e', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce50d7bd72ae1ed831989aebffea4c32a1299373', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c72ceb3c34a03e040f34d9a2cfb4772f64cae759', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760268b5c676172b20571cb01106c1a733271824', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d4a9d7821d0586ce2129a31c58708a616289b5', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de652c4bb7e65052b62c57e479f1363dca9bd093', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '581386c90744ee353747ec2f9fc2a0cc7f0f5420', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852659b189bef9797883e76b9d8c67aff5d5bcef', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5765ea91954dea768422a7b2e49cef705b5980a9', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce9509bba4f24a08936e28cdfe53b09692550ec7', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3980026a643a6e24b905b59dce31384df3de7763', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40ddaad390953afeca70227cf434569bcf349cca', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb012da7366ba858b848b25cc9231605f5ef77d6', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c0bf0eb5c9dec0de3ccba29bde652fe049b75ef', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}]",Mahesh Hegde,46179734,,User,,34,,33,34
1045474318,Android plugin example,"So far only had in_app_java which has Java code in flutter app itself. Added another example how to create reusable android plugin using custom java code, and configuration option required for that.

**Additions to jni_gen config:** We can't directly build a plugin project with gradle, so provide path to example project in `jnigen.yaml` which is instead used to resolve gradle dependencies.

Caveat applies that the example must have been built before in release mode, eg: using `flutter build apk`, same as in case of `in_app_java`.

I have a local branch in which I am renaming jni_gen to jnigen, (90% done renaming). This branch precedes that branch. So we can merge that soon after this PR.

-----------------------------------------------

This leaves me 2 usage modes to cover, possibly by a 0.2 or 0.3 release:

#### 3rd party java library (eg PDFBox) but usable on android
I almost got PDFBox compiled, but in current state of android 11 scoped storage, I will need to add some more in-app java bindings to example, which will complicate the entire thing for user looking at the example. So maybe find some other library for this.

Conceptually, the plugin remains intact. It's imported by the android project. Android app project should add the respective maven dependency strings to it's `app.gradle` and list the class names in `proguard-rules.pro`. Sometimes when there is `DuplicatePlatformClasses` gradle error, you have to selectively exclude the problematic modules in gradle.

#### Android libraries bindings
I have a content_plugin bindings sample on personal repo. But since Android ecosystem moved to AndroidX, core libraries shipped with SDK are almost never sufficient. So figure out a standard way to get source JARs with gradle. Maven was much much easier.

In the meantime, it's entirely possible to generate bindings for classes in `android.*` libraries with some effort, you have to unpack the stubs-src JAR shipped with SDK and provide it as source path. It will be a small commit to add that as a configuration option too, but that's not a priority now.

I am filling an issue for usage modes later.",True,46,https://api.github.com/repos/dart-archive/jnigen/pulls/46,https://github.com/dart-archive/jnigen/pull/46,closed,1188,45,52,4,3,11,0,0,[],2022-09-03 13:07:55+00:00,2022-09-05 09:13:25+00:00,158730.0,"1 day, 20:05:30","[{'comment_id': 962555463, 'comment_body': 'This plugin demonstrates ...\r\n\r\n(grammar)', 'comment_created': datetime.datetime(2022, 9, 5, 7, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 962573303, 'comment_body': 'nit: . at end of sentence.', 'comment_created': datetime.datetime(2022, 9, 5, 7, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 962573667, 'comment_body': 'ANDROID_SDK_ROOT -> `ANDROID_SDK_ROOT` (in back ticks)', 'comment_created': datetime.datetime(2022, 9, 5, 7, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 962575111, 'comment_body': 'if -> If', 'comment_created': datetime.datetime(2022, 9, 5, 7, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 962575490, 'comment_body': 'Nice documentation! 😄 ', 'comment_created': datetime.datetime(2022, 9, 5, 7, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 962576487, 'comment_body': 'Nice trick with overriding the yaml values. 👍 ', 'comment_created': datetime.datetime(2022, 9, 5, 7, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 962578242, 'comment_body': 'Can we call it `show_notification_plugin` or `notification_plugin` instead of `notif_plugin`? And also the folder name.\r\n\r\nMe asking a rename again. 🙈  (When in doubt, never shorten names.)', 'comment_created': datetime.datetime(2022, 9, 5, 7, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 962579137, 'comment_body': 'Remove `i`?', 'comment_created': datetime.datetime(2022, 9, 5, 7, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 962586705, 'comment_body': ""```dart\r\n      throw Exception('\\n\\ngradle exited with exit code ${procRes.exitCode}\\n'\r\n          'This can be related to a known issue with gradle. '\r\n          'Please run `flutter build apk` and try again\\n');\r\n```\r\n\r\n->\r\n\r\n```dart\r\n      throw Exception('\\n\\ngradle exited with exit code ${procRes.exitCode}\\n'\r\n          'This can be related to a known issue with gradle. '\r\n          'Please run `flutter build apk` in $androidProject and try again\\n');\r\n```"", 'comment_created': datetime.datetime(2022, 9, 5, 7, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 962598030, 'comment_body': 'my_unix_stockholm_syndrome', 'comment_created': datetime.datetime(2022, 9, 5, 7, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}, {'comment_id': 962598768, 'comment_body': ""It's used as notification ID, so that each notification will be distinct."", 'comment_created': datetime.datetime(2022, 9, 5, 7, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mahesh-hegde', 'type': 'User'}]","[{'commit_sha': '4bc280a5f69f65b08e8759107d55858b2647d3f1', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0176dd0f7a8902b1b584894b94f835bca3008e0', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17cb5dc5ab08561ec86e6ca8ef7c796e277d4f6', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e12fbc46ea1496b7b8b4c939929d0e2b4650acd', 'committer_username': 'mahesh-hegde', 'committer_name': 'Mahesh Hegde', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 27, 4, 21, 15, tzinfo=datetime.timezone.utc)}]",Mahesh Hegde,46179734,,User,,34,,33,34

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
498241074,jnigen,dart-archive/jnigen,Dart,12,153,27,11,143,0,2,0,"[{'id': 1473336184, 'number': 353, 'closed': datetime.datetime(2023, 8, 18, 12, 36, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 13, 11, 5, 45, tzinfo=datetime.timezone.utc), 'time_taken': 437453.0, 'time_delta': '5 days, 1:30:53', 'additions': 1646, 'deletions': 63, 'state': 'closed'}, {'id': 1416532420, 'number': 312, 'closed': datetime.datetime(2023, 7, 5, 20, 18, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 2, 2, 40, 19, tzinfo=datetime.timezone.utc), 'time_taken': 322687.0, 'time_delta': '3 days, 17:38:07', 'additions': 1326, 'deletions': 160, 'state': 'closed'}, {'id': 1349497190, 'number': 279, 'closed': datetime.datetime(2023, 5, 16, 8, 21, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 13, 10, 50, 13, tzinfo=datetime.timezone.utc), 'time_taken': 250281.0, 'time_delta': '2 days, 21:31:21', 'additions': 62, 'deletions': 9, 'state': 'closed'}, {'id': 1341022262, 'number': 272, 'closed': datetime.datetime(2023, 5, 11, 12, 41, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 7, 7, 8, 48, tzinfo=datetime.timezone.utc), 'time_taken': 365558.0, 'time_delta': '4 days, 5:32:38', 'additions': 251, 'deletions': 146, 'state': 'closed'}, {'id': 1332782417, 'number': 264, 'closed': datetime.datetime(2023, 5, 2, 9, 11, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 29, 14, 44, 59, tzinfo=datetime.timezone.utc), 'time_taken': 239210.0, 'time_delta': '2 days, 18:26:50', 'additions': 21544, 'deletions': 1578, 'state': 'closed'}, {'id': 1323130714, 'number': 259, 'closed': datetime.datetime(2023, 4, 25, 8, 41, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 21, 13, 56, 32, tzinfo=datetime.timezone.utc), 'time_taken': 326690.0, 'time_delta': '3 days, 18:44:50', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 1321785051, 'number': 257, 'closed': datetime.datetime(2023, 4, 21, 8, 27, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 20, 16, 19, 8, tzinfo=datetime.timezone.utc), 'time_taken': 58117.0, 'time_delta': '16:08:37', 'additions': 211, 'deletions': 76, 'state': 'closed'}, {'id': 1320242041, 'number': 254, 'closed': datetime.datetime(2023, 4, 20, 11, 38, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 19, 16, 58, 57, tzinfo=datetime.timezone.utc), 'time_taken': 67191.0, 'time_delta': '18:39:51', 'additions': 1145, 'deletions': 2362, 'state': 'closed'}, {'id': 1318683724, 'number': 253, 'closed': datetime.datetime(2023, 4, 18, 17, 18, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 18, 16, 53, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1494.0, 'time_delta': '0:24:54', 'additions': 29, 'deletions': 12, 'state': 'closed'}, {'id': 1315042575, 'number': 246, 'closed': datetime.datetime(2023, 4, 18, 15, 41, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 15, 11, 35, 4, tzinfo=datetime.timezone.utc), 'time_taken': 273962.0, 'time_delta': '3 days, 4:06:02', 'additions': 12002, 'deletions': 17198, 'state': 'closed'}, {'id': 1306408659, 'number': 237, 'closed': datetime.datetime(2023, 4, 10, 16, 25, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 8, 5, 33, 37, tzinfo=datetime.timezone.utc), 'time_taken': 211891.0, 'time_delta': '2 days, 10:51:31', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1305133440, 'number': 235, 'closed': datetime.datetime(2023, 4, 12, 14, 21, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 18, 34, 43, tzinfo=datetime.timezone.utc), 'time_taken': 503181.0, 'time_delta': '5 days, 19:46:21', 'additions': 51, 'deletions': 35, 'state': 'closed'}, {'id': 1304780129, 'number': 234, 'closed': datetime.datetime(2023, 4, 20, 14, 29, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 13, 43, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1212376.0, 'time_delta': '14 days, 0:46:16', 'additions': 13, 'deletions': 13, 'state': 'closed'}, {'id': 1303490625, 'number': 231, 'closed': datetime.datetime(2023, 4, 6, 10, 18, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 5, 16, 33, 53, tzinfo=datetime.timezone.utc), 'time_taken': 63848.0, 'time_delta': '17:44:08', 'additions': 3445, 'deletions': 29, 'state': 'closed'}, {'id': 1298772760, 'number': 222, 'closed': datetime.datetime(2023, 4, 12, 14, 20, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 1, 16, 34, 4, tzinfo=datetime.timezone.utc), 'time_taken': 942371.0, 'time_delta': '10 days, 21:46:11', 'additions': 14, 'deletions': 56, 'state': 'closed'}, {'id': 1298076621, 'number': 220, 'closed': datetime.datetime(2023, 4, 4, 15, 8, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 31, 17, 3, 9, tzinfo=datetime.timezone.utc), 'time_taken': 338745.0, 'time_delta': '3 days, 22:05:45', 'additions': 700, 'deletions': 337, 'state': 'closed'}, {'id': 1289992925, 'number': 207, 'closed': datetime.datetime(2023, 5, 16, 8, 51, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 25, 10, 28, 38, tzinfo=datetime.timezone.utc), 'time_taken': 4486944.0, 'time_delta': '51 days, 22:22:24', 'additions': 388, 'deletions': 33, 'state': 'closed'}, {'id': 1289946548, 'number': 206, 'closed': datetime.datetime(2023, 4, 4, 11, 1, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 25, 6, 55, 43, tzinfo=datetime.timezone.utc), 'time_taken': 878764.0, 'time_delta': '10 days, 4:06:04', 'additions': 0, 'deletions': 19, 'state': 'closed'}, {'id': 1120378943, 'number': 134, 'closed': datetime.datetime(2022, 11, 14, 17, 9, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 13, 14, 1, 42, tzinfo=datetime.timezone.utc), 'time_taken': 97684.0, 'time_delta': '1 day, 3:08:04', 'additions': 764, 'deletions': 753, 'state': 'closed'}, {'id': 1103173754, 'number': 116, 'closed': datetime.datetime(2022, 10, 28, 17, 2, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 28, 14, 21, 13, tzinfo=datetime.timezone.utc), 'time_taken': 9693.0, 'time_delta': '2:41:33', 'additions': 1127, 'deletions': 4441, 'state': 'closed'}, {'id': 1103000288, 'number': 115, 'closed': datetime.datetime(2022, 11, 15, 15, 30, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 28, 11, 44, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1568709.0, 'time_delta': '18 days, 3:45:09', 'additions': 273, 'deletions': 74, 'state': 'closed'}, {'id': 1101942805, 'number': 114, 'closed': datetime.datetime(2022, 10, 28, 7, 48, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 27, 16, 24, 1, tzinfo=datetime.timezone.utc), 'time_taken': 55451.0, 'time_delta': '15:24:11', 'additions': 1387, 'deletions': 441, 'state': 'closed'}, {'id': 1100220824, 'number': 110, 'closed': datetime.datetime(2022, 10, 27, 18, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 26, 12, 48, 26, tzinfo=datetime.timezone.utc), 'time_taken': 108574.0, 'time_delta': '1 day, 6:09:34', 'additions': 1556, 'deletions': 5675, 'state': 'closed'}, {'id': 1098428065, 'number': 107, 'closed': datetime.datetime(2022, 10, 25, 6, 52, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 25, 6, 10, 1, tzinfo=datetime.timezone.utc), 'time_taken': 2558.0, 'time_delta': '0:42:38', 'additions': 18, 'deletions': 7, 'state': 'closed'}, {'id': 1097783112, 'number': 106, 'closed': datetime.datetime(2022, 10, 25, 9, 29, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 24, 17, 36, 6, tzinfo=datetime.timezone.utc), 'time_taken': 57206.0, 'time_delta': '15:53:26', 'additions': 203, 'deletions': 129, 'state': 'closed'}, {'id': 1090949041, 'number': 102, 'closed': datetime.datetime(2022, 10, 19, 20, 32, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 18, 15, 5, 44, tzinfo=datetime.timezone.utc), 'time_taken': 105986.0, 'time_delta': '1 day, 5:26:26', 'additions': 94, 'deletions': 96, 'state': 'closed'}, {'id': 1088157779, 'number': 98, 'closed': datetime.datetime(2022, 10, 17, 14, 14, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 15, 13, 48, 49, tzinfo=datetime.timezone.utc), 'time_taken': 174343.0, 'time_delta': '2 days, 0:25:43', 'additions': 2970, 'deletions': 2577, 'state': 'closed'}, {'id': 1085864502, 'number': 97, 'closed': datetime.datetime(2022, 10, 14, 11, 53, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 13, 10, 27, 16, tzinfo=datetime.timezone.utc), 'time_taken': 91558.0, 'time_delta': '1 day, 1:25:58', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1085806659, 'number': 96, 'closed': datetime.datetime(2022, 10, 15, 13, 32, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 13, 9, 42, 21, tzinfo=datetime.timezone.utc), 'time_taken': 186590.0, 'time_delta': '2 days, 3:49:50', 'additions': 132, 'deletions': 83, 'state': 'closed'}, {'id': 1080985049, 'number': 93, 'closed': datetime.datetime(2022, 10, 13, 9, 24, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 8, 10, 41, 53, tzinfo=datetime.timezone.utc), 'time_taken': 427340.0, 'time_delta': '4 days, 22:42:20', 'additions': 145, 'deletions': 171, 'state': 'closed'}, {'id': 1077094427, 'number': 87, 'closed': datetime.datetime(2022, 10, 7, 14, 46, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 5, 9, 31, 50, tzinfo=datetime.timezone.utc), 'time_taken': 191691.0, 'time_delta': '2 days, 5:14:51', 'additions': 12415, 'deletions': 10635, 'state': 'closed'}, {'id': 1075746083, 'number': 86, 'closed': datetime.datetime(2022, 10, 4, 13, 6, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 4, 9, 45, 12, tzinfo=datetime.timezone.utc), 'time_taken': 12100.0, 'time_delta': '3:21:40', 'additions': 291, 'deletions': 2, 'state': 'closed'}, {'id': 1072591617, 'number': 80, 'closed': datetime.datetime(2022, 10, 4, 7, 24, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 30, 11, 37, 8, tzinfo=datetime.timezone.utc), 'time_taken': 330417.0, 'time_delta': '3 days, 19:46:57', 'additions': 4604, 'deletions': 3500, 'state': 'closed'}, {'id': 1061372418, 'number': 59, 'closed': datetime.datetime(2022, 9, 21, 12, 53, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 20, 10, 20, 20, tzinfo=datetime.timezone.utc), 'time_taken': 95562.0, 'time_delta': '1 day, 2:32:42', 'additions': 389, 'deletions': 146, 'state': 'closed'}, {'id': 1048609037, 'number': 53, 'closed': datetime.datetime(2022, 9, 12, 19, 21, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 7, 11, 1, 26, tzinfo=datetime.timezone.utc), 'time_taken': 462018.0, 'time_delta': '5 days, 8:20:18', 'additions': 19247, 'deletions': 5645, 'state': 'closed'}, {'id': 1046165505, 'number': 48, 'closed': datetime.datetime(2022, 9, 5, 17, 6, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 10, 6, 42, tzinfo=datetime.timezone.utc), 'time_taken': 25202.0, 'time_delta': '7:00:02', 'additions': 137, 'deletions': 63, 'state': 'closed'}, {'id': 1046138842, 'number': 47, 'closed': datetime.datetime(2022, 9, 5, 9, 53, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 9, 41, 54, tzinfo=datetime.timezone.utc), 'time_taken': 709.0, 'time_delta': '0:11:49', 'additions': 420, 'deletions': 420, 'state': 'closed'}, {'id': 1045474318, 'number': 46, 'closed': datetime.datetime(2022, 9, 5, 9, 13, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 13, 7, 55, tzinfo=datetime.timezone.utc), 'time_taken': 158730.0, 'time_delta': '1 day, 20:05:30', 'additions': 1188, 'deletions': 45, 'state': 'closed'}, {'id': 1041149172, 'number': 36, 'closed': datetime.datetime(2022, 9, 2, 14, 21, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 30, 15, 30, 5, tzinfo=datetime.timezone.utc), 'time_taken': 255085.0, 'time_delta': '2 days, 22:51:25', 'additions': 10986, 'deletions': 59, 'state': 'closed'}, {'id': 1039540336, 'number': 35, 'closed': datetime.datetime(2022, 8, 29, 12, 43, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 11, 21, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4896.0, 'time_delta': '1:21:36', 'additions': 150, 'deletions': 134, 'state': 'closed'}, {'id': 1037930274, 'number': 32, 'closed': datetime.datetime(2022, 8, 29, 11, 3, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 12, 53, 43, tzinfo=datetime.timezone.utc), 'time_taken': 252578.0, 'time_delta': '2 days, 22:09:38', 'additions': 1241, 'deletions': 545, 'state': 'closed'}, {'id': 1022362187, 'number': 19, 'closed': datetime.datetime(2022, 8, 25, 7, 11, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 7, 56, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1293290.0, 'time_delta': '14 days, 23:14:50', 'additions': 12414, 'deletions': 101, 'state': 'closed'}, {'id': 991663722, 'number': 11, 'closed': datetime.datetime(2022, 7, 23, 14, 21, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 13, 22, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1299562.0, 'time_delta': '15 days, 0:59:22', 'additions': 8622, 'deletions': 447, 'state': 'closed'}, {'id': 989710457, 'number': 9, 'closed': datetime.datetime(2022, 7, 8, 12, 53, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 7, 5, 43, 45, tzinfo=datetime.timezone.utc), 'time_taken': 112173.0, 'time_delta': '1 day, 7:09:33', 'additions': 7665, 'deletions': 316, 'state': 'closed'}, {'id': 987586172, 'number': 8, 'closed': datetime.datetime(2022, 7, 6, 13, 33, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 15, 44, 28, tzinfo=datetime.timezone.utc), 'time_taken': 78520.0, 'time_delta': '21:48:40', 'additions': 4141, 'deletions': 0, 'state': 'closed'}, {'id': 986404479, 'number': 7, 'closed': datetime.datetime(2022, 7, 5, 14, 58, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 4, 12, 20, 17, tzinfo=datetime.timezone.utc), 'time_taken': 95888.0, 'time_delta': '1 day, 2:38:08', 'additions': 4076, 'deletions': 0, 'state': 'closed'}, {'id': 985248651, 'number': 6, 'closed': datetime.datetime(2022, 7, 4, 12, 14, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 18, 38, 14, tzinfo=datetime.timezone.utc), 'time_taken': 236154.0, 'time_delta': '2 days, 17:35:54', 'additions': 40, 'deletions': 31, 'state': 'closed'}, {'id': 984789563, 'number': 2, 'closed': datetime.datetime(2022, 7, 1, 17, 47, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 10, 16, 10, tzinfo=datetime.timezone.utc), 'time_taken': 27099.0, 'time_delta': '7:31:39', 'additions': 17, 'deletions': 24, 'state': 'closed'}]"
