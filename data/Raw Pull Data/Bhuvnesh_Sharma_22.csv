pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1248885706,GSoC'23 Discussion -- Allow moving a model between apps.,"So after all my research i created a new migration  ```MoveModel``` to move a model between apps. I have also tested the code with some case like ```m2m field``` , ```foreign key```  and renaming and moving model. It worked quite smooth for me even for reverse migration but i'm still trying to test it with as many cases as possible. I have also added a ```MoveModelPlaceholder``` for building dependencies.
The moving models changes will be automatically detected and ```MoveModel``` operation will be added in the app from which model is moved and ```MoveModelPlaceholder``` will be placed in the app to which model is moved.

Im still trying to figure out how can we create table for moved model on empty database when the old app is removed from ```INSTALLED_APPS```.

Any feedback is highly appreciated.",False,16585,https://api.github.com/repos/django/django/pulls/16585,https://github.com/django/django/pull/16585,closed,175,0,3,1,17,0,0,0,[],2023-02-21 15:18:58+00:00,2023-05-26 18:16:44+00:00,8132266.0,"94 days, 2:57:46",[],"[{'commit_sha': '5d4f8e7db229de136a492bf6bb22e3cdd79c1d3f', 'committer_username': 'DevilsAutumn', 'committer_name': 'Bhuvnesh', 'committer_email': 'bhuvnesh875@gmail.com', 'commit_date': datetime.datetime(2021, 5, 9, 11, 14, 51, tzinfo=datetime.timezone.utc)}]",Bhuvnesh,83907321,bhuvnesh875@gmail.com,User,,34,,21,110
1437913551,Refs #24686 -- Made AlterField operation a noop when renaming related model with db_table.,"Ref PR : #16905 
Ref Ticket : [#24686](https://code.djangoproject.com/ticket/24686)",True,17085,https://api.github.com/repos/django/django/pulls/17085,https://github.com/django/django/pull/17085,closed,22,0,2,1,1,8,0,0,[],2023-07-17 19:09:11+00:00,2023-07-23 16:45:27+00:00,509776.0,"5 days, 21:36:16","[{'comment_id': 1266346252, 'comment_body': 'We can assert that there were no queries instead.', 'comment_created': datetime.datetime(2023, 7, 18, 7, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1266346627, 'comment_body': '```suggestion\r\n        with connection.schema_editor() as editor, self.assertNumQueries(0):\r\n            operation.database_forwards(app_label, editor, project_state, new_state)\r\n```', 'comment_created': datetime.datetime(2023, 7, 18, 7, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1266347155, 'comment_body': 'I switched to `remote_field`.', 'comment_created': datetime.datetime(2023, 7, 18, 7, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1266366016, 'comment_body': 'We cannot ignore `to` for many-to-many fields as the column name in the auto-generated intermediate is based on the model name.', 'comment_created': datetime.datetime(2023, 7, 18, 7, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1266380023, 'comment_body': 'Yes, but while moving a model it should be ignored, right?', 'comment_created': datetime.datetime(2023, 7, 18, 7, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1266393661, 'comment_body': 'No, because _""the column name in the auto-generated intermediate is based on the model name""_, so it will rename a column in the intermediate table, e.g.\r\n```\r\nALTER TABLE ""test_rmwdbtfk_pony_rider_m2m"" RENAME COLUMN ""rider_id"" TO ""renamedrider_id""\r\n```', 'comment_created': datetime.datetime(2023, 7, 18, 8, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1266443348, 'comment_body': 'I was asking for the case, when a model is moved which has `db_table` and is referenced by a m2m field. In that case, AlterField should be a noop, but this patch will ignore that field too as in failing test. 🤔 ', 'comment_created': datetime.datetime(2023, 7, 18, 8, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1266449841, 'comment_body': '> I was asking for the case, when a model is moved which has `db_table` and is referenced by a m2m field. In that case, AlterField should be a noop, but this patch will ignore that field too as in failing test. thinking\r\n\r\nAgain, no, for exactly the same reason, check out ticket-33953. I have to double check that we can move it forward for foreign keys.', 'comment_created': datetime.datetime(2023, 7, 18, 8, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}]","[{'commit_sha': 'f05cc5e3d2ae7663dbd248029bcb74500cf1029f', 'committer_username': 'DevilsAutumn', 'committer_name': 'Bhuvnesh', 'committer_email': 'bhuvnesh875@gmail.com', 'commit_date': datetime.datetime(2021, 5, 9, 11, 14, 51, tzinfo=datetime.timezone.utc)}]",Bhuvnesh,83907321,bhuvnesh875@gmail.com,User,,34,,21,110
1370877757,Fixed #24686 -- Allow moving a model between apps.,"Google Summer of Code 2023
====================
Ticket: [#24686](https://code.djangoproject.com/ticket/24686)
Forum: [here.](https://forum.djangoproject.com/t/gsoc-2023-allow-moving-a-model-between-apps/21252)
Discussion: [PR](https://github.com/django/django/pull/16585)
Proposal: [Allow moving a model between apps.](https://gist.github.com/DevilsAutumn/7a3cd4567d0aef9d096abf2e0b9f7ffd)

Phase 1: Focusing on operations for moving model + tests related + documentation.
Phase 2: Auto-detecting moved model, generating migrations and squashing migrations + tests related + documentation.

",False,16905,https://api.github.com/repos/django/django/pulls/16905,https://github.com/django/django/pull/16905,open,909,3,21,7,34,67,0,0,[],2023-05-30 18:02:09+00:00,,0.0,,"[{'comment_id': 1221314339, 'comment_body': ""Model should not be aware (and maintain) migration-specific options. I'd keep it in the `ModelState`."", 'comment_created': datetime.datetime(2023, 6, 7, 10, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1221324686, 'comment_body': 'Would not be better, and less confusing for users, to use a subclass of `CreateModel` instead? For example:\r\n```python\r\nclass MoveModelToApp(CreateModel):\r\n    ...\r\n```\r\nThis could allow to get rid of `state_only_op` :thinking: ', 'comment_created': datetime.datetime(2023, 6, 7, 10, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1221371879, 'comment_body': 'The main objective of using `state_only_op` is to remove the need for new migration operations plus make the squashmigration much more easier . This [comment](https://github.com/django/django/pull/16585#issuecomment-1463964356) by @shaib explain the things better.', 'comment_created': datetime.datetime(2023, 6, 7, 10, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1221378690, 'comment_body': ""I'm not suggesting to move all steps to a single operation, but only to add `MoveModelToApp` instead of using `CreateModel(..., state_only_op=True)`. Maybe the name `CreateModelInAppState` would be clearer."", 'comment_created': datetime.datetime(2023, 6, 7, 10, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1261997229, 'comment_body': ""We cannot assume that it's a no-op as other changes can be made at the same time. For example, I moved `test_one.MyModel` to `test_two.MyModel` and added `null=True` one of `ForeignKey`:\r\n```bash\r\n$ python manage.py makemigrationsWas the model test_one.MyModel moved to test_two.MyModel? [y/N] y\r\nMigrations for 'test_one':\r\n  test_one/migrations/0002_alter_mymodel_options.py\r\n    - Change Meta options on mymodel\r\n  test_one/migrations/0003_delete_mymodel_alter_myrelatedmodels_field_fk_and_more.py\r\n    - Delete model mymodel\r\n    - Alter field field_fk on myrelatedmodels\r\n    - Alter field field_m2m on myrelatedmodels\r\nMigrations for 'test_two':\r\n  test_two/migrations/0002_mymodel_alter_myothermodel_field_fk.py\r\n    - Create model MyModel\r\n    - Alter field field_fk on myothermodel\r\n\r\n$ python manage.py sqlmigrate test_two 0002\r\nBEGIN;\r\n--\r\n-- Create model MyModel\r\n--\r\n-- (no-op)\r\n--\r\n-- Alter field field_fk on myothermodel\r\n--\r\n-- (no-op)\r\nCOMMIT;\r\n```"", 'comment_created': datetime.datetime(2023, 7, 13, 5, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1261997512, 'comment_body': '```suggestion\r\n            f""Please add db_table={db_table} to the {model_name} model ""\r\n            ""in new app.""\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 5, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1262168508, 'comment_body': 'Looking into this 👍 ', 'comment_created': datetime.datetime(2023, 7, 13, 7, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1262353624, 'comment_body': 'pushed changes that handle base cases, now working on edge cases of AlterField like changing non db attributes, ignored attributes etc.', 'comment_created': datetime.datetime(2023, 7, 13, 10, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1262363768, 'comment_body': ""> now working on edge cases of AlterField like changing non db attributes, ignored attributes etc.\r\n\r\nThis is already handled by `if not self._field_should_be_altered(old_field, new_field)`. Isn't it enough to swap these checks?"", 'comment_created': datetime.datetime(2023, 7, 13, 10, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1262365115, 'comment_body': 'Any extra checks should be a part of `_is_moving_model_field()`.', 'comment_created': datetime.datetime(2023, 7, 13, 10, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1262579974, 'comment_body': 'The `to` kwarg was being a barrier in swapping checks. Since the value of both `to` were different in `old_kwargs` and `new_kwargs`, it was returning `True`.', 'comment_created': datetime.datetime(2023, 7, 13, 13, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1263286427, 'comment_body': '```suggestion\r\n            f""Please add db_table={db_table} to the {model_name} model in new app.""\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 4, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1265018774, 'comment_body': 'I wonder if we could do this as a separate cleanup and do we need to check app labels :thinking: What about a model with `db_table` that was renamed in the same app?\r\nFor example\r\n```python\r\nclass MainModel(models.Model):\r\n    class Meta:\r\n        db_table = ""custom_db_table""\r\n\r\n\r\nclass MyModel(models.Model):\r\n    field_fk = models.ForeignKey(\'MainModel\', on_delete=models.CASCADE)\r\n\r\n\r\nclass MyModelM2M(models.Model):\r\n    field_m2m = models.ManyToManyField(\'MainModel\')\r\n```\r\nwas changed to the:\r\n```python\r\nclass RenamedMainModel(models.Model):\r\n    class Meta:\r\n        db_table = ""custom_db_table""\r\n\r\n\r\nclass MyModel(models.Model):\r\n    field_fk = models.ForeignKey(\'RenamedMainModel\', on_delete=models.CASCADE)\r\n\r\n\r\nclass MyModelM2M(models.Model):\r\n    field_m2m = models.ManyToManyField(\'RenamedMainModel\')\r\n```\r\nAs far as I\'m aware, this should be a no-op. Also `_is_moving_model_rel_field()` hooks seems unnecessary.', 'comment_created': datetime.datetime(2023, 7, 17, 8, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1265121495, 'comment_body': ""True🤔 we don't need to check app label if `db_table` is specified since fks are only concerned with db tables. Will fix this, add a test, fix 2 failing cases, remove `_is_moving_model_rel_field()` and create a separate PR soon. Do we also need a separate ticket for this? 🤔 "", 'comment_created': datetime.datetime(2023, 7, 17, 9, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1265123209, 'comment_body': '> Do we also need a separate ticket for this?\r\n\r\nWe can do this as a cleanup related to the 24686: `Refs #24686 -- Made ...`', 'comment_created': datetime.datetime(2023, 7, 17, 9, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1265124213, 'comment_body': 'okay 👍 \r\n', 'comment_created': datetime.datetime(2023, 7, 17, 9, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1277713381, 'comment_body': 'This method is now 127 lines long. Please break it down.', 'comment_created': datetime.datetime(2023, 7, 28, 15, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1277728566, 'comment_body': 'This unconditionally terminates the process -- please add a comment about it, and/or rename the questioner method (see also below).', 'comment_created': datetime.datetime(2023, 7, 28, 15, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1277732015, 'comment_body': '`dependencies` is already a list, isn\'t it?\r\n```suggestion\r\n                        dependencies.append(\r\n                            (rem_app_label, model_name, None, ""alter"")\r\n                        )\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 16, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1277745956, 'comment_body': 'Again, `dependencies` is a list, `alter_field_deps` is a list -- or am I missing something?\r\n```suggestion\r\n                        dependencies += alter_field_deps\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 16, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1277755600, 'comment_body': 'This shows, in part, why long functions are problematic: My first reaction to this line was, ""WTF?"". I had to look more than 100 lines up to see the context that the `break` refers to.\r\n\r\nAnd actually, the line is dubious -- it says ""after we found a new model which matches the old model, and the user acknowledged the move, we don\'t need to look for more matching models"". I think it would be more friendly to keep looking, and alert them if there are more matching targets for the move -- although this can be left for later, after we get a first working version.', 'comment_created': datetime.datetime(2023, 7, 28, 16, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1277757903, 'comment_body': 'It is better to reduce the levels of nesting. If you reverse the condition:\r\n```suggestion\r\n                if rem_app_label == app_label:\r\n                    continue\r\n```\r\nthen the rest of the function can be nested one level less. Similarly for the next `if` at line 615 (when this is written).', 'comment_created': datetime.datetime(2023, 7, 28, 16, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1277784483, 'comment_body': 'Forgot to add this earlier... \r\nThis method does not actually ask the user anything, so a name like `quit_for_db_table_add()` may be more appropriate. It will also make it clearer, where the method is called, that it is not expected to return.\r\n\r\nAlso, please check if a `return None` implementation needs to be added to the parent, non-interactive questioner class; other `ask_...` methods in this class do have such parallels.', 'comment_created': datetime.datetime(2023, 7, 28, 16, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1299557148, 'comment_body': '```suggestion\r\n\r\n    .. versionadded:: 5.0\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 3, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1299557221, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 3, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1299557365, 'comment_body': '```suggestion\r\nDjango now supports moving models between apps. ...\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 3, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1299560045, 'comment_body': 'Do we need this model? It looks unused.', 'comment_created': datetime.datetime(2023, 8, 21, 3, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1299563362, 'comment_body': 'Can we reuse existing test states? For example:\r\n```suggestion\r\n            self.publisher,\r\n            self.author_with_publisher,\r\n```\r\nand change them in `after`.', 'comment_created': datetime.datetime(2023, 8, 21, 3, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1299563834, 'comment_body': '```suggestion\r\n        # None means quit.\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 3, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1299568655, 'comment_body': 'Should not we swap those checks? :thinking: ', 'comment_created': datetime.datetime(2023, 8, 21, 3, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1299569359, 'comment_body': ""```suggestion\r\nto another. This involves recognizing the moved model and automatically\r\ngenerating the necessary migrations. The model's transition occurs within\r\nthe project state, without affecting the database(unless required). Before\r\nrunning the ``makemigrations`` command, it is mandatory to specify the original\r\ntable name in the Meta section of the model being moved. This prevents the\r\n```"", 'comment_created': datetime.datetime(2023, 8, 21, 3, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1299569831, 'comment_body': ""```suggestion\r\nrecreation of the model's table. The process involves four steps:\r\n```"", 'comment_created': datetime.datetime(2023, 8, 21, 3, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'felixxm', 'type': 'User'}, {'comment_id': 1300200663, 'comment_body': ""Actually it was a small problem here, unmanaged models won't be handled automatically. If we handle them automatically it will remove the fields which are referencing to other models and then delete model. But what we want is that unmanaged models should be created in new app and removed from old app without any change in its fields and no `AlterModelOptions` operation should be added. I have fixed this behaviour and pushed the code.\r\nFor better understanding you can see the difference in migrations generated before and after the fix in [this commit](https://github.com/DevilsAutumn/moving-model-demo/commit/dba54abcb0617ce3e205effdd749fe7ffdf22855) in the demo project."", 'comment_created': datetime.datetime(2023, 8, 21, 14, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1306500610, 'comment_body': 'This whole concept of dependency would greatly benefit from some modernizing that relies on named tuples and enums but that certainly outside the scope of this PR.', 'comment_created': datetime.datetime(2023, 8, 26, 17, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1306501481, 'comment_body': ""Not sure it's worth mentioning this part since it's not typical."", 'comment_created': datetime.datetime(2023, 8, 26, 18, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1306501692, 'comment_body': '```suggestion\r\nthe project state, without affecting the database (unless required). Before\r\n```\r\n\r\nI think this whole section might benefit from being the other way around; document that a table rename will happen unless the new model defines a `Meta.db_table` that matches the old one.', 'comment_created': datetime.datetime(2023, 8, 26, 18, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1306501932, 'comment_body': 'Could we possibly continue here and simply include the `RenameModel` operation as well?', 'comment_created': datetime.datetime(2023, 8, 26, 18, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1306503632, 'comment_body': 'Is there a reason we even consider unmanaged models?\r\n\r\nIt feels like only considering moved models that are managed (from and to app) would simplify the implementation considerably and moving unmanaged models is really an edge case that we could add support for latter on.', 'comment_created': datetime.datetime(2023, 8, 26, 18, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1306509753, 'comment_body': ""Since no new operations are added maybe we could augment the description to mention that it's actually support for auto-detection of model move that was added?\r\n\r\n```suggestion\r\n\r\nThe migration framework now auto-detect moving models between apps and supports\r\ndoing so without database operations if associated database table remains the same.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 26, 18, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1306518502, 'comment_body': ""Not sure it's worth considering this case as pointed out above.\r\n\r\nWhen dealing with unmanaged models the currently generated `DeleteModel` and `CreateModel` operations are just fine as they don't result in any changes to the database; it's the whole premise of this approach for managed models."", 'comment_created': datetime.datetime(2023, 8, 26, 18, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1306702631, 'comment_body': 'comment out of date', 'comment_created': datetime.datetime(2023, 8, 27, 18, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1306704707, 'comment_body': 'AFAICT this skips the `AlterModelTable` if `db_table` is given, without checking if it is unchanged.', 'comment_created': datetime.datetime(2023, 8, 27, 18, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1306705686, 'comment_body': 'As far as I understand -- both from docs and from looking at code -- `AlterModelOptions(options={})` is a no-op. If this is the intention, please add a comment to explain why it is necessary.', 'comment_created': datetime.datetime(2023, 8, 27, 18, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1306706010, 'comment_body': 'This seems out of date (and somewhat contradicts the lines above)', 'comment_created': datetime.datetime(2023, 8, 27, 18, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1306708719, 'comment_body': 'I think this deserves a more detailed explanation -- in particular, explain *why* we do things, not just *what* we do. Something like:\r\n""""""\r\nWhen we are going to move a model -- that is, delete a model in one app and create it anew in another -- we want to avoid dropping and recreating its database table (which would lose all data). To achieve this, we first create the new model, making it point to the already existing table. To make Django not attempt to create that table (which would fail), we mark it `managed=False` upon creation. After this, we momentarily have two models pointing at the same table. Now, to remove the old model without deleting the table, we mark it `managed=False` as well. Finally, we can remove the old model and mark the new one `managed=True`.\r\n""""""\r\n\r\nI\'m not marking the above as a suggestion, for two reasons:\r\n- It has style issues; in particular, the Django documentation mostly avoids parentheses and m-dashes; and,\r\n- The optional table rename operation is not mentioned (I\'m actually not quite sure about its place in the order of operations). \r\n', 'comment_created': datetime.datetime(2023, 8, 27, 19, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1306709264, 'comment_body': 'As mentioned above -- please add a `test_move_model_with_db_table_changed()`', 'comment_created': datetime.datetime(2023, 8, 27, 19, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1307161194, 'comment_body': 'Thankyou for reviewing! Actually this operation is used to switch the moved model from unmanaged to managed. I have added a comment 👍 ', 'comment_created': datetime.datetime(2023, 8, 28, 9, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1308045748, 'comment_body': '1. The logic is reversed, the rename should happen if `old_table_name != new_table_name`\r\n2. `None` is equal to itself -- so if `db_table` is never specified, you get an `AlterModelTable` which changes the `db_table` to `None`.\r\n\r\nBefore fixing this, please fix the tests so that a problem like this gets caught.\r\n', 'comment_created': datetime.datetime(2023, 8, 28, 23, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1308196656, 'comment_body': 'The following changes should fix this without the need to change the tests. 🤔 \r\n```diff\r\nindex e5f2d53f45..0b60ae60fb 100644\r\n--- a/django/db/migrations/autodetector.py\r\n+++ b/django/db/migrations/autodetector.py\r\n@@ -610,11 +610,11 @@ class MigrationAutodetector:\r\n                 ):\r\n                     continue\r\n                 dependencies = []\r\n-                old_table_name = rem_model_state.options.get(""db_table"")\r\n-                new_table_name = model_state.options.get(""db_table"")\r\n+                old_table_name = rem_model_state.options.get(""db_table"", f""{rem_app_label}_{rem_model_name}"")\r\n+                new_table_name = model_state.options.get(""db_table"", f""{app_label}_{model_name}"")\r\n                 # If moved model has same table name as it was in old app,\r\n                 # then don\'t rename table.\r\n-                if old_table_name == new_table_name:\r\n+                if old_table_name != new_table_name:\r\n                     self.add_operation(\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 4, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1308299280, 'comment_body': ""One of the main purposes of the tests is to tell us when the code is broken. When we find out that the code could be broken without causing the tests to fail, that is reason to fix the tests -- so at least this specific bug will not be repeated.\r\n\r\nIMO the tests need to include at least three cases: \r\n- `db_table` not set at all;\r\n- `db_table` set and remains the same after the move;\r\n- `db_table` set and changed after the move.\r\n\r\nOther interesting cases, which I'm not sure are mandatory, are:\r\n- `db_table` not set before the move, but set to the old default after the move; and\r\n- `db_table` set (to the new default or otherwise) before the move, and not set after the move. \r\n\r\nChecking the details of the generated operations could also have caught this, I don't think it's a good replacement for checking the different cases.\r\n\r\nThe suggested change should handle all the cases correctly, AFAICT."", 'comment_created': datetime.datetime(2023, 8, 29, 6, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1308419257, 'comment_body': 'Thanks 👍 ,I did test all the cases locally before suggesting changes here and all were working correctly.🥳 \r\nAlso, I have added the tests for initial three cases as you suggested.', 'comment_created': datetime.datetime(2023, 8, 29, 8, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1311039713, 'comment_body': 'I guess a sense that this is wrong. The migration that creates the unmanaged models in `otherapp` should depend on the model already existing in `testapp`', 'comment_created': datetime.datetime(2023, 8, 31, 3, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1311040049, 'comment_body': '`(""testapp"", ""auto_1"")` should be in the first migration I reckon', 'comment_created': datetime.datetime(2023, 8, 31, 3, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1311043924, 'comment_body': 'The operations seem fine but the dependency should be define in a way where\r\n\r\n1. `otherapp[""auto_1""]` runs at a point where `test[""auto_1""]` has already run as it defines unmanaged models that expect the table to exists already in their renamed form.\r\n2. `otherapp[""auto_2""]` should come after `otherapp[""auto_1""]` and `test[""auto_2""]` after `test[""auto_1""]` obviously but the order between `otherapp` and `test` doesn\'t really matter once `otherapp[""auto_1""]` has run after `test[""auto_1""]`', 'comment_created': datetime.datetime(2023, 8, 31, 3, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1311045779, 'comment_body': 'Could you test with no explicit `db_table` at first, it should also work\r\n\r\n```suggestion\r\n        before = [self.author, self.book]\r\n        after = [\r\n            ModelState(\r\n                ""otherapp"",\r\n                ""Author"",\r\n                [\r\n                    (""id"", models.AutoField(primary_key=True)),\r\n                    (""name"", models.CharField(max_length=200)),\r\n                ],\r\n                options={""db_table"": ""testapp_author""},\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 3, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1311047279, 'comment_body': 'It\'d be good to test that the `CreateModel` has a `db_table: ""changed_db_table""`', 'comment_created': datetime.datetime(2023, 8, 31, 3, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'charettes', 'type': 'User'}, {'comment_id': 1478933177, 'comment_body': '```suggestion\r\nThe migration framework now auto-detects moving models between apps and\r\n```', 'comment_created': datetime.datetime(2024, 2, 5, 21, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1478933976, 'comment_body': ""```suggestion\r\nsupports doing so without database operations if a moved model's database table\r\n```"", 'comment_created': datetime.datetime(2024, 2, 5, 21, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1478934880, 'comment_body': '```suggestion\r\nrecreate it in another - we want to avoid dropping and recreating its\r\n```', 'comment_created': datetime.datetime(2024, 2, 5, 21, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1478935343, 'comment_body': '```suggestion\r\nunless the moved model in the new app defines a ``Meta.db_table`` that matches\r\n```', 'comment_created': datetime.datetime(2024, 2, 5, 21, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1478935782, 'comment_body': '```suggestion\r\nthe old table name.\r\n```', 'comment_created': datetime.datetime(2024, 2, 5, 21, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1478955049, 'comment_body': 'This paragraph explains the migration operations generated by the framework for a model move, and I think this should be said very explicitly, because as the text stands, it can be understood to describe the operations the user needs to take. So I would change the text here along these lines -- clearly separate and describe what the user needs to do, and what the framework does.\r\n\r\nSomething like:\r\n""""""\r\n\r\nTo move a model from one app to another, move the model\'s code (the class definition) from the old app\'s `models.py` file to the new app\'s `models.py`, and run the `makemigrations` management command. This command will generate migrations in both apps, with the following operations: \r\n- First, create the new model, making it point to the already existing table. To make Django not attempt to create that table (which would fail), mark it ``managed=False`` upon creation (after this operation, we momentarily have two models pointing at the same table).\r\n- Then, to make it possible to remove the old model without deleting the table, mark it `managed=False` as well.\r\n- Finally, remove the old model and mark the new one `managed=True` (these are two migrations, as each is in its own app)\r\n\r\nNote that this only handles the migrations part -- you will still need to handle other aspects of the move (such as changing all existing references to the model to point to its new location) yourself (in fact, you will probably need to handle these before running `makemigrations`, for Django to be able to load the apps).\r\n""""""\r\n\r\n(the above is my style of writing, Django documentation usually prefers not to use parentheses so liberally)', 'comment_created': datetime.datetime(2024, 2, 5, 22, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shaib', 'type': 'User'}, {'comment_id': 1480044501, 'comment_body': 'Thanks 👍 this looks better. Also should i move the last para under a separate `note`?  It\'ll look something like this: \r\n\r\n<img width=""1238"" alt=""Screenshot 2024-02-06 at 9 02 16\u202fPM"" src=""https://github.com/django/django/assets/83907321/3ece4b74-c14b-4fd0-9646-cd00abf3511f"">\r\n', 'comment_created': datetime.datetime(2024, 2, 6, 15, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1551409108, 'comment_body': 'Hi @DevilsAutumn 👋 excited about this one!\r\n\r\nCan you [wrap the documentation at 80 characters](https://docs.djangoproject.com/en/dev/internals/contributing/writing-documentation/#guidelines-for-restructuredtext-files) and update the ""makemigrations"" references to:\r\n```\r\n:djadmin:`makemigrations`\r\n```\r\nWhich will hopefully fix the [spell check errors from the CI](https://github.com/django/django/actions/runs/8418511882/job/23049159127?pr=16905).', 'comment_created': datetime.datetime(2024, 4, 4, 10, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sarahboyce', 'type': 'User'}, {'comment_id': 1551481373, 'comment_body': '@sarahboyce Thanks for the reminder! Fixed the linting errors and rebased as well. 😃 ', 'comment_created': datetime.datetime(2024, 4, 4, 11, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}, {'comment_id': 1555445134, 'comment_body': 'I tried to follow these instructions and must have misinterpreted it and had my test data deleted or I couldn\'t generate migrations, so I think we might want to spell this out a bit more. \r\n\r\nBut specifically\r\n\r\n\r\n> To move a model from one app to another, move the model\'s code (the class\r\n\r\nThis already sounds like the start of instructions, so let\'s make it visibly part of the instructions of change this e.g \r\n\r\n```\r\nTo move a model from one app to another:\r\n\r\n#. ...\r\n#. ...\r\n```\r\n\r\nThe very first paragraph tells you to run the `makemigrations` management command but we don\'t explicitly say when to migrate or do further makemigrations commands or whether to restrict these commands to a particular app.\r\n\r\nWe should also add more links to reference docs here (specifically the managed and `db_table` if needed e.g. ```:attr:`Meta.db_table <django.db.models.Options.db_table>` ```)\r\n\r\nI think we should also consider giving example names, something like:\r\n\r\n```\r\nTo move a model `Model1` from `app1` to `app2`:\r\n\r\n#. ...\r\n#. ...\r\n```\r\n\r\nThen to give an example confusion I had\r\n> To move a model from one app to another, move the model\'s code (the class\r\ndefinition) from the old app\'s ``models.py`` file to the new app\'s\r\n``models.py``, and run the :djadmin:`makemigrations` management command.\r\n\r\nWhat does ""move"" mean here? Does move mean ""duplicate"" (copy and paste) and so you have the model defined in both `app1` and `app2` or does it mean ""replace"" (cut and paste) and so you only have the model in `app2`? \r\nI\'m hoping have the instructions being like 1. 2. 3. will make this very clear 🤔 \r\n\r\nSide note: I\'m wondering if we should move the instructions to a \'How to\' section and link them here but let\'s get the instructions really clear first and then decide where they belong after 👍 ', 'comment_created': datetime.datetime(2024, 4, 8, 8, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sarahboyce', 'type': 'User'}, {'comment_id': 1571170271, 'comment_body': '> What does ""move"" mean here? Does move mean ""duplicate"" (copy and paste) and so you have the model defined in both app1 and app2 or does it mean ""replace"" (cut and paste) and so you only have the model in app2?\r\n\r\n""move"" actually means moving the model\'s code from old app to new app(cut and paste). Let me explain with an example:\r\nSuppose you have two apps `app1` and `app2`. In `app1`, you have 2 models `ModelA` and `ModelB` and `ModelA` has a FK to `ModelB`. In `app2`, you have `ModelC`. When you run `makemigrations`, it will create initial migrations for create model.\r\nNow suppose you want to move `ModelB` from `app1` to `app2`, for that you will first cut the code of `ModelB` from `app1` and paste it in `app2`, Now you\'ll have to resolve the references to `ModelB` (in this case, FK from `ModelA` ) to point to new location of `ModelB` which is `app2.ModelB`. After this you\'ll just have to run `makemigrations` once and django will automatically generate all the migrations that will be required to move model at database level. Thats it!\r\n\r\n\r\n>To move a model from one app to another, move the model\'s code (the class\r\ndefinition) from the old app\'s ``models.py`` file to the new app\'s\r\n``models.py``, and run the :djadmin:`makemigrations` management command.\r\n\r\nI think this line is pretty clearly written and will make sense now. ☝️ \r\n\r\n>This command will generate migrations in both apps, with the following\r\noperations:\r\n> - First, create the new model, making it point to the already existing table. \r\n  To make Django not attempt to create that table (which would fail), mark it\r\n  ``managed=False`` upon creation (after this operation, we momentarily have\r\n  two models pointing at the same table).\r\n> - Then, to make it possible to remove the old model without deleting the\r\n  table, mark it ``managed=False`` as well.\r\n> - Finally, remove the old model and mark the new one ``managed=True``\r\n  (these are two migrations, as each is in its own app).\r\n\r\nNow these points are just to explain the migration operations that will be generated automatically and how they will actually ""move"" a model under the hood. You will gain a better understanding of them once you examine the migrations generated for moving a model.\r\n\r\nMaybe its worth adding a minimal example with two apps and few models in the ""how-to"" section.\r\nPlease let me know if you did not understand any part.\r\n', 'comment_created': datetime.datetime(2024, 4, 18, 18, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DevilsAutumn', 'type': 'User'}]","[{'commit_sha': '6d50e8f847c8b93582519180d394b11daabf5aed', 'committer_username': 'DevilsAutumn', 'committer_name': 'Bhuvnesh', 'committer_email': 'bhuvnesh875@gmail.com', 'commit_date': datetime.datetime(2021, 5, 9, 11, 14, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dfa0039448aa56a46bcb8b8fc8a16c6ef7cf88d', 'committer_username': 'DevilsAutumn', 'committer_name': 'Bhuvnesh', 'committer_email': 'bhuvnesh875@gmail.com', 'commit_date': datetime.datetime(2021, 5, 9, 11, 14, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7310b137391900b93772fbbc92a3c038ec91f2c8', 'committer_username': 'DevilsAutumn', 'committer_name': 'Bhuvnesh', 'committer_email': 'bhuvnesh875@gmail.com', 'commit_date': datetime.datetime(2021, 5, 9, 11, 14, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb45129d0782ee9f68d3742e25263ed33aab7fcd', 'committer_username': 'DevilsAutumn', 'committer_name': 'Bhuvnesh', 'committer_email': 'bhuvnesh875@gmail.com', 'commit_date': datetime.datetime(2021, 5, 9, 11, 14, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd204398edead57dc90e64734b7c5ab8eb150d42', 'committer_username': 'DevilsAutumn', 'committer_name': 'Bhuvnesh', 'committer_email': 'bhuvnesh875@gmail.com', 'commit_date': datetime.datetime(2021, 5, 9, 11, 14, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b6a7442d9daca2070a1098443a3276b1feb67c', 'committer_username': 'DevilsAutumn', 'committer_name': 'Bhuvnesh', 'committer_email': 'bhuvnesh875@gmail.com', 'commit_date': datetime.datetime(2021, 5, 9, 11, 14, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d64740b469c1092be14088196e38b049c9068d7', 'committer_username': 'DevilsAutumn', 'committer_name': 'Bhuvnesh', 'committer_email': 'bhuvnesh875@gmail.com', 'commit_date': datetime.datetime(2021, 5, 9, 11, 14, 51, tzinfo=datetime.timezone.utc)}]",Bhuvnesh,83907321,bhuvnesh875@gmail.com,User,,34,,21,110

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
4164482,django,django/django,Python,31404,78604,2300,3158,32852,241,28,241,"[{'id': 1848670447, 'number': 18116, 'closed': None, 'created': datetime.datetime(2024, 4, 30, 19, 55, 6, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 46, 'deletions': 0, 'state': 'open'}, {'id': 1820332853, 'number': 18068, 'closed': datetime.datetime(2024, 5, 3, 0, 43, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 12, 14, 47, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1763730.0, 'time_delta': '20 days, 9:55:30', 'additions': 153, 'deletions': 1, 'state': 'closed'}, {'id': 1514197036, 'number': 17257, 'closed': None, 'created': datetime.datetime(2023, 9, 13, 16, 20, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 77, 'deletions': 2, 'state': 'open'}, {'id': 1437913551, 'number': 17085, 'closed': datetime.datetime(2023, 7, 23, 16, 45, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 17, 19, 9, 11, tzinfo=datetime.timezone.utc), 'time_taken': 509776.0, 'time_delta': '5 days, 21:36:16', 'additions': 22, 'deletions': 0, 'state': 'closed'}, {'id': 1380485340, 'number': 16948, 'closed': datetime.datetime(2023, 6, 7, 3, 34, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 6, 9, 18, 49, tzinfo=datetime.timezone.utc), 'time_taken': 65747.0, 'time_delta': '18:15:47', 'additions': 30, 'deletions': 0, 'state': 'closed'}, {'id': 1370877757, 'number': 16905, 'closed': None, 'created': datetime.datetime(2023, 5, 30, 18, 2, 9, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 909, 'deletions': 3, 'state': 'open'}, {'id': 1361548717, 'number': 16890, 'closed': None, 'created': datetime.datetime(2023, 5, 23, 14, 40, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 164, 'deletions': 4, 'state': 'open'}, {'id': 1352218965, 'number': 16861, 'closed': datetime.datetime(2023, 6, 2, 19, 47, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 16, 10, 11, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1503383.0, 'time_delta': '17 days, 9:36:23', 'additions': 20, 'deletions': 0, 'state': 'closed'}, {'id': 1350309733, 'number': 16856, 'closed': datetime.datetime(2023, 5, 16, 7, 52, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 8, 4, 50, tzinfo=datetime.timezone.utc), 'time_taken': 85644.0, 'time_delta': '23:47:24', 'additions': 66, 'deletions': 0, 'state': 'closed'}, {'id': 1248885706, 'number': 16585, 'closed': datetime.datetime(2023, 5, 26, 18, 16, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 21, 15, 18, 58, tzinfo=datetime.timezone.utc), 'time_taken': 8132266.0, 'time_delta': '94 days, 2:57:46', 'additions': 175, 'deletions': 0, 'state': 'closed'}, {'id': 1232494806, 'number': 16532, 'closed': datetime.datetime(2023, 2, 14, 13, 35, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 7, 19, 32, 11, tzinfo=datetime.timezone.utc), 'time_taken': 583389.0, 'time_delta': '6 days, 18:03:09', 'additions': 75, 'deletions': 14, 'state': 'closed'}, {'id': 1177281203, 'number': 16405, 'closed': datetime.datetime(2022, 12, 27, 7, 5, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 25, 16, 6, 52, tzinfo=datetime.timezone.utc), 'time_taken': 140317.0, 'time_delta': '1 day, 14:58:37', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 1134716368, 'number': 16325, 'closed': datetime.datetime(2023, 2, 15, 18, 32, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 24, 10, 21, 53, tzinfo=datetime.timezone.utc), 'time_taken': 7200614.0, 'time_delta': '83 days, 8:10:14', 'additions': 30, 'deletions': 0, 'state': 'closed'}, {'id': 1131461595, 'number': 16315, 'closed': datetime.datetime(2022, 11, 22, 19, 5, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 22, 9, 44, 54, tzinfo=datetime.timezone.utc), 'time_taken': 33607.0, 'time_delta': '9:20:07', 'additions': 46, 'deletions': 7, 'state': 'closed'}, {'id': 1118161978, 'number': 16281, 'closed': datetime.datetime(2022, 11, 17, 12, 56, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 10, 18, 52, 13, tzinfo=datetime.timezone.utc), 'time_taken': 583481.0, 'time_delta': '6 days, 18:04:41', 'additions': 68, 'deletions': 18, 'state': 'closed'}, {'id': 1111729604, 'number': 16260, 'closed': datetime.datetime(2022, 11, 7, 7, 6, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 5, 17, 49, 31, tzinfo=datetime.timezone.utc), 'time_taken': 134219.0, 'time_delta': '1 day, 13:16:59', 'additions': 13, 'deletions': 0, 'state': 'closed'}, {'id': 1109631545, 'number': 16251, 'closed': datetime.datetime(2022, 11, 3, 19, 11, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 3, 13, 55, 6, tzinfo=datetime.timezone.utc), 'time_taken': 18974.0, 'time_delta': '5:16:14', 'additions': 7, 'deletions': 12, 'state': 'closed'}, {'id': 1104531569, 'number': 16242, 'closed': datetime.datetime(2022, 11, 2, 9, 28, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 30, 17, 5, 8, tzinfo=datetime.timezone.utc), 'time_taken': 231782.0, 'time_delta': '2 days, 16:23:02', 'additions': 86, 'deletions': 0, 'state': 'closed'}, {'id': 1103402186, 'number': 16235, 'closed': datetime.datetime(2022, 10, 30, 15, 58, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 28, 18, 0, 50, tzinfo=datetime.timezone.utc), 'time_taken': 165435.0, 'time_delta': '1 day, 21:57:15', 'additions': 90, 'deletions': 12, 'state': 'closed'}, {'id': 1074997231, 'number': 16147, 'closed': datetime.datetime(2022, 10, 5, 10, 56, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 3, 17, 44, 49, tzinfo=datetime.timezone.utc), 'time_taken': 148321.0, 'time_delta': '1 day, 17:12:01', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1058970204, 'number': 16065, 'closed': datetime.datetime(2022, 9, 17, 6, 34, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 18, 32, 6, tzinfo=datetime.timezone.utc), 'time_taken': 43329.0, 'time_delta': '12:02:09', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 1052331109, 'number': 16047, 'closed': datetime.datetime(2022, 9, 30, 11, 3, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 10, 21, 3, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1691962.0, 'time_delta': '19 days, 13:59:22', 'additions': 17, 'deletions': 0, 'state': 'closed'}, {'id': 1051376364, 'number': 16041, 'closed': datetime.datetime(2022, 9, 9, 12, 19, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 9, 10, 7, 29, tzinfo=datetime.timezone.utc), 'time_taken': 7906.0, 'time_delta': '2:11:46', 'additions': 12, 'deletions': 7, 'state': 'closed'}, {'id': 1047812657, 'number': 16034, 'closed': datetime.datetime(2022, 9, 6, 19, 39, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 16, 54, 19, tzinfo=datetime.timezone.utc), 'time_taken': 9923.0, 'time_delta': '2:45:23', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 1047335419, 'number': 16032, 'closed': datetime.datetime(2022, 9, 9, 7, 27, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 9, 54, 57, tzinfo=datetime.timezone.utc), 'time_taken': 250338.0, 'time_delta': '2 days, 21:32:18', 'additions': 31, 'deletions': 8, 'state': 'closed'}]"
