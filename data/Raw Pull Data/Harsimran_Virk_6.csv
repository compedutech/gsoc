pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
426022711,Dynamic Lights (GSoC),"This is meant to be the working prototype of dynamic lights and shadows.

A broad overview of goals:

- [x] Add properties and register instance renderer.

- [x] Add LightObstacleManager and LightObstacleRuntimeBehaviour

- [x] Update vertices in each frame.

- [x] Implement simple raycasting.

- [x] Use raycasting to determine vertices.

- [x] Add functionality of rendering to texture for `layer-pixi-renderer`.

- [x] Use _`RenderTextures`_ as uniforms for the _`shader`_ and render normal maps.
",False,1783,https://api.github.com/repos/4ian/GDevelop/pulls/1783,https://github.com/4ian/GDevelop/pull/1783,closed,49720,1146,76,37,13,30,0,0,[],2020-06-01 14:42:41+00:00,2020-06-18 15:01:58+00:00,1469957.0,"17 days, 0:19:17","[{'comment_id': 439796701, 'comment_body': '@4ian I have a question/doubt. If getManager is on the prototype (ie, `gdjs.LightObstaclesManager.prototype.getManager`), I get errors saying getManager is not a function. Why is that so? Does it have something related to being a singleton (if I understand the term correctly, singleton means only one instance of the class right?), or is it something else?\r\n', 'comment_created': datetime.datetime(2020, 6, 14, 6, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 439827198, 'comment_body': '@HarsimranVirk When you put a method on the prototype in JavaScript, it\'s akin to a ""class method"", meaning that you have to instantiate an instance of the class:\r\n```\r\nMyClass = function() { this.something = 3; } // This is the ""constructor""\r\nMyClass.prototype.myMethod = function() { return this.something; } // This is a ""class method""\r\n\r\nvar instance = new MyClass();\r\nconsole.log(instance.myMethod()); // Will display 3.\r\nMyClass.myMethod() // error because myMethod does not exist.\r\n```\r\n\r\nif you remove the `.prototype` when declaring a function on a class, you\'re just setting a function as a property... in other words it\'s a ""static"" function:\r\n\r\n```\r\nMyClass = function() { ... } // This is the ""constructor""\r\nMyClass.myStaticMethod = function() { return ""Hello world"";  } // This is a ""static"" method.\r\n\r\nconsole.log(MyClass.myStaticMethod()); // Will display ""Hello world"".\r\n```\r\n\r\nHere, `getManager` is a ""static"" function. You can think of it as a helper. It was put here because it\'s better to put it as a property of `gdjs.LightObstaclesManager` rather than as a global variable. This is indeed more or less related to a ""singleton"" pattern, though a bit different. A singleton is a *single* class instance for the whole code, while here we want *one manager per scene*.\r\nHow do we do that? By having a single function called `gdjs.LightObstaclesManager.getManager`, that you can call anywhere, and that returns the gdjs.LightObstaclesManager for the scene. The way it does it is by creating (if necessary) a `new gdjs.LightObstaclesManager()`, storing it inside the runtimeScene (but we could imagine using a hashtable or something like that to avoid polluting the runtimeScene... but this is the fastest way to do it), and then return it.\r\n\r\nNote that `getManager` is a static method so you must always call it by writing the entire name `var lightObstaclesManager = gdjs.LightObstaclesManager.getManager(runtimeScene);`.\r\nYou can then call usual (non static) methods:\r\n`lightObstaclesManager.getObstaclesAroundObject(object, radius, ...);` etc', 'comment_created': datetime.datetime(2020, 6, 14, 12, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 439834001, 'comment_body': 'Note that in recent versions of JavaScript, the `class` keyword was added, so you can do instead:\r\n\r\n```js\r\nclass MyClass {\r\n  constructor() {\r\n    this.something = 3;\r\n  }\r\n  \r\n  myMethod() { return this.something; } \r\n  static myStaticMethod() { return ""hello world""; }\r\n}\r\n\r\n\r\nvar instance = new MyClass();\r\nconsole.log(instance.myMethod()); // Will display 3.\r\nconsole.log(MyClass.myStaticMethod()); // Will display ""Hello world"".\r\n```\r\n\r\nbut this is just ""syntactic sugar"" over the `prototype` that I explained before. We say that JavaScript is a ""prototype"" based language. In GDJS, we don\'t use the class keyword because it\'s unsupported in old browsers, notably Android 4.4 (we write ""ES5"" Javascript, not ES6). \r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 14, 14, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 439837524, 'comment_body': '> we write ""ES5"" Javascript, not ES6\r\n\r\nI totally forgot that 😅 I\'ve been using a lot of `const`, `let` and arrow functions, might need some refactoring then (especially with using `this` in `function()`).', 'comment_created': datetime.datetime(2020, 6, 14, 14, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 439845569, 'comment_body': ""That's ok as a first draft, just don't forget to make a card about this in the Trello so we remember to make a pass to ensure everything is using `var`/`function` :)"", 'comment_created': datetime.datetime(2020, 6, 14, 16, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440108434, 'comment_body': ""@4ian this doesn't really work. I mostly get empty arrays and I don't understand why is that so. The expected return value should be at least the vertices of the mesh (`this._object.getHitBoxes().vertices`). Can you take a look at this function? There's definitely something wrong here :/"", 'comment_created': datetime.datetime(2020, 6, 15, 11, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 440110217, 'comment_body': 'I have commented out all of this because I get empty arrays from the raycasting function. `this.raycastTest()` returns an array of vertex positions which are empty.', 'comment_created': datetime.datetime(2020, 6, 15, 11, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 440177991, 'comment_body': ""I guess I'm doing something wrong with _`closeX`, `closeY, farX and farY`_ 🤔 Can you explain the return value (`result`) of _`gdjs.Polygon.raycastTest()`_ ?"", 'comment_created': datetime.datetime(2020, 6, 15, 13, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 440429600, 'comment_body': 'Should this be:\r\n\r\n```suggestion\r\n  searchArea.minX = x - radius;\r\n  searchArea.minY = y - radius;\r\n  searchArea.maxX = x + radius;\r\n  searchArea.maxY = y + radius;\r\n```\r\n\r\n? Because the light is in the center, and you must identify obstacles that are around it, in a square that is containing the light.', 'comment_created': datetime.datetime(2020, 6, 15, 20, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440432564, 'comment_body': ""Why adding the hit boxes of the object? The object *is* the light, so it should not be taken into account of the *light* polygon because... well because it's the light itself :D \r\nThe rays are emitted from the point (`this._object.x`, `this._object.y`) are are stopped by the obstacles around (`this._manager.getAllObstaclesAround`). You only care about the hitboxes of these objects."", 'comment_created': datetime.datetime(2020, 6, 15, 20, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440433441, 'comment_body': ""Never use directly hitBoxes, it's a protected member of gdjs.RuntimeObject. Instead, use `getHitBoxes`: `item.owner.getHitBoxes()`"", 'comment_created': datetime.datetime(2020, 6, 15, 20, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440435024, 'comment_body': 'This is a point, so prefer to declare it as such for readibility and to help the JS engine by never modifying its length:\r\n\r\n```\r\nvar minPOI = [0, 0];\r\n```\r\nthen later:\r\n```\r\nminPOI[0] = poi.closeX\r\nminPOI[1] = poi.closeY\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 20, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440436103, 'comment_body': 'As explained in my other comment:\r\n\r\n```\r\nminPOI[0] = poi.closeX\r\nminPOI[1] = poi.closeY\r\n```\r\n\r\nthis allocates no memory at all, just assigning two integers in memory, which is way way faster than erasing an array (`minPOI.length = 0;`), creating a new array (`[poi.closeX, poi.closeY]`), calling a function (`push`) that will probably then manipulate your array.', 'comment_created': datetime.datetime(2020, 6, 15, 20, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440437000, 'comment_body': ""unless radius was once stored as a string, you should be able to always do `this._radius = lightObjectData.content.radius`. No need to handle string, they should never appear here. If they do, it's a configuration problem in the extension."", 'comment_created': datetime.datetime(2020, 6, 15, 20, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440438640, 'comment_body': 'Oh ok I understand that you made the choice of having the light x,y position to be the top-left.\r\nI wonder if we should instead use the center of the light as the x, y position.\r\n\r\nIt sounds naturally for a light, because it\'s where the light is emitted :) \r\nThere are ways to tell the object where the ""top-left"" of the object is, using \r\ngdjs.LightRuntimeObject.prototype.getDrawableX and gdjs.LightRuntimeObject.prototype.getDrawableY.\r\n\r\nSee my other comment later :) ', 'comment_created': datetime.datetime(2020, 6, 15, 20, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440439418, 'comment_body': 'See other comments, I recommend we use this._object.x and this._object.y as the center coordinates.', 'comment_created': datetime.datetime(2020, 6, 15, 20, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440440063, 'comment_body': 'Also, unless you need to pass this as a point to a function, avoid allocating an array in memory and just directly use `this._object.x` and `this._object.y`.\r\nIf you want to name them as center, do `var centerX = this._object.x;` and `var centerY = this._object.y;`.\r\n\r\nNot a huge deal, but avoiding allocating arrays and objects can help reducing the pressure on the garbage collector.', 'comment_created': datetime.datetime(2020, 6, 15, 20, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440445356, 'comment_body': ""Use atan2 to compute an angle from a vector, not atan which will give you only a limited range of angles:\r\n`var angle = Math.atan2(ydiff, xdiff);`\r\n\r\n**Note the order of parameters**, y difference is first.\r\nIf you're unfamiliar with atan2, see a few explanations [here](https://stackoverflow.com/questions/283406/what-is-the-difference-between-atan-and-atan2-in-c#:~:text=atan(x)%20Returns%20the%20principal,%2Fx%2C%20expressed%20in%20radians.&text=You%20can%20use%20atan2%20if%20you%20need%20to%20determine%20the%20quadrant.) and [there](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions) - it's very useful and basically always used to get an angle :) "", 'comment_created': datetime.datetime(2020, 6, 15, 21, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440445475, 'comment_body': ""(you won't need these with atan2)"", 'comment_created': datetime.datetime(2020, 6, 15, 21, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440445879, 'comment_body': 'Your function is not returning anything if the angle are equal. Return 0 in this case.', 'comment_created': datetime.datetime(2020, 6, 15, 21, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440450510, 'comment_body': 'getHeight, getWidth are good :) \r\n\r\nI think we should consider, as mentioned in other comments, the center of the light as its x,y position. This would be especially useful with things like directional lights later, or just to be able to increase/reduce the radius of a light without having it moving ;) \r\nSo in addition to these 2 methods, for the engine to understand that the top-left of the object is not at the position x,y, you can redefine the methods getDrawableX and getDrawableY:\r\n\r\n```\r\ngdjs.LightRuntimeObject.prototype.getDrawableX = function() {\r\n    return this.x - this._radius;\r\n};\r\n\r\ngdjs.LightRuntimeObject.prototype.getDrawableY = function() {\r\n    return this.y - this._radius;\r\n};\r\n```\r\n\r\nThis will be used by the engine for things like the draggable behavior, the culling (objects that are outside of the screen are not rendered), etc...', 'comment_created': datetime.datetime(2020, 6, 15, 21, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440451321, 'comment_body': ""Let's give more descriptive names to what we manipulate:\r\n`hitBoxes` => `obstaclesHitBoxes`\r\n`polygons ` => `obstaclesPolygons`\r\n`vertices ` => `obstaclesVertices`\r\n\r\nso that it's obvious when we read the code later what are these vertices coming from."", 'comment_created': datetime.datetime(2020, 6, 15, 21, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440451926, 'comment_body': ""We'll replace `.flat(1)` in the future by (potentially) nested loops, because flat is ES6. For now, concentrate on making this work, add this to a to do list in the trello or in the code :) "", 'comment_created': datetime.datetime(2020, 6, 15, 21, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440454864, 'comment_body': ""When you launch a raycast against a polygon, the result is:\r\n- was there even a collision between the ray and the polygon? (`collision` boolean)\r\n- coordinate of the closest point between the ray and the polygon (closeX, closeY)\r\n- the squared distance of this point (`closeSqDist`)\r\n- coordinate of the farthest point between the ray and the polygon (closeX, closeY). You can picture it as the point behind the polygon, if you think of the ray as continue through the polygon:\r\n- the squared distance of this point (`farSqDist`)\r\n\r\n![image](https://user-images.githubusercontent.com/1280130/84707479-acd65f80-af56-11ea-9fcf-9523981ddb80.png)\r\n\r\nIn our algorithm, we don't need the farX, farY point :) "", 'comment_created': datetime.datetime(2020, 6, 15, 21, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440461432, 'comment_body': ""Only do this if poi.collision is true. If it's false, the ray did not touch anything."", 'comment_created': datetime.datetime(2020, 6, 15, 21, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440462052, 'comment_body': ""Almost! This should be `minDist = halfOfDialog*halfOfDialog` because we're comparing **squared distances**. Also, call this `minSqDist`."", 'comment_created': datetime.datetime(2020, 6, 15, 21, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440463611, 'comment_body': ""Actually, the default point should be `var minPOI = [center[0] + halfOfDiag * Math.cos(angle), center[1] + halfOfDiag * Math.sin(angle)];` (corresponding to a squared distance of `minSqDist = halfOfDialog*halfOfDialog`)\r\n\r\nBecause it's reused a lot, store it once:\r\n```\r\nconst targetX = center[0] + halfOfDiag * Math.cos(angle);\r\nconst targetY = center[1] + halfOfDiag * Math.cos(angle);\r\n```\r\n\r\nand reuse it in `raycastTest`."", 'comment_created': datetime.datetime(2020, 6, 15, 21, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 440816312, 'comment_body': ""> Why adding the hit boxes of the object?\r\n\r\nWe'll need to add the hitbox of the object because we need to know the intersection points on the boundary of mesh as well, to generate a complete geometry.\r\n\r\n![Screenshot (2)](https://user-images.githubusercontent.com/39851078/84774953-2a07e000-affc-11ea-9e5d-3414b415b9e1.png)\r\n\r\nIn this article https://ncase.me/sight-and-light/ (and the other articles as well) you can see that points of intersection with the boundary of light is required to create triangles.\r\n"", 'comment_created': datetime.datetime(2020, 6, 16, 12, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 440817097, 'comment_body': ""Yup, this is why I'm getting `[0, 0]` for all the vertices of hitbox 😓 "", 'comment_created': datetime.datetime(2020, 6, 16, 12, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 441166560, 'comment_body': ""As discussed that's indeed required in our algorithm, good spot!"", 'comment_created': datetime.datetime(2020, 6, 16, 22, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}]","[{'commit_sha': '17887ae2820e7d515c3e715b649f884017756624', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29575b11d5cdc5a2f525a43e8fb6a5903ee3fa74', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b81f7cbc09fce274579272ce977d40e3d2ca41c', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd74eee3381bf8aebbd0976aa9db691c340d8f6c', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa6d7d6dcc421d85ccbc6c6241fee811966b1118', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a995f5e0ed14a3046f114c5bc2c52f5d30dde7d', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df906e49fe71645e11eabe49809886cec2f95a3e', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce4a455771ed63b5571368f046be5719a78aae8d', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f347dae0dc7dc4b89f8fa39c5c736513144c10b9', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '767e40297c9d1dfd6d584453086fc846bf747694', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d540c2e6c2e05c3d36f011a73c5939a63cd855d', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05b21cf5eafdab4c0cad08f70973c1721638ba3e', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca496056f0bc0b356413d3e921414a2170566efa', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f3085330d37ddd767cf862d11bcdbdd217c4f42', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd897ccd7c69e48e1f184c0bd87b378cac11501f', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '374f0f6cae8516c77fb80773523f2a95d0e54fe6', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dd74b716ac4d4343ec04e79f815262ca8da24a7', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae321a303e5bde25485964c0ed039b703926fc67', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe793498b5030f0cb0ba07ecf5b9bb194bda8c6', 'committer_username': 'Quarkstar', 'committer_name': None, 'committer_email': 'quarkstar9@gmail.com', 'commit_date': datetime.datetime(2017, 9, 21, 12, 54, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7952b3182ea45a8dc832b5ee48581c13d0fd52e6', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9f9a96cfb347ea45766981759713686b43a1e2b', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa0f0690c6b9e6bc5507e901263e5bbf8d4ef950', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e11e13ad9d8fb39e1abba12ec6e0837b7d92ef2', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eebf7ff2921665ce5afbdc20ae2af2208c1a96c5', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c70141a9a3957255808798409af39a21752ac502', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f590a33755566edf90f2e6b0fae2034112e9e9a', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d8bbeef3f8850184a9818cb1dd51aff9828819', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92e542cebf79e492675bb3fcdf0a4d518bb19781', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '302c473b3498674e52d47ee1cc200f1729176119', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86a9385cc1140316f76cc81db4432d30ff2038e8', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0110b6f5e5b4ceec01253ecf8e1998789d2f4ae7', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a66e39ffce3b03b8915bf942a0067426fbfd6f', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77cfd13394103f748a066e9982c547b169c9f6aa', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '285be10da0965de479b3a0f1a980405b2f02c6e8', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b9aee88fa823028bdf7b1025310e04044c3eae0', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05cfb09d0abfbf35452ca25d9fea10dab37da1fe', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4133d572092478a738c28624e595838f85cf9397', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}]",Harsimran Singh Virk,39851078,,User,,28,,3,24
436534894,Dynamic Lights (GSoC),Previous PR: #1783,False,1825,https://api.github.com/repos/4ian/GDevelop/pulls/1825,https://github.com/4ian/GDevelop/pull/1825,closed,1643,82,24,34,5,87,0,0,[],2020-06-18 15:00:59+00:00,2020-07-20 12:18:40+00:00,2755061.0,"31 days, 21:17:41","[{'comment_id': 442308915, 'comment_body': '@4ian is there a way to use only one instance of `Float32Array` and updating it, instead of creating a new instance every time? I\'m not familiar with ""updating"" typed arrays. 😅 Maybe we could then use `this._vertexBuffer` and `this._indexBuffer`?', 'comment_created': datetime.datetime(2020, 6, 18, 15, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 442350850, 'comment_body': 'Are `.reduce()` and `.concat()` es5? ', 'comment_created': datetime.datetime(2020, 6, 18, 16, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 442422591, 'comment_body': ""Is there a reason for removing the tracking by size? This means that an obstacle being resized won't be updated in the RBush, and so could be not picked as obstacle around a light, no?"", 'comment_created': datetime.datetime(2020, 6, 18, 18, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442423028, 'comment_body': ""If you don't need this function, feel free to remove it entirely. The default implementation is empty."", 'comment_created': datetime.datetime(2020, 6, 18, 18, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442423256, 'comment_body': ""Let's call this `_debugDraw` or `_debugMode`."", 'comment_created': datetime.datetime(2020, 6, 18, 18, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442468771, 'comment_body': 'The type annotation should probably be on this line, and should be updated', 'comment_created': datetime.datetime(2020, 6, 18, 19, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442477174, 'comment_body': 'We can just call the extension ""Lights"" for the user - the implementation according to the game engine is a detail :)', 'comment_created': datetime.datetime(2020, 6, 18, 20, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442477401, 'comment_body': '""Allow to display lights on the screen and mark objects as obstacles for the lights.""', 'comment_created': datetime.datetime(2020, 6, 18, 20, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442478290, 'comment_body': 'Let\'s call it ""Light"" (it\'s indeed experimental, but we\'ll mark it in the extension later if needed)', 'comment_created': datetime.datetime(2020, 6, 18, 20, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442478445, 'comment_body': ""'An object displaying a light on screen.'"", 'comment_created': datetime.datetime(2020, 6, 18, 20, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442478652, 'comment_body': ""Let's add a // TODO here :) "", 'comment_created': datetime.datetime(2020, 6, 18, 20, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442480622, 'comment_body': ""Let's put a TODO here too."", 'comment_created': datetime.datetime(2020, 6, 18, 20, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442480874, 'comment_body': 'Actually, take a look at a file called `lightIcon32.png` ;)', 'comment_created': datetime.datetime(2020, 6, 18, 20, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442482228, 'comment_body': ""Avoid `map` as much as possible in the game engine because:\r\n- it requires a function to be passed, which is allocated then immediately sent to the garbage collector.\r\n- it returns a new array, which also create garbage that put pressure on the JS garbage collector.\r\n\r\nAlso in this case, a color is not an arbitrary array... it's an array of three components. Let's use the slightly more verbose code:\r\n\r\n```\r\nvar objectColor = runtimeObject.getColor();\r\nthis._color = [objectColor[0]/255, objectColor[1]/255, objectColor[2]/255];\r\n```"", 'comment_created': datetime.datetime(2020, 6, 18, 20, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442483872, 'comment_body': 'We should probably ensure that the radius is >= 1 to avoid divisions by zero later in the shaders.', 'comment_created': datetime.datetime(2020, 6, 18, 20, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442488168, 'comment_body': 'They are, but reduce is like map, it\'s taking a function (allocation at each call) and returns a new object, and concat returns a new array. Lots of allocations - which are perfectly fine in an app but not in a game where we have 16ms to render a frame and want to reduce the pressure on the memory allocations.\r\n\r\nInstead, do it the ""old way"" (also, use variable names defining what is inside, here `raycast` is not a good hint at what the variable is holding):\r\n```\r\nvar flattenVertices = [this._object.x, this._object.y];\r\nvar vertices = this.raycastTest();\r\nfor(var i = 0;i<vertices.length;++i) {\r\n  flattenVertices.push(vertices[i][0]);\r\n  flattenVertices.push(vertices[i][1]);\r\n}\r\n```\r\n\r\nsee the difference between vertices, which is the plural of vertex, meaning that the variable is holding multiples vertex. A vertex being an array of two numbers. In TypeScript annotations, it\'s `@type {Array<Vertex>}` with `Vertex` being a typedef for `number[]` (or Array<number>, but I think number[] gives a hint that it\'s a fixed size).\r\n\r\nwhile flattenVertices is the version where every item of the array is the x or y position of the vertex (`@type {Array<number>}`)', 'comment_created': datetime.datetime(2020, 6, 18, 20, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442501890, 'comment_body': ""Yes totally! :) I think we should store the vertexBuffer and the indexBuffer as properties of the object. \r\nFloat32Array are not resizable, which is I think still kind of fine. We can:\r\n- set _vertexBuffer to null at the creation of the object\r\n- when the vertices are updated, either:\r\n  - the new vertices have the same size as before (will be the case in 99% of cases, because even if an object is moving, most of the time it will stay near the light, and then when it's gone outside of the light radius, well it's gone!), in which case you don't recreate the Float32Array but update it.\r\n  - or the new vertices length is different, in which case you recreate a new Float32Array (there might be some optimisation like keeping the same array if it's not too large, and just ignore the last vertices in the shader??).\r\n\r\nSame idea for indexBuffer - we should strive to avoid allocations and reuse them as possible. No reason we have to allocate them at every frame (it's for sure costly when we have lots of lights)"", 'comment_created': datetime.datetime(2020, 6, 18, 21, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442502067, 'comment_body': 'See if you can make a ""dumb loop"" here', 'comment_created': datetime.datetime(2020, 6, 18, 21, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442502251, 'comment_body': ""Same, it's more verbose but better make a loop to ensure you only allocate the array where you put the results."", 'comment_created': datetime.datetime(2020, 6, 18, 21, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442504672, 'comment_body': 'filter and map will both create 2 new arrays in memory. See if you can make them in a single loop. \r\nsort is fine as doing changes in place.', 'comment_created': datetime.datetime(2020, 6, 18, 21, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442505410, 'comment_body': 'To avoid having the JS engine re-create this function every time `raycastTest` is launched, let\'s instead make it ""static"" (I would name it something like: `gdjs.LightRuntimeObjectPixiRenderer.getClosestIntersectionVertex` or `gdjs.LightRuntimeObjectPixiRenderer.getClosestIntersectionPoint`)', 'comment_created': datetime.datetime(2020, 6, 18, 21, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442505854, 'comment_body': ""Initialize it to [0,0], otherwise the JS engine don't know the length so as to create in memory an array and then resize it. "", 'comment_created': datetime.datetime(2020, 6, 18, 21, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442506375, 'comment_body': 'Don\'t use abbreviations: call it ""raycastResult"" (that\'s the name used in polygon.js for what this ""thing"").', 'comment_created': datetime.datetime(2020, 6, 18, 21, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442506579, 'comment_body': 'Also, avoid abbreviations. I would simply call it: `closestVertex`', 'comment_created': datetime.datetime(2020, 6, 18, 21, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442507245, 'comment_body': ""It's hard to follow up what's going on here without knowing about the algorithm. Can you add comments for each of the two loop describing what you're constructing?"", 'comment_created': datetime.datetime(2020, 6, 18, 21, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442507544, 'comment_body': 'Actually `_debugMode` by consistency with the rest', 'comment_created': datetime.datetime(2020, 6, 18, 21, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442513149, 'comment_body': 'Oh, I guess I misunderstood this part, I thought height and width represents the ""radius * 2"" of the light (whereas it\'s about the light ""obstacle"", not light object) 🤦Nevermind, I\'ll add it back :)', 'comment_created': datetime.datetime(2020, 6, 18, 21, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 442513801, 'comment_body': 'Yup, this was copy pasted from the Example Object.', 'comment_created': datetime.datetime(2020, 6, 18, 21, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 442516236, 'comment_body': ""In most of the cases map could be easily avoided :) If it's better to use verbose way then we should do that. Also using declarative methods was the reason for issues with rendering :D"", 'comment_created': datetime.datetime(2020, 6, 18, 21, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 442519043, 'comment_body': 'I heavily favor them in the IDE, because in the app it\'s more important to have a very clear code and you can convey with them the transformation on ""data"", which is flowing from one function to the other.\r\n\r\nIn the game engine, the approach is still about keeping things clear of course, but we have to ensure a maximum performance as possible and for this try to allocate ""statically"" the objects as much as possible, reuse existing variables/arrays, minimize copies of data. Which often means relying to ""good old"" manual loops, and even avoid creating objects if two numbers, or a few variables can do the trick :) \r\nYou can see at various place in the game engine that instead of passing a new object (for example, the result of raycastTest), it\'s a static object that is returned (the same object which is always reused).', 'comment_created': datetime.datetime(2020, 6, 18, 21, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442523395, 'comment_body': ""I'll add comments before the loops :) The basic idea is this: \n\n1. Vertex buffer contains all the points we get after raycasting. Let's take the example of simplest case, when we only have the 4 vertices of quad. \n\n0th vertex is the center, we then have the other 4 points. This means we store 5 vertices. Therefore the size of vertex buffer = `2 * 4 + 2 = 10`. (4 = number of vertices we get from raycasting, we have factor of 2 here because each vertex has x and y, `+ 2` comes from having center as 0th vertex).\n\n2. Index buffer follows a simple pattern ;) We need to render triangles, so the pattern goes like this: 0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 1 (where 0 represents center, and this pattern forms triangles with center and two adjacent vertices) Also the last triangle should end up at the first vertex to make a close polygon. \n\n"", 'comment_created': datetime.datetime(2020, 6, 18, 21, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 442534345, 'comment_body': ""Unrelated stuff, I've seen some code in JsExtension, `.setType('colour')`, should I use that instead of string for color? "", 'comment_created': datetime.datetime(2020, 6, 18, 22, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 442537810, 'comment_body': ""Could be a good idea for consistency. This color is stored as a string, you'll need to do transform it, search for `hexToRGBColor` in the codebase and make a static method for it if needed :) "", 'comment_created': datetime.datetime(2020, 6, 18, 22, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442538499, 'comment_body': 'Sounds good, a similar short but helpful explanation in the comment can goes a long way in allowing a reader to understand what\'s going on :) \r\nThinking of indexes, we should give another try at the ""Triangle Fan"" draw mode, in theory this can reduce by two (more or less?) the number of indexes/vertex because we don\'t need to repeat the center (nor the previous points).', 'comment_created': datetime.datetime(2020, 6, 18, 22, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442541241, 'comment_body': ""Yes, I'm going to try triangle fans once more. If it works out there will be a huge benefit to memory (even on the GPU side). We wouldn't need the index buffer at all, and there will be `n + 2` vertices in vertex buffer, n being the number of vertices calculated by the raycasting algo. "", 'comment_created': datetime.datetime(2020, 6, 18, 22, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 442786668, 'comment_body': ""Should it be called _Light_ or _Light Object_? (It's more or less about the consistency of naming, all the other stuff are called object, like _Tiled Sprite Object_, _Text Object_ etc)"", 'comment_created': datetime.datetime(2020, 6, 19, 11, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 442812828, 'comment_body': '* In the name *displayed to the user*, we should call it simply ""Light"", as other objects don\'t have ""Object"" in their name (it\'s implied in the interface, you know that you\'re dealing with an object).\r\n* For the internal object name, ""LightObject"" (as you already did) is fine and more explicit. This is especially important because the extension is about ""Lighting"", which is generic, and then provides to the user multiple ""building blocks"" which are: an object (LightObject), a behavior for marking objects as casting shadows (LightObstacleBehavior).', 'comment_created': datetime.datetime(2020, 6, 19, 12, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442813057, 'comment_body': 'Would be awesome if we can get this to work 👍', 'comment_created': datetime.datetime(2020, 6, 19, 12, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 442963580, 'comment_body': ""I tried this again, didn't work :( It renders with horrible artifacts 😓 (and sometimes doesn't show up on the screen at all)."", 'comment_created': datetime.datetime(2020, 6, 19, 17, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 446324490, 'comment_body': ""@4ian what do you think about this? I guess maybe having a texture this big is the reason for slow fillrate? But rendering a layer to texture would mean rendering the entire screen, right? Either way, I'll maybe checkout a new branch from this point (considering you don't feel like something's wrong here) to try out other things (like actually using this texture in a test game).  "", 'comment_created': datetime.datetime(2020, 6, 26, 17, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 449581980, 'comment_body': ""I'm not sure about this, we are checking whether the base layer moved or not every frame. We could simply add an action to change the camera of lights layer (when we change base layer's camera). I don't think the performance hit we get due to the overhead of checks is really justified.\r\nWhat do you think @4ian? Should we even do this automatically or not? If yes, do you think we could have a better way of doing it?\r\n "", 'comment_created': datetime.datetime(2020, 7, 3, 13, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 449768122, 'comment_body': 'Can you explain why this bind method call is needed?', 'comment_created': datetime.datetime(2020, 7, 4, 12, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 449768701, 'comment_body': '> Should we even do this automatically or not? \r\n\r\nI think yes, at least we should have an option ""automatically follow the base layer"" :) \r\nSo that when we\'re creating a lighting layer we activate:\r\n- ""automatically follow the base layer"" \r\n- the render texture\r\n- a default kawase blur filter (much faster than the traditional blur) + automatically use blend mode add on the filter.\r\n\r\n\r\n>  If yes, do you think we could have a better way of doing it?\r\n\r\nI think we can just do a `this._layer.setCameraX(this._baseLayer.getCameraX());` (in gdjs.Layer, not necessarily in the pixi renderer) (this ""automatically follow the base layer"" option should be something independent from pixi).\r\nNo need to store the layer in this._baseLayer nor to do the checks against the X/Y position, because:\r\n- the checks will be more costly than just doing the assignment.\r\n- it\'s probable that the X/Y position are changed every frame anyway :)', 'comment_created': datetime.datetime(2020, 7, 4, 12, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 449769038, 'comment_body': ""Since webgl/opengl is a state machine, there's only one binding point for framebuffers. (Pixi's renderTexture is just a framebuffer with a color attachment). Now, it could very well be the case that something else was bounded before we bind the renderTexture and we should, therefore, leave it to the correct state (ie, bind the `oldRenderTexture` again, it might be `null` in most of the cases, but we don't care, we've left the binding point to the state it initially had)."", 'comment_created': datetime.datetime(2020, 7, 4, 12, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 449770216, 'comment_body': 'Can you explain a bit more about doing stuff in gdjs.Layer? Do you mean I should move the `syncWithBaseLayer` funtion to gdjs.Layer instead? \r\n\r\n> No need to store the layer in this._baseLayer\r\n\r\nI still need some reference to the base layer, right? Even if I move it to gdjs.Layer I need to have some reference to base layer, no? ', 'comment_created': datetime.datetime(2020, 7, 4, 12, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 449777527, 'comment_body': '> Do you mean I should move the syncWithBaseLayer funtion to gdjs.Layer instead\r\n\r\nYes that\'s my idea. Having a layer automatically following the base layer is a feature that is not tied to the rendering engine, so I think it should be in gdjs.Layer - the PIXI renderer is just ""reading"" into gdjs.Layer to do its job of rendering the layer.\r\n\r\n>  Even if I move it to gdjs.Layer I need to have some reference to base layer, no?\r\n\r\nYou can fetch it using `getLayer("""")` at every frame I think?', 'comment_created': datetime.datetime(2020, 7, 4, 14, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 449784072, 'comment_body': 'Note that the base layer is supposed to be always existing (by convention) and there is no reason for it to be changed once created, so keeping a reference to it is ok - but calling `getLayer("""")` should be very fast (it\'s looking into a hashtable aka a JS object) so it\'s ok to make this call - so that in the future if for some reason the reference to the layer changes (you never know), we\'re safe. ', 'comment_created': datetime.datetime(2020, 7, 4, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 449785099, 'comment_body': 'I realized `syncWithBaseLayer` shouldn\'t be called inside this if block, maybe there would be some other condition like ""automatically follow base layer"" which makes more sense.\r\n\r\nEDIT: Also another realization, this could even be called inside `gdjs.Layer\'s update()` instead of `gdjs.LayerPixiRenderer\'s updateTime()`.', 'comment_created': datetime.datetime(2020, 7, 4, 16, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 449785436, 'comment_body': 'Yes that\'s why I think it\'s a good thing to put this in gdjs.Layer - the option to  ""automatically follow base layer"" (which can be a checkbox somewhere in the UI, as well as a condition and action to test/enable/disable it) is not tied to Pixi and should be working entirely from `gdjs.Layer`. In this case, `update` seems like the best candidate where to do this :) ', 'comment_created': datetime.datetime(2020, 7, 4, 16, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 449785637, 'comment_body': 'Question:\r\nShould we maybe return null at this point? Does returning an empty array make it live longer than it needs to be, and would it pollute the scope of another function (`updateBuffers()`) as well? ', 'comment_created': datetime.datetime(2020, 7, 4, 16, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 449860049, 'comment_body': ""I think it's unlikely to make a huge difference, and returning an empty array is not polluting anything. I think it's fine to keep it! It's less surprising for the caller (you know that you'll get an array in all cases, even if empty in case of no obstacles at all :))"", 'comment_created': datetime.datetime(2020, 7, 5, 10, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 449860249, 'comment_body': ""Let's add a comment describing what is this manipulation done on the subArray, explaining that it's an optimization to avoid re-allocating buffers :)"", 'comment_created': datetime.datetime(2020, 7, 5, 10, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 449860294, 'comment_body': 'typo: obstacles', 'comment_created': datetime.datetime(2020, 7, 5, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 449860415, 'comment_body': 'Let\'s find a name that explain what is returned/done in this function, and that it\'s fairly expensive. Something like `computeLightVertices`? (compute = ""expensive"")', 'comment_created': datetime.datetime(2020, 7, 5, 10, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 453176793, 'comment_body': ""I didn't find any issues with it, tell me if it's okay to bump up the version :)"", 'comment_created': datetime.datetime(2020, 7, 11, 9, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 455672015, 'comment_body': ""Yes I don't think it's too risky :) "", 'comment_created': datetime.datetime(2020, 7, 16, 10, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 455673527, 'comment_body': 'nit: `this.setState({ isLightiningLayerDialogOpen: false })`\r\n\r\nsetState is already doing shallow merge', 'comment_created': datetime.datetime(2020, 7, 16, 10, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 455674278, 'comment_body': 'I know I\'m a pain to ask for renaming, but could we rather name this (and associated methods): `followBaseLayerCamera`?\r\n\r\n""Follow"" indicates the notion of spatial position, while ""sync"" can be about anything.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 455674581, 'comment_body': 'Prefer saving attributes with the same names as their variables: `ambientLightColorR`, same for G and B', 'comment_created': datetime.datetime(2020, 7, 16, 10, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 455675746, 'comment_body': 'nitpicking: To avoid doing a splice, you can do:\r\n```\r\nconst menuTemplate = [ \r\n { ... },\r\n ...(isLightingLayer ? [{ label: ..., click: ... }] : [])\r\n { ... },\r\n]\r\n```\r\n\r\nit\'s slightly more readable because it avoids having the ""Edit lighting layer"" option to be misplaced if someone update the menu template and forget to change the splice. Also you don\'t have to count indexes in your head :) ', 'comment_created': datetime.datetime(2020, 7, 16, 10, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 455676237, 'comment_body': 'nit: simply name this ""onClose""', 'comment_created': datetime.datetime(2020, 7, 16, 10, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 455677283, 'comment_body': 'nit: see my other comment, let\'s give these more specific names, and rename ""syncWithBaseLayer"" to ""followBaseLayerCamera""', 'comment_created': datetime.datetime(2020, 7, 16, 10, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 455717405, 'comment_body': '@4ian should I rename the getter/setter as GetFollowBaseLayerCamera/SetFollowBaseLayerCamera? ', 'comment_created': datetime.datetime(2020, 7, 16, 11, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 455749373, 'comment_body': 'Yes please! :)', 'comment_created': datetime.datetime(2020, 7, 16, 12, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 455771825, 'comment_body': ""@4ian I'll be renaming the functions as:\r\n\r\n- SetAsLightingLayer()\r\n\r\n- IsLightingLayer()\r\n\r\n- SetToFollowBaseLayerCamera()\r\n\r\n- IsFollowingBaseLayerCamera()\r\n\r\nAre they fine? Or suggest something better :)"", 'comment_created': datetime.datetime(2020, 7, 16, 13, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 455996989, 'comment_body': 'For the setters, I would go for:\r\n* SetLightingLayer (or SetIsLightingLayer), with a bool as argument\r\n* SetFollowBaseLayerCamera (same, with a bool as argument)\r\n\r\nthe getters sounds fine', 'comment_created': datetime.datetime(2020, 7, 16, 18, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456475724, 'comment_body': ""@4ian how should I fix this? I'm not sure if I could really check `objectOrInstance` is `gdObject` or `gdInitialInstance`, is there a way of doing that? "", 'comment_created': datetime.datetime(2020, 7, 17, 14, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 456478128, 'comment_body': ""`<InfoBar>` wasn't really working in either `<ObjectsList>` or `InstancesEditor`, I decided to have them in `SceneEditor` instead, which I guess is consistent with the other `InfoBars` as well, is it okay? "", 'comment_created': datetime.datetime(2020, 7, 17, 14, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 456483163, 'comment_body': ""I'm a bit confused here 😅, objectsContainer is defined as a `gdObjectsContainer`, but in `SceneEditor`, the prop passed for it is a `gdLayout` https://github.com/4ian/GDevelop/blob/2ca593ba2b980b523aa963a5acce7f6dd0153a7c/newIDE/app/src/SceneEditor/index.js#L104 https://github.com/4ian/GDevelop/blob/2ca593ba2b980b523aa963a5acce7f6dd0153a7c/newIDE/app/src/SceneEditor/index.js#L992 Am I missing something here? Although, everything seems to work fine, but flow is complaining right now and I feel something is wrong here. :/ "", 'comment_created': datetime.datetime(2020, 7, 17, 14, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 456486479, 'comment_body': 'We need to find a better name for this I guess, right now it could handle objects and instances, ""Objects""AdditionalService seems that it is only related to objects. This could become quite generic and handle much more ""events"" (not the most accurate word) in the future, not just ""onObjectAdded"" and ""onInstanceAdded"", therefore we could potentially automate a lot of stuff. :)', 'comment_created': datetime.datetime(2020, 7, 17, 14, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 456515235, 'comment_body': 'I would recommend moving this into `newIDE/app/src/Hints`. `Hints/index.js` is already used to expose to the IDE some ""hints"" to display to the user for some object/behaviors.\r\n\r\nProbably we could also simply this because I think the ""service"" is a bit overengineered.\r\nBasically, we just need two functions `onObjectAdded` and `onInstanceAdded` and they can fetch the object type (in case of instance) by themselves. Internally, they can use a map to associate the object type to a closure called to do the work, but that\'s just an implementation detail.', 'comment_created': datetime.datetime(2020, 7, 17, 15, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456516388, 'comment_body': 'I think you\'re trying to fit two different stuff in a single function :)\r\nWe don\'t really need something to return these ""additional service"" because we just care about either running `onObjectAdded` or `onInstanceAdded `\r\n\r\nInstead, I would just export these two functions and use them directly (passing them the object or instance, layout, project, and maybe a callback to set the infobar or whatever is needed).', 'comment_created': datetime.datetime(2020, 7, 17, 15, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456520286, 'comment_body': 'I\'m not sure it\'s good to pass ""onAdditionalServiceComplete"". Let me explain :)\r\n\r\n- the name is not super helpful by itself (""additional service"" is very generic),\r\n- it adds the complexity of understanding what is ""InfoBarDetails"" to the reader of InstancesAdder. \r\n- More generally, this is ""leaking"" abstraction: as InstancesAdder, I should not even know that there is something called ""SceneEditor"" and I should not even worry about ""ObjectsAdditionalService"".\r\n\r\nIn other words, `SceneEditor` **uses** `InstancesEditor`, but not the other way around. \r\nIf we introduce some imports/types/classes from `SceneEditor`, this is a sign that we\'re starting to make `InstancesEditor` dependend on `SceneEditor` - i.e: we\'re coupling them.\r\n\r\nSo how to solve this then? Give to your functions/classes/components only what they need and only what you need to do their job. Here, you want to react when an instance is added? \r\nSure thing, just add a prop called ""onInstanceAdded"", which takes a gdInitialInstance as parameter. Then call it in InstancesAdder.\r\nThen run the additional work *in the parent* (i.e: in SceneEditor), or more generally in the component that is responsible for reacting to this event.', 'comment_created': datetime.datetime(2020, 7, 17, 15, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456521089, 'comment_body': ""As explained in the other comment, let's entirely remove this from this class. Just pass to the class a function to be called when an instance is added. The parent will figure out what to do, but as `InstancesAdder` you:\r\n- don't know what will happen\r\n- and you don't want to know! ;) Your job is to put instances on the scenes, not to run the work of others."", 'comment_created': datetime.datetime(2020, 7, 17, 15, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456521541, 'comment_body': ""Let's not pass the project nor the layout. If the parent needs them, it will have them. The InstancesAdder is not supposed to need them, so let's not pass them."", 'comment_created': datetime.datetime(2020, 7, 17, 15, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456521718, 'comment_body': 'Same as before, just pass a callback to this class', 'comment_created': datetime.datetime(2020, 7, 17, 15, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456523086, 'comment_body': 'Same as `InstancesAdder`, let\'s not make InstancesEditor dependent on SceneEditor, and let\'s not make it less reusable by coupling it with a complex ""InfoBarDetails"" and what not stuff.\r\nSee how it\'s done for existing ""events"": `onInstancesMoved`, `onInstancesSelected`... there is even something called `onInstancesAdded`!\r\n\r\nYou probably want to use this :) Surely you\'ll have to pass the array of added instances as an argument (which is fair).', 'comment_created': datetime.datetime(2020, 7, 17, 15, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456524674, 'comment_body': ""`gdProject` and `gdLayout` both extends `gdObjectsContainer`, i.e: they are objects container. That should work fine with Flow as long as it's in the proper direction (i.e: you can assign a project or layout to an objects container, but not the reverse)"", 'comment_created': datetime.datetime(2020, 7, 17, 15, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456524959, 'comment_body': 'Much like in InstancesEditor, see if you can run this in the SceneEditor?', 'comment_created': datetime.datetime(2020, 7, 17, 15, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456526683, 'comment_body': 'Trans is not working on variables, this will generate a translation like this `""{0}""`. Only use `Trans` on ""real sentences""\r\nUse `i18n._` instead, passing it the result of a `t` macro, which is called a `MessageDescriptor`.\r\n\r\nIn other words, store in your object the result of `t`:\r\n```\r\n{\r\n  message: t`Hello world`\r\n}\r\n```\r\n\r\nthen use i18n._ to get the translation as a string.\r\n\r\nSee how it\'s done in `Hints/index.js`', 'comment_created': datetime.datetime(2020, 7, 17, 15, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456527952, 'comment_body': ""I think it's ok, though I recommend in the state to store only one set of details (we only care about showing one of these info bar at a single time anyway), to avoid polluting the state with both the one for the object and the instance."", 'comment_created': datetime.datetime(2020, 7, 17, 15, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456530261, 'comment_body': 'You can think of InstancesEditor as saying to its parent: ""hey what\'s the deal with your info bar and your complex stuff that you imported from SceneEditor? Leave me alone, if you want to know when something happened then just tell me (with a prop/callback) and I\'ll tell you (I\'ll... call you back), but don\'t bother me doing your work, I\'m already doing enough"" 😄', 'comment_created': datetime.datetime(2020, 7, 17, 15, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456531997, 'comment_body': '@4ian I guess we can handle everything in the SceneEditor itself? As I see it, we already have a ""stream of events"" flowing across different editors to SceneEditor (for eg. InstancesAdder to InstancesEditor to SceneEditor), whereas I\r\nbelieve I\'m exposing SceneEditor to other editors (ie, ObjectsList, InstancesEditor, etc) and introducing a flow in the opposite direction. My initial thought process was to declutter the SceneEditor, but I guess it is going to be cleaner even after adding code in SceneEditor (and making it a bit bulkier). ', 'comment_created': datetime.datetime(2020, 7, 17, 15, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 456533925, 'comment_body': 'Yep I agree that SceneEditor is becoming a bit cluttered/complex, but that is its nature: it\'s the component that is orchestrating the other editors :) \r\nNote that React hooks are a partial solution to this because they allow to break a component like this which is big with a lot of logic into smaller reusable logic chunks... unfortuantely for now it\'s still a class component!\r\n\r\nBut again it\'s fine to do this in the SceneEditor, being the receiver of the ""stream of event"" is basically its role. If something is too complex, it can always be extracted to a function and used by SceneEditor.', 'comment_created': datetime.datetime(2020, 7, 17, 16, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456545032, 'comment_body': 'In some way I think of this extra work as a ""boosted hint"": it\'s a hint so performant that we\'re doing work for the user :) hence why I was talking about this `Hints` folder.', 'comment_created': datetime.datetime(2020, 7, 17, 16, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456762167, 'comment_body': '@4ian Should I move the code in `Hints/index.js` then? And have an object which has two properties (functions), `onObjectAdded` and `onInstanceAdded`, which then does whatever it needs to do (map to correct object types, do extra work, send back infoBarDetails, etc). ', 'comment_created': datetime.datetime(2020, 7, 18, 7, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 456776246, 'comment_body': 'Maybe in the Hints folder but still in a file with a different name, like ""ObjectsAdditionalWork.js"" (not super fan of ""Work"" but well!).\r\nIt\'s fine to have ""Object"" in the name as instances are very tied to the concept of object. \r\n\r\nI was thinking of alternate names like ""ObjectAutomatedWork"" but can\'t find anything really satisfying!', 'comment_created': datetime.datetime(2020, 7, 18, 10, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}]","[{'commit_sha': '41de6898cb48598a653e62882493ffc7e9c0d392', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b345b83ddcb97c4d92d2e6cd6afe1b791329474b', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0836fcfcc1d0d18fcfe52472815301a2cec84f75', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '431dc98b4dc75d13fd6de4998e8c2cee8eeb4ed6', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ab7754469a18c70fcc61951f89cffeadc6dd29c', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89c8130e03cda8eb576c415409d7db40b8eb539', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0dd9edc842461e8f5fcf718c957b254c34f3c11', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a882f8d0b798caf05a79e03344f3caac306ff19', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cda04fe2778ad177e85b21456d3b0497745d858', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e9766646db04ff49d9128b9075202508c1b9a3', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b112495a2937d21344013168c29481f8bc253ff', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f31ef16769d98b1f8cd76159973195bf5eb83893', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffdeb746957271b966e922a322e3e8cb42e96cde', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fab00191bc023f110f6bd132235b1c46410615b8', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9ee8c965ace60301690dbaaf42923fc82a51a4', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cbe576a1eae3272a19337a80ff1d64c63f23c41', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '589b70c5e800103991f5347e25a0d47e98b3028c', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '755c6ace081bc1ce8430694a46560d78ce7933da', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ecc838de96a639605340e153cca077186a380c', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a753cf82d414ac33f455dd83a5a36982fda5cef4', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b596e80087b0cf16745b4c52b3f1759a915022f3', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd13596e99e9bad9a6e5fe180357c02ad7bcf9375', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4870788ef7473d31167445ad2494eb8cac5b8e54', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '908f2d677681dd4427d4faf310b1a77f42dea98a', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51461413683041ba027e5c10817bd789d551cc6f', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd565939a1935181ba26fc942d91bade35b8ea5c0', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bad1451b628b0e0668ae11900ebbfe1e2bf8a669', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31b36e8f3a33b84e1d31e1093719990e6459a41b', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43bf0bc99365b44b1bba2e132cca55e1f88fcde7', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d58ffd1f948255e180b675a83e886434f68874f', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30f9ad16c00e2d39127cd9a8a0f9c5d2c102fd00', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '657d6f0c1135ea8bd66666a0cd33bcf430792387', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c23d2737e51eaa9347ce829021d23057f844e4e', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '452dc806479b708314ea3e34bc259850fe42fea6', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}]",Harsimran Singh Virk,39851078,,User,,28,,3,24
453377121,Lighting,"Alright, @4ian I have got this branch running on top of master (instead of pixi-v5). This is cherry-picked from the previous branch with some changes related to `LayersList`. Also, notifying @NilayMajorwar about a new command I've added in `UseLayersListCommands` which uses the `LightingLayerDialog` to edit properties of lighting layer :)

(Also resolves #1883)",True,1881,https://api.github.com/repos/4ian/GDevelop/pulls/1881,https://github.com/4ian/GDevelop/pull/1881,closed,2387,228,33,57,31,137,1,0,[{'name': '🏁PR almost ready: final fixes'}],2020-07-20 12:02:14+00:00,2020-08-17 15:48:27+00:00,2432773.0,"28 days, 3:46:13","[{'comment_id': 457321922, 'comment_body': ""@4ian I'm not sure if this is good or not :/ I believe the `LayersList` wasn't updating, after adding and removing the layer twice, it was in a state where there was no lighting layer and the button was disabled as well. Now, force updating does solve the problem but I'm not sure if it's the right way :/"", 'comment_created': datetime.datetime(2020, 7, 20, 12, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 458112009, 'comment_body': 'I would recommend avoiding ""hijacking"" `onLayerModified` because: \r\n- it\'s called ""onXXX"" so usually seen as a method that the component will call when things have been modified ""inside"" the component rather than outside.\r\n- it\'s triggering potentially other stuff than just force updating.\r\n\r\nInstead, just call `forceUpdate` on layersList. The name is fine, and it\'s totally understandable that because we modified the layers list outside, we now must force the update of the layers editor.', 'comment_created': datetime.datetime(2020, 7, 21, 13, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 458114299, 'comment_body': 'Let\'s put back `_onLayerModified` ""private"" and use `forceUpdate` instead.\r\n\r\nForce updating these components showing virtualized list is fine - maybe in the future we\'ll rework them to avoid this.', 'comment_created': datetime.datetime(2020, 7, 21, 13, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 458115826, 'comment_body': 'nit: `if (xxx) return true`', 'comment_created': datetime.datetime(2020, 7, 21, 13, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 458115965, 'comment_body': 'nit: no need for this variable, just return true/false', 'comment_created': datetime.datetime(2020, 7, 21, 13, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 458858761, 'comment_body': ""@4ian I'm not so sure about it, `mapReverseFor` basically returns a list, right? I don't really want a list of booleans here, just a confirmation that a lighting layer exists (or not). Am I missing something?"", 'comment_created': datetime.datetime(2020, 7, 22, 14, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 458864988, 'comment_body': ""Or I could do something like this, \r\n`return mapReverseFor(0, layersCount, i => {`\r\n`  const layer = layout.getLayerAt(i);`\r\n`  if (layer.isLightingLayer()) return true;`\r\n`  return false;`\r\n` }).reduce((acc, value) => acc || value);`\r\n\r\nMaybe it's an overkill, but the intent could be expressed both ways, either this way or using a variable 🤔 "", 'comment_created': datetime.datetime(2020, 7, 22, 15, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 458873216, 'comment_body': 'ah my bad, of course returning in the closure won\'t work :) \r\n\r\nThen you can do something like `mapReverseFor(0, layersCount, i => layout.getLayerAt(i).isLightingLayer()).filter(Boolean).length > 0` which is a bit shorter to express the logic of ""check if there is already at least one layer that is a lighting layer"".', 'comment_created': datetime.datetime(2020, 7, 22, 15, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459761909, 'comment_body': 'nit: Set if the layer is a lightining layer or not.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459761951, 'comment_body': 'if the layer', 'comment_created': datetime.datetime(2020, 7, 23, 22, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459762046, 'comment_body': 'nit: Set if the layer automatically follows the base layer or not.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459762110, 'comment_body': 'if the layer', 'comment_created': datetime.datetime(2020, 7, 23, 22, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459762346, 'comment_body': ""nit: good practice is to end the comments with a period (even if I've not always been doing it, I try now to do so especially in function documentation)."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459762842, 'comment_body': '`True if the layer is used to display lights and renders an ambient light.`', 'comment_created': datetime.datetime(2020, 7, 23, 22, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459763344, 'comment_body': 'Let\'s add back the ""standard header"" and in particular the (new) Flow comments (I\'ve added this recently). This means that Flow will actually check your file. It might find issues that should be fixed.\r\n\r\n```\r\n// @flow\r\n/**\r\n * This is a declaration of an extension for GDevelop 5.\r\n *\r\n * ℹ️ Changes in this file are watched and automatically imported if the editor\r\n * is running. You can also manually run `node import-GDJS-Runtime.js` (in newIDE/app/scripts).\r\n *\r\n * The file must be named ""JsExtension.js"", otherwise GDevelop won\'t load it.\r\n * ⚠️ If you make a change and the extension is not loaded, open the developer console\r\n * and search for any errors.\r\n *\r\n * More information on https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md\r\n */\r\n\r\n/*::\r\n// Import types to allow Flow to do static type checking on this file.\r\n// Extensions declaration are typed using Flow (like the editor), but the files\r\n// for the game engine are checked with TypeScript annotations.\r\nimport { type ObjectsRenderingService, type ObjectsEditorService } from \'../JsExtensionTypes.flow.js\'\r\n*/ \r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 22, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459763411, 'comment_body': '`function(_/*: (string) => string */, gd/*: libGDevelop */) {`', 'comment_created': datetime.datetime(2020, 7, 23, 22, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459763523, 'comment_body': ""Let's replace all the `var` in this file by const (or let)"", 'comment_created': datetime.datetime(2020, 7, 23, 22, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459763898, 'comment_body': '`an obstacle to the light. The light emitted by lights objects will be stopped by the object.`', 'comment_created': datetime.datetime(2020, 7, 23, 22, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459764174, 'comment_body': ""Let's remove these comments"", 'comment_created': datetime.datetime(2020, 7, 23, 22, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459764177, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 7, 23, 22, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459764659, 'comment_body': '`Displays a light on the scene, with a customizable radius and color. Add then the Light Obstacle behavior to the objects that must act as obstacle to the lights.`', 'comment_created': datetime.datetime(2020, 7, 23, 22, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459765021, 'comment_body': 'Please put a real link here, even if the page does not exist: /objects/light', 'comment_created': datetime.datetime(2020, 7, 23, 22, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459765186, 'comment_body': 'Be sure to replace all the mention to DummyObject in this file', 'comment_created': datetime.datetime(2020, 7, 23, 22, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459765377, 'comment_body': 'Run Prettier on this file.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459765725, 'comment_body': ""Let's remove this comment, it's not giving much information"", 'comment_created': datetime.datetime(2020, 7, 23, 22, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459766086, 'comment_body': 'Do you think there is a chance to avoid allocating a new Float32Array at every update?', 'comment_created': datetime.datetime(2020, 7, 23, 22, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459766395, 'comment_body': 'Update the comment', 'comment_created': datetime.datetime(2020, 7, 23, 22, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459767720, 'comment_body': 'Remove this method', 'comment_created': datetime.datetime(2020, 7, 23, 22, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459767738, 'comment_body': 'You can remove this', 'comment_created': datetime.datetime(2020, 7, 23, 22, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459767804, 'comment_body': ""Let's remove this comment"", 'comment_created': datetime.datetime(2020, 7, 23, 22, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459768114, 'comment_body': 'Give a comment like done for other objects. Notably: a one sentence description, a proper typing of the parameters (using JSDoc annotations that are understood by TypeScript).', 'comment_created': datetime.datetime(2020, 7, 23, 22, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459768505, 'comment_body': ""Template literals are a relatively recent addition to JS, so this extension will only be compatible with Android 5+. I guess it's fair going forward to stop worrying about Android 4."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459768717, 'comment_body': 'You can probably put these as ""static member"" of `gdjs.LightRuntimeObjectPixiRenderer` (`gdjs.LightRuntimeObjectPixiRenderer.defaultFragmentShader = ...`) to avoid cluttering the constructor.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459768837, 'comment_body': '(same for the others)', 'comment_created': datetime.datetime(2020, 7, 23, 22, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459768926, 'comment_body': 'Run Prettier on all your files.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459770570, 'comment_body': 'Always always declare all the properties you\'re using in the constructor. Otherwise, you force the JS engine to add them on the fly to the in memory representation of the class, and so the light object internal class is now duplicated into 2 or more, one without `_defaultVertexBuffer` and another one with. \r\nLong story short it\'s very inefficient, and it is so every time you take the JS engine ""by surprise"". \r\n\r\nA good read about these hidden classes: https://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html\r\n\r\nRule of thumb: be as inflexible as possible. Always declare all your properties, using if possible the type they have, otherwise `null`. Don\'t add stuff on the fly if they are undefined - think like in C++/C where you can\'t add stuff to struct/classes.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459770716, 'comment_body': ""Same for this one. Also as it's never changing, make it a static property."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459771198, 'comment_body': 'Make this private by putting an underscore to the function name.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459771271, 'comment_body': 'obstacles.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459771402, 'comment_body': 'ubernit: prefer `obstaclesCount` or `obstaclesSize` than `noOfXXX`', 'comment_created': datetime.datetime(2020, 7, 23, 22, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459772056, 'comment_body': 'Make this function a static private function (`gdjs.LightRuntimeObjectPixiRenderer._verticesWithAngleComparator`). You\'ll avoid instanciated a function at every update and reduce pressure on the GC.\r\n\r\nAlso it forces you to find a name, and so to give a name and a typing to what ""a"" and ""b"" are.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459772476, 'comment_body': 'I\'m not convinced by this name. Usually if we name something ""result"" it\'s because we don\'t really know what\'s inside ;) \r\n\r\nSo what is this array containing. In other words: it\'s an array of what? In other words: what is the type of this? \r\nIt seems not to contain vertices, but something a tad more complex.\r\nCan you think of a name for it?', 'comment_created': datetime.datetime(2020, 7, 23, 22, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459772524, 'comment_body': 'Find a better name than result ;) ', 'comment_created': datetime.datetime(2020, 7, 23, 22, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459772660, 'comment_body': 'Same here and below', 'comment_created': datetime.datetime(2020, 7, 23, 22, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459772894, 'comment_body': 'hint: if you assign a ""result"" to a ""vertex"", it\'s probable to you could have name your result a... ""vertex"" :) \r\nMuch like types, think of names as ""flowing"" through the code and expressing implictly the type.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459773643, 'comment_body': ""Better:\r\n\r\n```\r\nReturn the light obstacle manager, if any, or null.\r\n@returns {?gdjs.LightObstaclesManager}\r\n```\r\n\r\nThe type annotation is:\r\n- explicitly showing that this can be null.\r\n- better, it's helping typescript tell you (or the future developer) if they don't handle null."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459773904, 'comment_body': ""Is there even a reason for gdjs.LightObstaclesManager not to be defined? I don't think so? We should always include I think the behavior with the object in the include files."", 'comment_created': datetime.datetime(2020, 7, 23, 23, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459774256, 'comment_body': ""Don't declare your properties conditionnaly. Always declare them. It's the *value* that can change:\r\n\r\n`this._obstaclesManager = condition ? something : null`\r\n\r\nIn other words, avoid things that are implicitly undefined at all cost."", 'comment_created': datetime.datetime(2020, 7, 23, 23, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459774456, 'comment_body': 'Also, nitpicking: `obstaclesManager`, to be consistent with the class name.', 'comment_created': datetime.datetime(2020, 7, 23, 23, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459774871, 'comment_body': 'Change the position and rotation of the layer camera to be the same as the base layer camera.', 'comment_created': datetime.datetime(2020, 7, 23, 23, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459774994, 'comment_body': ""Store `this._runtimeScene.getLayer('')` in a variable.\r\nAlso update the camera rotation"", 'comment_created': datetime.datetime(2020, 7, 23, 23, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459775209, 'comment_body': 'nit: configure your editor to always add a line break at the end of the file (""posix"" good practice)', 'comment_created': datetime.datetime(2020, 7, 23, 23, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459775764, 'comment_body': ""Always include a description to your documented function:\r\n\r\n```\r\nOne line explanation\r\n@returns {number[]} probably the same explanation\r\n```\r\n\r\nAlso explicit the format [r,g,b,a], with components in range [0, 1], because it's not a format used often in the rest of the codebase."", 'comment_created': datetime.datetime(2020, 7, 23, 23, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459775961, 'comment_body': 'Could we avoid doing this check at every update?', 'comment_created': datetime.datetime(2020, 7, 23, 23, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459776100, 'comment_body': 'If this is doing something else than updating the time, we should probably rename this to `update` (also in the Cocos files)', 'comment_created': datetime.datetime(2020, 7, 23, 23, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459776324, 'comment_body': 'Make this private with an _', 'comment_created': datetime.datetime(2020, 7, 23, 23, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459859963, 'comment_body': ""@4ian how do I run flow for files in `Extention`? Is it included in the `newIDE/app`'s `npm run flow` as well?"", 'comment_created': datetime.datetime(2020, 7, 24, 5, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 459862676, 'comment_body': ""Yes, there needs to be only one instance of Float32Array (of size 8) in this case since there's no raycasting involved :) I'll make changes for it."", 'comment_created': datetime.datetime(2020, 7, 24, 5, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 459874056, 'comment_body': 'Should I annotate it with a `@private` as well? ', 'comment_created': datetime.datetime(2020, 7, 24, 6, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 459875829, 'comment_body': 'Yes, it needs to be called after the filters are applied (because we need to change the blend mode of filters) and after all of the layers are added to the scene. So, maybe in the constructor,\r\nhttps://github.com/4ian/GDevelop/blob/693b64cddfa8c3590a36a857e6f8a544d5fe653e/GDJS/Runtime/pixi-renderers/layer-pixi-renderer.js#L22-L24\r\nafter `this._setupFilters()`?', 'comment_created': datetime.datetime(2020, 7, 24, 6, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 459880060, 'comment_body': ""> Is there even a reason for gdjs.LightObstaclesManager not to be defined\r\n\r\nI'm not sure why this happens but whenever there's no object with the obstacle behavior, the game crashes saying gdjs.LightObstaclesManager is undefined."", 'comment_created': datetime.datetime(2020, 7, 24, 6, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 459884903, 'comment_body': 'It works in the constructor after `this._setupFilters()` , should be the correct place to call it then. :)', 'comment_created': datetime.datetime(2020, 7, 24, 7, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 459887425, 'comment_body': 'I should be updating the zoom as well then, right? Differences in the scale could be a problem too I guess.\r\n', 'comment_created': datetime.datetime(2020, 7, 24, 7, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 459933484, 'comment_body': 'Yep indeed!', 'comment_created': datetime.datetime(2020, 7, 24, 9, 0, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459933979, 'comment_body': ""I filters are added/removed (which can be the case with hot reloading), it might need to be updated... let's add a TODO in the code: `// TODO: Handle update of filters`."", 'comment_created': datetime.datetime(2020, 7, 24, 9, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 459934183, 'comment_body': 'Yes you can!', 'comment_created': datetime.datetime(2020, 7, 24, 9, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460088674, 'comment_body': ""> Is it included in the newIDE/app's npm run flow as well?\r\n\r\nYes it is"", 'comment_created': datetime.datetime(2020, 7, 24, 14, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'arthuro555', 'type': 'User'}, {'comment_id': 460390832, 'comment_body': 'Always use strict types (`{| ... |}`) in Flow', 'comment_created': datetime.datetime(2020, 7, 25, 10, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460390915, 'comment_body': 'nit: You can probably move this out of the export', 'comment_created': datetime.datetime(2020, 7, 25, 10, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460391116, 'comment_body': 'nit: Consider using `export const onObjectAdded = ...` - this favors the use of functions rather than an object, so it helps static analysis and in the future can help bundlers like Rollup to do ""Tree shaking"". Seems like named exports (`export const ...`/`export class ...`) are becoming preferred to default exports for these reasons in the JS community\r\n', 'comment_created': datetime.datetime(2020, 7, 25, 10, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460391182, 'comment_body': ""Should show even be in this object type? It's a responsibility of the editor I think."", 'comment_created': datetime.datetime(2020, 7, 25, 10, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460391199, 'comment_body': 'Typing is incorrect, use `MessageDescriptor` type.', 'comment_created': datetime.datetime(2020, 7, 25, 10, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460391243, 'comment_body': 'Can you extract it in a function in this file?', 'comment_created': datetime.datetime(2020, 7, 25, 10, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460391417, 'comment_body': ""Let's add a typing for the return value to the function declaration too."", 'comment_created': datetime.datetime(2020, 7, 25, 10, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460391488, 'comment_body': 'Make a single function `getLightningLayer(layersContainer)` and use it here and in the previous function (if null, then there is no lighting layer)', 'comment_created': datetime.datetime(2020, 7, 25, 10, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460391672, 'comment_body': 'Interesting, why would you need `getScene`? I assume that code calling this would already know the scene?', 'comment_created': datetime.datetime(2020, 7, 25, 10, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460391741, 'comment_body': '`{| |}`', 'comment_created': datetime.datetime(2020, 7, 25, 10, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460391916, 'comment_body': ""Use `<ColumnStackLayout>` that is a Column that introduces `Spacer` between each item - you then probably don't need Line and Spacer at all."", 'comment_created': datetime.datetime(2020, 7, 25, 10, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460392553, 'comment_body': 'Let\'s not make this button primary, and let\'s show it on a line after Add a layer - to ensure first time users are drove to use ""Add a layer"" first.', 'comment_created': datetime.datetime(2020, 7, 25, 10, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460403748, 'comment_body': ""Uhmm, yes this is not required anywhere at all right now :) I was using this in the `LayerPixiRenderer` (since it passes `RuntimeSceneRenderer`) to query the layers. I believe this was before we added properties in Layer.h and afterward, the code changed a lot. So, I'll be removing this since it's not needed anymore :)"", 'comment_created': datetime.datetime(2020, 7, 25, 13, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 460425249, 'comment_body': '@4ian I guess if the layer is a lighting layer we should be having the ADD blend mode for filters (always?) 🤔.', 'comment_created': datetime.datetime(2020, 7, 25, 17, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 460428774, 'comment_body': 'ADD or MULTIPLY? But yeah I guess all filters should then use it.. or just the container?', 'comment_created': datetime.datetime(2020, 7, 25, 17, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460435303, 'comment_body': ""Filters are affecting the light objects, so they should he having ADD blend mode. (They are applied on the layer's container, however the container is meant to contain only light objects.) So, if the filters would have any other blend mode, they will basically be overriding light object's blend mode. "", 'comment_created': datetime.datetime(2020, 7, 25, 19, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 460435498, 'comment_body': ""> or just the container?\n\nOnly the filters applied on the lighting layer's container should be having ADD blend mode, we shouldn't really change anything else I guess.\n"", 'comment_created': datetime.datetime(2020, 7, 25, 19, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 460443832, 'comment_body': ""Ok make sense! I was wondering if there was possibility of using ADD blend mode on the container only (rather than the filters + individual light objects) (and still have a multiply on the render texture).\r\nSounds fine to use ADD on filters/objects if it's not possible :)"", 'comment_created': datetime.datetime(2020, 7, 25, 20, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460444225, 'comment_body': ""> I was wondering if there was possibility of using ADD blend mode on the container only (rather than the filters + individual light objects) (and still have a multiply on the render texture).\n\nI didn't think about this earlier 🤔 I'll inform you after trying this out :)\n\n"", 'comment_created': datetime.datetime(2020, 7, 25, 20, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 460487108, 'comment_body': ""@4ian, in the case of the lighting layer, the layer's pixi container is already removed (and replaced with lighting sprite). This way, we could handle all the cases for hot-reloading. We can reorder lighting layer as well, which will basically change the index of the sprite, instead of the container (which wouldn't even exist in the scene's container in the first place). "", 'comment_created': datetime.datetime(2020, 7, 26, 6, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 460487683, 'comment_body': ""`getRenderTexture()` could return a null value, typescript helped in identifying this 😬. So, I changed it a bit to perform a null check (and I'm not calling `getRenderTexture()` anymore because I don't want to assign anything to a new variable, ie, `var rt = this.getRenderTexture()`). "", 'comment_created': datetime.datetime(2020, 7, 26, 6, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 460531803, 'comment_body': 'That sounds fine, it\'s also the reason for calling the method ""getRendererObject"" initially - the layer can be a PIXI.Container, but also a PIXI.Sprite.', 'comment_created': datetime.datetime(2020, 7, 26, 14, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460582182, 'comment_body': ""Remove the sharedData parameter, it's not used it seems?"", 'comment_created': datetime.datetime(2020, 7, 26, 22, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460582213, 'comment_body': ""ubernitpicking: convention is one space between the `//` and the comment (I've not always followed this, but now try to do so)."", 'comment_created': datetime.datetime(2020, 7, 26, 22, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460582329, 'comment_body': 'Remove this comment, it should be fairly obvious by the method name and its implementation.', 'comment_created': datetime.datetime(2020, 7, 26, 22, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460582388, 'comment_body': 'Can we make this method, and `updateBuffers`, private with an underscore?', 'comment_created': datetime.datetime(2020, 7, 26, 22, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460582929, 'comment_body': 'it\'s not the name of the texture, but the texture itself:\r\n""the texture, if any, null otherwise.""', 'comment_created': datetime.datetime(2020, 7, 26, 22, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460582939, 'comment_body': 'true if debug mode is activated.', 'comment_created': datetime.datetime(2020, 7, 26, 22, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460582954, 'comment_body': 'Typo', 'comment_created': datetime.datetime(2020, 7, 26, 22, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460582985, 'comment_body': 'the light object', 'comment_created': datetime.datetime(2020, 7, 26, 22, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460583070, 'comment_body': ""You don't need to redefine these methods if you're just calling the base method. You can remove them."", 'comment_created': datetime.datetime(2020, 7, 26, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460583340, 'comment_body': ""You can remove this line because it's understood by convention that if there is an underscore, you must not call it outside of the class."", 'comment_created': datetime.datetime(2020, 7, 26, 22, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460583362, 'comment_body': 'You can remove this TODO?', 'comment_created': datetime.datetime(2020, 7, 26, 22, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460583544, 'comment_body': 'Enable the user of a PIXI.RenderTexture to render the PIXI.Container of the layer and, in the scene PIXI container, replace the container of the layer by a sprite showing this texture.', 'comment_created': datetime.datetime(2020, 7, 26, 22, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460583619, 'comment_body': 'Get the render texture used to display this layer. If not render texture is used, it is created.', 'comment_created': datetime.datetime(2020, 7, 26, 22, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460583802, 'comment_body': '""The light object was automatically placed on the Lighting layer.""', 'comment_created': datetime.datetime(2020, 7, 26, 22, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460583913, 'comment_body': 'Be more descriptive (even if concise) in your message to the user:\r\n""A lighting layer was created. Lights will be placed on it automatically. You can change the ambient light color in the properties of this layer""', 'comment_created': datetime.datetime(2020, 7, 26, 22, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460584206, 'comment_body': 'calling this ""services"" is a bit weird because it\'s called ""objectType"" as a variable. ""Service"" is also very generic, everything is a service in a way :) Can we think of a better name?\r\nIf your file is called ""ObjectsAdditionalWork"", then it must surely store an object called ""objectsAdditionalWork"", or something using the same vocabulary. Then if it\'s indexing some ""additional work"" by ""object (type)"", then when you\'re accessing it by giving a type, you\'re then getting something called... ""additionalWork""?', 'comment_created': datetime.datetime(2020, 7, 26, 23, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460584328, 'comment_body': 'The lighting layer renders an ambient light on the scene. All lights should be placed on this layer so that shadows are properly rendered.\r\nBy default, the layer follows the base layer camera. Uncheck this if you want to manually move the camera using events. ', 'comment_created': datetime.datetime(2020, 7, 26, 23, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460584398, 'comment_body': 'I think I added a comment about having these buttons on two lines previously? Check if you can do that :)', 'comment_created': datetime.datetime(2020, 7, 26, 23, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 460820278, 'comment_body': '@4ian do you mean the button should be below the `Add a layer` button and not beside it?', 'comment_created': datetime.datetime(2020, 7, 27, 11, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 460824725, 'comment_body': ""Nope, it's not used at all. 😬 "", 'comment_created': datetime.datetime(2020, 7, 27, 11, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 461393164, 'comment_body': ""Yes because I'm concerned about small screens. Check how it looks if you resize the layers editor width to be very small?"", 'comment_created': datetime.datetime(2020, 7, 28, 8, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 463937902, 'comment_body': '@4ian this was pushed by mistake 😬, but still, can you check whether this works correctly on macOS/linux or not? If yes, I guess we can keep it?', 'comment_created': datetime.datetime(2020, 8, 1, 8, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 463938230, 'comment_body': ""These are pretty small tests (which don't really add a lot of value), I'll be writing more especially related to raycasting. Can you explain to me how can I make game objects having certain behaviors (light obstacle), I see the behaviors array, but what should it contain? The name of the behavior? (`LightObstacleBehavior`)"", 'comment_created': datetime.datetime(2020, 8, 1, 8, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 464077016, 'comment_body': 'It works :) \r\nCan you try though just: `karma start --browsers ChromeHeadless --single-run`?\r\n(and `karma start --browsers Firefox --single-run`?)\r\n\r\nIf it works, let\'s use this. In theory, npm is responsible for going into the `node_modules` folder and running the appropriate program when you just write the program name like ""karma"".\r\n\r\nSo `karma start --browsers ChromeHeadless --single-run` should work. I don\'t know why I put originally `./node_modules/karma/bin/karma`, I guess I was not aware that it would work with just `karma`.', 'comment_created': datetime.datetime(2020, 8, 2, 13, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464078425, 'comment_body': ""That's a great start! Definitely keep this test and let's add another one or more with obstacles.\r\n\r\nSee `platformerobjectruntimebehavior.spec.js` as an example of creating an object with a certain behavior.\r\nThe `behaviors` array is an array of `BehaviorData`, which are the objects being passed to the behavior constructor. They contain at least the `name` of the behavior (not important), the `type` (should be set to `Lighting::LightObstacleBehavior` in your case) and the rest is what is expected by your behavior.\r\n\r\nYou create the new object (probably a raw `gdjs.RuntimeObject` like in `platformerobjectruntimebehavior.spec.js`, then override `getWidth`/`getHeight` to give it some volume, then you can add it to the runtime scene (`runtimeScene.addObject`) and set its position.\r\n\r\nI recommend doing this initialization in a separate helper function if you want to reuse it for multiple tests. Then, each test can put a light object at different places and check the vertices/etc :) (it's good practice to make sure that tests are entirely autonomous and don't rely on other tests being run before - don't hesitate to make multiple tests with `describe`/`it` rather than one huge test - multiple tests are much easier to understand and see why they are failing)."", 'comment_created': datetime.datetime(2020, 8, 2, 13, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464078764, 'comment_body': ""Prefer to use `any` than `*`, it's more explicit and TypeScript compatible.\r\nIn this case, you can use the type `BehaviorData`, that is a global type declared in `runtimebehavior.js`"", 'comment_created': datetime.datetime(2020, 8, 2, 13, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464078967, 'comment_body': 'nit: can we use `_lightObstaclesManager`?  We\'re extending runtimeScene which is already a ""bad enough"" practice by itself (though the most efficient option I think), so let\'s put a underscore so that someone does not come and play with our obstacle manager ;) ', 'comment_created': datetime.datetime(2020, 8, 2, 13, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464081888, 'comment_body': 'typo here', 'comment_created': datetime.datetime(2020, 8, 2, 14, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464082113, 'comment_body': 'Can you replace this by `this._onInstancesAdded(instances)`?', 'comment_created': datetime.datetime(2020, 8, 2, 14, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464082204, 'comment_body': ""you would need to remove the saveToHistory and updateToolbar because it's already done then."", 'comment_created': datetime.datetime(2020, 8, 2, 14, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464082333, 'comment_body': 'nit: `lightingEditedLayer`\r\n\r\n(""Edit"" is an action, ""Edited"" is a state)', 'comment_created': datetime.datetime(2020, 8, 2, 14, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464087422, 'comment_body': 'Let me know if you can try this :)', 'comment_created': datetime.datetime(2020, 8, 2, 14, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464087571, 'comment_body': 'Is this useful? Can we make this private? The fact that a render texture exists is an implementation details, the outside world should not know about this.', 'comment_created': datetime.datetime(2020, 8, 2, 14, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464087695, 'comment_body': 'Are you using this? There is already `getRendererObject`. If possible, it would actually be better to rename this `getRendererObject` to `getPIXIContainer`, because `getRendererObject` is used knowing that a container is returned.', 'comment_created': datetime.datetime(2020, 8, 2, 14, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 464088288, 'comment_body': ""Yup, it's not being used at all right now, should be dead code then 😬. I'll remove it, for now, we can always add it later if required :)"", 'comment_created': datetime.datetime(2020, 8, 2, 15, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 464088719, 'comment_body': ""Oh right, `getRendererObject` already returns the container, we shouldn't be using this then I guess."", 'comment_created': datetime.datetime(2020, 8, 2, 15, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 467166585, 'comment_body': ""@4ian somehow the debug graphics is broken, I tried to run the previous commits as well, but I'm unable to render PIXI.Graphics, there is no error, and there's no visual as well."", 'comment_created': datetime.datetime(2020, 8, 7, 17, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 467168747, 'comment_body': 'Is `_debugGraphics` set to something? Add some breakpoint/various console.log to inspect the content of the object?', 'comment_created': datetime.datetime(2020, 8, 7, 17, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 467174487, 'comment_body': ""Yes, I could see that `_debugGraphics` is a valid object, and I am getting console logs for all the updating functions 🤔 I thought it might have to do with the refactoring (which is basically nothing more than extracting the logic to define the pixi mesh, shouldn't have to do anything with the graphics), but the graphics isn't rendering without the refactor as well."", 'comment_created': datetime.datetime(2020, 8, 7, 17, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 467451854, 'comment_body': 'Could it be because ""if (this._object.isHidden()) return;""? Have you verified that `ensureUpToDate` is called?\r\nI see that @bouh was able to make screenshot with the debug mode, so it was working at this time :) ', 'comment_created': datetime.datetime(2020, 8, 8, 10, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 467458938, 'comment_body': '@4ian nvm I found the bug 😬, I had to trace back all the changes, it was due to our optimization of falling back to quads and the empty array returned by `_computeLightVertices()`. Also, we should be hot-reload ready now 🤞.', 'comment_created': datetime.datetime(2020, 8, 8, 12, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 469250841, 'comment_body': 'You can add `// prettier-ignore` on the lines just before where you declare arrays to avoid having them formatted to a huge number of lines :) \r\nSee https://prettier.io/docs/en/ignore.html', 'comment_created': datetime.datetime(2020, 8, 12, 13, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 469252261, 'comment_body': 'ubernit: if vertexData and vertexBuffer have the same ""things"", they should have the same name. Instead of changing between ""data"" and ""buffer"" (that are synonym but create confusion about ""what\'s different so that they choose another name?""), add `expected` to the name of the arrays that are used for the test:\r\n```suggestion\r\n    expectedVertexBuffer.forEach((val, index) => {\r\n      expect(vertexBuffer[index]).to.be(val);\r\n    });\r\n    expectedIndexBuffer.forEach((val, index) => {\r\n      expect(indexBuffer[index]).to.be(val);\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 13, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 469252816, 'comment_body': 'Add a comment indicating that the width/height are tracked when a render texture is used.', 'comment_created': datetime.datetime(2020, 8, 12, 13, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 469256517, 'comment_body': '```suggestion\r\n * Enable the use of a PIXI.RenderTexture to render the PIXI.Container \r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 13, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 471588774, 'comment_body': 'I unfortunately missed this, but the PIXI Texture should in theory be hold only in the ""pixi renderer"". Here, we should just store something that is ""renderer-agnostic"", i.e: the texture resource name (a string).\r\n\r\nCould you do a PR to make `_texture` a string? Use `getPIXITexture` in the renderer. If you know that the texture was changed, then call a method called `updateTexture` of the renderer - which will do the job of updating the PIXI.Texture.\r\n\r\nThis way, we have an object that could work with something entirely different than PIXI in the future :) ', 'comment_created': datetime.datetime(2020, 8, 17, 16, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 471589059, 'comment_body': 'I believe there is no reason for this to be undefined anymore? We should move this to be a ` @type {gdjs.LightObstaclesManager}` then.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 471592065, 'comment_body': '(Actually updateTexture already exists, and can be updated :))', 'comment_created': datetime.datetime(2020, 8, 17, 16, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}]","[{'commit_sha': '5680ea6b4bb0c3b2d58f7e7e6ca70a1f55506a39', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f5becdd2e95cd6ffa299d19c00d73715040de61', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dcdf582b940d1ecaaeea7a85e995b9266b6c228', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e862a33cafc550c93ebe3001f2e1f424d7f42337', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2bb6ddcc7794bea130588349bbd8b6537c6cd7a', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1964b5d37df8cf4d19fc8e336d5fc937c3323418', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d8bfe4cfb32bf2e2edca43331914b5c11603e5e', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d3db00f97e659730c31673772fef80c3104b982', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b6b16389b6a047ec5934dfd1447be6737c58c92', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d0e661c26c4420e142155ccb24ee2ec2c3d0a70', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca85bd542fb70b90bdf3269baa0c340de188734b', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa41a19d861e88f6a94b771fa41abd4e14d12d97', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29aeeefb240189d184b247b19276c46f4d8895ad', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12572d0c0f622164dc57ffcb9cd23ae635a38806', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66eb5441c2e16820b8086ed8d7c03e7a0d3b47f4', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee3e226839fc7d1ceb27ac4a37545c8bcab96470', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94dcbfae5a35440f90550220834fceba7888b9d2', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92edbf4819d88df49d37cdc7c49011864480ae0b', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a046139d64ff519d5075d77133a63fa578094ca8', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cd73fdc82a81427ded47ada7c7f39cc27681b7f', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55f157d9c584465e31a52fb1b51a0440bfaa5cb1', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dcafbc3e3857adad3c9a56bc91c189f650cd4ea', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d64f6b2556b07c90fefc0abcfd3ad469384115c', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9fcab8de5910b33ae431c6d5554c86ad475b32d', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369ad6f64ac2c005152c67851c51755c6e4c37f0', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58c40c5a1023d253d47932720e383b85ec51043d', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c336c5fa7b233bb7123d2e1a7cbd61e62126f273', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b6211a4122ba1dd46b041ec8b003098da3429c', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '915a0466345903ba6876d8d8ddf4d8807b340398', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b9a3879096c164e1cd0754c7115f5810498523e', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e234dd8dd5d299aca27ded6d093b81cb99295371', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b93d3b5899ec9a3f333a06e0c2e606fb57c6401d', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e4983cf302561bb18f42d1eb2aef1dfef53e22', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93778409c88b16a58e3b66e9dcbf27079e223544', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abef03733a2a5524aafe3537ff7e72b919787118', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67d5dcffdb075bf9b2b05e293622fa7a62a1396c', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa76b67d51d91f08dc3cba2c9e12b540e3b1330e', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd05fcb99f71fa37409fd4b2155a790b66845ce8', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a566a9e28cf2a2466728014a0b237530a3aeea', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dccf3234eb8be2b9e3b07565f1ce8148ae6e27b', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcf29315fe2244da5a7276db2e6febdd9c19ff3b', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbaa9c34bfb77ef4bb59acb5255c850cd75ec1e', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed3ec1cfb64aaee7a5d0c16b4f188822f572f98', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9508828113813c45a6f52cf64eca52a6e0dc7a72', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ef96b1b1662198cdb6815787ee0dde2e26c3eca', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd4d10d0b64b36fd44aae54660d356d98e20b459', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '127324b5e8265b4b341acca53a93c89c8232cbdb', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90f15aabdfae9dd2b4cf5bd275cfcb533f2e79d8', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bee74260b1352802c62c1d27e49fac2a6a3ec1bf', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4ac8d1f92cc6e0c1167bf468cbaa00cdf9a876', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5027b76d81f5403760b3aeb3efb55dc7733d932', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f167a6ae1105e201c2a271e8d0284b29d2242cad', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36264254c52c1ca44eefa7b0f518ee97a6a588b4', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c7f506f76a49ef0a0500b459206e694a0391341', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fafa0c544ad7066bf997b9aa282d69d0450d6c50', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd56623b89d29d5e7e16a68bd98455b426282dff0', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b3ffce3cced88b5c8e5da2b0b180e19753a9b8a', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}]",Harsimran Singh Virk,39851078,,User,,28,,3,24
470202668,Lighting fixes,"We have 4 fixes here,

1. Removal of unnecessary undefined handling of `gdjs.LightObstaclesManager`.
2. Moving the handling of light texture to pixi renderer.
3. A really weird bugfix of debugging mode's graphics. I don't know what happened, but this is how the pixi graphics was being rendered:
![Screenshot (1)](https://user-images.githubusercontent.com/39851078/90646783-36572600-e255-11ea-8542-1f17dfabe8e0.png)

Neither I understand why this happened, nor I'm sure about why this particular fix works 😓. All I did was randomly change the order of `lineTo` and `moveTo` calls, and it worked. I'm guessing this is really specific to pixi, as we've upgraded the version as well, but arguably it was a minor change.

4. Also changed the algorithm a bit (specifics about it in the review below) to have that expanding boundary box of light.

",True,1929,https://api.github.com/repos/4ian/GDevelop/pulls/1929,https://github.com/4ian/GDevelop/pull/1929,closed,108,57,4,6,7,25,1,0,[{'name': '🏁PR almost ready: final fixes'}],2020-08-19 14:27:01+00:00,2020-08-29 17:52:37+00:00,876336.0,"10 days, 3:25:36","[{'comment_id': 473072355, 'comment_body': ""This should be `?string`. I'll change it in the next commit."", 'comment_created': datetime.datetime(2020, 8, 19, 14, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 473073808, 'comment_body': ""Not a private function anymore, because it needs to be called for hot-reloading, other than that there shouldn't really be any instance of this function being called. What do you suggest @4ian?"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 473075767, 'comment_body': '`halfOfDiag` is not going to be sqrt(2)*radius anymore, because the boundary box could expand, and could easily become a rectangle at this point. So, this distance has to be passed now.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 473076319, 'comment_body': ""I'll remove this comment, it was here only for a bit of clarity."", 'comment_created': datetime.datetime(2020, 8, 19, 14, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 473078510, 'comment_body': ""I don't know why this order works, but basically, if I call `moveTo` before `lineTo` inside the for loop, I could see those weird lines. With this order, ie, `lineTo` before `moveTo` everything works correctly 🤔."", 'comment_created': datetime.datetime(2020, 8, 19, 14, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 473084743, 'comment_body': ""Now, since the expansion of the bounding box is not equal (ie, maybe only the `minX` changes and the bbox becomes larger from the left side but the right size is still equal to what it was before), so the center of the light is not necessarily the center of the rectangle. So we find the distance of all 4 vertices from the center of the light (also, I now realize that they are not really the diagonals) and take the maximum, which is then passed to `_computeClosestIntersectionPoint`. Maybe we should name this something like `maxLengthToBboxVertices` and not `halfOfDiag` since they aren't diagonals?"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 473087099, 'comment_body': 'Is changing the hitbox vertices of light objects like this correct? Or should we create a new `gdjs.Polygon` and use that instead of modifying this?', 'comment_created': datetime.datetime(2020, 8, 19, 14, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 473171271, 'comment_body': ""Well if it's called from `updateFromObjectData`, it can still be private no? :) `updateFromObjectData` is public, but not necessarily what it is using."", 'comment_created': datetime.datetime(2020, 8, 19, 16, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 473236308, 'comment_body': ""Ah I may have confused the pixi renderer and the object. Should be public then, because you expect ALL renderers to have this if you're calling it externally."", 'comment_created': datetime.datetime(2020, 8, 19, 18, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 473705462, 'comment_body': 'Thanks :)', 'comment_created': datetime.datetime(2020, 8, 20, 7, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 473753371, 'comment_body': 'This will be ?string too :) ', 'comment_created': datetime.datetime(2020, 8, 20, 8, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 473754121, 'comment_body': 'Update the comment :)', 'comment_created': datetime.datetime(2020, 8, 20, 8, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 473755113, 'comment_body': ""Oops acutally no, this variable is holding either null or a PIXI.Texture (we're in the renderer). So `?PIXI.Texture` was valid."", 'comment_created': datetime.datetime(2020, 8, 20, 8, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 473757941, 'comment_body': 'Yep we should rename this variable. We can still consider this to be some half diagonal value of an hypothetic bounding square, so maybe `boundingSquareHalfDiagonal`?', 'comment_created': datetime.datetime(2020, 8, 20, 8, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 473758233, 'comment_body': ""Actually no sorry, this string is always defined, it's just empty when not defined."", 'comment_created': datetime.datetime(2020, 8, 20, 8, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 473758506, 'comment_body': '@type {string}', 'comment_created': datetime.datetime(2020, 8, 20, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 475927073, 'comment_body': ""Sorry I'm late to this reply - I think it might be safer to make a duplication of the polygon, otherwise we end up changing the hitbox of the light according to the presence or not of obstacles... would be weird."", 'comment_created': datetime.datetime(2020, 8, 24, 22, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 475927170, 'comment_body': ""Alright let's assume it's better now then!"", 'comment_created': datetime.datetime(2020, 8, 24, 22, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 475928010, 'comment_body': ""You're not calling updateTexture?"", 'comment_created': datetime.datetime(2020, 8, 24, 22, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 475932759, 'comment_body': ""Slight optimisation to avoid computing 4 times the square root instead of 1. Don't use Math.hypot, instead compute the values before taking the square root with Math.pow. Example, do for the first line just:\r\nMath.pow(this._object.x - minX, 2) + Math.pow(this._object.y - minY, 2)\r\n\r\n(this is what Math.hypot is doing internally), then take the max (Math.max) and finally Math.sqrt the result.\r\n\r\nThis works because `0 < x < y <=> sqrt(x) < sqrt(y)`"", 'comment_created': datetime.datetime(2020, 8, 24, 22, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 475935249, 'comment_body': ""Note that I'm a bit sad to have to create a new `gdjs.Polygon` every time in this function, but I think it's much much better than modifying the object hitbox. Conceptually, the renderer of an object should not influence the hitbox when rendering it."", 'comment_created': datetime.datetime(2020, 8, 24, 22, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 476102387, 'comment_body': ""I'll have to update the entire mesh to update texture, since I'll have to swap the shader in this case. "", 'comment_created': datetime.datetime(2020, 8, 25, 3, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 476108289, 'comment_body': ""Actually, we don't need to create a new instance everytime, I guess we can have only one instance and keep modifying it. (Similar to float32 arrays for buffer)"", 'comment_created': datetime.datetime(2020, 8, 25, 3, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 476273994, 'comment_body': 'Yes totally! We can store this ""light bounding polygon"" in the light object or pixi runtime renderer :) ', 'comment_created': datetime.datetime(2020, 8, 25, 8, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 476274097, 'comment_body': 'Sounds good then!', 'comment_created': datetime.datetime(2020, 8, 25, 8, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}]","[{'commit_sha': '755c72c0bff4e146168dfc54e6692c128aebd849', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '937fd1888a8e9bb8b969af3973d0ef1ad1201ce3', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab6999a16c07f2ec458cc6b28efdfc0ecb1df49c', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6beea7bfaf73b9ec9baa219e3d05e156576d0787', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136964053b30aa758a2fce05fdc3ef9ce2144296', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d6f0fad90983f374e44f10375c18f2da6aa5997', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}]",Harsimran Singh Virk,39851078,,User,,28,,3,24
471015394,Normal map prototype,"Early stage:

- [x] Declare abstract methods such as `getNormalMapRendererObject`.

- [ ] Get render texture of normal map world.

- [ ] Add a new RuntimeObject and `gdjs.LightsManager` to track position of lights.

- [ ] Define and apply filter for diffused rendering.

",False,1932,https://api.github.com/repos/4ian/GDevelop/pulls/1932,https://github.com/4ian/GDevelop/pull/1932,closed,60,7,2,5,0,4,0,0,[],2020-08-20 15:54:45+00:00,2021-06-12 14:35:27+00:00,25569642.0,"295 days, 22:40:42","[{'comment_id': 474093589, 'comment_body': ""@4ian how do I import this class? It doesn't fit as an object, behavior or effect, how do I use JsExtension in this case?\r\n\r\nEDIT: Also at some point, I'd need to import `gdjs.LightsManager` as well 🤔."", 'comment_created': datetime.datetime(2020, 8, 20, 15, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'HarsimranVirk', 'type': 'User'}, {'comment_id': 474470848, 'comment_body': 'ubernit: I prefer to return `null` because undefined can mean ""you accessed a property that is not even defined, surely something wrong"" while `null` is explictly meaning ""this is representing a valid value, but this value is null, i.e: there is no normal map object here"".', 'comment_created': datetime.datetime(2020, 8, 21, 7, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 474479385, 'comment_body': ""You'll need to adapt every place where `getRendererObject`/`getRenderer` is used to optionally do the same with the normal map object. This is: `onDestroyFromScene`, `setZOrder`, `setLayer`."", 'comment_created': datetime.datetime(2020, 8, 21, 7, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 474496101, 'comment_body': 'As it\'s part of an extension, it should be included by the extension whenever needed, which is surely whenever one of the new ""light"" object is used. As you don\'t have any new ""light"" object for now, consider either:\r\n- ""hacking"" you way by adding `addIncludeFile` to some action, condition or existing object. Don\'t forget to put a big TODO\r\n- OR maybe this filter should be part of the game engine itself when using pixi? In this case, add it in `GDJS/Runtime/pixi-renderers` and list it in `ExporterHelper::AddLibsInclude` in ExporterHelper.cpp. Though this means every game will include it even if not used, so maybe less ideal... but maybe we\'ll still need this because the rendering of normal map lighting will be tightly integrated in the pixi game engine.', 'comment_created': datetime.datetime(2020, 8, 21, 8, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}]","[{'commit_sha': '1f2325f25dcd76aaa6fb8ebd2bc2766257d70c4f', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da901bdd2c751e5833f0cdbded2f34b2cc2060a2', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65b8fb241ef0196cfb94683a3f097a508e2965fa', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e948693f804c1c1bdadabc17173c47243aa46b1', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4822bef1866622c0012e93d8d0b7b740fc35627c', 'committer_username': 'HarsimranVirk', 'committer_name': 'Harsimran Singh Virk', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 2, 7, 19, 59, tzinfo=datetime.timezone.utc)}]",Harsimran Singh Virk,39851078,,User,,28,,3,24
435985759,Basic command palette,"This PR is for adding a basic command palette to GDevelop. Right now, it only has basic commands like ""export game"" and ""launch preview"". I'll be working on more powerful commands over the next few weeks.

![pr_snap](https://user-images.githubusercontent.com/18032938/84927402-6c0f4f80-b0ea-11ea-9f79-766e36a64184.png)

To try it out, check the ""Enable command palette"" flag in preferences, and press `Ctrl + P` (or `Cmd + P`) to open the command palette.",True,1821,https://api.github.com/repos/4ian/GDevelop/pulls/1821,https://github.com/4ian/GDevelop/pull/1821,closed,405,9,11,27,7,6,1,0,[{'name': '🏁PR almost ready: final fixes'}],2020-06-17 17:11:25+00:00,2020-06-21 11:04:08+00:00,323563.0,"3 days, 17:52:43","[{'comment_id': 443161773, 'comment_body': ""Let's add a comment explaining why preventDefault is useful"", 'comment_created': datetime.datetime(2020, 6, 20, 21, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 443161783, 'comment_body': ""Let's also add a comment about why we need this logic."", 'comment_created': datetime.datetime(2020, 6, 20, 21, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 443161788, 'comment_body': 'Is there a way to avoid this disabling?', 'comment_created': datetime.datetime(2020, 6, 20, 21, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 443161931, 'comment_body': 'Let\'s remove the comment about this being ""Temporary"".\r\nFirst because often temporary stuff tends to become permanent :D And second because ""MainFrame"" does not care at all if it\'s temporary or not - it\'s the job of the hook to set up the shortcut. So being temporary is a detail of the implementation :) ', 'comment_created': datetime.datetime(2020, 6, 20, 21, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 443162033, 'comment_body': 'As it\'s unusual to use makeStyles in the codebase and to override a Material-UI style, let\'s add a comment ""Show the dialog containing the Command Palette in the top of the screen.""', 'comment_created': datetime.datetime(2020, 6, 20, 21, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 443209675, 'comment_body': ""Right now, it's disabled because the `command` object will be a new object for each Mainframe render, so adding `command` to the dependency list would re-register commands on each Mainframe render.\r\nEven if I destructure the properties of `command`, `command.displayText` is a new object on each Mainframe render, due to the `t` macro. So can't include that as dependency either :(\r\n\r\nOne possible solution is for the hook to just take a static `displayText` string, and apply the `t` macro inside the hook instead. Then destructuring should probably work. I'll try doing that (I have an exam tomorrow, so might take some time :sweat_smile: )"", 'comment_created': datetime.datetime(2020, 6, 21, 11, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nilaymaj', 'type': 'User'}]","[{'commit_sha': 'c3141b8db1219c4aacdab1a2574329a5cd8d7f48', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b6ef47b9746b06829edc739679140f24e86764', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c79e68ffb4d20e8fd07b670a2c6203f4a927a9', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b3dbc748d77454540c9dfbd72c867772e436ecc', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06db1ae25c87fb520a2c10561dd247a362dc439c', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9ca086b4a74957bf5bcb9c46e73b6f205d0ba3a', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c351d1c06701581f6e092a3a036025f3942112bf', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9e4e6e82fd5091d924d44dc25519b9b3c861419', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6513bcfdff54107848ad28f08078ed13e276d88', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88876a7de30c9c6d21ffcfa8acbcc1c2c41f9d9f', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8bae22b17cbeadba0891dd8d5d00de1e63cbbc', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07727fc2f248443714cc420c4079b41bcf9c78af', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5249958d622b39a0ac832cab3c8217e67a059cd6', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9b4d891f772a9f55d770c99e77f2fa0916997f9', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6de5d1761a0df14ec3ddc1eb99424dc933665db3', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f90e8d4e8cd962cab59db3bd484976e1669503ad', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb15b5076b588a8cf36ccc685457f9686068c123', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76cc72cb1a8a92ddb06f610647b3d2dd06146daf', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88971dd781bd0d55b91f283af5b1963bf73c57a4', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3023130076800feb52237711f7a4c46a4d9b2581', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d44db625b6f3dd4c8e2bb9c72fb79fd6e1c01a9', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1a12af3d90d6285ec4ba2346a8ebc87f2a6fe5', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf0cc1076f85e312884614d329b9636ee10bd85', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af63b9f674330469b01e2b053e51726a21c49d27', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e85ee0de44c87e2ce13c4e8ff9a51ecc5c9297', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efeec3428ba63b128db1f3234749837dbd550c06', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7ede29a9a7c2e1e878134ee9d103a6288024ddf', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}]",Nilay Majorwar,18032938,nilaymajorwar@gmail.com,User,,24,,18,65
449608232,Add more commands to the command palette,"This PR adds a whole lot of pretty nice commands to the command palette. Here's a quick view, for example:

![compound](https://user-images.githubusercontent.com/18032938/87569974-8cc8c600-c6e5-11ea-859a-d1cd81a746c3.gif)

A summary of the main commands added (I may have missed some):
- **Tab-related**: Open scene, Open external events, Open external layout, Open extension
- **Scene editor**: Edit object, Edit object variables, Edit object group, Edit layer effects, Open scene properties, Open scene variables, Toggle grid, Toggle mask, Setup grid and some panel-opening commands like Open properties panel, Open layers panel, etc.
- **Events editor**: Create empty event, Add event of type, Search events, Add sub-event, Delete selected events
- **Project-related**: Open project properties, Edit global variables, Open project resources, Open project icons
- **General**: Open recent project",True,1864,https://api.github.com/repos/4ian/GDevelop/pulls/1864,https://github.com/4ian/GDevelop/pull/1864,closed,1477,518,26,65,6,21,1,0,[{'name': '🏁PR almost ready: final fixes'}],2020-07-15 16:54:17+00:00,2020-07-17 19:25:55+00:00,181898.0,"2 days, 2:31:38","[{'comment_id': 456078003, 'comment_body': '`*` is deprecated (see https://flow.org/en/docs/linting/rule-reference/#toc-deprecated-type), I recommend here either:\r\n* typing generically the function component: `... = <OptionType>(props: { commandName: string, command: CommandWithOptions<OptionType>}) => { ... };`\r\n* or just use any', 'comment_created': datetime.datetime(2020, 7, 16, 21, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456078228, 'comment_body': '{| |} here and below ', 'comment_created': datetime.datetime(2020, 7, 16, 21, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456078758, 'comment_body': 'Use `any`', 'comment_created': datetime.datetime(2020, 7, 16, 21, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456079054, 'comment_body': ""Are you forced to include commands in the interface? Typically we don't want to expose this to the client code."", 'comment_created': datetime.datetime(2020, 7, 16, 21, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456082326, 'comment_body': ""Use `import { type I18n as I18nType } from '@lingui/core';` for consistency with the rest of the codebase"", 'comment_created': datetime.datetime(2020, 7, 16, 21, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456083204, 'comment_body': '{| |}', 'comment_created': datetime.datetime(2020, 7, 16, 21, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456083523, 'comment_body': ""Do we want this to be publicly accessible? If not, let's name it `_isActive`."", 'comment_created': datetime.datetime(2020, 7, 16, 21, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456084277, 'comment_body': 'Nit: most of the time, write full sentence in comments:\r\n\r\n`// Lazily create the ref object.` ', 'comment_created': datetime.datetime(2020, 7, 16, 21, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456084960, 'comment_body': '{| |}', 'comment_created': datetime.datetime(2020, 7, 16, 21, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456085573, 'comment_body': '{| |}', 'comment_created': datetime.datetime(2020, 7, 16, 21, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456090723, 'comment_body': '{| |}', 'comment_created': datetime.datetime(2020, 7, 16, 21, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456093529, 'comment_body': '{| |}', 'comment_created': datetime.datetime(2020, 7, 16, 21, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456093941, 'comment_body': '{| |}', 'comment_created': datetime.datetime(2020, 7, 16, 21, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456094851, 'comment_body': '{| |}', 'comment_created': datetime.datetime(2020, 7, 16, 21, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456095478, 'comment_body': 'this.editLayerEffects', 'comment_created': datetime.datetime(2020, 7, 16, 21, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456287629, 'comment_body': ""I just realized that this value seems used... nowhere? :D \r\nWhich is understandable, the only thing we need for an option is its `text`, it's `iconSrc` and the function to run, knowing that one `handler` is created for each option, so the closure is already embedding the information of the value.\r\n\r\nUnless I missed something, I recommend removing the value here (and so you can remove a bunch of <T> and <OptionType> everywhere 👍) and then everywhere where you were passing a value."", 'comment_created': datetime.datetime(2020, 7, 17, 8, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456304431, 'comment_body': ""Ah yes, I initially put that in as a unique identifier for each option. That was when I was thinking about goto anything, which would have required diffing and comparing options and all sorts of things - and that would have required an explicit unique identifier. But that was eventually scrapped, so yes right now it's unused. I'll remove it, then.\r\n\r\nNow that you mention it, the `enabled` prop in Command (and its related types) is also somewhat unnecessary, since commands that reach the command manager (or scoped command manager) are actually all enabled. `enabled` is really somewhat better suited as a direct hook argument, similar to `commandName`. Should I fix that?"", 'comment_created': datetime.datetime(2020, 7, 17, 8, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nilaymaj', 'type': 'User'}, {'comment_id': 456605182, 'comment_body': ""> Now that you mention it, the enabled prop in Command (and its related types) is also somewhat unnecessary, since commands that reach the command manager (or scoped command manager) are actually all enabled. enabled is really somewhat better suited as a direct hook argument, similar to commandName. Should I fix that?\r\n\r\nYes I'm all for removing it if it's not actually useful :) "", 'comment_created': datetime.datetime(2020, 7, 17, 18, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456606345, 'comment_body': 'nit: you could even do just `onSelect={action(""Open command"")}` because the argument will be logged by Storybook :) ', 'comment_created': datetime.datetime(2020, 7, 17, 18, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 456625285, 'comment_body': ""Oh okay, that's nice :D. Though, I had to add a type annotation to the items array, otherwise Flow wasn't able to infer whether the array was one of commands or command options."", 'comment_created': datetime.datetime(2020, 7, 17, 19, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nilaymaj', 'type': 'User'}, {'comment_id': 456625380, 'comment_body': 'Okay, done!', 'comment_created': datetime.datetime(2020, 7, 17, 19, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nilaymaj', 'type': 'User'}]","[{'commit_sha': 'c3141b8db1219c4aacdab1a2574329a5cd8d7f48', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b6ef47b9746b06829edc739679140f24e86764', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32c79e68ffb4d20e8fd07b670a2c6203f4a927a9', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b3dbc748d77454540c9dfbd72c867772e436ecc', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06db1ae25c87fb520a2c10561dd247a362dc439c', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9ca086b4a74957bf5bcb9c46e73b6f205d0ba3a', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c351d1c06701581f6e092a3a036025f3942112bf', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9e4e6e82fd5091d924d44dc25519b9b3c861419', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6513bcfdff54107848ad28f08078ed13e276d88', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88876a7de30c9c6d21ffcfa8acbcc1c2c41f9d9f', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8bae22b17cbeadba0891dd8d5d00de1e63cbbc', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07727fc2f248443714cc420c4079b41bcf9c78af', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5249958d622b39a0ac832cab3c8217e67a059cd6', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9b4d891f772a9f55d770c99e77f2fa0916997f9', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6de5d1761a0df14ec3ddc1eb99424dc933665db3', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f90e8d4e8cd962cab59db3bd484976e1669503ad', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb15b5076b588a8cf36ccc685457f9686068c123', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76cc72cb1a8a92ddb06f610647b3d2dd06146daf', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88971dd781bd0d55b91f283af5b1963bf73c57a4', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3023130076800feb52237711f7a4c46a4d9b2581', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d44db625b6f3dd4c8e2bb9c72fb79fd6e1c01a9', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1a12af3d90d6285ec4ba2346a8ebc87f2a6fe5', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf0cc1076f85e312884614d329b9636ee10bd85', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af63b9f674330469b01e2b053e51726a21c49d27', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8e85ee0de44c87e2ce13c4e8ff9a51ecc5c9297', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efeec3428ba63b128db1f3234749837dbd550c06', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7ede29a9a7c2e1e878134ee9d103a6288024ddf', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dc7ae3186f9d8c26553a86c18d759c74ce27637', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c3bb89cee010106b1f56ea8d5bfe92cf9bff039', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d2a4e14ad8514b4a6c191e320aa9df479789725', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cd8cf8bb607d796fa9fd91660942f3d2d3d8ec5', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f1d3da2640214c9d743e45daf072891fbca8717', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7170ef5ac3f16025934fac08dae77ef2792306e4', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd91fdf92be7a8280b28d44dcfd4ac843b4de661', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4add4be38eb0210e054fae90e4a002571e13b494', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '139856761d5ca6fa03e9fee0ce8453c36a31d5e0', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee1703e956f2443ebdf44e8a114ce360fb004074', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ed1d8b5e00bbcad2b2d089e4b5e46c77147deb', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6790ba963715d6a6bea0315076d601b53e2a291', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9145a97ede60022110894c9e74f38344e5403a05', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2bba69daa1befb80f705603c3db623ba98bb570', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311e316b397a16b4035fc585c1cd520046bedb17', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006a5e5db5b956f100627d41b3db3280063d9577', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8a3a992bb64acf3178cfec8c9218a2e4a973f81', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06aa8aa0115743d592758746f342c955b377f677', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2270d2ebdbfc987674cc24cb16857aaa00fb758', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '761cce904e874714d42f163c506623993a802583', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5710a45ce094a6ec1ca6444d6d13933850102959', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce18d6703b26c2fcc1f0964b2d9febdc193da56a', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '095aea93e3f924b445d295f3c58d76f94c18e117', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d0ada014fdd8fd06b8ec611573c66ceef76b72', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b49fa4ce80f5d752460af9899f674484f06be32c', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ab8d05cdae70d9b5f6af6c8973d2d29e1300257', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3670c3b56c9d7196bc466dac24ae49dc102a5f9c', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcda957f97b2a7112d2202cdc46019fb41452cf5', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f74d239eaeef8c467d2e9734a804ab4ef67e5042', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55497716209b0a17af4603c77ea2bd55fe831b48', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bffe7809dc1f476d54835f02014402e197710b8', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7b387c77a4d84377c93c5d055f976710da57735', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14217df12b9483c430b7aa315b352d916c10016e', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c68df84ed080993e5708e865ad7b07b2a3eb73b', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aca2e7efb24f4ad8c22abc0d61a16c13e901d514', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '209150023947819a5769ce984204cb27bb5c9942', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2adce9987b6548ee804a88a14dbe20e11f020407', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6456981500e1a0201d1337c857f87d3f78d19787', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}]",Nilay Majorwar,18032938,nilaymajorwar@gmail.com,User,,24,,18,65
472428506,Add support for customizable keyboard shortcuts,"This PR adds support for customizable keyboard shortcuts to both the web and desktop app. Every shortcut is linked to a corresponding command, and the default shortcuts can be overridden by the user in a new ""Keyboard Shortcuts"" tab in preferences dialog.",True,1938,https://api.github.com/repos/4ian/GDevelop/pulls/1938,https://github.com/4ian/GDevelop/pull/1938,closed,1201,334,28,42,4,6,1,0,[{'name': '🏁PR almost ready: final fixes'}],2020-08-24 10:39:58+00:00,2020-08-25 22:54:25+00:00,130467.0,"1 day, 12:14:27","[{'comment_id': 475936573, 'comment_body': 'nit: what do you think of using ""〉"" instead of "":""? Some languages might not use a colon to separate words :)', 'comment_created': datetime.datetime(2020, 8, 24, 22, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 475938704, 'comment_body': 'Is this normal that this yarn.lock is modified? 🤔', 'comment_created': datetime.datetime(2020, 8, 24, 22, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 475940264, 'comment_body': 'Extra console.log here', 'comment_created': datetime.datetime(2020, 8, 24, 23, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 475945031, 'comment_body': ""In this logic, it seems that the complexity is more important than what it could be. \r\nYou iterate on all commands (well, on all areas, then on each commands of this area, so at the end it's on all commands). For each command, you get its shortcutString (so far so good).\r\nThen inside this loop, you're iterating again on the commandsList, computing for each one its shortcutString.\r\n\r\nAt the end, this means that you're roughly doing `n^2` the work of computing the shortcut strings and comparing them. When we'll have 200 commands, this means 40000 operations, which start to make a lot for some low end or mobile devices :)\r\n\r\nInstead, consider the approach of using an object as a map of used shortcutString. In pseudo code:\r\n```\r\nconst shortcutStringToCommands = {};\r\nfor each command:\r\n  // Get userShortcut and defaultShortcut as before\r\n  const shortcutString = userShortcut || defaultShortcut\r\n  shortcutStringToCommands[shortcutString] = (shortcutStringToCommands[shortcutString] || []).concat(command);\r\n```\r\n\r\nThis is doing a single loop on commands, so complexity is `n`. Better, you can put this in a separate function outside of the render.\r\n\r\nThen in the render, you iterate on commands again, and for each you look into `shortcutStringToCommands`, with the shortcutString of the command. If the array contains just your command, you're fine. If it contains something else, you have one (or more!) clashing commands :) \r\n\r\nAt the end, this is done in roughly `2*n` operations (2 separate loops), so even with 200 commands, we'll have 400 operations to do - it should be more than fast enough even for the future and low end devices :) "", 'comment_created': datetime.datetime(2020, 8, 24, 23, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': '4ian', 'type': 'User'}, {'comment_id': 476335327, 'comment_body': ""Nope :sweat_smile: - I've removed those changes now. I should've noticed that before committing, but anyway, learnt about file-specific git commands by reverting this :D"", 'comment_created': datetime.datetime(2020, 8, 25, 10, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nilaymaj', 'type': 'User'}, {'comment_id': 476342833, 'comment_body': ""I've extracted the area-wise sorting and shortcut->commands mapping generation into this function. It creates two objects `areaWiseCommands` and `shortcutStringToCommands`, and then proceeds to fill them with a single loop over the commands list, and works properly.\r\n\r\nThe only thing I'm thinking about is that this function seems to do two quite unrelated things at once. Separating into two functions is cleaner but then we'll have to loop over the commands list twice - complexity is still linear, so should I split the function?"", 'comment_created': datetime.datetime(2020, 8, 25, 10, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nilaymaj', 'type': 'User'}]","[{'commit_sha': 'a99606a93013464b93c4efbf029502e1e5b83d5f', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95374f55061301605c1af97c719cfd7344cf6827', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e36c8e9d823476e1e00dadb1909f0f5ef91d36', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1526509e572b644d2ef501d1c10313cf99b0d64d', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15f2c0d2b65d51248479f345e43656fb757f7d2a', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60b1182e130cdae17fc3f780514b78e2516c6f7', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15699e3cfc5d7bc75b477cef0db8858517c3e9cb', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eab7a6e898299f10a9c29612f0b595aaada599b3', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '125323b625e7d8da15bf56fd5b51276af4d82ffa', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eff22f48c10a3b4fe12f37009b568f2f7c2cc1c8', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b73b6680606f57401574675a51cdaa3a070a4f2f', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41b8c99add75a5b8b66803a570296aec9ba6e9fe', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eec58ad1d54f92f6a7fb019fa5c41a71849e6123', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48d9a49dec346038d2648288b2363d3db82f34e9', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b1033e79ed520abec46d43d2be63ae09f997be', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05d80a00608e1c85cc1107493cc2995028b8b2bd', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '898d31bc9930c814801ebd5a94cae8461165010a', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82839f6ea5e1570a53ffef4cd86b90c2c85d40a8', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21035545d7c910c75bf640a68ce0b36020f6eea6', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b07d0fb7b15b3f2759f9fc61ad44462bf8534945', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c2d71cf01d547411e3fcfdfdd423c0e1c89c325', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ceb3f7de1013ab0b530f42e39e7c02cb206b027', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bc3dcab87ea66adac6422e1a84549f12fd88217', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb640a397516f0d8b21dd9a962f1d0160d43e06e', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d63737179d235c679240de05c58a1bc080e90b4', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5634e565ce6577baf99dcaef84cba64cde79405b', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b86db3d113b1baf075576a3e0da2912e3972ba5', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06a0d70a38806d18ffeac1c2c2917f84f6ae61b0', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9688371cd935163a30fc139b3847940d0ca0a550', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4add05177c1931a38ed3023b6cf1933521643c79', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b1ea66dfc3c77874f87cf92169a911d7d4f59a', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577c061fabea30cdd2b187f720b189e4a503ca8a', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef6942dcb0a0901047ad79b44c1292014f2f75bd', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96d5f20972d5431c6bfcbcad13a4a20f61113d5', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be833ebec520f102cd42eb55c13dcfab9a632fed', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e8fb40c91781ca2512c541bd9bde468270a7c9', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a166f57dbb76aecb8303bc4b4422babeadca754', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9615c32ff3f6cfce0cde4707ac1f3a50695fa2a6', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1eae656fe0cfc2cca6d7e041ee17eb0eaa2d7e8', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92856d912e8143df33d483b17ac9c55edabcbec8', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89dc26df315f723dc8ae1fd1f8269511d28c9700', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f01f1676f21cdc73815449da543077769248b13', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}]",Nilay Majorwar,18032938,nilaymajorwar@gmail.com,User,,24,,18,65
457842099,"Add network preview command, hide debug and network preview commands on web","This PR adds a new command for launching a network preview. Also, now debug preview and network preview commands are usable only on the desktop app (earlier they were incorrectly available on web app too and didn't work on launching the command).",True,1896,https://api.github.com/repos/4ian/GDevelop/pulls/1896,https://github.com/4ian/GDevelop/pull/1896,closed,24,4,2,1,1,0,0,0,[],2020-07-28 14:19:04+00:00,2020-07-28 16:31:21+00:00,7937.0,2:12:17,[],"[{'commit_sha': 'cac4174408d20e63b5032524c90b0a864b8a62aa', 'committer_username': 'nilaymaj', 'committer_name': 'Nilay Majorwar', 'committer_email': 'nilaymajorwar@gmail.com', 'commit_date': datetime.datetime(2016, 3, 23, 14, 45, 54, tzinfo=datetime.timezone.utc)}]",Nilay Majorwar,18032938,nilaymajorwar@gmail.com,User,,24,,18,65

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
21331090,GDevelop,4ian/GDevelop,JavaScript,782,8778,194,90,8879,474,150,75,"[{'id': 716805070, 'number': 2956, 'closed': datetime.datetime(2021, 8, 23, 10, 27, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 15, 1, 18, tzinfo=datetime.timezone.utc), 'time_taken': 242789.0, 'time_delta': '2 days, 19:26:29', 'additions': 185, 'deletions': 4060, 'state': 'closed'}, {'id': 711189054, 'number': 2901, 'closed': datetime.datetime(2021, 8, 20, 13, 1, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 16, 11, 23, tzinfo=datetime.timezone.utc), 'time_taken': 679783.0, 'time_delta': '7 days, 20:49:43', 'additions': 1882, 'deletions': 780, 'state': 'closed'}, {'id': 668884888, 'number': 2736, 'closed': datetime.datetime(2021, 8, 12, 16, 2, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 14, 50, 17, tzinfo=datetime.timezone.utc), 'time_taken': 5274705.0, 'time_delta': '61 days, 1:11:45', 'additions': 817, 'deletions': 97, 'state': 'closed'}, {'id': 664919082, 'number': 2720, 'closed': datetime.datetime(2021, 6, 12, 14, 18, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 13, 29, 22, tzinfo=datetime.timezone.utc), 'time_taken': 348566.0, 'time_delta': '4 days, 0:49:26', 'additions': 1663, 'deletions': 762, 'state': 'closed'}, {'id': 653917109, 'number': 2683, 'closed': datetime.datetime(2021, 5, 31, 21, 22, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 15, 26, 31, tzinfo=datetime.timezone.utc), 'time_taken': 453337.0, 'time_delta': '5 days, 5:55:37', 'additions': 37, 'deletions': 3, 'state': 'closed'}, {'id': 643932308, 'number': 2645, 'closed': datetime.datetime(2021, 5, 21, 23, 22, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 13, 12, 22, 45, tzinfo=datetime.timezone.utc), 'time_taken': 730813.0, 'time_delta': '8 days, 11:00:13', 'additions': 385, 'deletions': 225, 'state': 'closed'}, {'id': 570507320, 'number': 2294, 'closed': datetime.datetime(2021, 2, 9, 19, 23, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 9, 18, 23, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3581.0, 'time_delta': '0:59:41', 'additions': 21, 'deletions': 11, 'state': 'closed'}, {'id': 557349005, 'number': 2227, 'closed': datetime.datetime(2021, 1, 19, 15, 17, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 19, 11, 3, 12, tzinfo=datetime.timezone.utc), 'time_taken': 15270.0, 'time_delta': '4:14:30', 'additions': 6, 'deletions': 5, 'state': 'closed'}, {'id': 551744448, 'number': 2194, 'closed': datetime.datetime(2021, 1, 8, 15, 37, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 8, 13, 51, 3, tzinfo=datetime.timezone.utc), 'time_taken': 6392.0, 'time_delta': '1:46:32', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 520605716, 'number': 2090, 'closed': datetime.datetime(2020, 11, 14, 14, 52, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 13, 14, 15, 18, tzinfo=datetime.timezone.utc), 'time_taken': 88614.0, 'time_delta': '1 day, 0:36:54', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 485970996, 'number': 1979, 'closed': datetime.datetime(2020, 10, 2, 22, 46, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 12, 17, 35, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1746649.0, 'time_delta': '20 days, 5:10:49', 'additions': 33, 'deletions': 1, 'state': 'closed'}, {'id': 471015394, 'number': 1932, 'closed': datetime.datetime(2021, 6, 12, 14, 35, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 15, 54, 45, tzinfo=datetime.timezone.utc), 'time_taken': 25569642.0, 'time_delta': '295 days, 22:40:42', 'additions': 60, 'deletions': 7, 'state': 'closed'}, {'id': 470202668, 'number': 1929, 'closed': datetime.datetime(2020, 8, 29, 17, 52, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 14, 27, 1, tzinfo=datetime.timezone.utc), 'time_taken': 876336.0, 'time_delta': '10 days, 3:25:36', 'additions': 108, 'deletions': 57, 'state': 'closed'}, {'id': 453377121, 'number': 1881, 'closed': datetime.datetime(2020, 8, 17, 15, 48, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 12, 2, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2432773.0, 'time_delta': '28 days, 3:46:13', 'additions': 2387, 'deletions': 228, 'state': 'closed'}, {'id': 436534894, 'number': 1825, 'closed': datetime.datetime(2020, 7, 20, 12, 18, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 15, 0, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2755061.0, 'time_delta': '31 days, 21:17:41', 'additions': 1643, 'deletions': 82, 'state': 'closed'}, {'id': 426022711, 'number': 1783, 'closed': datetime.datetime(2020, 6, 18, 15, 1, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 14, 42, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1469957.0, 'time_delta': '17 days, 0:19:17', 'additions': 49720, 'deletions': 1146, 'state': 'closed'}, {'id': 421374671, 'number': 1770, 'closed': datetime.datetime(2020, 6, 1, 17, 57, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 14, 13, 3, tzinfo=datetime.timezone.utc), 'time_taken': 963851.0, 'time_delta': '11 days, 3:44:11', 'additions': 110, 'deletions': 7, 'state': 'closed'}, {'id': 419552500, 'number': 1762, 'closed': datetime.datetime(2020, 5, 19, 19, 56, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 18, 14, 49, 52, tzinfo=datetime.timezone.utc), 'time_taken': 104823.0, 'time_delta': '1 day, 5:07:03', 'additions': 117, 'deletions': 6, 'state': 'closed'}, {'id': 412465776, 'number': 1722, 'closed': datetime.datetime(2020, 5, 26, 21, 20, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 2, 15, 19, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2095275.0, 'time_delta': '24 days, 6:01:15', 'additions': 863, 'deletions': 6, 'state': 'closed'}, {'id': 407461471, 'number': 1684, 'closed': datetime.datetime(2020, 5, 10, 14, 9, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 22, 18, 26, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1539790.0, 'time_delta': '17 days, 19:43:10', 'additions': 1382, 'deletions': 1248, 'state': 'closed'}, {'id': 401882538, 'number': 1635, 'closed': datetime.datetime(2020, 4, 10, 12, 35, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 10, 12, 3, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1944.0, 'time_delta': '0:32:24', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 395723309, 'number': 1601, 'closed': datetime.datetime(2020, 4, 22, 18, 8, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 30, 15, 23, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1997092.0, 'time_delta': '23 days, 2:44:52', 'additions': 1199, 'deletions': 1185, 'state': 'closed'}, {'id': 393778115, 'number': 1588, 'closed': datetime.datetime(2020, 5, 18, 14, 46, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 19, 15, 21, tzinfo=datetime.timezone.utc), 'time_taken': 4649441.0, 'time_delta': '53 days, 19:30:41', 'additions': 122, 'deletions': 39, 'state': 'closed'}, {'id': 393282628, 'number': 1586, 'closed': datetime.datetime(2020, 3, 29, 19, 11, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 22, 15, tzinfo=datetime.timezone.utc), 'time_taken': 420981.0, 'time_delta': '4 days, 20:56:21', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 391835151, 'number': 1568, 'closed': datetime.datetime(2020, 3, 24, 7, 55, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 21, 9, 9, 43, tzinfo=datetime.timezone.utc), 'time_taken': 254758.0, 'time_delta': '2 days, 22:45:58', 'additions': 40, 'deletions': 9, 'state': 'closed'}, {'id': 383794905, 'number': 1495, 'closed': datetime.datetime(2020, 3, 10, 22, 21, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 4, 19, 4, 7, tzinfo=datetime.timezone.utc), 'time_taken': 530240.0, 'time_delta': '6 days, 3:17:20', 'additions': 35, 'deletions': 26, 'state': 'closed'}, {'id': 381875353, 'number': 1483, 'closed': datetime.datetime(2020, 3, 2, 18, 26, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 29, 16, 21, 20, tzinfo=datetime.timezone.utc), 'time_taken': 180335.0, 'time_delta': '2 days, 2:05:35', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 378600281, 'number': 1453, 'closed': datetime.datetime(2020, 3, 19, 21, 45, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 22, 15, 24, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2269272.0, 'time_delta': '26 days, 6:21:12', 'additions': 310, 'deletions': 363, 'state': 'closed'}]"
