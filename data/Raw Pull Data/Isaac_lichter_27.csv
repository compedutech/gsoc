pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
426950542,Health/damage system with unit tests,"# Description
This PR adds the first ECS system, which manages health and damage. Players are now able to create an entity with a Health component which is lowered when the entity receives a Damage event.",True,515,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/515,https://github.com/MovingBlocks/DestinationSol/pull/515,closed,306,5,8,11,0,9,0,0,[],2020-06-03 04:13:25+00:00,2020-06-10 01:04:19+00:00,593454.0,"6 days, 20:50:54","[{'comment_id': 434907459, 'comment_body': ""Gestalt 7 doesn't require component class names to end in `Component` so I would just call this `Health`"", 'comment_created': datetime.datetime(2020, 6, 3, 23, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 434999361, 'comment_body': ""I'm working on the docs now. I can't believe I forgot XD\r\nI'd rather use `isPresent()`, but I'm ok with either. Is either one preferable for any reason?\r\nIn terms of naming, should Events also not be called `ExampleEvent`?"", 'comment_created': datetime.datetime(2020, 6, 4, 5, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 435011506, 'comment_body': ""`isPresent()` is fine by me. `ifPresent()` is nice in that you don't need to `.get()` the component but `isPresent()` is slightly more readable.\r\nYou raise a very good point about the naming. I was thinking that I don't really want have to put `HealthComponent` into the prefabs. Not really a huge deal so I'll let you decide :)"", 'comment_created': datetime.datetime(2020, 6, 4, 6, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 435261210, 'comment_body': 'I think that it should be `Health` and `DamageEvent`. With components, the essence is really the thing itself, e.g. health, and `component` is a comment about the software architecture. With events, the main thing is that an event is happening. The ""`Damage`"" is just data about the event.', 'comment_created': datetime.datetime(2020, 6, 4, 13, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 437090320, 'comment_body': 'Why are you extending `ComponentSystem`?', 'comment_created': datetime.datetime(2020, 6, 9, 1, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 437100249, 'comment_body': ""@Cervator suggested it, because he said that annotations shouldn't fundamentally change anything"", 'comment_created': datetime.datetime(2020, 6, 9, 2, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 437102303, 'comment_body': '(And therefore it should extend ComponentSystem too)', 'comment_created': datetime.datetime(2020, 6, 9, 2, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 437218991, 'comment_body': ""The only reasons you would want to extend `ComponentSystem` are if you want access to the `context` or you want to tap into the methods it contains. What we were talking about the other day was that the annotation to register the event receiver can be *replaced entirely* with an interface to implement ie. `implements EventReceiver` see [here](https://github.com/NicholasBatesNZ/notepad/commit/4f4445da10f6d2fe29d3daf79dfcd9d5e531ba83).\r\nYou've got to undo the changes in [this commit](https://github.com/MovingBlocks/DestinationSol/pull/496/commits/006da6e2778bb4b0bded428b5f953387f42666ff) to do that.\r\nPing me on discord if you'd like more clarification :+1: "", 'comment_created': datetime.datetime(2020, 6, 9, 8, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 437446954, 'comment_body': 'Thanks üëç\r\nI made the change', 'comment_created': datetime.datetime(2020, 6, 9, 14, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '4a394b57202f6eec2ba2517c6757f25c41f78f85', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c84dfdb322891707e2d22f843b47f199276b55', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e74fc99c55b94dd6a3d08114e72583fe76e3101', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f719436741c2904a7bc82bfdd92ae7367812d804', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc8a2dfedb692897f4d6936932fcb29c54733596', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3902a6d7a43664c181efddc8b4da4afaa4de5978', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4f5849ab4e90259c336ebc1af606a73a0771e16', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48b07062a085ddbfe94f1356be5331666c04373f', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4327fffb22cba3e788e74d1fd42b18a1dd656667', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a4244bea02322f05dbc8e9ff01a348e36c106e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35de06234a32f501f0e2ce04961a18a140311fc0', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
428828163,force/contact handling,"This handles the contact between two entities and the application of force to any entity. When two objects collide, a `ContactEvent` is created which, depending on how it is handled, can then create a `ForceEvent`.",True,516,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/516,https://github.com/MovingBlocks/DestinationSol/pull/516,closed,180,0,4,11,0,18,0,0,[],2020-06-05 22:54:41+00:00,2020-06-16 00:28:54+00:00,869653.0,"10 days, 1:34:13","[{'comment_id': 436401066, 'comment_body': 'Impulse is a vector quantity so I think that this should be named `absoluteImpulse` or similar\r\n(same for the other places where you have impulse)', 'comment_created': datetime.datetime(2020, 6, 7, 20, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436401288, 'comment_body': 'Should the impulse not apply to *both* entities? Something law of conservation of momentum something?', 'comment_created': datetime.datetime(2020, 6, 7, 20, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436401649, 'comment_body': '```suggestion\r\n * Event that represents a continuous force applied to an entity, like gravity. This does NOT represent anything\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 21, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436401653, 'comment_body': '```suggestion\r\n * that is a sudden, immediate force, like collision. That type of occurrence is handled by {@link ImpulseEvent}.\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 21, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436401662, 'comment_body': 'More javadocs here please. Why is this a thing? F=ma so ideally a force will always cause acceleration.', 'comment_created': datetime.datetime(2020, 6, 7, 21, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436401812, 'comment_body': 'Could you javadoc the getters instead of the private fields? Applies to all events.', 'comment_created': datetime.datetime(2020, 6, 7, 21, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436401893, 'comment_body': ""This doesn't really tell me anything about what that means."", 'comment_created': datetime.datetime(2020, 6, 7, 21, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436401954, 'comment_body': ""This seems wrong, maybe just needs more docs. But shouldn't impulse by definition be vector?"", 'comment_created': datetime.datetime(2020, 6, 7, 21, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436402045, 'comment_body': '```suggestion\r\n * represent anything that is an application of continuous force, like gravity. That type of occurrence is handled by\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 21, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436402047, 'comment_body': '```suggestion\r\n * Event that represents a sudden, immediate force applied to an entity, like impact of a collision. This does NOT\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 21, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436402093, 'comment_body': ""Shouldn't this be vector? See comment above."", 'comment_created': datetime.datetime(2020, 6, 7, 21, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436402618, 'comment_body': 'how about `instantaneous` rather than `immediate`?', 'comment_created': datetime.datetime(2020, 6, 7, 21, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436402693, 'comment_body': '`instantaneous` again?', 'comment_created': datetime.datetime(2020, 6, 7, 21, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436510724, 'comment_body': 'A contact would involve two entities would it not?\r\nHow is the entity causing the contact determined? Is it just arbitrary?\r\n\r\nDoes the entity that this event is sent against have any relevance? Is it the other entity in the contact?', 'comment_created': datetime.datetime(2020, 6, 8, 7, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'syntaxi', 'type': 'User'}, {'comment_id': 436511613, 'comment_body': 'It seems a little bit odd to me that this event has impulse stuff in it? Is this needed to be in this event or can it be removed and just use the impulse event below?', 'comment_created': datetime.datetime(2020, 6, 8, 7, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'syntaxi', 'type': 'User'}, {'comment_id': 436512640, 'comment_body': 'Because a force is applied to an object over a period of time, the lack of anything related to time is a tad confusing?\r\n\r\nHow would one use this event? Would you send it and the force is just applied forever? Do you send the event constantly until you want the force to end?', 'comment_created': datetime.datetime(2020, 6, 8, 7, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'syntaxi', 'type': 'User'}, {'comment_id': 439194258, 'comment_body': 'I think that the contact handling can sometimes prevent an impulse event from happening. For example, if a SolShip comes into contact with a Loot object, it absorbs the loot without handling the impulse.  ', 'comment_created': datetime.datetime(2020, 6, 12, 3, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 439870998, 'comment_body': 'Force events are sent repeatedly each timestep, for the duration of the time that the entity is being affected by the force.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '393f0ca6871ccf936c1d0f1415d164194d07c282', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b2a162601ccff534ada3b8f817c81eab61e6b6f', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e252cdaa67197f9942365e8363e416a85e3b8b70', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4362e8ff75245cf59503c47c0c3a81f45d6a3b0', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95814b6986fb160d3b742dd32ec1f6836ddf228e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f6c735714564d5e3ba63d39c1114ca2c2aabcc', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64e39d3096f398f72bc70b7dff5d096e7b795d31', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3d0d15df29169a34c55f0993458869c3f20e3dd', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e731d0fee6d46ee19bd3a1eecd049d7be9a79f', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bfded5e9c2778ab26297457760da2d42f4ebf9e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd089bd60a06a030ed0efd419e6f5b029ad9c0564', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
433853302,Removal framework,"This adds events to represent destruction of an entity and removal for optimization, as well as a default system to handle those events. This also adds a method to `EventSystemManager` to send an event directly to an entity. This PR was incorporated into #527.",False,519,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/519,https://github.com/MovingBlocks/DestinationSol/pull/519,closed,428,23,15,14,3,16,0,0,[],2020-06-12 19:38:34+00:00,2020-07-05 22:00:09+00:00,1995695.0,"23 days, 2:21:35","[{'comment_id': 439867804, 'comment_body': ""Isn't this effectively an unspecified behavior? Since at this point the entity doesn't exist anymore?"", 'comment_created': datetime.datetime(2020, 6, 14, 21, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 439868627, 'comment_body': ""That's a good point"", 'comment_created': datetime.datetime(2020, 6, 14, 21, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 439872130, 'comment_body': ""Might there be a situation where an entity's health could drop to zero, but not be removed? For example, if someone designs a component that lets a player live for a few seconds after their health drops to zero, so that if they have a repair kit, they can still recover.\r\n\r\nI know that that is niche, but I think that the removal is actually separate from the health handling. If a system stops the entity from dying, then it should still have zero health."", 'comment_created': datetime.datetime(2020, 6, 14, 22, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 440514077, 'comment_body': 'Did we figure out why this is here? Is this change useful?', 'comment_created': datetime.datetime(2020, 6, 16, 0, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 440515362, 'comment_body': ""This whole block can be simplified, no? You're effectively checking for negative health twice now."", 'comment_created': datetime.datetime(2020, 6, 16, 0, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 440515632, 'comment_body': 'Should this still be here?', 'comment_created': datetime.datetime(2020, 6, 16, 0, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 440516952, 'comment_body': ""Let's be consistent with newlines in empty classes please:)"", 'comment_created': datetime.datetime(2020, 6, 16, 0, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 440908944, 'comment_body': ""Is seems that it's a static field, so the change effectively doesn't do anything. @Adrijaned might know, though - it was in his patch."", 'comment_created': datetime.datetime(2020, 6, 16, 14, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 440916545, 'comment_body': ""See my earlier reply to Adrijaned. I think that there are two different things that happen when an entity with 30 health takes 40 damage. \r\n1) The entity's health drops to 0 (so it shouldn't display -10 for the hero, for example)\r\n2) a DestroyEvent is created\r\n\r\nI think that the two things aren't intrinsically linked. If an entity doesn't get removed by the DestroyEvent, its health still should not be negative. Does that make sense? If so, I'll add some Javadoc explaining that."", 'comment_created': datetime.datetime(2020, 6, 16, 14, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 440917048, 'comment_body': 'Nope! That was for debugging purposes XD', 'comment_created': datetime.datetime(2020, 6, 16, 14, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 441648945, 'comment_body': 'Probably just IDEA did something automatic', 'comment_created': datetime.datetime(2020, 6, 17, 15, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 441691701, 'comment_body': ""Nope, this block can't be simplified, since you need to set the Health component on the entity before sending the event"", 'comment_created': datetime.datetime(2020, 6, 17, 16, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 441870449, 'comment_body': 'Ok that makes sense, comments explaining that would be great :)', 'comment_created': datetime.datetime(2020, 6, 17, 22, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 443129771, 'comment_body': ""I don't particularly like this. Generally, IMO, entities should have features based on what components they have. Here, however, you are basing feature on the _lack_ of component. Not only is this a bit ugly, it is also quite error-prone - it can be quite easy to forget about the existence of particular component."", 'comment_created': datetime.datetime(2020, 6, 20, 13, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 445262139, 'comment_body': '```suggestion\r\n    @ReceiveEvent\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 1, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445279587, 'comment_body': 'I get this, but can we have a brief comment in the code explaining why `entity.setComponent(health);` has to be here twice please :)', 'comment_created': datetime.datetime(2020, 6, 25, 2, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}]","[{'commit_sha': '29db891eb0e2e39fc35bcb84f99ad419b072ed9d', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537eac73488141c5be2a9840b2841344dc5f2dda', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ec1f1a704857484a26ab9e05bdb23efa5d096a', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f84f227cd53a2f708ba3fb8c6eb93f73538a25', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc36321af4955f40ce41fde64ab67d3d7c2d3814', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09582061acc3859804029ddecf0b44d788d2d983', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad2dd1eb9ab290acdf012e9b84f3a736dd4bffc1', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04c492f16e20a6bd4ad5fadcebd3cfc7f06d987d', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ab5b3fa15eb6a1a278d7d7f6917d6aa58af5fb', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9554e5c6300d923a4f9f974f426b880c219023a7', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4e555c40dbb487bc133252014f90d6f638eaef', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5770dc972557dc6fedf7fd588d92045e141552cd', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebb83bffc96a8722d180662c24da11f6d389f070', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54853d5688006ff371cda3a521d67ea79422c94e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
436881373,ECS structure for using Body,"This PR fixes issue #521 - it's an ECS-friendly way of interacting with the `Body` class. 

DS utilizes libGDX for its physics handling. The `Body` class corresponds, theoretically, to a component to be attached to an entity. However, the Body class contains functionality and is not serializable, which means that it can't be put into a component. 

This PR contains a system for handling the interactions between Bodies and entities. The system has a HashMap linking the two, and it processes the events that have to do with an entity`s Body.

This PR was incorporated into #527.",False,522,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/522,https://github.com/MovingBlocks/DestinationSol/pull/522,closed,731,18,28,16,2,35,0,0,[],2020-06-19 04:26:33+00:00,2020-07-05 22:00:26+00:00,1445633.0,"16 days, 17:33:53","[{'comment_id': 443130058, 'comment_body': ""Wouldn't this be better as its own component? Not all entities move, e.g. map markers."", 'comment_created': datetime.datetime(2020, 6, 20, 13, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443130128, 'comment_body': ""Wouldn't this be better in its own component? Not all entities have rotation - e.g. sun or map markers."", 'comment_created': datetime.datetime(2020, 6, 20, 13, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443130237, 'comment_body': 'New values or deltas? Javadoc.', 'comment_created': datetime.datetime(2020, 6, 20, 13, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443202970, 'comment_body': ""I didn't consider this in previous PRs but I don't think that `position` and `velocity` are going to be deep copies since they are not primitive types.\r\nI really don't like that this method has to be a thing, as it can get painful quickly, but as of now it is what it is. Perhaps some discussion is needed in #gestalt"", 'comment_created': datetime.datetime(2020, 6, 21, 9, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 443373657, 'comment_body': 'This is not a deep copy', 'comment_created': datetime.datetime(2020, 6, 22, 7, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374072, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374121, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374175, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374236, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374281, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374332, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374366, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374406, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374490, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374557, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374606, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374744, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374821, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443374901, 'comment_body': '...', 'comment_created': datetime.datetime(2020, 6, 22, 7, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443376663, 'comment_body': 'Not a deep copy', 'comment_created': datetime.datetime(2020, 6, 22, 7, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443378644, 'comment_body': 'Could it perhaps be a good idea to change this to private field with getter/setter to ensure angle is always `‚àà [0; 360)` ?', 'comment_created': datetime.datetime(2020, 6, 22, 7, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 443617157, 'comment_body': ""That's REALLY weird. I renamed the class, but I don't know why it changed the build scripts. I'll fix that"", 'comment_created': datetime.datetime(2020, 6, 22, 14, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 443750423, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 6, 22, 18, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 443790556, 'comment_body': 'Why not use `Vector2#cpy()`? Same goes for velocity.', 'comment_created': datetime.datetime(2020, 6, 22, 19, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 445285975, 'comment_body': ""I feel like a system should only implement one thing to make things clearer, since technically they are two different things anyway. So we'd split the update functionality into a `BodyHandlerUpdateSystem`. I can be persuaded on this one though :+1: "", 'comment_created': datetime.datetime(2020, 6, 25, 3, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445297140, 'comment_body': 'This is not a very descriptive name', 'comment_created': datetime.datetime(2020, 6, 25, 4, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445308276, 'comment_body': 'See SolMath#norm which `Normalizes the angle, ie puts it in the range (-180, 180].` It may be worth investigating to see if you should change your bounds to that.', 'comment_created': datetime.datetime(2020, 6, 25, 5, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445308885, 'comment_body': '@Adrijaned would we have to `SolMath.free(other.position)` here and in Velocity?', 'comment_created': datetime.datetime(2020, 6, 25, 5, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445309794, 'comment_body': ""Position position position.position. Hmm maybe there's a better name for some of these :thinking: \r\nJust thinking aloud, not the end of the world :+1: "", 'comment_created': datetime.datetime(2020, 6, 25, 5, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445311219, 'comment_body': ""Since this is a local field it's not going to be shared between the EventReceiver and the UpdateAwareSystem which I suspect throws a spanner in the works for you :/"", 'comment_created': datetime.datetime(2020, 6, 25, 5, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445338389, 'comment_body': ""Afaik copy makes no assumption about what happens with the other component, so it should not be invalidated. (Like, even just retrieving component from entity copies it, and freeing would invalidate the instance contained in the entity. And if you didn't write afterwards - perhaps because you have no reason to write it - the entity would then be stuck with invalid component)"", 'comment_created': datetime.datetime(2020, 6, 25, 6, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 445649455, 'comment_body': 'What do you think about positionComponent?', 'comment_created': datetime.datetime(2020, 6, 25, 15, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 445896127, 'comment_body': ""If you're just talking about the local field then yeah that sounds good :+1: "", 'comment_created': datetime.datetime(2020, 6, 25, 23, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445902055, 'comment_body': ""The result of this will be ignored since you haven't set it to a variable"", 'comment_created': datetime.datetime(2020, 6, 26, 0, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445941493, 'comment_body': 'As in ""positionComponent.position""', 'comment_created': datetime.datetime(2020, 6, 26, 2, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '4fdf63b9d7a44762f1c0ab9f2f78a38b2bfc5682', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4490f82f876887721f2d72b562daa077126901b', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53a07dd7f9b1c600921db9015c5b89e7c4015023', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d1843e88798bf669cd6b892002ac62bee2026ae', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f6ba70acb0b72952d171bdeca4e8015ec378b3b', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c788963e7e7e2dcf683b294b14a41a9375d8cba', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e04a00abf5a1173f66df6c297c00d8414a87d2ef', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7260558853614b5c2fa85514f7778420f222b2f', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e65bd7a2613ccb4df19ebcb844666b574128eea', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8afacec87a192e66cfb9d2728f7ce77ee7fda4af', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800db92e8677d18d580723917331b29a8ec81902', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad8ec1773762d12367f455a3de52b5b12d21140', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced86767336d6c66bbf045214a70225e397beb4a', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b49d63c3258ff0c594a8920f67d9a99811aa6c3', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2a79a87c3ab55568e9a518e22be97b1c8cd188', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e975e59dd2fa6cae5ad10a88ea6933a26054a3', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
459658183,Working ECS-based graphics,"# Description
This PR contains working ECS-based graphics. `SolApplication` implements `ApplicationListener`, which is a libGDX interface with a `render()` method that is called when the application should render itself. On every call to that method, a `RenderEvent` is sent to each entity with a `Renderable` component. The component contains a list of `RenderableElements`, which have the information necessary for rendering the textures that the sprite is composed of. The `RenderingSystem` is the system that draws the entities when it receives a `RenderEvent`.

# Testing
After line 241 in SolApplication (within the `if` statement), add the following block of code:

```
if (!entityCreated) {
        RenderableElement element = new RenderableElement();
        element.texture = SolRandom.randomElement(Assets.listTexturesMatching(""engine:asteroid_.*""));
        element.relativePosition = new Vector2(0, 0);
        element.drawableLevel = DrawableLevel.BODIES;
        element.width = 2;
        element.height = 2;
        element.tint = Color.YELLOW;
        Renderable renderable = new Renderable();
        renderable.elements.add(element);

        Position position = new Position();
        position.position = solGame.getHero().getShip().getPosition().cpy();
        EntityRef entityRef = entitySystemManager.getEntityManager().createEntity(renderable, position, new Angle());
        entityRef.setComponent(graphicsComponent);
        position.position.y += 1;
        entityRef.setComponent(position);
        entityCreated = true;
}
```

Then add the following field anywhere:
`private boolean entityCreated = false;`

That code creates an entity with the graphics of a gold-colored asteroid, which is positioned right below the player. When the game is started, the asteroid should be visible.
",True,541,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/541,https://github.com/MovingBlocks/DestinationSol/pull/541,closed,240,3,8,2,0,12,1,0,[{'name': 'Enhancement-architectural'}],2020-07-30 22:58:52+00:00,2020-07-31 19:29:23+00:00,73831.0,20:30:31,"[{'comment_id': 463342932, 'comment_body': 'Suggestion: Would `Renderable` be a better name? Sometimes it can be nice to name components after verbs since they\'re treats. Easier to say ""That entity is renderable"" vs ""That entity is graphics"" or even ""that entity _has_ graphics"" - plus I think ""Graphics"" is somewhat of an ambiguous term.\r\n\r\nInspiration as usual taken from Terasology, where admittedly it gets a bit more complicated since 3D and so on. So there just one of the things is `MeshComponent` but there are a bunch more and even variants of Mesh.', 'comment_created': datetime.datetime(2020, 7, 31, 0, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463343624, 'comment_body': ""Javadoc at the class level for everything would be very much appreciated and super useful. There is so much old Terasology code that has no class-level javadoc and over time people forget what the things do. Here we're still at the very beginning and can start out everything right :-)"", 'comment_created': datetime.datetime(2020, 7, 31, 0, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463343977, 'comment_body': 'How about `Invisible` as opposed to `Invisibility` ?', 'comment_created': datetime.datetime(2020, 7, 31, 0, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463345788, 'comment_body': 'I still need to learn what makes the distinction in the newest Gestalt of an even receiver vs an entity system class. So used to everything with logic being a `System` leading to easy names like ""RenderingSystem""\r\n\r\nMaybe leaving `Component` off from actual component classes leads to some benefits, but others like event classes still seem to end in `-Event` - I wonder if it would make sense to keep a focus on `System` classes too.  I just really don\'t know why event handlers and systems are two different things now ü§î \r\n\r\nThis isn\'t on you as much as me just not catching some subtleties or knowing about any sort of reasoning things were split out, yet. Just everything in my head screams that this is a system class :-)', 'comment_created': datetime.datetime(2020, 7, 31, 0, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463346673, 'comment_body': ""More of a personal preference than a directive or anything, but I like being able to use the one-line approach for documenting fields - at least while the javadoc is fairly short. So that'd simply mean:\r\n\r\n`/** Represents the texture of this graphics element. */"", 'comment_created': datetime.datetime(2020, 7, 31, 0, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463347614, 'comment_body': 'This on the other hand would *not* be javadoc, since it is in the middle of a method. Good place for a plain old `//` comment at the end of the line, or on the preceding line.', 'comment_created': datetime.datetime(2020, 7, 31, 0, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463370757, 'comment_body': ""The newline above is meaningful. I don't think that this one is however"", 'comment_created': datetime.datetime(2020, 7, 31, 2, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463371172, 'comment_body': 'Is this needed? Is it even going to work? ü§î ', 'comment_created': datetime.datetime(2020, 7, 31, 2, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463371357, 'comment_body': 'Thanks for this üëç ', 'comment_created': datetime.datetime(2020, 7, 31, 2, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463376243, 'comment_body': 'Recheck some of these please. In Java, all non-primitives are just references, so these lines will not be making deep copies unless you do something like `.cpy()` which you have done for `relativePosition`.\r\n`width`, `height`, `relativeAngle` and `relativePosition` will be deep copies with this code.\r\n`texture`, `drawableLevel`, and `tint` should all have `clone()` methods', 'comment_created': datetime.datetime(2020, 7, 31, 2, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463376706, 'comment_body': '`Graphics` component?', 'comment_created': datetime.datetime(2020, 7, 31, 2, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463382144, 'comment_body': ""DrawableLevel is an enum, so it doesn't need to be copied. I added copying for `texture` and `tint`"", 'comment_created': datetime.datetime(2020, 7, 31, 3, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '8417284b1b79565cf5dfbe9b78859a6d33f40ddf', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0726121aa436cada109fd8507f66cb15b6c83de', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
467531400,Projectiles affect entities,"# Description
This adds working projectile collision with entities. When an entity is shot, this PR makes it so that the entity takes damage and absorbs the projectile properly.

# Testing
When the game starts, a golden asteroid should appear. Shooting it should destroy it.

To test the area-of-effect damage, run `groovyw module get makeshift -remote ThisIsPIRI` then start the game as the `Titanomachy`. Shooting the asteroid with the nuclear missile should destroy the asteroid.
",True,548,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/548,https://github.com/MovingBlocks/DestinationSol/pull/548,closed,118,52,7,3,0,8,0,0,[],2020-08-13 17:23:24+00:00,2020-08-16 04:53:27+00:00,214203.0,"2 days, 11:30:03","[{'comment_id': 471040792, 'comment_body': 'If `userData` is still not a `SolObject` at this point we should break / return -1', 'comment_created': datetime.datetime(2020, 8, 15, 22, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471041315, 'comment_body': 'Again here, you removed an earlier check to make sure that `dataA` and `dataB` are both `SolObjects`. It was probably there for a good reason :)', 'comment_created': datetime.datetime(2020, 8, 15, 22, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471041472, 'comment_body': ""I'm assuming you know what you're doing by not putting this in an `else` block :+1: "", 'comment_created': datetime.datetime(2020, 8, 15, 22, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471041557, 'comment_body': 'Have you got a document somewhere listing all of the TODOs that should become TODONEs by the end of the project? It would be really helpful if you could share that', 'comment_created': datetime.datetime(2020, 8, 15, 22, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471041680, 'comment_body': ""What are the chances of injecting `Projectile` with the ESM so that we don't have to do this?"", 'comment_created': datetime.datetime(2020, 8, 15, 22, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471055820, 'comment_body': ""`userData` will always be a `SolObject` by this point. The previous code assumed it would always be a SolObject, and my changes added the possibility of it being an EntityRef. I'll put in a comment that explains that"", 'comment_created': datetime.datetime(2020, 8, 16, 2, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 471056150, 'comment_body': ""I put that in [here](https://github.com/MovingBlocks/DestinationSol/pull/543/files#diff-36cb9a67d69750ed5e3e1e539965b7c1R56). Before I set up the contact handling with `Projectiles`, I needed to make sure that the game wouldn't crash. This removes the need for the check, because it now works properly."", 'comment_created': datetime.datetime(2020, 8, 16, 2, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 471063952, 'comment_body': 'Good catch! I think the `else` got lost in the shuffle ', 'comment_created': datetime.datetime(2020, 8, 16, 4, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'bacd19e5a5205b03e8cdee5fe3ea22b5f67ad1ab', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62374bc56ad316e2c6be0f2ee3bf2090a8d7716', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c9055d9e25b8bf795bbad7fe86ffdbadda18d96', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
468492708,Rubble creation,"# Description
This PR adds rubble creation when an entity with a `CreatesRubbleOnDestruction` component is destroyed. It also refactors `Shard` to be called `Rubble`, and `DropsMoneyOnDeath` to be called `DropsMoneyOnDestruction`.

# Testing
Start the game and shoot the golden asteroid. When it is destroyed, it should explode into rubble.
",True,550,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/550,https://github.com/MovingBlocks/DestinationSol/pull/550,closed,127,29,11,4,0,2,0,0,[],2020-08-16 20:34:22+00:00,2020-08-20 06:09:19+00:00,293697.0,"3 days, 9:34:57","[{'comment_id': 471893743, 'comment_body': ""If you initially set the velocity to a `new Vector2` you can get rid of the else block.\r\n\r\nSomething else that I haven't remembered until now is that you really want to be using `SolMath.getVec()` to initialise a vector. It does fancy optimisations with pools. Then use `SolMath.free(vector)` when you're done with it."", 'comment_created': datetime.datetime(2020, 8, 18, 3, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 473561726, 'comment_body': ""Good point! I'll change all the vectors in a separate PR."", 'comment_created': datetime.datetime(2020, 8, 20, 3, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '9720fbcc412933fc3f06539ec15a38b0d9acfd44', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb92485bb60eb502205f157a23c2ec44312a1297', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e733be920036cabcf341a41b6fdfb26401a69ab', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f362f16252173a4f986d7ecc955d08160756ce7d', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
431509327,Stasis component for distant entities,"New component for when an entity becomes too far from the player and should be put into stasis. For systems that shouldn't operate on an entity in stasis, there should be a method annotated with ""@Before"" that consumes that event if the entity has a stasis component.",True,518,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/518,https://github.com/MovingBlocks/DestinationSol/pull/518,closed,34,0,1,1,0,2,0,0,[],2020-06-09 03:13:54+00:00,2020-06-14 21:49:17+00:00,498923.0,"5 days, 18:35:23","[{'comment_id': 437220723, 'comment_body': 'Does this need to be here?', 'comment_created': datetime.datetime(2020, 6, 9, 8, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 437370148, 'comment_body': ""Yes - in order to implement Component, Java requires that all its methods be implemented, even if they're not doing anything"", 'comment_created': datetime.datetime(2020, 6, 9, 12, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'a6156a497871bb38b719c6650b1d9b690b5297e8', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
447216815,Loot dropping upon death,"# Description
This PR adds a system for creating `Loot` objects when an entity with a `DropsLoot` component dies. `Loot` is the DS object that is created when certain `SolObject`s (e.g. ships) are destroyed. The logic was pulled from `Asteroid`, although `SolShip` uses a similar structure.

This is built upon PRs #519 and #522. It makes use of the `DestroyEvent` from 519, as well as `Position` and `Velocity` from 522.

# Testing
First, copy/paste the following three fields to SolApplication:
```
private boolean madeLootEntity = false;
    private int counter = 0;
    EntityRef entity;
```
Next, add the following code after line 231 (inside the `if` statement that confims that `solGame` isn't null):
```
            if (!madeLootEntity) {

            entity = entitySystemManager.getEntityManager().createEntity(new DropsLootOnDeath(), new Position(), new Velocity(), new Size());

            Position position = entity.getComponent(Position.class).get();
            position.position = solGame.getHero().getPosition().cpy();
            position.position.x += 1;
            position.position.y += 3;
            entity.setComponent(position);

            Size size = new Size();
            size.size = 20;
            entity.setComponent(size);

            madeLootEntity = true;
        }
        counter++;
        if (counter == 500) {
            entitySystemManager.sendEvent(new DestroyEvent(), entity);
        }
```

That code does a few things:
* Creates an entity with the requisite components to drop loot upon dying
* Moves the entity one unit down and three to the right, so that the loot won't be absorbed by the station
* After several seconds, the `EntitySystemManager` will send a `DestroyEvent` to the entity, causing loot to appear on screen",True,529,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/529,https://github.com/MovingBlocks/DestinationSol/pull/529,closed,176,14,4,6,1,4,0,0,[],2020-07-10 04:30:11+00:00,2020-07-21 21:59:36+00:00,1013365.0,"11 days, 17:29:25","[{'comment_id': 453123926, 'comment_body': 'What is `thrMoney`? Longer, descriptive names are better than short abbreviations.\r\nAlso, please comment on use of magic numbers :)', 'comment_created': datetime.datetime(2020, 7, 10, 23, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 453123933, 'comment_body': '`l` is not a good variable name :P', 'comment_created': datetime.datetime(2020, 7, 10, 23, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 453125342, 'comment_body': 'I actually copy/pasted that code, so I have no idea what the magic numbers represent XD', 'comment_created': datetime.datetime(2020, 7, 10, 23, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 453125490, 'comment_body': ""That was also copy/pasted. I would never choose that as a name. I'll change it"", 'comment_created': datetime.datetime(2020, 7, 10, 23, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'f399461de3ba67283e4f8e5e3535447560cf8875', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f4f42f9f25567d73b583be38e24a23ada09dd3e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bcc443304f9bd22f00049a4fa4017073ae9813c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c7c6a0f4557f92a00f48ab31ba327073546c095', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b74242f1a042bcbd14452912f9108f6200acabb', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c14a066affeab5fd5e8308f2021c148f32d5621', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
468215127,Impulse handling,"# Description
This changes impulse handling from being asteroid-specific to being general purpose by adding a `mass` field in `BodyLinked` and by creating a `Durability` component. It also changes the `AsteroidImpulseHandler` to be a general `ImpulseHandlingSystem`.

# Testing
Start the game with a Loaded Imperial Large ship. The asteroid should be harder to destroy (because it now has a mass that is higher than one).
",True,549,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/549,https://github.com/MovingBlocks/DestinationSol/pull/549,closed,114,18,5,4,0,7,0,0,[],2020-08-14 22:57:24+00:00,2020-08-20 06:04:08+00:00,457604.0,"5 days, 7:06:44","[{'comment_id': 471054945, 'comment_body': ""I don't really like this but there's not much that can be done other than throwing an exception. Perhaps log an error to show that an invalid durability was given"", 'comment_created': datetime.datetime(2020, 8, 16, 2, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471058341, 'comment_body': 'Division by zero if mass is zero. Might want to put a constraint + log in the component', 'comment_created': datetime.datetime(2020, 8, 16, 3, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471058498, 'comment_body': ""Maybe I'm too tired but you're not actually doing anything with this are you?"", 'comment_created': datetime.datetime(2020, 8, 16, 3, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471133592, 'comment_body': 'Fixed :)', 'comment_created': datetime.datetime(2020, 8, 16, 16, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 471895679, 'comment_body': 'You set `this.mass` to 1 if the parameter is a bad value and then proceed to overwrite it with the bad value :wink: ', 'comment_created': datetime.datetime(2020, 8, 18, 3, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471895867, 'comment_body': 'Same thing here with setting `this.durability` to a potentially bad value', 'comment_created': datetime.datetime(2020, 8, 18, 3, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471896403, 'comment_body': 'Huh? I thought `DamageEvent` took a float :thinking: ', 'comment_created': datetime.datetime(2020, 8, 18, 3, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}]","[{'commit_sha': '0ec6a7fe2449f840764b09881653a53291c01bab', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '517607cc327f981f3eaf96c88f861ed9066a9f35', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53fff16eb2006015d44b175febc61179b8bb2214', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f3c633fa01574efaa6075db66777a5b8ee9265', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
466471140,refactor: use EmptyComponent,"# Description
This switches the empty components to actually USE `EmptyComponent`.",True,547,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/547,https://github.com/MovingBlocks/DestinationSol/pull/547,closed,11,31,5,1,0,0,0,0,[],2020-08-12 02:43:51+00:00,2020-08-12 06:57:24+00:00,15213.0,4:13:33,[],"[{'commit_sha': '27d6d705377a093212ab64e7070426d77d814dc2', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
470549273,improvement: textures scale to size,"# Description
This fixes the graphics scaling and aligns the sprite with the collision mesh. As of now, it is slightly inaccurate.

# Testing
Start the game with a small ship and poke the edges gently to see if the asteroid's meshes are aligned with the sprite. Repeat at a few different sizes.

# Outstanding Work
I'm not sure that the multi-sprite renderables work (e.g. a ship with a gun). That needs to be tested and possibly fixed. The collision mesh alignment is also inaccurate, so that needs to be fixed. See issue #552 ",True,551,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/551,https://github.com/MovingBlocks/DestinationSol/pull/551,closed,93,43,7,6,0,8,0,0,[],2020-08-20 01:59:52+00:00,2020-08-25 03:09:54+00:00,436202.0,"5 days, 1:10:02","[{'comment_id': 475040428, 'comment_body': ""This comment is going to sound weird, but, while this is greatly needed documentation, it feels out of place here. I know eventually only two lines of code happen, but it almost feels like this should be class-level Javadoc somewhere that describes the overall way of how things work, rather than be an immense multi-line comment for a couple lines of code in an event handler :-)\r\n\r\nI know there's some more refactoring coming, so maybe this block has a forever-home somewhere in mind already when things get better."", 'comment_created': datetime.datetime(2020, 8, 22, 3, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 475040720, 'comment_body': ""This is a nice block of Javadoc, still a lot of weight for a single variable, but it might be important enough for it.\r\n\r\nThere's one line in here that's also present in the big floating comment I noted elsewhere. Maybe it is only needed in one place or another, or if everything becomes Javadoc in different places they can just link to each other nicely?"", 'comment_created': datetime.datetime(2020, 8, 22, 3, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 475040860, 'comment_body': 'Does that essentially mean we should have some sort of `ResizeEvent` for use in some cases? Not sure when the size component is actually changed, outside of debugging?', 'comment_created': datetime.datetime(2020, 8, 22, 3, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 475041191, 'comment_body': 'More of a stray thought than important here, but we had talked about this on Discord recently, with the move from an `Invisible` component to a boolean inside `Renderable` - one thing I forgot to mention as a nice benefit to having more components is being able to filter on them in the `@ReceiveEvent` which is a nice way to avoid if statements and keep the handlers simple. \r\n\r\nHowever, in this case being invisible would be the _less_ likely case, it would seem, and we can\'t test for ""Renderable, Position, and Size, but _not_ Invisible"" in the annotation anyway ü§î Hmm, wonder if that would be useful to have. That then might make one think about whether there should be a a `Visible` component instead but ... then that\'s essentially `Renderable`. ECS: A different bicycle than OOP, but both still fall over at times ;-)', 'comment_created': datetime.datetime(2020, 8, 22, 3, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 475231519, 'comment_body': 'This should be called whenever the [lifecycle event](https://github.com/MovingBlocks/gestalt/wiki/Gestalt-Entity-System-Quick-Start#lifecycle-events) `OnChanged` happens.', 'comment_created': datetime.datetime(2020, 8, 23, 15, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 475231718, 'comment_body': 'I definitely hear the benefits of booleans in a component and of having separate components. Maybe you can talk about it with @immortius :)', 'comment_created': datetime.datetime(2020, 8, 23, 15, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 475231912, 'comment_body': 'Tbh I was planning on doing this size comment on each bit of code that deals with the offset, but then I ran out of time before I had to log off XD', 'comment_created': datetime.datetime(2020, 8, 23, 15, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 475232070, 'comment_body': ""I'm going to move/change it "", 'comment_created': datetime.datetime(2020, 8, 23, 15, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'cb5438304e10308db85b3a8034bfdc57f1a5378c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d44410c004ebe1545630cac29e67f5a19a5af50', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf561750853c1e78577f84e49973781243776798', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '614f96e6de867c23be61c9b9bd657bd8f7a88131', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ab5f4c1fea2b14ed1cf654b6805059a7ece781', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91fbd7543fc6668500f524a18b9881643717a19c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
461856739,Asteroid implementation,"# Description
This PR contains an implementation for ECS-based asteroids. As of now, most of the asteroids in-game are still the old OOP asteroids, but there is a golden asteroid that uses the new component-based structure.

When the ship collides with the golden asteroid, they both take damage, the same way they would if the asteroid was a regular one. When the golden asteroid dies, it creates Money objects. As of now, the asteroid cannot be shot, because Projectiles don't collide with entities. I'm working on that now.

# Testing
The testing code is currently built in - if you start the game, there will be a golden asteroid visible that has a working collision mesh. If you ram into it, you'll take damage as usual. I set its health to one, so to destroy it, ram into a a few times from far away or use a Loaded Imperial Large ship (they do a lot of collision damage).  It should drop money upon being destroyed. As of now, I haven't developed collision with `Projectiles`, so shooting it won't work. 

# Outstanding Work
I need to add damage events to asteroids that get shot, and I need to move the body creation into a generic, non-asteroid class. The collision mesh is also slightly misaligned, so it needs to be fixed. In addition, I need to have asteroids produce rubble when destroyed. Once those things are done, I'll replace the existing asteroids with ECSteroids.
",True,543,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/543,https://github.com/MovingBlocks/DestinationSol/pull/543,closed,694,113,31,16,0,12,1,0,[{'name': 'Enhancement-architectural'}],2020-08-02 20:33:03+00:00,2020-08-12 00:39:47+00:00,792404.0,"9 days, 4:06:44","[{'comment_id': 467361295, 'comment_body': 'Might want to add a comment for which dependencies this helps find, since it is a sort of quirky one', 'comment_created': datetime.datetime(2020, 8, 8, 4, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361403, 'comment_body': ""Top level javadoc for new classes would be appreciated please :-)\r\n\r\nCode might not be final just yet, but there's probably something brief that could be added, maybe touch on the challenge if the collision / physics stuff here if it seems to be a good place to note it"", 'comment_created': datetime.datetime(2020, 8, 8, 4, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361578, 'comment_body': 'Could you expand on this comment a bit please, particularly for users unfamiliar with the area?', 'comment_created': datetime.datetime(2020, 8, 8, 4, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361730, 'comment_body': 'Very minor / trivial, but when you leave debug code in on a PR it might be worth to leave a little `//TODO` at the top part of it to quickly highlight that it is debug code and should be processed in the near future :-)\r\n\r\nNot necessarily worth it to set the PR to WIP in this case though, since it is essentially functional. In fact to keep PRs manageable we _might_ want to consider merging this in its current state after a simple review pass or two', 'comment_created': datetime.datetime(2020, 8, 8, 4, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361793, 'comment_body': 'Same story here with Javadoc üëç ', 'comment_created': datetime.datetime(2020, 8, 8, 4, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361802, 'comment_body': 'Trivial, but lets try to avoid adding more overly abbreviated code to DS :-)', 'comment_created': datetime.datetime(2020, 8, 8, 4, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467362684, 'comment_body': ""This might be an odd one or something for chat but: could we look at the meaning behind `@RegisterUpdateSystem` vs implementing `UpdateAwareSystem` ? To me they seem sort of weirdly related - might be good reasons to make them distinct, but maybe we can make them _sound_ more distinct somehow then? ü§î I'm not on top of what they differing methods involve, although the names there are fairly clear. Maybe the annotation name should be more about prioritization?"", 'comment_created': datetime.datetime(2020, 8, 8, 4, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467362849, 'comment_body': 'This sounds like it deserves a `TODO` at the start to make it formal and allow code analytics to catch on to it :-)', 'comment_created': datetime.datetime(2020, 8, 8, 5, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467363060, 'comment_body': 'This is great javadoc üëç Having this sort of thing for each big important class would be awesome.\r\n\r\nSince this is meant to be temporary you might want to throw a TODO into the javadoc or even `@deprecate` it to indicate its doomed nature', 'comment_created': datetime.datetime(2020, 8, 8, 5, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467363156, 'comment_body': 'Also great javadoc. Nice work üëç ', 'comment_created': datetime.datetime(2020, 8, 8, 5, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467363229, 'comment_body': 'Should this be another `EmptyComponent` ?', 'comment_created': datetime.datetime(2020, 8, 8, 5, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467363471, 'comment_body': ""Does this at all get into the priority levels available on events? That's another thing I'm used to from TS (make events _high priority_ if they're meant to get processed before other key events) - not totally sure if it is a thing in latest Gestalt and/or DS"", 'comment_created': datetime.datetime(2020, 8, 8, 5, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}]","[{'commit_sha': '63d983a4672e3795b95d33065a4c1d9d50c31a06', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0827590648eb1c9623c2cf71105aec0f887c1d68', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e2bc283df8cac8b71efa32ee7e8c8c2e9f662b', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56c94c0ab279f587655d56427a0a9e52c7566a53', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '777d48c4da5de103d09182b3de7dbaf80dd9ef95', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b942a69082a91d921605df477fecbaf5e021ac', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6de95256396b7f43625b8195ebd64dd25a2594c3', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1d8d5bef26415f5fd5aa073754663bd8b06bcf', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '824bd64fab9aa7195c68c2f1e068f9afbc86ffad', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7c19a96af7ec42f2861270def5ae2ca9023bc90', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb0bc10d48544795e7f12b7962edcb367836ce8', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a51c57ce97d2aea85b3239ef9ba82b8c2a7ef8c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28d81a10e7b1820e7a5fbb9364c105e1c77073c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20f56a1026bcd0ab4e6c22c4a5efc2678308f7f6', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c928b1da8d5b552a8d198050e112ccb906291e8', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcfa86e1a8c1c6a40dd0a5aabf6a9d1296c502bc', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
426950542,Health/damage system with unit tests,"# Description
This PR adds the first ECS system, which manages health and damage. Players are now able to create an entity with a Health component which is lowered when the entity receives a Damage event.",True,515,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/515,https://github.com/MovingBlocks/DestinationSol/pull/515,closed,306,5,8,11,0,9,0,0,[],2020-06-03 04:13:25+00:00,2020-06-10 01:04:19+00:00,593454.0,"6 days, 20:50:54","[{'comment_id': 434907459, 'comment_body': ""Gestalt 7 doesn't require component class names to end in `Component` so I would just call this `Health`"", 'comment_created': datetime.datetime(2020, 6, 3, 23, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 434999361, 'comment_body': ""I'm working on the docs now. I can't believe I forgot XD\r\nI'd rather use `isPresent()`, but I'm ok with either. Is either one preferable for any reason?\r\nIn terms of naming, should Events also not be called `ExampleEvent`?"", 'comment_created': datetime.datetime(2020, 6, 4, 5, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 435011506, 'comment_body': ""`isPresent()` is fine by me. `ifPresent()` is nice in that you don't need to `.get()` the component but `isPresent()` is slightly more readable.\r\nYou raise a very good point about the naming. I was thinking that I don't really want have to put `HealthComponent` into the prefabs. Not really a huge deal so I'll let you decide :)"", 'comment_created': datetime.datetime(2020, 6, 4, 6, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 435261210, 'comment_body': 'I think that it should be `Health` and `DamageEvent`. With components, the essence is really the thing itself, e.g. health, and `component` is a comment about the software architecture. With events, the main thing is that an event is happening. The ""`Damage`"" is just data about the event.', 'comment_created': datetime.datetime(2020, 6, 4, 13, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 437090320, 'comment_body': 'Why are you extending `ComponentSystem`?', 'comment_created': datetime.datetime(2020, 6, 9, 1, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 437100249, 'comment_body': ""@Cervator suggested it, because he said that annotations shouldn't fundamentally change anything"", 'comment_created': datetime.datetime(2020, 6, 9, 2, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 437102303, 'comment_body': '(And therefore it should extend ComponentSystem too)', 'comment_created': datetime.datetime(2020, 6, 9, 2, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 437218991, 'comment_body': ""The only reasons you would want to extend `ComponentSystem` are if you want access to the `context` or you want to tap into the methods it contains. What we were talking about the other day was that the annotation to register the event receiver can be *replaced entirely* with an interface to implement ie. `implements EventReceiver` see [here](https://github.com/NicholasBatesNZ/notepad/commit/4f4445da10f6d2fe29d3daf79dfcd9d5e531ba83).\r\nYou've got to undo the changes in [this commit](https://github.com/MovingBlocks/DestinationSol/pull/496/commits/006da6e2778bb4b0bded428b5f953387f42666ff) to do that.\r\nPing me on discord if you'd like more clarification :+1: "", 'comment_created': datetime.datetime(2020, 6, 9, 8, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 437446954, 'comment_body': 'Thanks üëç\r\nI made the change', 'comment_created': datetime.datetime(2020, 6, 9, 14, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '4a394b57202f6eec2ba2517c6757f25c41f78f85', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c84dfdb322891707e2d22f843b47f199276b55', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e74fc99c55b94dd6a3d08114e72583fe76e3101', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f719436741c2904a7bc82bfdd92ae7367812d804', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc8a2dfedb692897f4d6936932fcb29c54733596', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3902a6d7a43664c181efddc8b4da4afaa4de5978', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4f5849ab4e90259c336ebc1af606a73a0771e16', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48b07062a085ddbfe94f1356be5331666c04373f', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4327fffb22cba3e788e74d1fd42b18a1dd656667', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a4244bea02322f05dbc8e9ff01a348e36c106e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35de06234a32f501f0e2ce04961a18a140311fc0', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
428828163,force/contact handling,"This handles the contact between two entities and the application of force to any entity. When two objects collide, a `ContactEvent` is created which, depending on how it is handled, can then create a `ForceEvent`.",True,516,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/516,https://github.com/MovingBlocks/DestinationSol/pull/516,closed,180,0,4,11,0,18,0,0,[],2020-06-05 22:54:41+00:00,2020-06-16 00:28:54+00:00,869653.0,"10 days, 1:34:13","[{'comment_id': 436401066, 'comment_body': 'Impulse is a vector quantity so I think that this should be named `absoluteImpulse` or similar\r\n(same for the other places where you have impulse)', 'comment_created': datetime.datetime(2020, 6, 7, 20, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436401288, 'comment_body': 'Should the impulse not apply to *both* entities? Something law of conservation of momentum something?', 'comment_created': datetime.datetime(2020, 6, 7, 20, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436401649, 'comment_body': '```suggestion\r\n * Event that represents a continuous force applied to an entity, like gravity. This does NOT represent anything\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 21, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436401653, 'comment_body': '```suggestion\r\n * that is a sudden, immediate force, like collision. That type of occurrence is handled by {@link ImpulseEvent}.\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 21, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436401662, 'comment_body': 'More javadocs here please. Why is this a thing? F=ma so ideally a force will always cause acceleration.', 'comment_created': datetime.datetime(2020, 6, 7, 21, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436401812, 'comment_body': 'Could you javadoc the getters instead of the private fields? Applies to all events.', 'comment_created': datetime.datetime(2020, 6, 7, 21, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436401893, 'comment_body': ""This doesn't really tell me anything about what that means."", 'comment_created': datetime.datetime(2020, 6, 7, 21, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436401954, 'comment_body': ""This seems wrong, maybe just needs more docs. But shouldn't impulse by definition be vector?"", 'comment_created': datetime.datetime(2020, 6, 7, 21, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436402045, 'comment_body': '```suggestion\r\n * represent anything that is an application of continuous force, like gravity. That type of occurrence is handled by\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 21, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436402047, 'comment_body': '```suggestion\r\n * Event that represents a sudden, immediate force applied to an entity, like impact of a collision. This does NOT\r\n```', 'comment_created': datetime.datetime(2020, 6, 7, 21, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436402093, 'comment_body': ""Shouldn't this be vector? See comment above."", 'comment_created': datetime.datetime(2020, 6, 7, 21, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 436402618, 'comment_body': 'how about `instantaneous` rather than `immediate`?', 'comment_created': datetime.datetime(2020, 6, 7, 21, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436402693, 'comment_body': '`instantaneous` again?', 'comment_created': datetime.datetime(2020, 6, 7, 21, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 436510724, 'comment_body': 'A contact would involve two entities would it not?\r\nHow is the entity causing the contact determined? Is it just arbitrary?\r\n\r\nDoes the entity that this event is sent against have any relevance? Is it the other entity in the contact?', 'comment_created': datetime.datetime(2020, 6, 8, 7, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'syntaxi', 'type': 'User'}, {'comment_id': 436511613, 'comment_body': 'It seems a little bit odd to me that this event has impulse stuff in it? Is this needed to be in this event or can it be removed and just use the impulse event below?', 'comment_created': datetime.datetime(2020, 6, 8, 7, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'syntaxi', 'type': 'User'}, {'comment_id': 436512640, 'comment_body': 'Because a force is applied to an object over a period of time, the lack of anything related to time is a tad confusing?\r\n\r\nHow would one use this event? Would you send it and the force is just applied forever? Do you send the event constantly until you want the force to end?', 'comment_created': datetime.datetime(2020, 6, 8, 7, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'syntaxi', 'type': 'User'}, {'comment_id': 439194258, 'comment_body': 'I think that the contact handling can sometimes prevent an impulse event from happening. For example, if a SolShip comes into contact with a Loot object, it absorbs the loot without handling the impulse.  ', 'comment_created': datetime.datetime(2020, 6, 12, 3, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 439870998, 'comment_body': 'Force events are sent repeatedly each timestep, for the duration of the time that the entity is being affected by the force.', 'comment_created': datetime.datetime(2020, 6, 14, 21, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '393f0ca6871ccf936c1d0f1415d164194d07c282', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b2a162601ccff534ada3b8f817c81eab61e6b6f', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e252cdaa67197f9942365e8363e416a85e3b8b70', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4362e8ff75245cf59503c47c0c3a81f45d6a3b0', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95814b6986fb160d3b742dd32ec1f6836ddf228e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f6c735714564d5e3ba63d39c1114ca2c2aabcc', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64e39d3096f398f72bc70b7dff5d096e7b795d31', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3d0d15df29169a34c55f0993458869c3f20e3dd', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31e731d0fee6d46ee19bd3a1eecd049d7be9a79f', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bfded5e9c2778ab26297457760da2d42f4ebf9e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd089bd60a06a030ed0efd419e6f5b029ad9c0564', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
431509327,Stasis component for distant entities,"New component for when an entity becomes too far from the player and should be put into stasis. For systems that shouldn't operate on an entity in stasis, there should be a method annotated with ""@Before"" that consumes that event if the entity has a stasis component.",True,518,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/518,https://github.com/MovingBlocks/DestinationSol/pull/518,closed,34,0,1,1,0,2,0,0,[],2020-06-09 03:13:54+00:00,2020-06-14 21:49:17+00:00,498923.0,"5 days, 18:35:23","[{'comment_id': 437220723, 'comment_body': 'Does this need to be here?', 'comment_created': datetime.datetime(2020, 6, 9, 8, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 437370148, 'comment_body': ""Yes - in order to implement Component, Java requires that all its methods be implemented, even if they're not doing anything"", 'comment_created': datetime.datetime(2020, 6, 9, 12, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'a6156a497871bb38b719c6650b1d9b690b5297e8', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
432595336,Added an EmptyComponent for components with no data,,True,79,https://api.github.com/repos/MovingBlocks/gestalt/pulls/79,https://github.com/MovingBlocks/gestalt/pull/79,closed,16,0,1,1,2,3,0,0,[],2020-06-10 17:19:36+00:00,2020-06-17 20:08:47+00:00,614951.0,"7 days, 2:49:11","[{'comment_id': 438291329, 'comment_body': ""Was about to ask whether we need to check for right type of `other` here, but Component's generic type solves that for us, it seems =)"", 'comment_created': datetime.datetime(2020, 6, 10, 17, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'skaldarnar', 'type': 'User'}, {'comment_id': 443958461, 'comment_body': ""I think it might be nicer to keep the generic on EmptyComponent partially bound (i.e.\r\n```\r\npublic abstract class EmptyComponent<T> implements Component<T extends EmptyComponent>\r\n```\r\n\r\nThis would ensure the bounds on the final component's copy method is correct."", 'comment_created': datetime.datetime(2020, 6, 23, 4, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'immortius', 'type': 'User'}, {'comment_id': 443958913, 'comment_body': 'It is a bit worse than data could be lost. The uncopied information would never get saved into the component store, so the component will not work as expected at all.', 'comment_created': datetime.datetime(2020, 6, 23, 4, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'immortius', 'type': 'User'}]","[{'commit_sha': '028c41fbfd242eea8fda684360fe2dcaf5b5fd0e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
433853302,Removal framework,"This adds events to represent destruction of an entity and removal for optimization, as well as a default system to handle those events. This also adds a method to `EventSystemManager` to send an event directly to an entity. This PR was incorporated into #527.",False,519,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/519,https://github.com/MovingBlocks/DestinationSol/pull/519,closed,428,23,15,14,3,16,0,0,[],2020-06-12 19:38:34+00:00,2020-07-05 22:00:09+00:00,1995695.0,"23 days, 2:21:35","[{'comment_id': 439867804, 'comment_body': ""Isn't this effectively an unspecified behavior? Since at this point the entity doesn't exist anymore?"", 'comment_created': datetime.datetime(2020, 6, 14, 21, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 439868627, 'comment_body': ""That's a good point"", 'comment_created': datetime.datetime(2020, 6, 14, 21, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 439872130, 'comment_body': ""Might there be a situation where an entity's health could drop to zero, but not be removed? For example, if someone designs a component that lets a player live for a few seconds after their health drops to zero, so that if they have a repair kit, they can still recover.\r\n\r\nI know that that is niche, but I think that the removal is actually separate from the health handling. If a system stops the entity from dying, then it should still have zero health."", 'comment_created': datetime.datetime(2020, 6, 14, 22, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 440514077, 'comment_body': 'Did we figure out why this is here? Is this change useful?', 'comment_created': datetime.datetime(2020, 6, 16, 0, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 440515362, 'comment_body': ""This whole block can be simplified, no? You're effectively checking for negative health twice now."", 'comment_created': datetime.datetime(2020, 6, 16, 0, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 440515632, 'comment_body': 'Should this still be here?', 'comment_created': datetime.datetime(2020, 6, 16, 0, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 440516952, 'comment_body': ""Let's be consistent with newlines in empty classes please:)"", 'comment_created': datetime.datetime(2020, 6, 16, 0, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 440908944, 'comment_body': ""Is seems that it's a static field, so the change effectively doesn't do anything. @Adrijaned might know, though - it was in his patch."", 'comment_created': datetime.datetime(2020, 6, 16, 14, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 440916545, 'comment_body': ""See my earlier reply to Adrijaned. I think that there are two different things that happen when an entity with 30 health takes 40 damage. \r\n1) The entity's health drops to 0 (so it shouldn't display -10 for the hero, for example)\r\n2) a DestroyEvent is created\r\n\r\nI think that the two things aren't intrinsically linked. If an entity doesn't get removed by the DestroyEvent, its health still should not be negative. Does that make sense? If so, I'll add some Javadoc explaining that."", 'comment_created': datetime.datetime(2020, 6, 16, 14, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 440917048, 'comment_body': 'Nope! That was for debugging purposes XD', 'comment_created': datetime.datetime(2020, 6, 16, 14, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 441648945, 'comment_body': 'Probably just IDEA did something automatic', 'comment_created': datetime.datetime(2020, 6, 17, 15, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 441691701, 'comment_body': ""Nope, this block can't be simplified, since you need to set the Health component on the entity before sending the event"", 'comment_created': datetime.datetime(2020, 6, 17, 16, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 441870449, 'comment_body': 'Ok that makes sense, comments explaining that would be great :)', 'comment_created': datetime.datetime(2020, 6, 17, 22, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 443129771, 'comment_body': ""I don't particularly like this. Generally, IMO, entities should have features based on what components they have. Here, however, you are basing feature on the _lack_ of component. Not only is this a bit ugly, it is also quite error-prone - it can be quite easy to forget about the existence of particular component."", 'comment_created': datetime.datetime(2020, 6, 20, 13, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 445262139, 'comment_body': '```suggestion\r\n    @ReceiveEvent\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 1, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 445279587, 'comment_body': 'I get this, but can we have a brief comment in the code explaining why `entity.setComponent(health);` has to be here twice please :)', 'comment_created': datetime.datetime(2020, 6, 25, 2, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}]","[{'commit_sha': '29db891eb0e2e39fc35bcb84f99ad419b072ed9d', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537eac73488141c5be2a9840b2841344dc5f2dda', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ec1f1a704857484a26ab9e05bdb23efa5d096a', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f84f227cd53a2f708ba3fb8c6eb93f73538a25', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc36321af4955f40ce41fde64ab67d3d7c2d3814', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09582061acc3859804029ddecf0b44d788d2d983', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad2dd1eb9ab290acdf012e9b84f3a736dd4bffc1', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04c492f16e20a6bd4ad5fadcebd3cfc7f06d987d', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ab5b3fa15eb6a1a278d7d7f6917d6aa58af5fb', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9554e5c6300d923a4f9f974f426b880c219023a7', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4e555c40dbb487bc133252014f90d6f638eaef', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5770dc972557dc6fedf7fd588d92045e141552cd', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebb83bffc96a8722d180662c24da11f6d389f070', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54853d5688006ff371cda3a521d67ea79422c94e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
444465230,Removal and body,"This PR contains the changes of both #519 and #522. It also handles the merge conflicts between the two PRs.

",True,527,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/527,https://github.com/MovingBlocks/DestinationSol/pull/527,closed,1156,40,38,32,0,0,0,0,[],2020-07-05 21:51:19+00:00,2020-07-05 22:55:07+00:00,3828.0,1:03:48,[],"[{'commit_sha': '29db891eb0e2e39fc35bcb84f99ad419b072ed9d', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537eac73488141c5be2a9840b2841344dc5f2dda', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ec1f1a704857484a26ab9e05bdb23efa5d096a', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f84f227cd53a2f708ba3fb8c6eb93f73538a25', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc36321af4955f40ce41fde64ab67d3d7c2d3814', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09582061acc3859804029ddecf0b44d788d2d983', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad2dd1eb9ab290acdf012e9b84f3a736dd4bffc1', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04c492f16e20a6bd4ad5fadcebd3cfc7f06d987d', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ab5b3fa15eb6a1a278d7d7f6917d6aa58af5fb', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fdf63b9d7a44762f1c0ab9f2f78a38b2bfc5682', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4490f82f876887721f2d72b562daa077126901b', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53a07dd7f9b1c600921db9015c5b89e7c4015023', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d1843e88798bf669cd6b892002ac62bee2026ae', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f6ba70acb0b72952d171bdeca4e8015ec378b3b', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c788963e7e7e2dcf683b294b14a41a9375d8cba', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e04a00abf5a1173f66df6c297c00d8414a87d2ef', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9554e5c6300d923a4f9f974f426b880c219023a7', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd4e555c40dbb487bc133252014f90d6f638eaef', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7260558853614b5c2fa85514f7778420f222b2f', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e65bd7a2613ccb4df19ebcb844666b574128eea', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8afacec87a192e66cfb9d2728f7ce77ee7fda4af', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800db92e8677d18d580723917331b29a8ec81902', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ad8ec1773762d12367f455a3de52b5b12d21140', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5770dc972557dc6fedf7fd588d92045e141552cd', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebb83bffc96a8722d180662c24da11f6d389f070', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54853d5688006ff371cda3a521d67ea79422c94e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced86767336d6c66bbf045214a70225e397beb4a', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b49d63c3258ff0c594a8920f67d9a99811aa6c3', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2a79a87c3ab55568e9a518e22be97b1c8cd188', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e975e59dd2fa6cae5ad10a88ea6933a26054a3', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd37b3541c3ed6ad3c5d40a7b4f2d3e32ed00e638', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df9e06f67e0baddf2073470577459cac18dcae08', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
447216815,Loot dropping upon death,"# Description
This PR adds a system for creating `Loot` objects when an entity with a `DropsLoot` component dies. `Loot` is the DS object that is created when certain `SolObject`s (e.g. ships) are destroyed. The logic was pulled from `Asteroid`, although `SolShip` uses a similar structure.

This is built upon PRs #519 and #522. It makes use of the `DestroyEvent` from 519, as well as `Position` and `Velocity` from 522.

# Testing
First, copy/paste the following three fields to SolApplication:
```
private boolean madeLootEntity = false;
    private int counter = 0;
    EntityRef entity;
```
Next, add the following code after line 231 (inside the `if` statement that confims that `solGame` isn't null):
```
            if (!madeLootEntity) {

            entity = entitySystemManager.getEntityManager().createEntity(new DropsLootOnDeath(), new Position(), new Velocity(), new Size());

            Position position = entity.getComponent(Position.class).get();
            position.position = solGame.getHero().getPosition().cpy();
            position.position.x += 1;
            position.position.y += 3;
            entity.setComponent(position);

            Size size = new Size();
            size.size = 20;
            entity.setComponent(size);

            madeLootEntity = true;
        }
        counter++;
        if (counter == 500) {
            entitySystemManager.sendEvent(new DestroyEvent(), entity);
        }
```

That code does a few things:
* Creates an entity with the requisite components to drop loot upon dying
* Moves the entity one unit down and three to the right, so that the loot won't be absorbed by the station
* After several seconds, the `EntitySystemManager` will send a `DestroyEvent` to the entity, causing loot to appear on screen",True,529,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/529,https://github.com/MovingBlocks/DestinationSol/pull/529,closed,176,14,4,6,1,4,0,0,[],2020-07-10 04:30:11+00:00,2020-07-21 21:59:36+00:00,1013365.0,"11 days, 17:29:25","[{'comment_id': 453123926, 'comment_body': 'What is `thrMoney`? Longer, descriptive names are better than short abbreviations.\r\nAlso, please comment on use of magic numbers :)', 'comment_created': datetime.datetime(2020, 7, 10, 23, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 453123933, 'comment_body': '`l` is not a good variable name :P', 'comment_created': datetime.datetime(2020, 7, 10, 23, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 453125342, 'comment_body': 'I actually copy/pasted that code, so I have no idea what the magic numbers represent XD', 'comment_created': datetime.datetime(2020, 7, 10, 23, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 453125490, 'comment_body': ""That was also copy/pasted. I would never choose that as a name. I'll change it"", 'comment_created': datetime.datetime(2020, 7, 10, 23, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'f399461de3ba67283e4f8e5e3535447560cf8875', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f4f42f9f25567d73b583be38e24a23ada09dd3e', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bcc443304f9bd22f00049a4fa4017073ae9813c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c7c6a0f4557f92a00f48ab31ba327073546c095', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b74242f1a042bcbd14452912f9108f6200acabb', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c14a066affeab5fd5e8308f2021c148f32d5621', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
449895900,Created a structure for handling travel through starports,"# Description
This PR is to replace the `Transcendent` class that is used when a `SolShip` goes through a `StarPort`. When an entity enters the `StarPort`, an `InStarportTransit` component is added, and an `EnteringStarportEvent` is sent with the requisite information. The movement is then handled by the `InTransitUpdateHandler`, which updates the entity's angle, position, and velocity every time it receives an `InTransitUpdateEvent`.

For this to be implemented, `SolShip` needs to be refactored, because its usage depends on several `SolShip` components, such as money and `Pilot`. The current Transcendent implementation is also tied to several classes that depend on `SolShip`, and refactoring those classes will require an ECS framework for ships. This PR is a complete framework for handling starport travel, but it can't be put into place until the old code is cleaned up. 

# Outstanding Work
* Refactor `StarPort` to use the new structure
* Remove `Hero`'s dependency on `Transcendent`",False,534,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/534,https://github.com/MovingBlocks/DestinationSol/pull/534,closed,375,1,8,1,0,0,0,0,[],2020-07-16 04:50:59+00:00,2021-10-11 16:15:37+00:00,39093878.0,"452 days, 11:24:38",[],"[{'commit_sha': '3b3550ff9791a546e9af3fb1a46a2c6241958b7a', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
457882013,Fixed race condition in Assets,"This fixes #538 by making the method synchronized (it was already structured in a way that only works for a single thread, so this just enforces that requirement)",True,539,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/539,https://github.com/MovingBlocks/DestinationSol/pull/539,closed,1,1,1,1,0,0,0,1,[],2020-07-28 15:21:34+00:00,2020-07-31 22:09:11+00:00,283657.0,"3 days, 6:47:37",[],"[{'commit_sha': '98ff2e4a267824a0022fd9832f5a2c7cb57661a3', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
459658183,Working ECS-based graphics,"# Description
This PR contains working ECS-based graphics. `SolApplication` implements `ApplicationListener`, which is a libGDX interface with a `render()` method that is called when the application should render itself. On every call to that method, a `RenderEvent` is sent to each entity with a `Renderable` component. The component contains a list of `RenderableElements`, which have the information necessary for rendering the textures that the sprite is composed of. The `RenderingSystem` is the system that draws the entities when it receives a `RenderEvent`.

# Testing
After line 241 in SolApplication (within the `if` statement), add the following block of code:

```
if (!entityCreated) {
        RenderableElement element = new RenderableElement();
        element.texture = SolRandom.randomElement(Assets.listTexturesMatching(""engine:asteroid_.*""));
        element.relativePosition = new Vector2(0, 0);
        element.drawableLevel = DrawableLevel.BODIES;
        element.width = 2;
        element.height = 2;
        element.tint = Color.YELLOW;
        Renderable renderable = new Renderable();
        renderable.elements.add(element);

        Position position = new Position();
        position.position = solGame.getHero().getShip().getPosition().cpy();
        EntityRef entityRef = entitySystemManager.getEntityManager().createEntity(renderable, position, new Angle());
        entityRef.setComponent(graphicsComponent);
        position.position.y += 1;
        entityRef.setComponent(position);
        entityCreated = true;
}
```

Then add the following field anywhere:
`private boolean entityCreated = false;`

That code creates an entity with the graphics of a gold-colored asteroid, which is positioned right below the player. When the game is started, the asteroid should be visible.
",True,541,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/541,https://github.com/MovingBlocks/DestinationSol/pull/541,closed,240,3,8,2,0,12,1,0,[{'name': 'Enhancement-architectural'}],2020-07-30 22:58:52+00:00,2020-07-31 19:29:23+00:00,73831.0,20:30:31,"[{'comment_id': 463342932, 'comment_body': 'Suggestion: Would `Renderable` be a better name? Sometimes it can be nice to name components after verbs since they\'re treats. Easier to say ""That entity is renderable"" vs ""That entity is graphics"" or even ""that entity _has_ graphics"" - plus I think ""Graphics"" is somewhat of an ambiguous term.\r\n\r\nInspiration as usual taken from Terasology, where admittedly it gets a bit more complicated since 3D and so on. So there just one of the things is `MeshComponent` but there are a bunch more and even variants of Mesh.', 'comment_created': datetime.datetime(2020, 7, 31, 0, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463343624, 'comment_body': ""Javadoc at the class level for everything would be very much appreciated and super useful. There is so much old Terasology code that has no class-level javadoc and over time people forget what the things do. Here we're still at the very beginning and can start out everything right :-)"", 'comment_created': datetime.datetime(2020, 7, 31, 0, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463343977, 'comment_body': 'How about `Invisible` as opposed to `Invisibility` ?', 'comment_created': datetime.datetime(2020, 7, 31, 0, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463345788, 'comment_body': 'I still need to learn what makes the distinction in the newest Gestalt of an even receiver vs an entity system class. So used to everything with logic being a `System` leading to easy names like ""RenderingSystem""\r\n\r\nMaybe leaving `Component` off from actual component classes leads to some benefits, but others like event classes still seem to end in `-Event` - I wonder if it would make sense to keep a focus on `System` classes too.  I just really don\'t know why event handlers and systems are two different things now ü§î \r\n\r\nThis isn\'t on you as much as me just not catching some subtleties or knowing about any sort of reasoning things were split out, yet. Just everything in my head screams that this is a system class :-)', 'comment_created': datetime.datetime(2020, 7, 31, 0, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463346673, 'comment_body': ""More of a personal preference than a directive or anything, but I like being able to use the one-line approach for documenting fields - at least while the javadoc is fairly short. So that'd simply mean:\r\n\r\n`/** Represents the texture of this graphics element. */"", 'comment_created': datetime.datetime(2020, 7, 31, 0, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463347614, 'comment_body': 'This on the other hand would *not* be javadoc, since it is in the middle of a method. Good place for a plain old `//` comment at the end of the line, or on the preceding line.', 'comment_created': datetime.datetime(2020, 7, 31, 0, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 463370757, 'comment_body': ""The newline above is meaningful. I don't think that this one is however"", 'comment_created': datetime.datetime(2020, 7, 31, 2, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463371172, 'comment_body': 'Is this needed? Is it even going to work? ü§î ', 'comment_created': datetime.datetime(2020, 7, 31, 2, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463371357, 'comment_body': 'Thanks for this üëç ', 'comment_created': datetime.datetime(2020, 7, 31, 2, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463376243, 'comment_body': 'Recheck some of these please. In Java, all non-primitives are just references, so these lines will not be making deep copies unless you do something like `.cpy()` which you have done for `relativePosition`.\r\n`width`, `height`, `relativeAngle` and `relativePosition` will be deep copies with this code.\r\n`texture`, `drawableLevel`, and `tint` should all have `clone()` methods', 'comment_created': datetime.datetime(2020, 7, 31, 2, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463376706, 'comment_body': '`Graphics` component?', 'comment_created': datetime.datetime(2020, 7, 31, 2, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 463382144, 'comment_body': ""DrawableLevel is an enum, so it doesn't need to be copied. I added copying for `texture` and `tint`"", 'comment_created': datetime.datetime(2020, 7, 31, 3, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '8417284b1b79565cf5dfbe9b78859a6d33f40ddf', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0726121aa436cada109fd8507f66cb15b6c83de', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
461856739,Asteroid implementation,"# Description
This PR contains an implementation for ECS-based asteroids. As of now, most of the asteroids in-game are still the old OOP asteroids, but there is a golden asteroid that uses the new component-based structure.

When the ship collides with the golden asteroid, they both take damage, the same way they would if the asteroid was a regular one. When the golden asteroid dies, it creates Money objects. As of now, the asteroid cannot be shot, because Projectiles don't collide with entities. I'm working on that now.

# Testing
The testing code is currently built in - if you start the game, there will be a golden asteroid visible that has a working collision mesh. If you ram into it, you'll take damage as usual. I set its health to one, so to destroy it, ram into a a few times from far away or use a Loaded Imperial Large ship (they do a lot of collision damage).  It should drop money upon being destroyed. As of now, I haven't developed collision with `Projectiles`, so shooting it won't work. 

# Outstanding Work
I need to add damage events to asteroids that get shot, and I need to move the body creation into a generic, non-asteroid class. The collision mesh is also slightly misaligned, so it needs to be fixed. In addition, I need to have asteroids produce rubble when destroyed. Once those things are done, I'll replace the existing asteroids with ECSteroids.
",True,543,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/543,https://github.com/MovingBlocks/DestinationSol/pull/543,closed,694,113,31,16,0,12,1,0,[{'name': 'Enhancement-architectural'}],2020-08-02 20:33:03+00:00,2020-08-12 00:39:47+00:00,792404.0,"9 days, 4:06:44","[{'comment_id': 467361295, 'comment_body': 'Might want to add a comment for which dependencies this helps find, since it is a sort of quirky one', 'comment_created': datetime.datetime(2020, 8, 8, 4, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361403, 'comment_body': ""Top level javadoc for new classes would be appreciated please :-)\r\n\r\nCode might not be final just yet, but there's probably something brief that could be added, maybe touch on the challenge if the collision / physics stuff here if it seems to be a good place to note it"", 'comment_created': datetime.datetime(2020, 8, 8, 4, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361578, 'comment_body': 'Could you expand on this comment a bit please, particularly for users unfamiliar with the area?', 'comment_created': datetime.datetime(2020, 8, 8, 4, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361730, 'comment_body': 'Very minor / trivial, but when you leave debug code in on a PR it might be worth to leave a little `//TODO` at the top part of it to quickly highlight that it is debug code and should be processed in the near future :-)\r\n\r\nNot necessarily worth it to set the PR to WIP in this case though, since it is essentially functional. In fact to keep PRs manageable we _might_ want to consider merging this in its current state after a simple review pass or two', 'comment_created': datetime.datetime(2020, 8, 8, 4, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361793, 'comment_body': 'Same story here with Javadoc üëç ', 'comment_created': datetime.datetime(2020, 8, 8, 4, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467361802, 'comment_body': 'Trivial, but lets try to avoid adding more overly abbreviated code to DS :-)', 'comment_created': datetime.datetime(2020, 8, 8, 4, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467362684, 'comment_body': ""This might be an odd one or something for chat but: could we look at the meaning behind `@RegisterUpdateSystem` vs implementing `UpdateAwareSystem` ? To me they seem sort of weirdly related - might be good reasons to make them distinct, but maybe we can make them _sound_ more distinct somehow then? ü§î I'm not on top of what they differing methods involve, although the names there are fairly clear. Maybe the annotation name should be more about prioritization?"", 'comment_created': datetime.datetime(2020, 8, 8, 4, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467362849, 'comment_body': 'This sounds like it deserves a `TODO` at the start to make it formal and allow code analytics to catch on to it :-)', 'comment_created': datetime.datetime(2020, 8, 8, 5, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467363060, 'comment_body': 'This is great javadoc üëç Having this sort of thing for each big important class would be awesome.\r\n\r\nSince this is meant to be temporary you might want to throw a TODO into the javadoc or even `@deprecate` it to indicate its doomed nature', 'comment_created': datetime.datetime(2020, 8, 8, 5, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467363156, 'comment_body': 'Also great javadoc. Nice work üëç ', 'comment_created': datetime.datetime(2020, 8, 8, 5, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467363229, 'comment_body': 'Should this be another `EmptyComponent` ?', 'comment_created': datetime.datetime(2020, 8, 8, 5, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 467363471, 'comment_body': ""Does this at all get into the priority levels available on events? That's another thing I'm used to from TS (make events _high priority_ if they're meant to get processed before other key events) - not totally sure if it is a thing in latest Gestalt and/or DS"", 'comment_created': datetime.datetime(2020, 8, 8, 5, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}]","[{'commit_sha': '63d983a4672e3795b95d33065a4c1d9d50c31a06', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0827590648eb1c9623c2cf71105aec0f887c1d68', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e2bc283df8cac8b71efa32ee7e8c8c2e9f662b', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56c94c0ab279f587655d56427a0a9e52c7566a53', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '777d48c4da5de103d09182b3de7dbaf80dd9ef95', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b942a69082a91d921605df477fecbaf5e021ac', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6de95256396b7f43625b8195ebd64dd25a2594c3', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1d8d5bef26415f5fd5aa073754663bd8b06bcf', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '824bd64fab9aa7195c68c2f1e068f9afbc86ffad', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7c19a96af7ec42f2861270def5ae2ca9023bc90', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb0bc10d48544795e7f12b7962edcb367836ce8', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a51c57ce97d2aea85b3239ef9ba82b8c2a7ef8c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28d81a10e7b1820e7a5fbb9364c105e1c77073c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20f56a1026bcd0ab4e6c22c4a5efc2678308f7f6', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c928b1da8d5b552a8d198050e112ccb906291e8', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcfa86e1a8c1c6a40dd0a5aabf6a9d1296c502bc', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
461933829,"Cleaning up SolGame, part one","# Description
SolGame currently creates approximately thirty instances of different classes, and the main way that those classes are accessed are through thirty different getters. Besides for the architectural issues of having a god class, it can create practical issues. For example, the EntitySystemManager needs to be created after SolGame, because some systems created by the ESM use the classes stored in SolGame. However, since UpdateAwareSystems are created in the constructor of SolGame, the ESM can't be injected into those systems. 

The purpose of this PR is to neatly repackage the objects that SolGame currently creates, but that don't need to be part of SolGame. It does so by putting the objects into the `context` and replacing the getters for those objects with `context.get(Object.class)`. This is first of two or three PRs that will do so. I'm breaking it up into multiple PRs to make review more manageable.


# Testing
This is just code cleanup, so the game should function exactly the same way as it did before.

# Outstanding Work
The public getters for rest of the fields in `SolGame` need to be refactored to use `Context`, unless there is a compelling argument for that field being an attribute of SolGame.",True,544,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/544,https://github.com/MovingBlocks/DestinationSol/pull/544,closed,206,149,35,9,0,9,1,0,[{'name': 'Enhancement-code quality'}],2020-08-03 04:26:30+00:00,2021-03-07 20:34:27+00:00,18720477.0,"216 days, 16:07:57","[{'comment_id': 511120901, 'comment_body': ""Should this perhaps be marked TODO? At least that's how the comment reads (Also applies to the following)"", 'comment_created': datetime.datetime(2020, 10, 23, 19, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Adrijaned', 'type': 'User'}, {'comment_id': 583977909, 'comment_body': ""We're trying to phase out all the `myX` variables so let's just call this `context`."", 'comment_created': datetime.datetime(2021, 2, 26, 23, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 583978162, 'comment_body': 'Is there any reason you use `game.getContext()` here rather than `myContext`?', 'comment_created': datetime.datetime(2021, 2, 26, 23, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 583978367, 'comment_body': 'Same question here', 'comment_created': datetime.datetime(2021, 2, 26, 23, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 583980970, 'comment_body': 'and here', 'comment_created': datetime.datetime(2021, 2, 26, 23, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 583981232, 'comment_body': 'Here too. Is the SolApp context different? Maybe it should be... :thinking: ', 'comment_created': datetime.datetime(2021, 2, 26, 23, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 584427394, 'comment_body': 'Nope - that was a mistake. Fixing it now', 'comment_created': datetime.datetime(2021, 3, 1, 3, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 584428969, 'comment_body': ""This one is actually in a private static class, so it doesn't have access to the enclosing class's reference"", 'comment_created': datetime.datetime(2021, 3, 1, 3, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 584432671, 'comment_body': ""It's the same as the SolGame context for now. I think #586 might makes some changes to that, but this should be independent of that."", 'comment_created': datetime.datetime(2021, 3, 1, 3, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'e23ddaf8cbce52ab9769ad3538ca8d1192b6c2f6', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ac0f59cbef2e78caf1e076917bb4e4ff0bad9e0', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58268a72c7058c1c7c600e15fb5c66a087943d33', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9666fd59fe323746ab96f3d030d0d54fbbf6f0', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d82890a9a95d3b123ee8c5bb5395a6a603a62d4', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba7d0e7e79e271c5deffe362e8a228ca3b73006c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61e07bff9539beac356d3d36698ecc52510106b9', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0770c5781270d38cf9f6ec3c08dd82f61a31dff', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9322b8e0e1b6ca8e525e654ee3c7a516647c8827', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
466471140,refactor: use EmptyComponent,"# Description
This switches the empty components to actually USE `EmptyComponent`.",True,547,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/547,https://github.com/MovingBlocks/DestinationSol/pull/547,closed,11,31,5,1,0,0,0,0,[],2020-08-12 02:43:51+00:00,2020-08-12 06:57:24+00:00,15213.0,4:13:33,[],"[{'commit_sha': '27d6d705377a093212ab64e7070426d77d814dc2', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
467531400,Projectiles affect entities,"# Description
This adds working projectile collision with entities. When an entity is shot, this PR makes it so that the entity takes damage and absorbs the projectile properly.

# Testing
When the game starts, a golden asteroid should appear. Shooting it should destroy it.

To test the area-of-effect damage, run `groovyw module get makeshift -remote ThisIsPIRI` then start the game as the `Titanomachy`. Shooting the asteroid with the nuclear missile should destroy the asteroid.
",True,548,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/548,https://github.com/MovingBlocks/DestinationSol/pull/548,closed,118,52,7,3,0,8,0,0,[],2020-08-13 17:23:24+00:00,2020-08-16 04:53:27+00:00,214203.0,"2 days, 11:30:03","[{'comment_id': 471040792, 'comment_body': 'If `userData` is still not a `SolObject` at this point we should break / return -1', 'comment_created': datetime.datetime(2020, 8, 15, 22, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471041315, 'comment_body': 'Again here, you removed an earlier check to make sure that `dataA` and `dataB` are both `SolObjects`. It was probably there for a good reason :)', 'comment_created': datetime.datetime(2020, 8, 15, 22, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471041472, 'comment_body': ""I'm assuming you know what you're doing by not putting this in an `else` block :+1: "", 'comment_created': datetime.datetime(2020, 8, 15, 22, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471041557, 'comment_body': 'Have you got a document somewhere listing all of the TODOs that should become TODONEs by the end of the project? It would be really helpful if you could share that', 'comment_created': datetime.datetime(2020, 8, 15, 22, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471041680, 'comment_body': ""What are the chances of injecting `Projectile` with the ESM so that we don't have to do this?"", 'comment_created': datetime.datetime(2020, 8, 15, 22, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471055820, 'comment_body': ""`userData` will always be a `SolObject` by this point. The previous code assumed it would always be a SolObject, and my changes added the possibility of it being an EntityRef. I'll put in a comment that explains that"", 'comment_created': datetime.datetime(2020, 8, 16, 2, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 471056150, 'comment_body': ""I put that in [here](https://github.com/MovingBlocks/DestinationSol/pull/543/files#diff-36cb9a67d69750ed5e3e1e539965b7c1R56). Before I set up the contact handling with `Projectiles`, I needed to make sure that the game wouldn't crash. This removes the need for the check, because it now works properly."", 'comment_created': datetime.datetime(2020, 8, 16, 2, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 471063952, 'comment_body': 'Good catch! I think the `else` got lost in the shuffle ', 'comment_created': datetime.datetime(2020, 8, 16, 4, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'bacd19e5a5205b03e8cdee5fe3ea22b5f67ad1ab', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b62374bc56ad316e2c6be0f2ee3bf2090a8d7716', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c9055d9e25b8bf795bbad7fe86ffdbadda18d96', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
468215127,Impulse handling,"# Description
This changes impulse handling from being asteroid-specific to being general purpose by adding a `mass` field in `BodyLinked` and by creating a `Durability` component. It also changes the `AsteroidImpulseHandler` to be a general `ImpulseHandlingSystem`.

# Testing
Start the game with a Loaded Imperial Large ship. The asteroid should be harder to destroy (because it now has a mass that is higher than one).
",True,549,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/549,https://github.com/MovingBlocks/DestinationSol/pull/549,closed,114,18,5,4,0,7,0,0,[],2020-08-14 22:57:24+00:00,2020-08-20 06:04:08+00:00,457604.0,"5 days, 7:06:44","[{'comment_id': 471054945, 'comment_body': ""I don't really like this but there's not much that can be done other than throwing an exception. Perhaps log an error to show that an invalid durability was given"", 'comment_created': datetime.datetime(2020, 8, 16, 2, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471058341, 'comment_body': 'Division by zero if mass is zero. Might want to put a constraint + log in the component', 'comment_created': datetime.datetime(2020, 8, 16, 3, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471058498, 'comment_body': ""Maybe I'm too tired but you're not actually doing anything with this are you?"", 'comment_created': datetime.datetime(2020, 8, 16, 3, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471133592, 'comment_body': 'Fixed :)', 'comment_created': datetime.datetime(2020, 8, 16, 16, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 471895679, 'comment_body': 'You set `this.mass` to 1 if the parameter is a bad value and then proceed to overwrite it with the bad value :wink: ', 'comment_created': datetime.datetime(2020, 8, 18, 3, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471895867, 'comment_body': 'Same thing here with setting `this.durability` to a potentially bad value', 'comment_created': datetime.datetime(2020, 8, 18, 3, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 471896403, 'comment_body': 'Huh? I thought `DamageEvent` took a float :thinking: ', 'comment_created': datetime.datetime(2020, 8, 18, 3, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}]","[{'commit_sha': '0ec6a7fe2449f840764b09881653a53291c01bab', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '517607cc327f981f3eaf96c88f861ed9066a9f35', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53fff16eb2006015d44b175febc61179b8bb2214', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f3c633fa01574efaa6075db66777a5b8ee9265', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
468492708,Rubble creation,"# Description
This PR adds rubble creation when an entity with a `CreatesRubbleOnDestruction` component is destroyed. It also refactors `Shard` to be called `Rubble`, and `DropsMoneyOnDeath` to be called `DropsMoneyOnDestruction`.

# Testing
Start the game and shoot the golden asteroid. When it is destroyed, it should explode into rubble.
",True,550,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/550,https://github.com/MovingBlocks/DestinationSol/pull/550,closed,127,29,11,4,0,2,0,0,[],2020-08-16 20:34:22+00:00,2020-08-20 06:09:19+00:00,293697.0,"3 days, 9:34:57","[{'comment_id': 471893743, 'comment_body': ""If you initially set the velocity to a `new Vector2` you can get rid of the else block.\r\n\r\nSomething else that I haven't remembered until now is that you really want to be using `SolMath.getVec()` to initialise a vector. It does fancy optimisations with pools. Then use `SolMath.free(vector)` when you're done with it."", 'comment_created': datetime.datetime(2020, 8, 18, 3, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'NicholasBatesNZ', 'type': 'User'}, {'comment_id': 473561726, 'comment_body': ""Good point! I'll change all the vectors in a separate PR."", 'comment_created': datetime.datetime(2020, 8, 20, 3, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': '9720fbcc412933fc3f06539ec15a38b0d9acfd44', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb92485bb60eb502205f157a23c2ec44312a1297', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e733be920036cabcf341a41b6fdfb26401a69ab', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f362f16252173a4f986d7ecc955d08160756ce7d', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4
470549273,improvement: textures scale to size,"# Description
This fixes the graphics scaling and aligns the sprite with the collision mesh. As of now, it is slightly inaccurate.

# Testing
Start the game with a small ship and poke the edges gently to see if the asteroid's meshes are aligned with the sprite. Repeat at a few different sizes.

# Outstanding Work
I'm not sure that the multi-sprite renderables work (e.g. a ship with a gun). That needs to be tested and possibly fixed. The collision mesh alignment is also inaccurate, so that needs to be fixed. See issue #552 ",True,551,https://api.github.com/repos/MovingBlocks/DestinationSol/pulls/551,https://github.com/MovingBlocks/DestinationSol/pull/551,closed,93,43,7,6,0,8,0,0,[],2020-08-20 01:59:52+00:00,2020-08-25 03:09:54+00:00,436202.0,"5 days, 1:10:02","[{'comment_id': 475040428, 'comment_body': ""This comment is going to sound weird, but, while this is greatly needed documentation, it feels out of place here. I know eventually only two lines of code happen, but it almost feels like this should be class-level Javadoc somewhere that describes the overall way of how things work, rather than be an immense multi-line comment for a couple lines of code in an event handler :-)\r\n\r\nI know there's some more refactoring coming, so maybe this block has a forever-home somewhere in mind already when things get better."", 'comment_created': datetime.datetime(2020, 8, 22, 3, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 475040720, 'comment_body': ""This is a nice block of Javadoc, still a lot of weight for a single variable, but it might be important enough for it.\r\n\r\nThere's one line in here that's also present in the big floating comment I noted elsewhere. Maybe it is only needed in one place or another, or if everything becomes Javadoc in different places they can just link to each other nicely?"", 'comment_created': datetime.datetime(2020, 8, 22, 3, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 475040860, 'comment_body': 'Does that essentially mean we should have some sort of `ResizeEvent` for use in some cases? Not sure when the size component is actually changed, outside of debugging?', 'comment_created': datetime.datetime(2020, 8, 22, 3, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 475041191, 'comment_body': 'More of a stray thought than important here, but we had talked about this on Discord recently, with the move from an `Invisible` component to a boolean inside `Renderable` - one thing I forgot to mention as a nice benefit to having more components is being able to filter on them in the `@ReceiveEvent` which is a nice way to avoid if statements and keep the handlers simple. \r\n\r\nHowever, in this case being invisible would be the _less_ likely case, it would seem, and we can\'t test for ""Renderable, Position, and Size, but _not_ Invisible"" in the annotation anyway ü§î Hmm, wonder if that would be useful to have. That then might make one think about whether there should be a a `Visible` component instead but ... then that\'s essentially `Renderable`. ECS: A different bicycle than OOP, but both still fall over at times ;-)', 'comment_created': datetime.datetime(2020, 8, 22, 3, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Cervator', 'type': 'User'}, {'comment_id': 475231519, 'comment_body': 'This should be called whenever the [lifecycle event](https://github.com/MovingBlocks/gestalt/wiki/Gestalt-Entity-System-Quick-Start#lifecycle-events) `OnChanged` happens.', 'comment_created': datetime.datetime(2020, 8, 23, 15, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 475231718, 'comment_body': 'I definitely hear the benefits of booleans in a component and of having separate components. Maybe you can talk about it with @immortius :)', 'comment_created': datetime.datetime(2020, 8, 23, 15, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 475231912, 'comment_body': 'Tbh I was planning on doing this size comment on each bit of code that deals with the offset, but then I ran out of time before I had to log off XD', 'comment_created': datetime.datetime(2020, 8, 23, 15, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}, {'comment_id': 475232070, 'comment_body': ""I'm going to move/change it "", 'comment_created': datetime.datetime(2020, 8, 23, 15, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacLic', 'type': 'User'}]","[{'commit_sha': 'cb5438304e10308db85b3a8034bfdc57f1a5378c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d44410c004ebe1545630cac29e67f5a19a5af50', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf561750853c1e78577f84e49973781243776798', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '614f96e6de867c23be61c9b9bd657bd8f7a88131', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ab5f4c1fea2b14ed1cf654b6805059a7ece781', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91fbd7543fc6668500f524a18b9881643717a19c', 'committer_username': 'IsaacLic', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 28, 16, 49, 53, tzinfo=datetime.timezone.utc)}]",,40670945,,User,,10,,3,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
34216921,DestinationSol,MovingBlocks/DestinationSol,Java,123,327,35,64,2181,58,6,9,"[{'id': 755441353, 'number': 625, 'closed': None, 'created': datetime.datetime(2021, 10, 11, 16, 10, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 351, 'deletions': 148, 'state': 'open'}, {'id': 657814976, 'number': 595, 'closed': datetime.datetime(2021, 10, 11, 16, 11, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 30, 21, 56, 8, tzinfo=datetime.timezone.utc), 'time_taken': 11556910.0, 'time_delta': '133 days, 18:15:10', 'additions': 348, 'deletions': 144, 'state': 'closed'}, {'id': 585924005, 'number': 590, 'closed': None, 'created': datetime.datetime(2021, 3, 5, 22, 39, 5, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 457, 'deletions': 386, 'state': 'open'}, {'id': 508556559, 'number': 555, 'closed': datetime.datetime(2020, 10, 23, 3, 58, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 22, 21, 1, 25, tzinfo=datetime.timezone.utc), 'time_taken': 25007.0, 'time_delta': '6:56:47', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 470549273, 'number': 551, 'closed': datetime.datetime(2020, 8, 25, 3, 9, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 1, 59, 52, tzinfo=datetime.timezone.utc), 'time_taken': 436202.0, 'time_delta': '5 days, 1:10:02', 'additions': 93, 'deletions': 43, 'state': 'closed'}, {'id': 468492708, 'number': 550, 'closed': datetime.datetime(2020, 8, 20, 6, 9, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 20, 34, 22, tzinfo=datetime.timezone.utc), 'time_taken': 293697.0, 'time_delta': '3 days, 9:34:57', 'additions': 127, 'deletions': 29, 'state': 'closed'}, {'id': 468215127, 'number': 549, 'closed': datetime.datetime(2020, 8, 20, 6, 4, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 22, 57, 24, tzinfo=datetime.timezone.utc), 'time_taken': 457604.0, 'time_delta': '5 days, 7:06:44', 'additions': 114, 'deletions': 18, 'state': 'closed'}, {'id': 467531400, 'number': 548, 'closed': datetime.datetime(2020, 8, 16, 4, 53, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 17, 23, 24, tzinfo=datetime.timezone.utc), 'time_taken': 214203.0, 'time_delta': '2 days, 11:30:03', 'additions': 118, 'deletions': 52, 'state': 'closed'}, {'id': 466471140, 'number': 547, 'closed': datetime.datetime(2020, 8, 12, 6, 57, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 2, 43, 51, tzinfo=datetime.timezone.utc), 'time_taken': 15213.0, 'time_delta': '4:13:33', 'additions': 11, 'deletions': 31, 'state': 'closed'}, {'id': 464118897, 'number': 546, 'closed': datetime.datetime(2020, 8, 12, 2, 34, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 16, 1, 13, tzinfo=datetime.timezone.utc), 'time_taken': 469978.0, 'time_delta': '5 days, 10:32:58', 'additions': 67, 'deletions': 36, 'state': 'closed'}, {'id': 463624193, 'number': 545, 'closed': datetime.datetime(2020, 8, 12, 2, 33, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 20, 25, 43, tzinfo=datetime.timezone.utc), 'time_taken': 540488.0, 'time_delta': '6 days, 6:08:08', 'additions': 236, 'deletions': 72, 'state': 'closed'}, {'id': 461933829, 'number': 544, 'closed': datetime.datetime(2021, 3, 7, 20, 34, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 4, 26, 30, tzinfo=datetime.timezone.utc), 'time_taken': 18720477.0, 'time_delta': '216 days, 16:07:57', 'additions': 206, 'deletions': 149, 'state': 'closed'}, {'id': 461856739, 'number': 543, 'closed': datetime.datetime(2020, 8, 12, 0, 39, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 20, 33, 3, tzinfo=datetime.timezone.utc), 'time_taken': 792404.0, 'time_delta': '9 days, 4:06:44', 'additions': 694, 'deletions': 113, 'state': 'closed'}, {'id': 459658183, 'number': 541, 'closed': datetime.datetime(2020, 7, 31, 19, 29, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 22, 58, 52, tzinfo=datetime.timezone.utc), 'time_taken': 73831.0, 'time_delta': '20:30:31', 'additions': 240, 'deletions': 3, 'state': 'closed'}, {'id': 458752618, 'number': 540, 'closed': datetime.datetime(2020, 7, 31, 0, 54, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 22, 48, 24, tzinfo=datetime.timezone.utc), 'time_taken': 93942.0, 'time_delta': '1 day, 2:05:42', 'additions': 286, 'deletions': 1, 'state': 'closed'}, {'id': 457882013, 'number': 539, 'closed': datetime.datetime(2020, 7, 31, 22, 9, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 15, 21, 34, tzinfo=datetime.timezone.utc), 'time_taken': 283657.0, 'time_delta': '3 days, 6:47:37', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 452781326, 'number': 537, 'closed': datetime.datetime(2020, 7, 30, 22, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 21, 19, 44, tzinfo=datetime.timezone.utc), 'time_taken': 955096.0, 'time_delta': '11 days, 1:18:16', 'additions': 310, 'deletions': 5, 'state': 'closed'}, {'id': 449895900, 'number': 534, 'closed': datetime.datetime(2021, 10, 11, 16, 15, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 4, 50, 59, tzinfo=datetime.timezone.utc), 'time_taken': 39093878.0, 'time_delta': '452 days, 11:24:38', 'additions': 375, 'deletions': 1, 'state': 'closed'}, {'id': 447674877, 'number': 531, 'closed': datetime.datetime(2020, 8, 6, 22, 4, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 22, 55, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2329780.0, 'time_delta': '26 days, 23:09:40', 'additions': 403, 'deletions': 26, 'state': 'closed'}, {'id': 447657501, 'number': 530, 'closed': datetime.datetime(2020, 7, 10, 22, 55, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 21, 46, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4101.0, 'time_delta': '1:08:21', 'additions': 1345, 'deletions': 40, 'state': 'closed'}, {'id': 447216815, 'number': 529, 'closed': datetime.datetime(2020, 7, 21, 21, 59, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 4, 30, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1013365.0, 'time_delta': '11 days, 17:29:25', 'additions': 176, 'deletions': 14, 'state': 'closed'}, {'id': 445795120, 'number': 528, 'closed': datetime.datetime(2020, 7, 10, 4, 30, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 0, 26, 8, tzinfo=datetime.timezone.utc), 'time_taken': 187451.0, 'time_delta': '2 days, 4:04:11', 'additions': 169, 'deletions': 12, 'state': 'closed'}, {'id': 444465230, 'number': 527, 'closed': datetime.datetime(2020, 7, 5, 22, 55, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 5, 21, 51, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3828.0, 'time_delta': '1:03:48', 'additions': 1156, 'deletions': 40, 'state': 'closed'}, {'id': 444444922, 'number': 526, 'closed': datetime.datetime(2020, 7, 9, 3, 24, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 5, 18, 41, 15, tzinfo=datetime.timezone.utc), 'time_taken': 290617.0, 'time_delta': '3 days, 8:43:37', 'additions': 1330, 'deletions': 40, 'state': 'closed'}, {'id': 444213947, 'number': 525, 'closed': datetime.datetime(2020, 7, 8, 0, 26, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 23, 33, 19, tzinfo=datetime.timezone.utc), 'time_taken': 348799.0, 'time_delta': '4 days, 0:53:19', 'additions': 1324, 'deletions': 51, 'state': 'closed'}, {'id': 440364945, 'number': 523, 'closed': datetime.datetime(2020, 7, 29, 22, 51, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 3, 46, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2919931.0, 'time_delta': '33 days, 19:05:31', 'additions': 924, 'deletions': 19, 'state': 'closed'}, {'id': 436881373, 'number': 522, 'closed': datetime.datetime(2020, 7, 5, 22, 0, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 4, 26, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1445633.0, 'time_delta': '16 days, 17:33:53', 'additions': 731, 'deletions': 18, 'state': 'closed'}, {'id': 434164282, 'number': 520, 'closed': datetime.datetime(2020, 6, 26, 3, 46, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 15, 54, tzinfo=datetime.timezone.utc), 'time_taken': 993154.0, 'time_delta': '11 days, 11:52:34', 'additions': 174, 'deletions': 0, 'state': 'closed'}, {'id': 433853302, 'number': 519, 'closed': datetime.datetime(2020, 7, 5, 22, 0, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 19, 38, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1995695.0, 'time_delta': '23 days, 2:21:35', 'additions': 428, 'deletions': 23, 'state': 'closed'}, {'id': 431509327, 'number': 518, 'closed': datetime.datetime(2020, 6, 14, 21, 49, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 3, 13, 54, tzinfo=datetime.timezone.utc), 'time_taken': 498923.0, 'time_delta': '5 days, 18:35:23', 'additions': 34, 'deletions': 0, 'state': 'closed'}, {'id': 428828163, 'number': 516, 'closed': datetime.datetime(2020, 6, 16, 0, 28, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 22, 54, 41, tzinfo=datetime.timezone.utc), 'time_taken': 869653.0, 'time_delta': '10 days, 1:34:13', 'additions': 180, 'deletions': 0, 'state': 'closed'}, {'id': 426950542, 'number': 515, 'closed': datetime.datetime(2020, 6, 10, 1, 4, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 4, 13, 25, tzinfo=datetime.timezone.utc), 'time_taken': 593454.0, 'time_delta': '6 days, 20:50:54', 'additions': 306, 'deletions': 5, 'state': 'closed'}, {'id': 393139732, 'number': 502, 'closed': datetime.datetime(2020, 3, 24, 17, 22, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 17, 22, 11, tzinfo=datetime.timezone.utc), 'time_taken': 19.0, 'time_delta': '0:00:19', 'additions': 986, 'deletions': 644, 'state': 'closed'}, {'id': 272032981, 'number': 412, 'closed': datetime.datetime(2019, 5, 5, 15, 53, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 4, 19, 16, 7, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1381555.0, 'time_delta': '15 days, 23:45:55', 'additions': 40, 'deletions': 13, 'state': 'closed'}, {'id': 270312352, 'number': 411, 'closed': datetime.datetime(2019, 4, 15, 5, 36, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 4, 14, 17, 18, 31, tzinfo=datetime.timezone.utc), 'time_taken': 44265.0, 'time_delta': '12:17:45', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
31587091,gestalt,MovingBlocks/gestalt,Java,23,26,25,21,522,16,16,8,"[{'id': 432595336, 'number': 79, 'closed': datetime.datetime(2020, 6, 17, 20, 8, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 17, 19, 36, tzinfo=datetime.timezone.utc), 'time_taken': 614951.0, 'time_delta': '7 days, 2:49:11', 'additions': 16, 'deletions': 0, 'state': 'closed'}]"
