pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
543607957,boxes/helper: Updated to new quoting style.,"This PR aims to bring ZT one step more closer to its web counterpart. The quoting style is changed to include the name of the user whose message was quoted(and his `user_id`) along with a link that would narrow to the quoted message. This is the new markdown/bugdown syntax of a quoted message:
````
@**Full Name|1234(id)** said[link_to_msg]:
```quote
    quoted_msg
```
````

For interoperability, the link to the quoted message is the same as that of the web app, so narrowing to the quote in ZT is possible.

Also, the URL generation and encoding part of the code has been shifted to a new module named `server_url.py` to separate it from the rest of the code inside `helper.py` and make it easier for constructing and deconstructing server URL in the future.

This PR should fix #514 and #151(partially).",False,854,https://api.github.com/repos/zulip/zulip-terminal/pulls/854,https://github.com/zulip/zulip-terminal/pull/854,closed,218,6,6,3,4,10,4,0,"[{'name': 'enhancement'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-12-21 17:01:37+00:00,2021-01-20 21:53:03+00:00,2609486.0,"30 days, 4:51:26","[{'comment_id': 546878586, 'comment_body': ""This generated text looks fine compare to the previous version, though it may be clearer to read using one `.format` - and if clean enough may mean you don't need the comment above it!\r\n\r\nAs a side-note, you include the sender id here, which is great - there is another issue involving this, and possibly other cases in the code base where we would benefit from making that clear in mentions :+1:\r\n\r\nRegarding Anders' point (https://github.com/zulip/zulip-terminal/pull/854#discussion_r547011233) we definitely should fix this, though in a separate commit, which you could do first given that this formatting is pending the url code situation."", 'comment_created': datetime.datetime(2020, 12, 21, 19, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 547011233, 'comment_body': 'This will fail to correctly quote a message that already contains a quote or a code block. You need to quote ```` ``` ```` with ````` ```` `````, ````` ```` ````` with `````` ````` ``````, and so on. See [`get_unused_fence`](https://github.com/zulip/zulip/blob/160cc5120aae0870c68e6e3a12a391035bd25843/static/shared/js/fenced_code.js#L241-L251) (called [here](https://github.com/zulip/zulip/blob/160cc5120aae0870c68e6e3a12a391035bd25843/static/js/compose_actions.js#L444)) in the web app.', 'comment_created': datetime.datetime(2020, 12, 22, 1, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 547129399, 'comment_body': ""Thanks for the review @andersk. I probably missed that part of code logic, from the webapp. Nevertheless, I am now supposed to refactor the whole code along with some server code into a new module `server_urls.py` as instructed by Neil in CZO. I'll keep this review in mind while refactoring."", 'comment_created': datetime.datetime(2020, 12, 22, 8, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 548443474, 'comment_body': ""I have fixed the issue pointed by Ander's in a separate commit and refactored some parts of the code as mentioned at the beginning of this comment too. The topics with `/` in them are working fine now(there was a small bug in `urllib.quote` that I missed). So, I guess we can close this conversation as resolved."", 'comment_created': datetime.datetime(2020, 12, 24, 8, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 553010622, 'comment_body': 'If you want to put this addition as the first commit we can merge this separately.\r\n\r\nHowever, it would be useful to have some tests of the introduced function (and perhaps the integrated case) in the same commit too.', 'comment_created': datetime.datetime(2021, 1, 6, 23, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 553011274, 'comment_body': ""Separate lines for each parameter and extracting the raw message calculation would make this easier to read. We can use a smaller indent too?\r\n\r\nThis won't apply if you put this commit first, but when you have both the fencing and improving quoting, note that we want to avoid calling the server twice for the get_raw_message."", 'comment_created': datetime.datetime(2021, 1, 6, 23, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 553011481, 'comment_body': ""You don't have types specified here - can we improve this?\r\n\r\nDoes this come from a translation of a function in the server? We should reference it as a comment, if so, and perhaps when. Also if you used some particular logic to translate it."", 'comment_created': datetime.datetime(2021, 1, 6, 23, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 553014464, 'comment_body': ""This commit doesn't seem to just *move* the code across, but also changes it... so doesn't this really replace the first commit? Doesn't this make the first commit meaningless? Which version are we including? Since this is the start of this code, we can just add it to the right file in the first place :)\r\n\r\nAs per my note elsewhere, if we bring code across from the server (which this looks like), we should indicate details, and what has changed or not - as well as anything else that you used in the process that's relevant."", 'comment_created': datetime.datetime(2021, 1, 6, 23, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 553573035, 'comment_body': 'I have improved type annotations to `str`.\r\nNot necessarily, its referred from `zulip/static/shared/js/fenced_code.js`, if I am correct in assuming by server you mean `zulip/zerver`. I have added short comments addressing this function.', 'comment_created': datetime.datetime(2021, 1, 7, 20, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 553575351, 'comment_body': 'You are correct, the last commit ultimately makes the first commit useless. I have removed the first commit. :)\r\n\r\nI have added brief comments for each of the new functions added. If you want I can reword those comments to be more verbose. :sweat_smile: ', 'comment_created': datetime.datetime(2021, 1, 7, 20, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '874362744c8bb9fda747b64b5a4b0f7b3cdd5d61', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b8b8ebcdb136fa6b928fcedd5952c2f121aaa5', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf8358ae261be2ada7ad81f45f595f052ced166b', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
546003005,views: Updated Stream Info.,"This PR is divided into two parts:
- Show Stream Members in Stream Info view - The First commit leading this PR adds the feature to view Members subscribed to a stream from inside the Stream info view on pressing `m` key.
- Show estimated messages per week for streams - The Second commit will add another submenu inside Stream info which will show the Estimated messages per week gathered inside that stream.

Tests amended.
This PR fixes #753.",False,856,https://api.github.com/repos/zulip/zulip-terminal/pulls/856,https://github.com/zulip/zulip-terminal/pull/856,closed,132,8,4,2,5,5,4,0,"[{'name': 'enhancement'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-12-28 08:59:34+00:00,2021-01-15 16:03:20+00:00,1580626.0,"18 days, 7:03:46","[{'comment_id': 550396573, 'comment_body': 'This just shows a fixed number for this parameter? Please add this entry in the commit which adds this feature :)', 'comment_created': datetime.datetime(2020, 12, 31, 4, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 550398151, 'comment_body': 'We already define most of this on the previous line.', 'comment_created': datetime.datetime(2020, 12, 31, 5, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 550417658, 'comment_body': 'This commented code should be in this commit for showing members, right?\r\n\r\nWe should sort this in a similar way as we do the presence list (though probably not per active status). Note that showing stream members in this way might just be a temporary feature until we add filtering of the user list.', 'comment_created': datetime.datetime(2020, 12, 31, 7, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 550418101, 'comment_body': ""I'm not sure the members list needs a category, as there's just a list of users.\r\n\r\nFor the number of members, we can place this in the stream info popup, before the `Press m to view` text."", 'comment_created': datetime.datetime(2020, 12, 31, 7, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 550418427, 'comment_body': ""All of this is different from the previous commit? Let's just add all the message count details into this commit."", 'comment_created': datetime.datetime(2020, 12, 31, 7, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '339ab8ff3f9fd98deb892655211da381fc4a2350', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '393b58295e857eba9700b4905fafd8ecd33432bb', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
556189735,bugfix: views: Fixed Exit Popup from Stream Members view.,Follow-up bugfix for merged PR #T856.,False,878,https://api.github.com/repos/zulip/zulip-terminal/pulls/878,https://github.com/zulip/zulip-terminal/pull/878,closed,1,1,1,1,1,0,1,0,[{'name': 'size: XS'}],2021-01-16 15:23:07+00:00,2021-01-16 16:41:30+00:00,4703.0,1:18:23,[],"[{'commit_sha': 'f5c90d2e15d49fa02cd0fb7b28c1e8a2184a26f6', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
557539523,Feature: Improve Stream Info Popup,"- [x] Add Stream Members hotkey in README. [merged commit 8ce2edb]
- [x] Add Stream creation date in Stream Info popup [New in Server v4.0, ZFL 30]
- [x] Add Stream email
- [x] bugfix: Fix case when Weekly message count is None
- [x] Add Message retention days [New in server v3.0, ZFL 17]
- [ ] Notification settings [issue #887]",True,880,https://api.github.com/repos/zulip/zulip-terminal/pulls/880,https://github.com/zulip/zulip-terminal/pull/880,closed,163,18,5,2,10,72,3,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-01-19 16:08:13+00:00,2021-08-14 05:36:53+00:00,17846920.0,"206 days, 13:28:40","[{'comment_id': 564843908, 'comment_body': 'This parametrizes *all* tests in this class, right? Is that the intent?', 'comment_created': datetime.datetime(2021, 1, 26, 21, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564844955, 'comment_body': 'I just merged what is effectively this change along with some other adjustments (Show -> View/Hide) to improve consistency and between this and keys.py with you as the commit co-author.', 'comment_created': datetime.datetime(2021, 1, 26, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564846333, 'comment_body': ""We're doing a lot of datetime work in various places, so I'm keen to get this centralized - ideally first - before we add this particular commit/change. Your addition of the class parametrizations (which I queried above) makes it more challenging to merge a later commit first though, I suspect."", 'comment_created': datetime.datetime(2021, 1, 26, 21, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564846986, 'comment_body': 'This approach looks good generally :+1:', 'comment_created': datetime.datetime(2021, 1, 26, 21, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564866445, 'comment_body': 'In practice these email addresses can be very long. A separate test with that kind of example would be useful. For the reason of long emails, I would suggest we consider allowing/forcing the URL onto the next line. For example, try applying your PR to the #announce stream on czo.', 'comment_created': datetime.datetime(2021, 1, 26, 22, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564868400, 'comment_body': ""You're referring to a commit, not a PR, in this commit text.\r\n\r\nIf `None` is always due to it being just-created, it would be useful to indicate that, and expand N/A to something clearer in any case.\r\n\r\nI'd be happy merging this commit sooner, but the tests in the first commit are dependencies of all the others."", 'comment_created': datetime.datetime(2021, 1, 26, 22, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564872493, 'comment_body': 'This is rather confusing to read. Do we need that nested function? The one-liner if/else is not easy to read.', 'comment_created': datetime.datetime(2021, 1, 26, 22, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 565075236, 'comment_body': 'Yes. I thought it will increase our scope of testing, and potentially detect/eliminate any bug that may get unnoticed, if we tried to localize the parameters inside the class?', 'comment_created': datetime.datetime(2021, 1, 27, 7, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565075628, 'comment_body': ""Thanks. I'll drop this commit from the PR, then?"", 'comment_created': datetime.datetime(2021, 1, 27, 7, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565102182, 'comment_body': 'Hmm. Seems like the class parametrization was not a very good idea afterall. But, I am not sure how else to add tests to this commit without making the subsequent commits dependent on it.\r\n\r\nIf you want to centralize this datetime conversion first, I can put it up on a separate PR inside maybe `helper.py` and then refactor this commit to use that function. If you have any other idea in mind, it would help me to know. :)', 'comment_created': datetime.datetime(2021, 1, 27, 8, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565124669, 'comment_body': ""I'll edit the commit title accordingly. Thanks for pointing it out. :)\r\n\r\nI can add a comment explaining this behavior, and replace 'N/A' with something like, `New stream. Data unavailable`? for reference, webapp displays `Stream created recently`.\r\n\r\nAdding this commit in the same PR has led to this. I asked in #zulip-terminal about adding this fix in this PR or another PR, and we decided to go with the former. If you want, I can add this to the PR I mentioned few comments above. This should segregate this fix from the class parameters I declared in the prior commit?"", 'comment_created': datetime.datetime(2021, 1, 27, 8, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565134642, 'comment_body': ""I understand your concern. I'll fix this too."", 'comment_created': datetime.datetime(2021, 1, 27, 9, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 577690245, 'comment_body': 'The centralized preferred formatting is merged now as a Model method.', 'comment_created': datetime.datetime(2021, 2, 17, 15, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 602679078, 'comment_body': 'I have removed the class parameterization earlier and moved the fixtures to another test function(`test_popup_height`), since the popup height will change depending on the server version running - which corresponds to the numbers of fields supported in that version. :)', 'comment_created': datetime.datetime(2021, 3, 27, 6, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 676167590, 'comment_body': 'When declaring a variable like this, it is good to maintain consistency (see how `self.server_feature_level` is being used as in the statements below).\r\n\r\nThat said, given that `self.server_feature_level` is already defined in the method, we should use that as is everywhere.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169193, 'comment_body': 'It would be useful to have inline test ids here with `case`.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169591, 'comment_body': 'There are a few typos in the commit description. :)\r\n', 'comment_created': datetime.datetime(2021, 7, 25, 16, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169723, 'comment_body': 'We should add the dependencies in a prior commit. You could do `git log --grep requirements` for reference.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169873, 'comment_body': ""Let's add blank lines to separate out AAA bits."", 'comment_created': datetime.datetime(2021, 7, 25, 16, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676170417, 'comment_body': 'I am not sure if we should have this. This is basically checking whether the _library_ is working?\r\n\r\nWe should definitely add tests for the method covering both success and failure scenarios.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676170504, 'comment_body': 'Could we be more specific with the exception handling here?', 'comment_created': datetime.datetime(2021, 7, 25, 16, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676170867, 'comment_body': 'Let\'s be consistent with what text we\'re using for ""Email"" in the app. In the commit, we\'ve ""email"", ""E-mail"" and ""Email"".', 'comment_created': datetime.datetime(2021, 7, 25, 16, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676171114, 'comment_body': 'Much like the above section, ""Notifications"", we should use a generic title as this configuration potentially could be used for other things as well later.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676171227, 'comment_body': 'commit-description: OSes*', 'comment_created': datetime.datetime(2021, 7, 25, 16, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676171598, 'comment_body': 'We could rephrase this paragraph to explicate that the configuration allows ZT to copy to the clipboard generally and we use this to copy stream emails for now.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676172447, 'comment_body': 'See my other comment regarding generalization.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676172864, 'comment_body': ""Why did we change it to None? Also, the new change doesn't affect the test?"", 'comment_created': datetime.datetime(2021, 7, 25, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676172993, 'comment_body': 'Since `stream[""stream_weekly_traffic""]` is being used twice, we could extract it in another variable.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676176008, 'comment_body': 'See my other comment regarding extracting another variable.', 'comment_created': datetime.datetime(2021, 7, 25, 17, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676177040, 'comment_body': 'I think we can simplify the logic and conditionals a bit if we structure this differently.', 'comment_created': datetime.datetime(2021, 7, 25, 17, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 677741716, 'comment_body': ""As per the commit description, if a stream is newly created (within a week), the `stream_weekly_traffic` would be `None` according to the API docs [here](https://zulip.com/api/get-subscriptions#response).\r\n\r\nI was not sure if I should add new fixtures for this or just change the pre-existing ones (to prevent adding unnecessary tests and keep the commit smaller). Let me know if adding new fixtures is better. :)\r\n\r\nThe latter did not break the tests because the tests check for popup height, which remains the same even if the field is `None` cause we're displaying an appropriate message in that case."", 'comment_created': datetime.datetime(2021, 7, 27, 19, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678682780, 'comment_body': ""I have taken the `realm_message_retention_days` field out of the conditional which makes it a bit cleaner, but I don't get how it can be simplified further. It already looks pretty straightforward?\r\n\r\nCould you please explain what structure you had in mind?"", 'comment_created': datetime.datetime(2021, 7, 28, 22, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678689657, 'comment_body': 'I have added a new fixture with `stream_weekly_traffic` as `None`, without modifying the existing ones.', 'comment_created': datetime.datetime(2021, 7, 28, 22, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678693970, 'comment_body': ""It's difficult to test this since we have an external module involved which makes use of system packages (`xclip`/`xsel` on Linux, and others on different platforms). We can't know the platform on which our tests are running, and if those packages are installed in the system, nor if the text was successfully copied to clipboard?\r\n\r\nWe can, however, test for the exception case using `mocks` and `side_effects`, IG?"", 'comment_created': datetime.datetime(2021, 7, 28, 22, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 679679485, 'comment_body': ""I'm not sure why we're using an assert here; can we not use a simple conditional with success and failure branches?"", 'comment_created': datetime.datetime(2021, 7, 30, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679680971, 'comment_body': ""I understand that we're introducing this to resolve stream email copying, but this method seems sufficiently general to handle all copying? Specifically, it's only the success message which depends on this being a stream email copy?"", 'comment_created': datetime.datetime(2021, 7, 30, 6, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679682036, 'comment_body': 'I feel we should list the tools first (xclip, xsel, ...2 more on the website?) and then indicate one method such tools may be installed (ie. with the apt-get prefix).', 'comment_created': datetime.datetime(2021, 7, 30, 6, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679682425, 'comment_body': 'You should be able to simplify a lot of this since `(None, ""text"")` is the same as `""text""` for urwid?', 'comment_created': datetime.datetime(2021, 7, 30, 6, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679693674, 'comment_body': 'Reading this with fresh eyes, my question would be why each case has subtly varying values? This seems a distraction from the variations that *do* matter - ""do those different values change the result? should I be concerned?""\r\n\r\nI\'d suggest a `stream_data_to_vary` dict or similar - like we have in various other tests when building up the data, which we combine with a base dict in the main test. Initially the dict in the case would then be just with varying date_created fields, if that yet?', 'comment_created': datetime.datetime(2021, 7, 30, 6, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 680360894, 'comment_body': ""I agree with Neil. That is what I was talking about in the first statement.\r\n\r\nRe testing, we don't have to test the external module. We could just test whether we're calling the external module correctly."", 'comment_created': datetime.datetime(2021, 7, 31, 13, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 680362386, 'comment_body': 'Yeah, that makes it better. Additionally, you could do something like the following to simplify the `else` block.\r\n```python3\r\n                    stream[""message_retention_days""] = message_retention_days_response(\r\n                        realm_message_retention_days, stream[""message_retention_days""] is None\r\n                    )\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 13, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 680363056, 'comment_body': ""The first 2 (xclip, xsel) are system packages whereas the other 2 (gtk, PyQt4) are python modules, which still needs the system packages to run so I'm not sure why they are listed in the website. The copying also seems to work fine without those python modules installed. Also, gtk and PyQt4 modules are not available in Python3."", 'comment_created': datetime.datetime(2021, 7, 31, 14, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 680416427, 'comment_body': ""I believe you are talking about the first else block?\r\nThe conditional within that have `stream['message_retention_days']` and `realm_message_retention_days` as args to the function call. I don't think they will have the same value at any point of time?"", 'comment_created': datetime.datetime(2021, 7, 31, 22, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 682130231, 'comment_body': '`MODULE + .` ?', 'comment_created': datetime.datetime(2021, 8, 3, 21, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682131527, 'comment_body': 'It would be good to put this simple value (""Test"") into the test function parameters as a default value, which you can then use here and when you do an assert later. That indicates where a specific value should match in the test input and output.', 'comment_created': datetime.datetime(2021, 8, 3, 22, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682141180, 'comment_body': ""Right; should this only be a pyperclip-specific exception, that we can use? The (online) docs for it don't include that, but the source possibly does - and you have that in the test? The package doesn't seem particularly active, otherwise I'd suggest proposing updating the documentation or opening an issue."", 'comment_created': datetime.datetime(2021, 8, 3, 22, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682144033, 'comment_body': 'Do you know when this should fail? Does definitely trying again make sense?', 'comment_created': datetime.datetime(2021, 8, 3, 22, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682153218, 'comment_body': 'I think one reason this could be clearer is that we\'re overwriting the stored value with a textual form?\r\nMaybe ""cached_retention_text"" could be set and used instead? That would also make it clearer if that setting is later updated, that we need to update the cached text too.\r\n\r\nSome of those conditions you\'re checking are identical independently of the stream - if it\'s an old server, all the values should be set to None, you don\'t need to keep checking the server version. Secondly, you\'re checking a conditional statement then calling a function with two bool values; see how you can simplify that? (that\'s Preet\'s latter point, I think)', 'comment_created': datetime.datetime(2021, 8, 3, 22, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682155212, 'comment_body': ""This would be clearer if this text wasn't overwritten, as per my other comment."", 'comment_created': datetime.datetime(2021, 8, 3, 22, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682155798, 'comment_body': 'Is it meaningful here to include a 17-30 case, given that one feature is introduced at 30 and another by 17?', 'comment_created': datetime.datetime(2021, 8, 3, 22, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682619218, 'comment_body': 'I was not sure what to mention as a possible *try*/*hint*, since failing to copy would mean it\'s an internal `pyperclip` issue. Re-thinking now, I believe we could mention something along the lines of: ""Could not copy Test. Error in the dependency library"" or just remove the second sentence altogether?', 'comment_created': datetime.datetime(2021, 8, 4, 13, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 682727216, 'comment_body': ""Possibly worth rewording and avoiding the 'try again' sentence - after all, we *have* copied, we can just warn (strongly) that a pasted value may be incorrect, or something like that? That's more transparent to the user - conceptually they may have some special clipboard system which could upset this, for example? Then they'd know it was copied but a verification didn't work."", 'comment_created': datetime.datetime(2021, 8, 4, 15, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682797827, 'comment_body': ""@neiljp The above makes sense. Just had a few small doubt; for server versions < 17 do we need to include this field in the `Subscription` data?\r\n\r\nAlso, re your last statement:\r\n> you're checking a conditional statement then calling a function with two bool values;\r\n\r\nThe `message_retention_days_response` method takes an `int` and a `bool` (not 2 bools) so I don't know if that could be simplified further. Or, am I misunderstanding you guys?"", 'comment_created': datetime.datetime(2021, 8, 4, 16, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 682878388, 'comment_body': "">for server versions < 17 do we need to include this field in the `Subscription` data?\r\n\r\nIf we include this field with a value of `None`, as before, then it'll get mixed with the special `None` value (denoting that it inherits the organization-level setting) since we are not over-writing this field."", 'comment_created': datetime.datetime(2021, 8, 4, 18, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 684782668, 'comment_body': 'minor: The new field(s) should be added in another commit to make this a pure refactor.', 'comment_created': datetime.datetime(2021, 8, 8, 14, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684784344, 'comment_body': ""When does this happen? As an end-user, the message doesn't seem to be helpful."", 'comment_created': datetime.datetime(2021, 8, 8, 14, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684786428, 'comment_body': ""What's the reasoning behind this check?"", 'comment_created': datetime.datetime(2021, 8, 8, 14, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684793684, 'comment_body': 'This might happen if there is an internal issue with the `pyperclip` module. Neil also explained other possible trigger conditions in [this](https://github.com/zulip/zulip-terminal/pull/880#discussion_r682727216) comment.', 'comment_created': datetime.datetime(2021, 8, 8, 15, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 684794239, 'comment_body': 'This was done to address your previous review [here](https://github.com/zulip/zulip-terminal/pull/880#discussion_r679679485), in which we decided to not use `assert` statements but simple conditional to check the correctness of the copied text. ', 'comment_created': datetime.datetime(2021, 8, 8, 15, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 684811653, 'comment_body': ""Some appear to have just shifted to the next commit; let's address these in a different PR?"", 'comment_created': datetime.datetime(2021, 8, 8, 18, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 684888356, 'comment_body': 'Ah, I understand now. I was under the impression that the module would copy correctly or throw an exception altogether. Thanks for clarifying.', 'comment_created': datetime.datetime(2021, 8, 9, 3, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 688131083, 'comment_body': ""When is days going to be None? Shouldn't we always have a server-wide value available?"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688132205, 'comment_body': 'minor: `message_retention_days is None` is used twice here, which suggests extracting it into a name would be useful.', 'comment_created': datetime.datetime(2021, 8, 12, 22, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688132729, 'comment_body': ""Where does the zero come from? We may want to remove this comment in any case, since we're hiding the raw values/versions and intending the text to be used now?"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688133448, 'comment_body': ""I think we've resolved this with the 2-step cached-text process?"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688134163, 'comment_body': 'The views change overall is very small, but with the tests it may be good to split the model and view changes into 2 commits - this is getting quite long, and multiple independent tests suggests this too :)', 'comment_created': datetime.datetime(2021, 8, 12, 22, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688141154, 'comment_body': 'Minor: ""key"" is very broad; these are stream ids, right?', 'comment_created': datetime.datetime(2021, 8, 12, 23, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688146931, 'comment_body': ""Ah, this is the `None` case that I queried elsewhere, where the organization value slips through to the stream level.\r\n\r\nWas `None` a realm value, though? I assume it followed the original rule, ie. -1 for indefinite and +n for days, so I'm not sure about None?\r\n\r\nThe #api-design topic doesn't seem to have clarified this exactly, so perhaps Mateusz could answer in a follow-up or you could refer him here?"", 'comment_created': datetime.datetime(2021, 8, 12, 23, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688497993, 'comment_body': ""Right, this is why we were handling the `days == None` case earlier.\r\nTo clarify, `None` was a realm value earlier (between server v2-3, as per my testing on the dev server) and it had the same meaning as the current `-1` for indefinite which was changed by @mateuszmandera's [commit](https://github.com/zulip/zulip/commit/7a03e2a7fe259a3410cadbb1a9a4955aa1fae3c7) afterwards. So to summarize, I believe this is how the server's representation for message retention changed over time:\r\n- Server version 2-3: realm value could have `None` for indefinite and +n for days. No stream value\r\n- Server version 3.0: added stream message retention days, with `None` for org default, `-1` for indefinite and +n for days.\r\n- Server version 3+: realm's `None` value was changed to `-1` by Mateusz's above commit for consistency with the stream value\r\n\r\n(I hope Mateusz should get notification from the above mention, still, I'll refer him here from the stream to confirm my hypothesis)"", 'comment_created': datetime.datetime(2021, 8, 13, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688665053, 'comment_body': ""Ah, that was an interesting dive through old commits :grinning: This overview sounds correct to me based on that. To be a bit more precise, `message_retention_days` was a thing for streams before 3.0 but only in the sense of the backend logic - but it indeed wasn't exposed via the API in any way (the value had to be set manually via `manage.py shell` or db query). I presume that `zulip-terminal` only cares about the API history here though, where indeed this is only a thing since 3.0 - https://github.com/zulip/zulip/commit/c488a35f10ac7b1e5e20fc46302c85ce2364e825"", 'comment_created': datetime.datetime(2021, 8, 13, 17, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 688729309, 'comment_body': 'Yes, this is resolved with the `cached_retention_text` and the idea to fallback to the realm value on older server versions.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688730353, 'comment_body': 'I think this should be already answered by the below comment of mine and Mateusz?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '22934ab1e230ee0ecb535cb430c259f3f6c5daf3', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b933405219fff76b4c91b5b8077c1946cfe6e6ca', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
564388578,model/views: Add notification checkboxes in Stream Info popup.,"- Added Visual desktop notification checkbox in StreamInfo.

Gradually Fixes #887.",True,900,https://api.github.com/repos/zulip/zulip-terminal/pulls/900,https://github.com/zulip/zulip-terminal/pull/900,closed,222,20,9,8,2,15,4,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'area: event handling'}, {'name': 'missing feature: user'}]",2021-01-30 09:07:45+00:00,2021-07-13 20:17:01+00:00,14209756.0,"164 days, 11:09:16","[{'comment_id': 663515197, 'comment_body': 'The first sentence in the commit description isn\'t necessary.  Generally, commit descriptions should talk about themselves for the most part. :)\r\n\r\nLet\'s include a newline post ""Tests amended"".', 'comment_created': datetime.datetime(2021, 7, 4, 14, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663515986, 'comment_body': 'How about we do not mention ""desktop"" throughout the codebase so that whenever we have a separate section for ZT notifications we would only need to change the respective method body? Of course, we would mention in a comment that we\'re currently relying on desktop notification wherever necessary. (Something to bring it up on the stream.)', 'comment_created': datetime.datetime(2021, 7, 4, 14, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663517351, 'comment_body': ""Let's use newlines to separate the Arrange, Act and Assert (AAA) bits."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663517602, 'comment_body': 'The ids don\'t speak about the test case but what\'s the state of `desktop_notified_streams`. For instance, it would be better to use ""notification_enabled"" or something along those lines for the first id.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518163, 'comment_body': ""I feel like should be in the parameterize blocks as reading `final_desktop_notified_streams` in the parameterization doesn't tell how we reached there finally."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518320, 'comment_body': ""You don't seem to be using mocker and stream_button in the method body anywhere. Let's remove them."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518377, 'comment_body': 'See my other comment related to ids.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518437, 'comment_body': 'See my other comment re AAA.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518736, 'comment_body': ""Let's be consistent with variable naming and use `*_notifications_*` everywhere."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518927, 'comment_body': '`mocker` is unused in the method body.\r\n', 'comment_created': datetime.datetime(2021, 7, 4, 15, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663519454, 'comment_body': 'The parans are not needed.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663520291, 'comment_body': 'The stream_id could be a default param.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663520887, 'comment_body': ""The parans aren't needed anymore."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663521112, 'comment_body': 'mocker is unused.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663521531, 'comment_body': 'The ""desktop"" bit make end-users wonder whether this would only affect desktop notifications and not ZT\'s. Let\'s discuss it on the stream as well.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': 'dbc52990f75c3ccad284c4778c57a8954909d00a', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fbc468de8c747bdc1c688c3a48bea8255cb1cba', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9918d7085439d127b57df465d6c4d613de470318', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28c68f6931d2ba9bfba4557a2d02d138813a146', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36d0f192d19a156f9568fa6610063e8ac37e49ed', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bafd67066819659c395ada0d989a173a2d617c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2979db98852f65e2dc176b2b6dfd54e1d16f8a3f', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '070dee8363880e4bf3bee334e18f0b01932f24f7', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
689461669,Clearly indicate nuances in Visual notification settings.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This indicates more explicitly subtle details about the recently introduced Visual notification change via #900. Namely, we indicate that the ""Visual notification"" setting directly affects other clients such as Web app and desktop. Also, we remind the user
to configure/enable notifications if the checkbox is disabled.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

**Commit flow**
- views: Indicate visual notifications setting affects other clients.
- views: Indicate configuring/enabling notifications if checkbox disabled.

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
I have used ""msg_mention"" style attribute for the suffix text when the checkbox is disabled. Although this looks good visually on all themes, I'm concerned that the attr-name does not align with our context? 

",True,1080,https://api.github.com/repos/zulip/zulip-terminal/pulls/1080,https://github.com/zulip/zulip-terminal/pull/1080,closed,28,15,6,3,1,3,2,0,"[{'name': 'area: UI'}, {'name': 'size: M'}]",2021-07-13 23:17:21+00:00,2021-07-14 16:43:17+00:00,62756.0,17:25:56,"[{'comment_id': 669757618, 'comment_body': ""This is a bit unclear since you're reassigning another value in the var and later assigning another value conditionally. Could we call it something else?"", 'comment_created': datetime.datetime(2021, 7, 14, 16, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 669759454, 'comment_body': 'Perhaps append `_setting`?', 'comment_created': datetime.datetime(2021, 7, 14, 16, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 669760697, 'comment_body': ""commit-description: so that it's*"", 'comment_created': datetime.datetime(2021, 7, 14, 16, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': '5c3908af88bf8c695e80829155a9f0ac38d124d4', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db526fa343818011d40eaf08999ed7c6d883299a', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89ae3e17eed489b99c3214be6fa8ce448eac8014', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
652517910,bugfix: Fix wildcard_mentions not showing in mentions narrow.,"The server defines several wildcard_mentions like @all/@everyone/@stream, which are not marked with 'mentions' in the message flags, rather 'wildcard_mentions'. This bugfix PR now checks for this flag in the message response from the server and appropriately categorizes these messages as mentioned and also updates the count in the respective narrows.

Fixes #1037 ",False,1038,https://api.github.com/repos/zulip/zulip-terminal/pulls/1038,https://github.com/zulip/zulip-terminal/pull/1038,closed,196,11,3,2,6,16,3,0,"[{'name': 'bug'}, {'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-05-25 15:53:19+00:00,2021-07-05 23:13:08+00:00,3568789.0,"41 days, 7:19:49","[{'comment_id': 640006681, 'comment_body': ""I'm merging a commit to master which will extend the line-length to 88 (ie. black's default), so likely your lines should simplify :)\r\n\r\nIt's not too bad with only two, but we could also consider a `set` approach here to avoid the duplication, like we've done recently in `soup2markup`."", 'comment_created': datetime.datetime(2021, 5, 26, 18, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 640006748, 'comment_body': 'With extra line-length available and the way `black` reformats these lines (indented on the follow line), we should generally have plenty of space available and not need a list for the params compared to just a single string.', 'comment_created': datetime.datetime(2021, 5, 26, 18, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 640061647, 'comment_body': ""Ahh...The `set` approach seems better. I'll use that. :+1:"", 'comment_created': datetime.datetime(2021, 5, 26, 19, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 643542537, 'comment_body': ""I'm not sure of my original advice here, but we likely don't want plural names here - a variable can only taken one value of these."", 'comment_created': datetime.datetime(2021, 6, 1, 23, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 643545841, 'comment_body': ""Let's avoid repeating the same names here. Check the `Literal` docs/PEP for details, but you can essentially extend the set of valid values by combining two Literals. We could have a specific name for the other type, or simply extend the modifiable one for now."", 'comment_created': datetime.datetime(2021, 6, 1, 23, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644508506, 'comment_body': ""We've lost some test examples here of just mentions; that may not be critical, but even if we just add these mixed cases then adding inline test ids would be helpful to describe what situation each is covering without looking at the values. You may see when reading those ids that you're missing some combinations that might be interesting, such as only-wildcard."", 'comment_created': datetime.datetime(2021, 6, 3, 6, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644509566, 'comment_body': ""I'm unsure if we should use the same set intersection here, but it perhaps points towards using that internally for simplicity (and slight optimization) via a refactor."", 'comment_created': datetime.datetime(2021, 6, 3, 6, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644510039, 'comment_body': 'If this is similar to the other mention/wildcard combination fixture, then we could consider extracting this as a fixture to be used in both places.', 'comment_created': datetime.datetime(2021, 6, 3, 6, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644512699, 'comment_body': ""These extra cases in this commit are good examples, but are giving quite random coverage that I'm not sure helps dramatically. Think of what the other cases cover."", 'comment_created': datetime.datetime(2021, 6, 3, 6, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644513570, 'comment_body': 'I know I simplified a lot of these into single strings; we can discuss the preferred style of whether to break into a multi-line implicitly-combined string like this or a list of strings, but at minimum I would expect a comma to belong with the preceding text?', 'comment_created': datetime.datetime(2021, 6, 3, 6, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645166226, 'comment_body': 'Personally, I would prefer the multiline string approach since that saves a lot of lines compared to the list approach, where each parameter would be shifted to a new line (for compliance with `black`) hence increasing the diff. But, the list approach is a bit more comprehensible than the string version?\r\n\r\nI am going with the multiline string approach here, for now, and maybe we could shift this particular discussion to the stream for a more collective decision?', 'comment_created': datetime.datetime(2021, 6, 3, 22, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 645209326, 'comment_body': ""I'm not sure if you're done with the current iteration and wanting another review yet, but this is still plural (plus commit text)."", 'comment_created': datetime.datetime(2021, 6, 4, 0, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645343357, 'comment_body': 'I am not sure of the ideal place to refactor this, so I am creating an initial commit that extracts this as a fixture and the subsequent commits will just use this wherever needed?\r\n\r\nAnd then, maybe we could squash the 3rd `test_model` commit with the previous bugfix too?', 'comment_created': datetime.datetime(2021, 6, 4, 7, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 645578262, 'comment_body': ""I'm not sure if the current iteration of my PR addresses this review, but I tried to cover a few other cases that the previous tests were missing. Let me know if these new cases are still not what you were expecting. :)"", 'comment_created': datetime.datetime(2021, 6, 4, 13, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 647983340, 'comment_body': ""It'd be clearer to sweep all of these in the first pass as a direct refactor wherever these are used, then you can expand it after that. As it is it makes it more difficult to compare this removed text with that removed/swapped in the previous commit. Refactoring first and then switching the fixture second should make this clearer."", 'comment_created': datetime.datetime(2021, 6, 9, 5, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 647985563, 'comment_body': ""It's a bit of an edge case, but this could go in the next commit."", 'comment_created': datetime.datetime(2021, 6, 9, 5, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '7714f449787fbdbf5ab3efb8ebeeb30b9ae9a74b', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f75075afa712545514db991b9b0591d09ed07845', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
585907085,bugfix: boxes: Fix quote text rendering for xfails.,,False,942,https://api.github.com/repos/zulip/zulip-terminal/pulls/942,https://github.com/zulip/zulip-terminal/pull/942,closed,24,17,2,1,7,19,2,0,"[{'name': 'bug'}, {'name': 'size: M'}]",2021-03-05 21:57:21+00:00,2021-04-21 13:35:05+00:00,4030664.0,"46 days, 15:37:44","[{'comment_id': 588780830, 'comment_body': ""A quick test indicated the server actually generates a `<br>` (not xml) and after both A and B too?\r\n\r\nThere are also extra newlines in each blockquote associated with ::before and ::after - I've not looked at this in a while but are we relying on those to be present for spacing purposes?"", 'comment_created': datetime.datetime(2021, 3, 5, 23, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588847997, 'comment_body': ""There's a similar test just above this, that had `<br/>` as well, so I didn't cross-check with the server.\r\n\r\nYes, I presume they are there because the quoting expects some text after the quote, hence the `newline`?"", 'comment_created': datetime.datetime(2021, 3, 6, 7, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 588914302, 'comment_body': 'Is removal of this an optimization only?', 'comment_created': datetime.datetime(2021, 3, 6, 18, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588915360, 'comment_body': ""It's great to adjust this, as we discussed, but it would be good to keep test changes as a separate commit first - that helps to explain why the test text is reformatted, for example, without changing the implementation and ensuring the tests still pass.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 3, 6, 18, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588915603, 'comment_body': 'This does appear to be the layout we obtain in the content?', 'comment_created': datetime.datetime(2021, 3, 6, 18, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588915963, 'comment_body': 'When separating out the test changes, you could change the expected output to match the style visually? It would take more lines, but I think it could be clearer to identify ""{} A\\n{} B\\n\\nC"" as something like the following?\r\n```\r\n{} A\\n\r\n{} B\\n\\n\r\nC\r\n```\r\n', 'comment_created': datetime.datetime(2021, 3, 6, 18, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588916922, 'comment_body': 'Given we expect to have many more tests, it may be useful to put the ids inline in the first commit I mentioned. Perhaps something like `import pytest.param as case` to be concise?', 'comment_created': datetime.datetime(2021, 3, 6, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588920478, 'comment_body': ""Yes, this seemed unnecessary. The fact that if `findAll` returns an empty list, the for loop won't run anyways, was enough?"", 'comment_created': datetime.datetime(2021, 3, 6, 19, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 588924019, 'comment_body': 'So, do I need to use `pytest.param`, with inline ids, for all the test or just xfails?\r\nI am guessing the former?', 'comment_created': datetime.datetime(2021, 3, 6, 19, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 588924168, 'comment_body': 'Currently, we use them just for `xfails`.', 'comment_created': datetime.datetime(2021, 3, 6, 19, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 588974423, 'comment_body': 'By having it for all, this allows the ids to be near to each parametrization - and also makes it easier to add/remove things like xfails if we wish.', 'comment_created': datetime.datetime(2021, 3, 7, 5, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589096133, 'comment_body': 'Does the server send this over two lines?', 'comment_created': datetime.datetime(2021, 3, 7, 22, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589098828, 'comment_body': 'Could you explain why the newlines are removed?', 'comment_created': datetime.datetime(2021, 3, 7, 22, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589098919, 'comment_body': 'This applies to the original links too, but these are actually invalid links - how do these pass?', 'comment_created': datetime.datetime(2021, 3, 7, 22, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589099459, 'comment_body': 'This looks rather messy. Can this be included in the quote handler? If so, would it be clearer there?', 'comment_created': datetime.datetime(2021, 3, 7, 22, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589204045, 'comment_body': 'Ahh, yes. Sorry, forgot to change this!', 'comment_created': datetime.datetime(2021, 3, 8, 6, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 589207856, 'comment_body': ""> blank lines after multi-quotes, eg. no response to a quote and quoted again -> extra blank line per quote level\r\n\r\nThis is for addressing the first point of your review above. I thought you wanted those extra newlines to be removed. This is the code that that is responsible for this change:\r\n```python3\r\nif(markup[-1] == '\\n'\r\n   and isinstance(markup[-2], tuple)\r\n   and markup[-2][0] == 'msg_quote'\r\n   and isinstance(markup[-2][1], list)\r\n   and markup[-2][1][-1] == '\\n'):\r\n           markup = markup[:-1]\r\n```\r\nI am segregating this change to a new commit, just In case you are not satisfied with this.\r\n\r\nAre those extra newlines important?"", 'comment_created': datetime.datetime(2021, 3, 8, 7, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 589240819, 'comment_body': 'This piece of code checks for extra newlines after quotes and removes them. But, I agree, this looks messy and complex, mainly due to the following reason:\r\n- Our `soup2mark` function is recursive, hence it becomes difficult to check for **unnecessary** blank lines after quotes.\r\nCurrently, I am relying on `markup` to check for any appended `\\n` at the end of each recursion-step, then comparing it with the previous element if it was `blockquote` and had a `\\n` at the end already. We then remove this extra newline from the end of markup.\r\n\r\nLet me see if I can simplify this!', 'comment_created': datetime.datetime(2021, 3, 8, 8, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 589253680, 'comment_body': 'I don\'t understand what do you mean by ""invalid links"". Are you pointing out the incorrect syntax used for `a` tag or the invalid links in general?', 'comment_created': datetime.datetime(2021, 3, 8, 8, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '7444e335af91da4653273f22fc75aaa0f987ef5f', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
679449943,Platform handling improvements and WSL bugfix.,"This PR improves our platform handling by defining an isolated module `config/platform_detection.py` that contains the platform detection code and uses a single variable `PLATFORM` to hold the name of the platform that the current ZT instance is loaded on. This fixes a bug in WSL where multiple platforms were detected. Related discussion in: [#zulip-terminal>Platform handling (#T791) and WSL issues](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Platform.20handling.20.28.23T791.29.20.20and.20WSL.20issues)

Fixes #791.",True,1059,https://api.github.com/repos/zulip/zulip-terminal/pulls/1059,https://github.com/zulip/zulip-terminal/pull/1059,closed,140,120,8,4,3,0,3,0,"[{'name': 'bug'}, {'name': 'size: XL'}, {'name': 'area: refactoring'}]",2021-06-28 22:33:08+00:00,2021-07-25 23:12:42+00:00,2335174.0,"27 days, 0:39:34",[],"[{'commit_sha': 'a3d99a637d08969035f16b12c7328741f2159c0c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '249d9caf2da36889d4ab6712d824c0f0cf9441f2', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43f2fd706e43650a4c0d95b41f9e7f77d021ba6f', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '464faf64501b3a20541294129232704b0633ea1c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
612577050,Add support for opening message  in browser.,"Thanks to @punchagan and @preetmishra for their major initial work in #397 and #698 respectively. :+1:

This PR extracts some initial commits from both PR's and cleans and refactors them. It also adds support for opening external links in the browser from the `MessageLinkButton`. All the reviews on the previous PR's have also been addressed, facilitating further reviews.

Fixes last point of #452.",True,991,https://api.github.com/repos/zulip/zulip-terminal/pulls/991,https://github.com/zulip/zulip-terminal/pull/991,closed,118,4,7,3,5,43,2,0,"[{'name': 'enhancement'}, {'name': 'size: XL'}]",2021-04-09 16:16:53+00:00,2021-06-11 00:44:09+00:00,5387236.0,"62 days, 8:27:16","[{'comment_id': 611070283, 'comment_body': ""What's the requirement for this particular statement? We're not using the controller being returned."", 'comment_created': datetime.datetime(2021, 4, 10, 17, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611070929, 'comment_body': 'Just curious about whether you were able to raise any exception manually to test.', 'comment_created': datetime.datetime(2021, 4, 10, 17, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611071124, 'comment_body': ""Their system would have a GUI but the ZT host won't, right?"", 'comment_created': datetime.datetime(2021, 4, 10, 17, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611071669, 'comment_body': 'This is rather _keys_?', 'comment_created': datetime.datetime(2021, 4, 10, 17, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611071840, 'comment_body': ""Also, let's specify the error context, i.e., the error came while opening the message."", 'comment_created': datetime.datetime(2021, 4, 10, 17, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611072196, 'comment_body': ""Re the commit title, this doesn't always open a message in _topic_ narrow (e.g. it enables PMs/huddles as well)."", 'comment_created': datetime.datetime(2021, 4, 10, 17, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611072476, 'comment_body': ""Echoing Neil's comment from the last PR, how do you feel about `urljoin`?"", 'comment_created': datetime.datetime(2021, 4, 10, 17, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611080222, 'comment_body': ""This statement is particularly used only for Error handling, in case no browser is found in the system.\r\nYes, we don't have any use for the returned controller, but if the module could not find any browser(GUI/text-based) then this statement will throw a `webbrowser.Error` and we can use the `try-except` block to catch it and display an appropriate error message. The link in my below comment should provide further clarity. :)"", 'comment_created': datetime.datetime(2021, 4, 10, 18, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 611080543, 'comment_body': ""Yes, I was able to successfully reproduce this error on my AWS EC2 instance over `ssh`.\r\nThe error message is already very specific, so I don't think context would be necessary?\r\nSee [here](https://stackoverflow.com/questions/39371219/python-webbrowser-check-if-browser-is-available-nothing-happens-when-opening) for the type of error message thrown and how to reproduce it."", 'comment_created': datetime.datetime(2021, 4, 10, 18, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 611082623, 'comment_body': 'There is only one key for `view_in_browser` i.e. `v`, right?\r\nIs there any particular reason to specify plural?', 'comment_created': datetime.datetime(2021, 4, 10, 19, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 611082927, 'comment_body': ""I am sorry, but I don't understand this.\r\nAren't ***their system*** and ***ZT host*** the same?"", 'comment_created': datetime.datetime(2021, 4, 10, 19, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 611095690, 'comment_body': 'I am not too sure what the *pre-existing* code was there, but I am guessing it was something similar to our `server_url.py`?\r\nWe could use `urljoin`, but that will require completely refactoring our `server_url` code, and I am skeptical since the server uses the same approach as we have currently.', 'comment_created': datetime.datetime(2021, 4, 10, 21, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 614318646, 'comment_body': ""Note that we're join-ing an array. While we do only have one key right now, the list might expand later."", 'comment_created': datetime.datetime(2021, 4, 15, 18, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614320197, 'comment_body': 'Right. @neiljp Any thoughts on this?', 'comment_created': datetime.datetime(2021, 4, 15, 19, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614322535, 'comment_body': 'For instance, the ZT host could be an AWS EC2 or a droplet and your laptop could be the system (with a GUI). What would happen in this case?', 'comment_created': datetime.datetime(2021, 4, 15, 19, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614324549, 'comment_body': 'Thanks for the explanation. Agreed; the error message seems to capture the context itself.', 'comment_created': datetime.datetime(2021, 4, 15, 19, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614324621, 'comment_body': 'So, replacing *your system* with *ZT host* in the above footer text?', 'comment_created': datetime.datetime(2021, 4, 15, 19, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 614325126, 'comment_body': 'Makes sense!', 'comment_created': datetime.datetime(2021, 4, 15, 19, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614326021, 'comment_body': 'Yeah, that seems reasonable.', 'comment_created': datetime.datetime(2021, 4, 15, 19, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 644984447, 'comment_body': ""The webbrowser module supports text browsers, which can sometimes render well - though I've no idea how well they'd work for the webapp. Other sites may vary, of course. We could reconsider that now or add a TODO."", 'comment_created': datetime.datetime(2021, 6, 3, 17, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644987608, 'comment_body': 'If we do that, I\'d expect a comment, since Preet had to ask :) Alternatively, we can just use an intermediate variable. I\'m not sure if that information allows giving more detail to what was done with the link if we showed a success message in the footer, ie. what the returned ""controller"" is attached to.', 'comment_created': datetime.datetime(2021, 6, 3, 17, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644988242, 'comment_body': 'Do we want this to be `.open_new_tab`?\r\n\r\nWe could add a ""success""-related message in the footer, since some browsers may be elsewhere in the UI and the focus not automatically changed.', 'comment_created': datetime.datetime(2021, 6, 3, 17, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644995579, 'comment_body': 'Why do we need `repr` here?', 'comment_created': datetime.datetime(2021, 6, 3, 17, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645007642, 'comment_body': 'We want another test when this fails?', 'comment_created': datetime.datetime(2021, 6, 3, 17, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645011029, 'comment_body': ""By default patching applies a working mock.\r\n\r\nIf we leave the code as it is then you don't use `mock_get`?\r\n\r\nYou've updated this in a later commit though, when you can just do it here :)"", 'comment_created': datetime.datetime(2021, 6, 3, 17, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645013062, 'comment_body': ""You don't need parentheses if this is on one line."", 'comment_created': datetime.datetime(2021, 6, 3, 17, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645015785, 'comment_body': ""If this is necessary to avoid screen corruption, I'd suggest we add the output-suppressing commit first."", 'comment_created': datetime.datetime(2021, 6, 3, 17, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645018675, 'comment_body': ""These lines look better than the original, but there's no reason to change the names and move them around - the commit diff is bigger and less clear because of it."", 'comment_created': datetime.datetime(2021, 6, 3, 18, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645020429, 'comment_body': ""Re-reading this PR now I see that we've got `server_url.py` providing this functionality, which as @zee-bit says is from the server code :+1:"", 'comment_created': datetime.datetime(2021, 6, 3, 18, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645024512, 'comment_body': ""I'd suggest adding the functionality first, then hooking it up in a separate commit, which here could combine the small first commit with the UI which uses it.\r\n(new popups tend to have a more complex structure since a new view often requires the key first)"", 'comment_created': datetime.datetime(2021, 6, 3, 18, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645975543, 'comment_body': 'I would like to explore more on how different text-browsers work for different sites and our webapp, so I am leaving this as a TODO for now. :)', 'comment_created': datetime.datetime(2021, 6, 5, 10, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 645979597, 'comment_body': ""Yes, `open_new_tab` sounds better. Although I do wonder what's the difference between `.open(new=0)`(default) and `new=2`(same as new_tab), they both seem to behave exactly the same to me. If both do come out to be the same then we don't need to change the above, right?\r\n\r\nAnyways, added a success message as asked. :)"", 'comment_created': datetime.datetime(2021, 6, 5, 11, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 645999883, 'comment_body': ""`repr` gives a printable string representation here. So, if the key is `'v'`, the same will be printed (with quotes).\r\nI think that's how we do in other such places throughout our codebase?\r\nOr, am I misunderstanding your question?"", 'comment_created': datetime.datetime(2021, 6, 5, 14, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 646743441, 'comment_body': ""Well, I tried `lynx` on a remote server, and though some simple website were rendered OK, I couldn't get it to work for our webapp properly. As in, it loads the CZO website, and I can even log-in but it can't fetch any messages. I am just left with the top-left panel items(all messages, private, starred...) aligned haphazardly and a few other options such as log-out and server name..."", 'comment_created': datetime.datetime(2021, 6, 7, 16, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 648793946, 'comment_body': ""This shows a message for me, but indicates it has been opened `...in xdg-open`. What do you see locally? I'm not sure if we can improve this? Maybe `...using xdg-open` would be OK, but it's a bit cryptic for a lot of users I suspect. If we can't grab an actual browser name then perhaps we should avoid mentioning the process?"", 'comment_created': datetime.datetime(2021, 6, 10, 1, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648794579, 'comment_body': 'In a general sense other links may work OK, so in the longer term we might move this block into the ""open in webapp"" block instead.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648796739, 'comment_body': ""This is the second call of the tested method in this test function, which generally we try to avoid now. I'd suggest a parametrize or a separate test.\r\n\r\nOn the other side, I'm not sure if we need to parametrize over the url?"", 'comment_created': datetime.datetime(2021, 6, 10, 2, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 649091207, 'comment_body': ""Hmm...That's odd.\r\nLocally I got `...google-chrome`, and on the remote server running `lynx`, I got `...generic-browser`(which is still a bit unclear). I am aware that webbrowser module uses `xdg-open` under the hood in Linux, but it shouldn't be returning that as the name?\r\n\r\nAny chance you're on Python v<=3.6, I found a few StackOverflow answers which suggest that it's a Python issue, which was fixed on 3.7+?"", 'comment_created': datetime.datetime(2021, 6, 10, 11, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 649092155, 'comment_body': ""In any case, if we can't grab the actual name widely and consistently it's better to output a general message like:\r\n`The link was successfully opened in the default browser.`?"", 'comment_created': datetime.datetime(2021, 6, 10, 11, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 649134652, 'comment_body': ""I appear to have 3.7.3 here. As I said above, perhaps let's simply switch to `using` in place of `in` in the text, which reads slightly better for both `using chrome` and `using xdg-open`?"", 'comment_created': datetime.datetime(2021, 6, 10, 12, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 649135090, 'comment_body': '(just to keep things simple for now)', 'comment_created': datetime.datetime(2021, 6, 10, 12, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 649149835, 'comment_body': ""No, we don't need to parametrize over URL. Thanks. :+1:"", 'comment_created': datetime.datetime(2021, 6, 10, 12, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 649151730, 'comment_body': ""Sure, I'll use `using`.\r\nI just refreshed this page so didn't saw your comment earlier. :)"", 'comment_created': datetime.datetime(2021, 6, 10, 12, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': 'aef5b9b3f3534d04971cac690d109171f9a300d9', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9799d23c2c2797f5515d90b5cc334dd1f48b29', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a7fcef74d47f0aad24ae1932e077c9b7e6ec69', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
591647644,boxes: Add support for renaming (no topic) messages.,"This PR adds support for renaming messages that had no topic, by anyone as long as `realm_allow_message_editing` is `True` for the organization. This is the behavior that is followed by webapp for message editing events.

Fixes #837.",True,946,https://api.github.com/repos/zulip/zulip-terminal/pulls/946,https://github.com/zulip/zulip-terminal/pull/946,closed,174,42,2,5,5,33,3,0,"[{'name': 'size: XL'}, {'name': 'area: message editing'}, {'name': 'missing feature: user'}]",2021-03-12 12:41:50+00:00,2021-08-12 07:01:39+00:00,13198789.0,"152 days, 18:19:49","[{'comment_id': 602992291, 'comment_body': 'It would be clearer in diffs if we put this part of code also inside the conditional check?', 'comment_created': datetime.datetime(2021, 3, 29, 3, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 603008319, 'comment_body': ""minor: Let's keep this in the end to provide more clarity."", 'comment_created': datetime.datetime(2021, 3, 29, 4, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 633017778, 'comment_body': 'This reformatting is quite line-heavy; these dicts will all still fit each on one line?', 'comment_created': datetime.datetime(2021, 5, 15, 23, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633018733, 'comment_body': ""These texts aren't tested, and if one doesn't read carefully, might be changed in this commit. A preliminary refactor which adds these texts to the test too may make the test clearer too, and then with the new output it can be expanded to cover those cases."", 'comment_created': datetime.datetime(2021, 5, 15, 23, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633019504, 'comment_body': ""It seems strange that this text isn't updated given the change of condition."", 'comment_created': datetime.datetime(2021, 5, 15, 23, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633022135, 'comment_body': 'Is this what we expect in PMs, or is the key absent?', 'comment_created': datetime.datetime(2021, 5, 16, 0, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 634766853, 'comment_body': 'The API docs do say that we should expect an empty string here. Quote:\r\n> subject: string The topic of the message. Currently always """" for private messages, though this could change if Zulip adds support for topics in private message conversations.\r\n\r\nI also did a manual test just to be extra sure. :)', 'comment_created': datetime.datetime(2021, 5, 18, 21, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 663512891, 'comment_body': 'This should be the accurate definition of ""(no topic)"" messages i.e. empty topic. But, I am a bit hesitant to print this in the footer (the user might not know how we represent empty topics?).\r\nI also had `You can\'t edit messages sent by other users which do not have ""(no topic)""`.\r\nIs there a more better way to report this?', 'comment_created': datetime.datetime(2021, 7, 4, 14, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 663515475, 'comment_body': 'After a short discussion with @prah23 via PM\'s we\'ve decided to go with ""You can\'t edit messages sent by other users that already have a topic."", because if we err towards being more specific then we might just confuse the user and bloat the footer with a very long message.', 'comment_created': datetime.datetime(2021, 7, 4, 14, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 664033934, 'comment_body': 'Why this reordering? It complicates the diff. I could understand maybe improving the id now that it\'s more complex though - ""all conditions"" doesn\'t seem comparable to the other descriptions.', 'comment_created': datetime.datetime(2021, 7, 5, 16, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664192466, 'comment_body': 'With more parametrize fields and the next commit adding more cases, it seems good to inline the ids first before the current 2nd commit.', 'comment_created': datetime.datetime(2021, 7, 6, 2, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664656992, 'comment_body': ""This isn't related to this feature, but the test (at first glance!) says editing should succeed here, yet in manual testing (and per the warnings/errors you added) editing (partially) succeeds with streams and fails with PMs!\r\n\r\nOf course, this is related to the private-message conditional in the test. Now that you testing stream/private-dependent pairs, what do you think about expanding those pairs in an earlier commit to include the 'success/failure' before building on that to include the strings? That would perhaps simplify the conditionals you add too?\r\n\r\nBTW I think it would be fine to have the inlining of the ids in a separate commit too, as I did in the black prep work."", 'comment_created': datetime.datetime(2021, 7, 6, 15, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664672094, 'comment_body': ""Another tidying of this test would be to move & possibly rename this parameter - it's an expected result, not an input."", 'comment_created': datetime.datetime(2021, 7, 6, 15, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664688093, 'comment_body': 'We mentioned this in the test, but might be worth noting here that a private subject is """"?\r\nThat said, can you move the subject check into the stream conditional? That seems cleaner.', 'comment_created': datetime.datetime(2021, 7, 6, 16, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664694065, 'comment_body': 'I think this will be easier to reason about if you move the first conditional around as I indicate above.', 'comment_created': datetime.datetime(2021, 7, 6, 16, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664697401, 'comment_body': ""I'm inclined to think that we should indicate why it's allowed - this is someone else's message but with no-topic?"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664699938, 'comment_body': ""You're not testing this - is it already covered?"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664939989, 'comment_body': '~~I think we can remove this whole block from here?\r\nThey should already be handled fine with the below stream conditionals.~~', 'comment_created': datetime.datetime(2021, 7, 6, 23, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 664940951, 'comment_body': 'Actually, because of the equivalent conditional at the top, this case was already handled by that and returned so we never reach here.\r\n~~Removing the top block as I suggested in one of the above comments should make this feasible.~~', 'comment_created': datetime.datetime(2021, 7, 6, 23, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 664944673, 'comment_body': ""> This isn't related to this feature, but the test (at first glance!) says editing should succeed here, yet in manual testing (and per the warnings/errors you added) editing (partially) succeeds with streams and fails with PMs!\r\n\r\nThis seems to be also true for `msg_body_edit_enabled`?\r\nAnyways, I've expanded both to contain values for both types of messages (stream/private)."", 'comment_created': datetime.datetime(2021, 7, 6, 23, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 665399404, 'comment_body': 'We can\'t remove this block. It handles the ""always allow message content edit"" case - almost forgot about that earlier. :sweat_smile: \r\n\r\nI don\'t think we can move the subject check into the stream conditional below too. We don\'t enter the next block since `realm_message_content_edit_limit_seconds` will be `0` for ""always"" message-edit, so we need to handle that case outside either in the beginning or end.', 'comment_created': datetime.datetime(2021, 7, 7, 13, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 665407745, 'comment_body': 'I have amended the equivalent error message at the top to print the same thing as here.', 'comment_created': datetime.datetime(2021, 7, 7, 14, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678751353, 'comment_body': 'I know that these are often the same, but it seems cleaner to have these as a dict too?', 'comment_created': datetime.datetime(2021, 7, 29, 1, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678753037, 'comment_body': 'There\'s quite a bit of repetition here, and it\'s not clear if the missing else clause is meaningful. Particularly with the dict approach I suggest, can you select the ""report function"" and then assert on it based on the type?', 'comment_created': datetime.datetime(2021, 7, 29, 1, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678757101, 'comment_body': 'If this block is not actually used, it is better to indicate it with a comment as to the condition and in this case where else it should be covered. Then you can also include an assertion or probably better raise a RuntimeError since it indicates an error in the application!', 'comment_created': datetime.datetime(2021, 7, 29, 1, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678760514, 'comment_body': ""I think `expect_*` is a sufficient prefix, though it's fairly minor and down to the phrasing!\r\n\r\nThis commit title has a typo."", 'comment_created': datetime.datetime(2021, 7, 29, 1, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678761533, 'comment_body': 'This is definitely a lot more readable :+1:\r\nThe test is still long, but removing that conditional makes this clearer :)', 'comment_created': datetime.datetime(2021, 7, 29, 1, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678765322, 'comment_body': ""So this is about the `return key` location?\r\n\r\nThis does seem to work fine as it is, it's just not quite as clear as I'd prefer."", 'comment_created': datetime.datetime(2021, 7, 29, 1, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678765928, 'comment_body': ""I'm inclined to have the subjects all the same, for contrast with the special case?"", 'comment_created': datetime.datetime(2021, 7, 29, 1, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678766379, 'comment_body': 'These ids are definitely an improvement :+1: We can always do another pass later for consistency - maybe with community editing!', 'comment_created': datetime.datetime(2021, 7, 29, 1, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 680577526, 'comment_body': 'For each dict there could be different `report_*` functions for different message types. e.g. A stream message might allow editing just the message topic (so `report_warning`) whereas under the same conditions a private message may not allow editing at all (`report_error`). I think that will make the test even more complex if I understand your statement correctly?', 'comment_created': datetime.datetime(2021, 8, 1, 22, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 687332925, 'comment_body': 'This has changed from True->False. This exposes the logic of the test, and suggests we might consider a different value for this case, such as `None`?', 'comment_created': datetime.datetime(2021, 8, 12, 3, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687400472, 'comment_body': 'This seems to be resolved with the change to a dict for the footer_text?', 'comment_created': datetime.datetime(2021, 8, 12, 5, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'ac5d366fd6ecebe2ebaa4a82f02cf5325e44a64c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff950090b811fec327d3d9fcefc297346732497c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bda5f148d5f5bc3ecd9a24f6888b9004ea6bdc3', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f2057924b4815b1d0c8c3ec97e3b38a83bab683', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4150981fe504e8db1fa37a1c00ab9015dd8ee1d4', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
569058768,feature: Add Reactions to messages.,"This PR packs a critical feature, that supports adding general reactions to messages. Few highlights of this feature:
- A new `EmojiPicker` popup that activates from <kbd>:</kbd> hotkey.
- Search for any emoji in the list through <kbd>p</kbd> hotkey.
- A reaction count beside emoji's that users have reacted with.
- Emoji list sorted in decreasing order of reaction count, and ascending order of emoji names(if reaction count is same).
- A `CHECK_MARK` that indicates emoji's that the current user has reacted with.
- Mouse support allows toggling reactions and scrolling through mouse events.

**Working:**

<img src=""https://user-images.githubusercontent.com/54993043/110815551-8dcfe880-82b0-11eb-8ee4-135976efa44a.gif"" width=""250"" height=""500""/>


Thanks to @kaustubh-nair for his initial work in #707. I was able to pull some of his changes here, which simplified my work.
",True,913,https://api.github.com/repos/zulip/zulip-terminal/pulls/913,https://github.com/zulip/zulip-terminal/pull/913,closed,466,3,9,6,6,101,3,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-02-07 21:45:38+00:00,2021-08-17 05:32:27+00:00,16444009.0,"190 days, 7:46:49","[{'comment_id': 573458437, 'comment_body': 'I guess the `right` symbol is used somewhere in the stream info as well. It would be clean to use the predefined `CHECK_MARK` in `symols.py` instead :)', 'comment_created': datetime.datetime(2021, 2, 10, 5, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573464772, 'comment_body': '[minor]: This could be shortened with comprehension :sweat_smile: ', 'comment_created': datetime.datetime(2021, 2, 10, 5, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573467168, 'comment_body': 'Any changes to `keys.py` should be reflected in `README.md` (in the same commit).', 'comment_created': datetime.datetime(2021, 2, 10, 5, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573473806, 'comment_body': ""Are you referring to `list comprehension`, because I don't see any lists here? :thinking:\r\nOr, you are speaking about the function `user_has_reacted_to_msg`?"", 'comment_created': datetime.datetime(2021, 2, 10, 6, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 573480144, 'comment_body': 'This seems unnecessary :)', 'comment_created': datetime.datetime(2021, 2, 10, 6, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573482719, 'comment_body': 'This is actually necessary. This line resets the search caption to `Search [p]:`, after you press `Esc`(i.e. move your focus from Search-box to Emoji list) and press `p` again, otherwise the search caption would become empty.\r\n\r\nHowever, if you have any other idea/refactor in mind then please let me know. :)', 'comment_created': datetime.datetime(2021, 2, 10, 6, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 573492391, 'comment_body': ""I was actually referring to the if/else logic below. Sorry for confusion :)\r\n\r\nMy point was that we could shorten the condition by doing something like:\r\n\r\n```python\r\nself.update_widget(('bar', '' if self.user_has_reacted_to_msg else CHECK_MARK), 'bar')\r\n```"", 'comment_created': datetime.datetime(2021, 2, 10, 7, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573524885, 'comment_body': ""We could surely do that. But, I think this would be a bit difficult to read and interpret. Maybe, we should wait for Neil's review on this?"", 'comment_created': datetime.datetime(2021, 2, 10, 8, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 573568516, 'comment_body': 'I actually started comparing this search box with other search boxes; In other search boxes, the `Search [key]` indirectly acts as a sort of placeholder, which disappears when comes into focus; However, since the search box appears only on toggling the popup in this case, your re-setting the caption makes sense :+1: \r\n\r\nAlso, we may use f-strings and replace `p` via the `keys_for_command` to avoid that change in future :)', 'comment_created': datetime.datetime(2021, 2, 10, 9, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 600472901, 'comment_body': 'I think we can keep this FIXME comment till the commit we add support for all emoji reactions.', 'comment_created': datetime.datetime(2021, 3, 24, 13, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 600483065, 'comment_body': 'In the third commit, pressing <kbd>enter</kbd> in the emoji search box causes ZT to crash. Traceback logs show that `EmojiPickerView` has no view attribute.  ', 'comment_created': datetime.datetime(2021, 3, 24, 13, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 623822610, 'comment_body': 'I think adding ids to the test could make the more clear, and would help to identify potentially unhandled edge cases.', 'comment_created': datetime.datetime(2021, 4, 30, 12, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623824957, 'comment_body': 'This might be tidied using another bool variable, such as `is_same_user_id` (or something similar) inside the loop?', 'comment_created': datetime.datetime(2021, 4, 30, 12, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623826574, 'comment_body': 'minor: typo: `smile`', 'comment_created': datetime.datetime(2021, 4, 30, 12, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623829692, 'comment_body': 'A blank line above and below the primary function being tested would bring clarity :)', 'comment_created': datetime.datetime(2021, 4, 30, 12, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623834250, 'comment_body': ""Let's add a note for the visual change (emoji check marker background here) in the commit message."", 'comment_created': datetime.datetime(2021, 4, 30, 12, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623840384, 'comment_body': 'I know this commit has been dedicated to ""fix a search caption"". Though I\'m not sure if this is necessary unless there is a suitable reason for it that I\'m overlooking.', 'comment_created': datetime.datetime(2021, 4, 30, 12, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623847921, 'comment_body': 'After the last commit, on manual testing, I found that hitting `ESC` produced an empty view in the list below. Maybe we could override the `ESC` key to exit right away? Not sure if this is necessary, but normally we would expect a popup to be closed on `ESC`?', 'comment_created': datetime.datetime(2021, 4, 30, 12, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623850175, 'comment_body': ""I'd prefer moving this commit prior to the 4th commit (where it is first amended)."", 'comment_created': datetime.datetime(2021, 4, 30, 12, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623952951, 'comment_body': 'Do you mean moving this check just inside the loop to a variable `is_same_user_id`, then using the variable inside the `if`?', 'comment_created': datetime.datetime(2021, 4, 30, 15, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 623975930, 'comment_body': 'No, I mean declaring the variable inside the loop and simplifying the conditional check.', 'comment_created': datetime.datetime(2021, 4, 30, 15, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623992233, 'comment_body': 'Unlike other Search boxes that inherit `PanelSearchBox`, we need a static search caption here, while making sure that other Search boxes remain unaffected by this change. Hence, these are necessary to check that only those Search boxes get static caption that passes `fixed_search_caption` as `True`. Let me know if this is still unclear or I misunderstood you. :)', 'comment_created': datetime.datetime(2021, 4, 30, 16, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624004296, 'comment_body': 'This page got cached. I edited my comment just 3mins after your latest comment without even knowing you commented until now. :laughing:', 'comment_created': datetime.datetime(2021, 4, 30, 16, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624018417, 'comment_body': 'From where were you pressing `Esc`? Search box or Just Emoji picker popup. Could you list the steps you did that caused the empty view for you. This sounds like a bug to me.\r\n\r\nAs we discussed in the Stream, Neil wanted the focus to be initially in the Search box when this popup was opened and only move to the Emoji list on pressing `Esc`(or `Enter`). So, we have another layer in between if the user wants to exit the popup. i.e. he has to move to the Emoji list, for the ""`Esc` to exit"" to work.\r\n\r\nBut as you said, we could override the `Esc`, causing it to directly exit the popup. So, the user would have to use `Enter` to move focus from search to emoji list, which seems better to me too. :+1:', 'comment_created': datetime.datetime(2021, 4, 30, 16, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624030232, 'comment_body': ""To clarify, I understand the working and the implementation here. What I meant to ask was: What are the use cases for which we'd prefer such option? Is there a specific intent behind fixing the search caption? (unlike the default behavior)"", 'comment_created': datetime.datetime(2021, 4, 30, 17, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 624033193, 'comment_body': 'I just realized, there\'s also a case, when the user typed something in the search box(but didn\'t press `Enter`) and now he wants to just go to the full emoji list. He could currently do so just by pressing `Esc`(or deleting the whole search text). But, if we go by the ""`Esc` to exit"" approach, he would either have to close and reopen the emoji popup, or delete the whole search text. Whats your opinion on this?', 'comment_created': datetime.datetime(2021, 4, 30, 17, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624034517, 'comment_body': 'If the focus is set to the search box initially, without the caption(default behaviour), then how would the user know what that edit box is for?\r\nA caption indicates that that is a ""Search box"" where he could search for Emoji\'s. ', 'comment_created': datetime.datetime(2021, 4, 30, 17, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624036556, 'comment_body': 'Ah, I see. Now it makes sense 👍', 'comment_created': datetime.datetime(2021, 4, 30, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 624470326, 'comment_body': 'I have updated the PR addressing the rest of your review, for now. But, I\'d like to discuss more on this. Whether we\'d want a popup with ""`Esc` to exit"" or ""`Esc` to focus to body"". For clarification, I was already overriding the default behavior of `Esc` to function as ""`Esc` to focus to body"" in [Line1604-1613](https://github.com/zulip/zulip-terminal/pull/913/files#diff-d224bd64cffd2530e18eef475b08bf4a7d49aabfedd40948a32dc5893cbb55cbR1604-R1613) of `views.py`', 'comment_created': datetime.datetime(2021, 5, 1, 9, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624513496, 'comment_body': 'I think it\'s better to go with a ""`Esc` to exit"" approach to maintain consistency with the other search boxes? From using the other search-boxes the user would have gotten used to pressing escape to ""get out of a search"".\r\nAlso are the initial emoji\'s fetched in ascending order or most commonly used ones, like the Popular section in the webapp? If the latter, it seems reasonable to place the initial focus on the list?', 'comment_created': datetime.datetime(2021, 5, 1, 13, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 638751859, 'comment_body': 'Added ""esc to exit"". Had to override a couple of behaviors that were default to the `PanelSearchBox`, but it should work mostly fine as far as I tested. :)', 'comment_created': datetime.datetime(2021, 5, 25, 12, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650533834, 'comment_body': 'This is not a `log` anymore right?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650535210, 'comment_body': 'You don\'t need a `SimpleFocusListWalker` here right? You are planning to put a search box here for which you made `PanelSearchBox` wrapped around a `LineBox` converted it into a `list` wrapped around a `SimpleFocusListWalker` and wrapped around that is a `Pile`. You can directly send the `LineBox` as `header` right? Or you could just use a `Divider` like how TopicView does it.\r\nAlso, I feel the ""line drawing"" part should be inside PopupView instead of EmojiView so that others may use it later?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650536079, 'comment_body': ""Is this a result of wrapping a `SimpleFocusListWalker` around the SearchBox? Maybe all this could be avoided? Not sure though.\r\nAnyway isn't there the `is_in_editor_mode` or something similar in model that could be used here?"", 'comment_created': datetime.datetime(2021, 6, 13, 14, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650537305, 'comment_body': 'What is the function of `allow_emoji_list` here?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650575310, 'comment_body': ""You are absolutely correct, but since this is in `PopupView` which is used in multiple places right now, I wanted to have a generic solution that doesn't need much tinkering to make it work for slightly different use-cases as we had to do in this PR.\r\n\r\nWe might want to have a list of `LineBox`(or some other widget) as header in the future, then this approach would not need amendments and would work for both cases. Let me know if you still want me to change my approach. :)"", 'comment_created': datetime.datetime(2021, 6, 13, 20, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650577689, 'comment_body': 'No, this is not because of the above approach. This is actually a fix for a bug that you reported(some keys i.e. j,k,G not getting typed in the search-box). The bug was present because the `PopupView` intercepted some direction keys(both primary and secondary) and converted them to primary(i.e. ""up"", ""down"" etc.), thus preventing the secondary letter keys from getting typed in the search box. Hence, I added the above parameter in `__init__()`. See commit f05c892 for the bugfix.\r\n\r\nThe reason I can\'t use something like `is_in_editor_mode` is because it is an attribute of `PanelSearchBox` which can\'t be accessed in `PopupView`(since its the parent of `EmojiPickerView`). You can see that we do check `is_in_editor_mode` for `ENTER` keypress events in `EmojiPickerView`, but we cant prevent the `PopupView` from capturing the secondary letter keys. We need a parameter that can convey this information to the parent, hence I added the `is_popup_search_open` field. This seems to be the only approach feasible to me. :)', 'comment_created': datetime.datetime(2021, 6, 13, 21, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650580349, 'comment_body': 'Do you mean we change it to something like `self.body`?', 'comment_created': datetime.datetime(2021, 6, 13, 21, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650580737, 'comment_body': ""We don't actually need this. Thanks for pointing it out. :+1: "", 'comment_created': datetime.datetime(2021, 6, 13, 21, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650643461, 'comment_body': 'Ya that sounds better.', 'comment_created': datetime.datetime(2021, 6, 14, 4, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650648774, 'comment_body': 'We could still make that work but still use simpler widgets. The PopupView could accept a single widget and wrap it inside a LineBox and send it to Frame. In your case, you can directly send the PanelSearchBox. For other new Popups, mostly headers would contain 1 widget but if they really want to use more than that, they could send a Pile. Anything can be inside Pile: Walker, LineBox, etc.\r\nAnother issue in your version is that I have no way of manipulating the final ""log"" (inside Pile) if I want to. I would have to create another log in the child which would not be a nice way to do things.', 'comment_created': datetime.datetime(2021, 6, 14, 4, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650650869, 'comment_body': 'Another thing, I know I can access the log using `self.body._w` or something like that but it would be easier if I could just access `self.log` if I wanted to manipulate the log? So you could keep the original line and add the listbox line under?', 'comment_created': datetime.datetime(2021, 6, 14, 5, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650652030, 'comment_body': 'Can I use `self.header._w` or something here? Anyway having a list in the header would be an exception and it is better if it was made and handled locally in the child class.\r\nAlso every child using the header will for sure use a LineBox. So instead of each child making their own LineBox, its better if PopupView does it once?\r\n\r\nWhat do others think here?', 'comment_created': datetime.datetime(2021, 6, 14, 5, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650673634, 'comment_body': 'Oh ok.\r\nBut this kills the abstraction of the class right? PopupView now knows that there is a child that uses a searchbox. PopupView shoulld know nothing about its children. Maybe you could change the name to `disable_keys`? Or maybe you can simply override it from the keypress of EmojiView? selectively call super()?\r\nAlso if you have access to controller, you get access to `is_in_editor_mode` right?', 'comment_created': datetime.datetime(2021, 6, 14, 6, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650677631, 'comment_body': 'You can just use `self.controller.is_in_editor_mode()` I think.\r\nNot related to this but I wanted to know if you knew how `enter_editor_mode` happens for SearchBox and PanelSearchBox? It is clear for WriteBox but not for these, does it happen automatically by urwid?', 'comment_created': datetime.datetime(2021, 6, 14, 6, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650678605, 'comment_body': ""Do we need this? `exit_popup` is done by PopupView and we don't need to reset if we are exiting?"", 'comment_created': datetime.datetime(2021, 6, 14, 6, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650824958, 'comment_body': ""You see, that's the issue.\r\nI just noticed this yesterday after your review, that `is_in_editor_mode()` always returns `False`. So the above condition buggy and that may be the reason for the multiple reactions bug that you reported in the stream, not sure though.\r\n\r\nIt is always `False` even if I use `self.controller.is_in_editor_mode()` which makes me believe that `enter_editor_mode` never actually happens for PanelSearchBox, as you mentioned above, for any of the SearchBoxes? I can obviously explicitly `enter/exit_editor_mode` when shifting focus to/from `PanelSearchBox`, but I can't convince myself if that is a good approach. Let me know if you figure out how the editor mode works for these SearchBox, or maybe it's worth bringing this to the stream?"", 'comment_created': datetime.datetime(2021, 6, 14, 10, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650827304, 'comment_body': 'No, I don\'t think we need this too. You\'re right that `exit_popup` is called from PopupView. I added this check earlier when we were not doing ""Esc to exit"" and didn\'t bother removing it afterward. I\'ll remove it in this next iteration. Thanks. :+1:', 'comment_created': datetime.datetime(2021, 6, 14, 10, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650861050, 'comment_body': ""But the thing is it works! Atleast in PanelSearchBox if you remove `exit_editor_mode` the search box behaves weirdly. It doesn't come out of search. That means it _was_ indeed in editor mode. But you say it's always False. "", 'comment_created': datetime.datetime(2021, 6, 14, 11, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651015439, 'comment_body': ""To answer your first question. The other search boxes `enter_editor_mode` explicitly in `ui.py` since they are not part of any popups or sub-UI. So, `urwid` doesn't automatically enter editor mode, but we need to specify it explicitly. Which points that my above approach is actually what I should follow. Thanks for the discussion, I'll amend my commits and push the next iteration in a short while. :)"", 'comment_created': datetime.datetime(2021, 6, 14, 14, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651055082, 'comment_body': ""Actually, we do need to keep the `exit_popup` check here, because when `Esc` is pressed from inside emoji search, then the keypress is first handled by `PanelSearchBox`(which throws a ValueError) and then by `PopupView`. We need to handle the exit condition here specifically and return so that `PanelSearchBox`'es keypress is not executed after this."", 'comment_created': datetime.datetime(2021, 6, 14, 15, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651079386, 'comment_body': 'minor: `reaction_to_toggle` could be just `reaction` as it already belongs to `toggle_message_reaction` and thus has its namespace.', 'comment_created': datetime.datetime(2021, 6, 14, 16, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651080928, 'comment_body': ""Re the commit description, it's good to have comments _only_ about the commit in there and keep things related to PR in the PR."", 'comment_created': datetime.datetime(2021, 6, 14, 16, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651088495, 'comment_body': 'minor: It is easier to identify ""expected"" params when they\'re prefixed with `expected_`.', 'comment_created': datetime.datetime(2021, 6, 14, 16, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651089921, 'comment_body': ""Let's use `case` (`from pytest import param as case`) so that it is easier to correlate the test cases and the ids."", 'comment_created': datetime.datetime(2021, 6, 14, 16, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651098588, 'comment_body': 'Since you\'re getting ""user"" from `reaction` twice, you could retrieve it once and store it in a variable.', 'comment_created': datetime.datetime(2021, 6, 14, 16, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651101652, 'comment_body': 'minor: You could save on the comparison below if you exit early (using `continue`) by checking `reaction[""emoji_name""] != emoji_name`.', 'comment_created': datetime.datetime(2021, 6, 14, 16, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651114534, 'comment_body': ""Let's include a newline above. It helps keep the Arrange, Act and Assert (AAA) bits separate for readability."", 'comment_created': datetime.datetime(2021, 6, 14, 16, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651119770, 'comment_body': ""I believe this shouldn't have the leading `_` as the method can _publicly_ accessed and the later `has_user_reacted_to_msg` should have a leading `_` as it is only being used _privately_."", 'comment_created': datetime.datetime(2021, 6, 14, 16, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651208301, 'comment_body': ""I think it's better to keep it as is, to avoid confusion with the other variable in the for loop below, having the same name?"", 'comment_created': datetime.datetime(2021, 6, 14, 19, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651210222, 'comment_body': 'Ah, right. That makes sense.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651239567, 'comment_body': ""I didn't knew the `_` was used to specify, in some sense, the access level of functions. :open_mouth: \r\nI merely used it here to differentiate the function name with the name of the model function that it is calling in return.\r\n\r\nBut, I don't understand how this function is *publicly accessible* but the `has_user_reacted_to_msg` isn't? Currently, we are using this only in the `EmojiButton` class but in future we may need to use it elsewhere?"", 'comment_created': datetime.datetime(2021, 6, 14, 20, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651269910, 'comment_body': 'Do you mean something like this?\r\n```python3\r\nself.log = urwid.SimpleFocusListWalker(body)\r\nbody = urwid.ListBox(self.log)\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 20, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651299132, 'comment_body': ""Also, I don't think `ListBox` provides a `._w` attribute. We could however do `self.log.body`(no name change) to get the `SimpleFocusListWalker` object containing the list of widgets. The [urwid docs](http://urwid.org/reference/list_walkers.html#urwid.SimpleFocusListWalker) states that:\r\n\r\n> Changes made to this object (when it is treated as a list) are detected automatically and will cause ListBox objects using this list walker to be updated.\r\n\r\nBut I don't get how are we supposed to update the list walker body."", 'comment_created': datetime.datetime(2021, 6, 14, 21, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651301050, 'comment_body': 'Ok, got it. The ListWalker object is like a `list`. So you could simply access/modify the widgets using their index, IG', 'comment_created': datetime.datetime(2021, 6, 14, 21, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651329408, 'comment_body': 'A better way to check this is using `self.controller.is_in_editor_mode`, but the issue is using this would Fail a lot of other tests that would by-default assume `.is_in_editor_mode` to be `Mock` object and the above condition would always be `False`, preventing a lot of navigation keypress tests from passing.\r\n\r\nI am having difficulty figuring out if I should go ahead with the current approach, or use the above one. The current approach as @Rohitth007 notes [here](https://github.com/zulip/zulip-terminal/pull/913/commits/f05c89246cbd529c1a8d12a8a0e5b645f6335866#r650673634), kills the abstraction of class. But, the above approach would require modifying un-related tests.', 'comment_created': datetime.datetime(2021, 6, 14, 22, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651331814, 'comment_body': ""Right, I do have access to `controller`, so we could use that. I've added a comment down below to help me decide what approach should I follow here."", 'comment_created': datetime.datetime(2021, 6, 14, 22, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651451838, 'comment_body': 'Yes we could do that, but this(above) is simpler to understand right?\r\n```python\r\nself.log = urwid.SimpleFocusListWalker(body)\r\nbody = urwid.ListBox(self.log)\r\n```\r\nbody would indicate body of Frame and self.log can be used to access the list walker', 'comment_created': datetime.datetime(2021, 6, 15, 5, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651451996, 'comment_body': ""In python, no matter whether the method is private or protected, you can always retrieve it. So, the leading `_` is just for other developers to understand whether the method is supposed to be used privately/vice-versa.\r\n\r\nYou're passing the toggle method to another class in `__init__`. While the other method is just being used internally. If you want to expose the method publicly then you may choose not to add the `_`."", 'comment_created': datetime.datetime(2021, 6, 15, 5, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651458819, 'comment_body': ""Oh ok got it, forgot to check `ui.py`.\r\nSo in your case it doesn't matter if you don't `enter_editor_mode`?\r\nBTW, `self.emoji_search.panel_view` == `EmojiPickerView` == `self`"", 'comment_created': datetime.datetime(2021, 6, 15, 5, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651482692, 'comment_body': 'Would calling `super().keypress` in EmojiPickerView only when not in search mode be a simpler solution?', 'comment_created': datetime.datetime(2021, 6, 15, 6, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651484444, 'comment_body': 'Correct me if I\'m wrong but there is nothing _private_ in Python. The notation is for developers to differentiate which is used ""privately"" and which is used ""publicly"".', 'comment_created': datetime.datetime(2021, 6, 15, 6, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651570928, 'comment_body': ""Sure, it looks good. I'll do the change."", 'comment_created': datetime.datetime(2021, 6, 15, 8, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651574151, 'comment_body': ""> So in your case it doesn't matter if you don't `enter_editor_mode`?\r\n\r\nNo, it does matter, we have to `enter_editor_mode` here. Earlier, I was getting `is_in_editor_mode` always `False`, because of this reason only. So, I need to explicitly `enter_editor_mode`, as I said in my comment above, because the `PanelSearchBox` never does that."", 'comment_created': datetime.datetime(2021, 6, 15, 8, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651576743, 'comment_body': 'If we dont call `super.keypress()` when in search mode and just return, then none of the keys would get typed in the search-box.', 'comment_created': datetime.datetime(2021, 6, 15, 8, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 652011314, 'comment_body': ""Yeah, that's what I was meaning in the first paragraph. :)"", 'comment_created': datetime.datetime(2021, 6, 15, 17, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 652641300, 'comment_body': 'I am keeping this unchanged for now, at least until we get more feedback on this. Nonetheless, this is definitely a change worth considering/discussing. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 12, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 652644128, 'comment_body': ""I am going forward with the current approach since that doesn't involve unnecessary test changes, leading to an even larger PR. But, I am keeping this conversation open for further discussion. :)"", 'comment_created': datetime.datetime(2021, 6, 16, 12, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 671138724, 'comment_body': ""What is the need for this check? I've seen this elsewhere also, though wasn't sure about the reason. I discussed this with Neil and he suggested adding this check instead in `exit_popup`. I'm ready to open a quick refactor PR for this."", 'comment_created': datetime.datetime(2021, 7, 16, 10, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 675579742, 'comment_body': '@Ezio-Sarthak This was particularly useful for my use-case (i.e. PanelSearch box inside a popup).\r\nIf you look at the conditional just above this, we were calling this when the focus was on **empty** search-box and the user pressed `Enter`, then the popup would close - which was unexpected. So, this condition prevents `Esc` keypress from being triggered by PanelSearch box if a popup is open.\r\n(Sorry for the late reply, I just noticed your comment. Let me know if this is still unclear.)', 'comment_created': datetime.datetime(2021, 7, 23, 13, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 679414903, 'comment_body': 'My instinct would be to extract (""hoist"") the common part of these assignments into a variable.\r\nThen, given you\'d do the same assignment in the block above, you can maybe move these variable assignments to be common to both aliases outside the conditional.', 'comment_created': datetime.datetime(2021, 7, 29, 19, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679416000, 'comment_body': ""The commit title doesn't represent the change here - we're generalizing the method to use active emoji data, but the method doesn't support anything other than thumbs_up right now :)\r\n\r\nI've not seen a point where you add tests for that new behavior you've added in this commit (nothing indicates the model in the commit title?), and right now the behavior isn't reachable due to the assert. I'd suggest you add a commit where you remove that assert and add tests to ensure the behavior is as you expect - or just update this commit to have this? After all, you're adding lots of code but not testing any of it yet :)"", 'comment_created': datetime.datetime(2021, 7, 29, 19, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679419404, 'comment_body': ""We're only applying this to thumbs_up right now, but there's no check here that reaction_to_toggle is a valid original/alias?\r\n`neil` as a name would cause what error feedback? ;)\r\nThis would be clear if there were tests to demonstrate the behavior :)"", 'comment_created': datetime.datetime(2021, 7, 29, 19, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679426028, 'comment_body': 'Minor: I\'d expand the name, and place the message first in order, requiring the second parameter be named to indicate what \'with\'.\r\nThis would mean code originally looking like:\r\n```\r\nhas_user_reacted_to_msg(""+1"", foo.msg)\r\n```\r\nwould have to be written as:\r\n```\r\nhas_user_reacted_to_message(foo.msg, with_emoji=""+1"")\r\n```\r\nWhat do you think?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679434919, 'comment_body': ""This is a really confusing part of the API historically:\r\n* get-messages had `dict(user=dict(id=...), ...)`\r\n* events had `dict(user=dict(user_id=...), ...)`\r\n\r\nBoth may have the above (for a while) but unified also as the simpler:\r\n* `dict(user_id=...)`\r\n\r\nSo, the above code works for now, but won't after the older fields are removed (not deprecated).\r\n\r\nWould this method work for refactoring the toggle-reaction logic - lower in the methods you just generalized? Maybe this is also usable in the display logic (different styles for general and including your-own reactions)? This would centralize the logic and this would become a clean refactor commit - the possible concern being whether the calculation in those methods is combined with other logic, or if there is overhead here compared to existing implementation?\r\n\r\nWe could likely simplify this further using `modernize_message_response`, though we need to handle reaction events too. I'm unconvinced it's worth making this particular PR even more complex and delaying it further."", 'comment_created': datetime.datetime(2021, 7, 29, 19, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 680084149, 'comment_body': ""Right, I see they introduced the `dict(user_id=...)` in server version 3.0 ZFL 2. So that means, we'd still need to support the above along with the new unified format?"", 'comment_created': datetime.datetime(2021, 7, 30, 16, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 680241930, 'comment_body': '@neiljp As discussed in the stream, I have kept all three check for getting ""user_id"", this should hopefully survive post the removal of `user` object from the server.\r\n\r\nI have also centralized the logic for `has_user_reacted_to_message` and adapted the toggle-reaction logic to use this method instead. As you said, this should also prove useful in the display logic. :+1:', 'comment_created': datetime.datetime(2021, 7, 30, 22, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 687068704, 'comment_body': 'This check already exists elsewhere, so rather than a very tiny commit, can we make this a refactor?', 'comment_created': datetime.datetime(2021, 8, 11, 18, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687184739, 'comment_body': 'This is not being used anywhere? Everything defaults to True?', 'comment_created': datetime.datetime(2021, 8, 11, 20, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687186229, 'comment_body': 'The sorting introduced in this commit is worth highlighting in the title too if possible.', 'comment_created': datetime.datetime(2021, 8, 11, 20, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687189294, 'comment_body': 'Do we know enough here to assert on the reaction count after?', 'comment_created': datetime.datetime(2021, 8, 11, 21, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687191932, 'comment_body': 'If you invert this then this becomes identical to the other main branch except for the `[not] self.is_selected(...)`.', 'comment_created': datetime.datetime(2021, 8, 11, 21, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687199104, 'comment_body': 'This only explicitly sorts by count here?\r\n\r\nTo avoid calling count_reactions multiple times, we could sort the EmojiButton list instead?', 'comment_created': datetime.datetime(2021, 8, 11, 21, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687850974, 'comment_body': ""Ahh... This was changed recently when we decided to remove the search hint when the user presses `p` again. If we go by the current approach i.e. disappearing search hint, then I don't think we need this commit(?), but if we want to show the search caption when the user presses `p`, then this will be useful."", 'comment_created': datetime.datetime(2021, 8, 12, 15, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 687874476, 'comment_body': 'We can\'t assert on the reaction_count currently, because of the below lambda functions. I can instead add `case`\'es to the test in the initial `EmojiButton` commit and then assert on the reaction_count in this one, but that won\'t be ""just a"" keypress check anymore?', 'comment_created': datetime.datetime(2021, 8, 12, 16, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688126942, 'comment_body': 'I am still convinced that we dont need to show the search hint when the user presses `p`, so I\'ve dropped this commit and moved the ""initial focus in the search-box"" part to the emoji picker commit earlier.', 'comment_created': datetime.datetime(2021, 8, 12, 22, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688127270, 'comment_body': ""I've added tests for checking reaction_count as well.  Let me know if that looks complex. :)"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 689012968, 'comment_body': 'This is always true.', 'comment_created': datetime.datetime(2021, 8, 15, 1, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 689016226, 'comment_body': ""You've amended this slightly, but note how if you extract the piece I highlighted in the comment as a variable, then you can collapse the branches into one."", 'comment_created': datetime.datetime(2021, 8, 15, 2, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 689043074, 'comment_body': 'Ah...sorry for that silly mistake.', 'comment_created': datetime.datetime(2021, 8, 15, 7, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 689268927, 'comment_body': 'ADD_REACTION too?', 'comment_created': datetime.datetime(2021, 8, 16, 6, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'a7211dd90c47757f7ee59f58b5420a9d0db5646c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5096b53659b02133f5e84665c1c3072baa6c14cc', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda11d76c011d1e46864b6f814ee35b96e9bdde7', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39dc54a1d9a7407d3f8e6b01518f029c4b2054f1', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ef626c8b235a2a8dcbe0a048a9d1013720003e', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc77603a9a554877ec3b255e238d137a082cc984', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
691071977,Migrate emoji storage to group aliases together for each canonical name.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->

Migrates our emoji storage structure in `unicode_emojis.py` to a new structure where
for each `canonical_name` we keep its aliases grouped together, instead of considering
them as separate emojis.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->


**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
I need to test the reactions PR on top of this to determine the authenticity of this migration.

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->
- Blocks #913 
",True,1084,https://api.github.com/repos/zulip/zulip-terminal/pulls/1084,https://github.com/zulip/zulip-terminal/pull/1084,closed,1119,1580,9,4,2,5,3,0,"[{'name': 'size: XL'}, {'name': 'PR blocks other PR'}, {'name': 'area: refactoring'}]",2021-07-15 22:24:54+00:00,2021-07-23 07:20:54+00:00,636960.0,"7 days, 8:56:00","[{'comment_id': 671435540, 'comment_body': 'This commit needs to be earlier for the previous commit to pass linting?', 'comment_created': datetime.datetime(2021, 7, 16, 18, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 671481577, 'comment_body': ""Right, I had a bit of difficulty deciding if I should keep the first 2 commits together (they look related - the second one is the result of first?), or move this commit in between. Now, I realize that passing linting for each commit was more important and that's what my PR description indicates too. :+1:\r\n"", 'comment_created': datetime.datetime(2021, 7, 16, 19, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 674431987, 'comment_body': 'Black combination issue?', 'comment_created': datetime.datetime(2021, 7, 22, 0, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 674432860, 'comment_body': 'We update emoji when we get a realm emoji change event, so we at least want to call both in each case, or have one method that returns a tuple and updates both at the same time.', 'comment_created': datetime.datetime(2021, 7, 22, 0, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 674860393, 'comment_body': ""Yes, those were in different lines earlier but black moved them in one line and didn't combine them."", 'comment_created': datetime.datetime(2021, 7, 22, 14, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '39e073806df0b42e9f756aa6bd7516b4fe3cb0ca', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea1d853eec3997bf39625ca483e5c49aa44a507', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a6b022d541e172f9fe3126ac1387d48dbca7c5d', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aecbeb0d8c6adfb320ed3d4e72cfd6121b765bd', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
691938905,bugfix: boxes/ui: Display mouse selection_hint for entire `View`.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This commit fixes 2 bugs related to displaying selection_hint on mouse_drag
events. This migrates the mouse_event from MessageBox to the entire View
so that the selection_hint is displayed even when the user tries to perform
mouse_drag events outside of MessageBox i.e. anywhere in View.

This also fixes selection_hint getting stuck in the footer if the mouse is
dragged in the MessageView but released outside of it.

Thanks to @Rohitth007 for reporting this bug in [#zulip terminal>Drag-to-select-text](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Drag-to-select-text)

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->
",True,1085,https://api.github.com/repos/zulip/zulip-terminal/pulls/1085,https://github.com/zulip/zulip-terminal/pull/1085,closed,22,18,2,1,0,0,4,0,"[{'name': 'bug'}, {'name': 'area: UI'}, {'name': 'size: M'}, {'name': 'mouse support (low priority)'}]",2021-07-17 14:18:03+00:00,2021-07-18 00:41:04+00:00,37381.0,10:23:01,[],"[{'commit_sha': '0cd0a8d671c3e3af0dd6bf4e2d99c3bed3c8e33d', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
679449943,Platform handling improvements and WSL bugfix.,"This PR improves our platform handling by defining an isolated module `config/platform_detection.py` that contains the platform detection code and uses a single variable `PLATFORM` to hold the name of the platform that the current ZT instance is loaded on. This fixes a bug in WSL where multiple platforms were detected. Related discussion in: [#zulip-terminal>Platform handling (#T791) and WSL issues](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Platform.20handling.20.28.23T791.29.20.20and.20WSL.20issues)

Fixes #791.",True,1059,https://api.github.com/repos/zulip/zulip-terminal/pulls/1059,https://github.com/zulip/zulip-terminal/pull/1059,closed,140,120,8,4,3,0,3,0,"[{'name': 'bug'}, {'name': 'size: XL'}, {'name': 'area: refactoring'}]",2021-06-28 22:33:08+00:00,2021-07-25 23:12:42+00:00,2335174.0,"27 days, 0:39:34",[],"[{'commit_sha': 'a3d99a637d08969035f16b12c7328741f2159c0c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '249d9caf2da36889d4ab6712d824c0f0cf9441f2', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43f2fd706e43650a4c0d95b41f9e7f77d021ba6f', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '464faf64501b3a20541294129232704b0633ea1c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
690991761,refactor: views: Make mouse scroll-speed in side-panels consistent.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
 * Adds MIDDLE_COLUMN_MOUSE_SCROLL_LINES and SIDE_PANELS_MOUSE_SCROLL_LINES
   global variables in views to store the scroll values for both columns.
 * Assigns mouse scroll values of 1 and 5 to Middle column and Side panels
   respectively.
 * Uses these values in mouse_events to skip defined number of lines on
   each scroll, making scroll lines for all side-panels consistent with each
   other.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->


**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
Can we simplify the names of the global variables?


",True,1082,https://api.github.com/repos/zulip/zulip-terminal/pulls/1082,https://github.com/zulip/zulip-terminal/pull/1082,closed,31,14,2,1,1,1,2,0,"[{'name': 'area: UI'}, {'name': 'size: M'}]",2021-07-15 19:47:24+00:00,2021-07-15 21:39:52+00:00,6748.0,1:52:28,"[{'comment_id': 670796970, 'comment_body': ""These only assert the last call is called a certain way, and that overall it's a certain number of times. You likely want `has_calls`."", 'comment_created': datetime.datetime(2021, 7, 15, 20, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '28f980c51a4f620e467683636eecb288d95afc14', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
682871476,Fix bad rendering of new topics when topics list was open.,"This PR fixes the bug that made incoming new topics rendered badly when the topic list was open due to incorrect parameters being passed to `TopicButton`. This PR also migrates `TopicButton` to accept only named parameters so that there's no scope of bug and connascence between parts of the program is reduced.

The discussion regarding this bug can be found in [#zulip-terminal>New-topic topic-list bug](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/New-topic.20topic-list.20bug/)",True,1062,https://api.github.com/repos/zulip/zulip-terminal/pulls/1062,https://github.com/zulip/zulip-terminal/pull/1062,closed,51,30,6,9,3,0,5,0,"[{'name': 'bug'}, {'name': 'area: UI'}, {'name': 'size: L'}, {'name': 'PR ready to be merged'}, {'name': 'area: refactoring'}]",2021-07-02 20:40:05+00:00,2021-07-28 23:53:20+00:00,2257995.0,"26 days, 3:13:15",[],"[{'commit_sha': '4bf6961b9d0e47baff546fe3d36fb37d1c82ba76', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0217f8e5616d16539799241e9e5dc41dcbfbfaa7', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0f7f6fea057918c8153e9b97eaa57a3bfd6d9b', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '868f53446335f12ebbd617a056f49469e2cee9eb', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a9b299c1dbc84f715b119cd1f81d25cbaaac8c0', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a5fe4812bb19f92210019a6ee3aad53b7378b9', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7085db4d3eb6062abbd97ca63c337d51144be0d0', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcecd2be47e8d4259c1d91e8a13dd73c6f385322', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f3c82cbf36a3d9edd1985e423f79a19e6ff8371', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
671905293,Remove unsupported `recipient_id` and `(sender)_short_name` fields.,"This PR removes the deprecated `recipient_id` field from the entire
codebase and adds a comment in the api_types to indicate that the field
is no longer used/needed. The server recommends clients to use the
display_recipients field to get info about the list of recipient(s).

The `short_name`  and `sender_short_name` fields are also completely
removed from the codebase after the server repo removed those from
server version 3.1; ZFL 26+.

Tests amended.",True,1053,https://api.github.com/repos/zulip/zulip-terminal/pulls/1053,https://github.com/zulip/zulip-terminal/pull/1053,closed,6,24,4,3,2,2,4,0,"[{'name': 'size: M'}, {'name': 'area: refactoring'}, {'name': 'api migrations'}, {'name': 'area: API spec'}]",2021-06-16 21:09:36+00:00,2021-06-17 22:02:21+00:00,89565.0,"1 day, 0:52:45","[{'comment_id': 653112997, 'comment_body': ""I think it would be reasonable to move this to the bottom of the class into an unsupported/unused section of comments, with details on the status of each (ie. when they were removed/unused/deprecated/etc).\r\n\r\nAs you note, `recipient_id` is only deprecated and not removed, at least for now.\r\n\r\nHowever, `sender_short_name` was removed in Zulip 3.1 (check the api changelog) - and we haven't used it or similar short names - so it would be good to do other tidying along these lines too."", 'comment_created': datetime.datetime(2021, 6, 16, 23, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 653115965, 'comment_body': 'This was removed at the same time as other short names, but since we have no typeddict for it then nothing is being removed from the api_types. We could definitely improve the typing of `display_recipient` in this way, maybe first to define what we have, though not necessarily.', 'comment_created': datetime.datetime(2021, 6, 16, 23, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '08751ac7dd7dea8b66cf73811c595580521f8343', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87aea41e742e09f511670844fa1b4d3ff85eaf3', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf4883329cdbd42cf2ec471ee2d3abd888058fba', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
652517910,bugfix: Fix wildcard_mentions not showing in mentions narrow.,"The server defines several wildcard_mentions like @all/@everyone/@stream, which are not marked with 'mentions' in the message flags, rather 'wildcard_mentions'. This bugfix PR now checks for this flag in the message response from the server and appropriately categorizes these messages as mentioned and also updates the count in the respective narrows.

Fixes #1037 ",False,1038,https://api.github.com/repos/zulip/zulip-terminal/pulls/1038,https://github.com/zulip/zulip-terminal/pull/1038,closed,196,11,3,2,6,16,3,0,"[{'name': 'bug'}, {'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-05-25 15:53:19+00:00,2021-07-05 23:13:08+00:00,3568789.0,"41 days, 7:19:49","[{'comment_id': 640006681, 'comment_body': ""I'm merging a commit to master which will extend the line-length to 88 (ie. black's default), so likely your lines should simplify :)\r\n\r\nIt's not too bad with only two, but we could also consider a `set` approach here to avoid the duplication, like we've done recently in `soup2markup`."", 'comment_created': datetime.datetime(2021, 5, 26, 18, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 640006748, 'comment_body': 'With extra line-length available and the way `black` reformats these lines (indented on the follow line), we should generally have plenty of space available and not need a list for the params compared to just a single string.', 'comment_created': datetime.datetime(2021, 5, 26, 18, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 640061647, 'comment_body': ""Ahh...The `set` approach seems better. I'll use that. :+1:"", 'comment_created': datetime.datetime(2021, 5, 26, 19, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 643542537, 'comment_body': ""I'm not sure of my original advice here, but we likely don't want plural names here - a variable can only taken one value of these."", 'comment_created': datetime.datetime(2021, 6, 1, 23, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 643545841, 'comment_body': ""Let's avoid repeating the same names here. Check the `Literal` docs/PEP for details, but you can essentially extend the set of valid values by combining two Literals. We could have a specific name for the other type, or simply extend the modifiable one for now."", 'comment_created': datetime.datetime(2021, 6, 1, 23, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644508506, 'comment_body': ""We've lost some test examples here of just mentions; that may not be critical, but even if we just add these mixed cases then adding inline test ids would be helpful to describe what situation each is covering without looking at the values. You may see when reading those ids that you're missing some combinations that might be interesting, such as only-wildcard."", 'comment_created': datetime.datetime(2021, 6, 3, 6, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644509566, 'comment_body': ""I'm unsure if we should use the same set intersection here, but it perhaps points towards using that internally for simplicity (and slight optimization) via a refactor."", 'comment_created': datetime.datetime(2021, 6, 3, 6, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644510039, 'comment_body': 'If this is similar to the other mention/wildcard combination fixture, then we could consider extracting this as a fixture to be used in both places.', 'comment_created': datetime.datetime(2021, 6, 3, 6, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644512699, 'comment_body': ""These extra cases in this commit are good examples, but are giving quite random coverage that I'm not sure helps dramatically. Think of what the other cases cover."", 'comment_created': datetime.datetime(2021, 6, 3, 6, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644513570, 'comment_body': 'I know I simplified a lot of these into single strings; we can discuss the preferred style of whether to break into a multi-line implicitly-combined string like this or a list of strings, but at minimum I would expect a comma to belong with the preceding text?', 'comment_created': datetime.datetime(2021, 6, 3, 6, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645166226, 'comment_body': 'Personally, I would prefer the multiline string approach since that saves a lot of lines compared to the list approach, where each parameter would be shifted to a new line (for compliance with `black`) hence increasing the diff. But, the list approach is a bit more comprehensible than the string version?\r\n\r\nI am going with the multiline string approach here, for now, and maybe we could shift this particular discussion to the stream for a more collective decision?', 'comment_created': datetime.datetime(2021, 6, 3, 22, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 645209326, 'comment_body': ""I'm not sure if you're done with the current iteration and wanting another review yet, but this is still plural (plus commit text)."", 'comment_created': datetime.datetime(2021, 6, 4, 0, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645343357, 'comment_body': 'I am not sure of the ideal place to refactor this, so I am creating an initial commit that extracts this as a fixture and the subsequent commits will just use this wherever needed?\r\n\r\nAnd then, maybe we could squash the 3rd `test_model` commit with the previous bugfix too?', 'comment_created': datetime.datetime(2021, 6, 4, 7, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 645578262, 'comment_body': ""I'm not sure if the current iteration of my PR addresses this review, but I tried to cover a few other cases that the previous tests were missing. Let me know if these new cases are still not what you were expecting. :)"", 'comment_created': datetime.datetime(2021, 6, 4, 13, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 647983340, 'comment_body': ""It'd be clearer to sweep all of these in the first pass as a direct refactor wherever these are used, then you can expand it after that. As it is it makes it more difficult to compare this removed text with that removed/swapped in the previous commit. Refactoring first and then switching the fixture second should make this clearer."", 'comment_created': datetime.datetime(2021, 6, 9, 5, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 647985563, 'comment_body': ""It's a bit of an edge case, but this could go in the next commit."", 'comment_created': datetime.datetime(2021, 6, 9, 5, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '7714f449787fbdbf5ab3efb8ebeeb30b9ae9a74b', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f75075afa712545514db991b9b0591d09ed07845', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
614729942,bugfix: Restrict content-length for compose box.,"This PR restricts input beyond certain max-limit for compose
box, as specified by the corresponding parameters in initial_data's
realm object. ZT didn't had this restriction earlier which resulted
in certain long topic names/messages getting cropped from the end
without the user noticing, until the message was sent.
These parameters were recently added in ZFL 53 in [`4a3ad0d`](https://github.com/zulip/zulip/commit/4a3ad0da06b3e8db511e9690b31507b565f7f2fc), so we allow for
backporting by defining hard-coded values for these parameters.

The content restriction of compose boxes was made possible only
after urwid-readline merged a patch in v0.13, which added support
for specifying a `max_char` argument to their `ReadlineEdit` widget.
Related patch: https://github.com/rr-/urwid_readline/pull/18.
",True,996,https://api.github.com/repos/zulip/zulip-terminal/pulls/996,https://github.com/zulip/zulip-terminal/pull/996,closed,75,6,5,2,2,11,3,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'size: L'}]",2021-04-13 20:08:32+00:00,2021-04-26 07:12:44+00:00,1076652.0,"12 days, 11:04:12","[{'comment_id': 613728176, 'comment_body': 'This would benefit from testing over various ZFL.', 'comment_created': datetime.datetime(2021, 4, 15, 3, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 617134131, 'comment_body': 'We can import these directly from model.py.', 'comment_created': datetime.datetime(2021, 4, 21, 1, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 617135594, 'comment_body': 'This looks good, but we want to ensure that these are not the same as the defaults, to ensure that we process the values correctly - so maybe values relative to the old defaults?', 'comment_created': datetime.datetime(2021, 4, 21, 1, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 617137265, 'comment_body': ""A value between is good - I see that this is for 3.1, though I wouldn't know from reading the code.\r\n\r\nOf course here we're defining the input *plus* the feature level. Like you said elsewhere, we could even skip the feature level since we don't rely on it right now - though it's useful to include for documentation? If we do include an extra feature level I'd also/instead suggest the level just before the change."", 'comment_created': datetime.datetime(2021, 4, 21, 1, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 617137736, 'comment_body': ""This is cleaner, though I'm often torn between seeing the higher level details and explicit setting of attributes in `__init__`."", 'comment_created': datetime.datetime(2021, 4, 21, 1, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 617138640, 'comment_body': 'This typo (?) concerns me - do we even need these values?', 'comment_created': datetime.datetime(2021, 4, 21, 1, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 619662271, 'comment_body': ""These are necessary for the tests to pass since the `ReadlineEdit` gets these values from model, and if we don't define this ourselves, `Mock` will be used in their place."", 'comment_created': datetime.datetime(2021, 4, 24, 13, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 619663473, 'comment_body': 'I initially tried to keep the fixtures matching with the server versions that I have tested locally. :)\r\n\r\nRe skipping feature level, I think we should keep that since it indicates that these fields are actually dependent on the server version, and adding a feature level just before the change would also indicate precisely when these fields were added in the server.', 'comment_created': datetime.datetime(2021, 4, 24, 14, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 619728818, 'comment_body': 'I meant specifically the last line - which seems like a typo in that you have no `model` in there. Do mock values just work anyhow?', 'comment_created': datetime.datetime(2021, 4, 25, 0, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 619789602, 'comment_body': 'Ahh...Right, my bad I missed that.\r\n\r\nI just tested with mock values for all, and it fails as expected, for the above two but not for the `max_message_length` field. On looking at the test summary, it appears to fail because the above fields pass an `edit_text` parameter to the `ReadlineEdit`, but the `msg_write_box` does not. And, passing this parameter leads to the below condition in `urwid_readline/readline_edit.py` being positive, and `max_char` being of type `Mock`, can\'t be used as an index in slicing:\r\n```python3\r\nif max_char and ""edit_text"" in kwargs:\r\n    kwargs[""edit_text""] = kwargs[""edit_text""][:max_char]\r\n```\r\nSo, `Mock` values should work here if we don\'t specify `edit_text` parameter to ReadlineEdit initially. I have updated the PR fixing the above typo.', 'comment_created': datetime.datetime(2021, 4, 25, 10, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 620028342, 'comment_body': 'This kind of branching suggests we could try hoisting values into the parametrizations, but this is fine.', 'comment_created': datetime.datetime(2021, 4, 26, 7, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'a8a59ebfee70cc89acc4ebeac6b21c3a02ec3aa1', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01b47f718de898aa573161f499208b8ab33baa15', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
611648236,Add support for limit_chars argument for ReadlineEdit.,"There may be several use-cases, where you want to restrict the user input into a `ReadlineEdit` widget to not go beyond a particular limit, this PR makes it possible for clients to specify a `max_char` argument when initializing a `ReadlineEdit` widget so that the user can't input text beyond that limit.
In particular `zulip-terminal` has such a use-case, where it needs `ReadlineEdit` widgets for stream and topic to only accept input up to 60 characters.

**Relevant discussion**:
- [general/restricted topic length](https://chat.zulip.org/#narrow/stream/2-general/topic/restricted.20topic.20length)
- [zulip terminal/restrict topic name length](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/restrict.20topic.20name.20length)",True,18,https://api.github.com/repos/rr-/urwid_readline/pulls/18,https://github.com/rr-/urwid_readline/pull/18,closed,39,4,2,1,4,0,0,0,[],2021-04-08 15:17:04+00:00,2021-04-08 17:16:31+00:00,7167.0,1:59:27,[],"[{'commit_sha': 'b9fd8fa1466b93a43a944def5b29c59ee8df609d', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
612577050,Add support for opening message  in browser.,"Thanks to @punchagan and @preetmishra for their major initial work in #397 and #698 respectively. :+1:

This PR extracts some initial commits from both PR's and cleans and refactors them. It also adds support for opening external links in the browser from the `MessageLinkButton`. All the reviews on the previous PR's have also been addressed, facilitating further reviews.

Fixes last point of #452.",True,991,https://api.github.com/repos/zulip/zulip-terminal/pulls/991,https://github.com/zulip/zulip-terminal/pull/991,closed,118,4,7,3,5,43,2,0,"[{'name': 'enhancement'}, {'name': 'size: XL'}]",2021-04-09 16:16:53+00:00,2021-06-11 00:44:09+00:00,5387236.0,"62 days, 8:27:16","[{'comment_id': 611070283, 'comment_body': ""What's the requirement for this particular statement? We're not using the controller being returned."", 'comment_created': datetime.datetime(2021, 4, 10, 17, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611070929, 'comment_body': 'Just curious about whether you were able to raise any exception manually to test.', 'comment_created': datetime.datetime(2021, 4, 10, 17, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611071124, 'comment_body': ""Their system would have a GUI but the ZT host won't, right?"", 'comment_created': datetime.datetime(2021, 4, 10, 17, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611071669, 'comment_body': 'This is rather _keys_?', 'comment_created': datetime.datetime(2021, 4, 10, 17, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611071840, 'comment_body': ""Also, let's specify the error context, i.e., the error came while opening the message."", 'comment_created': datetime.datetime(2021, 4, 10, 17, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611072196, 'comment_body': ""Re the commit title, this doesn't always open a message in _topic_ narrow (e.g. it enables PMs/huddles as well)."", 'comment_created': datetime.datetime(2021, 4, 10, 17, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611072476, 'comment_body': ""Echoing Neil's comment from the last PR, how do you feel about `urljoin`?"", 'comment_created': datetime.datetime(2021, 4, 10, 17, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 611080222, 'comment_body': ""This statement is particularly used only for Error handling, in case no browser is found in the system.\r\nYes, we don't have any use for the returned controller, but if the module could not find any browser(GUI/text-based) then this statement will throw a `webbrowser.Error` and we can use the `try-except` block to catch it and display an appropriate error message. The link in my below comment should provide further clarity. :)"", 'comment_created': datetime.datetime(2021, 4, 10, 18, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 611080543, 'comment_body': ""Yes, I was able to successfully reproduce this error on my AWS EC2 instance over `ssh`.\r\nThe error message is already very specific, so I don't think context would be necessary?\r\nSee [here](https://stackoverflow.com/questions/39371219/python-webbrowser-check-if-browser-is-available-nothing-happens-when-opening) for the type of error message thrown and how to reproduce it."", 'comment_created': datetime.datetime(2021, 4, 10, 18, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 611082623, 'comment_body': 'There is only one key for `view_in_browser` i.e. `v`, right?\r\nIs there any particular reason to specify plural?', 'comment_created': datetime.datetime(2021, 4, 10, 19, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 611082927, 'comment_body': ""I am sorry, but I don't understand this.\r\nAren't ***their system*** and ***ZT host*** the same?"", 'comment_created': datetime.datetime(2021, 4, 10, 19, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 611095690, 'comment_body': 'I am not too sure what the *pre-existing* code was there, but I am guessing it was something similar to our `server_url.py`?\r\nWe could use `urljoin`, but that will require completely refactoring our `server_url` code, and I am skeptical since the server uses the same approach as we have currently.', 'comment_created': datetime.datetime(2021, 4, 10, 21, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 614318646, 'comment_body': ""Note that we're join-ing an array. While we do only have one key right now, the list might expand later."", 'comment_created': datetime.datetime(2021, 4, 15, 18, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614320197, 'comment_body': 'Right. @neiljp Any thoughts on this?', 'comment_created': datetime.datetime(2021, 4, 15, 19, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614322535, 'comment_body': 'For instance, the ZT host could be an AWS EC2 or a droplet and your laptop could be the system (with a GUI). What would happen in this case?', 'comment_created': datetime.datetime(2021, 4, 15, 19, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614324549, 'comment_body': 'Thanks for the explanation. Agreed; the error message seems to capture the context itself.', 'comment_created': datetime.datetime(2021, 4, 15, 19, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614324621, 'comment_body': 'So, replacing *your system* with *ZT host* in the above footer text?', 'comment_created': datetime.datetime(2021, 4, 15, 19, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 614325126, 'comment_body': 'Makes sense!', 'comment_created': datetime.datetime(2021, 4, 15, 19, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 614326021, 'comment_body': 'Yeah, that seems reasonable.', 'comment_created': datetime.datetime(2021, 4, 15, 19, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 644984447, 'comment_body': ""The webbrowser module supports text browsers, which can sometimes render well - though I've no idea how well they'd work for the webapp. Other sites may vary, of course. We could reconsider that now or add a TODO."", 'comment_created': datetime.datetime(2021, 6, 3, 17, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644987608, 'comment_body': 'If we do that, I\'d expect a comment, since Preet had to ask :) Alternatively, we can just use an intermediate variable. I\'m not sure if that information allows giving more detail to what was done with the link if we showed a success message in the footer, ie. what the returned ""controller"" is attached to.', 'comment_created': datetime.datetime(2021, 6, 3, 17, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644988242, 'comment_body': 'Do we want this to be `.open_new_tab`?\r\n\r\nWe could add a ""success""-related message in the footer, since some browsers may be elsewhere in the UI and the focus not automatically changed.', 'comment_created': datetime.datetime(2021, 6, 3, 17, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 644995579, 'comment_body': 'Why do we need `repr` here?', 'comment_created': datetime.datetime(2021, 6, 3, 17, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645007642, 'comment_body': 'We want another test when this fails?', 'comment_created': datetime.datetime(2021, 6, 3, 17, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645011029, 'comment_body': ""By default patching applies a working mock.\r\n\r\nIf we leave the code as it is then you don't use `mock_get`?\r\n\r\nYou've updated this in a later commit though, when you can just do it here :)"", 'comment_created': datetime.datetime(2021, 6, 3, 17, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645013062, 'comment_body': ""You don't need parentheses if this is on one line."", 'comment_created': datetime.datetime(2021, 6, 3, 17, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645015785, 'comment_body': ""If this is necessary to avoid screen corruption, I'd suggest we add the output-suppressing commit first."", 'comment_created': datetime.datetime(2021, 6, 3, 17, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645018675, 'comment_body': ""These lines look better than the original, but there's no reason to change the names and move them around - the commit diff is bigger and less clear because of it."", 'comment_created': datetime.datetime(2021, 6, 3, 18, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645020429, 'comment_body': ""Re-reading this PR now I see that we've got `server_url.py` providing this functionality, which as @zee-bit says is from the server code :+1:"", 'comment_created': datetime.datetime(2021, 6, 3, 18, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645024512, 'comment_body': ""I'd suggest adding the functionality first, then hooking it up in a separate commit, which here could combine the small first commit with the UI which uses it.\r\n(new popups tend to have a more complex structure since a new view often requires the key first)"", 'comment_created': datetime.datetime(2021, 6, 3, 18, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645975543, 'comment_body': 'I would like to explore more on how different text-browsers work for different sites and our webapp, so I am leaving this as a TODO for now. :)', 'comment_created': datetime.datetime(2021, 6, 5, 10, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 645979597, 'comment_body': ""Yes, `open_new_tab` sounds better. Although I do wonder what's the difference between `.open(new=0)`(default) and `new=2`(same as new_tab), they both seem to behave exactly the same to me. If both do come out to be the same then we don't need to change the above, right?\r\n\r\nAnyways, added a success message as asked. :)"", 'comment_created': datetime.datetime(2021, 6, 5, 11, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 645999883, 'comment_body': ""`repr` gives a printable string representation here. So, if the key is `'v'`, the same will be printed (with quotes).\r\nI think that's how we do in other such places throughout our codebase?\r\nOr, am I misunderstanding your question?"", 'comment_created': datetime.datetime(2021, 6, 5, 14, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 646743441, 'comment_body': ""Well, I tried `lynx` on a remote server, and though some simple website were rendered OK, I couldn't get it to work for our webapp properly. As in, it loads the CZO website, and I can even log-in but it can't fetch any messages. I am just left with the top-left panel items(all messages, private, starred...) aligned haphazardly and a few other options such as log-out and server name..."", 'comment_created': datetime.datetime(2021, 6, 7, 16, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 648793946, 'comment_body': ""This shows a message for me, but indicates it has been opened `...in xdg-open`. What do you see locally? I'm not sure if we can improve this? Maybe `...using xdg-open` would be OK, but it's a bit cryptic for a lot of users I suspect. If we can't grab an actual browser name then perhaps we should avoid mentioning the process?"", 'comment_created': datetime.datetime(2021, 6, 10, 1, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648794579, 'comment_body': 'In a general sense other links may work OK, so in the longer term we might move this block into the ""open in webapp"" block instead.', 'comment_created': datetime.datetime(2021, 6, 10, 1, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648796739, 'comment_body': ""This is the second call of the tested method in this test function, which generally we try to avoid now. I'd suggest a parametrize or a separate test.\r\n\r\nOn the other side, I'm not sure if we need to parametrize over the url?"", 'comment_created': datetime.datetime(2021, 6, 10, 2, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 649091207, 'comment_body': ""Hmm...That's odd.\r\nLocally I got `...google-chrome`, and on the remote server running `lynx`, I got `...generic-browser`(which is still a bit unclear). I am aware that webbrowser module uses `xdg-open` under the hood in Linux, but it shouldn't be returning that as the name?\r\n\r\nAny chance you're on Python v<=3.6, I found a few StackOverflow answers which suggest that it's a Python issue, which was fixed on 3.7+?"", 'comment_created': datetime.datetime(2021, 6, 10, 11, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 649092155, 'comment_body': ""In any case, if we can't grab the actual name widely and consistently it's better to output a general message like:\r\n`The link was successfully opened in the default browser.`?"", 'comment_created': datetime.datetime(2021, 6, 10, 11, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 649134652, 'comment_body': ""I appear to have 3.7.3 here. As I said above, perhaps let's simply switch to `using` in place of `in` in the text, which reads slightly better for both `using chrome` and `using xdg-open`?"", 'comment_created': datetime.datetime(2021, 6, 10, 12, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 649135090, 'comment_body': '(just to keep things simple for now)', 'comment_created': datetime.datetime(2021, 6, 10, 12, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 649149835, 'comment_body': ""No, we don't need to parametrize over URL. Thanks. :+1:"", 'comment_created': datetime.datetime(2021, 6, 10, 12, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 649151730, 'comment_body': ""Sure, I'll use `using`.\r\nI just refreshed this page so didn't saw your comment earlier. :)"", 'comment_created': datetime.datetime(2021, 6, 10, 12, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': 'aef5b9b3f3534d04971cac690d109171f9a300d9', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9799d23c2c2797f5515d90b5cc334dd1f48b29', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a7fcef74d47f0aad24ae1932e077c9b7e6ec69', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
289997066,keys: Add a key to view a message in the browser.,,False,397,https://api.github.com/repos/zulip/zulip-terminal/pulls/397,https://github.com/zulip/zulip-terminal/pull/397,closed,53,2,6,1,11,5,2,0,"[{'name': 'size: L'}, {'name': 'has conflicts'}]",2019-06-20 06:47:38+00:00,2021-06-11 00:51:13+00:00,62359415.0,"721 days, 18:03:35","[{'comment_id': 296489075, 'comment_body': 'Do we need `mocker.Mock()` in here?', 'comment_created': datetime.datetime(2019, 6, 23, 16, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 296489167, 'comment_body': ""Are you trying to do `mock_open.assert_called_once_with('https://foo.zulipchat.com...)` ?\r\n(would that cover the last 4 lines?)"", 'comment_created': datetime.datetime(2019, 6, 23, 16, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 296489294, 'comment_body': '`Iterator[None]`?', 'comment_created': datetime.datetime(2019, 6, 23, 16, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 296489399, 'comment_body': ""Nice find :)\r\n\r\nI think this is great for now, my only concern is cases where perhaps systems are not set up quite right and people wonder why a browser isn't being run, or there's some other kind of error, but it's masked since no output is seen or logged anywhere. This could be a minor follow-up issue?"", 'comment_created': datetime.datetime(2019, 6, 23, 16, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 296489674, 'comment_body': 'minor: these *could* be test function parameters?', 'comment_created': datetime.datetime(2019, 6, 23, 16, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '9e3334ce49e7c1daed22f87160b113083f2abdd1', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}]",Puneeth Chaganti,315678,punchagan@muse-amuse.in,User,,175,,487,325
437253134,[WIP] Add support for viewing a message in the web browser,"Thanks to @punchagan for the initial work in #397. :+1: 

Unlike the original PR, which narrowed every message to All Messages in the web app, this opens a message in `stream/topic/near` if it belongs to a stream or `pm-with/near` narrow if it belongs to a PM/huddle (see [discussion](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/View.20message.20in.20browser/near/908851)).

The original commit has been split to facilitate reviews. Moreover, the test has been improved based on @neiljp's feedback on the original PR.

The logic for generating near message URLs has been borrowed from Zulip's [`zerver/lib/url_encoding.py`](https://github.com/zulip/zulip/blob/master/zerver/lib/url_encoding.py).

Partially fixes #452.",False,698,https://api.github.com/repos/zulip/zulip-terminal/pulls/698,https://github.com/zulip/zulip-terminal/pull/698,closed,77,5,8,6,11,7,4,0,"[{'name': 'enhancement'}, {'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'PR blocks other PR'}]",2020-06-19 18:59:09+00:00,2021-06-11 01:07:53+00:00,30780524.0,"356 days, 6:08:44","[{'comment_id': 467599381, 'comment_body': 'This can raise an exception?', 'comment_created': datetime.datetime(2020, 8, 9, 15, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467599432, 'comment_body': 'If this fails (exception, unsupported environment, etc), could we let the user know?', 'comment_created': datetime.datetime(2020, 8, 9, 15, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467599851, 'comment_body': ""Our platform code relies on only one of the platforms being set; we definitely want to improve that handling (see #791), but we should probably be able to rely on the 'other' option being set for now, ie `LINUX`.\r\n\r\nIn the more general sense, the webbrowser module can run terminal browsers, so it would be interesting to see how DISPLAY-less systems handle that. Another aspect is whether graphical non-X11 systems set DISPLAY meaningfully?\r\n\r\nDid you mean to capitalize the commit title?"", 'comment_created': datetime.datetime(2020, 8, 9, 15, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 480314886, 'comment_body': ""Let's use a different file for these, since we could combine these with the URL deconstruction too and/or put them into the API repo like that other method in future?"", 'comment_created': datetime.datetime(2020, 8, 31, 18, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 480322782, 'comment_body': ""It's good to use the pre-existing code here, though using `urljoin` in the new code would mean we don't need to worry about this. I'm guessing the server code avoids this since it knows the url exactly and relies on tests, which we should too really :)"", 'comment_created': datetime.datetime(2020, 8, 31, 18, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 480323042, 'comment_body': 'Why do we need the `self`?', 'comment_created': datetime.datetime(2020, 8, 31, 18, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 480323349, 'comment_body': 'This change breaks the other use of this method - but no tests break?', 'comment_created': datetime.datetime(2020, 8, 31, 18, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '621c1e6e076be7d988c6eab5e5604287cb3f9285', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2201e67c08eadee4a431d91c98d1215c08601f55', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b080fafcbd346cff443746aa5c58d7f99c87780', 'committer_username': 'punchagan', 'committer_name': 'Puneeth Chaganti', 'committer_email': 'punchagan@muse-amuse.in', 'commit_date': datetime.datetime(2010, 6, 27, 11, 37, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa82f8a5cd7dbb4a89889602143e1826a96f7ac7', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c0c9fcb9194400f98d967c85ab91671b0a4763c', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '584c94e59f277b17b354219b1acfa40c5b9a9a49', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,66
591647644,boxes: Add support for renaming (no topic) messages.,"This PR adds support for renaming messages that had no topic, by anyone as long as `realm_allow_message_editing` is `True` for the organization. This is the behavior that is followed by webapp for message editing events.

Fixes #837.",True,946,https://api.github.com/repos/zulip/zulip-terminal/pulls/946,https://github.com/zulip/zulip-terminal/pull/946,closed,174,42,2,5,5,33,3,0,"[{'name': 'size: XL'}, {'name': 'area: message editing'}, {'name': 'missing feature: user'}]",2021-03-12 12:41:50+00:00,2021-08-12 07:01:39+00:00,13198789.0,"152 days, 18:19:49","[{'comment_id': 602992291, 'comment_body': 'It would be clearer in diffs if we put this part of code also inside the conditional check?', 'comment_created': datetime.datetime(2021, 3, 29, 3, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 603008319, 'comment_body': ""minor: Let's keep this in the end to provide more clarity."", 'comment_created': datetime.datetime(2021, 3, 29, 4, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 633017778, 'comment_body': 'This reformatting is quite line-heavy; these dicts will all still fit each on one line?', 'comment_created': datetime.datetime(2021, 5, 15, 23, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633018733, 'comment_body': ""These texts aren't tested, and if one doesn't read carefully, might be changed in this commit. A preliminary refactor which adds these texts to the test too may make the test clearer too, and then with the new output it can be expanded to cover those cases."", 'comment_created': datetime.datetime(2021, 5, 15, 23, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633019504, 'comment_body': ""It seems strange that this text isn't updated given the change of condition."", 'comment_created': datetime.datetime(2021, 5, 15, 23, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 633022135, 'comment_body': 'Is this what we expect in PMs, or is the key absent?', 'comment_created': datetime.datetime(2021, 5, 16, 0, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 634766853, 'comment_body': 'The API docs do say that we should expect an empty string here. Quote:\r\n> subject: string The topic of the message. Currently always """" for private messages, though this could change if Zulip adds support for topics in private message conversations.\r\n\r\nI also did a manual test just to be extra sure. :)', 'comment_created': datetime.datetime(2021, 5, 18, 21, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 663512891, 'comment_body': 'This should be the accurate definition of ""(no topic)"" messages i.e. empty topic. But, I am a bit hesitant to print this in the footer (the user might not know how we represent empty topics?).\r\nI also had `You can\'t edit messages sent by other users which do not have ""(no topic)""`.\r\nIs there a more better way to report this?', 'comment_created': datetime.datetime(2021, 7, 4, 14, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 663515475, 'comment_body': 'After a short discussion with @prah23 via PM\'s we\'ve decided to go with ""You can\'t edit messages sent by other users that already have a topic."", because if we err towards being more specific then we might just confuse the user and bloat the footer with a very long message.', 'comment_created': datetime.datetime(2021, 7, 4, 14, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 664033934, 'comment_body': 'Why this reordering? It complicates the diff. I could understand maybe improving the id now that it\'s more complex though - ""all conditions"" doesn\'t seem comparable to the other descriptions.', 'comment_created': datetime.datetime(2021, 7, 5, 16, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664192466, 'comment_body': 'With more parametrize fields and the next commit adding more cases, it seems good to inline the ids first before the current 2nd commit.', 'comment_created': datetime.datetime(2021, 7, 6, 2, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664656992, 'comment_body': ""This isn't related to this feature, but the test (at first glance!) says editing should succeed here, yet in manual testing (and per the warnings/errors you added) editing (partially) succeeds with streams and fails with PMs!\r\n\r\nOf course, this is related to the private-message conditional in the test. Now that you testing stream/private-dependent pairs, what do you think about expanding those pairs in an earlier commit to include the 'success/failure' before building on that to include the strings? That would perhaps simplify the conditionals you add too?\r\n\r\nBTW I think it would be fine to have the inlining of the ids in a separate commit too, as I did in the black prep work."", 'comment_created': datetime.datetime(2021, 7, 6, 15, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664672094, 'comment_body': ""Another tidying of this test would be to move & possibly rename this parameter - it's an expected result, not an input."", 'comment_created': datetime.datetime(2021, 7, 6, 15, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664688093, 'comment_body': 'We mentioned this in the test, but might be worth noting here that a private subject is """"?\r\nThat said, can you move the subject check into the stream conditional? That seems cleaner.', 'comment_created': datetime.datetime(2021, 7, 6, 16, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664694065, 'comment_body': 'I think this will be easier to reason about if you move the first conditional around as I indicate above.', 'comment_created': datetime.datetime(2021, 7, 6, 16, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664697401, 'comment_body': ""I'm inclined to think that we should indicate why it's allowed - this is someone else's message but with no-topic?"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664699938, 'comment_body': ""You're not testing this - is it already covered?"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664939989, 'comment_body': '~~I think we can remove this whole block from here?\r\nThey should already be handled fine with the below stream conditionals.~~', 'comment_created': datetime.datetime(2021, 7, 6, 23, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 664940951, 'comment_body': 'Actually, because of the equivalent conditional at the top, this case was already handled by that and returned so we never reach here.\r\n~~Removing the top block as I suggested in one of the above comments should make this feasible.~~', 'comment_created': datetime.datetime(2021, 7, 6, 23, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 664944673, 'comment_body': ""> This isn't related to this feature, but the test (at first glance!) says editing should succeed here, yet in manual testing (and per the warnings/errors you added) editing (partially) succeeds with streams and fails with PMs!\r\n\r\nThis seems to be also true for `msg_body_edit_enabled`?\r\nAnyways, I've expanded both to contain values for both types of messages (stream/private)."", 'comment_created': datetime.datetime(2021, 7, 6, 23, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 665399404, 'comment_body': 'We can\'t remove this block. It handles the ""always allow message content edit"" case - almost forgot about that earlier. :sweat_smile: \r\n\r\nI don\'t think we can move the subject check into the stream conditional below too. We don\'t enter the next block since `realm_message_content_edit_limit_seconds` will be `0` for ""always"" message-edit, so we need to handle that case outside either in the beginning or end.', 'comment_created': datetime.datetime(2021, 7, 7, 13, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 665407745, 'comment_body': 'I have amended the equivalent error message at the top to print the same thing as here.', 'comment_created': datetime.datetime(2021, 7, 7, 14, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678751353, 'comment_body': 'I know that these are often the same, but it seems cleaner to have these as a dict too?', 'comment_created': datetime.datetime(2021, 7, 29, 1, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678753037, 'comment_body': 'There\'s quite a bit of repetition here, and it\'s not clear if the missing else clause is meaningful. Particularly with the dict approach I suggest, can you select the ""report function"" and then assert on it based on the type?', 'comment_created': datetime.datetime(2021, 7, 29, 1, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678757101, 'comment_body': 'If this block is not actually used, it is better to indicate it with a comment as to the condition and in this case where else it should be covered. Then you can also include an assertion or probably better raise a RuntimeError since it indicates an error in the application!', 'comment_created': datetime.datetime(2021, 7, 29, 1, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678760514, 'comment_body': ""I think `expect_*` is a sufficient prefix, though it's fairly minor and down to the phrasing!\r\n\r\nThis commit title has a typo."", 'comment_created': datetime.datetime(2021, 7, 29, 1, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678761533, 'comment_body': 'This is definitely a lot more readable :+1:\r\nThe test is still long, but removing that conditional makes this clearer :)', 'comment_created': datetime.datetime(2021, 7, 29, 1, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678765322, 'comment_body': ""So this is about the `return key` location?\r\n\r\nThis does seem to work fine as it is, it's just not quite as clear as I'd prefer."", 'comment_created': datetime.datetime(2021, 7, 29, 1, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678765928, 'comment_body': ""I'm inclined to have the subjects all the same, for contrast with the special case?"", 'comment_created': datetime.datetime(2021, 7, 29, 1, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 678766379, 'comment_body': 'These ids are definitely an improvement :+1: We can always do another pass later for consistency - maybe with community editing!', 'comment_created': datetime.datetime(2021, 7, 29, 1, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 680577526, 'comment_body': 'For each dict there could be different `report_*` functions for different message types. e.g. A stream message might allow editing just the message topic (so `report_warning`) whereas under the same conditions a private message may not allow editing at all (`report_error`). I think that will make the test even more complex if I understand your statement correctly?', 'comment_created': datetime.datetime(2021, 8, 1, 22, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 687332925, 'comment_body': 'This has changed from True->False. This exposes the logic of the test, and suggests we might consider a different value for this case, such as `None`?', 'comment_created': datetime.datetime(2021, 8, 12, 3, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687400472, 'comment_body': 'This seems to be resolved with the change to a dict for the footer_text?', 'comment_created': datetime.datetime(2021, 8, 12, 5, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'ac5d366fd6ecebe2ebaa4a82f02cf5325e44a64c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff950090b811fec327d3d9fcefc297346732497c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bda5f148d5f5bc3ecd9a24f6888b9004ea6bdc3', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f2057924b4815b1d0c8c3ec97e3b38a83bab683', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4150981fe504e8db1fa37a1c00ab9015dd8ee1d4', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
569058768,feature: Add Reactions to messages.,"This PR packs a critical feature, that supports adding general reactions to messages. Few highlights of this feature:
- A new `EmojiPicker` popup that activates from <kbd>:</kbd> hotkey.
- Search for any emoji in the list through <kbd>p</kbd> hotkey.
- A reaction count beside emoji's that users have reacted with.
- Emoji list sorted in decreasing order of reaction count, and ascending order of emoji names(if reaction count is same).
- A `CHECK_MARK` that indicates emoji's that the current user has reacted with.
- Mouse support allows toggling reactions and scrolling through mouse events.

**Working:**

<img src=""https://user-images.githubusercontent.com/54993043/110815551-8dcfe880-82b0-11eb-8ee4-135976efa44a.gif"" width=""250"" height=""500""/>


Thanks to @kaustubh-nair for his initial work in #707. I was able to pull some of his changes here, which simplified my work.
",True,913,https://api.github.com/repos/zulip/zulip-terminal/pulls/913,https://github.com/zulip/zulip-terminal/pull/913,closed,466,3,9,6,6,101,3,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-02-07 21:45:38+00:00,2021-08-17 05:32:27+00:00,16444009.0,"190 days, 7:46:49","[{'comment_id': 573458437, 'comment_body': 'I guess the `right` symbol is used somewhere in the stream info as well. It would be clean to use the predefined `CHECK_MARK` in `symols.py` instead :)', 'comment_created': datetime.datetime(2021, 2, 10, 5, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573464772, 'comment_body': '[minor]: This could be shortened with comprehension :sweat_smile: ', 'comment_created': datetime.datetime(2021, 2, 10, 5, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573467168, 'comment_body': 'Any changes to `keys.py` should be reflected in `README.md` (in the same commit).', 'comment_created': datetime.datetime(2021, 2, 10, 5, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573473806, 'comment_body': ""Are you referring to `list comprehension`, because I don't see any lists here? :thinking:\r\nOr, you are speaking about the function `user_has_reacted_to_msg`?"", 'comment_created': datetime.datetime(2021, 2, 10, 6, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 573480144, 'comment_body': 'This seems unnecessary :)', 'comment_created': datetime.datetime(2021, 2, 10, 6, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573482719, 'comment_body': 'This is actually necessary. This line resets the search caption to `Search [p]:`, after you press `Esc`(i.e. move your focus from Search-box to Emoji list) and press `p` again, otherwise the search caption would become empty.\r\n\r\nHowever, if you have any other idea/refactor in mind then please let me know. :)', 'comment_created': datetime.datetime(2021, 2, 10, 6, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 573492391, 'comment_body': ""I was actually referring to the if/else logic below. Sorry for confusion :)\r\n\r\nMy point was that we could shorten the condition by doing something like:\r\n\r\n```python\r\nself.update_widget(('bar', '' if self.user_has_reacted_to_msg else CHECK_MARK), 'bar')\r\n```"", 'comment_created': datetime.datetime(2021, 2, 10, 7, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 573524885, 'comment_body': ""We could surely do that. But, I think this would be a bit difficult to read and interpret. Maybe, we should wait for Neil's review on this?"", 'comment_created': datetime.datetime(2021, 2, 10, 8, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 573568516, 'comment_body': 'I actually started comparing this search box with other search boxes; In other search boxes, the `Search [key]` indirectly acts as a sort of placeholder, which disappears when comes into focus; However, since the search box appears only on toggling the popup in this case, your re-setting the caption makes sense :+1: \r\n\r\nAlso, we may use f-strings and replace `p` via the `keys_for_command` to avoid that change in future :)', 'comment_created': datetime.datetime(2021, 2, 10, 9, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 600472901, 'comment_body': 'I think we can keep this FIXME comment till the commit we add support for all emoji reactions.', 'comment_created': datetime.datetime(2021, 3, 24, 13, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 600483065, 'comment_body': 'In the third commit, pressing <kbd>enter</kbd> in the emoji search box causes ZT to crash. Traceback logs show that `EmojiPickerView` has no view attribute.  ', 'comment_created': datetime.datetime(2021, 3, 24, 13, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mkp6781', 'type': 'User'}, {'comment_id': 623822610, 'comment_body': 'I think adding ids to the test could make the more clear, and would help to identify potentially unhandled edge cases.', 'comment_created': datetime.datetime(2021, 4, 30, 12, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623824957, 'comment_body': 'This might be tidied using another bool variable, such as `is_same_user_id` (or something similar) inside the loop?', 'comment_created': datetime.datetime(2021, 4, 30, 12, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623826574, 'comment_body': 'minor: typo: `smile`', 'comment_created': datetime.datetime(2021, 4, 30, 12, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623829692, 'comment_body': 'A blank line above and below the primary function being tested would bring clarity :)', 'comment_created': datetime.datetime(2021, 4, 30, 12, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623834250, 'comment_body': ""Let's add a note for the visual change (emoji check marker background here) in the commit message."", 'comment_created': datetime.datetime(2021, 4, 30, 12, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623840384, 'comment_body': 'I know this commit has been dedicated to ""fix a search caption"". Though I\'m not sure if this is necessary unless there is a suitable reason for it that I\'m overlooking.', 'comment_created': datetime.datetime(2021, 4, 30, 12, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623847921, 'comment_body': 'After the last commit, on manual testing, I found that hitting `ESC` produced an empty view in the list below. Maybe we could override the `ESC` key to exit right away? Not sure if this is necessary, but normally we would expect a popup to be closed on `ESC`?', 'comment_created': datetime.datetime(2021, 4, 30, 12, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623850175, 'comment_body': ""I'd prefer moving this commit prior to the 4th commit (where it is first amended)."", 'comment_created': datetime.datetime(2021, 4, 30, 12, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623952951, 'comment_body': 'Do you mean moving this check just inside the loop to a variable `is_same_user_id`, then using the variable inside the `if`?', 'comment_created': datetime.datetime(2021, 4, 30, 15, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 623975930, 'comment_body': 'No, I mean declaring the variable inside the loop and simplifying the conditional check.', 'comment_created': datetime.datetime(2021, 4, 30, 15, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 623992233, 'comment_body': 'Unlike other Search boxes that inherit `PanelSearchBox`, we need a static search caption here, while making sure that other Search boxes remain unaffected by this change. Hence, these are necessary to check that only those Search boxes get static caption that passes `fixed_search_caption` as `True`. Let me know if this is still unclear or I misunderstood you. :)', 'comment_created': datetime.datetime(2021, 4, 30, 16, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624004296, 'comment_body': 'This page got cached. I edited my comment just 3mins after your latest comment without even knowing you commented until now. :laughing:', 'comment_created': datetime.datetime(2021, 4, 30, 16, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624018417, 'comment_body': 'From where were you pressing `Esc`? Search box or Just Emoji picker popup. Could you list the steps you did that caused the empty view for you. This sounds like a bug to me.\r\n\r\nAs we discussed in the Stream, Neil wanted the focus to be initially in the Search box when this popup was opened and only move to the Emoji list on pressing `Esc`(or `Enter`). So, we have another layer in between if the user wants to exit the popup. i.e. he has to move to the Emoji list, for the ""`Esc` to exit"" to work.\r\n\r\nBut as you said, we could override the `Esc`, causing it to directly exit the popup. So, the user would have to use `Enter` to move focus from search to emoji list, which seems better to me too. :+1:', 'comment_created': datetime.datetime(2021, 4, 30, 16, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624030232, 'comment_body': ""To clarify, I understand the working and the implementation here. What I meant to ask was: What are the use cases for which we'd prefer such option? Is there a specific intent behind fixing the search caption? (unlike the default behavior)"", 'comment_created': datetime.datetime(2021, 4, 30, 17, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 624033193, 'comment_body': 'I just realized, there\'s also a case, when the user typed something in the search box(but didn\'t press `Enter`) and now he wants to just go to the full emoji list. He could currently do so just by pressing `Esc`(or deleting the whole search text). But, if we go by the ""`Esc` to exit"" approach, he would either have to close and reopen the emoji popup, or delete the whole search text. Whats your opinion on this?', 'comment_created': datetime.datetime(2021, 4, 30, 17, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624034517, 'comment_body': 'If the focus is set to the search box initially, without the caption(default behaviour), then how would the user know what that edit box is for?\r\nA caption indicates that that is a ""Search box"" where he could search for Emoji\'s. ', 'comment_created': datetime.datetime(2021, 4, 30, 17, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624036556, 'comment_body': 'Ah, I see. Now it makes sense 👍', 'comment_created': datetime.datetime(2021, 4, 30, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 624470326, 'comment_body': 'I have updated the PR addressing the rest of your review, for now. But, I\'d like to discuss more on this. Whether we\'d want a popup with ""`Esc` to exit"" or ""`Esc` to focus to body"". For clarification, I was already overriding the default behavior of `Esc` to function as ""`Esc` to focus to body"" in [Line1604-1613](https://github.com/zulip/zulip-terminal/pull/913/files#diff-d224bd64cffd2530e18eef475b08bf4a7d49aabfedd40948a32dc5893cbb55cbR1604-R1613) of `views.py`', 'comment_created': datetime.datetime(2021, 5, 1, 9, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 624513496, 'comment_body': 'I think it\'s better to go with a ""`Esc` to exit"" approach to maintain consistency with the other search boxes? From using the other search-boxes the user would have gotten used to pressing escape to ""get out of a search"".\r\nAlso are the initial emoji\'s fetched in ascending order or most commonly used ones, like the Popular section in the webapp? If the latter, it seems reasonable to place the initial focus on the list?', 'comment_created': datetime.datetime(2021, 5, 1, 13, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 638751859, 'comment_body': 'Added ""esc to exit"". Had to override a couple of behaviors that were default to the `PanelSearchBox`, but it should work mostly fine as far as I tested. :)', 'comment_created': datetime.datetime(2021, 5, 25, 12, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650533834, 'comment_body': 'This is not a `log` anymore right?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650535210, 'comment_body': 'You don\'t need a `SimpleFocusListWalker` here right? You are planning to put a search box here for which you made `PanelSearchBox` wrapped around a `LineBox` converted it into a `list` wrapped around a `SimpleFocusListWalker` and wrapped around that is a `Pile`. You can directly send the `LineBox` as `header` right? Or you could just use a `Divider` like how TopicView does it.\r\nAlso, I feel the ""line drawing"" part should be inside PopupView instead of EmojiView so that others may use it later?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650536079, 'comment_body': ""Is this a result of wrapping a `SimpleFocusListWalker` around the SearchBox? Maybe all this could be avoided? Not sure though.\r\nAnyway isn't there the `is_in_editor_mode` or something similar in model that could be used here?"", 'comment_created': datetime.datetime(2021, 6, 13, 14, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650537305, 'comment_body': 'What is the function of `allow_emoji_list` here?', 'comment_created': datetime.datetime(2021, 6, 13, 14, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650575310, 'comment_body': ""You are absolutely correct, but since this is in `PopupView` which is used in multiple places right now, I wanted to have a generic solution that doesn't need much tinkering to make it work for slightly different use-cases as we had to do in this PR.\r\n\r\nWe might want to have a list of `LineBox`(or some other widget) as header in the future, then this approach would not need amendments and would work for both cases. Let me know if you still want me to change my approach. :)"", 'comment_created': datetime.datetime(2021, 6, 13, 20, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650577689, 'comment_body': 'No, this is not because of the above approach. This is actually a fix for a bug that you reported(some keys i.e. j,k,G not getting typed in the search-box). The bug was present because the `PopupView` intercepted some direction keys(both primary and secondary) and converted them to primary(i.e. ""up"", ""down"" etc.), thus preventing the secondary letter keys from getting typed in the search box. Hence, I added the above parameter in `__init__()`. See commit f05c892 for the bugfix.\r\n\r\nThe reason I can\'t use something like `is_in_editor_mode` is because it is an attribute of `PanelSearchBox` which can\'t be accessed in `PopupView`(since its the parent of `EmojiPickerView`). You can see that we do check `is_in_editor_mode` for `ENTER` keypress events in `EmojiPickerView`, but we cant prevent the `PopupView` from capturing the secondary letter keys. We need a parameter that can convey this information to the parent, hence I added the `is_popup_search_open` field. This seems to be the only approach feasible to me. :)', 'comment_created': datetime.datetime(2021, 6, 13, 21, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650580349, 'comment_body': 'Do you mean we change it to something like `self.body`?', 'comment_created': datetime.datetime(2021, 6, 13, 21, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650580737, 'comment_body': ""We don't actually need this. Thanks for pointing it out. :+1: "", 'comment_created': datetime.datetime(2021, 6, 13, 21, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650643461, 'comment_body': 'Ya that sounds better.', 'comment_created': datetime.datetime(2021, 6, 14, 4, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650648774, 'comment_body': 'We could still make that work but still use simpler widgets. The PopupView could accept a single widget and wrap it inside a LineBox and send it to Frame. In your case, you can directly send the PanelSearchBox. For other new Popups, mostly headers would contain 1 widget but if they really want to use more than that, they could send a Pile. Anything can be inside Pile: Walker, LineBox, etc.\r\nAnother issue in your version is that I have no way of manipulating the final ""log"" (inside Pile) if I want to. I would have to create another log in the child which would not be a nice way to do things.', 'comment_created': datetime.datetime(2021, 6, 14, 4, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650650869, 'comment_body': 'Another thing, I know I can access the log using `self.body._w` or something like that but it would be easier if I could just access `self.log` if I wanted to manipulate the log? So you could keep the original line and add the listbox line under?', 'comment_created': datetime.datetime(2021, 6, 14, 5, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650652030, 'comment_body': 'Can I use `self.header._w` or something here? Anyway having a list in the header would be an exception and it is better if it was made and handled locally in the child class.\r\nAlso every child using the header will for sure use a LineBox. So instead of each child making their own LineBox, its better if PopupView does it once?\r\n\r\nWhat do others think here?', 'comment_created': datetime.datetime(2021, 6, 14, 5, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650673634, 'comment_body': 'Oh ok.\r\nBut this kills the abstraction of the class right? PopupView now knows that there is a child that uses a searchbox. PopupView shoulld know nothing about its children. Maybe you could change the name to `disable_keys`? Or maybe you can simply override it from the keypress of EmojiView? selectively call super()?\r\nAlso if you have access to controller, you get access to `is_in_editor_mode` right?', 'comment_created': datetime.datetime(2021, 6, 14, 6, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650677631, 'comment_body': 'You can just use `self.controller.is_in_editor_mode()` I think.\r\nNot related to this but I wanted to know if you knew how `enter_editor_mode` happens for SearchBox and PanelSearchBox? It is clear for WriteBox but not for these, does it happen automatically by urwid?', 'comment_created': datetime.datetime(2021, 6, 14, 6, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650678605, 'comment_body': ""Do we need this? `exit_popup` is done by PopupView and we don't need to reset if we are exiting?"", 'comment_created': datetime.datetime(2021, 6, 14, 6, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 650824958, 'comment_body': ""You see, that's the issue.\r\nI just noticed this yesterday after your review, that `is_in_editor_mode()` always returns `False`. So the above condition buggy and that may be the reason for the multiple reactions bug that you reported in the stream, not sure though.\r\n\r\nIt is always `False` even if I use `self.controller.is_in_editor_mode()` which makes me believe that `enter_editor_mode` never actually happens for PanelSearchBox, as you mentioned above, for any of the SearchBoxes? I can obviously explicitly `enter/exit_editor_mode` when shifting focus to/from `PanelSearchBox`, but I can't convince myself if that is a good approach. Let me know if you figure out how the editor mode works for these SearchBox, or maybe it's worth bringing this to the stream?"", 'comment_created': datetime.datetime(2021, 6, 14, 10, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650827304, 'comment_body': 'No, I don\'t think we need this too. You\'re right that `exit_popup` is called from PopupView. I added this check earlier when we were not doing ""Esc to exit"" and didn\'t bother removing it afterward. I\'ll remove it in this next iteration. Thanks. :+1:', 'comment_created': datetime.datetime(2021, 6, 14, 10, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 650861050, 'comment_body': ""But the thing is it works! Atleast in PanelSearchBox if you remove `exit_editor_mode` the search box behaves weirdly. It doesn't come out of search. That means it _was_ indeed in editor mode. But you say it's always False. "", 'comment_created': datetime.datetime(2021, 6, 14, 11, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651015439, 'comment_body': ""To answer your first question. The other search boxes `enter_editor_mode` explicitly in `ui.py` since they are not part of any popups or sub-UI. So, `urwid` doesn't automatically enter editor mode, but we need to specify it explicitly. Which points that my above approach is actually what I should follow. Thanks for the discussion, I'll amend my commits and push the next iteration in a short while. :)"", 'comment_created': datetime.datetime(2021, 6, 14, 14, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651055082, 'comment_body': ""Actually, we do need to keep the `exit_popup` check here, because when `Esc` is pressed from inside emoji search, then the keypress is first handled by `PanelSearchBox`(which throws a ValueError) and then by `PopupView`. We need to handle the exit condition here specifically and return so that `PanelSearchBox`'es keypress is not executed after this."", 'comment_created': datetime.datetime(2021, 6, 14, 15, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651079386, 'comment_body': 'minor: `reaction_to_toggle` could be just `reaction` as it already belongs to `toggle_message_reaction` and thus has its namespace.', 'comment_created': datetime.datetime(2021, 6, 14, 16, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651080928, 'comment_body': ""Re the commit description, it's good to have comments _only_ about the commit in there and keep things related to PR in the PR."", 'comment_created': datetime.datetime(2021, 6, 14, 16, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651088495, 'comment_body': 'minor: It is easier to identify ""expected"" params when they\'re prefixed with `expected_`.', 'comment_created': datetime.datetime(2021, 6, 14, 16, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651089921, 'comment_body': ""Let's use `case` (`from pytest import param as case`) so that it is easier to correlate the test cases and the ids."", 'comment_created': datetime.datetime(2021, 6, 14, 16, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651098588, 'comment_body': 'Since you\'re getting ""user"" from `reaction` twice, you could retrieve it once and store it in a variable.', 'comment_created': datetime.datetime(2021, 6, 14, 16, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651101652, 'comment_body': 'minor: You could save on the comparison below if you exit early (using `continue`) by checking `reaction[""emoji_name""] != emoji_name`.', 'comment_created': datetime.datetime(2021, 6, 14, 16, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651114534, 'comment_body': ""Let's include a newline above. It helps keep the Arrange, Act and Assert (AAA) bits separate for readability."", 'comment_created': datetime.datetime(2021, 6, 14, 16, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651119770, 'comment_body': ""I believe this shouldn't have the leading `_` as the method can _publicly_ accessed and the later `has_user_reacted_to_msg` should have a leading `_` as it is only being used _privately_."", 'comment_created': datetime.datetime(2021, 6, 14, 16, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651208301, 'comment_body': ""I think it's better to keep it as is, to avoid confusion with the other variable in the for loop below, having the same name?"", 'comment_created': datetime.datetime(2021, 6, 14, 19, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651210222, 'comment_body': 'Ah, right. That makes sense.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651239567, 'comment_body': ""I didn't knew the `_` was used to specify, in some sense, the access level of functions. :open_mouth: \r\nI merely used it here to differentiate the function name with the name of the model function that it is calling in return.\r\n\r\nBut, I don't understand how this function is *publicly accessible* but the `has_user_reacted_to_msg` isn't? Currently, we are using this only in the `EmojiButton` class but in future we may need to use it elsewhere?"", 'comment_created': datetime.datetime(2021, 6, 14, 20, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651269910, 'comment_body': 'Do you mean something like this?\r\n```python3\r\nself.log = urwid.SimpleFocusListWalker(body)\r\nbody = urwid.ListBox(self.log)\r\n```', 'comment_created': datetime.datetime(2021, 6, 14, 20, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651299132, 'comment_body': ""Also, I don't think `ListBox` provides a `._w` attribute. We could however do `self.log.body`(no name change) to get the `SimpleFocusListWalker` object containing the list of widgets. The [urwid docs](http://urwid.org/reference/list_walkers.html#urwid.SimpleFocusListWalker) states that:\r\n\r\n> Changes made to this object (when it is treated as a list) are detected automatically and will cause ListBox objects using this list walker to be updated.\r\n\r\nBut I don't get how are we supposed to update the list walker body."", 'comment_created': datetime.datetime(2021, 6, 14, 21, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651301050, 'comment_body': 'Ok, got it. The ListWalker object is like a `list`. So you could simply access/modify the widgets using their index, IG', 'comment_created': datetime.datetime(2021, 6, 14, 21, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651329408, 'comment_body': 'A better way to check this is using `self.controller.is_in_editor_mode`, but the issue is using this would Fail a lot of other tests that would by-default assume `.is_in_editor_mode` to be `Mock` object and the above condition would always be `False`, preventing a lot of navigation keypress tests from passing.\r\n\r\nI am having difficulty figuring out if I should go ahead with the current approach, or use the above one. The current approach as @Rohitth007 notes [here](https://github.com/zulip/zulip-terminal/pull/913/commits/f05c89246cbd529c1a8d12a8a0e5b645f6335866#r650673634), kills the abstraction of class. But, the above approach would require modifying un-related tests.', 'comment_created': datetime.datetime(2021, 6, 14, 22, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651331814, 'comment_body': ""Right, I do have access to `controller`, so we could use that. I've added a comment down below to help me decide what approach should I follow here."", 'comment_created': datetime.datetime(2021, 6, 14, 22, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651451838, 'comment_body': 'Yes we could do that, but this(above) is simpler to understand right?\r\n```python\r\nself.log = urwid.SimpleFocusListWalker(body)\r\nbody = urwid.ListBox(self.log)\r\n```\r\nbody would indicate body of Frame and self.log can be used to access the list walker', 'comment_created': datetime.datetime(2021, 6, 15, 5, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651451996, 'comment_body': ""In python, no matter whether the method is private or protected, you can always retrieve it. So, the leading `_` is just for other developers to understand whether the method is supposed to be used privately/vice-versa.\r\n\r\nYou're passing the toggle method to another class in `__init__`. While the other method is just being used internally. If you want to expose the method publicly then you may choose not to add the `_`."", 'comment_created': datetime.datetime(2021, 6, 15, 5, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 651458819, 'comment_body': ""Oh ok got it, forgot to check `ui.py`.\r\nSo in your case it doesn't matter if you don't `enter_editor_mode`?\r\nBTW, `self.emoji_search.panel_view` == `EmojiPickerView` == `self`"", 'comment_created': datetime.datetime(2021, 6, 15, 5, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651482692, 'comment_body': 'Would calling `super().keypress` in EmojiPickerView only when not in search mode be a simpler solution?', 'comment_created': datetime.datetime(2021, 6, 15, 6, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651484444, 'comment_body': 'Correct me if I\'m wrong but there is nothing _private_ in Python. The notation is for developers to differentiate which is used ""privately"" and which is used ""publicly"".', 'comment_created': datetime.datetime(2021, 6, 15, 6, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 651570928, 'comment_body': ""Sure, it looks good. I'll do the change."", 'comment_created': datetime.datetime(2021, 6, 15, 8, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651574151, 'comment_body': ""> So in your case it doesn't matter if you don't `enter_editor_mode`?\r\n\r\nNo, it does matter, we have to `enter_editor_mode` here. Earlier, I was getting `is_in_editor_mode` always `False`, because of this reason only. So, I need to explicitly `enter_editor_mode`, as I said in my comment above, because the `PanelSearchBox` never does that."", 'comment_created': datetime.datetime(2021, 6, 15, 8, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 651576743, 'comment_body': 'If we dont call `super.keypress()` when in search mode and just return, then none of the keys would get typed in the search-box.', 'comment_created': datetime.datetime(2021, 6, 15, 8, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 652011314, 'comment_body': ""Yeah, that's what I was meaning in the first paragraph. :)"", 'comment_created': datetime.datetime(2021, 6, 15, 17, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 652641300, 'comment_body': 'I am keeping this unchanged for now, at least until we get more feedback on this. Nonetheless, this is definitely a change worth considering/discussing. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 12, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 652644128, 'comment_body': ""I am going forward with the current approach since that doesn't involve unnecessary test changes, leading to an even larger PR. But, I am keeping this conversation open for further discussion. :)"", 'comment_created': datetime.datetime(2021, 6, 16, 12, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 671138724, 'comment_body': ""What is the need for this check? I've seen this elsewhere also, though wasn't sure about the reason. I discussed this with Neil and he suggested adding this check instead in `exit_popup`. I'm ready to open a quick refactor PR for this."", 'comment_created': datetime.datetime(2021, 7, 16, 10, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Ezio-Sarthak', 'type': 'User'}, {'comment_id': 675579742, 'comment_body': '@Ezio-Sarthak This was particularly useful for my use-case (i.e. PanelSearch box inside a popup).\r\nIf you look at the conditional just above this, we were calling this when the focus was on **empty** search-box and the user pressed `Enter`, then the popup would close - which was unexpected. So, this condition prevents `Esc` keypress from being triggered by PanelSearch box if a popup is open.\r\n(Sorry for the late reply, I just noticed your comment. Let me know if this is still unclear.)', 'comment_created': datetime.datetime(2021, 7, 23, 13, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 679414903, 'comment_body': 'My instinct would be to extract (""hoist"") the common part of these assignments into a variable.\r\nThen, given you\'d do the same assignment in the block above, you can maybe move these variable assignments to be common to both aliases outside the conditional.', 'comment_created': datetime.datetime(2021, 7, 29, 19, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679416000, 'comment_body': ""The commit title doesn't represent the change here - we're generalizing the method to use active emoji data, but the method doesn't support anything other than thumbs_up right now :)\r\n\r\nI've not seen a point where you add tests for that new behavior you've added in this commit (nothing indicates the model in the commit title?), and right now the behavior isn't reachable due to the assert. I'd suggest you add a commit where you remove that assert and add tests to ensure the behavior is as you expect - or just update this commit to have this? After all, you're adding lots of code but not testing any of it yet :)"", 'comment_created': datetime.datetime(2021, 7, 29, 19, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679419404, 'comment_body': ""We're only applying this to thumbs_up right now, but there's no check here that reaction_to_toggle is a valid original/alias?\r\n`neil` as a name would cause what error feedback? ;)\r\nThis would be clear if there were tests to demonstrate the behavior :)"", 'comment_created': datetime.datetime(2021, 7, 29, 19, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679426028, 'comment_body': 'Minor: I\'d expand the name, and place the message first in order, requiring the second parameter be named to indicate what \'with\'.\r\nThis would mean code originally looking like:\r\n```\r\nhas_user_reacted_to_msg(""+1"", foo.msg)\r\n```\r\nwould have to be written as:\r\n```\r\nhas_user_reacted_to_message(foo.msg, with_emoji=""+1"")\r\n```\r\nWhat do you think?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679434919, 'comment_body': ""This is a really confusing part of the API historically:\r\n* get-messages had `dict(user=dict(id=...), ...)`\r\n* events had `dict(user=dict(user_id=...), ...)`\r\n\r\nBoth may have the above (for a while) but unified also as the simpler:\r\n* `dict(user_id=...)`\r\n\r\nSo, the above code works for now, but won't after the older fields are removed (not deprecated).\r\n\r\nWould this method work for refactoring the toggle-reaction logic - lower in the methods you just generalized? Maybe this is also usable in the display logic (different styles for general and including your-own reactions)? This would centralize the logic and this would become a clean refactor commit - the possible concern being whether the calculation in those methods is combined with other logic, or if there is overhead here compared to existing implementation?\r\n\r\nWe could likely simplify this further using `modernize_message_response`, though we need to handle reaction events too. I'm unconvinced it's worth making this particular PR even more complex and delaying it further."", 'comment_created': datetime.datetime(2021, 7, 29, 19, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 680084149, 'comment_body': ""Right, I see they introduced the `dict(user_id=...)` in server version 3.0 ZFL 2. So that means, we'd still need to support the above along with the new unified format?"", 'comment_created': datetime.datetime(2021, 7, 30, 16, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 680241930, 'comment_body': '@neiljp As discussed in the stream, I have kept all three check for getting ""user_id"", this should hopefully survive post the removal of `user` object from the server.\r\n\r\nI have also centralized the logic for `has_user_reacted_to_message` and adapted the toggle-reaction logic to use this method instead. As you said, this should also prove useful in the display logic. :+1:', 'comment_created': datetime.datetime(2021, 7, 30, 22, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 687068704, 'comment_body': 'This check already exists elsewhere, so rather than a very tiny commit, can we make this a refactor?', 'comment_created': datetime.datetime(2021, 8, 11, 18, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687184739, 'comment_body': 'This is not being used anywhere? Everything defaults to True?', 'comment_created': datetime.datetime(2021, 8, 11, 20, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687186229, 'comment_body': 'The sorting introduced in this commit is worth highlighting in the title too if possible.', 'comment_created': datetime.datetime(2021, 8, 11, 20, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687189294, 'comment_body': 'Do we know enough here to assert on the reaction count after?', 'comment_created': datetime.datetime(2021, 8, 11, 21, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687191932, 'comment_body': 'If you invert this then this becomes identical to the other main branch except for the `[not] self.is_selected(...)`.', 'comment_created': datetime.datetime(2021, 8, 11, 21, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687199104, 'comment_body': 'This only explicitly sorts by count here?\r\n\r\nTo avoid calling count_reactions multiple times, we could sort the EmojiButton list instead?', 'comment_created': datetime.datetime(2021, 8, 11, 21, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 687850974, 'comment_body': ""Ahh... This was changed recently when we decided to remove the search hint when the user presses `p` again. If we go by the current approach i.e. disappearing search hint, then I don't think we need this commit(?), but if we want to show the search caption when the user presses `p`, then this will be useful."", 'comment_created': datetime.datetime(2021, 8, 12, 15, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 687874476, 'comment_body': 'We can\'t assert on the reaction_count currently, because of the below lambda functions. I can instead add `case`\'es to the test in the initial `EmojiButton` commit and then assert on the reaction_count in this one, but that won\'t be ""just a"" keypress check anymore?', 'comment_created': datetime.datetime(2021, 8, 12, 16, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688126942, 'comment_body': 'I am still convinced that we dont need to show the search hint when the user presses `p`, so I\'ve dropped this commit and moved the ""initial focus in the search-box"" part to the emoji picker commit earlier.', 'comment_created': datetime.datetime(2021, 8, 12, 22, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688127270, 'comment_body': ""I've added tests for checking reaction_count as well.  Let me know if that looks complex. :)"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 689012968, 'comment_body': 'This is always true.', 'comment_created': datetime.datetime(2021, 8, 15, 1, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 689016226, 'comment_body': ""You've amended this slightly, but note how if you extract the piece I highlighted in the comment as a variable, then you can collapse the branches into one."", 'comment_created': datetime.datetime(2021, 8, 15, 2, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 689043074, 'comment_body': 'Ah...sorry for that silly mistake.', 'comment_created': datetime.datetime(2021, 8, 15, 7, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 689268927, 'comment_body': 'ADD_REACTION too?', 'comment_created': datetime.datetime(2021, 8, 16, 6, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'a7211dd90c47757f7ee59f58b5420a9d0db5646c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5096b53659b02133f5e84665c1c3072baa6c14cc', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda11d76c011d1e46864b6f814ee35b96e9bdde7', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39dc54a1d9a7407d3f8e6b01518f029c4b2054f1', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95ef626c8b235a2a8dcbe0a048a9d1013720003e', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc77603a9a554877ec3b255e238d137a082cc984', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
444185367,WIP: Add reactions to messages,,False,707,https://api.github.com/repos/zulip/zulip-terminal/pulls/707,https://github.com/zulip/zulip-terminal/pull/707,closed,487,34,7,11,4,0,2,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}]",2020-07-03 20:29:36+00:00,2021-08-17 05:39:52+00:00,35370616.0,"409 days, 9:10:16",[],"[{'commit_sha': 'a825d8ec96a2106d424d2344398c3de80ca45e2d', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5061998229c83966915e0b1f1b6f44585e74f470', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '168b3bed388d0374ff968dbe4593c57d4e8815d7', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad092e17040fe50d2190361ac351f7731f34f023', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfa56db25511a3286a77d8e2d96d7ec0c653c3d8', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f76d9329750f06baf6e27b7e1e18616832e0224', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e235ef7faf3424cb40630136b6ce8b71fda3163', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b862b3ca0de382919a0679a8532e8c2dc84e5c9b', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '566f291a91a37ac26b01a5bd6716b3b592733b87', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82a6f5204bbeac59bb01bdce54d0e9581cdb1a3a', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a51268189b8a18c4956164bfde8f3da77adace4c', 'committer_username': 'kaustubh-nair', 'committer_name': 'Kaustubh Nair', 'committer_email': 'kaustubh.nair108@gmail.com', 'commit_date': datetime.datetime(2017, 7, 15, 13, 2, 30, tzinfo=datetime.timezone.utc)}]",Kaustubh Nair,30197132,kaustubh.nair108@gmail.com,User,,48,,71,79
557539523,Feature: Improve Stream Info Popup,"- [x] Add Stream Members hotkey in README. [merged commit 8ce2edb]
- [x] Add Stream creation date in Stream Info popup [New in Server v4.0, ZFL 30]
- [x] Add Stream email
- [x] bugfix: Fix case when Weekly message count is None
- [x] Add Message retention days [New in server v3.0, ZFL 17]
- [ ] Notification settings [issue #887]",True,880,https://api.github.com/repos/zulip/zulip-terminal/pulls/880,https://github.com/zulip/zulip-terminal/pull/880,closed,163,18,5,2,10,72,3,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-01-19 16:08:13+00:00,2021-08-14 05:36:53+00:00,17846920.0,"206 days, 13:28:40","[{'comment_id': 564843908, 'comment_body': 'This parametrizes *all* tests in this class, right? Is that the intent?', 'comment_created': datetime.datetime(2021, 1, 26, 21, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564844955, 'comment_body': 'I just merged what is effectively this change along with some other adjustments (Show -> View/Hide) to improve consistency and between this and keys.py with you as the commit co-author.', 'comment_created': datetime.datetime(2021, 1, 26, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564846333, 'comment_body': ""We're doing a lot of datetime work in various places, so I'm keen to get this centralized - ideally first - before we add this particular commit/change. Your addition of the class parametrizations (which I queried above) makes it more challenging to merge a later commit first though, I suspect."", 'comment_created': datetime.datetime(2021, 1, 26, 21, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564846986, 'comment_body': 'This approach looks good generally :+1:', 'comment_created': datetime.datetime(2021, 1, 26, 21, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564866445, 'comment_body': 'In practice these email addresses can be very long. A separate test with that kind of example would be useful. For the reason of long emails, I would suggest we consider allowing/forcing the URL onto the next line. For example, try applying your PR to the #announce stream on czo.', 'comment_created': datetime.datetime(2021, 1, 26, 22, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564868400, 'comment_body': ""You're referring to a commit, not a PR, in this commit text.\r\n\r\nIf `None` is always due to it being just-created, it would be useful to indicate that, and expand N/A to something clearer in any case.\r\n\r\nI'd be happy merging this commit sooner, but the tests in the first commit are dependencies of all the others."", 'comment_created': datetime.datetime(2021, 1, 26, 22, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564872493, 'comment_body': 'This is rather confusing to read. Do we need that nested function? The one-liner if/else is not easy to read.', 'comment_created': datetime.datetime(2021, 1, 26, 22, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 565075236, 'comment_body': 'Yes. I thought it will increase our scope of testing, and potentially detect/eliminate any bug that may get unnoticed, if we tried to localize the parameters inside the class?', 'comment_created': datetime.datetime(2021, 1, 27, 7, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565075628, 'comment_body': ""Thanks. I'll drop this commit from the PR, then?"", 'comment_created': datetime.datetime(2021, 1, 27, 7, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565102182, 'comment_body': 'Hmm. Seems like the class parametrization was not a very good idea afterall. But, I am not sure how else to add tests to this commit without making the subsequent commits dependent on it.\r\n\r\nIf you want to centralize this datetime conversion first, I can put it up on a separate PR inside maybe `helper.py` and then refactor this commit to use that function. If you have any other idea in mind, it would help me to know. :)', 'comment_created': datetime.datetime(2021, 1, 27, 8, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565124669, 'comment_body': ""I'll edit the commit title accordingly. Thanks for pointing it out. :)\r\n\r\nI can add a comment explaining this behavior, and replace 'N/A' with something like, `New stream. Data unavailable`? for reference, webapp displays `Stream created recently`.\r\n\r\nAdding this commit in the same PR has led to this. I asked in #zulip-terminal about adding this fix in this PR or another PR, and we decided to go with the former. If you want, I can add this to the PR I mentioned few comments above. This should segregate this fix from the class parameters I declared in the prior commit?"", 'comment_created': datetime.datetime(2021, 1, 27, 8, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565134642, 'comment_body': ""I understand your concern. I'll fix this too."", 'comment_created': datetime.datetime(2021, 1, 27, 9, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 577690245, 'comment_body': 'The centralized preferred formatting is merged now as a Model method.', 'comment_created': datetime.datetime(2021, 2, 17, 15, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 602679078, 'comment_body': 'I have removed the class parameterization earlier and moved the fixtures to another test function(`test_popup_height`), since the popup height will change depending on the server version running - which corresponds to the numbers of fields supported in that version. :)', 'comment_created': datetime.datetime(2021, 3, 27, 6, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 676167590, 'comment_body': 'When declaring a variable like this, it is good to maintain consistency (see how `self.server_feature_level` is being used as in the statements below).\r\n\r\nThat said, given that `self.server_feature_level` is already defined in the method, we should use that as is everywhere.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169193, 'comment_body': 'It would be useful to have inline test ids here with `case`.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169591, 'comment_body': 'There are a few typos in the commit description. :)\r\n', 'comment_created': datetime.datetime(2021, 7, 25, 16, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169723, 'comment_body': 'We should add the dependencies in a prior commit. You could do `git log --grep requirements` for reference.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169873, 'comment_body': ""Let's add blank lines to separate out AAA bits."", 'comment_created': datetime.datetime(2021, 7, 25, 16, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676170417, 'comment_body': 'I am not sure if we should have this. This is basically checking whether the _library_ is working?\r\n\r\nWe should definitely add tests for the method covering both success and failure scenarios.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676170504, 'comment_body': 'Could we be more specific with the exception handling here?', 'comment_created': datetime.datetime(2021, 7, 25, 16, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676170867, 'comment_body': 'Let\'s be consistent with what text we\'re using for ""Email"" in the app. In the commit, we\'ve ""email"", ""E-mail"" and ""Email"".', 'comment_created': datetime.datetime(2021, 7, 25, 16, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676171114, 'comment_body': 'Much like the above section, ""Notifications"", we should use a generic title as this configuration potentially could be used for other things as well later.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676171227, 'comment_body': 'commit-description: OSes*', 'comment_created': datetime.datetime(2021, 7, 25, 16, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676171598, 'comment_body': 'We could rephrase this paragraph to explicate that the configuration allows ZT to copy to the clipboard generally and we use this to copy stream emails for now.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676172447, 'comment_body': 'See my other comment regarding generalization.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676172864, 'comment_body': ""Why did we change it to None? Also, the new change doesn't affect the test?"", 'comment_created': datetime.datetime(2021, 7, 25, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676172993, 'comment_body': 'Since `stream[""stream_weekly_traffic""]` is being used twice, we could extract it in another variable.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676176008, 'comment_body': 'See my other comment regarding extracting another variable.', 'comment_created': datetime.datetime(2021, 7, 25, 17, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676177040, 'comment_body': 'I think we can simplify the logic and conditionals a bit if we structure this differently.', 'comment_created': datetime.datetime(2021, 7, 25, 17, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 677741716, 'comment_body': ""As per the commit description, if a stream is newly created (within a week), the `stream_weekly_traffic` would be `None` according to the API docs [here](https://zulip.com/api/get-subscriptions#response).\r\n\r\nI was not sure if I should add new fixtures for this or just change the pre-existing ones (to prevent adding unnecessary tests and keep the commit smaller). Let me know if adding new fixtures is better. :)\r\n\r\nThe latter did not break the tests because the tests check for popup height, which remains the same even if the field is `None` cause we're displaying an appropriate message in that case."", 'comment_created': datetime.datetime(2021, 7, 27, 19, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678682780, 'comment_body': ""I have taken the `realm_message_retention_days` field out of the conditional which makes it a bit cleaner, but I don't get how it can be simplified further. It already looks pretty straightforward?\r\n\r\nCould you please explain what structure you had in mind?"", 'comment_created': datetime.datetime(2021, 7, 28, 22, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678689657, 'comment_body': 'I have added a new fixture with `stream_weekly_traffic` as `None`, without modifying the existing ones.', 'comment_created': datetime.datetime(2021, 7, 28, 22, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678693970, 'comment_body': ""It's difficult to test this since we have an external module involved which makes use of system packages (`xclip`/`xsel` on Linux, and others on different platforms). We can't know the platform on which our tests are running, and if those packages are installed in the system, nor if the text was successfully copied to clipboard?\r\n\r\nWe can, however, test for the exception case using `mocks` and `side_effects`, IG?"", 'comment_created': datetime.datetime(2021, 7, 28, 22, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 679679485, 'comment_body': ""I'm not sure why we're using an assert here; can we not use a simple conditional with success and failure branches?"", 'comment_created': datetime.datetime(2021, 7, 30, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679680971, 'comment_body': ""I understand that we're introducing this to resolve stream email copying, but this method seems sufficiently general to handle all copying? Specifically, it's only the success message which depends on this being a stream email copy?"", 'comment_created': datetime.datetime(2021, 7, 30, 6, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679682036, 'comment_body': 'I feel we should list the tools first (xclip, xsel, ...2 more on the website?) and then indicate one method such tools may be installed (ie. with the apt-get prefix).', 'comment_created': datetime.datetime(2021, 7, 30, 6, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679682425, 'comment_body': 'You should be able to simplify a lot of this since `(None, ""text"")` is the same as `""text""` for urwid?', 'comment_created': datetime.datetime(2021, 7, 30, 6, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679693674, 'comment_body': 'Reading this with fresh eyes, my question would be why each case has subtly varying values? This seems a distraction from the variations that *do* matter - ""do those different values change the result? should I be concerned?""\r\n\r\nI\'d suggest a `stream_data_to_vary` dict or similar - like we have in various other tests when building up the data, which we combine with a base dict in the main test. Initially the dict in the case would then be just with varying date_created fields, if that yet?', 'comment_created': datetime.datetime(2021, 7, 30, 6, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 680360894, 'comment_body': ""I agree with Neil. That is what I was talking about in the first statement.\r\n\r\nRe testing, we don't have to test the external module. We could just test whether we're calling the external module correctly."", 'comment_created': datetime.datetime(2021, 7, 31, 13, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 680362386, 'comment_body': 'Yeah, that makes it better. Additionally, you could do something like the following to simplify the `else` block.\r\n```python3\r\n                    stream[""message_retention_days""] = message_retention_days_response(\r\n                        realm_message_retention_days, stream[""message_retention_days""] is None\r\n                    )\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 13, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 680363056, 'comment_body': ""The first 2 (xclip, xsel) are system packages whereas the other 2 (gtk, PyQt4) are python modules, which still needs the system packages to run so I'm not sure why they are listed in the website. The copying also seems to work fine without those python modules installed. Also, gtk and PyQt4 modules are not available in Python3."", 'comment_created': datetime.datetime(2021, 7, 31, 14, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 680416427, 'comment_body': ""I believe you are talking about the first else block?\r\nThe conditional within that have `stream['message_retention_days']` and `realm_message_retention_days` as args to the function call. I don't think they will have the same value at any point of time?"", 'comment_created': datetime.datetime(2021, 7, 31, 22, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 682130231, 'comment_body': '`MODULE + .` ?', 'comment_created': datetime.datetime(2021, 8, 3, 21, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682131527, 'comment_body': 'It would be good to put this simple value (""Test"") into the test function parameters as a default value, which you can then use here and when you do an assert later. That indicates where a specific value should match in the test input and output.', 'comment_created': datetime.datetime(2021, 8, 3, 22, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682141180, 'comment_body': ""Right; should this only be a pyperclip-specific exception, that we can use? The (online) docs for it don't include that, but the source possibly does - and you have that in the test? The package doesn't seem particularly active, otherwise I'd suggest proposing updating the documentation or opening an issue."", 'comment_created': datetime.datetime(2021, 8, 3, 22, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682144033, 'comment_body': 'Do you know when this should fail? Does definitely trying again make sense?', 'comment_created': datetime.datetime(2021, 8, 3, 22, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682153218, 'comment_body': 'I think one reason this could be clearer is that we\'re overwriting the stored value with a textual form?\r\nMaybe ""cached_retention_text"" could be set and used instead? That would also make it clearer if that setting is later updated, that we need to update the cached text too.\r\n\r\nSome of those conditions you\'re checking are identical independently of the stream - if it\'s an old server, all the values should be set to None, you don\'t need to keep checking the server version. Secondly, you\'re checking a conditional statement then calling a function with two bool values; see how you can simplify that? (that\'s Preet\'s latter point, I think)', 'comment_created': datetime.datetime(2021, 8, 3, 22, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682155212, 'comment_body': ""This would be clearer if this text wasn't overwritten, as per my other comment."", 'comment_created': datetime.datetime(2021, 8, 3, 22, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682155798, 'comment_body': 'Is it meaningful here to include a 17-30 case, given that one feature is introduced at 30 and another by 17?', 'comment_created': datetime.datetime(2021, 8, 3, 22, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682619218, 'comment_body': 'I was not sure what to mention as a possible *try*/*hint*, since failing to copy would mean it\'s an internal `pyperclip` issue. Re-thinking now, I believe we could mention something along the lines of: ""Could not copy Test. Error in the dependency library"" or just remove the second sentence altogether?', 'comment_created': datetime.datetime(2021, 8, 4, 13, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 682727216, 'comment_body': ""Possibly worth rewording and avoiding the 'try again' sentence - after all, we *have* copied, we can just warn (strongly) that a pasted value may be incorrect, or something like that? That's more transparent to the user - conceptually they may have some special clipboard system which could upset this, for example? Then they'd know it was copied but a verification didn't work."", 'comment_created': datetime.datetime(2021, 8, 4, 15, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682797827, 'comment_body': ""@neiljp The above makes sense. Just had a few small doubt; for server versions < 17 do we need to include this field in the `Subscription` data?\r\n\r\nAlso, re your last statement:\r\n> you're checking a conditional statement then calling a function with two bool values;\r\n\r\nThe `message_retention_days_response` method takes an `int` and a `bool` (not 2 bools) so I don't know if that could be simplified further. Or, am I misunderstanding you guys?"", 'comment_created': datetime.datetime(2021, 8, 4, 16, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 682878388, 'comment_body': "">for server versions < 17 do we need to include this field in the `Subscription` data?\r\n\r\nIf we include this field with a value of `None`, as before, then it'll get mixed with the special `None` value (denoting that it inherits the organization-level setting) since we are not over-writing this field."", 'comment_created': datetime.datetime(2021, 8, 4, 18, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 684782668, 'comment_body': 'minor: The new field(s) should be added in another commit to make this a pure refactor.', 'comment_created': datetime.datetime(2021, 8, 8, 14, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684784344, 'comment_body': ""When does this happen? As an end-user, the message doesn't seem to be helpful."", 'comment_created': datetime.datetime(2021, 8, 8, 14, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684786428, 'comment_body': ""What's the reasoning behind this check?"", 'comment_created': datetime.datetime(2021, 8, 8, 14, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684793684, 'comment_body': 'This might happen if there is an internal issue with the `pyperclip` module. Neil also explained other possible trigger conditions in [this](https://github.com/zulip/zulip-terminal/pull/880#discussion_r682727216) comment.', 'comment_created': datetime.datetime(2021, 8, 8, 15, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 684794239, 'comment_body': 'This was done to address your previous review [here](https://github.com/zulip/zulip-terminal/pull/880#discussion_r679679485), in which we decided to not use `assert` statements but simple conditional to check the correctness of the copied text. ', 'comment_created': datetime.datetime(2021, 8, 8, 15, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 684811653, 'comment_body': ""Some appear to have just shifted to the next commit; let's address these in a different PR?"", 'comment_created': datetime.datetime(2021, 8, 8, 18, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 684888356, 'comment_body': 'Ah, I understand now. I was under the impression that the module would copy correctly or throw an exception altogether. Thanks for clarifying.', 'comment_created': datetime.datetime(2021, 8, 9, 3, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 688131083, 'comment_body': ""When is days going to be None? Shouldn't we always have a server-wide value available?"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688132205, 'comment_body': 'minor: `message_retention_days is None` is used twice here, which suggests extracting it into a name would be useful.', 'comment_created': datetime.datetime(2021, 8, 12, 22, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688132729, 'comment_body': ""Where does the zero come from? We may want to remove this comment in any case, since we're hiding the raw values/versions and intending the text to be used now?"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688133448, 'comment_body': ""I think we've resolved this with the 2-step cached-text process?"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688134163, 'comment_body': 'The views change overall is very small, but with the tests it may be good to split the model and view changes into 2 commits - this is getting quite long, and multiple independent tests suggests this too :)', 'comment_created': datetime.datetime(2021, 8, 12, 22, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688141154, 'comment_body': 'Minor: ""key"" is very broad; these are stream ids, right?', 'comment_created': datetime.datetime(2021, 8, 12, 23, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688146931, 'comment_body': ""Ah, this is the `None` case that I queried elsewhere, where the organization value slips through to the stream level.\r\n\r\nWas `None` a realm value, though? I assume it followed the original rule, ie. -1 for indefinite and +n for days, so I'm not sure about None?\r\n\r\nThe #api-design topic doesn't seem to have clarified this exactly, so perhaps Mateusz could answer in a follow-up or you could refer him here?"", 'comment_created': datetime.datetime(2021, 8, 12, 23, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688497993, 'comment_body': ""Right, this is why we were handling the `days == None` case earlier.\r\nTo clarify, `None` was a realm value earlier (between server v2-3, as per my testing on the dev server) and it had the same meaning as the current `-1` for indefinite which was changed by @mateuszmandera's [commit](https://github.com/zulip/zulip/commit/7a03e2a7fe259a3410cadbb1a9a4955aa1fae3c7) afterwards. So to summarize, I believe this is how the server's representation for message retention changed over time:\r\n- Server version 2-3: realm value could have `None` for indefinite and +n for days. No stream value\r\n- Server version 3.0: added stream message retention days, with `None` for org default, `-1` for indefinite and +n for days.\r\n- Server version 3+: realm's `None` value was changed to `-1` by Mateusz's above commit for consistency with the stream value\r\n\r\n(I hope Mateusz should get notification from the above mention, still, I'll refer him here from the stream to confirm my hypothesis)"", 'comment_created': datetime.datetime(2021, 8, 13, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688665053, 'comment_body': ""Ah, that was an interesting dive through old commits :grinning: This overview sounds correct to me based on that. To be a bit more precise, `message_retention_days` was a thing for streams before 3.0 but only in the sense of the backend logic - but it indeed wasn't exposed via the API in any way (the value had to be set manually via `manage.py shell` or db query). I presume that `zulip-terminal` only cares about the API history here though, where indeed this is only a thing since 3.0 - https://github.com/zulip/zulip/commit/c488a35f10ac7b1e5e20fc46302c85ce2364e825"", 'comment_created': datetime.datetime(2021, 8, 13, 17, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 688729309, 'comment_body': 'Yes, this is resolved with the `cached_retention_text` and the idea to fallback to the realm value on older server versions.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688730353, 'comment_body': 'I think this should be already answered by the below comment of mine and Mateusz?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '22934ab1e230ee0ecb535cb430c259f3f6c5daf3', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b933405219fff76b4c91b5b8077c1946cfe6e6ca', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
557539523,Feature: Improve Stream Info Popup,"- [x] Add Stream Members hotkey in README. [merged commit 8ce2edb]
- [x] Add Stream creation date in Stream Info popup [New in Server v4.0, ZFL 30]
- [x] Add Stream email
- [x] bugfix: Fix case when Weekly message count is None
- [x] Add Message retention days [New in server v3.0, ZFL 17]
- [ ] Notification settings [issue #887]",True,880,https://api.github.com/repos/zulip/zulip-terminal/pulls/880,https://github.com/zulip/zulip-terminal/pull/880,closed,163,18,5,2,10,72,3,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'missing feature: user'}]",2021-01-19 16:08:13+00:00,2021-08-14 05:36:53+00:00,17846920.0,"206 days, 13:28:40","[{'comment_id': 564843908, 'comment_body': 'This parametrizes *all* tests in this class, right? Is that the intent?', 'comment_created': datetime.datetime(2021, 1, 26, 21, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564844955, 'comment_body': 'I just merged what is effectively this change along with some other adjustments (Show -> View/Hide) to improve consistency and between this and keys.py with you as the commit co-author.', 'comment_created': datetime.datetime(2021, 1, 26, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564846333, 'comment_body': ""We're doing a lot of datetime work in various places, so I'm keen to get this centralized - ideally first - before we add this particular commit/change. Your addition of the class parametrizations (which I queried above) makes it more challenging to merge a later commit first though, I suspect."", 'comment_created': datetime.datetime(2021, 1, 26, 21, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564846986, 'comment_body': 'This approach looks good generally :+1:', 'comment_created': datetime.datetime(2021, 1, 26, 21, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564866445, 'comment_body': 'In practice these email addresses can be very long. A separate test with that kind of example would be useful. For the reason of long emails, I would suggest we consider allowing/forcing the URL onto the next line. For example, try applying your PR to the #announce stream on czo.', 'comment_created': datetime.datetime(2021, 1, 26, 22, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564868400, 'comment_body': ""You're referring to a commit, not a PR, in this commit text.\r\n\r\nIf `None` is always due to it being just-created, it would be useful to indicate that, and expand N/A to something clearer in any case.\r\n\r\nI'd be happy merging this commit sooner, but the tests in the first commit are dependencies of all the others."", 'comment_created': datetime.datetime(2021, 1, 26, 22, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 564872493, 'comment_body': 'This is rather confusing to read. Do we need that nested function? The one-liner if/else is not easy to read.', 'comment_created': datetime.datetime(2021, 1, 26, 22, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 565075236, 'comment_body': 'Yes. I thought it will increase our scope of testing, and potentially detect/eliminate any bug that may get unnoticed, if we tried to localize the parameters inside the class?', 'comment_created': datetime.datetime(2021, 1, 27, 7, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565075628, 'comment_body': ""Thanks. I'll drop this commit from the PR, then?"", 'comment_created': datetime.datetime(2021, 1, 27, 7, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565102182, 'comment_body': 'Hmm. Seems like the class parametrization was not a very good idea afterall. But, I am not sure how else to add tests to this commit without making the subsequent commits dependent on it.\r\n\r\nIf you want to centralize this datetime conversion first, I can put it up on a separate PR inside maybe `helper.py` and then refactor this commit to use that function. If you have any other idea in mind, it would help me to know. :)', 'comment_created': datetime.datetime(2021, 1, 27, 8, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565124669, 'comment_body': ""I'll edit the commit title accordingly. Thanks for pointing it out. :)\r\n\r\nI can add a comment explaining this behavior, and replace 'N/A' with something like, `New stream. Data unavailable`? for reference, webapp displays `Stream created recently`.\r\n\r\nAdding this commit in the same PR has led to this. I asked in #zulip-terminal about adding this fix in this PR or another PR, and we decided to go with the former. If you want, I can add this to the PR I mentioned few comments above. This should segregate this fix from the class parameters I declared in the prior commit?"", 'comment_created': datetime.datetime(2021, 1, 27, 8, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 565134642, 'comment_body': ""I understand your concern. I'll fix this too."", 'comment_created': datetime.datetime(2021, 1, 27, 9, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 577690245, 'comment_body': 'The centralized preferred formatting is merged now as a Model method.', 'comment_created': datetime.datetime(2021, 2, 17, 15, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 602679078, 'comment_body': 'I have removed the class parameterization earlier and moved the fixtures to another test function(`test_popup_height`), since the popup height will change depending on the server version running - which corresponds to the numbers of fields supported in that version. :)', 'comment_created': datetime.datetime(2021, 3, 27, 6, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 676167590, 'comment_body': 'When declaring a variable like this, it is good to maintain consistency (see how `self.server_feature_level` is being used as in the statements below).\r\n\r\nThat said, given that `self.server_feature_level` is already defined in the method, we should use that as is everywhere.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169193, 'comment_body': 'It would be useful to have inline test ids here with `case`.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169591, 'comment_body': 'There are a few typos in the commit description. :)\r\n', 'comment_created': datetime.datetime(2021, 7, 25, 16, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169723, 'comment_body': 'We should add the dependencies in a prior commit. You could do `git log --grep requirements` for reference.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676169873, 'comment_body': ""Let's add blank lines to separate out AAA bits."", 'comment_created': datetime.datetime(2021, 7, 25, 16, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676170417, 'comment_body': 'I am not sure if we should have this. This is basically checking whether the _library_ is working?\r\n\r\nWe should definitely add tests for the method covering both success and failure scenarios.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676170504, 'comment_body': 'Could we be more specific with the exception handling here?', 'comment_created': datetime.datetime(2021, 7, 25, 16, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676170867, 'comment_body': 'Let\'s be consistent with what text we\'re using for ""Email"" in the app. In the commit, we\'ve ""email"", ""E-mail"" and ""Email"".', 'comment_created': datetime.datetime(2021, 7, 25, 16, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676171114, 'comment_body': 'Much like the above section, ""Notifications"", we should use a generic title as this configuration potentially could be used for other things as well later.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676171227, 'comment_body': 'commit-description: OSes*', 'comment_created': datetime.datetime(2021, 7, 25, 16, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676171598, 'comment_body': 'We could rephrase this paragraph to explicate that the configuration allows ZT to copy to the clipboard generally and we use this to copy stream emails for now.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676172447, 'comment_body': 'See my other comment regarding generalization.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676172864, 'comment_body': ""Why did we change it to None? Also, the new change doesn't affect the test?"", 'comment_created': datetime.datetime(2021, 7, 25, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676172993, 'comment_body': 'Since `stream[""stream_weekly_traffic""]` is being used twice, we could extract it in another variable.', 'comment_created': datetime.datetime(2021, 7, 25, 16, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676176008, 'comment_body': 'See my other comment regarding extracting another variable.', 'comment_created': datetime.datetime(2021, 7, 25, 17, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 676177040, 'comment_body': 'I think we can simplify the logic and conditionals a bit if we structure this differently.', 'comment_created': datetime.datetime(2021, 7, 25, 17, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 677741716, 'comment_body': ""As per the commit description, if a stream is newly created (within a week), the `stream_weekly_traffic` would be `None` according to the API docs [here](https://zulip.com/api/get-subscriptions#response).\r\n\r\nI was not sure if I should add new fixtures for this or just change the pre-existing ones (to prevent adding unnecessary tests and keep the commit smaller). Let me know if adding new fixtures is better. :)\r\n\r\nThe latter did not break the tests because the tests check for popup height, which remains the same even if the field is `None` cause we're displaying an appropriate message in that case."", 'comment_created': datetime.datetime(2021, 7, 27, 19, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678682780, 'comment_body': ""I have taken the `realm_message_retention_days` field out of the conditional which makes it a bit cleaner, but I don't get how it can be simplified further. It already looks pretty straightforward?\r\n\r\nCould you please explain what structure you had in mind?"", 'comment_created': datetime.datetime(2021, 7, 28, 22, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678689657, 'comment_body': 'I have added a new fixture with `stream_weekly_traffic` as `None`, without modifying the existing ones.', 'comment_created': datetime.datetime(2021, 7, 28, 22, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 678693970, 'comment_body': ""It's difficult to test this since we have an external module involved which makes use of system packages (`xclip`/`xsel` on Linux, and others on different platforms). We can't know the platform on which our tests are running, and if those packages are installed in the system, nor if the text was successfully copied to clipboard?\r\n\r\nWe can, however, test for the exception case using `mocks` and `side_effects`, IG?"", 'comment_created': datetime.datetime(2021, 7, 28, 22, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 679679485, 'comment_body': ""I'm not sure why we're using an assert here; can we not use a simple conditional with success and failure branches?"", 'comment_created': datetime.datetime(2021, 7, 30, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679680971, 'comment_body': ""I understand that we're introducing this to resolve stream email copying, but this method seems sufficiently general to handle all copying? Specifically, it's only the success message which depends on this being a stream email copy?"", 'comment_created': datetime.datetime(2021, 7, 30, 6, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679682036, 'comment_body': 'I feel we should list the tools first (xclip, xsel, ...2 more on the website?) and then indicate one method such tools may be installed (ie. with the apt-get prefix).', 'comment_created': datetime.datetime(2021, 7, 30, 6, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679682425, 'comment_body': 'You should be able to simplify a lot of this since `(None, ""text"")` is the same as `""text""` for urwid?', 'comment_created': datetime.datetime(2021, 7, 30, 6, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 679693674, 'comment_body': 'Reading this with fresh eyes, my question would be why each case has subtly varying values? This seems a distraction from the variations that *do* matter - ""do those different values change the result? should I be concerned?""\r\n\r\nI\'d suggest a `stream_data_to_vary` dict or similar - like we have in various other tests when building up the data, which we combine with a base dict in the main test. Initially the dict in the case would then be just with varying date_created fields, if that yet?', 'comment_created': datetime.datetime(2021, 7, 30, 6, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 680360894, 'comment_body': ""I agree with Neil. That is what I was talking about in the first statement.\r\n\r\nRe testing, we don't have to test the external module. We could just test whether we're calling the external module correctly."", 'comment_created': datetime.datetime(2021, 7, 31, 13, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 680362386, 'comment_body': 'Yeah, that makes it better. Additionally, you could do something like the following to simplify the `else` block.\r\n```python3\r\n                    stream[""message_retention_days""] = message_retention_days_response(\r\n                        realm_message_retention_days, stream[""message_retention_days""] is None\r\n                    )\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 13, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 680363056, 'comment_body': ""The first 2 (xclip, xsel) are system packages whereas the other 2 (gtk, PyQt4) are python modules, which still needs the system packages to run so I'm not sure why they are listed in the website. The copying also seems to work fine without those python modules installed. Also, gtk and PyQt4 modules are not available in Python3."", 'comment_created': datetime.datetime(2021, 7, 31, 14, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 680416427, 'comment_body': ""I believe you are talking about the first else block?\r\nThe conditional within that have `stream['message_retention_days']` and `realm_message_retention_days` as args to the function call. I don't think they will have the same value at any point of time?"", 'comment_created': datetime.datetime(2021, 7, 31, 22, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 682130231, 'comment_body': '`MODULE + .` ?', 'comment_created': datetime.datetime(2021, 8, 3, 21, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682131527, 'comment_body': 'It would be good to put this simple value (""Test"") into the test function parameters as a default value, which you can then use here and when you do an assert later. That indicates where a specific value should match in the test input and output.', 'comment_created': datetime.datetime(2021, 8, 3, 22, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682141180, 'comment_body': ""Right; should this only be a pyperclip-specific exception, that we can use? The (online) docs for it don't include that, but the source possibly does - and you have that in the test? The package doesn't seem particularly active, otherwise I'd suggest proposing updating the documentation or opening an issue."", 'comment_created': datetime.datetime(2021, 8, 3, 22, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682144033, 'comment_body': 'Do you know when this should fail? Does definitely trying again make sense?', 'comment_created': datetime.datetime(2021, 8, 3, 22, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682153218, 'comment_body': 'I think one reason this could be clearer is that we\'re overwriting the stored value with a textual form?\r\nMaybe ""cached_retention_text"" could be set and used instead? That would also make it clearer if that setting is later updated, that we need to update the cached text too.\r\n\r\nSome of those conditions you\'re checking are identical independently of the stream - if it\'s an old server, all the values should be set to None, you don\'t need to keep checking the server version. Secondly, you\'re checking a conditional statement then calling a function with two bool values; see how you can simplify that? (that\'s Preet\'s latter point, I think)', 'comment_created': datetime.datetime(2021, 8, 3, 22, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682155212, 'comment_body': ""This would be clearer if this text wasn't overwritten, as per my other comment."", 'comment_created': datetime.datetime(2021, 8, 3, 22, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682155798, 'comment_body': 'Is it meaningful here to include a 17-30 case, given that one feature is introduced at 30 and another by 17?', 'comment_created': datetime.datetime(2021, 8, 3, 22, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682619218, 'comment_body': 'I was not sure what to mention as a possible *try*/*hint*, since failing to copy would mean it\'s an internal `pyperclip` issue. Re-thinking now, I believe we could mention something along the lines of: ""Could not copy Test. Error in the dependency library"" or just remove the second sentence altogether?', 'comment_created': datetime.datetime(2021, 8, 4, 13, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 682727216, 'comment_body': ""Possibly worth rewording and avoiding the 'try again' sentence - after all, we *have* copied, we can just warn (strongly) that a pasted value may be incorrect, or something like that? That's more transparent to the user - conceptually they may have some special clipboard system which could upset this, for example? Then they'd know it was copied but a verification didn't work."", 'comment_created': datetime.datetime(2021, 8, 4, 15, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 682797827, 'comment_body': ""@neiljp The above makes sense. Just had a few small doubt; for server versions < 17 do we need to include this field in the `Subscription` data?\r\n\r\nAlso, re your last statement:\r\n> you're checking a conditional statement then calling a function with two bool values;\r\n\r\nThe `message_retention_days_response` method takes an `int` and a `bool` (not 2 bools) so I don't know if that could be simplified further. Or, am I misunderstanding you guys?"", 'comment_created': datetime.datetime(2021, 8, 4, 16, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 682878388, 'comment_body': "">for server versions < 17 do we need to include this field in the `Subscription` data?\r\n\r\nIf we include this field with a value of `None`, as before, then it'll get mixed with the special `None` value (denoting that it inherits the organization-level setting) since we are not over-writing this field."", 'comment_created': datetime.datetime(2021, 8, 4, 18, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 684782668, 'comment_body': 'minor: The new field(s) should be added in another commit to make this a pure refactor.', 'comment_created': datetime.datetime(2021, 8, 8, 14, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684784344, 'comment_body': ""When does this happen? As an end-user, the message doesn't seem to be helpful."", 'comment_created': datetime.datetime(2021, 8, 8, 14, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684786428, 'comment_body': ""What's the reasoning behind this check?"", 'comment_created': datetime.datetime(2021, 8, 8, 14, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 684793684, 'comment_body': 'This might happen if there is an internal issue with the `pyperclip` module. Neil also explained other possible trigger conditions in [this](https://github.com/zulip/zulip-terminal/pull/880#discussion_r682727216) comment.', 'comment_created': datetime.datetime(2021, 8, 8, 15, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 684794239, 'comment_body': 'This was done to address your previous review [here](https://github.com/zulip/zulip-terminal/pull/880#discussion_r679679485), in which we decided to not use `assert` statements but simple conditional to check the correctness of the copied text. ', 'comment_created': datetime.datetime(2021, 8, 8, 15, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 684811653, 'comment_body': ""Some appear to have just shifted to the next commit; let's address these in a different PR?"", 'comment_created': datetime.datetime(2021, 8, 8, 18, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 684888356, 'comment_body': 'Ah, I understand now. I was under the impression that the module would copy correctly or throw an exception altogether. Thanks for clarifying.', 'comment_created': datetime.datetime(2021, 8, 9, 3, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 688131083, 'comment_body': ""When is days going to be None? Shouldn't we always have a server-wide value available?"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688132205, 'comment_body': 'minor: `message_retention_days is None` is used twice here, which suggests extracting it into a name would be useful.', 'comment_created': datetime.datetime(2021, 8, 12, 22, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688132729, 'comment_body': ""Where does the zero come from? We may want to remove this comment in any case, since we're hiding the raw values/versions and intending the text to be used now?"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688133448, 'comment_body': ""I think we've resolved this with the 2-step cached-text process?"", 'comment_created': datetime.datetime(2021, 8, 12, 22, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688134163, 'comment_body': 'The views change overall is very small, but with the tests it may be good to split the model and view changes into 2 commits - this is getting quite long, and multiple independent tests suggests this too :)', 'comment_created': datetime.datetime(2021, 8, 12, 22, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688141154, 'comment_body': 'Minor: ""key"" is very broad; these are stream ids, right?', 'comment_created': datetime.datetime(2021, 8, 12, 23, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688146931, 'comment_body': ""Ah, this is the `None` case that I queried elsewhere, where the organization value slips through to the stream level.\r\n\r\nWas `None` a realm value, though? I assume it followed the original rule, ie. -1 for indefinite and +n for days, so I'm not sure about None?\r\n\r\nThe #api-design topic doesn't seem to have clarified this exactly, so perhaps Mateusz could answer in a follow-up or you could refer him here?"", 'comment_created': datetime.datetime(2021, 8, 12, 23, 24, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 688497993, 'comment_body': ""Right, this is why we were handling the `days == None` case earlier.\r\nTo clarify, `None` was a realm value earlier (between server v2-3, as per my testing on the dev server) and it had the same meaning as the current `-1` for indefinite which was changed by @mateuszmandera's [commit](https://github.com/zulip/zulip/commit/7a03e2a7fe259a3410cadbb1a9a4955aa1fae3c7) afterwards. So to summarize, I believe this is how the server's representation for message retention changed over time:\r\n- Server version 2-3: realm value could have `None` for indefinite and +n for days. No stream value\r\n- Server version 3.0: added stream message retention days, with `None` for org default, `-1` for indefinite and +n for days.\r\n- Server version 3+: realm's `None` value was changed to `-1` by Mateusz's above commit for consistency with the stream value\r\n\r\n(I hope Mateusz should get notification from the above mention, still, I'll refer him here from the stream to confirm my hypothesis)"", 'comment_created': datetime.datetime(2021, 8, 13, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688665053, 'comment_body': ""Ah, that was an interesting dive through old commits :grinning: This overview sounds correct to me based on that. To be a bit more precise, `message_retention_days` was a thing for streams before 3.0 but only in the sense of the backend logic - but it indeed wasn't exposed via the API in any way (the value had to be set manually via `manage.py shell` or db query). I presume that `zulip-terminal` only cares about the API history here though, where indeed this is only a thing since 3.0 - https://github.com/zulip/zulip/commit/c488a35f10ac7b1e5e20fc46302c85ce2364e825"", 'comment_created': datetime.datetime(2021, 8, 13, 17, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 688729309, 'comment_body': 'Yes, this is resolved with the `cached_retention_text` and the idea to fallback to the realm value on older server versions.', 'comment_created': datetime.datetime(2021, 8, 13, 19, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 688730353, 'comment_body': 'I think this should be already answered by the below comment of mine and Mateusz?', 'comment_created': datetime.datetime(2021, 8, 13, 19, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '22934ab1e230ee0ecb535cb430c259f3f6c5daf3', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b933405219fff76b4c91b5b8077c1946cfe6e6ca', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
706097578,Define and use Stream data fixture from conftest,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR defines the `general_stream` and `secret_stream` dictionaries in conftest to pytest fixtures, allowing us to re-use them in tests that need stream data. The defined fixtures are currently used in tests for StreamInfo popup.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->
- refactor: conftest: Define general_stream and secret_stream as fixtures.
- conftest: Add rendered_description field to stream fixtures.
- tests: popups: Use stream fixture instead of defining custom streams.

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->

- Blocks #880 


",True,1115,https://api.github.com/repos/zulip/zulip-terminal/pulls/1115,https://github.com/zulip/zulip-terminal/pull/1115,closed,49,58,2,3,2,0,3,0,"[{'name': 'area: tests'}, {'name': 'size: XL'}, {'name': 'area: refactoring'}]",2021-08-08 19:51:50+00:00,2021-08-08 23:15:36+00:00,12226.0,3:23:46,[],"[{'commit_sha': '931102fd69f41d16e9d23f02ca89708bd23730d2', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c9b5324020d441a8d8b7dcbd2ed22cc93b426d3', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cdae51ce5a6c39d38f3df788baaf6510d959f52', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
546003005,views: Updated Stream Info.,"This PR is divided into two parts:
- Show Stream Members in Stream Info view - The First commit leading this PR adds the feature to view Members subscribed to a stream from inside the Stream info view on pressing `m` key.
- Show estimated messages per week for streams - The Second commit will add another submenu inside Stream info which will show the Estimated messages per week gathered inside that stream.

Tests amended.
This PR fixes #753.",False,856,https://api.github.com/repos/zulip/zulip-terminal/pulls/856,https://github.com/zulip/zulip-terminal/pull/856,closed,132,8,4,2,5,5,4,0,"[{'name': 'enhancement'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-12-28 08:59:34+00:00,2021-01-15 16:03:20+00:00,1580626.0,"18 days, 7:03:46","[{'comment_id': 550396573, 'comment_body': 'This just shows a fixed number for this parameter? Please add this entry in the commit which adds this feature :)', 'comment_created': datetime.datetime(2020, 12, 31, 4, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 550398151, 'comment_body': 'We already define most of this on the previous line.', 'comment_created': datetime.datetime(2020, 12, 31, 5, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 550417658, 'comment_body': 'This commented code should be in this commit for showing members, right?\r\n\r\nWe should sort this in a similar way as we do the presence list (though probably not per active status). Note that showing stream members in this way might just be a temporary feature until we add filtering of the user list.', 'comment_created': datetime.datetime(2020, 12, 31, 7, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 550418101, 'comment_body': ""I'm not sure the members list needs a category, as there's just a list of users.\r\n\r\nFor the number of members, we can place this in the stream info popup, before the `Press m to view` text."", 'comment_created': datetime.datetime(2020, 12, 31, 7, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 550418427, 'comment_body': ""All of this is different from the previous commit? Let's just add all the message count details into this commit."", 'comment_created': datetime.datetime(2020, 12, 31, 7, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '339ab8ff3f9fd98deb892655211da381fc4a2350', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '393b58295e857eba9700b4905fafd8ecd33432bb', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
556189735,bugfix: views: Fixed Exit Popup from Stream Members view.,Follow-up bugfix for merged PR #T856.,False,878,https://api.github.com/repos/zulip/zulip-terminal/pulls/878,https://github.com/zulip/zulip-terminal/pull/878,closed,1,1,1,1,1,0,1,0,[{'name': 'size: XS'}],2021-01-16 15:23:07+00:00,2021-01-16 16:41:30+00:00,4703.0,1:18:23,[],"[{'commit_sha': 'f5c90d2e15d49fa02cd0fb7b28c1e8a2184a26f6', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
564388578,model/views: Add notification checkboxes in Stream Info popup.,"- Added Visual desktop notification checkbox in StreamInfo.

Gradually Fixes #887.",True,900,https://api.github.com/repos/zulip/zulip-terminal/pulls/900,https://github.com/zulip/zulip-terminal/pull/900,closed,222,20,9,8,2,15,4,0,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'area: event handling'}, {'name': 'missing feature: user'}]",2021-01-30 09:07:45+00:00,2021-07-13 20:17:01+00:00,14209756.0,"164 days, 11:09:16","[{'comment_id': 663515197, 'comment_body': 'The first sentence in the commit description isn\'t necessary.  Generally, commit descriptions should talk about themselves for the most part. :)\r\n\r\nLet\'s include a newline post ""Tests amended"".', 'comment_created': datetime.datetime(2021, 7, 4, 14, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663515986, 'comment_body': 'How about we do not mention ""desktop"" throughout the codebase so that whenever we have a separate section for ZT notifications we would only need to change the respective method body? Of course, we would mention in a comment that we\'re currently relying on desktop notification wherever necessary. (Something to bring it up on the stream.)', 'comment_created': datetime.datetime(2021, 7, 4, 14, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663517351, 'comment_body': ""Let's use newlines to separate the Arrange, Act and Assert (AAA) bits."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663517602, 'comment_body': 'The ids don\'t speak about the test case but what\'s the state of `desktop_notified_streams`. For instance, it would be better to use ""notification_enabled"" or something along those lines for the first id.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518163, 'comment_body': ""I feel like should be in the parameterize blocks as reading `final_desktop_notified_streams` in the parameterization doesn't tell how we reached there finally."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518320, 'comment_body': ""You don't seem to be using mocker and stream_button in the method body anywhere. Let's remove them."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518377, 'comment_body': 'See my other comment related to ids.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518437, 'comment_body': 'See my other comment re AAA.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518736, 'comment_body': ""Let's be consistent with variable naming and use `*_notifications_*` everywhere."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663518927, 'comment_body': '`mocker` is unused in the method body.\r\n', 'comment_created': datetime.datetime(2021, 7, 4, 15, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663519454, 'comment_body': 'The parans are not needed.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663520291, 'comment_body': 'The stream_id could be a default param.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663520887, 'comment_body': ""The parans aren't needed anymore."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663521112, 'comment_body': 'mocker is unused.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 663521531, 'comment_body': 'The ""desktop"" bit make end-users wonder whether this would only affect desktop notifications and not ZT\'s. Let\'s discuss it on the stream as well.', 'comment_created': datetime.datetime(2021, 7, 4, 15, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': 'dbc52990f75c3ccad284c4778c57a8954909d00a', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fbc468de8c747bdc1c688c3a48bea8255cb1cba', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9918d7085439d127b57df465d6c4d613de470318', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28c68f6931d2ba9bfba4557a2d02d138813a146', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36d0f192d19a156f9568fa6610063e8ac37e49ed', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bafd67066819659c395ada0d989a173a2d617c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2979db98852f65e2dc176b2b6dfd54e1d16f8a3f', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '070dee8363880e4bf3bee334e18f0b01932f24f7', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
689461669,Clearly indicate nuances in Visual notification settings.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This indicates more explicitly subtle details about the recently introduced Visual notification change via #900. Namely, we indicate that the ""Visual notification"" setting directly affects other clients such as Web app and desktop. Also, we remind the user
to configure/enable notifications if the checkbox is disabled.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

**Commit flow**
- views: Indicate visual notifications setting affects other clients.
- views: Indicate configuring/enabling notifications if checkbox disabled.

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
I have used ""msg_mention"" style attribute for the suffix text when the checkbox is disabled. Although this looks good visually on all themes, I'm concerned that the attr-name does not align with our context? 

",True,1080,https://api.github.com/repos/zulip/zulip-terminal/pulls/1080,https://github.com/zulip/zulip-terminal/pull/1080,closed,28,15,6,3,1,3,2,0,"[{'name': 'area: UI'}, {'name': 'size: M'}]",2021-07-13 23:17:21+00:00,2021-07-14 16:43:17+00:00,62756.0,17:25:56,"[{'comment_id': 669757618, 'comment_body': ""This is a bit unclear since you're reassigning another value in the var and later assigning another value conditionally. Could we call it something else?"", 'comment_created': datetime.datetime(2021, 7, 14, 16, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 669759454, 'comment_body': 'Perhaps append `_setting`?', 'comment_created': datetime.datetime(2021, 7, 14, 16, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 669760697, 'comment_body': ""commit-description: so that it's*"", 'comment_created': datetime.datetime(2021, 7, 14, 16, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': '5c3908af88bf8c695e80829155a9f0ac38d124d4', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db526fa343818011d40eaf08999ed7c6d883299a', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89ae3e17eed489b99c3214be6fa8ce448eac8014', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
543607957,boxes/helper: Updated to new quoting style.,"This PR aims to bring ZT one step more closer to its web counterpart. The quoting style is changed to include the name of the user whose message was quoted(and his `user_id`) along with a link that would narrow to the quoted message. This is the new markdown/bugdown syntax of a quoted message:
````
@**Full Name|1234(id)** said[link_to_msg]:
```quote
    quoted_msg
```
````

For interoperability, the link to the quoted message is the same as that of the web app, so narrowing to the quote in ZT is possible.

Also, the URL generation and encoding part of the code has been shifted to a new module named `server_url.py` to separate it from the rest of the code inside `helper.py` and make it easier for constructing and deconstructing server URL in the future.

This PR should fix #514 and #151(partially).",False,854,https://api.github.com/repos/zulip/zulip-terminal/pulls/854,https://github.com/zulip/zulip-terminal/pull/854,closed,218,6,6,3,4,10,4,0,"[{'name': 'enhancement'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-12-21 17:01:37+00:00,2021-01-20 21:53:03+00:00,2609486.0,"30 days, 4:51:26","[{'comment_id': 546878586, 'comment_body': ""This generated text looks fine compare to the previous version, though it may be clearer to read using one `.format` - and if clean enough may mean you don't need the comment above it!\r\n\r\nAs a side-note, you include the sender id here, which is great - there is another issue involving this, and possibly other cases in the code base where we would benefit from making that clear in mentions :+1:\r\n\r\nRegarding Anders' point (https://github.com/zulip/zulip-terminal/pull/854#discussion_r547011233) we definitely should fix this, though in a separate commit, which you could do first given that this formatting is pending the url code situation."", 'comment_created': datetime.datetime(2020, 12, 21, 19, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 547011233, 'comment_body': 'This will fail to correctly quote a message that already contains a quote or a code block. You need to quote ```` ``` ```` with ````` ```` `````, ````` ```` ````` with `````` ````` ``````, and so on. See [`get_unused_fence`](https://github.com/zulip/zulip/blob/160cc5120aae0870c68e6e3a12a391035bd25843/static/shared/js/fenced_code.js#L241-L251) (called [here](https://github.com/zulip/zulip/blob/160cc5120aae0870c68e6e3a12a391035bd25843/static/js/compose_actions.js#L444)) in the web app.', 'comment_created': datetime.datetime(2020, 12, 22, 1, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 547129399, 'comment_body': ""Thanks for the review @andersk. I probably missed that part of code logic, from the webapp. Nevertheless, I am now supposed to refactor the whole code along with some server code into a new module `server_urls.py` as instructed by Neil in CZO. I'll keep this review in mind while refactoring."", 'comment_created': datetime.datetime(2020, 12, 22, 8, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 548443474, 'comment_body': ""I have fixed the issue pointed by Ander's in a separate commit and refactored some parts of the code as mentioned at the beginning of this comment too. The topics with `/` in them are working fine now(there was a small bug in `urllib.quote` that I missed). So, I guess we can close this conversation as resolved."", 'comment_created': datetime.datetime(2020, 12, 24, 8, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 553010622, 'comment_body': 'If you want to put this addition as the first commit we can merge this separately.\r\n\r\nHowever, it would be useful to have some tests of the introduced function (and perhaps the integrated case) in the same commit too.', 'comment_created': datetime.datetime(2021, 1, 6, 23, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 553011274, 'comment_body': ""Separate lines for each parameter and extracting the raw message calculation would make this easier to read. We can use a smaller indent too?\r\n\r\nThis won't apply if you put this commit first, but when you have both the fencing and improving quoting, note that we want to avoid calling the server twice for the get_raw_message."", 'comment_created': datetime.datetime(2021, 1, 6, 23, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 553011481, 'comment_body': ""You don't have types specified here - can we improve this?\r\n\r\nDoes this come from a translation of a function in the server? We should reference it as a comment, if so, and perhaps when. Also if you used some particular logic to translate it."", 'comment_created': datetime.datetime(2021, 1, 6, 23, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 553014464, 'comment_body': ""This commit doesn't seem to just *move* the code across, but also changes it... so doesn't this really replace the first commit? Doesn't this make the first commit meaningless? Which version are we including? Since this is the start of this code, we can just add it to the right file in the first place :)\r\n\r\nAs per my note elsewhere, if we bring code across from the server (which this looks like), we should indicate details, and what has changed or not - as well as anything else that you used in the process that's relevant."", 'comment_created': datetime.datetime(2021, 1, 6, 23, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 553573035, 'comment_body': 'I have improved type annotations to `str`.\r\nNot necessarily, its referred from `zulip/static/shared/js/fenced_code.js`, if I am correct in assuming by server you mean `zulip/zerver`. I have added short comments addressing this function.', 'comment_created': datetime.datetime(2021, 1, 7, 20, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 553575351, 'comment_body': 'You are correct, the last commit ultimately makes the first commit useless. I have removed the first commit. :)\r\n\r\nI have added brief comments for each of the new functions added. If you want I can reword those comments to be more verbose. :sweat_smile: ', 'comment_created': datetime.datetime(2021, 1, 7, 20, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '874362744c8bb9fda747b64b5a4b0f7b3cdd5d61', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b8b8ebcdb136fa6b928fcedd5952c2f121aaa5', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf8358ae261be2ada7ad81f45f595f052ced166b', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
444319212,Handle internal links,"The PR adds support for handling internal links - stream, topic and near narrow.

#### Commits
The commits introduce `MessageLinkButton` in `MsgInfoView` and then incrementally add support for different narrows.

I would greatly appreciate any feedback on the changes, the commit chronology and the structure in general.

Partially fixes #352 and #764.",True,708,https://api.github.com/repos/zulip/zulip-terminal/pulls/708,https://github.com/zulip/zulip-terminal/pull/708,closed,566,4,4,3,13,36,2,0,"[{'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-07-04 19:18:26+00:00,2020-08-29 04:01:21+00:00,4783375.0,"55 days, 8:42:55","[{'comment_id': 449798857, 'comment_body': ""What's the reasoning behind this particular assert? The buttons don't render properly if the prefix character is >1.\r\n\r\nI need numeric (and incremental) `prefix_character` for in-line message links which could be >1 (e.g. 10)."", 'comment_created': datetime.datetime(2020, 7, 4, 19, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 449808670, 'comment_body': ""This defines how the current button works, ie. it is not guaranteed to work outside those bounds. If you wish it to be able to handle more, then we likely want to refactor the class to work with longer text.\r\n\r\nThat said, you're not using the extra feature which the prefix allows, which from memory is just a specific style. If you don't need that then you can skip the prefix and just put it all in the text?"", 'comment_created': datetime.datetime(2020, 7, 4, 21, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 457576505, 'comment_body': ""Thanks for the pointer. Given the issues with `caption`, `prefix_character` and that the existing methods weren't needed, I ended up implementing a new `urwid.Button` subclass to better tailor my needs for the message links."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 458809664, 'comment_body': ""We could TypeVar this since you use it in multiple places (even tests).\r\n\r\n```\r\nMESSAGE_LINKS = TypeVar('MESSAGE_LINKS', OrderedDict[str, Tuple[str, int, bool]])\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 13, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 458880040, 'comment_body': 'I am currently showing `message_links` at the bottom since it is straightforward to implement and we were planning to move reactions away from `MsgInfoView` in #707. Though, I am not sure when that would be integrated. Thoughts?', 'comment_created': datetime.datetime(2020, 7, 22, 15, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 458952287, 'comment_body': ""Resolved in PM. (We're moving ahead with `message_links` before 'Reactions'.)"", 'comment_created': datetime.datetime(2020, 7, 22, 17, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 459171837, 'comment_body': 'If this can be None, then `Optional[MESSAGE_LINKS]`?', 'comment_created': datetime.datetime(2020, 7, 23, 1, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sumanthvrao', 'type': 'User'}, {'comment_id': 459217725, 'comment_body': ""Apart from the conversation that was had in PM, `OrderedDict` typing doesn't work as a type alias or var (see [mypy bug](https://github.com/python/mypy/issues/6904))."", 'comment_created': datetime.datetime(2020, 7, 23, 5, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 459222247, 'comment_body': 'This can be an empty `OrderedDict` but I believe mypy covers that currently?', 'comment_created': datetime.datetime(2020, 7, 23, 5, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 466858812, 'comment_body': 'The commit title (description) for this could be improved - imagine reading just that line after coming back to it - what does this actually do? (without reading the code)', 'comment_created': datetime.datetime(2020, 8, 7, 7, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466859331, 'comment_body': 'Parsing the URL might be more clear here?', 'comment_created': datetime.datetime(2020, 8, 7, 7, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466860935, 'comment_body': 'Is this and `self.stream_id` for `narrow_to_stream`?\r\n\r\nIf so, it may be worth adding a comment with the assert statements.', 'comment_created': datetime.datetime(2020, 8, 7, 7, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466862880, 'comment_body': 'This seems rather cryptic - is there a better expression for this? What narrow failure are we expecting? Should the narrow methods return a value instead?', 'comment_created': datetime.datetime(2020, 8, 7, 7, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466863191, 'comment_body': 'ids are always good :)', 'comment_created': datetime.datetime(2020, 8, 7, 7, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466864735, 'comment_body': ""`(SERVER_URL + '/#narrow/stream/asdasdgasdgasdg', ?),` could be in a message typed in manually, I think? What should happen?"", 'comment_created': datetime.datetime(2020, 8, 7, 7, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466866802, 'comment_body': ""I seem to recall a discussion about wanting decoding of server URLs previously on czo - might be worth a check, maybe it's something that could be added to the python API as a utility?"", 'comment_created': datetime.datetime(2020, 8, 7, 7, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 466869673, 'comment_body': 'Could you describe what near vs not-near means in the commit, and maybe in the ids?', 'comment_created': datetime.datetime(2020, 8, 7, 7, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 467607771, 'comment_body': ""Fixed with a simple expression. I was only expecting failure from the code that I previously had here (early return statements), but I have improved the structure now.\r\n\r\nRe narrow methods, I'd be inclined towards handle failures, if any, in the narrow methods itself than returning a value as a separate amendment."", 'comment_created': datetime.datetime(2020, 8, 9, 17, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 467607840, 'comment_body': '(Being discussed in [#integrations > Decode server URLs](https://chat.zulip.org/#narrow/stream/127-integrations/topic/Decode.20server.20URLs).)', 'comment_created': datetime.datetime(2020, 8, 9, 17, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 468250604, 'comment_body': 'We should really only be looking at the fragments from this point, likely only matching the cases you conveniently put above :) For example, you currently match the link-but-not-valid `https://chat.zulip.org/stream/#narrow/stream/1-announce`, which does link to #announce in this code but is invalid.\r\n\r\nThe same applies to the topic and near checks.', 'comment_created': datetime.datetime(2020, 8, 11, 0, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468260855, 'comment_body': ""The helper method you're using here is close to what we've ended up using recently as a check to avoid exceptions. How about a `Model.is_user_subscribed_to_stream`?\r\n\r\nOne sign of this is that we're passing an attribute (of another object) to a regular function, so that object may as well be the 'self' :)\r\n\r\nThat said, currently we need the `stream_name` to make the narrowing work correctly?"", 'comment_created': datetime.datetime(2020, 8, 11, 0, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468275088, 'comment_body': 'This may change if this is restructured to parse/validate the url/fragments first, but at least as it stands I think it would be clearer if they were passed around rather than set and accessed in another method.', 'comment_created': datetime.datetime(2020, 8, 11, 1, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 468276506, 'comment_body': ""In older server versions the stream-id was optional, so it's possible we might support recognizing that, for old messages."", 'comment_created': datetime.datetime(2020, 8, 11, 1, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 470746577, 'comment_body': 'Thanks. I have extracted `Model.is_user_subscribed_to_stream` as method in the latest update.\r\n\r\nYes, we need `stream_name`.', 'comment_created': datetime.datetime(2020, 8, 14, 17, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 471178048, 'comment_body': ""Unless you plan to extend this method, ie. you're always returning name or id, would it be simpler to return a mini-dict which you can integrate into the other dict? That would also make the meaning of the return values more obvious here. eg. `return dict(stream_id=int(stream_id))`."", 'comment_created': datetime.datetime(2020, 8, 17, 0, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471178567, 'comment_body': 'You define this here, but then return an empty dict at the end. An `else` block or simple return would be clearer.', 'comment_created': datetime.datetime(2020, 8, 17, 0, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471178998, 'comment_body': 'You have a lot of casts - this should be able to be simplified using a TypedDict.', 'comment_created': datetime.datetime(2020, 8, 17, 0, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471180465, 'comment_body': ""Would it be useful to have this section be where we ensure that the name and id are both present, if one/both are valid?\r\n\r\nThese two checks could be combined, as currently they both check for being subscribed, just by name vs id.\r\n\r\nWhen we switch the narrow, we'll then know that they're both present and valid."", 'comment_created': datetime.datetime(2020, 8, 17, 0, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471182222, 'comment_body': 'These notes on calling points are unnecessary.', 'comment_created': datetime.datetime(2020, 8, 17, 0, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471184817, 'comment_body': ""If we guarantee we have stream name+id at this point, then we don't need this extra step."", 'comment_created': datetime.datetime(2020, 8, 17, 0, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471185559, 'comment_body': 'Rather than conditionally adding each of these, perhaps add them unconditionally (generate the full dict each time) and handle the validation slightly differently? ', 'comment_created': datetime.datetime(2020, 8, 17, 1, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 471185814, 'comment_body': 'We can combine these lines? (and a few similar others)', 'comment_created': datetime.datetime(2020, 8, 17, 1, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 473279228, 'comment_body': '@neiljp Are you suggesting it to be moved to `_get_steam_data()`? I think it fits better here for two reasons:\r\n* The overall parse -> validate -> narrow flow seems consistent.\r\n* It is clearer to validate topic name later.', 'comment_created': datetime.datetime(2020, 8, 19, 19, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 473284918, 'comment_body': ""Ah, I see how what you're suggesting fits better. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 19, 19, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 473984135, 'comment_body': ""The following was confusing `mypy`:\r\n```python3\r\nParsedNarrowLink = TypedDict('ParsedNarrowLink', {\r\n    'narrow': str,\r\n    'stream_id': Optional[int],\r\n    'stream_name': Optional[str],\r\n...\r\nstream_data = cls._decode_stream_data(fragments[2])\r\nparsed_link = dict(narrow='stream', **stream_data)  # type: ParsedNarrowLink\r\n```\r\n\r\nSo, to assist `mypy` and make things simpler, I introduced a `TypedDict` for the stream data and nested it instead.\r\n"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 474857759, 'comment_body': 'Renamed `StreamData` to `DecodedStream` to avoid conflict with the recently merged `StreamData` typed dict.', 'comment_created': datetime.datetime(2020, 8, 21, 18, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}]","[{'commit_sha': '1f873a90e3761a0c0d464df06d41ce3b8ca1a440', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73cc21e379ef79ad3b23755206889bfa9a8b9093', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '330cef945e3a51a75acdee0f91479a011cee813a', 'committer_username': 'preetmishra', 'committer_name': 'Preet Mishra', 'committer_email': 'ipreetmishra@gmail.com', 'commit_date': datetime.datetime(2018, 9, 26, 17, 5, 44, tzinfo=datetime.timezone.utc)}]",Preet Mishra,43616959,ipreetmishra@gmail.com,User,,18,,24,66
520557949,model: Add footer notification for messages.,"This will set a footer text notifying the user everytime
he sends or edits a message that is outside the current
narrow. This will give the user a pointer as to why the
message disappeared from the screen.

Fixes #781.",False,824,https://api.github.com/repos/zulip/zulip-terminal/pulls/824,https://github.com/zulip/zulip-terminal/pull/824,closed,116,11,5,2,4,14,4,0,"[{'name': 'enhancement'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}]",2020-11-13 12:40:20+00:00,2021-02-18 07:56:39+00:00,8363779.0,"96 days, 19:16:19","[{'comment_id': 523099578, 'comment_body': ""This is roughly the response we want to give to the user, but note that since this method handles all incoming new-message events then this will also be triggered by other people sending messages outside of the current narrow.\r\n\r\nYou could try updating the code here, or have it more directly use the methods which send the message to the server. They should subsequently trigger this method, so it's just doing a check at a different place."", 'comment_created': datetime.datetime(2020, 11, 13, 17, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 523100804, 'comment_body': ""Is this a different issue you're working on? If so, best to keep it to a separate commit. Unless it can't be separated, it also isolates which code change was required to fix the issue you're referring to in the commit message."", 'comment_created': datetime.datetime(2020, 11, 13, 17, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 523384741, 'comment_body': ""No, it's for the same issue. This was for the case when a message's subject is edited outside of the current narrow. So the message disappears from the current narrow and is shifted to some other narrow. But, I think the logic behind this is also incorrect. I'll have to think more on this. Any pointers that you would like to give?"", 'comment_created': datetime.datetime(2020, 11, 14, 6, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 523389636, 'comment_body': ""This is sort of the same issue, but I think it would be fine to first work on showing a message when sending to a different narrow than the current one, then work on what happens with editing as a follow-up.\r\n\r\nI think in both cases the focus is on what the active user does within this ZT session, so it's likely best to hook into the messages to the server, rather than events from it."", 'comment_created': datetime.datetime(2020, 11, 14, 7, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 523431834, 'comment_body': ""I have updated the code, to fix the above issue as well as extended it for footer notification outside of streams. I have also amended the tests for `model` and now `make check` is working fine. I haven't removed debugging statements yet. But I'll do it as soon as the changes are finalized.\r\n\r\nI didn't hook up to the methods which send message directly to the server, but I have the code for that in a separate branch locally. I can push that code here if this method does not work for you."", 'comment_created': datetime.datetime(2020, 11, 14, 15, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 575890780, 'comment_body': ""`request` doesn't really have any meaning in this context."", 'comment_created': datetime.datetime(2021, 2, 15, 0, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 575891438, 'comment_body': 'Can we also include other narrows here, for completeness? For example, all-messages, starred, mentioned, and maybe a search narrow?', 'comment_created': datetime.datetime(2021, 2, 15, 0, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 575896969, 'comment_body': 'This is duplicated, which suggests to me this could be simpler.', 'comment_created': datetime.datetime(2021, 2, 15, 1, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 575897584, 'comment_body': ""Could this text be expanded to be more descriptive? There's no test for this."", 'comment_created': datetime.datetime(2021, 2, 15, 1, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 575897686, 'comment_body': 'To do what? You might combine the boolean test into a variable in any case.', 'comment_created': datetime.datetime(2021, 2, 15, 1, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 577112614, 'comment_body': 'How about `message`?', 'comment_created': datetime.datetime(2021, 2, 16, 20, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 577340178, 'comment_body': ""That's good, though the type will presumably be a Composition now?"", 'comment_created': datetime.datetime(2021, 2, 17, 5, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 577456644, 'comment_body': ""For that, we would need to type-annotate our `request` dict(in `model`) to appropriate `Composition`?\r\n\r\nI tried doing this, but it seems like MyPy doesn't allow converting existing dict to `TypedDict`(see [mypy issue #8890](https://github.com/python/mypy/issues/8890)). Is there any other way of doing so?\r\n\r\nEDIT: I figured out another way - by annotating the `request` dict when creating it, before passing it to the API, and adding `total=False` param in `StreamComposition` because the `stream_id` field should not be added to the request."", 'comment_created': datetime.datetime(2021, 2, 17, 9, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 577653849, 'comment_body': 'Added. :)', 'comment_created': datetime.datetime(2021, 2, 17, 14, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '1d2152daff53c979fcff0233a585ce36a72a9301', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3624c33540c0b68aae414713b885c94bced12547', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
585907085,bugfix: boxes: Fix quote text rendering for xfails.,,False,942,https://api.github.com/repos/zulip/zulip-terminal/pulls/942,https://github.com/zulip/zulip-terminal/pull/942,closed,24,17,2,1,7,19,2,0,"[{'name': 'bug'}, {'name': 'size: M'}]",2021-03-05 21:57:21+00:00,2021-04-21 13:35:05+00:00,4030664.0,"46 days, 15:37:44","[{'comment_id': 588780830, 'comment_body': ""A quick test indicated the server actually generates a `<br>` (not xml) and after both A and B too?\r\n\r\nThere are also extra newlines in each blockquote associated with ::before and ::after - I've not looked at this in a while but are we relying on those to be present for spacing purposes?"", 'comment_created': datetime.datetime(2021, 3, 5, 23, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588847997, 'comment_body': ""There's a similar test just above this, that had `<br/>` as well, so I didn't cross-check with the server.\r\n\r\nYes, I presume they are there because the quoting expects some text after the quote, hence the `newline`?"", 'comment_created': datetime.datetime(2021, 3, 6, 7, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 588914302, 'comment_body': 'Is removal of this an optimization only?', 'comment_created': datetime.datetime(2021, 3, 6, 18, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588915360, 'comment_body': ""It's great to adjust this, as we discussed, but it would be good to keep test changes as a separate commit first - that helps to explain why the test text is reformatted, for example, without changing the implementation and ensuring the tests still pass.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 3, 6, 18, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588915603, 'comment_body': 'This does appear to be the layout we obtain in the content?', 'comment_created': datetime.datetime(2021, 3, 6, 18, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588915963, 'comment_body': 'When separating out the test changes, you could change the expected output to match the style visually? It would take more lines, but I think it could be clearer to identify ""{} A\\n{} B\\n\\nC"" as something like the following?\r\n```\r\n{} A\\n\r\n{} B\\n\\n\r\nC\r\n```\r\n', 'comment_created': datetime.datetime(2021, 3, 6, 18, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588916922, 'comment_body': 'Given we expect to have many more tests, it may be useful to put the ids inline in the first commit I mentioned. Perhaps something like `import pytest.param as case` to be concise?', 'comment_created': datetime.datetime(2021, 3, 6, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 588920478, 'comment_body': ""Yes, this seemed unnecessary. The fact that if `findAll` returns an empty list, the for loop won't run anyways, was enough?"", 'comment_created': datetime.datetime(2021, 3, 6, 19, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 588924019, 'comment_body': 'So, do I need to use `pytest.param`, with inline ids, for all the test or just xfails?\r\nI am guessing the former?', 'comment_created': datetime.datetime(2021, 3, 6, 19, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 588924168, 'comment_body': 'Currently, we use them just for `xfails`.', 'comment_created': datetime.datetime(2021, 3, 6, 19, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 588974423, 'comment_body': 'By having it for all, this allows the ids to be near to each parametrization - and also makes it easier to add/remove things like xfails if we wish.', 'comment_created': datetime.datetime(2021, 3, 7, 5, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589096133, 'comment_body': 'Does the server send this over two lines?', 'comment_created': datetime.datetime(2021, 3, 7, 22, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589098828, 'comment_body': 'Could you explain why the newlines are removed?', 'comment_created': datetime.datetime(2021, 3, 7, 22, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589098919, 'comment_body': 'This applies to the original links too, but these are actually invalid links - how do these pass?', 'comment_created': datetime.datetime(2021, 3, 7, 22, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589099459, 'comment_body': 'This looks rather messy. Can this be included in the quote handler? If so, would it be clearer there?', 'comment_created': datetime.datetime(2021, 3, 7, 22, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 589204045, 'comment_body': 'Ahh, yes. Sorry, forgot to change this!', 'comment_created': datetime.datetime(2021, 3, 8, 6, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 589207856, 'comment_body': ""> blank lines after multi-quotes, eg. no response to a quote and quoted again -> extra blank line per quote level\r\n\r\nThis is for addressing the first point of your review above. I thought you wanted those extra newlines to be removed. This is the code that that is responsible for this change:\r\n```python3\r\nif(markup[-1] == '\\n'\r\n   and isinstance(markup[-2], tuple)\r\n   and markup[-2][0] == 'msg_quote'\r\n   and isinstance(markup[-2][1], list)\r\n   and markup[-2][1][-1] == '\\n'):\r\n           markup = markup[:-1]\r\n```\r\nI am segregating this change to a new commit, just In case you are not satisfied with this.\r\n\r\nAre those extra newlines important?"", 'comment_created': datetime.datetime(2021, 3, 8, 7, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 589240819, 'comment_body': 'This piece of code checks for extra newlines after quotes and removes them. But, I agree, this looks messy and complex, mainly due to the following reason:\r\n- Our `soup2mark` function is recursive, hence it becomes difficult to check for **unnecessary** blank lines after quotes.\r\nCurrently, I am relying on `markup` to check for any appended `\\n` at the end of each recursion-step, then comparing it with the previous element if it was `blockquote` and had a `\\n` at the end already. We then remove this extra newline from the end of markup.\r\n\r\nLet me see if I can simplify this!', 'comment_created': datetime.datetime(2021, 3, 8, 8, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 589253680, 'comment_body': 'I don\'t understand what do you mean by ""invalid links"". Are you pointing out the incorrect syntax used for `a` tag or the invalid links in general?', 'comment_created': datetime.datetime(2021, 3, 8, 8, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '7444e335af91da4653273f22fc75aaa0f987ef5f', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
575670742,bugfix: core: Fix ZT crash due to AttributeErrors.,Bug-fix for commit 1c92135.,True,931,https://api.github.com/repos/zulip/zulip-terminal/pulls/931,https://github.com/zulip/zulip-terminal/pull/931,closed,1,1,1,1,1,0,2,0,"[{'name': 'bug'}, {'name': 'size: XS'}]",2021-02-18 13:10:58+00:00,2021-02-20 07:27:31+00:00,152193.0,"1 day, 18:16:33",[],"[{'commit_sha': '2005691b8efe487918e5243a49abd5983a52e523', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
594998551,UI: Emphasize column titles to differentiate it from regular texts.,"This is a minor UI enhancement, that renders the column-titles in `bold` to remain consistent with the `LineBox` borders while differentiating them from the rest of the text.

**BEFORE:**
*monochrome*
![monochrome-before](https://user-images.githubusercontent.com/54993043/111588271-52ba4180-87e9-11eb-8751-4e0f09857189.png)
*default*
![default-before](https://user-images.githubusercontent.com/54993043/111527190-abf08980-8785-11eb-8c11-4317f8267e7d.png)
*gruvbox*
![gruvbox-before](https://user-images.githubusercontent.com/54993043/111527213-af841080-8785-11eb-98a7-dcae20da8f30.png)
*zt_light*
![light-before](https://user-images.githubusercontent.com/54993043/111527252-b9a60f00-8785-11eb-8de1-250bfe92be38.png)
*zt_blue*
![blue-before](https://user-images.githubusercontent.com/54993043/111527265-bd399600-8785-11eb-8fa4-ea2e25b6c425.png)


**AFTER:**
*monochrome*
![monochrome-after](https://user-images.githubusercontent.com/54993043/111588310-5ea60380-87e9-11eb-8921-da8e26a73416.png)
*default*
![default-after](https://user-images.githubusercontent.com/54993043/111527294-c62a6780-8785-11eb-8875-3f557f8c9912.png)
*gruvbox*
![gruvbox-after](https://user-images.githubusercontent.com/54993043/111527313-ca568500-8785-11eb-80f8-00c5bcc4a9f0.png)
*zt_light*
![light-after](https://user-images.githubusercontent.com/54993043/111588332-6a91c580-87e9-11eb-92df-33341189462f.png)
*zt_blue*
![blue-after](https://user-images.githubusercontent.com/54993043/111588344-71203d00-87e9-11eb-85a7-ac743386d2c4.png)
",False,952,https://api.github.com/repos/zulip/zulip-terminal/pulls/952,https://github.com/zulip/zulip-terminal/pull/952,closed,28,17,4,3,1,0,3,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'size: M'}]",2021-03-17 19:36:32+00:00,2021-03-19 20:27:06+00:00,175834.0,"2 days, 0:50:34",[],"[{'commit_sha': '8b9403db1985ff0247d4bb6b2dcb60e3b4bb4585', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '954c8474db4aa6eed40dd1e9ea5b0494f252165f', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3cdae1afff2bb5878c9dd6cb7bdcbed72b1707c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
515143980,Add Application config menu in About section.,"The about section has now an added menu `Application Configuration`, that lists the options that Zulip-terminal was loaded with. Here is the screenshot of the new `About` section:

![About-section-zt](https://user-images.githubusercontent.com/54993043/98072739-b8d2a780-1e8c-11eb-98b6-b26bbe0a2786.png)

Fixes #812 
",False,821,https://api.github.com/repos/zulip/zulip-terminal/pulls/821,https://github.com/zulip/zulip-terminal/pull/821,closed,28,6,5,2,5,3,2,0,"[{'name': 'enhancement'}, {'name': 'size: M'}]",2020-11-04 05:32:13+00:00,2020-11-06 00:34:20+00:00,154927.0,"1 day, 19:02:07","[{'comment_id': 517126949, 'comment_body': ""Since you've added an extra parameter to this method, this has broken the tests which expect a different number of parameters."", 'comment_created': datetime.datetime(2020, 11, 4, 6, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 517127216, 'comment_body': ""The extra parameters added here also have broken the `AboutView` tests, so you'll need to update these too."", 'comment_created': datetime.datetime(2020, 11, 4, 6, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 517312195, 'comment_body': ""I wasn't able to think of a way to access these parameters in `test_popups` so, I just hard-coded them. I think for testing purposes this should be okay, as we just need to check the parameters given are fine and with desired types. I also looked at other classes from the test_popup file and I found some similar cases there as well. "", 'comment_created': datetime.datetime(2020, 11, 4, 12, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': '187a0cd3b9964dff7ac6147cfbb7a498528847f4', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47fdd4bafbf64db208df99b6ed28d7d6d53106a8', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
629879733,refactor: Simplify msg template generation in conftest using factory fixtures.,"This is a prep commit for #967, that simplifies the message template generation logic in `conftest`. Using factory fixtures to generate templates for all messages(stream/PM/group), rather than separately defining for each type allows for code reusability and prevents duplication.",True,1022,https://api.github.com/repos/zulip/zulip-terminal/pulls/1022,https://github.com/zulip/zulip-terminal/pull/1022,closed,84,94,1,2,2,21,4,0,"[{'name': 'area: tests'}, {'name': 'size: XL'}, {'name': 'PR blocks other PR'}, {'name': 'area: refactoring'}]",2021-05-04 15:09:16+00:00,2021-06-22 22:47:18+00:00,4261082.0,"49 days, 7:38:02","[{'comment_id': 648769921, 'comment_body': ""I'm unconvinced that this is a worthwhile tidy; rather focus the factory in this commit on PMs."", 'comment_created': datetime.datetime(2021, 6, 10, 0, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648770653, 'comment_body': ""I'm confident we've never used this field in ZT and possibly it hasn't been used in the server for a good time either - it was recently removed. It may be worth leaving a comment in here - or if we add typing for this api structure, then there instead or as well."", 'comment_created': datetime.datetime(2021, 6, 10, 0, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648771344, 'comment_body': ""We should standardize on an unused domain so I'd suggest using the guaranteed-safe `example.com`.\r\n\r\nIn terms of the email user, this will vary with the email privacy setting, so making this change is a bit confusing given `user2406@...` is almost `user-2406@...`."", 'comment_created': datetime.datetime(2021, 6, 10, 0, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648771621, 'comment_body': 'Given that this will always require this structure, perhaps pass a structure to the factory instead? (*args ?)', 'comment_created': datetime.datetime(2021, 6, 10, 0, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648772088, 'comment_body': ""Given a recent discussion on czo (#documentation>recipient_id) and similar to short_name that we don't and haven't used these entries, we should likely simply remove these too except perhaps for a comment in a similar centralized location."", 'comment_created': datetime.datetime(2021, 6, 10, 0, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648774778, 'comment_body': 'This seems something we might want customized in the stream message fixture instead?', 'comment_created': datetime.datetime(2021, 6, 10, 0, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648775143, 'comment_body': ""Extracting the common data is great - though does this need to be a fixture? Do we expect to use this directly in a test?\r\n\r\nI'm thinking we could treat this as a factory for a common base dict which the fixtures customize for each custom type. Then we could leave some parameters out of this factory and add in some 'sender' related ones?"", 'comment_created': datetime.datetime(2021, 6, 10, 0, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648776890, 'comment_body': ""As per another comment, we might change this, but in general when we have quite a few it's useful to use required named parameters via `*`."", 'comment_created': datetime.datetime(2021, 6, 10, 0, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 648777412, 'comment_body': ""I'm not sure if we'll need some extra deepcopy elsewhere."", 'comment_created': datetime.datetime(2021, 6, 10, 0, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 652998768, 'comment_body': 'Re the second point, I agree that this change may be a bit confusing. We could use the first name of the `full_name` though, right?', 'comment_created': datetime.datetime(2021, 6, 16, 19, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 653007720, 'comment_body': 'There are a few other places where we have this field defined, does it make sense to remove this and the `short_name` field in another PR?\r\nWe already have `message` in api_types, so we could comment about `recipient_id` there(similar to the mobile code), and for `short_name` we could simply erase that since the server has already removed it?', 'comment_created': datetime.datetime(2021, 6, 16, 20, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 654480248, 'comment_body': 'This was resolved with the recently merged #1053 ', 'comment_created': datetime.datetime(2021, 6, 18, 14, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 655815857, 'comment_body': ""This used to vary between stream/private. I see you override it later, but this should be a required factory parameter if it's a stream?\r\n\r\n(I can see my earlier comment may have caused this change, but I was referring to (likely later) allowing the subject to be customized each time the stream message factory is used.)"", 'comment_created': datetime.datetime(2021, 6, 22, 1, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 655815937, 'comment_body': 'This used to vary between stream/private. You could adjust it to generate the previous content internally, or make it a required named parameter?', 'comment_created': datetime.datetime(2021, 6, 22, 1, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 655819887, 'comment_body': ""Based on the type we should assert on these to ensure they're used correctly, based on how you have this currently. An alternative could be to encode the extra data as part of the message type parameter (eg. one of two different tuple types), but that'll be less descriptive.\r\n\r\n(We may end up going with a simpler approach with two different factories for private and stream messages. However, this is definitely an improvement over the previous approach, but needing these asserts for best behavior suggests there may be a simpler way to take later.)"", 'comment_created': datetime.datetime(2021, 6, 22, 1, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 655879785, 'comment_body': ""I have customized the content internally, depending on `msg_type`. I don't see the need for having an extra parameter for this field, especially since we don't test on this and probably we shouldn't?"", 'comment_created': datetime.datetime(2021, 6, 22, 5, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 656248137, 'comment_body': 'I agree, asserting to ensure these values are used correctly is important, but I\'m a bit unconvinced by the encoded msg_type approach. We could take the different factories approach, but that would not be much of a ""re-useable"" refactor anymore?', 'comment_created': datetime.datetime(2021, 6, 22, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 656249972, 'comment_body': 'I added a keyword arg `subject` with the default value of `""""` (for PMs/group)', 'comment_created': datetime.datetime(2021, 6, 22, 13, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 656256184, 'comment_body': 'I have fixed this, as per my below comment. Sorry for misunderstanding you here.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 656608681, 'comment_body': 'I was initially concerned that all the versions would imply a stream message based on the content in your previous version, which you\'ve resolved :+1:\r\n\r\nWe don\'t need precise control to support the refactor you\'ve done here, but if we reuse these fixtures later rather than setting the content directly we might provide support in the factory ""initializer"".', 'comment_created': datetime.datetime(2021, 6, 22, 21, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 656614914, 'comment_body': 'The encoded msg_type approach basically *is* like having two separate initializers/factories, with the type itself being the default for each of the two initializers, and the different function signature (set of parameters) being the set of values.\r\neg. (""private"", ([<recipients>])) and (""stream"", (stream_id, stream_name, subject))\r\ncould give private_factory([recipients]) and stream_factory(stream_id, stream_name, subject)\r\n(note that we can have common code for the core similar data generation which these could delegate to)', 'comment_created': datetime.datetime(2021, 6, 22, 22, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '12844eed95c1c5eb9329e1ac7e56bcc9fbd149d1', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34c6325af0dfa0e61d07769bc2d561401accbb5f', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
595483091,refactor/bugfix: Migrate keypress to using commands instead of hardcoded keys.,"This PR aims to replace all hard-coded keys in keypress to use their corresponding commands, to make them future-proof. 
Commit flow:
- The first commit is borrowed from @preetmishra's #539, which parametrizes mouse_event calls and adds mouse_event test for `TopicsView`.
- The second commit migrates all instances of hard-coded keys in mouse_events to use `primary_key_for_commands`.
- The third commit replaces all other instances of hard-coded keys in keypress to use their corresponding commands so that they are future-proof.
- The fourth commit is a bugfix that makes `r` for replying to message independent of `ENTER` key.

Our codebase would have no instances of hard-coded keys now. Can be checked using: `git grep keypress\(size`

Fixes #469 and #533.",True,953,https://api.github.com/repos/zulip/zulip-terminal/pulls/953,https://github.com/zulip/zulip-terminal/pull/953,closed,69,56,5,5,6,11,3,0,"[{'name': 'area: tests'}, {'name': 'size: XL'}, {'name': 'area: refactoring'}]",2021-03-18 11:49:49+00:00,2021-07-15 02:09:02+00:00,10246753.0,"118 days, 14:19:13","[{'comment_id': 645121335, 'comment_body': ""We could add this in a separate commit - otherwise this isn't a pure refactor. Will that leave it the same as Preet's original commit?"", 'comment_created': datetime.datetime(2021, 6, 3, 20, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645127950, 'comment_body': ""This will be common to all three cases, so let's make it a fixture to deduplicate.\r\n\r\nThe styling may end up different as a fixture, but it may well still be more compact with inline test ids, though perhaps less important."", 'comment_created': datetime.datetime(2021, 6, 3, 21, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645132532, 'comment_body': 'These are not mouse events?', 'comment_created': datetime.datetime(2021, 6, 3, 21, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645133208, 'comment_body': ""I agree with this refactor, but while mouse access is not a priority the 5x multiplier isn't consistent with the other boxes. I'd like this to be consistent, but equally I don't use a scroll-wheel mouse right now, so we can discuss in the stream.\r\n\r\nI think this might have been brought up recently in discussion, but I'm not sure we reached a conclusion?"", 'comment_created': datetime.datetime(2021, 6, 3, 21, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 645140602, 'comment_body': ""These changes in this file likely work in practice, but mainly since we going through the intermediary of a `str`. At least, that's my perception of what's happening - can you see what I mean? We may want to make another change in this file to give these changes proper meaning."", 'comment_created': datetime.datetime(2021, 6, 3, 21, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 663579753, 'comment_body': 'I assume this is the start point you\'re referring to in the commit text?\r\nSo REPLY_MESSAGE here -> ""enter"" on box -> behavior like REPLY_MESSAGE via ""ENTER"" filter ?\r\n\r\nThis is a good find, but the commit text could be improved to make this clearer - what file/class source triggers what other ones?', 'comment_created': datetime.datetime(2021, 7, 5, 0, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 664533373, 'comment_body': ""Yes, adding that in a separate commit would leave it the same as Preet's commit. Do you want me to put that in a separate commit or just reword the commit message to not indicate it's a pure refactor?"", 'comment_created': datetime.datetime(2021, 7, 6, 13, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 665749398, 'comment_body': ""I am really sorry, but I don't get this. Could you please explain a bit more?"", 'comment_created': datetime.datetime(2021, 7, 7, 22, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 666095939, 'comment_body': 'Ok, added it as a separate commit. :)', 'comment_created': datetime.datetime(2021, 7, 8, 11, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 670077241, 'comment_body': 'This actually was broken at this commit - there was no REPLY_MESSAGE handler for this and manual testing confirmed issues. Compare the difference between your local version and the version I pushed.', 'comment_created': datetime.datetime(2021, 7, 15, 2, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 670077613, 'comment_body': 'Thanks for updating this, but as noted I adjusted code between the last two commits to make this a little more accurate.', 'comment_created': datetime.datetime(2021, 7, 15, 2, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '351b45fe24e9f488675c59ec1937f556bfe2ec29', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f299557b40f0afb9a87eac618ef3d0b7672efbb', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '858bf4c4f63ce76b8964a1f01396ffd3a71901cc', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b11404c2369f7cec8046ff601fb8b63865e9864', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b810ef7010153554cf505877d95be49d02ce66a7', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
683966223,Handle edit message events triggering change in mention flags and unreads.,"The commit structure is as follows:

- **helper/model: Copy unread mentioned messages from initial_data to Index.**: Creates a new field in `index` as `unread_mentioned_msg_ids` which stores the message ids of unread mentioned messages obtained from the initial_data.

- **bugfix: api_types/model: Update mention flags on message edit events.**: This commit updates the index, unread_count and flags if the message was indexed when an update message event with change in mention flag(s) is detected. If the message was not in `index`, we just update the unread_count. The count is updated after checking with initial data's unread mentioned msgs field which does not stay synced with the server, hence the logic is buggy.

- **model: Update index's ""unread_mentioned_msg_ids"" field from events.**: This commit updates the `index.unread_mentioned_msg_ids` field through `update_message` and `update_message_flag` events.

- **tests: model: Extend other tests to incorporate both mentioned flags.**: This commit expands some of the fixtures of present tests with the mentioned/wildcard_mentioned flags to make the tests more robust and generalized.",False,1068,https://api.github.com/repos/zulip/zulip-terminal/pulls/1068,https://github.com/zulip/zulip-terminal/pull/1068,open,252,21,5,7,1,0,5,0,"[{'name': 'bug'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}, {'name': 'area: event handling'}]",2021-07-05 23:06:19+00:00,,0.0,,[],"[{'commit_sha': '120a60d564ade21b57373cb63b457f7060445915', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9dd953ef75933165ea76ce2a8c2a86f792a0306', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d995bb59e18c7ba345d418f90d60a814e0cd7a', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b4071521e6e227d27fdfd8e9ed66e2ccde2401', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '277d8a6b11b83a4f5bc42ea4154e7add8ff8dcae', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3162e983db2dd019a6fa9af9b2e62c20e2ae756', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ccc07118834e599726c9d7a9a29ac5282fc95b1', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
663057691,Add support for handling delete_message events.,"This adds a new event action in model that looks for delete_message events, potentially handling it by removing the message completely from the index, and then updates the rendered_view to handle the event dynamically without needing to switch narrows.

It also looks out for messages being unread before being deleted and updates the count appropriately. Similarly, for messages that were starred before being deleted, this updates the `starred_count` too.

Fixes one check-box of #993.",False,1048,https://api.github.com/repos/zulip/zulip-terminal/pulls/1048,https://github.com/zulip/zulip-terminal/pull/1048,open,224,0,2,3,2,0,4,0,"[{'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR needs review'}, {'name': 'area: event handling'}]",2021-06-06 21:55:01+00:00,,0.0,,[],"[{'commit_sha': 'd1436cdf2a08b801b2e0ed1561e03d19d0f6329c', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33b601d36f15a8ca705e0ee7eecd6f29494d4b0b', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '482cabefffe926b7e7c354e5e9d2d3bae3516d99', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
608799991,bugfix: Update stream-setting checkboxes from subscription events.,"This PR fixes the mismatch between stream settings if the `StreamInfo` popup is opened in ZT and subscription events are received from the server. The current approach registers a callback when the `StreamInfoView` is opened and looks for `subscription` events to trigger the callback, which in turn updates the checkbox UI.

Fixes #747.",False,981,https://api.github.com/repos/zulip/zulip-terminal/pulls/981,https://github.com/zulip/zulip-terminal/pull/981,open,40,2,2,2,3,0,7,0,"[{'name': 'further discussion required'}, {'name': 'size: M'}, {'name': 'has conflicts'}, {'name': 'feedback wanted'}, {'name': 'PR needs review'}, {'name': 'area: event handling'}, {'name': 'area: popup: stream'}]",2021-04-05 08:19:23+00:00,,0.0,,[],"[{'commit_sha': '4cf12151a05598fc814c8889bdf98a6a5e22248e', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2defda7e662b6f956dfb85968eac232b77dd3a4', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59
547761320,boxes: Disable cycling using arrow keys if recipient is invalid.,"This PR disables cycling from the recipient box to any other box inside the `WriteBox` view using arrow keys, if the recipient name is invalid. This is very similar to `CYCLE_COMPOSE_FOCUS` using <kbd>Tab</kbd> key. Tests have also been updated and amended.

This PR fixes #779.
",False,864,https://api.github.com/repos/zulip/zulip-terminal/pulls/864,https://github.com/zulip/zulip-terminal/pull/864,open,205,71,2,2,7,26,6,0,"[{'name': 'bug'}, {'name': 'enhancement'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR blocks other PR'}, {'name': 'PR awaiting update'}]",2021-01-02 14:42:56+00:00,,0.0,,"[{'comment_id': 577366549, 'comment_body': ""Is this since you're concerned that `'l'` is a letter?"", 'comment_created': datetime.datetime(2021, 2, 17, 6, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 577368943, 'comment_body': 'This likely needs to handle the same setting of recipient ids and stream id as in the other block of very similar code - which is a good reason why this would be handled well with a refactor to handle the different keys together.\r\n\r\nSimilarly the similar block below, and another for PMs?', 'comment_created': datetime.datetime(2021, 2, 17, 7, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 577395926, 'comment_body': 'Yes.\r\nThe `l` key would otherwise, instead of getting typed as a letter in `header_box`, behave exactly the same as `right` keypress(i.e. cycle focus).', 'comment_created': datetime.datetime(2021, 2, 17, 8, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 580680921, 'comment_body': ""Great; can we make this behave correctly if other keys are used instead of those currently assigned? I'd prefer not to hard-code the assumption of `['right', 'l']` in the code."", 'comment_created': datetime.datetime(2021, 2, 23, 0, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 593968136, 'comment_body': 'This part of the code seems the same as the section validating on cycling out using `tab`, can you perhaps add a helper within `WriteBox` to do this?', 'comment_created': datetime.datetime(2021, 3, 14, 22, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 593968145, 'comment_body': ""It might be more vivid to style the commands in `'code'`, similar to the way we show other commands in hints in the footer."", 'comment_created': datetime.datetime(2021, 3, 14, 22, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'prah23', 'type': 'User'}, {'comment_id': 598031834, 'comment_body': ""Extracting these methods is useful, but the difference between them is very small. We might encode some degree of formatting assumption, but can we pass in an error message and then give a general tip message which we append? We could probably extend the advice, but that's easy once it's centralized?\r\n\r\nThis can be indicated as a pure refactor in the commit title I expect."", 'comment_created': datetime.datetime(2021, 3, 20, 0, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 639950890, 'comment_body': ""As these command keys are configurable from `keys.py`, we shouldn't hardcode them here."", 'comment_created': datetime.datetime(2021, 5, 26, 17, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 639951929, 'comment_body': 'There a typo in the method name and in the commit description.', 'comment_created': datetime.datetime(2021, 5, 26, 17, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 639977741, 'comment_body': 'The nested conditional could be simplified with what follows.\r\n```python3\r\n        if (is_command_key(\'CYCLE_COMPOSE_FOCUS\', key) or key == ""down""\r\n              or (key == ""right"" and stream_name_len == cursor_pos)):\r\n            return True\r\n ```\r\n \r\n While writing conditionals, expressing the intent clearly is vital. For instance, in the snippet above it is comparatively apparent that we\'re checking whether the key is `TAB` or `DOWN` or `RIGHT` (given that the cursor is at the end) for blur (""focus loss"") event. Both approaches work, but the latter is more comprehensible.', 'comment_created': datetime.datetime(2021, 5, 26, 17, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 639991131, 'comment_body': 'In place of recurring conditionals, we could just check for it once and return early? That would remove all the following code changes.', 'comment_created': datetime.datetime(2021, 5, 26, 17, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 639991612, 'comment_body': ""Why aren't we using `widget_size`?"", 'comment_created': datetime.datetime(2021, 5, 26, 17, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 639993683, 'comment_body': ""Why are capturing all the direction keys with the method? Wouldn't `GO_RIGHT` and `GO_DOWN` suffice?"", 'comment_created': datetime.datetime(2021, 5, 26, 17, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 639994165, 'comment_body': 'The method is calling an existing method, `set_footer_text`, with a particular error message. This could lead us to a state where we have multiple methods that essentially do the same thing with different arguments for different _error_ types.\r\n\r\nAnother way could be to just have an `ERROR_TEMPLATES` data structure that could be used to pass an appropriate error message to the existing `set_footer_text` method.\r\n\r\n', 'comment_created': datetime.datetime(2021, 5, 26, 17, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 641943100, 'comment_body': ""Yep, this is definitely more clear and comprehensible than the earlier conditional. Guess I'll have to look from different angles if the conditionals are getting complex. Thanks. :+1:"", 'comment_created': datetime.datetime(2021, 5, 29, 14, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 641943814, 'comment_body': ""Actually, the command that binds these keys(`right` and `down`) offers a secondary letter-key(i.e. `l` and `j` respectively). And, using the commands instead of keys would prevent the letter keys from getting typed in the write-box. Hence, I've used hardcoded keys instead of commands."", 'comment_created': datetime.datetime(2021, 5, 29, 14, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 641944871, 'comment_body': 'I can see a typo in the commit description - ""diables"" in the first line?\r\nBut, I can\'t figure out the typo in the function name. Could you please clarify?', 'comment_created': datetime.datetime(2021, 5, 29, 14, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 642077441, 'comment_body': 'All of these conditionals have their corresponding `else`/`elif` clauses, so returning early might not give the expected behavior. Let me know if I misunderstood you. :)', 'comment_created': datetime.datetime(2021, 5, 30, 13, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 642078290, 'comment_body': 'Well, I tried using `widget_size`, but for some cases, the `write-box` changes to box widget instead of flow and returns a `(maxcol, maxrow)` size instead of just `(maxcol, )`. This made the tests fail for such cases. Let me try to dig more into this and see if I can get a fix for this.', 'comment_created': datetime.datetime(2021, 5, 30, 13, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 642091436, 'comment_body': ""Yeah, re the latter, it's lose vs loose."", 'comment_created': datetime.datetime(2021, 5, 30, 15, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 642091909, 'comment_body': ""I understand why you've used them. However, you can see that if the keys change from `keys.py`, it is not going to work. For example, we could have another method for figuring out whether the command keys have letters and take it further from there. In any case, hardcoding shouldn't be our last resort."", 'comment_created': datetime.datetime(2021, 5, 30, 15, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 642103306, 'comment_body': 'Right, we would have to return early from three places.\r\n\r\nI think a cleaner way would be to provision another `elif` and check the stream validity separately.', 'comment_created': datetime.datetime(2021, 5, 30, 17, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'preetmishra', 'type': 'User'}, {'comment_id': 649575565, 'comment_body': 'Actually, yes they should.\r\nI may have misinterpreted [one of Neil\'s point from above](https://github.com/zulip/zulip-terminal/pull/864#pullrequestreview-591884868), and thought we needed to handle cycling for the ""up"" key as well. I\'ll amend the commit to use only `GO_RIGHT` and `GO_DOWN`. Then, I guess we won\'t be needing the second commit at all? I\'ll remove that too and keep a backup of this branch just in case. :)', 'comment_created': datetime.datetime(2021, 6, 10, 22, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 663527992, 'comment_body': 'Sorry for the late reply. I got busy with other PR\'s since finding the root+fix of this particular issue was taking forever. :(\r\nI have tried to dig more on this, but it seems like it\'s an internal `urwid` issue that I am unable to resolve. While looking at this, I realized that the whole `write_box` is sometimes recognized as ""flow widget"" for all tests (that\'s when all the tests pass), but sometimes the `write_box` is determined as ""box widget"" for all tests (2 tests fail in this case).\r\n\r\nI also found that in the latter case, the tests only fail for ""DOWN"" keypresses, because it can\'t be handled properly by `super()` i.e. urwid\'s `container.py`. I can fix the whole issue by not letting the ""DOWN"" keypress being handled by urwid and returning early after manually handling, but it seems to have other side-effects and does not look clean.', 'comment_created': datetime.datetime(2021, 7, 4, 16, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}, {'comment_id': 663528248, 'comment_body': 'Would it make sense to define the `ERROR_TEMPLATES` in a separate module?', 'comment_created': datetime.datetime(2021, 7, 4, 16, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zee-bit', 'type': 'User'}]","[{'commit_sha': 'b6cb5a514647a7f096549822c4ccf0aa0af4efcc', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fca74f48a438a25e44fcb594340a485d9df05a5', 'committer_username': 'zee-bit', 'committer_name': 'Zeeshan Equbal ', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 6, 15, 11, 49, tzinfo=datetime.timezone.utc)}]",Zeeshan Equbal ,54993043,,User,,61,,32,59

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
122704772,zulip-terminal,zulip/zulip-terminal,Python,243,612,18,81,2276,423,3,165,"[{'id': 706097578, 'number': 1115, 'closed': datetime.datetime(2021, 8, 8, 23, 15, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 8, 19, 51, 50, tzinfo=datetime.timezone.utc), 'time_taken': 12226.0, 'time_delta': '3:23:46', 'additions': 49, 'deletions': 58, 'state': 'closed'}, {'id': 691938905, 'number': 1085, 'closed': datetime.datetime(2021, 7, 18, 0, 41, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 14, 18, 3, tzinfo=datetime.timezone.utc), 'time_taken': 37381.0, 'time_delta': '10:23:01', 'additions': 22, 'deletions': 18, 'state': 'closed'}, {'id': 691071977, 'number': 1084, 'closed': datetime.datetime(2021, 7, 23, 7, 20, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 22, 24, 54, tzinfo=datetime.timezone.utc), 'time_taken': 636960.0, 'time_delta': '7 days, 8:56:00', 'additions': 1119, 'deletions': 1580, 'state': 'closed'}, {'id': 690991761, 'number': 1082, 'closed': datetime.datetime(2021, 7, 15, 21, 39, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 19, 47, 24, tzinfo=datetime.timezone.utc), 'time_taken': 6748.0, 'time_delta': '1:52:28', 'additions': 31, 'deletions': 14, 'state': 'closed'}, {'id': 689461669, 'number': 1080, 'closed': datetime.datetime(2021, 7, 14, 16, 43, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 23, 17, 21, tzinfo=datetime.timezone.utc), 'time_taken': 62756.0, 'time_delta': '17:25:56', 'additions': 28, 'deletions': 15, 'state': 'closed'}, {'id': 683966223, 'number': 1068, 'closed': None, 'created': datetime.datetime(2021, 7, 5, 23, 6, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 252, 'deletions': 21, 'state': 'open'}, {'id': 682871476, 'number': 1062, 'closed': datetime.datetime(2021, 7, 28, 23, 53, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 20, 40, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2257995.0, 'time_delta': '26 days, 3:13:15', 'additions': 51, 'deletions': 30, 'state': 'closed'}, {'id': 679449943, 'number': 1059, 'closed': datetime.datetime(2021, 7, 25, 23, 12, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 22, 33, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2335174.0, 'time_delta': '27 days, 0:39:34', 'additions': 140, 'deletions': 120, 'state': 'closed'}, {'id': 671905293, 'number': 1053, 'closed': datetime.datetime(2021, 6, 17, 22, 2, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 21, 9, 36, tzinfo=datetime.timezone.utc), 'time_taken': 89565.0, 'time_delta': '1 day, 0:52:45', 'additions': 6, 'deletions': 24, 'state': 'closed'}, {'id': 663057691, 'number': 1048, 'closed': None, 'created': datetime.datetime(2021, 6, 6, 21, 55, 1, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 224, 'deletions': 0, 'state': 'open'}, {'id': 659303053, 'number': 1044, 'closed': datetime.datetime(2021, 6, 3, 15, 45, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 19, 56, 51, tzinfo=datetime.timezone.utc), 'time_taken': 157733.0, 'time_delta': '1 day, 19:48:53', 'additions': 58, 'deletions': 0, 'state': 'closed'}, {'id': 657532584, 'number': 1041, 'closed': datetime.datetime(2021, 6, 1, 19, 58, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 29, 20, 41, 6, tzinfo=datetime.timezone.utc), 'time_taken': 256628.0, 'time_delta': '2 days, 23:17:08', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 652517910, 'number': 1038, 'closed': datetime.datetime(2021, 7, 5, 23, 13, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 25, 15, 53, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3568789.0, 'time_delta': '41 days, 7:19:49', 'additions': 196, 'deletions': 11, 'state': 'closed'}, {'id': 629879733, 'number': 1022, 'closed': datetime.datetime(2021, 6, 22, 22, 47, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 4, 15, 9, 16, tzinfo=datetime.timezone.utc), 'time_taken': 4261082.0, 'time_delta': '49 days, 7:38:02', 'additions': 84, 'deletions': 94, 'state': 'closed'}, {'id': 620222714, 'number': 1003, 'closed': None, 'created': datetime.datetime(2021, 4, 21, 13, 30, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 24, 'deletions': 17, 'state': 'open'}, {'id': 614729942, 'number': 996, 'closed': datetime.datetime(2021, 4, 26, 7, 12, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 13, 20, 8, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1076652.0, 'time_delta': '12 days, 11:04:12', 'additions': 75, 'deletions': 6, 'state': 'closed'}, {'id': 612577050, 'number': 991, 'closed': datetime.datetime(2021, 6, 11, 0, 44, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 9, 16, 16, 53, tzinfo=datetime.timezone.utc), 'time_taken': 5387236.0, 'time_delta': '62 days, 8:27:16', 'additions': 118, 'deletions': 4, 'state': 'closed'}, {'id': 608799991, 'number': 981, 'closed': None, 'created': datetime.datetime(2021, 4, 5, 8, 19, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 40, 'deletions': 2, 'state': 'open'}, {'id': 602503050, 'number': 967, 'closed': datetime.datetime(2021, 6, 25, 2, 37, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 7, 29, 10, tzinfo=datetime.timezone.utc), 'time_taken': 7585703.0, 'time_delta': '87 days, 19:08:23', 'additions': 82, 'deletions': 13, 'state': 'closed'}, {'id': 602129786, 'number': 964, 'closed': datetime.datetime(2021, 3, 30, 6, 28, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 27, 19, 37, 17, tzinfo=datetime.timezone.utc), 'time_taken': 211873.0, 'time_delta': '2 days, 10:51:13', 'additions': 60, 'deletions': 6, 'state': 'closed'}, {'id': 595483091, 'number': 953, 'closed': datetime.datetime(2021, 7, 15, 2, 9, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 18, 11, 49, 49, tzinfo=datetime.timezone.utc), 'time_taken': 10246753.0, 'time_delta': '118 days, 14:19:13', 'additions': 69, 'deletions': 56, 'state': 'closed'}, {'id': 594998551, 'number': 952, 'closed': datetime.datetime(2021, 3, 19, 20, 27, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 17, 19, 36, 32, tzinfo=datetime.timezone.utc), 'time_taken': 175834.0, 'time_delta': '2 days, 0:50:34', 'additions': 28, 'deletions': 17, 'state': 'closed'}, {'id': 591647644, 'number': 946, 'closed': datetime.datetime(2021, 8, 12, 7, 1, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 12, 12, 41, 50, tzinfo=datetime.timezone.utc), 'time_taken': 13198789.0, 'time_delta': '152 days, 18:19:49', 'additions': 174, 'deletions': 42, 'state': 'closed'}, {'id': 585907085, 'number': 942, 'closed': datetime.datetime(2021, 4, 21, 13, 35, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 21, 57, 21, tzinfo=datetime.timezone.utc), 'time_taken': 4030664.0, 'time_delta': '46 days, 15:37:44', 'additions': 24, 'deletions': 17, 'state': 'closed'}, {'id': 575670742, 'number': 931, 'closed': datetime.datetime(2021, 2, 20, 7, 27, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 18, 13, 10, 58, tzinfo=datetime.timezone.utc), 'time_taken': 152193.0, 'time_delta': '1 day, 18:16:33', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 569058768, 'number': 913, 'closed': datetime.datetime(2021, 8, 17, 5, 32, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 7, 21, 45, 38, tzinfo=datetime.timezone.utc), 'time_taken': 16444009.0, 'time_delta': '190 days, 7:46:49', 'additions': 466, 'deletions': 3, 'state': 'closed'}, {'id': 564388578, 'number': 900, 'closed': datetime.datetime(2021, 7, 13, 20, 17, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 30, 9, 7, 45, tzinfo=datetime.timezone.utc), 'time_taken': 14209756.0, 'time_delta': '164 days, 11:09:16', 'additions': 222, 'deletions': 20, 'state': 'closed'}, {'id': 561297304, 'number': 889, 'closed': datetime.datetime(2021, 4, 12, 16, 13, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 25, 19, 0, 2, tzinfo=datetime.timezone.utc), 'time_taken': 6642787.0, 'time_delta': '76 days, 21:13:07', 'additions': 16, 'deletions': 4, 'state': 'closed'}, {'id': 557539523, 'number': 880, 'closed': datetime.datetime(2021, 8, 14, 5, 36, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 19, 16, 8, 13, tzinfo=datetime.timezone.utc), 'time_taken': 17846920.0, 'time_delta': '206 days, 13:28:40', 'additions': 163, 'deletions': 18, 'state': 'closed'}, {'id': 556189735, 'number': 878, 'closed': datetime.datetime(2021, 1, 16, 16, 41, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 16, 15, 23, 7, tzinfo=datetime.timezone.utc), 'time_taken': 4703.0, 'time_delta': '1:18:23', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 547761320, 'number': 864, 'closed': None, 'created': datetime.datetime(2021, 1, 2, 14, 42, 56, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 205, 'deletions': 71, 'state': 'open'}, {'id': 546995969, 'number': 861, 'closed': datetime.datetime(2020, 12, 31, 6, 10, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 30, 15, 52, 12, tzinfo=datetime.timezone.utc), 'time_taken': 51519.0, 'time_delta': '14:18:39', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 546003005, 'number': 856, 'closed': datetime.datetime(2021, 1, 15, 16, 3, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 28, 8, 59, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1580626.0, 'time_delta': '18 days, 7:03:46', 'additions': 132, 'deletions': 8, 'state': 'closed'}, {'id': 543607957, 'number': 854, 'closed': datetime.datetime(2021, 1, 20, 21, 53, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 21, 17, 1, 37, tzinfo=datetime.timezone.utc), 'time_taken': 2609486.0, 'time_delta': '30 days, 4:51:26', 'additions': 218, 'deletions': 6, 'state': 'closed'}, {'id': 520557949, 'number': 824, 'closed': datetime.datetime(2021, 2, 18, 7, 56, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 13, 12, 40, 20, tzinfo=datetime.timezone.utc), 'time_taken': 8363779.0, 'time_delta': '96 days, 19:16:19', 'additions': 116, 'deletions': 11, 'state': 'closed'}, {'id': 515143980, 'number': 821, 'closed': datetime.datetime(2020, 11, 6, 0, 34, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 4, 5, 32, 13, tzinfo=datetime.timezone.utc), 'time_taken': 154927.0, 'time_delta': '1 day, 19:02:07', 'additions': 28, 'deletions': 6, 'state': 'closed'}]"
84641020,urwid_readline,rr-/urwid_readline,Python,11,27,5,8,73,6,1,0,"[{'id': 611648236, 'number': 18, 'closed': datetime.datetime(2021, 4, 8, 17, 16, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 15, 17, 4, tzinfo=datetime.timezone.utc), 'time_taken': 7167.0, 'time_delta': '1:59:27', 'additions': 39, 'deletions': 4, 'state': 'closed'}]"
