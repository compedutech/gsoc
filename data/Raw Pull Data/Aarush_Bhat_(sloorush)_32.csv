pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1006429792,Feat: Folding Ranges,"This PR adds the feature of Folding Ranges to the Range Plugin.

References:
- Folding ranges from haskell/lsp (https://github.com/haskell/lsp/blob/5422dd13f0362917e5981e07d60617ca6e233833/lsp-types/src/Language/LSP/Types/FoldingRange.hs)
- Folding ranges from LSP spec (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_foldingRange)

<a href=""https://gitpod.io/#https://github.com/haskell/haskell-language-server/pull/3058""><img src=""https://gitpod.io/button/open-in-gitpod.svg""/></a>

",True,3058,https://api.github.com/repos/haskell/haskell-language-server/pulls/3058,https://github.com/haskell/haskell-language-server/pull/3058,closed,265,27,11,34,33,82,1,0,[{'name': 'merge me'}],2022-07-23 22:28:57+00:00,2022-09-21 11:59:58+00:00,5146261.0,"59 days, 13:31:01","[{'comment_id': 942028804, 'comment_body': 'Tip: You can use pattern matching instead of `==`', 'comment_created': datetime.datetime(2022, 8, 10, 5, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 942029032, 'comment_body': 'did you mean `""foldingRangeOn""`?', 'comment_created': datetime.datetime(2022, 8, 10, 5, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 942243911, 'comment_body': '```\r\ncase codeRangeKind of\r\n   CodeKindComment -> ...\r\n   CodeKindImports -> ...\r\n   ...\r\n```', 'comment_created': datetime.datetime(2022, 8, 10, 9, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 942246525, 'comment_body': ""I'd also be tempted to pull out the construction of the range, and just have this return the kind, i.e. \r\n```\r\nlet frk <- case codeRangeKind of\r\n    CodeKindComment -> Just FoldingRangeComment\r\n    ...\r\n    _ -> Nothing\r\ncase frk of\r\n    Just _ -> Just (FoldingRange lineStart Nothing lineEnd Nothing frk)\r\n    Nothing -> Nothing\r\n```"", 'comment_created': datetime.datetime(2022, 8, 10, 9, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 942246845, 'comment_body': ""I'm pretty sure you do want to include the start and end characters here, you should have them."", 'comment_created': datetime.datetime(2022, 8, 10, 9, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 942249084, 'comment_body': 'These functions share a lot of code with the functions for creating selection ranges. I wonder if we can share some of it.', 'comment_created': datetime.datetime(2022, 8, 10, 9, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 942251862, 'comment_body': ""I think this is maybe just the wrong way to think about it. The selection range handler is doing a binary search because it's looking for a _position_ and including only the selection ranges that include that position. You're not doing that - you're looking at *all* the code ranges, and then checking their kind to decide whether to create a folding range for them. So I think you can write a much simpler function: basically just fmap over all vector of code ranges, and for each of them check whether you want to make a folding range, and also recurse over their children."", 'comment_created': datetime.datetime(2022, 8, 10, 9, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 942584978, 'comment_body': ""Start and end characters are optional, and it takes the start and end character of the line by default.\r\n\r\nI wanted to try if it makes a difference. I'll check it."", 'comment_created': datetime.datetime(2022, 8, 10, 15, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 942715057, 'comment_body': 'I made a separate function that converts crk to frk, the function looks a lot cleaner now. PTAL.', 'comment_created': datetime.datetime(2022, 8, 10, 17, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 944398593, 'comment_body': 'Should we instead concatenate the result, instead of always taking the first one?', 'comment_created': datetime.datetime(2022, 8, 12, 12, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 944400713, 'comment_body': 'Please follow the [style guidelines](https://haskell-language-server.readthedocs.io/en/latest/contributing/contributing.html#style-guidelines). Use `stylish-haskell` as the formatter. Use 4 spaces to indent.\r\n\r\nI guess the export list was changed by another formatter.', 'comment_created': datetime.datetime(2022, 8, 12, 12, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 944496724, 'comment_body': 'Yes, definitely.', 'comment_created': datetime.datetime(2022, 8, 12, 14, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 944512175, 'comment_body': 'The tab sizing was at 2 instead of 4, fixed it.', 'comment_created': datetime.datetime(2022, 8, 12, 14, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 944848130, 'comment_body': 'Yes! Makes sense', 'comment_created': datetime.datetime(2022, 8, 12, 20, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 944990015, 'comment_body': 'Please revert all indentation changes. Basically, all code is modified, making code review harder.', 'comment_created': datetime.datetime(2022, 8, 13, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 945071453, 'comment_body': 'I have removed all the formatting, will format it after the code is reviewed', 'comment_created': datetime.datetime(2022, 8, 13, 4, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 946693230, 'comment_body': 'I think both of them now work differently. Can something be done now to share code between the two?', 'comment_created': datetime.datetime(2022, 8, 16, 12, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 946699353, 'comment_body': ""Yeah, now they're completely different!"", 'comment_created': datetime.datetime(2022, 8, 16, 12, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 946705202, 'comment_body': '```suggestion\r\ncreateFoldingRange (CodeRange (Range (Position lineStart _) (Position lineEnd _) _ codeRangeKind)) = do\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 12, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 946705408, 'comment_body': 'I still think we should use the characters. Why not? We have them!', 'comment_created': datetime.datetime(2022, 8, 16, 12, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 947142521, 'comment_body': ""Makes sense. There is nothing to lose with characters; I've added them."", 'comment_created': datetime.datetime(2022, 8, 16, 18, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 947146364, 'comment_body': ""Looks a lot cleaner this way. I've changed it."", 'comment_created': datetime.datetime(2022, 8, 16, 19, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 964745929, 'comment_body': '@michaelpj @kokobd I was wondering what all test cases will be necessary to test folding ranges, or should I just add some general test cases of situations that happen(like functions, switch cases, guards etc.)?', 'comment_created': datetime.datetime(2022, 9, 7, 11, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 965080610, 'comment_body': 'Please add some test cases in `test/Main.hs` too. That file is for integration tests.\r\n\r\n`Ide/Plugin/CodeRangeTest` contains unit tests. Your tests for `findFoldingRanges` is good ;) Maybe you could add a  test case for `createFoldingRange` too.', 'comment_created': datetime.datetime(2022, 9, 7, 16, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 968096409, 'comment_body': '1. You are preserving the first one. Are you sure this list is sorted, so that the first one is the largest one?\r\n2. You can use `frx : xs2` instead of `[frx] ++ xs2`', 'comment_created': datetime.datetime(2022, 9, 12, 7, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 968102858, 'comment_body': ""1. Yes, the list is always sorted by having the biggest coderange first, but this is just my observation.\r\n2. I've changed it, thanks!"", 'comment_created': datetime.datetime(2022, 9, 12, 8, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 968109400, 'comment_body': ""Approved. As this is part of your GSOC project, let's wait for another approval from @michaelpj"", 'comment_created': datetime.datetime(2022, 9, 12, 8, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 971026502, 'comment_body': 'you implemented it!', 'comment_created': datetime.datetime(2022, 9, 14, 16, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971032068, 'comment_body': '```suggestion\r\n    pure $ findFoldingRanges codeRange\r\n```\r\n', 'comment_created': datetime.datetime(2022, 9, 14, 16, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971036067, 'comment_body': ""Worth a note that this isn't risky because `frRoot` has  length 0 or 1, otherwise it could be quadratic. Have to be careful with `++`. You could make this totally unambiguous by pushing this inside the `frRoot` bit, i.e.\r\n```\r\nlet frChildren = ...\r\nin case createFoldingRange r of\r\n  Just x -> x:frChildren\r\n  Nothing -> frChildren\r\n```\r\nnot sure if that's better"", 'comment_created': datetime.datetime(2022, 9, 14, 16, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971036688, 'comment_body': ""why? this sort of thing _really_ needs a comment, ideally with an example showing why it's problematic. You spent lots of time figuring this out, and all that knowledge is going to be lost unless you write it down!"", 'comment_created': datetime.datetime(2022, 9, 14, 16, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971037306, 'comment_body': 'Why is this good? Give an example!', 'comment_created': datetime.datetime(2022, 9, 14, 16, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971038715, 'comment_body': ""This isn't a total pattern match, I think? Does GHC not give you a warning here? The pattern is also a bit hard to understand, I'd split it up, maybe just match on `(x:xs)` and then do the rest in let-bindings."", 'comment_created': datetime.datetime(2022, 9, 14, 16, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971039768, 'comment_body': 'And it removes _everything_ that starts on the same line? Why is that good?', 'comment_created': datetime.datetime(2022, 9, 14, 16, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971040343, 'comment_body': 'This could also be in its own module: this module is `CodeRangeTest`, perhaps create `FoldingRangeTest`. Not super important though.', 'comment_created': datetime.datetime(2022, 9, 14, 16, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971041611, 'comment_body': ""Why is this Nothing? I think this would be answered by more explanation about what you're doing with code ranges on the same line"", 'comment_created': datetime.datetime(2022, 9, 14, 16, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971059352, 'comment_body': 'Should I just remove ""folding"" from here? Or should I mention implemented?', 'comment_created': datetime.datetime(2022, 9, 14, 16, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 971069132, 'comment_body': 'Also I think you might just be able to use https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-List.html#v:nubBy', 'comment_created': datetime.datetime(2022, 9, 14, 16, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971069162, 'comment_body': ""So, Something in one line does not need folding like what will it exactly fold. So I am removing all the folding ranges that start and end on the same line. (This logic is also handled by vscode itself, double proofing it by removing them).\r\n\r\nI'll add an explanation about this in the comments."", 'comment_created': datetime.datetime(2022, 9, 14, 16, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 971074766, 'comment_body': 'Okay, This makes sense, I had not thought about this(also did not know about this 😅)', 'comment_created': datetime.datetime(2022, 9, 14, 16, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 971086840, 'comment_body': ""This is a total pattern match. \r\n\r\nI'll document how it works in the comments, I guess that should help, mainly understanding the destructuring should help. \r\n\r\nAlso, I feel I should rename the x and y to something more self-explanatory. Should I change it?"", 'comment_created': datetime.datetime(2022, 9, 14, 17, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 971128588, 'comment_body': 'Module CodeRangeTest only had tests about selection range. \r\n\r\nSo I thought of it as testing CodeRange implementation on selection and folding ranges.\r\n\r\nShould I keep it the same or change it?', 'comment_created': datetime.datetime(2022, 9, 14, 17, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 971133791, 'comment_body': 'PTAL, if the explanation in the comments is adequate or not?', 'comment_created': datetime.datetime(2022, 9, 14, 17, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 971134896, 'comment_body': 'PTAL, if the explanation in the comments is adequate or not?\r\n\r\nI wrote a nice explanation in the remove duplicate as well as the function where we parse the root and its children.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 971140501, 'comment_body': ""I was also thinking if we can fit this function before we make the folding ranges but that does not seem very convenient. Will that have a significant efficiency advantage? \r\n\r\nIt is not convenient because we don't have a place where we can easily judge that these ranges will be duplicates and they start from the same line (like a list of CodeRanges).\r\n\r\nI guess the current way is easily maintainable and readable code-wise,"", 'comment_created': datetime.datetime(2022, 9, 14, 18, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 971753664, 'comment_body': ""It's a table of unimplemented stuff, so remove it!"", 'comment_created': datetime.datetime(2022, 9, 15, 9, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971755147, 'comment_body': ""It's a little tricky, but `++` is linear in the first argument, so any time you see `++` and a tree traversal you want to be careful!"", 'comment_created': datetime.datetime(2022, 9, 15, 9, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971755503, 'comment_body': 'I think this way is fine!', 'comment_created': datetime.datetime(2022, 9, 15, 9, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971756320, 'comment_body': 'Oh I see, good point. I forgot that ""code range"" is more general than ""selection range""!', 'comment_created': datetime.datetime(2022, 9, 15, 9, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971757802, 'comment_body': 'This should e `frChildren`! Did the tests keep passing with this? If they did, you are missing some tests!', 'comment_created': datetime.datetime(2022, 9, 15, 9, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971759445, 'comment_body': ""Good explanation. Are we 100% sure this is true, though? I feel like I've seen 1-line folding ranges in emacs where it turns\r\n```\r\nfoo = ...\r\n```\r\ninto\r\n```\r\nfoo ...\r\n```\r\nwhich is a bit weird but not obviously wrong. Maybe we should pass them through and just let the client decide whether or not to use them? You said vscode ignores them already."", 'comment_created': datetime.datetime(2022, 9, 15, 9, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971764091, 'comment_body': ""I think this is the most important line. This is the property that you want: for each line, we only return one folding range, and it should be the largest amongst all the folding ranges we have.\r\n\r\nIf we specify the behaviour like that then it suggests other ways we could implement this function, e.g. go through the list maintaining a map from lines to the largest folding range so far that starts on that line, and then each time we see a range, check if it is bigger than the existing one. That would remove the way the current implementation depends on the order.\r\n\r\nIt also raises some questions: folding ranges can overlap, with neither being bigger than the other (e.g. two ranges on the same line with character ranges [0, 5] and [1,6]). Which one should we pick then?\r\n\r\nLastly, are we sure this is what we want? Your example is interesting: why do we assume that people will want to fold the function rather than the if expression? I wonder if we *can* leave this up to the client. It seems like the server's job should just be to report all the ranges it knows about, and then the client can potentially make the decision about which ones to show to the user. What happens in e.g. vscode if we return multiple folding ranges starting on the same line?"", 'comment_created': datetime.datetime(2022, 9, 15, 9, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971833987, 'comment_body': 'Do people use this kind of foldings?\r\n\r\nI guess we should let it be like this, there are a lot of foldings already and it might make things chaotic.\r\n\r\nAlso talked about this with @kokobd earlier', 'comment_created': datetime.datetime(2022, 9, 15, 10, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 971836304, 'comment_body': 'I’ll test it manually as well. There were no errors in the codebase as well as the tests.', 'comment_created': datetime.datetime(2022, 9, 15, 10, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 972047523, 'comment_body': ""Well, that tells us the case you're not testing: a code range with a kind that we can't handle, but which has children that could provide valid folding ranges. That's the case that will go wrong here."", 'comment_created': datetime.datetime(2022, 9, 15, 14, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 973046481, 'comment_body': 'Then maybe we should preserve the longest folding range on each line?', 'comment_created': datetime.datetime(2022, 9, 16, 13, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 973048434, 'comment_body': ""Use `nubOrdBy` from `extra` or `containers`? It's faster."", 'comment_created': datetime.datetime(2022, 9, 16, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 973053853, 'comment_body': '> folding ranges can overlap\r\n\r\nfolding ranges correspond to the ranges of AST nodes. I can not come up with a case where two AST nodes overlap, while neither of them is the parent of the other.', 'comment_created': datetime.datetime(2022, 9, 16, 13, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 973551259, 'comment_body': '> Then maybe we should preserve the longest folding range on each line?\r\n\r\nI guess we should do this\r\n', 'comment_created': datetime.datetime(2022, 9, 17, 7, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 973571630, 'comment_body': ""What happens if we send all the ranges to the client? I guess you tried it and it was bad? Worth writing it down so we know why we're doing it."", 'comment_created': datetime.datetime(2022, 9, 17, 10, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 973571839, 'comment_body': ""Good point! So that gives us some information. We can have parents and children on the same line, though so that suggests that we know the following: code ranges only overlap if one of them entirely contains the other one. That's useful. We still can't totally order them because we could also have *non*-overlapping code ranges on the same line (which one is bigger?)."", 'comment_created': datetime.datetime(2022, 9, 17, 10, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 973572024, 'comment_body': 'Nothing happens, vscode handles it well.\r\n\r\nBut the code is difficult to test (reference: https://github.com/haskell/haskell-language-server/pull/3058#issuecomment-1242659776 and the commit above this)\r\n\r\nAnd if there is a client that does not handle this, it might go bad, so handling it on hls itself', 'comment_created': datetime.datetime(2022, 9, 17, 10, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 973573636, 'comment_body': ""I think if the client handles it then it's better to just give the client all the information! We can change it later if it's a problem.\r\n\r\nI agree it's more effort to verify that the test output is correct, but that's useful work: we're going to return lots of small folding ranges, we _should_ think carefully about whether they're all right!"", 'comment_created': datetime.datetime(2022, 9, 17, 11, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 973672022, 'comment_body': 'Should I keep the code there and comment or remove it for handling the extra folding ranges? ie. the remove duplicates folding range and the case to check if startline and endline are same.', 'comment_created': datetime.datetime(2022, 9, 18, 7, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 973688932, 'comment_body': ""Then I vote to remove the deduplicating code if that doesn't change the user experience. You should leave a comment explaining the situation."", 'comment_created': datetime.datetime(2022, 9, 18, 9, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 973702019, 'comment_body': ""So `CodeRangeKind` can only be -->\r\n```\r\n-- | 'CodeKind' represents the kind of a code range\r\ndata CodeRangeKind =\r\n    -- | ordinary code\r\n    CodeKindRegion\r\n    -- | the group of imports\r\n  | CodeKindImports\r\n  -- | a comment\r\n  | CodeKindComment\r\n    deriving (Show, Eq, Generic, NFData)\r\n```\r\n\r\nI am not sure how can I mention something that does not have a valid codekind.\r\n\r\nBut meanwhile folding range kind looks like this --> https://hackage.haskell.org/package/lsp-types-1.0.0.0/docs/Language-LSP-Types.html#t:FoldingRangeKind\r\n\r\nIt has a `FoldingRangeUnknown` kind, I don't think this can be triggered by our method of CodeRange.\r\n\r\n\r\nI'm not sure if we can write a test about this.\r\n"", 'comment_created': datetime.datetime(2022, 9, 18, 11, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 973737037, 'comment_body': ""Then why is there a `Nothing` case in `crkToFrk`? (https://github.com/haskell/haskell-language-server/pull/3058/files#diff-b72658b4ae69940ecdda95504f965e4ac60e70b0c7582360149b9bb52bd361f6R201) I guess that's actually a redundant match and it could be total. `crkToFrk` returning `Nothing` is the case that would trip this up."", 'comment_created': datetime.datetime(2022, 9, 18, 15, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 973737211, 'comment_body': 'Yeah, I think we can just a) not remove folding ranges on a single line and b) not remove folding ranges contained in other folding ranges, and add a note saying ""we think the client can handle this, if not we could change to remove these in future"".', 'comment_created': datetime.datetime(2022, 9, 18, 15, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 973744015, 'comment_body': 'Okay, I’ll remove both of the filters and add a comment explaining the situation and edit the tests.', 'comment_created': datetime.datetime(2022, 9, 18, 16, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 973744097, 'comment_body': 'Yes makes sense, I’ll remove this case', 'comment_created': datetime.datetime(2022, 9, 18, 16, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 974287022, 'comment_body': 'Closing as this functionality has been left for the client to handle', 'comment_created': datetime.datetime(2022, 9, 19, 14, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 974288524, 'comment_body': 'Closing as this functionality has been left for the client to handle', 'comment_created': datetime.datetime(2022, 9, 19, 14, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 974288849, 'comment_body': 'Resolved', 'comment_created': datetime.datetime(2022, 9, 19, 14, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 974340622, 'comment_body': 'TODO?', 'comment_created': datetime.datetime(2022, 9, 19, 14, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 974342794, 'comment_body': 'Modified this file by accident?', 'comment_created': datetime.datetime(2022, 9, 19, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 974347490, 'comment_body': 'Writing down known issues: https://github.com/haskell/haskell-language-server/pull/3058#issuecomment-1247838543', 'comment_created': datetime.datetime(2022, 9, 19, 14, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 974349224, 'comment_body': ""Ah yes, stylish-haskell was adding white spaces in the import lines, and it was messing up the selection ranges defined in the tests, I'll revert it."", 'comment_created': datetime.datetime(2022, 9, 19, 14, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 974353910, 'comment_body': 'Reverted it back to normal', 'comment_created': datetime.datetime(2022, 9, 19, 14, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 974356284, 'comment_body': 'Oh, maybe we could run the formatter in a separate PR.', 'comment_created': datetime.datetime(2022, 9, 19, 14, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 974361419, 'comment_body': ""Yep, We'll also have to edit the test case file."", 'comment_created': datetime.datetime(2022, 9, 19, 14, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}, {'comment_id': 976077002, 'comment_body': 'If you are worried that `tail` is not a total function, you can use [`drop 1`](https://hackage.haskell.org/package/base-4.17.0.0/docs/Prelude.html#v:drop)', 'comment_created': datetime.datetime(2022, 9, 21, 6, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kokobd', 'type': 'User'}, {'comment_id': 976078662, 'comment_body': 'Makes sense, changed it.', 'comment_created': datetime.datetime(2022, 9, 21, 6, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sloorush', 'type': 'User'}]","[{'commit_sha': '098882de15d0d5901005714b5f5d7eb843dc2ab9', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e44b7ac6f241be8d938e5a1365893d612b66e41', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fec18246d8a5da155e1b5507cd29a8d76a3bfd14', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9ffcc1024a96816864a7194496b4f72b67578f5', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d28a2c961448c3c5865bd17ab3b8b018abe52d6', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60b213665c7952d4282cbe4549fce3b7a5939b2c', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a1e9d26f012075bbda25793650ce9c6510bd74', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a032c78d2183ca50bc01f5f9b82e71fdfa127f96', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '892a1295f94891ed4147ba3c50c904648c2ca608', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6a2b5ca3e8232bc082ce84d22545a5bd462a2ff', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e21f5cb3a10e72e3c9b6eb5ad3a660d8249da020', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '799db9bf74ddb058d9f6b5dbf5e2a3e6462c2305', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d0d15965e8067b2c34c743afeb2ba4f97c544b3', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '332e9538790ef4b4eb1a6dad5c55216405d7ec62', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4f386d457aee4941787d89df8373c835826ead1', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eb7a3018ec27f3fa9ea90c3d8776677363c6298', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e3fb26492fffabdc1f7c36d9f39c41786c67b5', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3f0007f2afa3774c0ab27bbd3c0cad5c3db5f4c', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '474ffef5983505d81a413e6fb06f6d9740d36e9e', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6975302bd702a660ba525110e1d4b10560b97460', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a430a43f96f3c91f40aaf2576fc0af04e618cbd4', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baf419e3fe0ab6510335f780c21869464f04e830', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6a8666f85382ced010ada31321cbba808873d13', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9dc5698cec7479957c08c0861e6a2aae3997745', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c46a7f48612df26396368fb99b91ed62454e74b9', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '959a53ba81a0467c719eeb816d2f1173b19af69f', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8ee9f9d75052c41901948d17e4af91d848bbb68', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c5819699475a22bec2c486ff21df9c4b687a57', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9181b04ca60acb548697764a09be1721c3dd3407', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86f10689f1811d5382e8551fcd52b8a50525417c', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3f1c4a8d0b772dae450cf47910bb74989c47e2c', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57cb482c5b59fd73abce15e193ab558a11f6f22e', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd9fa53b9223ab16e9c85df038ce1aabd41a7a5', 'committer_username': 'sloorush', 'committer_name': 'Aarush Bhat', 'committer_email': 'hey@sloorush.com', 'commit_date': datetime.datetime(2019, 8, 24, 15, 48, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c023548d8cfd3a715900a6f34943d5e373f91d6f', 'committer_username': 'kokobd', 'committer_name': 'Kobayashi', 'committer_email': 'contact@zelinf.net', 'commit_date': datetime.datetime(2015, 12, 26, 0, 22, 40, tzinfo=datetime.timezone.utc)}]",Aarush Bhat,54478821,hey@sloorush.com,User,,72,,119,88

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
236179694,haskell-language-server,haskell/haskell-language-server,Haskell,354,2638,51,235,3663,493,592,53,"[{'id': 1006429792, 'number': 3058, 'closed': datetime.datetime(2022, 9, 21, 11, 59, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 23, 22, 28, 57, tzinfo=datetime.timezone.utc), 'time_taken': 5146261.0, 'time_delta': '59 days, 13:31:01', 'additions': 265, 'deletions': 27, 'state': 'closed'}, {'id': 1005608938, 'number': 3054, 'closed': None, 'created': datetime.datetime(2022, 7, 22, 9, 57, 51, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 16, 'deletions': 3, 'state': 'open'}, {'id': 947959936, 'number': 2930, 'closed': datetime.datetime(2022, 5, 26, 12, 6, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 26, 7, 29, 32, tzinfo=datetime.timezone.utc), 'time_taken': 16600.0, 'time_delta': '4:36:40', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 905055730, 'number': 2819, 'closed': datetime.datetime(2022, 5, 23, 9, 44, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 9, 21, 38, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3758804.0, 'time_delta': '43 days, 12:06:44', 'additions': 2, 'deletions': 4, 'state': 'closed'}]"
