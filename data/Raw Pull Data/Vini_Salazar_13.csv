pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1054912914,Draft classes of object/opinionated layer,"Hi,

this PR is a draft of how the new object/opinionated layer should look like. It does not have any ""proper"" code yet, just a scaffold of how the classes would look like. I am submitting it so we can discuss the best way of implementing this layer based on the discussion on #228.

I have a couple of questions:
- What would be the best name for the subpackage and main module? I went with `objects/` and `objects.py` so there wouldn't be any confusion with the Python `object` reserved word, but I also considered `orm` as the name.
- On #228, @ocefpaf suggests that on the `ERDDAPConnection` class:
> `@property(server) -> ERDDAPConnection`
> Return a new ERDDAPConnection if trying to set a new server, or change other attributes rather than changing it in place.

I wasn't sure of what's the best way to do this. I wrote a `.to_string` method which takes either a string (with the new server URL) or an instance of `ERDDAPConnection` and returns just a string, or a `TypeError`:

https://github.com/ioos/erddapy/blob/257de3d4144c6a7011d36e0617aa1b89ebf79287/erddapy/objects/objects.py#L22-L33

That function is then used in the `.server` setter and in the `ERDDAPServer` `__init__` and `connection`. How should the `ERDDAPConnection.server` setter return a new instance? This doesn't look like it would work:

```python
    @connection.setter
    def connection(self, value: str):
        return ERDDAPConnection(value)
``` 

Once you approve this, I will start implementing the `core` functions in this layer. Looking forward to hearing your feedback.

Thanks,
Vini",False,267,https://api.github.com/repos/ioos/erddapy/pulls/267,https://github.com/ioos/erddapy/pull/267,open,303,26,9,15,4,6,1,0,[{'name': 'GSoC22'}],2022-09-13 16:10:15+00:00,,0.0,,"[{'comment_id': 978690009, 'comment_body': ""I think we would probably want to split each class out into it's own file. Maybe use the __init__ docstring to give a big overview of relationship between classes."", 'comment_created': datetime.datetime(2022, 9, 23, 13, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978694823, 'comment_body': '`ERDDAPConnection` largely acts as a wrapper around requests/htmx/urllib that then can be used by the other classes when data access needs to happen.', 'comment_created': datetime.datetime(2022, 9, 23, 13, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978695894, 'comment_body': ""I'm unsure if we actually need to store the server on here, which may simplify other things."", 'comment_created': datetime.datetime(2022, 9, 23, 13, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978698147, 'comment_body': 'Maybe `.open()` should be a context manager that gives a `pathlib.Path` to a temporary file.\r\n\r\nWe could also have an explicit `.save()` method that uses `.open()` under the hood.', 'comment_created': datetime.datetime(2022, 9, 23, 13, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978747849, 'comment_body': '```suggestion\r\n    def __init__(self, url: str, connection: ERDDAPConnection | None):\r\n        """"""Initialize instance of ERDDAPServer.""""""\r\n        if ""http"" in url:\r\n            self.url = url\r\n        else:\r\n            # get URL from dict of ERDDAP servers\r\n        self._connection = connection or ERDDAPConnection()\r\n```\r\n\r\nIf the connection doesn\'t include server info, then the connection can be simplified.\r\n\r\nWe could also support initializing servers based on whats in the [`servers.server_list`](https://github.com/ioos/erddapy/blob/6057872825aa29423e31c849a3c921fe25474e21/erddapy/servers/servers.py#L10) as we currently do.', 'comment_created': datetime.datetime(2022, 9, 23, 14, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978766729, 'comment_body': 'For the datasets, I envisions supporting some subset of the xarray/pandas filtering/subsetting API.\r\n\r\nFor instance if I had a `GridDataset` for http://www.neracoos.org/erddap/griddap/WW3_72_GulfOfMaine_latest.html as `eds` I could do something like to filter down:\r\n\r\n```py\r\neds = GridDataset.from_url(""http://www.neracoos.org/erddap/griddap/WW3_72_GulfOfMaine_latest.html"")\r\n\r\neds = eds[[\'hs\', \'dir\']]  # select just the wave height and direction variables\r\neds = eds.sel(time=slice(""2022-09-23T00:00:00Z"", ""2022-09-26T00:00:00Z"")) # only for a subset of the time range\r\n```\r\n\r\nThen there are different ways that we could consume the dataset.\r\n\r\n```py\r\nds = eds.to_xarray() # creates a xarray dataset via OpenDAP and filters/slices based on the earlier operations\r\n\r\nnetcdf_url = eds.url(\'nc\')  # return the NetCDF url\r\n\r\neds.save(\'nc\', NETCDF_PATH)  # Save a netcdf locally.\r\n```\r\n\r\nWe probably want to validate that filtering/slicing is working on legit values by default, but have a way to enable/disable it both globally/per dataset. To validate it, we would need to retrieve all the valid variables and dimensions from the server.', 'comment_created': datetime.datetime(2022, 9, 23, 14, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}]","[{'commit_sha': '68d51dd43d29666d7db52a2c7988d2de1207c720', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60e4e4f9d96f8d6004ca78ba896d4bba6c25868', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6a2086cc16346ca7029ce3cf91deb28db13b488', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2961ef379b8d1bb7f0168fa1026918385ab795', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85f5233e33cfc60386cbbfcef0178e8493b2b0a8', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5aa1dc1e3b3b0db9b06700b96bb4e096b52f524', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e38d850c8bce5d8bb01baae8b396be99167f7e', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '101d1b05ab761ee47413985f3a58cf11e6fd860a', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b33bd08dba9f5f48d738e7aa477d9892d8581787', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9345c93658d32fc192100e1b6c11bb2bf645717e', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5ab397aaaa70c6ebd608675939fafb0d88d5486', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '122c14defb31856413e9c002c7f9f58ccaac74cc', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0782350642360af358fb963b4b4bc38a038b5421', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a918c432d216586f9b407b9028b790ac6e37f11', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f9c1195c89d01e7447b5c267f8dcdf7a40a2be', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
999522083,Start refactoring project,"Hi,

I have started work on the refactoring project. This PR creates the `core` subpackage and moves the `url_handling` and `netcdf_handling` modules to that. I was thinking of first consolidating the module/directory structure and then moving on to making the code changes.

I was unsure of whether the `erddapy` module should go inside the `core` subpackage. From my understanding, we are eventually going to get rid of the `ERDDAP` class in favour of the new classes in the object layer (or maybe keep it for backwards-compatibility?).  Should other functions in that module (e.g. `_search_url`, `parse_dates`, etc.) be moved into a separate module of the `core` subpackage?

The same goes for the server modules (`servers.py`, `multiple_server_search.py` and the `erddaps.json` file). Should those go into `core` or into a subpackage of their own?

Lastly, should we create a `refactor` or `layer-refactoring` branch to merge this PR into?

Please let me know what you think.

Thank you,
Vini

**Summary of changes**
- Add files to .gitignore
- Create `core` subpackage
- Move `url_handling` and `netcdf_handling` to new subpackage
- Refactor imports",True,259,https://api.github.com/repos/ioos/erddapy/pulls/259,https://github.com/ioos/erddapy/pull/259,closed,48,29,16,9,14,0,1,0,[{'name': 'GSoC22'}],2022-07-18 15:06:10+00:00,2022-08-17 13:56:33+00:00,2587823.0,"29 days, 22:50:23",[],"[{'commit_sha': 'c2a3f516deaa07a325913187147f79201ffe6bf0', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09139f88086f32e0c198ffe453523c9014f66508', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce48ee7c0a457f53cfd2850cc77d0833a589eab', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6a28809652cae71ff26cbe43d4734adc9f61032', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f2802630f64dd103917b685723fb832c0f4ac0a', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbf11db5ed8b7ad1578ec2364439528954271930', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80d49a25c385bc1c83debb78910987fc1c61c141', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1465dd4630bf104e8e647e85196c6408839b238b', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59291fd7f55aa88939e4b073db4bac12fab959b3', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
1009953178,Refactor tests to use gold standard servers,"Hi,

this PR is in relation to #258.

I refactored tests to use the servers listed on the issue. I kept some tests as they are (in `test_to_objects.py`) and modified `test_search_url_change_protocol` in `test_url_builder.py` while there aren't any griddap datasets.

While working on `test_to_objects.py`, I ran into a problem with the `to_xarray` method. I wasn't able to read the NC dataset from memory, and detailed it in #261.

Thanks,
Vini

**Summary of changes**
- Refactor tests to use gold standard ERDDAP servers
- Modify `dataset_id`, `constraints`, and `variables`
- Rewrite cassettes",True,260,https://api.github.com/repos/ioos/erddapy/pulls/260,https://github.com/ioos/erddapy/pull/260,closed,10301,48270,20,6,2,0,1,0,[{'name': 'GSoC22'}],2022-07-27 17:59:28+00:00,2022-07-28 11:27:28+00:00,62880.0,17:28:00,[],"[{'commit_sha': '899b2c3aabad6c767783b4a55577089bdd8ef029', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7345ce4f392941744f8fb42efe2cc25bb65518', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12983f6ce041f48936076f8697c8126f07e4b995', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5950cb33438985bc1ec94daa49c8d426c352c7b0', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e1418c5cdbec7587e2a1fb072ba8d27709ddb49', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e59a850411dab28fa0de63c5ab69d2ea92cc535e', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
1018747776,Refactor `erddapy.py` and rename core modules,"This PR contains the same changes as #259 plus the last 3 commits, so it'd be easier to review it after merging that one.

Thanks,
Vini

**Summary of changes**
- Refactor URL and griddap handling functions out of the `erddapy.py` module into their own modules in `erddapy.core`
- Rename modules in `erddapy.core`
- Refactor imports",True,263,https://api.github.com/repos/ioos/erddapy/pulls/263,https://github.com/ioos/erddapy/pull/263,closed,325,303,10,3,1,0,1,0,[{'name': 'GSoC22'}],2022-08-05 14:25:27+00:00,2022-08-17 15:01:14+00:00,1038947.0,"12 days, 0:35:47",[],"[{'commit_sha': '18bb075bad4adc97a4f20ea8336291e51a34a020', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aff0f6000829024d954be4dd973bd42df1856ea', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1582282b1bf18d8e0681467eb9cf328ddfe56025', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
1023982157,Refactor url methods,"Hi,

this is a downstream branch of #263, so it will be easier to review after merging that and #259. It includes two additional commits that move `get_search_url`, `get_info_url` and `get_categorize_url` from the `erddapy.erddapy` module to the `erddapy.core.url` module.

For `get_download_url`, it's a bit more tricky: it would incur in a circular import between `erddapy.core.url` and the newly-added `erddapy.core.griddap` module, because of the `urlopen` and `_urlopen` functions. So, I'm thinking whether I should move those functions to a new module (maybe `erddapy.core.helpers` or `erddapy.core.__init__`?). Please let me know what you think is best.

Thank you,
Vini

**Summary of changes** (in relation to #263):
- Move the `get_search_url`, `get_info_url`, and `get_categorize_url` to the URL module
- Refactor the private `_search_url` function as public
- Edit docstrings to use gold standard servers",True,264,https://api.github.com/repos/ioos/erddapy/pulls/264,https://github.com/ioos/erddapy/pull/264,closed,254,105,6,4,3,5,1,0,[{'name': 'GSoC22'}],2022-08-11 15:03:12+00:00,2022-08-31 18:56:00+00:00,1741968.0,"20 days, 3:52:48","[{'comment_id': 956373877, 'comment_body': 'I considered not removing these imports but pre-commit is failing because of that.', 'comment_created': datetime.datetime(2022, 8, 26, 19, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 956375097, 'comment_body': 'This would spare the need of refactoring imports in argopy, e.g. [this line](https://github.com/euroargodev/argopy/blob/0c408e9f8fc15e7ae68802703b66b1768345a9d9/argopy/data_fetchers/erddap_index.py#L34)', 'comment_created': datetime.datetime(2022, 8, 26, 19, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 957774630, 'comment_body': 'I added [`04310c7`](https://github.com/ioos/erddapy/pull/264/commits/04310c7b77f057e99a6b159dcdef3d61a96c722b) with an `__all__` variable to include these imports in the module.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 959915853, 'comment_body': 'That is probably better than a specific dataset_id. Thanks!', 'comment_created': datetime.datetime(2022, 8, 31, 18, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 959916667, 'comment_body': '@MathewBiddle we should probably move this to `https` at some point.', 'comment_created': datetime.datetime(2022, 8, 31, 18, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}]","[{'commit_sha': 'f5ef393d97e3996236a2075330d8ac134a816167', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da9ceb1bec8843fdc6b2725b2da4a666c3b7bb98', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04310c7b77f057e99a6b159dcdef3d61a96c722b', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66545d14544593665bcfa3ccfedbaaf143c86da9', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
1103889184,Interfaces,"Hi,

this PR creates module `core.interfaces`, with methods to use URLs to generate third-party datasets. These methods are used in the `ERDDAP` class.

I rebased the `classes` branch from #267 with this branch.

If you could pay special attention to review how `kwargs` are being propagated across methods, that would be great.

Thanks,
Vini",True,277,https://api.github.com/repos/ioos/erddapy/pulls/277,https://github.com/ioos/erddapy/pull/277,closed,71,29,4,11,2,21,1,0,[{'name': 'GSoC22'}],2022-10-29 08:51:50+00:00,2022-11-17 18:32:54+00:00,1676464.0,"19 days, 9:41:04","[{'comment_id': 1015853536, 'comment_body': 'This check should probably be in the function you created and not here in the method, right?', 'comment_created': datetime.datetime(2022, 11, 7, 20, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 1015855399, 'comment_body': 'Maybe you can perform that check on the URL to avoid pushing the url creation to the function.', 'comment_created': datetime.datetime(2022, 11, 7, 20, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 1017125345, 'comment_body': 'I was thinking about how to do this but the check is required to determine the `response` argument in the `get_download_url` method.', 'comment_created': datetime.datetime(2022, 11, 8, 21, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1019405773, 'comment_body': 'The one in `interfaces.py` would be broken if someone tries to use it directly .I believe that, to avoid this, we are OK adding an extra keyword `protocol=None` here that is passed there. Then we need a check here like:\r\n\r\n```python\r\nprotocol = protocol if protocol else self.protocol\r\n```', 'comment_created': datetime.datetime(2022, 11, 10, 17, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 1022076763, 'comment_body': 'Change `request_kwargs` arg to `None`, and create empty dict if is None. Avoid having mixed starred args or mutable types as input.', 'comment_created': datetime.datetime(2022, 11, 14, 21, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1022077350, 'comment_body': ""Don't rename imported classes. Use `import netCDF4` or something similar."", 'comment_created': datetime.datetime(2022, 11, 14, 21, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1022078145, 'comment_body': 'Use `except Exception as e`, raise `e` with the error message.', 'comment_created': datetime.datetime(2022, 11, 14, 21, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1022079362, 'comment_body': 'Try to narrow scope of exception catch: what kind of exceptions Pandas will throw? We may be able to deal with some.', 'comment_created': datetime.datetime(2022, 11, 14, 21, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1022080393, 'comment_body': ""Use `raise ValueError` instead.\r\n\r\nPrint URL here, e.g. `Cannot use ncCF with griddap for URL xxxx`.\r\n\r\nIt's always nice to have URL in error."", 'comment_created': datetime.datetime(2022, 11, 14, 21, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1022081798, 'comment_body': 'Get rid of this block in favour of pinning latest iris version.', 'comment_created': datetime.datetime(2022, 11, 14, 21, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1022081985, 'comment_body': 'Change requirements for whatever version and above.', 'comment_created': datetime.datetime(2022, 11, 14, 21, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1022085188, 'comment_body': 'Use `urlopen` instead of `to_pandas`.', 'comment_created': datetime.datetime(2022, 11, 14, 21, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1023461080, 'comment_body': '@ocefpaf Iris version is pinned in the `environment.yml` file, does it need to be anywhere else?', 'comment_created': datetime.datetime(2022, 11, 16, 3, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1023461581, 'comment_body': ""Sorry, I wasn't sure if we had settled on using `Dataset` or `import netCDF4 as nc` and then use `nc.Dataset` (like `xr.Dataset`)."", 'comment_created': datetime.datetime(2022, 11, 16, 3, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1023462165, 'comment_body': 'I would prefer to avoid importing the whole module for the sake of a single type hint (even if it improves readability).', 'comment_created': datetime.datetime(2022, 11, 16, 3, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 1024073923, 'comment_body': ""This is fine. We don't have any clashes with `Dataset` in this module."", 'comment_created': datetime.datetime(2022, 11, 16, 14, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 1024074963, 'comment_body': 'It is kind of standard to initialize dicts like this. I know, less readable, but there are some optimizations at play here.\r\n\r\n```suggestion\r\n        requests_kwargs = {}\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 14, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 1024085547, 'comment_body': 'Ideally we should narrow down the scope here instead of casting a wide net with `Exception`. What errors are we expecting?\r\n\r\nIn a way, we could interpret it as a ValueError to the `pandas_csv` and do a raise from like:\r\n\r\n```python\r\ntry:\r\n    return pd.read_csv(data, **kw)\r\nexcept Exception as e:\r\n    raise ValueError(f""Could not read url {url} with Pandas.read_csv."") from e\r\n```\r\n', 'comment_created': datetime.datetime(2022, 11, 16, 14, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 1024086398, 'comment_body': '```suggestion\r\n        raise ValueError(""Cannot use .ncCF with griddap protocol."")\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 14, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 1024088055, 'comment_body': 'We need to change it in https://github.com/ioos/erddapy/blob/3119ee22ffd7d66d6b92eb28c5feccc20a4d91d3/requirements-dev.txt#L31.', 'comment_created': datetime.datetime(2022, 11, 16, 14, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 1024596776, 'comment_body': 'Thanks, that looks much better ', 'comment_created': datetime.datetime(2022, 11, 16, 23, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}]","[{'commit_sha': '68d51dd43d29666d7db52a2c7988d2de1207c720', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60e4e4f9d96f8d6004ca78ba896d4bba6c25868', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6a2086cc16346ca7029ce3cf91deb28db13b488', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2961ef379b8d1bb7f0168fa1026918385ab795', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85f5233e33cfc60386cbbfcef0178e8493b2b0a8', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb95092e02ee13ea661b6983172eb140d7b1445b', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90f556f7e382b1940966af9dc3cd94fac924f287', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c363bbfd140c3f6a43f84e3c87ef33b890b9aa0', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c097922cb70619f55854dc9f302381221719529c', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4d9d37f13a3aa2182f28404e9a8008105eac8de', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a28f170ed88a3b3ff5171d30126c29df38d2485b', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
1054912914,Draft classes of object/opinionated layer,"Hi,

this PR is a draft of how the new object/opinionated layer should look like. It does not have any ""proper"" code yet, just a scaffold of how the classes would look like. I am submitting it so we can discuss the best way of implementing this layer based on the discussion on #228.

I have a couple of questions:
- What would be the best name for the subpackage and main module? I went with `objects/` and `objects.py` so there wouldn't be any confusion with the Python `object` reserved word, but I also considered `orm` as the name.
- On #228, @ocefpaf suggests that on the `ERDDAPConnection` class:
> `@property(server) -> ERDDAPConnection`
> Return a new ERDDAPConnection if trying to set a new server, or change other attributes rather than changing it in place.

I wasn't sure of what's the best way to do this. I wrote a `.to_string` method which takes either a string (with the new server URL) or an instance of `ERDDAPConnection` and returns just a string, or a `TypeError`:

https://github.com/ioos/erddapy/blob/257de3d4144c6a7011d36e0617aa1b89ebf79287/erddapy/objects/objects.py#L22-L33

That function is then used in the `.server` setter and in the `ERDDAPServer` `__init__` and `connection`. How should the `ERDDAPConnection.server` setter return a new instance? This doesn't look like it would work:

```python
    @connection.setter
    def connection(self, value: str):
        return ERDDAPConnection(value)
``` 

Once you approve this, I will start implementing the `core` functions in this layer. Looking forward to hearing your feedback.

Thanks,
Vini",False,267,https://api.github.com/repos/ioos/erddapy/pulls/267,https://github.com/ioos/erddapy/pull/267,open,303,26,9,15,4,6,1,0,[{'name': 'GSoC22'}],2022-09-13 16:10:15+00:00,,0.0,,"[{'comment_id': 978690009, 'comment_body': ""I think we would probably want to split each class out into it's own file. Maybe use the __init__ docstring to give a big overview of relationship between classes."", 'comment_created': datetime.datetime(2022, 9, 23, 13, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978694823, 'comment_body': '`ERDDAPConnection` largely acts as a wrapper around requests/htmx/urllib that then can be used by the other classes when data access needs to happen.', 'comment_created': datetime.datetime(2022, 9, 23, 13, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978695894, 'comment_body': ""I'm unsure if we actually need to store the server on here, which may simplify other things."", 'comment_created': datetime.datetime(2022, 9, 23, 13, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978698147, 'comment_body': 'Maybe `.open()` should be a context manager that gives a `pathlib.Path` to a temporary file.\r\n\r\nWe could also have an explicit `.save()` method that uses `.open()` under the hood.', 'comment_created': datetime.datetime(2022, 9, 23, 13, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978747849, 'comment_body': '```suggestion\r\n    def __init__(self, url: str, connection: ERDDAPConnection | None):\r\n        """"""Initialize instance of ERDDAPServer.""""""\r\n        if ""http"" in url:\r\n            self.url = url\r\n        else:\r\n            # get URL from dict of ERDDAP servers\r\n        self._connection = connection or ERDDAPConnection()\r\n```\r\n\r\nIf the connection doesn\'t include server info, then the connection can be simplified.\r\n\r\nWe could also support initializing servers based on whats in the [`servers.server_list`](https://github.com/ioos/erddapy/blob/6057872825aa29423e31c849a3c921fe25474e21/erddapy/servers/servers.py#L10) as we currently do.', 'comment_created': datetime.datetime(2022, 9, 23, 14, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 978766729, 'comment_body': 'For the datasets, I envisions supporting some subset of the xarray/pandas filtering/subsetting API.\r\n\r\nFor instance if I had a `GridDataset` for http://www.neracoos.org/erddap/griddap/WW3_72_GulfOfMaine_latest.html as `eds` I could do something like to filter down:\r\n\r\n```py\r\neds = GridDataset.from_url(""http://www.neracoos.org/erddap/griddap/WW3_72_GulfOfMaine_latest.html"")\r\n\r\neds = eds[[\'hs\', \'dir\']]  # select just the wave height and direction variables\r\neds = eds.sel(time=slice(""2022-09-23T00:00:00Z"", ""2022-09-26T00:00:00Z"")) # only for a subset of the time range\r\n```\r\n\r\nThen there are different ways that we could consume the dataset.\r\n\r\n```py\r\nds = eds.to_xarray() # creates a xarray dataset via OpenDAP and filters/slices based on the earlier operations\r\n\r\nnetcdf_url = eds.url(\'nc\')  # return the NetCDF url\r\n\r\neds.save(\'nc\', NETCDF_PATH)  # Save a netcdf locally.\r\n```\r\n\r\nWe probably want to validate that filtering/slicing is working on legit values by default, but have a way to enable/disable it both globally/per dataset. To validate it, we would need to retrieve all the valid variables and dimensions from the server.', 'comment_created': datetime.datetime(2022, 9, 23, 14, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}]","[{'commit_sha': '68d51dd43d29666d7db52a2c7988d2de1207c720', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60e4e4f9d96f8d6004ca78ba896d4bba6c25868', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6a2086cc16346ca7029ce3cf91deb28db13b488', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2961ef379b8d1bb7f0168fa1026918385ab795', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85f5233e33cfc60386cbbfcef0178e8493b2b0a8', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5aa1dc1e3b3b0db9b06700b96bb4e096b52f524', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e38d850c8bce5d8bb01baae8b396be99167f7e', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '101d1b05ab761ee47413985f3a58cf11e6fd860a', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b33bd08dba9f5f48d738e7aa477d9892d8581787', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9345c93658d32fc192100e1b6c11bb2bf645717e', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5ab397aaaa70c6ebd608675939fafb0d88d5486', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '122c14defb31856413e9c002c7f9f58ccaac74cc', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0782350642360af358fb963b4b4bc38a038b5421', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a918c432d216586f9b407b9028b790ac6e37f11', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f9c1195c89d01e7447b5c267f8dcdf7a40a2be', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
965433295,Document search using 'allDatasets' method,"Hi, this is in relation to #14.

**Summary of changes**
  - Add cell to '00-quick_intro.ipynb' documenting this type of search

The notebook built as expected using the command in the `deploy-docs.yaml` file.

Please feel free to request any changes.

Thank you,
Vini",True,251,https://api.github.com/repos/ioos/erddapy/pulls/251,https://github.com/ioos/erddapy/pull/251,closed,43,5,2,3,3,0,1,0,[{'name': 'GSoC22'}],2022-06-13 08:36:27+00:00,2022-06-13 12:56:07+00:00,15580.0,4:19:40,[],"[{'commit_sha': 'f0ec8a64aed995137495a24bd9414e53ea9d21a4', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2762ae223fb98e5a744062417dc93e830f853be5', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef9477aa86f22274e610f201160b3f98912b4f83', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
971768193,"Increase number per items on CSV, JSON searches","Hi,

this is in relation to #244. I wasn't sure of the best way to go about this, so I tried keeping it as simple as possible. Please let me know if there's an obvious way that I'm missing.

What I did was simply to set the number of `items_per_page` to a big number (initially it was `1e9`, but I thought that was excessive?) if the response is either `'csv'` or `'json'`. This doesn't require actually making the request, it just builds the URL. I couldn't find a ""number of records"" variable in the search response. I suppose I could set the `items_per_page` variable to that, but that would require making the request, and I understand that we just want the URL. Removing the `items_per_page` or `page` variables from the URL didn't make any difference.

To test, I added a fixture for the gliders server, since the other two had less than 1000 records. I did not commit the cassettes since they turned out fairly large, at around 3MB each. Do you have any suggestions on what to do about this?

**Summary of changes**
- Modify variable `items_per_page` if `response` is either `'csv'` or `'json'`
- Add new fixture `gliders` to `test_to_objects.py`
- Add tests `test_csv_search` and `test_json_search`

Please feel free to request any changes, and don't forget to add the `gsoc-2022` label :)

Thank you,
Vini",True,255,https://api.github.com/repos/ioos/erddapy/pulls/255,https://github.com/ioos/erddapy/pull/255,closed,98,3,3,12,10,8,1,0,[{'name': 'GSoC22'}],2022-06-20 05:49:18+00:00,2022-07-28 18:15:29+00:00,3327971.0,"38 days, 12:26:11","[{'comment_id': 917013061, 'comment_body': 'We need a more comprehensive list here. You can find [all the responses here](https://coastwatch.pfeg.noaa.gov/erddap/griddap/documentation.html#fileType_csv0). Any response that appends a pagination will need to be listed here.', 'comment_created': datetime.datetime(2022, 7, 8, 17, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 917013701, 'comment_body': 'I was hoping that no pagination would return everything but it seems that ERDDAP appends the pagination even in `csv`, etc.', 'comment_created': datetime.datetime(2022, 7, 8, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 917542706, 'comment_body': ""Me too, I tried setting it to zero but it didn't work, I'm wondering there are any more elegant workarounds or should we just leave it as a large number?"", 'comment_created': datetime.datetime(2022, 7, 11, 4, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 917543701, 'comment_body': 'Sorry, this is not very clear to me. Don\'t all of the response types append pagination? And we would like to keep pagination for some (e.g. HTML), and not for others (like CSV and JSON). Are there any criteria as to which responses to include in this list? For now I am thinking to include the other CSV, JSON and TSV ""variants"".', 'comment_created': datetime.datetime(2022, 7, 11, 5, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 918282212, 'comment_body': ""Let's leave a higher number for now. We can ask Bob someday about it."", 'comment_created': datetime.datetime(2022, 7, 11, 19, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 923626293, 'comment_body': 'I added all CSV, JSON and TSV responses for now.', 'comment_created': datetime.datetime(2022, 7, 18, 17, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 932406848, 'comment_body': 'This comment can go inside the gliders fixture instead of both tests.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 932410284, 'comment_body': 'Let\'s rephrase this for our future self:\r\n\r\n```python\r\n# These ERDDAP responses should not be paginated b/c that hinders the correct amount of data silently\r\n# and can surprise users when the number of items is greater than ERDDAP\'s defaults (1000 items).\r\n# Ideally there should be no pagination for this on the ERDDAP side but for now we settled for a\r\n# ""really big"" `items_per_page` number.', 'comment_created': datetime.datetime(2022, 7, 28, 15, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}]","[{'commit_sha': 'f0b40a26c526e106fe7aaf8de506ef0049c3bc7d', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05fb3d6084f33b5267088da76270c9d345e64e12', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e07fb824637e9b216ae2d1ea27ad84e4f78f5b4a', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c7e8650308599d185a2da117aeabeccc793272', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9346051a13d4198e64430d8b3a42db46e362199d', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a24499f30819f89c606a062a042be8f1101262', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a400086961cd397cb5becde17120511fa33dcfb3', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5463ba0861ad2d8d6d94d7cf7961394a018b79a', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfbce9d2cc9c6130450d8e5ea2f1620621b8c0d0', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '808f9426b4951048d10aeda84480a67c0c695738', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b38b65281e4912da7802d81bafbcbb37dc0eecb6', 'committer_username': 'ocefpaf', 'committer_name': 'Filipe', 'committer_email': 'ocefpaf@gmail.com', 'commit_date': datetime.datetime(2011, 7, 31, 23, 10, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec79c31d7e4e8189a08c59daebb4668c8ef5e78b', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
966422080,Use lazy loading when response type is OPeNDAP,"Hi,

this closes #250.

**Summary of changes**
- On method `ERDDAP.to_xarray`, check if response type is opendap. If it is, pass the URL to the `xarray.open_dataset` method instead of an nc dataset. This allows lazy loading of the dataset.
- Add corresponding tests (based on the `01a-griddap` notebook).

Please feel free to request any changes.

Thank you,
Vini",True,252,https://api.github.com/repos/ioos/erddapy/pulls/252,https://github.com/ioos/erddapy/pull/252,closed,23,4,2,2,2,6,1,0,[{'name': 'GSoC22'}],2022-06-14 04:12:49+00:00,2022-06-14 19:04:33+00:00,53504.0,14:51:44,"[{'comment_id': 896677209, 'comment_body': ""Let's try VCR with the opendap test. I know it will file with files but it mat work here.\r\n\r\n```suggestion\r\n@pytest.mark.web\r\n@pytest.mark.vcr()\r\n```"", 'comment_created': datetime.datetime(2022, 6, 14, 11, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 897199906, 'comment_body': 'VCR may not be able to work with an OpenDAP request since I believe that those requests are processed in C rather than Python: https://vcrpy.readthedocs.io/en/latest/installation.html#compatibility', 'comment_created': datetime.datetime(2022, 6, 14, 18, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 897218645, 'comment_body': ""Sorry, I'm not familiar with VCR. I'm reading about it just now. I tried running with the `@pytest.mark.vcr()` line but it didn't create any YAML files (I understand that that would mock the response). I think that may be because in the new `to_xarray` method, the request is made within the scope of the `xarray.open_dataset` function, ie there's not an `urlopen` call happening.\r\n\r\nI can try to modify the test a little bit so an actual request is made. Happy to go with whichever approach you prefer.\r\n\r\nEdit: gave it a second thought and not sure if the `xarray.open_dataset` would be able to consume the data from the YAML file generated by VCR? I will see if that works."", 'comment_created': datetime.datetime(2022, 6, 14, 18, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}, {'comment_id': 897225973, 'comment_body': ""Let's drop the vcr effort for now. We could use a pure python opendap client and see if that works but it is beyond the scope of this PR."", 'comment_created': datetime.datetime(2022, 6, 14, 19, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 897227363, 'comment_body': 'That\'s what I thought might be the case.`xarray.open_dataset` is likely passing to NetCDF4-C under the hood as the default engine. You might be able to use `engine=""pydap""` to force it to use PyDAP instead.\r\n\r\nAnother option would be to test against one of our datasets instead: http://www.neracoos.org/erddap/griddap/index.html?page=1&itemsPerPage=1000\r\n\r\n', 'comment_created': datetime.datetime(2022, 6, 14, 19, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abkfenris', 'type': 'User'}, {'comment_id': 897229385, 'comment_body': ""> Another option would be to test against one of our datasets instead: http://www.neracoos.org/erddap/griddap/index.html?page=1&itemsPerPage=1000\r\n\r\nThat is probably better. I don't want to add extra dependencies, even optional ones, and this test doesn't really put a lot of stress on the server."", 'comment_created': datetime.datetime(2022, 6, 14, 19, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}]","[{'commit_sha': '08685b5aaca3c2a40b7c8a286be922a15eb5d4ac', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6038611e767377634f2552b160ae67705f6575c7', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
675716848,Improve docstring for `get_categorize_url()` function,"Hi,

As an ERDDAP beginner, I was having some trouble discovering what are valid attributes to categorize by. After realising that I could find them at the `erddap/categorize/index.html` page, I decided to improve the `get_categorize_url()` docstring for other users that may run into the same problem.

Summary of changes:
  - In `get_categorize_url()` function: Add a line to the docstring explaining that valid attributes can be found in the categorize page.

Best,
Vini",True,185,https://api.github.com/repos/ioos/erddapy/pulls/185,https://github.com/ioos/erddapy/pull/185,closed,1,0,1,2,1,2,0,0,[],2021-06-22 19:53:43+00:00,2021-06-25 19:44:40+00:00,258657.0,"2 days, 23:50:57","[{'comment_id': 657379687, 'comment_body': 'The https://coastwatch.pfeg.noaa.gov/erddap/categorize server is the ""gold standard"" ERDDAP server, so maybe we can use that URL instead. ', 'comment_created': datetime.datetime(2021, 6, 23, 18, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}, {'comment_id': 658923466, 'comment_body': 'Thank you @ocefpaf ', 'comment_created': datetime.datetime(2021, 6, 25, 17, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vinisalazar', 'type': 'User'}]","[{'commit_sha': 'd2a73afc2d399cd9cc8b43de588329765c4aaf6f', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9052311ae1eb27f74f2ac574d9441c9f41c278c', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
835784792,Remove Pandas FutureWarning,"Hi,

### Problem
When running `ERDDAP.griddap_initialize`, I would get the following warning: `FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.` My Pandas version is 1.4.0.

### Proposed solution
If merged, this PR will modify the `_griddap_get_constraints` function in order to remove the Pandas FutureWarning that was introduced in the latest Pandas versions.

I ran Pytest, Pre-Commit, and tested the function locally (by running `ERDDAP.griddap_initialize`), and things seem to be working properly.

Summary of changes:
* Replace `frame.append()` with `pd.concat()`
* Replace `table.index =` with `.set_index(drop=True)`
* Format code with Black

Thank you for any assistance you can provide,

Vini",True,229,https://api.github.com/repos/ioos/erddapy/pulls/229,https://github.com/ioos/erddapy/pull/229,closed,12,10,1,4,6,1,0,0,[],2022-01-31 06:18:14+00:00,2022-03-15 12:04:20+00:00,3735966.0,"43 days, 5:46:06","[{'comment_id': 804795614, 'comment_body': 'To avoid this deep nesting we can try probably create the append df before the calling `pd.concat`.\r\n', 'comment_created': datetime.datetime(2022, 2, 11, 16, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ocefpaf', 'type': 'User'}]","[{'commit_sha': '82b86fddf338bfb35889117fe5ef2cfecc9ae9da', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76df7fa5853525d036e0a126d7a71b31c40ea100', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc1ca0f567b8cb9c7371f0635a7c8b5fb6ea3b8a', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e739ff4b36b028ccdbb1aa0c6a94ca10fbf4f80b', 'committer_username': 'ocefpaf', 'committer_name': 'Filipe', 'committer_email': 'ocefpaf@gmail.com', 'commit_date': datetime.datetime(2011, 7, 31, 23, 10, 26, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108
1055096273,Improve exception handling in method to_iris,"Hi,

this is a fix to the problem mentioned in #267.

On the `ERDDAP.to_iris()` method, when the `cubes.realise_data()` method doesn't work, it realises the data by calling `cube.data`. The new versions of Iris prevent creating a `CubeList` object using `cube.data` objects (as they are Numpy Arrays and not cubes), so that behaviour was modified.

Summary of changes:
  - Realise data by creating placeholder variable `_`
  - Don't use `iris.cube.CubeList` for placeholder variable

Thanks,
Vini",True,268,https://api.github.com/repos/ioos/erddapy/pulls/268,https://github.com/ioos/erddapy/pull/268,closed,4,3,3,3,4,0,1,0,[{'name': 'GSoC22'}],2022-09-13 19:23:49+00:00,2022-09-20 16:13:17+00:00,593368.0,"6 days, 20:49:28",[],"[{'commit_sha': 'c4ef4305e377d605ba58b35f734888526a327c1f', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29a59b380890cbcc8308edee9bd238b99ff6e316', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e65ce9f1cffa6dcf47501f293893e193dd3948eb', 'committer_username': 'vinisalazar', 'committer_name': 'Vini Salazar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 2, 16, 16, 56, 9, tzinfo=datetime.timezone.utc)}]",Vini Salazar,17276653,,User,,121,,166,108

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
104919828,erddapy,ioos/erddapy,Python,30,76,12,18,983,4,2,3,"[{'id': 1128682449, 'number': 282, 'closed': datetime.datetime(2022, 11, 24, 16, 31, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 19, 9, 45, 58, tzinfo=datetime.timezone.utc), 'time_taken': 456322.0, 'time_delta': '5 days, 6:45:22', 'additions': 157, 'deletions': 1, 'state': 'closed'}, {'id': 1128669321, 'number': 281, 'closed': datetime.datetime(2022, 11, 23, 22, 38, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 19, 9, 15, 33, tzinfo=datetime.timezone.utc), 'time_taken': 393804.0, 'time_delta': '4 days, 13:23:24', 'additions': 25, 'deletions': 1, 'state': 'closed'}, {'id': 1128666859, 'number': 280, 'closed': datetime.datetime(2023, 3, 10, 11, 23, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 19, 9, 9, 45, tzinfo=datetime.timezone.utc), 'time_taken': 9598426.0, 'time_delta': '111 days, 2:13:46', 'additions': 88, 'deletions': 39, 'state': 'closed'}, {'id': 1103889184, 'number': 277, 'closed': datetime.datetime(2022, 11, 17, 18, 32, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 29, 8, 51, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1676464.0, 'time_delta': '19 days, 9:41:04', 'additions': 71, 'deletions': 29, 'state': 'closed'}, {'id': 1081591508, 'number': 272, 'closed': datetime.datetime(2022, 10, 14, 23, 0, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 10, 6, 23, 23, tzinfo=datetime.timezone.utc), 'time_taken': 405406.0, 'time_delta': '4 days, 16:36:46', 'additions': 249, 'deletions': 3, 'state': 'closed'}, {'id': 1075332747, 'number': 271, 'closed': datetime.datetime(2022, 10, 15, 14, 17, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 3, 23, 58, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1001918.0, 'time_delta': '11 days, 14:18:38', 'additions': 62, 'deletions': 852, 'state': 'closed'}, {'id': 1055096273, 'number': 268, 'closed': datetime.datetime(2022, 9, 20, 16, 13, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 19, 23, 49, tzinfo=datetime.timezone.utc), 'time_taken': 593368.0, 'time_delta': '6 days, 20:49:28', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1054912914, 'number': 267, 'closed': None, 'created': datetime.datetime(2022, 9, 13, 16, 10, 15, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 303, 'deletions': 26, 'state': 'open'}, {'id': 1023982157, 'number': 264, 'closed': datetime.datetime(2022, 8, 31, 18, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 11, 15, 3, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1741968.0, 'time_delta': '20 days, 3:52:48', 'additions': 254, 'deletions': 105, 'state': 'closed'}, {'id': 1018747776, 'number': 263, 'closed': datetime.datetime(2022, 8, 17, 15, 1, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 14, 25, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1038947.0, 'time_delta': '12 days, 0:35:47', 'additions': 325, 'deletions': 303, 'state': 'closed'}, {'id': 1009953178, 'number': 260, 'closed': datetime.datetime(2022, 7, 28, 11, 27, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 17, 59, 28, tzinfo=datetime.timezone.utc), 'time_taken': 62880.0, 'time_delta': '17:28:00', 'additions': 10301, 'deletions': 48270, 'state': 'closed'}, {'id': 999522083, 'number': 259, 'closed': datetime.datetime(2022, 8, 17, 13, 56, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 15, 6, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2587823.0, 'time_delta': '29 days, 22:50:23', 'additions': 48, 'deletions': 29, 'state': 'closed'}, {'id': 971768193, 'number': 255, 'closed': datetime.datetime(2022, 7, 28, 18, 15, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 20, 5, 49, 18, tzinfo=datetime.timezone.utc), 'time_taken': 3327971.0, 'time_delta': '38 days, 12:26:11', 'additions': 98, 'deletions': 3, 'state': 'closed'}, {'id': 967333187, 'number': 253, 'closed': datetime.datetime(2022, 6, 22, 13, 57, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 19, 38, 32, tzinfo=datetime.timezone.utc), 'time_taken': 670727.0, 'time_delta': '7 days, 18:18:47', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 966422080, 'number': 252, 'closed': datetime.datetime(2022, 6, 14, 19, 4, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 4, 12, 49, tzinfo=datetime.timezone.utc), 'time_taken': 53504.0, 'time_delta': '14:51:44', 'additions': 23, 'deletions': 4, 'state': 'closed'}, {'id': 965433295, 'number': 251, 'closed': datetime.datetime(2022, 6, 13, 12, 56, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 13, 8, 36, 27, tzinfo=datetime.timezone.utc), 'time_taken': 15580.0, 'time_delta': '4:19:40', 'additions': 43, 'deletions': 5, 'state': 'closed'}, {'id': 835790796, 'number': 230, 'closed': datetime.datetime(2022, 1, 31, 16, 18, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 31, 6, 29, 10, tzinfo=datetime.timezone.utc), 'time_taken': 35373.0, 'time_delta': '9:49:33', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 835784792, 'number': 229, 'closed': datetime.datetime(2022, 3, 15, 12, 4, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 31, 6, 18, 14, tzinfo=datetime.timezone.utc), 'time_taken': 3735966.0, 'time_delta': '43 days, 5:46:06', 'additions': 12, 'deletions': 10, 'state': 'closed'}, {'id': 675716848, 'number': 185, 'closed': datetime.datetime(2021, 6, 25, 19, 44, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 19, 53, 43, tzinfo=datetime.timezone.utc), 'time_taken': 258657.0, 'time_delta': '2 days, 23:50:57', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
