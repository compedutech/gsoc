pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1411044148,feat(CycloneDX): Add new agent cyclonedx,"<!-- SPDX-FileCopyrightText: Â© Fossology contributors

     SPDX-License-Identifier: GPL-2.0-only
-->

<!-- Please refer to CONTRIBUTING.md (https://github.com/fossology/fossology/blob/master/CONTRIBUTING.md)
before creating the pull request to make sure you follow all the standards. -->

## Description

This pull request introduces a new agent, CycloneDX, responsible for generating a software bill of materials (SBOM) in the CycloneDX format.

## How to test

To test the functionality of the CycloneDX agent in Fossology, you can follow these steps:

-  Install FOSSology
-  Upload a file for scanning.
-  Generate a CycloneDX report from FOSSology UI.

cc: @GMishx @shaheemazmalmmd @avinal @hastagAB @Kaushl2208 

<a href=""https://gitpod.io/#https://github.com/fossology/fossology/pull/2507""><img src=""https://gitpod.io/button/open-in-gitpod.svg""/></a>

",True,2507,https://api.github.com/repos/fossology/fossology/pulls/2507,https://github.com/fossology/fossology/pull/2507,closed,1134,169,14,1,6,36,2,0,"[{'name': 'ready'}, {'name': 'GSOC-23'}]",2023-06-28 05:48:31+00:00,2023-07-28 08:54:39+00:00,2603168.0,"30 days, 3:06:08","[{'comment_id': 1257734460, 'comment_body': 'Would suggest the default format to be called as json\n```suggestion\n  const DEFAULT_OUTPUT_FORMAT = ""json"";                  ///< Default output format\n```\n\nAs CycloneDX specification supports two serialization format JSON and XML.', 'comment_created': datetime.datetime(2023, 7, 10, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257734994, 'comment_body': 'Global variable not used in scope. Please remove.', 'comment_created': datetime.datetime(2023, 7, 10, 5, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257735466, 'comment_body': 'Would suggest to let `writeReport()` convert the data into JSON is report format is `json`.', 'comment_created': datetime.datetime(2023, 7, 10, 5, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257736234, 'comment_body': 'Or it can even be called `cyclonedx_json` as the value is used to generate the filename.', 'comment_created': datetime.datetime(2023, 7, 10, 5, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257736747, 'comment_body': '```suggestion\n    return $fileName . "".json"";\n```', 'comment_created': datetime.datetime(2023, 7, 10, 5, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257737762, 'comment_body': ""```suggestion\n      $filesWithLicenses[$uploadTreeId]['isCleared'] = false === array_key_exists($uploadTreeId,$filesThatShouldStillBeCleared);\n```"", 'comment_created': datetime.datetime(2023, 7, 10, 5, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257742021, 'comment_body': 'Would recommend moving this function to `Fossology/Lib/Report` namespace under a new class (stored in folder `src/lib/php/Report/`). This function is same as the function written in spdx2.php and thus, the code duplication can be minimized.\n\nhttps://github.com/fossology/fossology/blob/a5fdc059db22ae2fcda7ad884e1a409f001a2482/src/spdx2/agent/spdx2.php#L531-L576', 'comment_created': datetime.datetime(2023, 7, 10, 5, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257742714, 'comment_body': 'And please do the same for `addClearingStatus()`, `addCopyrightResults()`, `getLicenseTexts()`', 'comment_created': datetime.datetime(2023, 7, 10, 5, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257744577, 'comment_body': 'Please add a check before processing `sha256` to be not empty. Old uploads might not have the `sha256` checksum.', 'comment_created': datetime.datetime(2023, 7, 10, 5, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257745495, 'comment_body': 'Using following format would be better in my opinion.\n```suggestion\n          \'bomref\' => $uploadId . ""-"" . $fileId\n```', 'comment_created': datetime.datetime(2023, 7, 10, 5, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257746285, 'comment_body': '```suggestion\n   * @return array Components list\n```', 'comment_created': datetime.datetime(2023, 7, 10, 6, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257747848, 'comment_body': 'Please check if `sha256` is not empty before processing it as old uploads might not contain that value.', 'comment_created': datetime.datetime(2023, 7, 10, 6, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257748210, 'comment_body': 'mimeType of a main package cannot be `text/plain` :smiley:', 'comment_created': datetime.datetime(2023, 7, 10, 6, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257751022, 'comment_body': 'Please add schema also `""$schema"": ""http://cyclonedx.org/schema/bom-1.4.schema.json""`', 'comment_created': datetime.datetime(2023, 7, 10, 6, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257751658, 'comment_body': ""```suggestion\n      $component['bom-ref'] = $componentData['bomref'];\n```"", 'comment_created': datetime.datetime(2023, 7, 10, 6, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257753374, 'comment_body': 'If updating output format in `cyclonedx.php`, please remember to update it here as well.', 'comment_created': datetime.datetime(2023, 7, 10, 6, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257754780, 'comment_body': '```suggestion\n    } else {\n```', 'comment_created': datetime.datetime(2023, 7, 10, 6, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257755118, 'comment_body': ""```suggestion\n    } else if (array_key_exists('name', $licenseData) && !empty($licenseData['name'])) {\n```"", 'comment_created': datetime.datetime(2023, 7, 10, 6, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257755525, 'comment_body': '```suggestion\n      } else {\n```', 'comment_created': datetime.datetime(2023, 7, 10, 6, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1257839167, 'comment_body': '```suggestion\r\n; SPDX-License-Identifier: GPL-2.0-only\r\n```\r\nAm I missing something here? or it should be GPL', 'comment_created': datetime.datetime(2023, 7, 10, 7, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'avinal', 'type': 'User'}, {'comment_id': 1257842547, 'comment_body': '```suggestion\r\nregister_plugin(new CycloneDxAgentPlugin());\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 7, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'avinal', 'type': 'User'}, {'comment_id': 1257842838, 'comment_body': '```suggestion\r\nregister_plugin(new CycloneDxGeneratorUi());\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 7, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'avinal', 'type': 'User'}, {'comment_id': 1258029308, 'comment_body': 'It is not an actual code, but a config. Also, everyone is allowed to change it as per the need without making it public. So FSFAP is an appropriate license here.', 'comment_created': datetime.datetime(2023, 7, 10, 10, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1258040695, 'comment_body': 'Got it, thanks.', 'comment_created': datetime.datetime(2023, 7, 10, 10, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'avinal', 'type': 'User'}, {'comment_id': 1271272805, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 22, 9, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1271272831, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 22, 9, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1271272839, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 22, 9, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1271272849, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 22, 9, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1271273107, 'comment_body': 'Yup, I have changed that.', 'comment_created': datetime.datetime(2023, 7, 22, 9, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1271804638, 'comment_body': 'A gentle reminder.', 'comment_created': datetime.datetime(2023, 7, 24, 6, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1271816088, 'comment_body': ""```suggestion\n      '$schema' => 'http://cyclonedx.org/schema/bom-1.4.schema.json',\n```"", 'comment_created': datetime.datetime(2023, 7, 24, 6, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1271821966, 'comment_body': 'CycloneDX schema does not support SPDX LicenseRef as valid license id. Proposing following changes to make LicenseRefs as a license expression.', 'comment_created': datetime.datetime(2023, 7, 24, 6, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1271824654, 'comment_body': ""```diff\ndiff --git a/src/cyclonedx/agent/reportgenerator.php b/src/cyclonedx/agent/reportgenerator.php\nindex 90555bb4a..47d60049e 100644\n--- a/src/cyclonedx/agent/reportgenerator.php\n+++ b/src/cyclonedx/agent/reportgenerator.php\n@@ -11,6 +11,8 @@\n  */\n namespace Fossology\\CycloneDX;\n \n+use Fossology\\Lib\\Data\\LicenseRef;\n+\n class BomReportGenerator\n {\n   /**\n@@ -138,6 +140,13 @@ class BomReportGenerator\n   {\n     $license = [];\n \n+    // Check license ID is a LicenseRef\n+    if (array_key_exists('id', $licenseData) && !empty($licenseData['id']) &&\n+      stripos($licenseData['id'], LicenseRef::SPDXREF_PREFIX) === 0) {\n+      $license['expression'] = $licenseData['id'];\n+      return $license;\n+    }\n+\n     if (array_key_exists('id', $licenseData) && !empty($licenseData['id'])) {\n       $license['license']['id'] = $licenseData['id'];\n     } else if (array_key_exists('name', $licenseData) && !empty($licenseData['name'])) {\n```"", 'comment_created': datetime.datetime(2023, 7, 24, 6, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1272976757, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2023, 7, 25, 4, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1272976828, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 25, 4, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1272977011, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 25, 4, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}]","[{'commit_sha': '0bde97682742dd4d30c844195ea34d75f65e189b', 'committer_username': 'its-sushant', 'committer_name': 'Sushant Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 27, 16, 45, 26, tzinfo=datetime.timezone.utc)}]",Sushant Kumar,76658675,,User,,51,,18,9
1471334171,perf(scancode):Improve scanning speed of scancode agent,"<!-- SPDX-FileCopyrightText: Â© Fossology contributors

     SPDX-License-Identifier: GPL-2.0-only
-->

<!-- Please refer to CONTRIBUTING.md (https://github.com/fossology/fossology/blob/master/CONTRIBUTING.md)
before creating the pull request to make sure you follow all the standards. -->

## Description

Merging these changes will improve the scanning speed of scancode agent

### Changes

- Scanning is performed all at once for every file.
- Once the scanning is complete, the results are stored in a temporary JSON file.
- Subsequently, these results are pushed to the database.

cc: @GMishx @shaheemazmalmmd @avinal 

<a href=""https://gitpod.io/#https://github.com/fossology/fossology/pull/2569""><img src=""https://gitpod.io/button/open-in-gitpod.svg""/></a>

",True,2569,https://api.github.com/repos/fossology/fossology/pulls/2569,https://github.com/fossology/fossology/pull/2569,closed,361,129,7,1,2,22,2,0,"[{'name': 'ready'}, {'name': 'GSOC-23'}]",2023-08-11 06:51:40+00:00,2023-10-05 11:10:35+00:00,4767535.0,"55 days, 4:18:55","[{'comment_id': 1343878738, 'comment_body': 'Install targets can be combined.\r\n\r\n```suggestion\r\n    scancode_template.html\r\n    runscanonfiles.py\r\n    DESTINATION ${FO_MODDIR}/${PROJECT_NAME}/agent\r\n    COMPONENT scancode)\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 10, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343883023, 'comment_body': 'Will suggest to move the import at top of file to make it easy to identify this file has a dependency on scancode.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343886429, 'comment_body': 'Will recommend defining `scan()` outside the function.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343887176, 'comment_body': ""Can be combined as:\r\n```suggestion\r\n            result = {'file': line.strip()}\r\n```"", 'comment_created': datetime.datetime(2023, 10, 3, 10, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343888472, 'comment_body': ""Instead of calling `line.strip()` multiple times, the performance can further be improved by using `result['file']` instead."", 'comment_created': datetime.datetime(2023, 10, 3, 10, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343891452, 'comment_body': ""Can be further optimized as:\r\n\r\n```suggestion\r\n          if not first_iteration:  # Check if it's not the first result\r\n            json_file.write(',\\n')  # Add a comma to separate elements in the JSON array\r\n          else:\r\n            first_iteration = False\r\n\r\n          json.dump(result, json_file)\r\n```"", 'comment_created': datetime.datetime(2023, 10, 3, 10, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343895666, 'comment_body': 'Please update the variable name. `objects` is too generic and hard to understand.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343897516, 'comment_body': 'Please use camelCasing.\r\n```suggestion\r\nvoid mapFileNameWithId(unsigned long pFileId,\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 10, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343898739, 'comment_body': 'Please use consistent casing.\r\n```suggestion\r\nvoid writeFileNameToTextFile(unordered_map<unsigned long, string> &fileIdsMap, string fileLocation) {\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 10, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343906492, 'comment_body': 'Please use consistent casing. Please use either `camelCase` or `underscore_case` and avoid using `PascalCase`. I will prefer `camelCase` as other variables are already in this casing.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343910101, 'comment_body': 'Another memory optimization can be done here. Since the output JSON is written as one object per line, the split object can read the file line-by-line and return the vector of strings as is.\r\nCurrently, the entire file content is stored first in `buffer` then in `objects` vector. If the uploaded package is huge, the file content can exceed RAM size. Storing it twice increases the chance of it happening even more.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343915340, 'comment_body': 'The use of `scancodevalue` is done here, I will recommend freeing the memory as `matchFilWithLicenses()` is again going to parse the string and load it in memory more than once.\r\n\r\nAlso, the variable `filename` can be eliminated saving more memory as:\r\n```cpp\r\nstring fileName = scanCodeValue[""file""].asString();\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 10, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343918139, 'comment_body': 'Please check if the API or `runscanonfile.py` script can make use of this `MINSCORE` which defines a minimum threshold of scancode confidence above which only the result will be stored in DB.', 'comment_created': datetime.datetime(2023, 10, 3, 11, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343922544, 'comment_body': 'What will happen if someone now tries to run scancode agent from CLI like `/usr/local/share/fossology/scancode/agent/scancode file_to_scan.py`? Have you covered it in `main()` somehow?', 'comment_created': datetime.datetime(2023, 10, 3, 11, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343923746, 'comment_body': 'Now I see from the changes bellow, `scancode_template.html` is no longer needed and can be removed from the repository?', 'comment_created': datetime.datetime(2023, 10, 3, 11, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1345312644, 'comment_body': 'Yup, will remove it.', 'comment_created': datetime.datetime(2023, 10, 4, 7, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1345318333, 'comment_body': 'Yes, we can also paas `MINSCORE` to API.', 'comment_created': datetime.datetime(2023, 10, 4, 7, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1345319000, 'comment_body': 'Will make changes accordingly.', 'comment_created': datetime.datetime(2023, 10, 4, 7, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1345583292, 'comment_body': ""Thanks for incorporating the changes. But making `min_score` a positional argument might be problematic if the user is not interested in license scan. In that case, FOSSology will call something like `runscanonfiles.py -ceu input.txt output.json`\r\n\r\nIn such case, `min_score` will become `input.txt`.\r\n\r\nIs my assumption right or since you've provided `min_score` as `type=int`, it will get the default value of `0` ?"", 'comment_created': datetime.datetime(2023, 10, 4, 10, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1345614979, 'comment_body': 'I see now the function `string scanFileWithScancode(string filename);` was never implemented and the CLI scan was not supported. Thus, it is not in the scope of this PR.\r\nIf you are interested to work on it, I will request to open an issue and work on a separate PR.', 'comment_created': datetime.datetime(2023, 10, 4, 11, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1345635831, 'comment_body': 'Yes, making it positional will be problematic if user is not interested in license scan. ', 'comment_created': datetime.datetime(2023, 10, 4, 11, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1345638793, 'comment_body': 'For that we can have flag for min_score, then there should not be any problem. ', 'comment_created': datetime.datetime(2023, 10, 4, 11, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}]","[{'commit_sha': '7e20bd6778eedcbcf1216f746994a0da2beba1f5', 'committer_username': 'its-sushant', 'committer_name': 'Sushant Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 27, 16, 45, 26, tzinfo=datetime.timezone.utc)}]",Sushant Kumar,76658675,,User,,51,,18,9
1471334171,perf(scancode):Improve scanning speed of scancode agent,"<!-- SPDX-FileCopyrightText: Â© Fossology contributors

     SPDX-License-Identifier: GPL-2.0-only
-->

<!-- Please refer to CONTRIBUTING.md (https://github.com/fossology/fossology/blob/master/CONTRIBUTING.md)
before creating the pull request to make sure you follow all the standards. -->

## Description

Merging these changes will improve the scanning speed of scancode agent

### Changes

- Scanning is performed all at once for every file.
- Once the scanning is complete, the results are stored in a temporary JSON file.
- Subsequently, these results are pushed to the database.

cc: @GMishx @shaheemazmalmmd @avinal 

<a href=""https://gitpod.io/#https://github.com/fossology/fossology/pull/2569""><img src=""https://gitpod.io/button/open-in-gitpod.svg""/></a>

",True,2569,https://api.github.com/repos/fossology/fossology/pulls/2569,https://github.com/fossology/fossology/pull/2569,closed,361,129,7,1,2,22,2,0,"[{'name': 'ready'}, {'name': 'GSOC-23'}]",2023-08-11 06:51:40+00:00,2023-10-05 11:10:35+00:00,4767535.0,"55 days, 4:18:55","[{'comment_id': 1343878738, 'comment_body': 'Install targets can be combined.\r\n\r\n```suggestion\r\n    scancode_template.html\r\n    runscanonfiles.py\r\n    DESTINATION ${FO_MODDIR}/${PROJECT_NAME}/agent\r\n    COMPONENT scancode)\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 10, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343883023, 'comment_body': 'Will suggest to move the import at top of file to make it easy to identify this file has a dependency on scancode.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343886429, 'comment_body': 'Will recommend defining `scan()` outside the function.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343887176, 'comment_body': ""Can be combined as:\r\n```suggestion\r\n            result = {'file': line.strip()}\r\n```"", 'comment_created': datetime.datetime(2023, 10, 3, 10, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343888472, 'comment_body': ""Instead of calling `line.strip()` multiple times, the performance can further be improved by using `result['file']` instead."", 'comment_created': datetime.datetime(2023, 10, 3, 10, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343891452, 'comment_body': ""Can be further optimized as:\r\n\r\n```suggestion\r\n          if not first_iteration:  # Check if it's not the first result\r\n            json_file.write(',\\n')  # Add a comma to separate elements in the JSON array\r\n          else:\r\n            first_iteration = False\r\n\r\n          json.dump(result, json_file)\r\n```"", 'comment_created': datetime.datetime(2023, 10, 3, 10, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343895666, 'comment_body': 'Please update the variable name. `objects` is too generic and hard to understand.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343897516, 'comment_body': 'Please use camelCasing.\r\n```suggestion\r\nvoid mapFileNameWithId(unsigned long pFileId,\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 10, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343898739, 'comment_body': 'Please use consistent casing.\r\n```suggestion\r\nvoid writeFileNameToTextFile(unordered_map<unsigned long, string> &fileIdsMap, string fileLocation) {\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 10, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343906492, 'comment_body': 'Please use consistent casing. Please use either `camelCase` or `underscore_case` and avoid using `PascalCase`. I will prefer `camelCase` as other variables are already in this casing.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343910101, 'comment_body': 'Another memory optimization can be done here. Since the output JSON is written as one object per line, the split object can read the file line-by-line and return the vector of strings as is.\r\nCurrently, the entire file content is stored first in `buffer` then in `objects` vector. If the uploaded package is huge, the file content can exceed RAM size. Storing it twice increases the chance of it happening even more.', 'comment_created': datetime.datetime(2023, 10, 3, 10, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343915340, 'comment_body': 'The use of `scancodevalue` is done here, I will recommend freeing the memory as `matchFilWithLicenses()` is again going to parse the string and load it in memory more than once.\r\n\r\nAlso, the variable `filename` can be eliminated saving more memory as:\r\n```cpp\r\nstring fileName = scanCodeValue[""file""].asString();\r\n```', 'comment_created': datetime.datetime(2023, 10, 3, 10, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343918139, 'comment_body': 'Please check if the API or `runscanonfile.py` script can make use of this `MINSCORE` which defines a minimum threshold of scancode confidence above which only the result will be stored in DB.', 'comment_created': datetime.datetime(2023, 10, 3, 11, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343922544, 'comment_body': 'What will happen if someone now tries to run scancode agent from CLI like `/usr/local/share/fossology/scancode/agent/scancode file_to_scan.py`? Have you covered it in `main()` somehow?', 'comment_created': datetime.datetime(2023, 10, 3, 11, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1343923746, 'comment_body': 'Now I see from the changes bellow, `scancode_template.html` is no longer needed and can be removed from the repository?', 'comment_created': datetime.datetime(2023, 10, 3, 11, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1345312644, 'comment_body': 'Yup, will remove it.', 'comment_created': datetime.datetime(2023, 10, 4, 7, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1345318333, 'comment_body': 'Yes, we can also paas `MINSCORE` to API.', 'comment_created': datetime.datetime(2023, 10, 4, 7, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1345319000, 'comment_body': 'Will make changes accordingly.', 'comment_created': datetime.datetime(2023, 10, 4, 7, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1345583292, 'comment_body': ""Thanks for incorporating the changes. But making `min_score` a positional argument might be problematic if the user is not interested in license scan. In that case, FOSSology will call something like `runscanonfiles.py -ceu input.txt output.json`\r\n\r\nIn such case, `min_score` will become `input.txt`.\r\n\r\nIs my assumption right or since you've provided `min_score` as `type=int`, it will get the default value of `0` ?"", 'comment_created': datetime.datetime(2023, 10, 4, 10, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1345614979, 'comment_body': 'I see now the function `string scanFileWithScancode(string filename);` was never implemented and the CLI scan was not supported. Thus, it is not in the scope of this PR.\r\nIf you are interested to work on it, I will request to open an issue and work on a separate PR.', 'comment_created': datetime.datetime(2023, 10, 4, 11, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'GMishx', 'type': 'User'}, {'comment_id': 1345635831, 'comment_body': 'Yes, making it positional will be problematic if user is not interested in license scan. ', 'comment_created': datetime.datetime(2023, 10, 4, 11, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}, {'comment_id': 1345638793, 'comment_body': 'For that we can have flag for min_score, then there should not be any problem. ', 'comment_created': datetime.datetime(2023, 10, 4, 11, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'its-sushant', 'type': 'User'}]","[{'commit_sha': '7e20bd6778eedcbcf1216f746994a0da2beba1f5', 'committer_username': 'its-sushant', 'committer_name': 'Sushant Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 27, 16, 45, 26, tzinfo=datetime.timezone.utc)}]",Sushant Kumar,76658675,,User,,51,,18,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15866170,fossology,fossology/fossology,PHP,397,777,64,142,9788,394,76,21,"[{'id': 1471334171, 'number': 2569, 'closed': datetime.datetime(2023, 10, 5, 11, 10, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 11, 6, 51, 40, tzinfo=datetime.timezone.utc), 'time_taken': 4767535.0, 'time_delta': '55 days, 4:18:55', 'additions': 361, 'deletions': 129, 'state': 'closed'}, {'id': 1411044148, 'number': 2507, 'closed': datetime.datetime(2023, 7, 28, 8, 54, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 5, 48, 31, tzinfo=datetime.timezone.utc), 'time_taken': 2603168.0, 'time_delta': '30 days, 3:06:08', 'additions': 1134, 'deletions': 169, 'state': 'closed'}, {'id': 869949772, 'number': 2172, 'closed': datetime.datetime(2022, 9, 26, 6, 37, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 20, 30, 17, tzinfo=datetime.timezone.utc), 'time_taken': 17921212.0, 'time_delta': '207 days, 10:06:52', 'additions': 94, 'deletions': 1, 'state': 'closed'}]"
