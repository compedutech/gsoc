pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
417008902,Cue context menu for scrolling waveform,"Adds context menu to hot cues on the scrolling waveform just like WOverview. Right-click on the label to invoke the context menu.

TODOs:
- [x]  Disallow opening context menu when a track is playing.

- [x]  Open context menu when right-clicking in the vicinity of marker line.

- [x]  Highlight cue mark on hover.",True,2783,https://api.github.com/repos/mixxxdj/mixxx/pulls/2783,https://github.com/mixxxdj/mixxx/pull/2783,closed,201,71,12,22,33,32,0,0,[],2020-05-12 22:34:49+00:00,2020-05-16 19:38:10+00:00,335001.0,"3 days, 21:03:21","[{'comment_id': 424608795, 'comment_body': 'Do we need to skip *cue points* with type != mixxx::CueType::HotCue? pCue->getHotCue() is -1 for many other types.\r\n\r\nMaybe like so:\r\n```\r\nVERIFY_OR_DEBUG_ASSERT(pCue->getType() == mixxx::CueType::HotCue) {\r\n    continue;\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 5, 13, 17, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 424609922, 'comment_body': 'Is wrapping a pointer into std::optional common practice in C++? I guess in this case returning a nullptr is appropriate and simplifies the code. Checking for both nullopt and nullptr feels overcomplicated.', 'comment_created': datetime.datetime(2020, 5, 13, 17, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 424610667, 'comment_body': 'inline is redundant', 'comment_created': datetime.datetime(2020, 5, 13, 17, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 424611071, 'comment_body': 'inline is redundant', 'comment_created': datetime.datetime(2020, 5, 13, 17, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 424612827, 'comment_body': 'This method is protected in the base class and you should use the same visibility here. Reducing the visibility in derived classes is not recommended, because it does not work as intended.', 'comment_created': datetime.datetime(2020, 5, 13, 17, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 424615210, 'comment_body': 'Why do we need a separate boolean for tracking the status instead of using QWidget::isVisible()?', 'comment_created': datetime.datetime(2020, 5, 13, 17, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 424635108, 'comment_body': 'Due to the Serato/Rekordbox import loop cues can also have a hotcue number now. ', 'comment_created': datetime.datetime(2020, 5, 13, 18, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 424668890, 'comment_body': ""Then we need to compare both type and number here? Are there any rules regarding uniqueness of this number in relation to the type?\r\n\r\nI haven't checked yet how the remaining code deals with this situation."", 'comment_created': datetime.datetime(2020, 5, 13, 19, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 424680000, 'comment_body': ""The numbers need to be unique across all types (no hotcue or loop with the same number) or strange things might happen. Currently the only way to get loop cues with numbers is via import from Rekordbox/Serato, so there shouldn't be an issue."", 'comment_created': datetime.datetime(2020, 5, 13, 19, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 425362488, 'comment_body': '> Do we need to skip _cue points_ with type != mixxx::CueType::HotCue? pCue->getHotCue() is -1 for many other types.\r\n\r\nCurrently, only hotcues seem to be having a context menu.', 'comment_created': datetime.datetime(2020, 5, 14, 18, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 425780517, 'comment_body': ""This comment wouldn't be necessary with a better name for the variable. How about `marksToScreenPositions`?"", 'comment_created': datetime.datetime(2020, 5, 15, 12, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425781441, 'comment_body': '```suggestion\r\n                // Check if the current point needs to be displayed\r\n```\r\nPlease fix this typo in the existing comment', 'comment_created': datetime.datetime(2020, 5, 15, 12, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425784404, 'comment_body': ""```suggestion\r\n    /// Get cue at a point on the waveform widget.\r\n```\r\nWe're using `///` for documentation now so this is picked up by IDE tooltips and Doxygen"", 'comment_created': datetime.datetime(2020, 5, 15, 13, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425787297, 'comment_body': '""Offset"" implies that these are somehow shifted from another position.\r\n```suggestion\r\n    void setMarkLabelPositions(QMap<WaveformMarkPointer, int> markLabelPositions) {\r\n        m_markLabelPositions = markLabelPositions;\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 5, 15, 13, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425790350, 'comment_body': ""```suggestion\r\n    return nullptr;\r\n```\r\nThe explicit casting isn't necessary and I don't think it makes the code any easier to understand."", 'comment_created': datetime.datetime(2020, 5, 15, 13, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425799118, 'comment_body': '```suggestion\r\n    return nullptr;\r\n```', 'comment_created': datetime.datetime(2020, 5, 15, 13, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425800022, 'comment_body': ""This is affected by the same bug as #2663, but don't worry about that until we merge #2663."", 'comment_created': datetime.datetime(2020, 5, 15, 13, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425819062, 'comment_body': 'I suggest to add the following debug assertion:\r\n\r\n```\r\nDEBUG_ASSERT(pMark->getHotCue() != Cue::kNoHotCue);\r\n```\r\n\r\nJust to ensure that the mark always has a number that uniquely identifies a `Cue` object.', 'comment_created': datetime.datetime(2020, 5, 15, 13, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 425820237, 'comment_body': 'This will fail currently. I can right click on loop markers with no hotcue number, which should not happen.', 'comment_created': datetime.datetime(2020, 5, 15, 13, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425898102, 'comment_body': ""Renaming this variable should be better. But the positions are relative to the scrolling widget, not the screen. So it may be renamed to `marksToWidgetPositions`. But the word `screen` indicates that this `QMap` only stores marks visible on screen.\r\n\r\nIn the overview widget, the size of the mark image is equal to the widget, thus, this position information is not required to detect if a mouse pointer is near/on the marker.\r\nBut I wouldn't suggest using the complete widget area just to draw markers on the scrolling waveform since that would take >10x canvas space required. So we will keep sending position with marks as a `QMap`."", 'comment_created': datetime.datetime(2020, 5, 15, 15, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 425927162, 'comment_body': 'Okay, then change the comment to\r\n```suggestion\r\n    // Maps mark objects to their positions in the widget\r\n    QMap<WaveformMarkPointer, int> marksOnScreen;\r\n```', 'comment_created': datetime.datetime(2020, 5, 15, 16, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425965445, 'comment_body': 'So much less code. Beautiful :)', 'comment_created': datetime.datetime(2020, 5, 15, 18, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 425965682, 'comment_body': 'Thanks for consolidating the code here in WOverview too.', 'comment_created': datetime.datetime(2020, 5, 15, 18, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 426013594, 'comment_body': 'Unneeded round brackets', 'comment_created': datetime.datetime(2020, 5, 15, 19, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 426013708, 'comment_body': 'This method should be const', 'comment_created': datetime.datetime(2020, 5, 15, 19, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 426014952, 'comment_body': 'You could replace this comment with `DEBUG_ASSERT(getOrientation() == Qt::Vertical);` to document **and** verify your assumptions.', 'comment_created': datetime.datetime(2020, 5, 15, 19, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 426015104, 'comment_body': 'The method should be const', 'comment_created': datetime.datetime(2020, 5, 15, 19, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 426016744, 'comment_body': 'In a later version we might think about a better encapsulation of this QMap. We use this type at two different places with different names (""m_marksOnScreen"" vs. ""m_markPositions""). You don\'t need to change this now.', 'comment_created': datetime.datetime(2020, 5, 15, 19, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 426018220, 'comment_body': 'Method should be const', 'comment_created': datetime.datetime(2020, 5, 15, 19, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 426018280, 'comment_body': 'Method should be const', 'comment_created': datetime.datetime(2020, 5, 15, 19, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 426080627, 'comment_body': ""You don't need to bother going back and changing this commit, but for the future please make merge commits the bare minimum required to resolve conflicts and get it to build and run, then add new changes in following commits."", 'comment_created': datetime.datetime(2020, 5, 15, 22, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 426081120, 'comment_body': ""Got that. Shouldn't have combined it into the merge resolution commit. Will keep that in mind."", 'comment_created': datetime.datetime(2020, 5, 15, 22, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}]","[{'commit_sha': '883b97c3d0a7462ff5301ab50b6ea64db9a26f6d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10ce4c441377389010a7a901747337f9f724e958', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e129710c8b5b210f747fe0b8832be3b6b7eb3e9d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c16cfc143b94e48b732761286a70270028b4aa54', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc63cbe11afc9f520ae2019f5992657942b12c63', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '097917be77fbf821feac26c1ea8b6ebaa8c9f9c0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db10daabbe3f96749fd61f21c3e7f67995f81678', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dff5c2b2828b8c8e86d4958f42390e09794d513c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b812a9d7e4cce4fb04db66fc2ea90f0889aaf5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '364305779e7b4c504b58cfc1331141917832b7b3', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f5f7bfb6e0544544a8f7c3f36f8e00d67ff67d1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad104313bd206d1f133d1270c4ee8a91eb162fe1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99aa12e06eaa07db65026519d5875ee24f33da20', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58c88a68095fde74e0b1f47b8c1ea894b62462a2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1f13291d29f70d12668972eca82bd7a27680603', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2918486a06858b5dd9df214348cd3682af7c868d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68ae87f1ae804e8164bf25756d6600f865ce9583', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2538208c71d4daecb5724661a01dce08b5275137', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd617cf42582ff95de7072629d97fb8a97b61c3c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe1282adc171754c44ff990b1de8c21af00c677', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e750602793436447dd065acf0c1cfed11cf2e2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3deebd91f84e8baba004f571b7d75884e232ae19', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}]",Harshit Maurya,30816844,,User,,41,,123,68
427971096,[WIP] Bars and downbeats for common time signature.,"Display and edit downbeats on the scrolling waveform.

Task List:

- [x] Display downbeats on the waveform.

- [x] Edit downbeat with a context menu.

This PR will be covering a part of the first phase tasks primarily as described in the planning page: [https://www.mixxx.org/wiki/doku.php/measures_downbeats_bars_and_phrases](https://www.mixxx.org/wiki/doku.php/measures_downbeats_bars_and_phrases)",False,2844,https://api.github.com/repos/mixxxdj/mixxx/pulls/2844,https://github.com/mixxxdj/mixxx/pull/2844,closed,739,189,28,45,11,68,0,0,[],2020-06-04 17:02:48+00:00,2020-07-23 16:09:41+00:00,4230413.0,"48 days, 23:06:53","[{'comment_id': 437136105, 'comment_body': 'Until #2777 is merged, also add new files to build/depends.py', 'comment_created': datetime.datetime(2020, 6, 9, 4, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 437285294, 'comment_body': '= default', 'comment_created': datetime.datetime(2020, 6, 9, 9, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437287239, 'comment_body': 'I suggest to use composition instead of  inheritance. This requires to repeat some setters/getters but allows us to use the Mixxx coding style instead relying on what Protobuf generates', 'comment_created': datetime.datetime(2020, 6, 9, 9, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437287908, 'comment_body': 'Instead of re-initializing we should create a new `Beat` instance. This method should better be merged into the constructor.', 'comment_created': datetime.datetime(2020, 6, 9, 9, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437288594, 'comment_body': 'Use Mixxx coding style after replacing inheritance with composition', 'comment_created': datetime.datetime(2020, 6, 9, 9, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437288700, 'comment_body': 'All getters shall be const', 'comment_created': datetime.datetime(2020, 6, 9, 9, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437288933, 'comment_body': 'Symmetric operators should be implemented as free functions instead of member functions', 'comment_created': datetime.datetime(2020, 6, 9, 9, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437289543, 'comment_body': 'Do we need this? Why not use `Beat` instances as simple values?', 'comment_created': datetime.datetime(2020, 6, 9, 9, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437290163, 'comment_body': 'Return a value instead of a shared pointer. Beats should be cheap to copy.', 'comment_created': datetime.datetime(2020, 6, 9, 9, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437297478, 'comment_body': 'Future (after #2512 has been merged): If BeatGrid implements a move constructor there is no need to return a new instance by pointer.\r\n\r\nIf possible we should use values instead of shared/unique pointers, especially for small, lightweight objects.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437298220, 'comment_body': 'In which unit is `offset` measured? Please always add Frames/Samples/Millis/Beats as a suffix.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437298698, 'comment_body': 'As already mentioned we should avoid shared pointers if possible', 'comment_created': datetime.datetime(2020, 6, 9, 10, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437299112, 'comment_body': '`virtual` is redundant if `override` is specified', 'comment_created': datetime.datetime(2020, 6, 9, 10, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437299234, 'comment_body': 'Return by value (move)', 'comment_created': datetime.datetime(2020, 6, 9, 10, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437299810, 'comment_body': 'Define a `constexpr kDefaultBeatsPerMeasure` instead of using 4 literally', 'comment_created': datetime.datetime(2020, 6, 9, 10, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437301073, 'comment_body': 'Both literals 3 and 4 need to be replaced in terms of kDefaultBeatsPerMeasure. Please check all the code for these literals and implicit assumptions.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437301755, 'comment_body': 'No pointers, just a list of values.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437301942, 'comment_body': 'Values, not pointers', 'comment_created': datetime.datetime(2020, 6, 9, 10, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437302362, 'comment_body': 'Pass/move by value, no pointer', 'comment_created': datetime.datetime(2020, 6, 9, 10, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437302598, 'comment_body': 'Use ""util/math.h""', 'comment_created': datetime.datetime(2020, 6, 9, 10, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437302904, 'comment_body': 'This is not a system include, i.e. ""waveform/renderers/waveformbeat.h""', 'comment_created': datetime.datetime(2020, 6, 9, 10, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437303198, 'comment_body': 'Define a constexpr in an anonymous namespace at the top of the file', 'comment_created': datetime.datetime(2020, 6, 9, 10, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437303722, 'comment_body': 'Move calculation into an inline function in the anonymous namespace', 'comment_created': datetime.datetime(2020, 6, 9, 10, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437303861, 'comment_body': '""proto/beats.pb.h""', 'comment_created': datetime.datetime(2020, 6, 9, 10, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437304168, 'comment_body': 'enum class Direction : int', 'comment_created': datetime.datetime(2020, 6, 9, 10, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437305299, 'comment_body': 'Do you really need to modify the type or orientation after construction? Try to make as many members immutable as possible. Dumb setters are considered an anti-pattern.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437305769, 'comment_body': 'Either declare a virtual destructor or declare this class as `final`. The latter may apply here.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437308146, 'comment_body': '= default (if possible header, otherwise in .cpp file)', 'comment_created': datetime.datetime(2020, 6, 9, 10, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437308373, 'comment_body': '- Initialize in initializer list\r\n- Use parented_ptr/make_parented', 'comment_created': datetime.datetime(2020, 6, 9, 10, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437308516, 'comment_body': 'Redundant virtual keyword', 'comment_created': datetime.datetime(2020, 6, 9, 10, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437308741, 'comment_body': 'Add separating blank line', 'comment_created': datetime.datetime(2020, 6, 9, 10, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437309323, 'comment_body': 'This if/else is redundant', 'comment_created': datetime.datetime(2020, 6, 9, 10, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437309734, 'comment_body': 'Replace literal with the suggested kDefaultBeatsPerMeasure', 'comment_created': datetime.datetime(2020, 6, 9, 10, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437727026, 'comment_body': 'This is quadruple scaling, which means we insert three beats between two adjacent beats. It does not depend on Time Signature. However, downbeat adjustment will make use of `kDefaultBeatsPerMeasure` while scaling.', 'comment_created': datetime.datetime(2020, 6, 9, 21, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438280607, 'comment_body': 'This is a solution for the current beats architecture. Later, downbeats will be decided by beat markers.', 'comment_created': datetime.datetime(2020, 6, 10, 17, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438449605, 'comment_body': 'Read the value of the setting from the config file and select the corresponding combobox item here', 'comment_created': datetime.datetime(2020, 6, 10, 22, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438450203, 'comment_body': 'Create an enum class for these index values', 'comment_created': datetime.datetime(2020, 6, 10, 22, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438450480, 'comment_body': 'Oh I see the combobox item is set in slotUpdate. However, the config value is not read on startup and  `WaveformWidgetFactory::instance()->setBeatGridMode` is not called until changed settings are applied.', 'comment_created': datetime.datetime(2020, 6, 10, 22, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438470384, 'comment_body': 'What are the units of this position? Audio frames? Pixels?', 'comment_created': datetime.datetime(2020, 6, 10, 23, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438470772, 'comment_body': 'Use the same enum class here as will be used in DlgPrefWaveform', 'comment_created': datetime.datetime(2020, 6, 11, 0, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438471068, 'comment_body': ""It looks like this doesn't depend on any class members, so it can be moved to the anonymous namespace instead of being a private class member."", 'comment_created': datetime.datetime(2020, 6, 11, 0, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438471430, 'comment_body': 'I think you can just call slotUpdate in the constructor. ', 'comment_created': datetime.datetime(2020, 6, 11, 0, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 438490379, 'comment_body': 'Can we come up with a better description than ""x""? What is ""x""? A position within the widget? What are the units? Pixels?', 'comment_created': datetime.datetime(2020, 6, 11, 1, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438490810, 'comment_body': ""How about moving this out of the if/else block and always explicitly setting the orientation from the waveform's orientation? That way it does not rely on an implicit default value."", 'comment_created': datetime.datetime(2020, 6, 11, 1, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438491535, 'comment_body': 'Yes I think std::optional would be appropriate here.', 'comment_created': datetime.datetime(2020, 6, 11, 1, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438492923, 'comment_body': ""What is this magic number 5? I presume it's a padding width on either side of the line to make a wider area to right click? Please move it to a named constant in an anonymous namespace."", 'comment_created': datetime.datetime(2020, 6, 11, 1, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438493435, 'comment_body': 'I was confused what this ""enabled"" state is for in the new Beat class. Is this all it is used for? If so, please get rid of it and use std::optional here.', 'comment_created': datetime.datetime(2020, 6, 11, 1, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438493899, 'comment_body': ""Is this check necessary? Shouldn't the loop below go through 0 iterations if m_waveformWidgetHolders is empty?"", 'comment_created': datetime.datetime(2020, 6, 11, 1, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438496896, 'comment_body': 'Hmm... how should we handle this situation?\r\n![two-menus](https://user-images.githubusercontent.com/9455094/84335650-f12ebd80-ab5a-11ea-854e-76e0935634b0.png)\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 11, 1, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438497502, 'comment_body': 'This feels hacky to do this in WWaveformViewer. I propose moving this into WBeatMenu and setting the active Beat from WWaveformViewer, similar to how we set the active Cue for WCueMenuPopup.', 'comment_created': datetime.datetime(2020, 6, 11, 1, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438503216, 'comment_body': ""I don't think WBeatMenu should be accessing configuration values... how about updating the beatgrid mode for WBeatMenu from WWaveformViewer::setBeatGridMode?"", 'comment_created': datetime.datetime(2020, 6, 11, 2, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438503998, 'comment_body': 'I have two ideas how this could be handled:\r\n1. Show WBeatMenu and add QAction ""Edit cue"" that shows WCueMenuPopup.\r\n2. Add actions to WCueMenuPopup for each of WBeatMenu\'s actions.\r\n\r\nI\'m leaning towards 1. What do others think? @Holzhaus, @ronso0?', 'comment_created': datetime.datetime(2020, 6, 11, 2, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438512047, 'comment_body': ""That certainly should be a constant\r\nBut I would like to point out a design inconsistency that has been introduced. If you look at the function just above this, it happens to be `getCueMarkAtPoint` which returns a `WaveformMarkPointer`, which is the graphic object for the mark.\r\nBut the return type of current function is not WaveformBeat / WaveformBeatPointer but the Beat object itself.\r\nThis means I can't currently use the `contains` method used with WaveformMarkPointer to check if point is in vicinity.\r\nTo actually start using WaveformBeat insead of Beat, I would need to store the beat object inside the WaveformBeat class.\r\n\r\nA positive side for making this consistent would be:\r\nWe can create an interface like `WaveformMarkRightClickable` (for the lack of a good name) which has a method `contains` and `WaveformMark` and `WaveformBeat` both have to implement that interface. I mean pattern comes from Java, I'd like to hear your suggestions on how to do it in C++."", 'comment_created': datetime.datetime(2020, 6, 11, 2, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438512439, 'comment_body': 'The `enabled` state is not introduced by the new Beat class, it was existing in the Beat protobuf. Considering this check, I will wrap the return type with std::optional.', 'comment_created': datetime.datetime(2020, 6, 11, 2, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438512817, 'comment_body': ""I kinda had 1 in mind earlier since I was aware of this situation. I was just thinking it wouldn't be appropriate to move the cue menu as an action in BeatMenu since a cue can also be set at a position where there is no beat (if quantization is disabled)."", 'comment_created': datetime.datetime(2020, 6, 11, 2, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438514345, 'comment_body': 'Right, this would only be for the special case where a cue and beat are at the same point (which is a common scenario with quantize). For cues that are not at beats, simply show WCueMenuPopup by itself like is done currently.', 'comment_created': datetime.datetime(2020, 6, 11, 2, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438514935, 'comment_body': 'That seems like a good idea. Then we could have less special cases to handle in WWaveformWidgetRenderer.', 'comment_created': datetime.datetime(2020, 6, 11, 2, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438515114, 'comment_body': 'I have no idea what it means for a beat to be ""enabled""... was this previously used in the code anywhere? If not, let\'s remove it.', 'comment_created': datetime.datetime(2020, 6, 11, 2, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438728024, 'comment_body': 'The call already exists. And I checked boot configuration, everything seems to load in place.\r\n\r\n`mixxx.cpp` Line 448\r\n```cpp\r\n    WaveformWidgetFactory::instance()->setConfig(pConfig);\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 11, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438870797, 'comment_body': 'I tested again, and yes the combobox in DlgPrefWaveform is loaded correctly. However, I cannot get downbeats to show on the waveform until I open the preferences and change the combobox value and that has to be repeated every time I start Mixxx.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438878915, 'comment_body': '1. requires an additional click, but I think it makes sense here.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 439127370, 'comment_body': 'These heavily nested boolean operations are hard to read. Can you check the orientation in an if/else block?', 'comment_created': datetime.datetime(2020, 6, 11, 23, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439130322, 'comment_body': ""Use qRound on this line, then we don't need a separate line just for rounding."", 'comment_created': datetime.datetime(2020, 6, 11, 23, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439131228, 'comment_body': 'This is easy to confuse with QWidget::update, which is used to redraw widgets. Maybe call this updateFlags? Or do you have another idea for a name?', 'comment_created': datetime.datetime(2020, 6, 11, 23, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439131734, 'comment_body': 'I think it would be better to update the QActions when the option flags are changed instead of having this confusing hiding of a standard QMenu method.', 'comment_created': datetime.datetime(2020, 6, 11, 23, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439132594, 'comment_body': '```suggestion\r\n        m_pCueMenu = make_parented<QAction>(tr(""Edit cue""), this);\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 23, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439519788, 'comment_body': 'And and maybe use a temp var to do the kClickableLinePaddingPixels addition/subtraction only once. ', 'comment_created': datetime.datetime(2020, 6, 12, 16, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 439755100, 'comment_body': ""This function does not upload the flags, it updates the menu. So let's call it `updateMenu`"", 'comment_created': datetime.datetime(2020, 6, 13, 17, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}]","[{'commit_sha': 'a777180e8c03ec3cf6f1650892fbb7d41f15faf1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31f8defcc51b517e0dafe745163bba1c06126947', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5967d71eef8f291d4e6271af9197afae92dd5af1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d967a0e407bce77747d478fae3fbec85ab9e647', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e698149cb56da114f98dfaee25c7fe785b10bc', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5ab726b2b9c362073be2f2352185869b1c557dd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c239dbb00f0bbce4b3ffd955877e4963ff88c99', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29d1b809560cc4cd495f05443698ef7393192460', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951627dce63988f580c22d0ca94435e2f4257a57', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dd47502c58bca129875bd35ba463eac66e1fc7a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25065e96941eb7a12fb503bc579963b47938d35e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d0522dfeb9f2f0078b62e9516386b04ef7b2c9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dceca94f4a4cd18d06b86d724cb3c3fe0946796', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '837de30f652465f340b33b9ef969f7476a7b8555', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ba15875c2159335aa5b05a1f7461d187650a12', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95f68efcbd3d99300189cb3df25ec53bb04c94f9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02639278b8f7799af53e9eadac0037b9569862ee', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4166ce8c210825a4d42ae308ff8d0346959e9118', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44caf480a10201e32144c70a7b5eefcf62c39edb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad50c5975e146155c934e289e5646bf230471e45', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3164b767656392b5cc7709a5d17f2869c4e5e44', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd304118fdfb196f29559ac8a487e5310b4e6bfe0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd72749e6bed96c69bd6f8694e7d968f332723169', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b87c6ac5766b4d20eff16c6b28d325e6985dc85', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e149fdb430c1f4fd53ad9621525696c221c71647', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5420dcdeef033d678f50569fdbec72f2af405ab', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df217c01c497432b89e67045c81372289041a951', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a54d3407a3893fb4aea8580fc5c5abe80ea43c11', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cff18aea877ed18707493adf6650af8d0151e19', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1f9375b62c4ff9588e9d4404db0bd495ae91bb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e771996f84764f66e7284ad6e983026420e202', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7fd68df9967ed82d56ad0674a95832aebb87792', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c70b21d36dd6cd807af7faaf93a2f9a769cb35', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a1b8d942a211ec080648b251b709bc9fa2dd0f6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13643a9dbc11bfdcf554a557974cab18606ea807', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b320e17b1969f4728267d9f4c80119097880b6d2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2ab6e39e1b7c65ec8d2b28f1abe89ff508f2fea', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f7883ac57c3a108be8bdc4ddc4fcd8fdf7a2569', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882f73fb4f1b471430a98a4ab912466ad8713323', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c46ab059dc9bc21d403f9e287fbf4e13d9c869e7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cf475d236f905c551dc2840b02d6da031a3a7e8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b53645f3432fc5e38a08ad2b3f8d21cd9c3f0ffc', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '849ba8d30d6c0b066a8870cc3e66b759ea0bd161', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1feb961775f1ca5bedee0f1c6616728fb748303a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cad9401e0ceeb31f89eef6a6ee75ebe49b48534d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}]",Harshit Maurya,30816844,,User,,41,,123,68
433960308,[WIP] Remove beatmap and beatgrid,"This is a continuation of #2512

Goals:

- [x] Address all review comments from 2512

- [x] Fix tests

- [x] Remove UI features (Since they are being developed in #2844)

- [x] Add backward compatibility for functions that generate BeatGrid by generating an intermediate BeatMap before passing to Beats class.

- [x] Migrate user data from old BeatGrid & BeatMap protobufs

- [x] Break up Beats class into an inner functional class that doesn't inherit from QObject and an outer QObject wrapper.

- [ ] Add protobuf definitions for TimeSignature, Phrase and Sections and write test cases to test their operations.",False,2861,https://api.github.com/repos/mixxxdj/mixxx/pulls/2861,https://github.com/mixxxdj/mixxx/pull/2861,closed,3488,3031,52,162,58,172,0,0,[],2020-06-13 05:09:23+00:00,2020-07-23 16:10:16+00:00,3495653.0,"40 days, 11:00:53","[{'comment_id': 439716600, 'comment_body': '@hacksdump All operations on `Frame` should be inlined and defined in the header file. No need for a .cpp file.', 'comment_created': datetime.datetime(2020, 6, 13, 7, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 439716712, 'comment_body': 'Please edit this commit directly and do a force push. No need to keep the previous changes around.', 'comment_created': datetime.datetime(2020, 6, 13, 7, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441202119, 'comment_body': 'These are parented QObjects. If we make them unique there is extra code executed to remove them from the QtObject tree. Can you make them parented_ptr to document that explicit.\r\n\r\nPlease fix this in the whole PR.\r\n', 'comment_created': datetime.datetime(2020, 6, 16, 23, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441202402, 'comment_body': 'This can be a unique_ptr, because it has no parent', 'comment_created': datetime.datetime(2020, 6, 16, 23, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441203662, 'comment_body': 'It scares me that the m_endBeat is used. Normally the iterator end is the address invalid address behind the last element and should not be deference.\r\nThe code failed to iterate over all beats if for some reasons one beat is on the same position than on other.\r\nSo I guess the code is more robust if we do a pointer compare instead of a value.\r\nhttps://stackoverflow.com/questions/15252002/what-is-the-past-the-end-iterator-in-stl-c', 'comment_created': datetime.datetime(2020, 6, 16, 23, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441204057, 'comment_body': 'We still use the term sample rate that always refers to samples per channel. The term frame rate is only used for video.', 'comment_created': datetime.datetime(2020, 6, 16, 23, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441204383, 'comment_body': '```suggestion\r\n        qDebug() << ""Analysis data(Frame numbers):"" << beats;\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441204633, 'comment_body': 'remove extra () and below', 'comment_created': datetime.datetime(2020, 6, 16, 23, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441205971, 'comment_body': 'A QObject is not copy-able. I am unsure how this works for inherited classes. At least this has some code smell. \r\nSo we should either remove to QObject parent or the copy constructor. ', 'comment_created': datetime.datetime(2020, 6, 16, 23, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441208614, 'comment_body': 'I know bars and beats, but now ""bar beats"", Can we rename it to just ""bar"" or ""down beat""  ', 'comment_created': datetime.datetime(2020, 6, 17, 0, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441210727, 'comment_body': 'Can we use a constant for the 2 here and in the whole file? \r\n ', 'comment_created': datetime.datetime(2020, 6, 17, 0, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441212346, 'comment_body': 'What is the solution for single exceptional bars with 4 1/2 or 3 1/2 beats. ', 'comment_created': datetime.datetime(2020, 6, 17, 0, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441267185, 'comment_body': 'I am not sure I got that question.\r\nIf a bar has 4 1/2 beats it would mean the downbeat for the bar specifies a time signature as TimeSignature(4,2)', 'comment_created': datetime.datetime(2020, 6, 17, 4, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441325461, 'comment_body': ""@daschuer Please let's only consider simple time signatures with an integer *note value* aka *beat unit*. This is sufficient for our use case. [Fractional beats](https://en.wikipedia.org/wiki/Time_signature#Variants) are out of scope."", 'comment_created': datetime.datetime(2020, 6, 17, 7, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441330840, 'comment_body': 'I am struggling with the name `Frame`. It is short and concise, but also wrong.\r\n\r\nThis represents not an actual *frame of samples*. Instead it is a(n) index/offset/position that addresses a frame i an sequence of frames.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441331357, 'comment_body': 'Do not forward declare types from external libraries. QDebug might not be a class, depending on how it is implemented.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441331847, 'comment_body': 'Remove all `const` qualifiers from parameters that are passed by value.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441332307, 'comment_body': 'The integer division might not work as expected when passing a double. Use double here.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441333727, 'comment_body': 'Should it be possible to specify a beat without a position? Then add a comment why. Otherwise change it to `required`.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441334307, 'comment_body': 'What does it mean if a Beat does not have a type?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441334690, 'comment_body': 'Why does this field need to be optional?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441335777, 'comment_body': 'Pass parameters by value', 'comment_created': datetime.datetime(2020, 6, 17, 7, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441336348, 'comment_body': 'Please omit these operators, operators +=/-= are sufficient and more versatile. The value is not supposed to be an integer.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441337130, 'comment_body': 'Pass parameters by value and implement in terms of *= (and all the other arithmetic operators)', 'comment_created': datetime.datetime(2020, 6, 17, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441341037, 'comment_body': ""No, you cannot add a frame position to another frame position. But you could add a frame count to a frame position, resulting in a new position.\r\n\r\nUsing the *newtype* pattern for both positions **and** counts with well-defined arithmetic operations between them would be the correct solution. Let's first only encode the positions and use plain `double` for differences between positions. This is not type safe, but at least not wrong from a conceptual perspective."", 'comment_created': datetime.datetime(2020, 6, 17, 7, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441342071, 'comment_body': 'Please omit the type prefix, this is considered an anti-pattern.\r\n\r\nInstead define a public `typedef double value_t` (see RgbColor) and replace this member with `value_t m_val;`. Use `Frame::value_t` instead of `double` whenever you refer to this inner type.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441342689, 'comment_body': '= default', 'comment_created': datetime.datetime(2020, 6, 17, 7, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441342904, 'comment_body': '`inline` is redundant in the class body, please remove it', 'comment_created': datetime.datetime(2020, 6, 17, 7, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441343119, 'comment_body': 'Symmetric operators should be defined as free functions.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441343454, 'comment_body': 'Define != in terms of ==, i.e. !(lhs == rhs)', 'comment_created': datetime.datetime(2020, 6, 17, 7, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441343685, 'comment_body': 'Add constexpr', 'comment_created': datetime.datetime(2020, 6, 17, 7, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441343943, 'comment_body': 'Use constexpr for both constants', 'comment_created': datetime.datetime(2020, 6, 17, 7, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441344796, 'comment_body': 'The implicit default constructor will leave the members uninitialized. Declare one (constexpr) that initializes them to 4/4.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441345342, 'comment_body': 'This constant becomes obsolete if we add a constexpr default constructor', 'comment_created': datetime.datetime(2020, 6, 17, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441346161, 'comment_body': '@daschuer Suggestions?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441347214, 'comment_body': ""That's why I mentioned that we need to break up this class into an inner functional class that doesn't inherit from QObject and an outer QObject wrapper."", 'comment_created': datetime.datetime(2020, 6, 17, 7, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441348912, 'comment_body': '@daschuer Suggestions? Also related to my comment about the naming of the class `Frame`. \r\n\r\nSure, pure double with an implicit interpretation would be even worse. But if we decide to define a type-safe class we need to be correct instead of introducing an incorrect abstraction.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441370123, 'comment_body': 'The `enabled` field will be removed in #2844 ', 'comment_created': datetime.datetime(2020, 6, 17, 8, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441398689, 'comment_body': 'FramePosition? FrameOffset? FrameIndex? ', 'comment_created': datetime.datetime(2020, 6, 17, 9, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 441437699, 'comment_body': 'I like FramePosition.', 'comment_created': datetime.datetime(2020, 6, 17, 10, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 441497071, 'comment_body': ""We could abbreviate this as `FramePos` to avoid too type boilerplate.\r\n\r\nIf we agree to restrict the usage of this class to (absolute) positions the arithmetic operation FramePos + FramePos need to be removed, because adding two points in this affine space is not allowed.\r\n\r\nFramePos - FramePos should result in an `double` that implicitly represents the difference (in frames). Otherwise we would need to introduce a dedicated difference (= *vector*) type. I would like to postpone this decision. Let's use a simple type alias for documentation purposes, i.e. `typedef double FrameDiff_t;`. The suffix `_t` indicates that this is a primitive type."", 'comment_created': datetime.datetime(2020, 6, 17, 12, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441562819, 'comment_body': 'So does this mean a frame + frame diff is defined?\r\n\r\nAlso what about operations that need to find the mid point of two frames? Currently it can be written as (frame1 + frame2) / 2.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441592373, 'comment_body': ""> So does this mean a frame + frame diff is defined?\r\n\r\nYes.\r\n\r\n> Also what about operations that need to find the mid point of two frames? Currently it can be written as (frame1 + frame2) / 2.\r\n\r\nMaybe add a new method that returns a FramePos and you pass in the other FramePos. This prevents confusing positions with diffs and makes sure we always know what kind of value we're working with."", 'comment_created': datetime.datetime(2020, 6, 17, 14, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 441636075, 'comment_body': 'https://en.wikipedia.org/wiki/Affine_space\r\n\r\n- points vs. vectors,\r\n- points in time (instants) vs. time durations\r\n- frame positions vs. frame position differences', 'comment_created': datetime.datetime(2020, 6, 17, 15, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441870926, 'comment_body': 'The start of a track can be thought of an origin. Does that mean a frame position is not a true affine space?', 'comment_created': datetime.datetime(2020, 6, 17, 22, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441871649, 'comment_body': 'If I am correct, we have agreed on using only the two types: `FramePos` and `FrameDiff`.\r\nWhy do we need to make `FrameDiff`a primitive... can it not be wrapped in a class like `FramePos`?', 'comment_created': datetime.datetime(2020, 6, 17, 22, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441875923, 'comment_body': ""Sort of. Frame positions are relative to the start of the track. Nevertheless adding two frame positions doesn't make any sense.\r\n\r\nI assumed that we don't want to define a separate `FrameDiff` type for the moment until we actually need it? That's why I proposed the typedef as a workaround. It depends on how often it appears in public APIs. If those values are only used in internal or limited scopes the separate type is not really needed."", 'comment_created': datetime.datetime(2020, 6, 17, 22, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441877430, 'comment_body': 'This is a snippet from the `Beats` class.\r\n```cpp\r\nvoid Beats::translate(Frame numFrames) {\r\n    for (BeatList::iterator it = m_beats.begin(); it != m_beats.end();) {\r\n        Frame newpos = Frame(it->frame_position()) + numFrames;\r\n```\r\n\r\nIt will be changed to \r\n```cpp\r\nvoid Beats::translate(FrameDiff numFrames) {\r\n    for (BeatList::iterator it = m_beats.begin(); it != m_beats.end();) {\r\n        FramePos newpos = FramePos(it->frame_position()) + numFrames;\r\n```\r\n\r\nWhich classes form the public API for mixxx?', 'comment_created': datetime.datetime(2020, 6, 17, 22, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441877951, 'comment_body': 'In Rust I use the newtype pattern very often, because it requires much less boilerplate than in C++. But even in this case it is a thin line between improved safety and lots of boilerplate into()/from() type conversions.', 'comment_created': datetime.datetime(2020, 6, 17, 22, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441879953, 'comment_body': 'I would vouch for type safety here.\r\nSo I will redefine the operation\r\n```cpp\r\nFrame operator+(const Frame& frame1, const Frame& frame2) {\r\n    return Frame(frame1.getValue() + frame2.getValue());\r\n}\r\n```\r\nas \r\n```cpp\r\nFramePos operator+(FramePos framePos, FrameDiff frameDiff) {\r\n    return FramePos(framePos.getValue() + frameDiff.getValue());\r\n}\r\n```\r\nIf FrameDiff is just a typedef for double, one may still accidentally pass sample diff instead of frame diff.', 'comment_created': datetime.datetime(2020, 6, 17, 23, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441886961, 'comment_body': 'Should I use mixxx::track::io::TimeSignature as the underlying object for the TimeSignature as I have done with Beat class in #2844 ?\r\nThis would mean a protobuf generated object is the member variable instead of two integers.\r\nThe default (4/4) is already defined in `beats.proto`.', 'comment_created': datetime.datetime(2020, 6, 17, 23, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441894694, 'comment_body': 'Or delete the default constructor? If calling code should use a default value of 4/4, I think that should be made explicit in the calling code, not hidden in the implementation of the default constructor of this class.', 'comment_created': datetime.datetime(2020, 6, 17, 23, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 441895341, 'comment_body': 'Or use the null 0/0 value for the default constuctor', 'comment_created': datetime.datetime(2020, 6, 17, 23, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 441897272, 'comment_body': '> Or use the null 0/0 value for the default constuctor\r\n\r\nThis would so be consistent with Qt classes where the default constructor creates an invalid value. ', 'comment_created': datetime.datetime(2020, 6, 18, 0, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 441921179, 'comment_body': ""Thinking about this further, do we really need the complexity of creating a class to represent a mathematical operation on a frame position? How about just\r\n```\r\nFramePos someVariable = whatever;\r\nsomeVariable = FramePos(someVariable.getValue() + increment);\r\n```\r\n\r\nThis is a little verbose, but it's not complicated. It eliminates the possibility of accidentally doing math with a FramePos and a double which represents a different kind of value if we remove all the operators on the FramePos class. I think it is more straightforward than\r\n```\r\nFramePos someVariable = whatever;\r\nsomeVariable += FrameDiff(increment);\r\n```\r\nwhich requires the reader of the code to learn about a whole other class."", 'comment_created': datetime.datetime(2020, 6, 18, 1, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443063508, 'comment_body': '""downbeat"" seems to be common: https://en.wikipedia.org/wiki/Beat_(music)#Downbeat_and_upbeat -> `beats_set_downbeat` + ""Set first beat of a bar""', 'comment_created': datetime.datetime(2020, 6, 19, 22, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443063692, 'comment_body': 'All manual deletes should become obsolete after switching to parented_ptr/unique_ptr respectively', 'comment_created': datetime.datetime(2020, 6, 19, 22, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443064841, 'comment_body': 'These recurring conversions are difficult to identify. Please use inlined utility functions for this purpose, e.g. samples2frames()/frames2samples()', 'comment_created': datetime.datetime(2020, 6, 19, 22, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443065280, 'comment_body': 'Samples are restricted to even numbers to land on frame boundaries. But now delta is calculated in frames and this should be obsolete. Please recheck all occurrences carefully!', 'comment_created': datetime.datetime(2020, 6, 19, 22, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443065472, 'comment_body': 'Append the suffix ""Samples"" or ""Frames"" to variable names to distinguish them, i.e. `deltaFrames`', 'comment_created': datetime.datetime(2020, 6, 19, 22, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443066282, 'comment_body': 'Since frames are doubles delta should not be an integer!\r\n\r\n```\r\nauto deltaFrames = currentFrame.getValue() - closestBeat.getValue();\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 22, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443066846, 'comment_body': 'Passing a frame position to translate() is conceptually wrong, see FramePos vs FrameDiff. Instead the (fractional) number of frames should be passed.\r\n\r\n```\r\nm_pBeats->translate(deltaFrames);\r\n```\r\n\r\nPlease fix the declaration and use either `double` or `FrameDiff` (depending on your choice) as the parameter type.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443067856, 'comment_body': 'I would prefer the term *uniform* instead of *const*. This would also prevent confusion with *const* in programming @Be Any suggestions from a native speaker?', 'comment_created': datetime.datetime(2020, 6, 19, 22, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443068460, 'comment_body': 'Could be removed', 'comment_created': datetime.datetime(2020, 6, 19, 22, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443069300, 'comment_body': ""The comments if makeBeat() and makeBar() don't seem to be reasonable. \r\n\r\nAren't beats that are marked as mixxx::track::io::BAR supposed to be a downbeat, i.e. first beat in a bar/measure?"", 'comment_created': datetime.datetime(2020, 6, 19, 22, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443069528, 'comment_body': 'Please stick to the traditional `typedef` unless we need to introduce aliases for template types.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443069775, 'comment_body': 'Please remove all `const` classifiers from parameters that are passed by value.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443070212, 'comment_body': 'The implicit type conversion from int to double is confusing. Please use either integer or floating point but not both. Use separate or specialized functions for integer rounding operations.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443070406, 'comment_body': ""Why is the result rounded? The result should exactly match the argument, that's what the name of the function promises to do. It should not modify the resulting value by rounding.\r\n\r\nPlease introduce different functions for different purposes if needed."", 'comment_created': datetime.datetime(2020, 6, 19, 22, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443071287, 'comment_body': ""I agree with @Be. Introducing new types is a lot of extra work. And even more if you want to cover both integer and floating-point types. Out of scope of this task.\r\n\r\nLet's instead use naming conventions (as suggested) for variables and parameters to clearly distinguish between sample and frame deltas."", 'comment_created': datetime.datetime(2020, 6, 19, 22, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443071572, 'comment_body': '`class Frame final` and then remove this default destructor.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443174768, 'comment_body': 'I think ""constant"" is appropriate, but I think it should be fully spelled out as ""Constant"" instead of abbreviated ""Const"" to avoid confusion with C++\'s `const` keyword.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443174849, 'comment_body': 'Thank you for taking care to update the documentation with the code changes.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443175236, 'comment_body': 'Use std::optional rather than magic numeric values.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443175311, 'comment_body': 'Nevermind, I see this is obsoleted by the next commit.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443175600, 'comment_body': 'It would be nice to add codespell to our precommit hooks to avoid these in the future.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443175901, 'comment_body': '```suggestion\r\n    // because it is defined as the default in beats.proto\r\n```\r\n""Since"" means one event occurred before another in time.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443176620, 'comment_body': 'Now ""I am going to bed since I have to get up early."" ;)', 'comment_created': datetime.datetime(2020, 6, 21, 3, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 443177047, 'comment_body': ""Okay, so let's remove the math operators for the Frame class."", 'comment_created': datetime.datetime(2020, 6, 21, 3, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443177362, 'comment_body': 'Thanks for pointing the issues with the abstraction. The code makes much more sense with `FrameDiff_t` type.', 'comment_created': datetime.datetime(2020, 6, 21, 3, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443178772, 'comment_body': 'A FramePos(-1) just indicates a frame before the track start and can conceptually be used to refer to preceding frame.\r\nResolution:\r\n    1. Add new boolean isValid to FramePos class.\r\n    2. Return std::optional<FramePos> from search operations like findNextBeat.', 'comment_created': datetime.datetime(2020, 6, 21, 3, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443178887, 'comment_body': ""Let's use std::optional"", 'comment_created': datetime.datetime(2020, 6, 21, 3, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443205491, 'comment_body': ""Changing it to required would mean the explicit setting of type would be required. The default value doesn't make sense then.\r\nWhile frame_position can be required, type is not necessarily set assuming the default is a beat.\r\nGoogle has even removed the required type with protobuf v3."", 'comment_created': datetime.datetime(2020, 6, 21, 10, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443205577, 'comment_body': 'Sure. Position can be required.\r\nThis means it should always be explicitly set otherwise it would lead to SIGABRT on serialization.', 'comment_created': datetime.datetime(2020, 6, 21, 10, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443216137, 'comment_body': 'What beats does the class contain if this constructor is used? Are there any beats?', 'comment_created': datetime.datetime(2020, 6, 21, 12, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443216425, 'comment_body': 'Should this return a FramePos or a Beat?', 'comment_created': datetime.datetime(2020, 6, 21, 12, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443216738, 'comment_body': 'Nope. They can only be set with the `setGrid` method afterwards.', 'comment_created': datetime.datetime(2020, 6, 21, 12, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443216837, 'comment_body': 'FramePos here. But I am returning an object of Beat class in #2844 ', 'comment_created': datetime.datetime(2020, 6, 21, 12, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443218696, 'comment_body': 'QStrings should still be passed by const ref', 'comment_created': datetime.datetime(2020, 6, 21, 13, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 444524118, 'comment_body': 'We prefer \r\nmixxx::FramePos closestBeat  = m_pClosestBeat->get() / 2.0;\r\nbecause this does not read like a function call. ', 'comment_created': datetime.datetime(2020, 6, 23, 21, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444524768, 'comment_body': 'Using mixxx::FramePos here produces only clutter. ', 'comment_created': datetime.datetime(2020, 6, 23, 21, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444554658, 'comment_body': ""This was a real question! \r\n\r\nI don't think we necessarily required to introduce floats here, we just to need to be aware what to do, \r\nWe can have something like this: \r\n```\r\nD       b       b       b   D       b       b       b      D       b       b       b       D       b       b       b  \r\n```\r\nThat is not uncommon. It can be intended or a Drummer hick up.  \r\n\r\nHow would this be described in the protobuf. \r\n\r\nThe other thing I struggle with are Metal tracks where 7/16 or such is not uncommon. \r\nI am in doubt that we would like to have out beat grid cluttered with every 1/16 beats, because only two of them are notable as beats and probably found by the beat detector. It is just that one of them is slightly off\r\n(@crisclacerda please verify.) \r\n\r\nA 4/4 measure can be counted as 16/16 measure as  \r\n\r\n```\r\n1 e + a 2 e + a 3 e + a 4 e + a 1 e + a 2 e + a 3 e + a 4 e + a \r\nD       b       b       b       D       b       b       b  \r\n```\r\n\r\nSo the 7/16 example will be \r\n```\r\n1 e + a 2 e + 1 e + a 2 e + 1 e + a 2 e + 1 e + a 2 e + \r\nD       b     D       b     D       b     D       b  \r\n```\r\n\r\nThis video shows a 15/16 measure which is even more weird \r\nhttps://www.youtube.com/watch?v=GwCyIZ-v9CA\r\n\r\nHow would we express this? \r\n"", 'comment_created': datetime.datetime(2020, 6, 23, 23, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444557352, 'comment_body': 'a copy to itselfe? What does it do? ', 'comment_created': datetime.datetime(2020, 6, 23, 23, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444557995, 'comment_body': 'What is the solution if the first beat is cut for some reasons and is unbearable at the pre-roll? ', 'comment_created': datetime.datetime(2020, 6, 23, 23, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444558901, 'comment_body': 'normally functions are called by what they are doing and not when they are called. \r\nHow about ""updateBpm()""', 'comment_created': datetime.datetime(2020, 6, 23, 23, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444562494, 'comment_body': 'why is this not ""const QString& str"" anymore? ', 'comment_created': datetime.datetime(2020, 6, 23, 23, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444563042, 'comment_body': 'Is getValue() not const? Why not? ', 'comment_created': datetime.datetime(2020, 6, 23, 23, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444569457, 'comment_body': ""And why add the mixxx prefix if it's in the mixxx name space anyway? "", 'comment_created': datetime.datetime(2020, 6, 23, 23, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 445207331, 'comment_body': 'This change probably produces the build error with scons on Travis.\r\nYou may try to revert it.', 'comment_created': datetime.datetime(2020, 6, 24, 22, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 445217044, 'comment_body': 'This function is only being used in a test (enginesynctest) and nowhere in the main program. It was proposed in 2512 as well to remove this. Are there any possible scenarios where someone would like to **add a beat**?\r\n![Screenshot from 2020-06-18 22-22-41](https://user-images.githubusercontent.com/30816844/85635808-7a3a0e80-b69c-11ea-8bc1-a58f9f8fd9df.png)\r\n(Screenshot from 2512)', 'comment_created': datetime.datetime(2020, 6, 24, 22, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445269358, 'comment_body': '`getValue` and `compareEq` are both const. Is there some other function you are referring to?', 'comment_created': datetime.datetime(2020, 6, 25, 2, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445269786, 'comment_body': 'Yeah. This sounds like JavaScript. Will change this.', 'comment_created': datetime.datetime(2020, 6, 25, 2, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445275607, 'comment_body': ""> That is not uncommon. It can be intended or a Drummer hick up.\r\n\r\nIn the new encoding scheme (to be developed) using beat markers, we won't store frame positions in the protobuf at all.\r\nInstead, a beat marker will be used which is represented as:\r\n```\r\nBeatMarker {\r\n    required int beatIndex\r\n    optional Bpm bpm\r\n    optional TimeSignature timeSignature\r\n    optional Section section\r\n    optional Phrase phrase\r\n}\r\n\r\nBeats {\r\n    required firstBeatFramePosition\r\n    repeated BeatMarker beatMarkers\r\n}\r\n```\r\n\r\nA beat position is determined by previous beat position and its BPM on the basis of their indices.\r\n\r\nSo if a track is jittery, there is a beat marker at every index, but if the track has uniform bpm, there is only one BeatMarker at the beginning of the track.\r\n\r\nThis scheme is a hybrid between BeatMap and BeatGrid."", 'comment_created': datetime.datetime(2020, 6, 25, 2, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445275993, 'comment_body': '@uklotzde How do I proceed with this?', 'comment_created': datetime.datetime(2020, 6, 25, 2, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445380398, 'comment_body': 'OK, But how are the two examples expressed than? What is the signature Mixxx Displays during the 3.5/4 measure? \r\nHow to visualize x/16 measures. The waveform will be white for beatmarkers and 1/16 markers have no use-case. \r\n ', 'comment_created': datetime.datetime(2020, 6, 25, 8, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 445524845, 'comment_body': 'A 3.5/4 measure could also be expressed as 7/8. Alternatively, we can keep 4 beats in the bar but let the user cut the last beat short without moving the positions of the other beats.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445698967, 'comment_body': ""Yes, it is a 7/8 bar.\r\nWithout additional thinking this will be visualized as double BPM as before.\r\nI don't think we want that. \r\n\r\nI have the feeling we need to go back to the cutting table. What is the use case of the signature info? \r\n\r\nI am afraid we combine here two related things that might be kept separate or at least considered separate. The sparse representation and user information.\r\n\r\n1. The sparse representation of const beatgrid. We can give the position of the first downbeat, the BPM and the number of beats per bar.\r\nIn this case we just need to re-adjust the early down-beat and we are done.\r\n\r\n2. Inform the User about irregular measures. The user should be warned not to use beatmatching across this irregular meassure. How do we want to give that to a user? \r\n\r\n3. Display the main signature in the library.\r\n\r\n4. The hardest nut is the 7/16 Mattle track.\r\nWhat do you suggest with this? I don't want to have 1/16 Beats on the waveform. I don't want to set every beat manually.\r\nI may want to sync the track using the down-beat only. I may want to doo loop tricks. \r\nHow about defining the first as creazy a as it is and allow to repeat it until the next measure with a different signature.\r\n\r\nWhat do you think?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 25, 16, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 445810004, 'comment_body': ""> Without additional thinking this will be visualized as double BPM as before.\r\nI don't think we want that.\r\n\r\nI agree. I am thinking the best solution would be not assuming that every beat in a bar is an equal length of time. If we do not assume that, a 3.5 beat measure could be a 4/4 measure with the last beat shorter than the others."", 'comment_created': datetime.datetime(2020, 6, 25, 20, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445819797, 'comment_body': ""We never assumed that. In fact, time signature and beat track (the more general term for beat map) are quite independent.\r\nA time signature only encodes the information about the downbeats.\r\nBeat length is determined by a preceding beat marker that marks a change of BPM.\r\n\r\nLet's look at a series of Beat Markers.\r\n\r\n```js\r\n[\r\n{\r\n  index: 0\r\n  ts: 4/4\r\n  bpm: 60\r\n},\r\n{\r\n  index: 3\r\n  bpm: 120\r\n},\r\n{\r\n  index: 4\r\n  bpm: 60 // restored for the next bar\r\n},\r\n// The pattern repeats\r\n]\r\n```"", 'comment_created': datetime.datetime(2020, 6, 25, 20, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445838261, 'comment_body': 'Yes, a 4/4 measure in this case does make sense from the sparse representation view however it is just wrong as information for the user. \r\n\r\nDo we have a plan how to the the info to the user? I can think of something like the key label that shows the time signature. In our case it will change from 4/4 to 5/8 or ""?""  if you like. This solves not the odd measure warning use case though.  \r\n\r\nHow about integrate Bars into the protobuf\r\n\r\n```\r\nmessage Bar {\r\n  // The frame position should always be explicitly set\r\n  // otherwise serialization would lead to SIGABRT.\r\n  required double frame_position = 1 [ default = 0 ];\r\n  optional Source source = 3 [ default = ANALYZER ];\r\n  optional string phrase =  6 [ default = ""intro""];  // not empty = phrase start \r\n  optional string signature = 5 [ default = ""4/4""]; // not empty = down beat \r\n  optional int number_of_Beats = 6 [default = 4]; \r\n  repeated beat_frame_position_offset = 7; // can be empty for a const bar.  \r\n}\r\n```\r\n\r\nThis would allow to define one complex bar, call freely give it a signature name and repeat it until a new one is defined. \r\nIt can also be stripped down to be only a beat. This is the case when only frame_position is set. \r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 25, 21, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 445859724, 'comment_body': '1. Rename `Beats` to `BeatsObject`\r\n2. Move all required members into a plain, copyable, moveable C++ object `Beats`\r\n  - m_subVersion\r\n  - m_sampleRate\r\n  - m_duration\r\n  - m_bpm (not ""m_dCachedBpm"", this name is misleading)\r\n  - m_beatList\r\n\r\nStoring a pointer to the `Track` object should not be necessary. Instead the track should actively take control of the `BeatsObject`.\r\n\r\nStoring the plain `Track` pointer is unsafe and may cause crashes. The only valid option would be to store a weak pointer if necessary. But try to avoid those cyclic dependencies in the first place.', 'comment_created': datetime.datetime(2020, 6, 25, 21, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 445888567, 'comment_body': '> Rename Beats to BeatsObject\r\n\r\nAppending ""Object"" to a class name says nothing about what the class does. I am still in favor of ""BeatVector"", but I\'m open to other ideas for the class name.', 'comment_created': datetime.datetime(2020, 6, 25, 23, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445889896, 'comment_body': 'I suggest the suffix ""Object"" to distinguish QObjects from plain C++ classes. It should only serve as a thin wrapper for signal/slot stuff and thread synchronization in this case. All the non-copyable and non-movable members stay there. The naming of the actual class is independent of that, e.g. either `Beats` or `BeatVector`.', 'comment_created': datetime.datetime(2020, 6, 25, 23, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 445890511, 'comment_body': 'We could use `BeatVector` and `BeatVectorObject` for the different abstraction levels, i.e. functional vs. infrastructure.', 'comment_created': datetime.datetime(2020, 6, 25, 23, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 445895976, 'comment_body': ""I'd prefer `BeatVectorWrapper` or `BeatVectorQObject`."", 'comment_created': datetime.datetime(2020, 6, 25, 23, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445896722, 'comment_body': 'There is no need to introduce another confusing and meaningless term, then just ""...QObject"".', 'comment_created': datetime.datetime(2020, 6, 25, 23, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 445956912, 'comment_body': 'I thought we were going to use std::optional instead?', 'comment_created': datetime.datetime(2020, 6, 26, 4, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445957478, 'comment_body': 'It looks like you added this. Did you intend to commit it?', 'comment_created': datetime.datetime(2020, 6, 26, 4, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445959771, 'comment_body': ""That wouldn't play out well with these C style functions like `findPrevNextBeat` where pointers to `previousBeat` and `nextBeat` are passed to them. std::optional was only suited for functions with `FramePos` return type."", 'comment_created': datetime.datetime(2020, 6, 26, 4, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445960028, 'comment_body': 'My bad. Removed it in a later commit.', 'comment_created': datetime.datetime(2020, 6, 26, 4, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 447391569, 'comment_body': ""```suggestion\r\n        mixxx::FramePos cue(getCuePoint().getPosition() / mixxx::kEngineChannelCount);\r\n```\r\nLet's minimize use of `double` variables."", 'comment_created': datetime.datetime(2020, 6, 30, 3, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 447396514, 'comment_body': ""This is exactly the same code as in QuantizeControl. Let's move it to a common file with a big warning that it should not be used for new code, only adapting legacy code to use frames."", 'comment_created': datetime.datetime(2020, 6, 30, 4, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 447397994, 'comment_body': 'Where does `60` come from? Seconds per minute?', 'comment_created': datetime.datetime(2020, 6, 30, 4, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 447401489, 'comment_body': '```suggestion\r\n        // Reduce the precision of the doubles because an operation on Beats::getBpm\r\n        // is dynamically calculated instead of using a using precise value, thus there is\r\n        // a slight double precision error on comparison operations.\r\n```\r\nDon\'t use relative time terms like ""recently"" in code comments. If that comment is still there in 10 years, it would be confusing.', 'comment_created': datetime.datetime(2020, 6, 30, 4, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 448372534, 'comment_body': ""I ran into a few problems while trying to remove the track member pointer from the Beats class.\r\n\r\nThe track pointer is currently used to dynamically find the track duration (since it can be updated later, which is a common scenario in tests)\r\n\r\nResolution:\r\n1. Use TrackWeakPointer in Beats\r\nThis is semantically not wrong and could possibly work but in `Track::setBpm` a new Beats object is created and the constructor needs a shared pointer to Track itself. So weak pointer can't be used. An outer agent would need to setup the ownership between track and beats which is not doable.\r\n\r\n2. Entirely remove track member pointer.\r\nThis would need the creation of new signals in the track class and connections would need to be established on construction to update data in Beats that can change with track.\r\n\r\n3. Keep the current configuration\r\nWe are storing a plain pointer to track in Beats class. This means there is no ownership per se. So we don't really run into a cyclic dependency here. Track has active control of Beats and in addition to that, Beats stores a plain pointer to the track."", 'comment_created': datetime.datetime(2020, 7, 1, 13, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 448731146, 'comment_body': '```suggestion\r\n// The legacy use of samples for positions assumed interleaved stereo buffers.\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 3, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 448732988, 'comment_body': ""I am leaning towards option 2, but I'd like to hear @uklotzde's opinion."", 'comment_created': datetime.datetime(2020, 7, 2, 3, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 448762863, 'comment_body': 'Unfortunately the protobuf proposed in this PR does not work for me. There are too many degrees of freedom and it is unhandy for a smooth manual editing workflow.\r\n\r\nThis is the wiki page that summarizes the state of discussion:\r\nhttps://github.com/mixxxdj/mixxx/wiki/Beat-and-Bar-Edit-Workflow\r\n\r\nI have suggested to use this buffer:\r\n\r\n```\r\n[\r\n  frame_position = 0;\r\n  source = USER;\r\n  signature_nominator = 7; \r\n  signature_denominator = 16;  \r\n  quarter_beats[1] = 4; // for 4/16\r\n]  \r\n[\r\n  frame_position = 80000;\r\n  source = USER;\r\n  signature_nominator = -1; // REPEAT\r\n]  \r\n[\r\n  frame_position = 375000;\r\n  source = USER;\r\n  signature_nominator = -2; // END\r\n]    \r\n```\r\nWill it work for you? \r\nWhat do we need to change.\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 5, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 448766156, 'comment_body': 'I strongly suggest we avoid required fields -- they are broadly considered an anti-pattern in proto2 and are removed in proto3.', 'comment_created': datetime.datetime(2020, 7, 2, 6, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rryan', 'type': 'User'}, {'comment_id': 448767129, 'comment_body': 'Changing the type from int32 to double will be wire-format incompatible with previous Mixxx libraries. Is this proto going to be used to parse Beat protos produced by previous versions of Mixxx?', 'comment_created': datetime.datetime(2020, 7, 2, 6, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rryan', 'type': 'User'}, {'comment_id': 449081994, 'comment_body': 'In the long term, I am planning to use Beat Indices to reference beats rather than frame positions. No change needed for this PR.', 'comment_created': datetime.datetime(2020, 7, 2, 15, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 449100729, 'comment_body': ""I have another suggestion. Can we defer beatgrid editing features to another PR and strictly focus on the removal of BeatMap and BeatGrid in this PR?\r\nWe won't have any beatgrid editing UI in this PR anyways since it is being developed in #2844.\r\nSo I am only majorly focusing on correctly refactoring the current code and make everything work like it did with BeatMap and BeatGrid."", 'comment_created': datetime.datetime(2020, 7, 2, 15, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 449124542, 'comment_body': 'Yes. the format will be broken when read from the serialized representation. It will only be updated when new data is generated by the analyzer thread.', 'comment_created': datetime.datetime(2020, 7, 2, 16, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 449279943, 'comment_body': 'This PR will use the new protobuffer, right? I think it is a good idea to switch to one that is a base for new features and not switch it again in a follow up PR.  We must not merge a half baked solution especially if other PRs will rely on the new format. \r\n\r\nPlease tell us more about your beat indices idea. It sounds interesting. \r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 449654106, 'comment_body': ""Hm, what's the plan for migrating user data from previous versions of Mixxx?"", 'comment_created': datetime.datetime(2020, 7, 3, 16, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rryan', 'type': 'User'}, {'comment_id': 449654801, 'comment_body': 'A part of it has been implemented in #2844. We are using Beat Index not Frame Positions to refer to beats while rendering and setting a particular beat as a downbeat via the context menu.\r\nStoring the same can be possible when we are storing the BPM and not frame position.\r\nThis is like a beat grid which stores the first position only and the rest can be calculated with BPM.\r\nIn a track with multiple/variable BPM, just store the first beat position and a series of beat markers with [ beat index + bpm ] to find other beats. The extreme case would be when all beats are jittery and we store a beat marker for every beat.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 449918766, 'comment_body': ""Ok, I get the issue with option 1 with transforming `this` into a smart pointer. Ruled out.\r\n\r\nLet's stick to option 3. Extending `Track` could prove difficult, because it is a very central place with lots of dependencies. Don't open the Pandora's box now ;) Later we can decide about how to move on. This does not only affect the beat grid class.\r\n\r\nThe `Track*` should only be stored in the upper level `QObject` derived class. If you need the duration or sample rate in the plain C++ class either store them as members or pass them as parameters only when needed. If they are only needed for certain operations pass them as parameters. They don't really belong to the basic concept of a *beat grid* and maintaining less state avoids potential inconsistencies."", 'comment_created': datetime.datetime(2020, 7, 5, 21, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 450140881, 'comment_body': 'Did we make progress here? I have strong concerns that this proposed proto buff will not last for long. \r\n\r\nI am not insisting to switch to the one I have proposed, but at least we should describe a our workflow , check how we will use it and verify that it fits. \r\n\r\nThis is IMMO a strong requirement before this is merged and we start altering users data.  ', 'comment_created': datetime.datetime(2020, 7, 6, 10, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 450148574, 'comment_body': 'So the user will give the tempo as BPM? \r\n\r\nI think we have two use cases, for electronic tracks with integer BPMs this might work. \r\nUnfortunately not for live tracks. \r\n\r\nI am also in doubt that he can do this precise enough. He will likely do decimal rounding which leads to a increasing offset. \r\n\r\nI think the user will point a beat. \r\n\r\nDo you think the idea with the snap grid https://github.com/mixxxdj/mixxx/pull/2917 will work? In this case it is precise by 11 ms, the detector step width. \r\n@crisclacerda smoothing code can than also used to the user edited beats to partition the grid into constant regions. \r\n\r\nI think it is reasonable have frames in the proto buffer as well. Because the engine code works with frames and that releases us from calculating the frames every time the beat-grid is loaded into the memory. \r\n\r\n\r\n\r\n\r\n ', 'comment_created': datetime.datetime(2020, 7, 6, 11, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 450932993, 'comment_body': ""I thought the intention was to make this usable in realtime code without the QObject, so shouldn't these be public? @daschuer could you take a look?"", 'comment_created': datetime.datetime(2020, 7, 7, 15, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 451258092, 'comment_body': 'Can this return a negative value?', 'comment_created': datetime.datetime(2020, 7, 8, 3, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 451258353, 'comment_body': 'I think it could if `lastCountedBeat == kInvalidFramePos` on the first iteration. The loop would break before `iBeatsCounter++`.', 'comment_created': datetime.datetime(2020, 7, 8, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 451258812, 'comment_body': 'We should still have versions. Better to add them now and not need them later than wish we had added them in the future.', 'comment_created': datetime.datetime(2020, 7, 8, 3, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 451648076, 'comment_body': ""There is nothing against using a QObject in real time code.\r\nYou just can't receive signals and you should not copy it around.\r\nI am in doubt that there is a need for copying it because.\r\n"", 'comment_created': datetime.datetime(2020, 7, 8, 15, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 454495214, 'comment_body': '```suggestion\r\n// These are legacy data structures for upgrading from Mixxx < 2.4\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 454549435, 'comment_body': '```suggestion\r\n        qDebug() << ""Successfully deserialized Beats from legacy data"" << mixxx::BeatsInternal::BEAT_GRID_2_VERSION;\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 18, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 454549864, 'comment_body': '```suggestion\r\n        qDebug() << ""Successfully deserialized Beats from legacy data in format"" << mixxx::BeatsInternal::BEAT_MAP_VERSION;\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 18, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 454550581, 'comment_body': '```suggestion\r\n                    << ""ERROR: Could not parse legacy"" << mixxx::BeatsInternal::BEAT_GRID_2_VERSION << ""from QByteArray of size""\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 18, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 454551432, 'comment_body': '```suggestion\r\n            qDebug() << ""ERROR: Could not parse legacy"" << mixxx::BeatsInternal::BEAT_MAP_VERSION << ""from QByteArray of size""\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 18, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455408439, 'comment_body': 'Can we have a section type too?', 'comment_created': datetime.datetime(2020, 7, 15, 22, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 455414293, 'comment_body': 'We should only define the types which we actually use now. We can add more at any time when needed without breaking backwards compatibility.\r\n\r\nThe other way round is not possible, i.e. you cannot delete types from this enum once you released them without breaking backwards compatibility.', 'comment_created': datetime.datetime(2020, 7, 15, 23, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 455441798, 'comment_body': 'How about we only add BEAT and BAR for now? Then @crisclacerda can modify #2877 to output the detected downbeats to this new protobuf format. When @crisclacerda implements phrase and section detection we can add those, or alternatively if @hacksdump implements the UI for editing phrases and sections before the analysis is implemented he could add those to the protobuf at that time.', 'comment_created': datetime.datetime(2020, 7, 16, 0, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455532584, 'comment_body': ""Exactly. If we don't use PHRASE yet (i.e. for this PR), don't add it."", 'comment_created': datetime.datetime(2020, 7, 16, 6, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 455843022, 'comment_body': '```suggestion\r\n  INTRO = 0;\r\n  OUTRO = 1;\r\n  OTHER = 2;\r\n```\r\n\r\nThe user can put the intro or outro somewhere that is not the very beginning or end of the track, so ""inner"" is somewhat misleading.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455844912, 'comment_body': 'I think sections should be able to have a color. What type can we use to store an RGB color in a protobuf?', 'comment_created': datetime.datetime(2020, 7, 16, 14, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455846498, 'comment_body': 'We can define a new message color\r\n```\r\nint32 red\r\nint32 green\r\nint32 blue\r\ndouble alpha\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 14, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 455847429, 'comment_body': 'I do not think we need an alpha channel for section colors. We explicitly chose to not have an alpha channel for cue and track colors.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455849824, 'comment_body': ""Oh true. I remember that :/\r\nWe'll only use solid colors on the waveform."", 'comment_created': datetime.datetime(2020, 7, 16, 14, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 455849884, 'comment_body': 'Did clang-format do this? We put each item of the initializer list on separate lines.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455851560, 'comment_body': ""I don't think I have ever seen a different constructor of the same class called in the initializer list. Is this necessary?"", 'comment_created': datetime.datetime(2020, 7, 16, 14, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455851909, 'comment_body': 'Probably. I did not touch this constructor.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 455852493, 'comment_body': '```suggestion\r\n        qDebug() << ""ERROR: Could not parse Beats from QByteArray of size""\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 14, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455853193, 'comment_body': '```suggestion\r\n    VERIFY_OR_DEBUG_ASSERT(beatsProto.time_signature_markers_size() > 0) {\r\n        // create one 4/4 time signature marker\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 14, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455856038, 'comment_body': ""We also need the downbeats, phrases, sections, and time signatures from the analyzer. For now, add these arguments to the constructor signature and add these to this class' data by assuming defaults."", 'comment_created': datetime.datetime(2020, 7, 16, 15, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455859673, 'comment_body': '```suggestion\r\n    for (const auto& beat : beats) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 15, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455860927, 'comment_body': '```suggestion\r\n        VERIFY_OR_DEBUG_ASSERT(beat >= previousBeatPos || beat > FramePos(0)) {\r\n            qDebug() << ""Beats not in increasing order or negative, discarding beat"" << beat;\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 15, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455862219, 'comment_body': '```suggestion\r\n    for (const auto& beat : m_beats) {\r\n        beatsProto.add_beat()->CopyFrom(beat);\r\n    }\r\n```\r\n\r\n`m_` prefix is for member variables, not local variables.', 'comment_created': datetime.datetime(2020, 7, 16, 15, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455862863, 'comment_body': '```suggestion\r\n    for (const auto& timeSignatureMarker : m_timeSignatureMarkers) {\r\n        beatsProto.add_time_signature_markers()->CopyFrom(\r\n                timeSignatureMarker);\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 15, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455864276, 'comment_body': 'What is the meaning of an invalid time signature? A time signature with 0 as one of the numbers?', 'comment_created': datetime.datetime(2020, 7, 16, 15, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455864560, 'comment_body': '```suggestion\r\n    if (beatIndex <= 0) {\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 7, 16, 15, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455976257, 'comment_body': '```suggestion\r\ninline bool TimeSignatureMarkerEarlier(\r\n```\r\nThis clarifies that it is the positions of the markers that is being compared, not what they mark.', 'comment_created': datetime.datetime(2020, 7, 16, 18, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455983473, 'comment_body': 'Factor this out to a function to get the time signature for any position.', 'comment_created': datetime.datetime(2020, 7, 16, 18, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}]","[{'commit_sha': '148e216bc7a468d2125f2a579b87116737623d8e', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a90b4379ee583f2edccdba7e77c5878d12239b', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8fbe779ddbe77f6b8135ffb00b68b416968249', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee469541daf5b4fad16042f8e549cc23b308e6f', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05a4720ca95db6920064f561a9b47cfc6de73214', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d38e75b3e9a34d47f6df273105e163d0a554819', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1428f0a3dccb612591f510f8718121d44cabca6', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590be5d1ec10900bba5e7f311f76d6369f122b66', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2c9ecac71ec36681fad831a5c17e16f4ecfe640', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0084ddc5262147dfdf2264646b7c9c5bfacc57dc', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b8ae45ee3b29faaab54cb7d4208026c439118a', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa68e2daefd619e9334fe71ec22f7c9cd3001166', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87cc60783a293c3ecaf35c5c3b3d50040d2ca636', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01583e83b4ad7763b011d60e30451acdb0f3c463', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b533ac4e0e9175ebb9b857110edc11cf65beda53', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e030aeeda8e8b1b2b6eaade2398f5ceb8f64ca', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d652ca1d0c6d0e2715cd46cde409cd997d62996', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91c993031bc2673b123c45402f734e22e4686776', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0f083f79966eefc90083d83b139a5ff51b3796', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b358fc8a29be6a36be8289771c7809c9f88510', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97cd1e8859c54df7d5e4b4c676e924d82e59def', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48ec71b4b31cfe33e8ff7625cbd29188629f9b38', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b4a0d84d0dbbdc27b5e8d2bd82009d92d55516d', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '769e9223a9b8953cbcfc17ef3db4ffbeff146c3e', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3647af9692a63c9e31f652ccb28dcbb2c0ad7e44', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcdc11619240e48d26b1c15c7721d9ac74aa0072', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c54b7c1f146061560915667185a349a2521d964', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dccf044b06bc00477c8ba27ee194d57c468f5b93', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331ef5a4e795fbb7a46d514c76165950a8697d40', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a7baadad82ec9d1d63c1f497f6a1a41ffa952f0', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04d89eabe97548400d3255f8f695d5f82e8c6e3f', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800adf685f793e734a5375fba56a060d5679f9a2', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7cf0d05d49ab5e981c916255de3e7bdfa8e3764', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865caf5213558cd26e4209919af38dc5d8c0d592', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730abaaa892d4e74c3a8e553d5eb94107e63df23', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f857a61cb448b3b236d0674c71d3ddda93e4e7b', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f1039df4573934d66cca2290ddf70f34b53caad', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3ecb4e270995e5fa3cdbef08748e1a9273f057a', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1485e8af3ac49d79c3b0b5a6804dee7ff271f4c0', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58dbf80269a1da2ca5a91b7da7fedfd24b18a7e8', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e3d09d8a5ed17955e55063c07c3f62dd90ddf9', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c628235873bf1fd4d77c2a73ecee96066bf38cf1', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b90cc323fd826c7cdd1ee9d065010ae3851bc56', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35129477fbcdcf48150fbe445d58ecadc4dd0c22', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20cd34cea7aafa3fa7f3813b25f60214dd096aee', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd663f04cbbbab03b511d4bf483a0d2f438b2ec64', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbdba123139b7b1f300511d684e2b3c0a093c3fc', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d6d19e604fec3ca565e0d792c2c966fdd107f6', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f81f1fd274b2ca1e9d626d5abb06076895772d3d', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7c8f7bef9e43118f431f53874873936c3221f0e', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dde8b8fd6f3c99b5049aa3f3d17890d6eae9967d', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c85f5cd7c5eac919e2ce071bb39efe42d52a8b', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10715cde3114cf014962cf8156918af63d825dc9', 'committer_username': 'uklotzde', 'committer_name': 'Uwe Klotz', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 25, 21, 41, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ef78f3cbfecbcd0f1f3cf7d2db660e1f9bbca77', 'committer_username': 'uklotzde', 'committer_name': 'Uwe Klotz', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 25, 21, 41, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03afb56a8a44e145e4f77f71cf61d390a09ff78c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f432e595d11ce75ad00297ebc5a3321df86ca681', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc057d4d5ccff21740ca979edd6b720665fc4a9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fdd4292d0999cc68dc2efae01dfd7e6622a619', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8009b69fc92c17ab4ba9aac860da73b203ad81', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a4bffb5385d8b4201fabadb51e98679a787ca9e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e905109b7a7e57edcbc2e067fd2142ceda3df1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e6625ae6fccf3bd0a3d2e35e11d156c37d81daa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec62228247421088b1334ba0451508102c665db8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91eb3d8c31b59dda40265c4fccc77f2f6ef5cf5f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9fd3333f6dc0be77cac727ca26d71ff469124b4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b962d7af7eed210d79d3427f31e42945ed99ec0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480f7f7ba44ea012efea27dcf946a6c8b71a3afd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65a0d84f3bc53fe1f486c2c6fa6c63c9956c5cd5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a49ebe0f736490f738fccb79657332399c246531', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4664ec7770be528d8f2a447f5fc81dde8819c4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b6d0122300f21acaa7826b34f58ef2d99ac27a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919e1b9cff40c503a1719457f5545393e32d427c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d689cf3f318e9f92cc2cc8ec0a6d3d30bf9e94', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe7fd32e1956970cc5dd5d6716cd5f1e3b3a85bb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8957a08f2170bbfa9e9d2f6ffb9e08fa66e40126', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6b038394a6e1ca3fa97d4a3d26015e8e0bed52e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b156cd5ecde3399911bbfbcab2c39df871275e2a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67686f27b15f2d814664b94130e9cc81b5f6235', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eab8bb043f1c196bed9608920bb78a6465fbea06', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43acd8fe2fb7c67458a455407b897025347eaeb1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df01ccedefb4abc2b3bfdb0abe0b149e5a02b7bd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff991789d01533093b1f173df4e2629ec6b973e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '754ecfed2745a1cdeaa0455c69c56eec50279c18', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b515f21bb97d8884bc0647b37cfff9778542da0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1dc7785d0c57388765d08c94bd82e941a190ea0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e32a19c54e7d87c8e3216c3ada29a27442cfa103', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454ba2c9a68e862f9192b07a8d0e6ce0b4bbfba1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eb655ce1965713a9c178c2129c86126cd3725e6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c981fbe5e85ad16b26ef4ad247a86fc40be80e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4329021a75151a621f9457454f881c5a410037b9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1356ccbda486686bf18268f80f3057e5929ba0e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e04891a88d71ab4c6e76263f637792edac6a52c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43e16c1c761d75ed5899be772bb527e8d5af183f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f46860fbfeeeea07d19f20a2d0e1e44c1bba8bee', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4447a10bc4d8dea28386834b1754e3f4d8297c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33b6a4f950d81a71bcc62b0fd640b393a6a81a49', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ecd2aebbe4d83648f8b9fde7729c063db7c789', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0135760abfb93f2f90d345023274b60a7daa22b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0576be85ae5fe4c130b387ba3588e29966c9aec1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc7977ca87f7d9cf7c1cce9a83ecb31f06410b2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2553640ff85ad05352d72afe5ae104ccd8ca1df', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397b33832af36960f09d4fc0860e034e4e5d0267', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0ff6d934f96a8fdd143b6085098b4680afe18c2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf75244ae42996cabd94b16d0d765dfa82646a20', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '074a921b125944cee26f71996d10e2bfcac6c513', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136060b1f719d83d4e580d3b627b757bef0a51eb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86b834aa46cf6f87bb3ae636b2f7f45382bf373b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab96a2b1381971e0c93f9931315e9ac7fbcbef1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be6891238128ecb34b86a5dc298d049646f6b87d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9707f8d8ad618a32554b450eb284fd6ab7d0d1e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bf4c9f77952aaad70c34202f36699146cf9fec', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34c35d7d414cd47d5e40254b01f9b41c063c5686', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe266d04b3a639a47fa6c19f1f1742ef34f28b13', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8f2f2cd151f3d3e57fd5782f566a0fc41e351b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0534db330906f04a19591ac16435d00997dbc63d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '915a671077389461405a7fef8b317dc8337a8eaa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4425ac07ebd5cf0d3cdcea387bfa38c6be1eff', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '540c7497a0adc82ee0f5afb6ea4442795d47d4ae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c00da8043ff08500fcefd07e418754ac9385e16e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f0ce46759e7765df451249669ee9680a9d23b60', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa86f2a29e77e1b503e013d7e7daaf79629efe94', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38555e09322d0e8c4bbbc90bf7a8623e85b9a2de', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f89649c9b212efa1bd61d44ea2cc368a2828cc6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68a1949bb3294b957eae335f680a5dc3bfc9d22b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c19d2f2cd586839fd0d20f53f2f3cccf0eab64b9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d7784bf89117b026f838fc77bc52145e98f241', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fff80c0f444ba59283352aee87b93cf3dfa20e4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f283485672df482b64acde86026ca82fb69829c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8506d0bcb777808f56c748fe055af6e4e444872f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71bf183d44bf4f44dfd78e465761aa9be93892d6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3933e7645d33e4ff110939588cb5346a2f39c2be', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e75c9d11a6e53e53a7b869dfcd214df8b4e658', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '425c7fdf0d0f6839c6b54ad180250924493d2325', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca2be4c87e49e8644ea1a08431340c87f5ee19b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0710437cf38e08329b8771f3ff3beaf51c41ccb7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006cd744af4262611230701d19307e98611ec422', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd80c282e211bd668405e19aa5b68159738ec640', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcd32c120cc76411416ec207a27161f651eacc72', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a7edd78d9b367600c42e893c4692efdccca194', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6268b30da41d7eab9d82eca2aa39a27c1c05bc26', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2a9bcfd3b0caa1bab07e1b8f5744046be0f9fde', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '792c682d28d34907dfe183cbc9c88634a480ba40', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '845265788dafc6ae512aa896b28f862fb1d1a3ca', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8134eaefac6ea6b75332631012fff96db1fa3efa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a60beeeba62c405f391eb81cb5cc2986752446ed', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a08d058e766aceb536debc15e7086eeea7ae598', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13538d3045aa154b288b82e2991962f107f70d32', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a5fba3b48c1e33b292f7f31551106736590c46f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '274c9fa4bc5e0f4bc6d77f0cd28a1969d0bc913e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49686eb44f1e1e8fd896e71b3762bce671e851da', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3b6c9816697b8a760d76a16b836d4112d3dee4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b7a5a95f6e7b4cce9774db8ea6459eeb86711f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f5b2a8cd6392cd726c19ace50ca9efe573aeaf', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a52caba4c649bc134330645282096bcdf9a54e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf9694bd326949da9097c5107832820a2e3b87c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73029220fa510c62b98e0f90698e00148421cf83', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77c8d82fdd7dc0ea6ebe1935281c5f6dfc18bd5a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e2565a910ce7e823650311efee013a519bdd455', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc0d8ef2fa383df405a6c46e287aed8f495e7113', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de26dd4246944d9c5969d88258f3922fd6b739e7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76bfc3987679b27e7ffef232658147d05353d4c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1967c0fc71cd7cd3e7dead4648a433f50dd56fa5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}]",Harshit Maurya,30816844,,User,,41,,123,68
427971096,[WIP] Bars and downbeats for common time signature.,"Display and edit downbeats on the scrolling waveform.

Task List:

- [x] Display downbeats on the waveform.

- [x] Edit downbeat with a context menu.

This PR will be covering a part of the first phase tasks primarily as described in the planning page: [https://www.mixxx.org/wiki/doku.php/measures_downbeats_bars_and_phrases](https://www.mixxx.org/wiki/doku.php/measures_downbeats_bars_and_phrases)",False,2844,https://api.github.com/repos/mixxxdj/mixxx/pulls/2844,https://github.com/mixxxdj/mixxx/pull/2844,closed,739,189,28,45,11,68,0,0,[],2020-06-04 17:02:48+00:00,2020-07-23 16:09:41+00:00,4230413.0,"48 days, 23:06:53","[{'comment_id': 437136105, 'comment_body': 'Until #2777 is merged, also add new files to build/depends.py', 'comment_created': datetime.datetime(2020, 6, 9, 4, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 437285294, 'comment_body': '= default', 'comment_created': datetime.datetime(2020, 6, 9, 9, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437287239, 'comment_body': 'I suggest to use composition instead of  inheritance. This requires to repeat some setters/getters but allows us to use the Mixxx coding style instead relying on what Protobuf generates', 'comment_created': datetime.datetime(2020, 6, 9, 9, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437287908, 'comment_body': 'Instead of re-initializing we should create a new `Beat` instance. This method should better be merged into the constructor.', 'comment_created': datetime.datetime(2020, 6, 9, 9, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437288594, 'comment_body': 'Use Mixxx coding style after replacing inheritance with composition', 'comment_created': datetime.datetime(2020, 6, 9, 9, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437288700, 'comment_body': 'All getters shall be const', 'comment_created': datetime.datetime(2020, 6, 9, 9, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437288933, 'comment_body': 'Symmetric operators should be implemented as free functions instead of member functions', 'comment_created': datetime.datetime(2020, 6, 9, 9, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437289543, 'comment_body': 'Do we need this? Why not use `Beat` instances as simple values?', 'comment_created': datetime.datetime(2020, 6, 9, 9, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437290163, 'comment_body': 'Return a value instead of a shared pointer. Beats should be cheap to copy.', 'comment_created': datetime.datetime(2020, 6, 9, 9, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437297478, 'comment_body': 'Future (after #2512 has been merged): If BeatGrid implements a move constructor there is no need to return a new instance by pointer.\r\n\r\nIf possible we should use values instead of shared/unique pointers, especially for small, lightweight objects.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437298220, 'comment_body': 'In which unit is `offset` measured? Please always add Frames/Samples/Millis/Beats as a suffix.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437298698, 'comment_body': 'As already mentioned we should avoid shared pointers if possible', 'comment_created': datetime.datetime(2020, 6, 9, 10, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437299112, 'comment_body': '`virtual` is redundant if `override` is specified', 'comment_created': datetime.datetime(2020, 6, 9, 10, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437299234, 'comment_body': 'Return by value (move)', 'comment_created': datetime.datetime(2020, 6, 9, 10, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437299810, 'comment_body': 'Define a `constexpr kDefaultBeatsPerMeasure` instead of using 4 literally', 'comment_created': datetime.datetime(2020, 6, 9, 10, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437301073, 'comment_body': 'Both literals 3 and 4 need to be replaced in terms of kDefaultBeatsPerMeasure. Please check all the code for these literals and implicit assumptions.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437301755, 'comment_body': 'No pointers, just a list of values.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437301942, 'comment_body': 'Values, not pointers', 'comment_created': datetime.datetime(2020, 6, 9, 10, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437302362, 'comment_body': 'Pass/move by value, no pointer', 'comment_created': datetime.datetime(2020, 6, 9, 10, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437302598, 'comment_body': 'Use ""util/math.h""', 'comment_created': datetime.datetime(2020, 6, 9, 10, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437302904, 'comment_body': 'This is not a system include, i.e. ""waveform/renderers/waveformbeat.h""', 'comment_created': datetime.datetime(2020, 6, 9, 10, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437303198, 'comment_body': 'Define a constexpr in an anonymous namespace at the top of the file', 'comment_created': datetime.datetime(2020, 6, 9, 10, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437303722, 'comment_body': 'Move calculation into an inline function in the anonymous namespace', 'comment_created': datetime.datetime(2020, 6, 9, 10, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437303861, 'comment_body': '""proto/beats.pb.h""', 'comment_created': datetime.datetime(2020, 6, 9, 10, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437304168, 'comment_body': 'enum class Direction : int', 'comment_created': datetime.datetime(2020, 6, 9, 10, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437305299, 'comment_body': 'Do you really need to modify the type or orientation after construction? Try to make as many members immutable as possible. Dumb setters are considered an anti-pattern.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437305769, 'comment_body': 'Either declare a virtual destructor or declare this class as `final`. The latter may apply here.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437308146, 'comment_body': '= default (if possible header, otherwise in .cpp file)', 'comment_created': datetime.datetime(2020, 6, 9, 10, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437308373, 'comment_body': '- Initialize in initializer list\r\n- Use parented_ptr/make_parented', 'comment_created': datetime.datetime(2020, 6, 9, 10, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437308516, 'comment_body': 'Redundant virtual keyword', 'comment_created': datetime.datetime(2020, 6, 9, 10, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437308741, 'comment_body': 'Add separating blank line', 'comment_created': datetime.datetime(2020, 6, 9, 10, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437309323, 'comment_body': 'This if/else is redundant', 'comment_created': datetime.datetime(2020, 6, 9, 10, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437309734, 'comment_body': 'Replace literal with the suggested kDefaultBeatsPerMeasure', 'comment_created': datetime.datetime(2020, 6, 9, 10, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 437727026, 'comment_body': 'This is quadruple scaling, which means we insert three beats between two adjacent beats. It does not depend on Time Signature. However, downbeat adjustment will make use of `kDefaultBeatsPerMeasure` while scaling.', 'comment_created': datetime.datetime(2020, 6, 9, 21, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438280607, 'comment_body': 'This is a solution for the current beats architecture. Later, downbeats will be decided by beat markers.', 'comment_created': datetime.datetime(2020, 6, 10, 17, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438449605, 'comment_body': 'Read the value of the setting from the config file and select the corresponding combobox item here', 'comment_created': datetime.datetime(2020, 6, 10, 22, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438450203, 'comment_body': 'Create an enum class for these index values', 'comment_created': datetime.datetime(2020, 6, 10, 22, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438450480, 'comment_body': 'Oh I see the combobox item is set in slotUpdate. However, the config value is not read on startup and  `WaveformWidgetFactory::instance()->setBeatGridMode` is not called until changed settings are applied.', 'comment_created': datetime.datetime(2020, 6, 10, 22, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438470384, 'comment_body': 'What are the units of this position? Audio frames? Pixels?', 'comment_created': datetime.datetime(2020, 6, 10, 23, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438470772, 'comment_body': 'Use the same enum class here as will be used in DlgPrefWaveform', 'comment_created': datetime.datetime(2020, 6, 11, 0, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438471068, 'comment_body': ""It looks like this doesn't depend on any class members, so it can be moved to the anonymous namespace instead of being a private class member."", 'comment_created': datetime.datetime(2020, 6, 11, 0, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438471430, 'comment_body': 'I think you can just call slotUpdate in the constructor. ', 'comment_created': datetime.datetime(2020, 6, 11, 0, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 438490379, 'comment_body': 'Can we come up with a better description than ""x""? What is ""x""? A position within the widget? What are the units? Pixels?', 'comment_created': datetime.datetime(2020, 6, 11, 1, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438490810, 'comment_body': ""How about moving this out of the if/else block and always explicitly setting the orientation from the waveform's orientation? That way it does not rely on an implicit default value."", 'comment_created': datetime.datetime(2020, 6, 11, 1, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438491535, 'comment_body': 'Yes I think std::optional would be appropriate here.', 'comment_created': datetime.datetime(2020, 6, 11, 1, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438492923, 'comment_body': ""What is this magic number 5? I presume it's a padding width on either side of the line to make a wider area to right click? Please move it to a named constant in an anonymous namespace."", 'comment_created': datetime.datetime(2020, 6, 11, 1, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438493435, 'comment_body': 'I was confused what this ""enabled"" state is for in the new Beat class. Is this all it is used for? If so, please get rid of it and use std::optional here.', 'comment_created': datetime.datetime(2020, 6, 11, 1, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438493899, 'comment_body': ""Is this check necessary? Shouldn't the loop below go through 0 iterations if m_waveformWidgetHolders is empty?"", 'comment_created': datetime.datetime(2020, 6, 11, 1, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438496896, 'comment_body': 'Hmm... how should we handle this situation?\r\n![two-menus](https://user-images.githubusercontent.com/9455094/84335650-f12ebd80-ab5a-11ea-854e-76e0935634b0.png)\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 11, 1, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438497502, 'comment_body': 'This feels hacky to do this in WWaveformViewer. I propose moving this into WBeatMenu and setting the active Beat from WWaveformViewer, similar to how we set the active Cue for WCueMenuPopup.', 'comment_created': datetime.datetime(2020, 6, 11, 1, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438503216, 'comment_body': ""I don't think WBeatMenu should be accessing configuration values... how about updating the beatgrid mode for WBeatMenu from WWaveformViewer::setBeatGridMode?"", 'comment_created': datetime.datetime(2020, 6, 11, 2, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438503998, 'comment_body': 'I have two ideas how this could be handled:\r\n1. Show WBeatMenu and add QAction ""Edit cue"" that shows WCueMenuPopup.\r\n2. Add actions to WCueMenuPopup for each of WBeatMenu\'s actions.\r\n\r\nI\'m leaning towards 1. What do others think? @Holzhaus, @ronso0?', 'comment_created': datetime.datetime(2020, 6, 11, 2, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438512047, 'comment_body': ""That certainly should be a constant\r\nBut I would like to point out a design inconsistency that has been introduced. If you look at the function just above this, it happens to be `getCueMarkAtPoint` which returns a `WaveformMarkPointer`, which is the graphic object for the mark.\r\nBut the return type of current function is not WaveformBeat / WaveformBeatPointer but the Beat object itself.\r\nThis means I can't currently use the `contains` method used with WaveformMarkPointer to check if point is in vicinity.\r\nTo actually start using WaveformBeat insead of Beat, I would need to store the beat object inside the WaveformBeat class.\r\n\r\nA positive side for making this consistent would be:\r\nWe can create an interface like `WaveformMarkRightClickable` (for the lack of a good name) which has a method `contains` and `WaveformMark` and `WaveformBeat` both have to implement that interface. I mean pattern comes from Java, I'd like to hear your suggestions on how to do it in C++."", 'comment_created': datetime.datetime(2020, 6, 11, 2, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438512439, 'comment_body': 'The `enabled` state is not introduced by the new Beat class, it was existing in the Beat protobuf. Considering this check, I will wrap the return type with std::optional.', 'comment_created': datetime.datetime(2020, 6, 11, 2, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438512817, 'comment_body': ""I kinda had 1 in mind earlier since I was aware of this situation. I was just thinking it wouldn't be appropriate to move the cue menu as an action in BeatMenu since a cue can also be set at a position where there is no beat (if quantization is disabled)."", 'comment_created': datetime.datetime(2020, 6, 11, 2, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438514345, 'comment_body': 'Right, this would only be for the special case where a cue and beat are at the same point (which is a common scenario with quantize). For cues that are not at beats, simply show WCueMenuPopup by itself like is done currently.', 'comment_created': datetime.datetime(2020, 6, 11, 2, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438514935, 'comment_body': 'That seems like a good idea. Then we could have less special cases to handle in WWaveformWidgetRenderer.', 'comment_created': datetime.datetime(2020, 6, 11, 2, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438515114, 'comment_body': 'I have no idea what it means for a beat to be ""enabled""... was this previously used in the code anywhere? If not, let\'s remove it.', 'comment_created': datetime.datetime(2020, 6, 11, 2, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438728024, 'comment_body': 'The call already exists. And I checked boot configuration, everything seems to load in place.\r\n\r\n`mixxx.cpp` Line 448\r\n```cpp\r\n    WaveformWidgetFactory::instance()->setConfig(pConfig);\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 11, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 438870797, 'comment_body': 'I tested again, and yes the combobox in DlgPrefWaveform is loaded correctly. However, I cannot get downbeats to show on the waveform until I open the preferences and change the combobox value and that has to be repeated every time I start Mixxx.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 438878915, 'comment_body': '1. requires an additional click, but I think it makes sense here.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 439127370, 'comment_body': 'These heavily nested boolean operations are hard to read. Can you check the orientation in an if/else block?', 'comment_created': datetime.datetime(2020, 6, 11, 23, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439130322, 'comment_body': ""Use qRound on this line, then we don't need a separate line just for rounding."", 'comment_created': datetime.datetime(2020, 6, 11, 23, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439131228, 'comment_body': 'This is easy to confuse with QWidget::update, which is used to redraw widgets. Maybe call this updateFlags? Or do you have another idea for a name?', 'comment_created': datetime.datetime(2020, 6, 11, 23, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439131734, 'comment_body': 'I think it would be better to update the QActions when the option flags are changed instead of having this confusing hiding of a standard QMenu method.', 'comment_created': datetime.datetime(2020, 6, 11, 23, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439132594, 'comment_body': '```suggestion\r\n        m_pCueMenu = make_parented<QAction>(tr(""Edit cue""), this);\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 23, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 439519788, 'comment_body': 'And and maybe use a temp var to do the kClickableLinePaddingPixels addition/subtraction only once. ', 'comment_created': datetime.datetime(2020, 6, 12, 16, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 439755100, 'comment_body': ""This function does not upload the flags, it updates the menu. So let's call it `updateMenu`"", 'comment_created': datetime.datetime(2020, 6, 13, 17, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}]","[{'commit_sha': 'a777180e8c03ec3cf6f1650892fbb7d41f15faf1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31f8defcc51b517e0dafe745163bba1c06126947', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5967d71eef8f291d4e6271af9197afae92dd5af1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d967a0e407bce77747d478fae3fbec85ab9e647', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e698149cb56da114f98dfaee25c7fe785b10bc', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5ab726b2b9c362073be2f2352185869b1c557dd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c239dbb00f0bbce4b3ffd955877e4963ff88c99', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29d1b809560cc4cd495f05443698ef7393192460', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951627dce63988f580c22d0ca94435e2f4257a57', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dd47502c58bca129875bd35ba463eac66e1fc7a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25065e96941eb7a12fb503bc579963b47938d35e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d0522dfeb9f2f0078b62e9516386b04ef7b2c9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dceca94f4a4cd18d06b86d724cb3c3fe0946796', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '837de30f652465f340b33b9ef969f7476a7b8555', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ba15875c2159335aa5b05a1f7461d187650a12', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95f68efcbd3d99300189cb3df25ec53bb04c94f9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02639278b8f7799af53e9eadac0037b9569862ee', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4166ce8c210825a4d42ae308ff8d0346959e9118', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44caf480a10201e32144c70a7b5eefcf62c39edb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad50c5975e146155c934e289e5646bf230471e45', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3164b767656392b5cc7709a5d17f2869c4e5e44', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd304118fdfb196f29559ac8a487e5310b4e6bfe0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd72749e6bed96c69bd6f8694e7d968f332723169', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b87c6ac5766b4d20eff16c6b28d325e6985dc85', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e149fdb430c1f4fd53ad9621525696c221c71647', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5420dcdeef033d678f50569fdbec72f2af405ab', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df217c01c497432b89e67045c81372289041a951', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a54d3407a3893fb4aea8580fc5c5abe80ea43c11', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cff18aea877ed18707493adf6650af8d0151e19', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1f9375b62c4ff9588e9d4404db0bd495ae91bb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e771996f84764f66e7284ad6e983026420e202', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7fd68df9967ed82d56ad0674a95832aebb87792', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c70b21d36dd6cd807af7faaf93a2f9a769cb35', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a1b8d942a211ec080648b251b709bc9fa2dd0f6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13643a9dbc11bfdcf554a557974cab18606ea807', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b320e17b1969f4728267d9f4c80119097880b6d2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2ab6e39e1b7c65ec8d2b28f1abe89ff508f2fea', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f7883ac57c3a108be8bdc4ddc4fcd8fdf7a2569', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882f73fb4f1b471430a98a4ab912466ad8713323', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c46ab059dc9bc21d403f9e287fbf4e13d9c869e7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cf475d236f905c551dc2840b02d6da031a3a7e8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b53645f3432fc5e38a08ad2b3f8d21cd9c3f0ffc', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '849ba8d30d6c0b066a8870cc3e66b759ea0bd161', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1feb961775f1ca5bedee0f1c6616728fb748303a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cad9401e0ceeb31f89eef6a6ee75ebe49b48534d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}]",Harshit Maurya,30816844,,User,,41,,123,68
433960308,[WIP] Remove beatmap and beatgrid,"This is a continuation of #2512

Goals:

- [x] Address all review comments from 2512

- [x] Fix tests

- [x] Remove UI features (Since they are being developed in #2844)

- [x] Add backward compatibility for functions that generate BeatGrid by generating an intermediate BeatMap before passing to Beats class.

- [x] Migrate user data from old BeatGrid & BeatMap protobufs

- [x] Break up Beats class into an inner functional class that doesn't inherit from QObject and an outer QObject wrapper.

- [ ] Add protobuf definitions for TimeSignature, Phrase and Sections and write test cases to test their operations.",False,2861,https://api.github.com/repos/mixxxdj/mixxx/pulls/2861,https://github.com/mixxxdj/mixxx/pull/2861,closed,3488,3031,52,162,58,172,0,0,[],2020-06-13 05:09:23+00:00,2020-07-23 16:10:16+00:00,3495653.0,"40 days, 11:00:53","[{'comment_id': 439716600, 'comment_body': '@hacksdump All operations on `Frame` should be inlined and defined in the header file. No need for a .cpp file.', 'comment_created': datetime.datetime(2020, 6, 13, 7, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 439716712, 'comment_body': 'Please edit this commit directly and do a force push. No need to keep the previous changes around.', 'comment_created': datetime.datetime(2020, 6, 13, 7, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441202119, 'comment_body': 'These are parented QObjects. If we make them unique there is extra code executed to remove them from the QtObject tree. Can you make them parented_ptr to document that explicit.\r\n\r\nPlease fix this in the whole PR.\r\n', 'comment_created': datetime.datetime(2020, 6, 16, 23, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441202402, 'comment_body': 'This can be a unique_ptr, because it has no parent', 'comment_created': datetime.datetime(2020, 6, 16, 23, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441203662, 'comment_body': 'It scares me that the m_endBeat is used. Normally the iterator end is the address invalid address behind the last element and should not be deference.\r\nThe code failed to iterate over all beats if for some reasons one beat is on the same position than on other.\r\nSo I guess the code is more robust if we do a pointer compare instead of a value.\r\nhttps://stackoverflow.com/questions/15252002/what-is-the-past-the-end-iterator-in-stl-c', 'comment_created': datetime.datetime(2020, 6, 16, 23, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441204057, 'comment_body': 'We still use the term sample rate that always refers to samples per channel. The term frame rate is only used for video.', 'comment_created': datetime.datetime(2020, 6, 16, 23, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441204383, 'comment_body': '```suggestion\r\n        qDebug() << ""Analysis data(Frame numbers):"" << beats;\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441204633, 'comment_body': 'remove extra () and below', 'comment_created': datetime.datetime(2020, 6, 16, 23, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441205971, 'comment_body': 'A QObject is not copy-able. I am unsure how this works for inherited classes. At least this has some code smell. \r\nSo we should either remove to QObject parent or the copy constructor. ', 'comment_created': datetime.datetime(2020, 6, 16, 23, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441208614, 'comment_body': 'I know bars and beats, but now ""bar beats"", Can we rename it to just ""bar"" or ""down beat""  ', 'comment_created': datetime.datetime(2020, 6, 17, 0, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441210727, 'comment_body': 'Can we use a constant for the 2 here and in the whole file? \r\n ', 'comment_created': datetime.datetime(2020, 6, 17, 0, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441212346, 'comment_body': 'What is the solution for single exceptional bars with 4 1/2 or 3 1/2 beats. ', 'comment_created': datetime.datetime(2020, 6, 17, 0, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 441267185, 'comment_body': 'I am not sure I got that question.\r\nIf a bar has 4 1/2 beats it would mean the downbeat for the bar specifies a time signature as TimeSignature(4,2)', 'comment_created': datetime.datetime(2020, 6, 17, 4, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441325461, 'comment_body': ""@daschuer Please let's only consider simple time signatures with an integer *note value* aka *beat unit*. This is sufficient for our use case. [Fractional beats](https://en.wikipedia.org/wiki/Time_signature#Variants) are out of scope."", 'comment_created': datetime.datetime(2020, 6, 17, 7, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441330840, 'comment_body': 'I am struggling with the name `Frame`. It is short and concise, but also wrong.\r\n\r\nThis represents not an actual *frame of samples*. Instead it is a(n) index/offset/position that addresses a frame i an sequence of frames.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441331357, 'comment_body': 'Do not forward declare types from external libraries. QDebug might not be a class, depending on how it is implemented.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441331847, 'comment_body': 'Remove all `const` qualifiers from parameters that are passed by value.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441332307, 'comment_body': 'The integer division might not work as expected when passing a double. Use double here.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441333727, 'comment_body': 'Should it be possible to specify a beat without a position? Then add a comment why. Otherwise change it to `required`.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441334307, 'comment_body': 'What does it mean if a Beat does not have a type?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441334690, 'comment_body': 'Why does this field need to be optional?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441335777, 'comment_body': 'Pass parameters by value', 'comment_created': datetime.datetime(2020, 6, 17, 7, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441336348, 'comment_body': 'Please omit these operators, operators +=/-= are sufficient and more versatile. The value is not supposed to be an integer.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441337130, 'comment_body': 'Pass parameters by value and implement in terms of *= (and all the other arithmetic operators)', 'comment_created': datetime.datetime(2020, 6, 17, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441341037, 'comment_body': ""No, you cannot add a frame position to another frame position. But you could add a frame count to a frame position, resulting in a new position.\r\n\r\nUsing the *newtype* pattern for both positions **and** counts with well-defined arithmetic operations between them would be the correct solution. Let's first only encode the positions and use plain `double` for differences between positions. This is not type safe, but at least not wrong from a conceptual perspective."", 'comment_created': datetime.datetime(2020, 6, 17, 7, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441342071, 'comment_body': 'Please omit the type prefix, this is considered an anti-pattern.\r\n\r\nInstead define a public `typedef double value_t` (see RgbColor) and replace this member with `value_t m_val;`. Use `Frame::value_t` instead of `double` whenever you refer to this inner type.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441342689, 'comment_body': '= default', 'comment_created': datetime.datetime(2020, 6, 17, 7, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441342904, 'comment_body': '`inline` is redundant in the class body, please remove it', 'comment_created': datetime.datetime(2020, 6, 17, 7, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441343119, 'comment_body': 'Symmetric operators should be defined as free functions.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441343454, 'comment_body': 'Define != in terms of ==, i.e. !(lhs == rhs)', 'comment_created': datetime.datetime(2020, 6, 17, 7, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441343685, 'comment_body': 'Add constexpr', 'comment_created': datetime.datetime(2020, 6, 17, 7, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441343943, 'comment_body': 'Use constexpr for both constants', 'comment_created': datetime.datetime(2020, 6, 17, 7, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441344796, 'comment_body': 'The implicit default constructor will leave the members uninitialized. Declare one (constexpr) that initializes them to 4/4.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441345342, 'comment_body': 'This constant becomes obsolete if we add a constexpr default constructor', 'comment_created': datetime.datetime(2020, 6, 17, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441346161, 'comment_body': '@daschuer Suggestions?', 'comment_created': datetime.datetime(2020, 6, 17, 7, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441347214, 'comment_body': ""That's why I mentioned that we need to break up this class into an inner functional class that doesn't inherit from QObject and an outer QObject wrapper."", 'comment_created': datetime.datetime(2020, 6, 17, 7, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441348912, 'comment_body': '@daschuer Suggestions? Also related to my comment about the naming of the class `Frame`. \r\n\r\nSure, pure double with an implicit interpretation would be even worse. But if we decide to define a type-safe class we need to be correct instead of introducing an incorrect abstraction.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441370123, 'comment_body': 'The `enabled` field will be removed in #2844 ', 'comment_created': datetime.datetime(2020, 6, 17, 8, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441398689, 'comment_body': 'FramePosition? FrameOffset? FrameIndex? ', 'comment_created': datetime.datetime(2020, 6, 17, 9, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 441437699, 'comment_body': 'I like FramePosition.', 'comment_created': datetime.datetime(2020, 6, 17, 10, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 441497071, 'comment_body': ""We could abbreviate this as `FramePos` to avoid too type boilerplate.\r\n\r\nIf we agree to restrict the usage of this class to (absolute) positions the arithmetic operation FramePos + FramePos need to be removed, because adding two points in this affine space is not allowed.\r\n\r\nFramePos - FramePos should result in an `double` that implicitly represents the difference (in frames). Otherwise we would need to introduce a dedicated difference (= *vector*) type. I would like to postpone this decision. Let's use a simple type alias for documentation purposes, i.e. `typedef double FrameDiff_t;`. The suffix `_t` indicates that this is a primitive type."", 'comment_created': datetime.datetime(2020, 6, 17, 12, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441562819, 'comment_body': 'So does this mean a frame + frame diff is defined?\r\n\r\nAlso what about operations that need to find the mid point of two frames? Currently it can be written as (frame1 + frame2) / 2.', 'comment_created': datetime.datetime(2020, 6, 17, 13, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441592373, 'comment_body': ""> So does this mean a frame + frame diff is defined?\r\n\r\nYes.\r\n\r\n> Also what about operations that need to find the mid point of two frames? Currently it can be written as (frame1 + frame2) / 2.\r\n\r\nMaybe add a new method that returns a FramePos and you pass in the other FramePos. This prevents confusing positions with diffs and makes sure we always know what kind of value we're working with."", 'comment_created': datetime.datetime(2020, 6, 17, 14, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 441636075, 'comment_body': 'https://en.wikipedia.org/wiki/Affine_space\r\n\r\n- points vs. vectors,\r\n- points in time (instants) vs. time durations\r\n- frame positions vs. frame position differences', 'comment_created': datetime.datetime(2020, 6, 17, 15, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441870926, 'comment_body': 'The start of a track can be thought of an origin. Does that mean a frame position is not a true affine space?', 'comment_created': datetime.datetime(2020, 6, 17, 22, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441871649, 'comment_body': 'If I am correct, we have agreed on using only the two types: `FramePos` and `FrameDiff`.\r\nWhy do we need to make `FrameDiff`a primitive... can it not be wrapped in a class like `FramePos`?', 'comment_created': datetime.datetime(2020, 6, 17, 22, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441875923, 'comment_body': ""Sort of. Frame positions are relative to the start of the track. Nevertheless adding two frame positions doesn't make any sense.\r\n\r\nI assumed that we don't want to define a separate `FrameDiff` type for the moment until we actually need it? That's why I proposed the typedef as a workaround. It depends on how often it appears in public APIs. If those values are only used in internal or limited scopes the separate type is not really needed."", 'comment_created': datetime.datetime(2020, 6, 17, 22, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441877430, 'comment_body': 'This is a snippet from the `Beats` class.\r\n```cpp\r\nvoid Beats::translate(Frame numFrames) {\r\n    for (BeatList::iterator it = m_beats.begin(); it != m_beats.end();) {\r\n        Frame newpos = Frame(it->frame_position()) + numFrames;\r\n```\r\n\r\nIt will be changed to \r\n```cpp\r\nvoid Beats::translate(FrameDiff numFrames) {\r\n    for (BeatList::iterator it = m_beats.begin(); it != m_beats.end();) {\r\n        FramePos newpos = FramePos(it->frame_position()) + numFrames;\r\n```\r\n\r\nWhich classes form the public API for mixxx?', 'comment_created': datetime.datetime(2020, 6, 17, 22, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441877951, 'comment_body': 'In Rust I use the newtype pattern very often, because it requires much less boilerplate than in C++. But even in this case it is a thin line between improved safety and lots of boilerplate into()/from() type conversions.', 'comment_created': datetime.datetime(2020, 6, 17, 22, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 441879953, 'comment_body': 'I would vouch for type safety here.\r\nSo I will redefine the operation\r\n```cpp\r\nFrame operator+(const Frame& frame1, const Frame& frame2) {\r\n    return Frame(frame1.getValue() + frame2.getValue());\r\n}\r\n```\r\nas \r\n```cpp\r\nFramePos operator+(FramePos framePos, FrameDiff frameDiff) {\r\n    return FramePos(framePos.getValue() + frameDiff.getValue());\r\n}\r\n```\r\nIf FrameDiff is just a typedef for double, one may still accidentally pass sample diff instead of frame diff.', 'comment_created': datetime.datetime(2020, 6, 17, 23, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441886961, 'comment_body': 'Should I use mixxx::track::io::TimeSignature as the underlying object for the TimeSignature as I have done with Beat class in #2844 ?\r\nThis would mean a protobuf generated object is the member variable instead of two integers.\r\nThe default (4/4) is already defined in `beats.proto`.', 'comment_created': datetime.datetime(2020, 6, 17, 23, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 441894694, 'comment_body': 'Or delete the default constructor? If calling code should use a default value of 4/4, I think that should be made explicit in the calling code, not hidden in the implementation of the default constructor of this class.', 'comment_created': datetime.datetime(2020, 6, 17, 23, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 441895341, 'comment_body': 'Or use the null 0/0 value for the default constuctor', 'comment_created': datetime.datetime(2020, 6, 17, 23, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 441897272, 'comment_body': '> Or use the null 0/0 value for the default constuctor\r\n\r\nThis would so be consistent with Qt classes where the default constructor creates an invalid value. ', 'comment_created': datetime.datetime(2020, 6, 18, 0, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 441921179, 'comment_body': ""Thinking about this further, do we really need the complexity of creating a class to represent a mathematical operation on a frame position? How about just\r\n```\r\nFramePos someVariable = whatever;\r\nsomeVariable = FramePos(someVariable.getValue() + increment);\r\n```\r\n\r\nThis is a little verbose, but it's not complicated. It eliminates the possibility of accidentally doing math with a FramePos and a double which represents a different kind of value if we remove all the operators on the FramePos class. I think it is more straightforward than\r\n```\r\nFramePos someVariable = whatever;\r\nsomeVariable += FrameDiff(increment);\r\n```\r\nwhich requires the reader of the code to learn about a whole other class."", 'comment_created': datetime.datetime(2020, 6, 18, 1, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443063508, 'comment_body': '""downbeat"" seems to be common: https://en.wikipedia.org/wiki/Beat_(music)#Downbeat_and_upbeat -> `beats_set_downbeat` + ""Set first beat of a bar""', 'comment_created': datetime.datetime(2020, 6, 19, 22, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443063692, 'comment_body': 'All manual deletes should become obsolete after switching to parented_ptr/unique_ptr respectively', 'comment_created': datetime.datetime(2020, 6, 19, 22, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443064841, 'comment_body': 'These recurring conversions are difficult to identify. Please use inlined utility functions for this purpose, e.g. samples2frames()/frames2samples()', 'comment_created': datetime.datetime(2020, 6, 19, 22, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443065280, 'comment_body': 'Samples are restricted to even numbers to land on frame boundaries. But now delta is calculated in frames and this should be obsolete. Please recheck all occurrences carefully!', 'comment_created': datetime.datetime(2020, 6, 19, 22, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443065472, 'comment_body': 'Append the suffix ""Samples"" or ""Frames"" to variable names to distinguish them, i.e. `deltaFrames`', 'comment_created': datetime.datetime(2020, 6, 19, 22, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443066282, 'comment_body': 'Since frames are doubles delta should not be an integer!\r\n\r\n```\r\nauto deltaFrames = currentFrame.getValue() - closestBeat.getValue();\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 22, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443066846, 'comment_body': 'Passing a frame position to translate() is conceptually wrong, see FramePos vs FrameDiff. Instead the (fractional) number of frames should be passed.\r\n\r\n```\r\nm_pBeats->translate(deltaFrames);\r\n```\r\n\r\nPlease fix the declaration and use either `double` or `FrameDiff` (depending on your choice) as the parameter type.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443067856, 'comment_body': 'I would prefer the term *uniform* instead of *const*. This would also prevent confusion with *const* in programming @Be Any suggestions from a native speaker?', 'comment_created': datetime.datetime(2020, 6, 19, 22, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443068460, 'comment_body': 'Could be removed', 'comment_created': datetime.datetime(2020, 6, 19, 22, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443069300, 'comment_body': ""The comments if makeBeat() and makeBar() don't seem to be reasonable. \r\n\r\nAren't beats that are marked as mixxx::track::io::BAR supposed to be a downbeat, i.e. first beat in a bar/measure?"", 'comment_created': datetime.datetime(2020, 6, 19, 22, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443069528, 'comment_body': 'Please stick to the traditional `typedef` unless we need to introduce aliases for template types.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443069775, 'comment_body': 'Please remove all `const` classifiers from parameters that are passed by value.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443070212, 'comment_body': 'The implicit type conversion from int to double is confusing. Please use either integer or floating point but not both. Use separate or specialized functions for integer rounding operations.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443070406, 'comment_body': ""Why is the result rounded? The result should exactly match the argument, that's what the name of the function promises to do. It should not modify the resulting value by rounding.\r\n\r\nPlease introduce different functions for different purposes if needed."", 'comment_created': datetime.datetime(2020, 6, 19, 22, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443071287, 'comment_body': ""I agree with @Be. Introducing new types is a lot of extra work. And even more if you want to cover both integer and floating-point types. Out of scope of this task.\r\n\r\nLet's instead use naming conventions (as suggested) for variables and parameters to clearly distinguish between sample and frame deltas."", 'comment_created': datetime.datetime(2020, 6, 19, 22, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443071572, 'comment_body': '`class Frame final` and then remove this default destructor.', 'comment_created': datetime.datetime(2020, 6, 19, 22, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 443174768, 'comment_body': 'I think ""constant"" is appropriate, but I think it should be fully spelled out as ""Constant"" instead of abbreviated ""Const"" to avoid confusion with C++\'s `const` keyword.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443174849, 'comment_body': 'Thank you for taking care to update the documentation with the code changes.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443175236, 'comment_body': 'Use std::optional rather than magic numeric values.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443175311, 'comment_body': 'Nevermind, I see this is obsoleted by the next commit.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443175600, 'comment_body': 'It would be nice to add codespell to our precommit hooks to avoid these in the future.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443175901, 'comment_body': '```suggestion\r\n    // because it is defined as the default in beats.proto\r\n```\r\n""Since"" means one event occurred before another in time.', 'comment_created': datetime.datetime(2020, 6, 21, 2, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443176620, 'comment_body': 'Now ""I am going to bed since I have to get up early."" ;)', 'comment_created': datetime.datetime(2020, 6, 21, 3, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ronso0', 'type': 'User'}, {'comment_id': 443177047, 'comment_body': ""Okay, so let's remove the math operators for the Frame class."", 'comment_created': datetime.datetime(2020, 6, 21, 3, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443177362, 'comment_body': 'Thanks for pointing the issues with the abstraction. The code makes much more sense with `FrameDiff_t` type.', 'comment_created': datetime.datetime(2020, 6, 21, 3, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443178772, 'comment_body': 'A FramePos(-1) just indicates a frame before the track start and can conceptually be used to refer to preceding frame.\r\nResolution:\r\n    1. Add new boolean isValid to FramePos class.\r\n    2. Return std::optional<FramePos> from search operations like findNextBeat.', 'comment_created': datetime.datetime(2020, 6, 21, 3, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443178887, 'comment_body': ""Let's use std::optional"", 'comment_created': datetime.datetime(2020, 6, 21, 3, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443205491, 'comment_body': ""Changing it to required would mean the explicit setting of type would be required. The default value doesn't make sense then.\r\nWhile frame_position can be required, type is not necessarily set assuming the default is a beat.\r\nGoogle has even removed the required type with protobuf v3."", 'comment_created': datetime.datetime(2020, 6, 21, 10, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443205577, 'comment_body': 'Sure. Position can be required.\r\nThis means it should always be explicitly set otherwise it would lead to SIGABRT on serialization.', 'comment_created': datetime.datetime(2020, 6, 21, 10, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443216137, 'comment_body': 'What beats does the class contain if this constructor is used? Are there any beats?', 'comment_created': datetime.datetime(2020, 6, 21, 12, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443216425, 'comment_body': 'Should this return a FramePos or a Beat?', 'comment_created': datetime.datetime(2020, 6, 21, 12, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 443216738, 'comment_body': 'Nope. They can only be set with the `setGrid` method afterwards.', 'comment_created': datetime.datetime(2020, 6, 21, 12, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443216837, 'comment_body': 'FramePos here. But I am returning an object of Beat class in #2844 ', 'comment_created': datetime.datetime(2020, 6, 21, 12, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 443218696, 'comment_body': 'QStrings should still be passed by const ref', 'comment_created': datetime.datetime(2020, 6, 21, 13, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 444524118, 'comment_body': 'We prefer \r\nmixxx::FramePos closestBeat  = m_pClosestBeat->get() / 2.0;\r\nbecause this does not read like a function call. ', 'comment_created': datetime.datetime(2020, 6, 23, 21, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444524768, 'comment_body': 'Using mixxx::FramePos here produces only clutter. ', 'comment_created': datetime.datetime(2020, 6, 23, 21, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444554658, 'comment_body': ""This was a real question! \r\n\r\nI don't think we necessarily required to introduce floats here, we just to need to be aware what to do, \r\nWe can have something like this: \r\n```\r\nD       b       b       b   D       b       b       b      D       b       b       b       D       b       b       b  \r\n```\r\nThat is not uncommon. It can be intended or a Drummer hick up.  \r\n\r\nHow would this be described in the protobuf. \r\n\r\nThe other thing I struggle with are Metal tracks where 7/16 or such is not uncommon. \r\nI am in doubt that we would like to have out beat grid cluttered with every 1/16 beats, because only two of them are notable as beats and probably found by the beat detector. It is just that one of them is slightly off\r\n(@crisclacerda please verify.) \r\n\r\nA 4/4 measure can be counted as 16/16 measure as  \r\n\r\n```\r\n1 e + a 2 e + a 3 e + a 4 e + a 1 e + a 2 e + a 3 e + a 4 e + a \r\nD       b       b       b       D       b       b       b  \r\n```\r\n\r\nSo the 7/16 example will be \r\n```\r\n1 e + a 2 e + 1 e + a 2 e + 1 e + a 2 e + 1 e + a 2 e + \r\nD       b     D       b     D       b     D       b  \r\n```\r\n\r\nThis video shows a 15/16 measure which is even more weird \r\nhttps://www.youtube.com/watch?v=GwCyIZ-v9CA\r\n\r\nHow would we express this? \r\n"", 'comment_created': datetime.datetime(2020, 6, 23, 23, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444557352, 'comment_body': 'a copy to itselfe? What does it do? ', 'comment_created': datetime.datetime(2020, 6, 23, 23, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444557995, 'comment_body': 'What is the solution if the first beat is cut for some reasons and is unbearable at the pre-roll? ', 'comment_created': datetime.datetime(2020, 6, 23, 23, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444558901, 'comment_body': 'normally functions are called by what they are doing and not when they are called. \r\nHow about ""updateBpm()""', 'comment_created': datetime.datetime(2020, 6, 23, 23, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444562494, 'comment_body': 'why is this not ""const QString& str"" anymore? ', 'comment_created': datetime.datetime(2020, 6, 23, 23, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444563042, 'comment_body': 'Is getValue() not const? Why not? ', 'comment_created': datetime.datetime(2020, 6, 23, 23, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 444569457, 'comment_body': ""And why add the mixxx prefix if it's in the mixxx name space anyway? "", 'comment_created': datetime.datetime(2020, 6, 23, 23, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 445207331, 'comment_body': 'This change probably produces the build error with scons on Travis.\r\nYou may try to revert it.', 'comment_created': datetime.datetime(2020, 6, 24, 22, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 445217044, 'comment_body': 'This function is only being used in a test (enginesynctest) and nowhere in the main program. It was proposed in 2512 as well to remove this. Are there any possible scenarios where someone would like to **add a beat**?\r\n![Screenshot from 2020-06-18 22-22-41](https://user-images.githubusercontent.com/30816844/85635808-7a3a0e80-b69c-11ea-8bc1-a58f9f8fd9df.png)\r\n(Screenshot from 2512)', 'comment_created': datetime.datetime(2020, 6, 24, 22, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445269358, 'comment_body': '`getValue` and `compareEq` are both const. Is there some other function you are referring to?', 'comment_created': datetime.datetime(2020, 6, 25, 2, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445269786, 'comment_body': 'Yeah. This sounds like JavaScript. Will change this.', 'comment_created': datetime.datetime(2020, 6, 25, 2, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445275607, 'comment_body': ""> That is not uncommon. It can be intended or a Drummer hick up.\r\n\r\nIn the new encoding scheme (to be developed) using beat markers, we won't store frame positions in the protobuf at all.\r\nInstead, a beat marker will be used which is represented as:\r\n```\r\nBeatMarker {\r\n    required int beatIndex\r\n    optional Bpm bpm\r\n    optional TimeSignature timeSignature\r\n    optional Section section\r\n    optional Phrase phrase\r\n}\r\n\r\nBeats {\r\n    required firstBeatFramePosition\r\n    repeated BeatMarker beatMarkers\r\n}\r\n```\r\n\r\nA beat position is determined by previous beat position and its BPM on the basis of their indices.\r\n\r\nSo if a track is jittery, there is a beat marker at every index, but if the track has uniform bpm, there is only one BeatMarker at the beginning of the track.\r\n\r\nThis scheme is a hybrid between BeatMap and BeatGrid."", 'comment_created': datetime.datetime(2020, 6, 25, 2, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445275993, 'comment_body': '@uklotzde How do I proceed with this?', 'comment_created': datetime.datetime(2020, 6, 25, 2, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445380398, 'comment_body': 'OK, But how are the two examples expressed than? What is the signature Mixxx Displays during the 3.5/4 measure? \r\nHow to visualize x/16 measures. The waveform will be white for beatmarkers and 1/16 markers have no use-case. \r\n ', 'comment_created': datetime.datetime(2020, 6, 25, 8, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 445524845, 'comment_body': 'A 3.5/4 measure could also be expressed as 7/8. Alternatively, we can keep 4 beats in the bar but let the user cut the last beat short without moving the positions of the other beats.', 'comment_created': datetime.datetime(2020, 6, 25, 12, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445698967, 'comment_body': ""Yes, it is a 7/8 bar.\r\nWithout additional thinking this will be visualized as double BPM as before.\r\nI don't think we want that. \r\n\r\nI have the feeling we need to go back to the cutting table. What is the use case of the signature info? \r\n\r\nI am afraid we combine here two related things that might be kept separate or at least considered separate. The sparse representation and user information.\r\n\r\n1. The sparse representation of const beatgrid. We can give the position of the first downbeat, the BPM and the number of beats per bar.\r\nIn this case we just need to re-adjust the early down-beat and we are done.\r\n\r\n2. Inform the User about irregular measures. The user should be warned not to use beatmatching across this irregular meassure. How do we want to give that to a user? \r\n\r\n3. Display the main signature in the library.\r\n\r\n4. The hardest nut is the 7/16 Mattle track.\r\nWhat do you suggest with this? I don't want to have 1/16 Beats on the waveform. I don't want to set every beat manually.\r\nI may want to sync the track using the down-beat only. I may want to doo loop tricks. \r\nHow about defining the first as creazy a as it is and allow to repeat it until the next measure with a different signature.\r\n\r\nWhat do you think?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 25, 16, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 445810004, 'comment_body': ""> Without additional thinking this will be visualized as double BPM as before.\r\nI don't think we want that.\r\n\r\nI agree. I am thinking the best solution would be not assuming that every beat in a bar is an equal length of time. If we do not assume that, a 3.5 beat measure could be a 4/4 measure with the last beat shorter than the others."", 'comment_created': datetime.datetime(2020, 6, 25, 20, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445819797, 'comment_body': ""We never assumed that. In fact, time signature and beat track (the more general term for beat map) are quite independent.\r\nA time signature only encodes the information about the downbeats.\r\nBeat length is determined by a preceding beat marker that marks a change of BPM.\r\n\r\nLet's look at a series of Beat Markers.\r\n\r\n```js\r\n[\r\n{\r\n  index: 0\r\n  ts: 4/4\r\n  bpm: 60\r\n},\r\n{\r\n  index: 3\r\n  bpm: 120\r\n},\r\n{\r\n  index: 4\r\n  bpm: 60 // restored for the next bar\r\n},\r\n// The pattern repeats\r\n]\r\n```"", 'comment_created': datetime.datetime(2020, 6, 25, 20, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445838261, 'comment_body': 'Yes, a 4/4 measure in this case does make sense from the sparse representation view however it is just wrong as information for the user. \r\n\r\nDo we have a plan how to the the info to the user? I can think of something like the key label that shows the time signature. In our case it will change from 4/4 to 5/8 or ""?""  if you like. This solves not the odd measure warning use case though.  \r\n\r\nHow about integrate Bars into the protobuf\r\n\r\n```\r\nmessage Bar {\r\n  // The frame position should always be explicitly set\r\n  // otherwise serialization would lead to SIGABRT.\r\n  required double frame_position = 1 [ default = 0 ];\r\n  optional Source source = 3 [ default = ANALYZER ];\r\n  optional string phrase =  6 [ default = ""intro""];  // not empty = phrase start \r\n  optional string signature = 5 [ default = ""4/4""]; // not empty = down beat \r\n  optional int number_of_Beats = 6 [default = 4]; \r\n  repeated beat_frame_position_offset = 7; // can be empty for a const bar.  \r\n}\r\n```\r\n\r\nThis would allow to define one complex bar, call freely give it a signature name and repeat it until a new one is defined. \r\nIt can also be stripped down to be only a beat. This is the case when only frame_position is set. \r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 25, 21, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 445859724, 'comment_body': '1. Rename `Beats` to `BeatsObject`\r\n2. Move all required members into a plain, copyable, moveable C++ object `Beats`\r\n  - m_subVersion\r\n  - m_sampleRate\r\n  - m_duration\r\n  - m_bpm (not ""m_dCachedBpm"", this name is misleading)\r\n  - m_beatList\r\n\r\nStoring a pointer to the `Track` object should not be necessary. Instead the track should actively take control of the `BeatsObject`.\r\n\r\nStoring the plain `Track` pointer is unsafe and may cause crashes. The only valid option would be to store a weak pointer if necessary. But try to avoid those cyclic dependencies in the first place.', 'comment_created': datetime.datetime(2020, 6, 25, 21, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 445888567, 'comment_body': '> Rename Beats to BeatsObject\r\n\r\nAppending ""Object"" to a class name says nothing about what the class does. I am still in favor of ""BeatVector"", but I\'m open to other ideas for the class name.', 'comment_created': datetime.datetime(2020, 6, 25, 23, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445889896, 'comment_body': 'I suggest the suffix ""Object"" to distinguish QObjects from plain C++ classes. It should only serve as a thin wrapper for signal/slot stuff and thread synchronization in this case. All the non-copyable and non-movable members stay there. The naming of the actual class is independent of that, e.g. either `Beats` or `BeatVector`.', 'comment_created': datetime.datetime(2020, 6, 25, 23, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 445890511, 'comment_body': 'We could use `BeatVector` and `BeatVectorObject` for the different abstraction levels, i.e. functional vs. infrastructure.', 'comment_created': datetime.datetime(2020, 6, 25, 23, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 445895976, 'comment_body': ""I'd prefer `BeatVectorWrapper` or `BeatVectorQObject`."", 'comment_created': datetime.datetime(2020, 6, 25, 23, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445896722, 'comment_body': 'There is no need to introduce another confusing and meaningless term, then just ""...QObject"".', 'comment_created': datetime.datetime(2020, 6, 25, 23, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 445956912, 'comment_body': 'I thought we were going to use std::optional instead?', 'comment_created': datetime.datetime(2020, 6, 26, 4, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445957478, 'comment_body': 'It looks like you added this. Did you intend to commit it?', 'comment_created': datetime.datetime(2020, 6, 26, 4, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 445959771, 'comment_body': ""That wouldn't play out well with these C style functions like `findPrevNextBeat` where pointers to `previousBeat` and `nextBeat` are passed to them. std::optional was only suited for functions with `FramePos` return type."", 'comment_created': datetime.datetime(2020, 6, 26, 4, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 445960028, 'comment_body': 'My bad. Removed it in a later commit.', 'comment_created': datetime.datetime(2020, 6, 26, 4, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 447391569, 'comment_body': ""```suggestion\r\n        mixxx::FramePos cue(getCuePoint().getPosition() / mixxx::kEngineChannelCount);\r\n```\r\nLet's minimize use of `double` variables."", 'comment_created': datetime.datetime(2020, 6, 30, 3, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 447396514, 'comment_body': ""This is exactly the same code as in QuantizeControl. Let's move it to a common file with a big warning that it should not be used for new code, only adapting legacy code to use frames."", 'comment_created': datetime.datetime(2020, 6, 30, 4, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 447397994, 'comment_body': 'Where does `60` come from? Seconds per minute?', 'comment_created': datetime.datetime(2020, 6, 30, 4, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 447401489, 'comment_body': '```suggestion\r\n        // Reduce the precision of the doubles because an operation on Beats::getBpm\r\n        // is dynamically calculated instead of using a using precise value, thus there is\r\n        // a slight double precision error on comparison operations.\r\n```\r\nDon\'t use relative time terms like ""recently"" in code comments. If that comment is still there in 10 years, it would be confusing.', 'comment_created': datetime.datetime(2020, 6, 30, 4, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 448372534, 'comment_body': ""I ran into a few problems while trying to remove the track member pointer from the Beats class.\r\n\r\nThe track pointer is currently used to dynamically find the track duration (since it can be updated later, which is a common scenario in tests)\r\n\r\nResolution:\r\n1. Use TrackWeakPointer in Beats\r\nThis is semantically not wrong and could possibly work but in `Track::setBpm` a new Beats object is created and the constructor needs a shared pointer to Track itself. So weak pointer can't be used. An outer agent would need to setup the ownership between track and beats which is not doable.\r\n\r\n2. Entirely remove track member pointer.\r\nThis would need the creation of new signals in the track class and connections would need to be established on construction to update data in Beats that can change with track.\r\n\r\n3. Keep the current configuration\r\nWe are storing a plain pointer to track in Beats class. This means there is no ownership per se. So we don't really run into a cyclic dependency here. Track has active control of Beats and in addition to that, Beats stores a plain pointer to the track."", 'comment_created': datetime.datetime(2020, 7, 1, 13, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 448731146, 'comment_body': '```suggestion\r\n// The legacy use of samples for positions assumed interleaved stereo buffers.\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 3, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 448732988, 'comment_body': ""I am leaning towards option 2, but I'd like to hear @uklotzde's opinion."", 'comment_created': datetime.datetime(2020, 7, 2, 3, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 448762863, 'comment_body': 'Unfortunately the protobuf proposed in this PR does not work for me. There are too many degrees of freedom and it is unhandy for a smooth manual editing workflow.\r\n\r\nThis is the wiki page that summarizes the state of discussion:\r\nhttps://github.com/mixxxdj/mixxx/wiki/Beat-and-Bar-Edit-Workflow\r\n\r\nI have suggested to use this buffer:\r\n\r\n```\r\n[\r\n  frame_position = 0;\r\n  source = USER;\r\n  signature_nominator = 7; \r\n  signature_denominator = 16;  \r\n  quarter_beats[1] = 4; // for 4/16\r\n]  \r\n[\r\n  frame_position = 80000;\r\n  source = USER;\r\n  signature_nominator = -1; // REPEAT\r\n]  \r\n[\r\n  frame_position = 375000;\r\n  source = USER;\r\n  signature_nominator = -2; // END\r\n]    \r\n```\r\nWill it work for you? \r\nWhat do we need to change.\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 5, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 448766156, 'comment_body': 'I strongly suggest we avoid required fields -- they are broadly considered an anti-pattern in proto2 and are removed in proto3.', 'comment_created': datetime.datetime(2020, 7, 2, 6, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rryan', 'type': 'User'}, {'comment_id': 448767129, 'comment_body': 'Changing the type from int32 to double will be wire-format incompatible with previous Mixxx libraries. Is this proto going to be used to parse Beat protos produced by previous versions of Mixxx?', 'comment_created': datetime.datetime(2020, 7, 2, 6, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rryan', 'type': 'User'}, {'comment_id': 449081994, 'comment_body': 'In the long term, I am planning to use Beat Indices to reference beats rather than frame positions. No change needed for this PR.', 'comment_created': datetime.datetime(2020, 7, 2, 15, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 449100729, 'comment_body': ""I have another suggestion. Can we defer beatgrid editing features to another PR and strictly focus on the removal of BeatMap and BeatGrid in this PR?\r\nWe won't have any beatgrid editing UI in this PR anyways since it is being developed in #2844.\r\nSo I am only majorly focusing on correctly refactoring the current code and make everything work like it did with BeatMap and BeatGrid."", 'comment_created': datetime.datetime(2020, 7, 2, 15, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 449124542, 'comment_body': 'Yes. the format will be broken when read from the serialized representation. It will only be updated when new data is generated by the analyzer thread.', 'comment_created': datetime.datetime(2020, 7, 2, 16, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 449279943, 'comment_body': 'This PR will use the new protobuffer, right? I think it is a good idea to switch to one that is a base for new features and not switch it again in a follow up PR.  We must not merge a half baked solution especially if other PRs will rely on the new format. \r\n\r\nPlease tell us more about your beat indices idea. It sounds interesting. \r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 449654106, 'comment_body': ""Hm, what's the plan for migrating user data from previous versions of Mixxx?"", 'comment_created': datetime.datetime(2020, 7, 3, 16, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rryan', 'type': 'User'}, {'comment_id': 449654801, 'comment_body': 'A part of it has been implemented in #2844. We are using Beat Index not Frame Positions to refer to beats while rendering and setting a particular beat as a downbeat via the context menu.\r\nStoring the same can be possible when we are storing the BPM and not frame position.\r\nThis is like a beat grid which stores the first position only and the rest can be calculated with BPM.\r\nIn a track with multiple/variable BPM, just store the first beat position and a series of beat markers with [ beat index + bpm ] to find other beats. The extreme case would be when all beats are jittery and we store a beat marker for every beat.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 449918766, 'comment_body': ""Ok, I get the issue with option 1 with transforming `this` into a smart pointer. Ruled out.\r\n\r\nLet's stick to option 3. Extending `Track` could prove difficult, because it is a very central place with lots of dependencies. Don't open the Pandora's box now ;) Later we can decide about how to move on. This does not only affect the beat grid class.\r\n\r\nThe `Track*` should only be stored in the upper level `QObject` derived class. If you need the duration or sample rate in the plain C++ class either store them as members or pass them as parameters only when needed. If they are only needed for certain operations pass them as parameters. They don't really belong to the basic concept of a *beat grid* and maintaining less state avoids potential inconsistencies."", 'comment_created': datetime.datetime(2020, 7, 5, 21, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 450140881, 'comment_body': 'Did we make progress here? I have strong concerns that this proposed proto buff will not last for long. \r\n\r\nI am not insisting to switch to the one I have proposed, but at least we should describe a our workflow , check how we will use it and verify that it fits. \r\n\r\nThis is IMMO a strong requirement before this is merged and we start altering users data.  ', 'comment_created': datetime.datetime(2020, 7, 6, 10, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 450148574, 'comment_body': 'So the user will give the tempo as BPM? \r\n\r\nI think we have two use cases, for electronic tracks with integer BPMs this might work. \r\nUnfortunately not for live tracks. \r\n\r\nI am also in doubt that he can do this precise enough. He will likely do decimal rounding which leads to a increasing offset. \r\n\r\nI think the user will point a beat. \r\n\r\nDo you think the idea with the snap grid https://github.com/mixxxdj/mixxx/pull/2917 will work? In this case it is precise by 11 ms, the detector step width. \r\n@crisclacerda smoothing code can than also used to the user edited beats to partition the grid into constant regions. \r\n\r\nI think it is reasonable have frames in the proto buffer as well. Because the engine code works with frames and that releases us from calculating the frames every time the beat-grid is loaded into the memory. \r\n\r\n\r\n\r\n\r\n ', 'comment_created': datetime.datetime(2020, 7, 6, 11, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 450932993, 'comment_body': ""I thought the intention was to make this usable in realtime code without the QObject, so shouldn't these be public? @daschuer could you take a look?"", 'comment_created': datetime.datetime(2020, 7, 7, 15, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 451258092, 'comment_body': 'Can this return a negative value?', 'comment_created': datetime.datetime(2020, 7, 8, 3, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 451258353, 'comment_body': 'I think it could if `lastCountedBeat == kInvalidFramePos` on the first iteration. The loop would break before `iBeatsCounter++`.', 'comment_created': datetime.datetime(2020, 7, 8, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 451258812, 'comment_body': 'We should still have versions. Better to add them now and not need them later than wish we had added them in the future.', 'comment_created': datetime.datetime(2020, 7, 8, 3, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 451648076, 'comment_body': ""There is nothing against using a QObject in real time code.\r\nYou just can't receive signals and you should not copy it around.\r\nI am in doubt that there is a need for copying it because.\r\n"", 'comment_created': datetime.datetime(2020, 7, 8, 15, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 454495214, 'comment_body': '```suggestion\r\n// These are legacy data structures for upgrading from Mixxx < 2.4\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 454549435, 'comment_body': '```suggestion\r\n        qDebug() << ""Successfully deserialized Beats from legacy data"" << mixxx::BeatsInternal::BEAT_GRID_2_VERSION;\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 18, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 454549864, 'comment_body': '```suggestion\r\n        qDebug() << ""Successfully deserialized Beats from legacy data in format"" << mixxx::BeatsInternal::BEAT_MAP_VERSION;\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 18, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 454550581, 'comment_body': '```suggestion\r\n                    << ""ERROR: Could not parse legacy"" << mixxx::BeatsInternal::BEAT_GRID_2_VERSION << ""from QByteArray of size""\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 18, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 454551432, 'comment_body': '```suggestion\r\n            qDebug() << ""ERROR: Could not parse legacy"" << mixxx::BeatsInternal::BEAT_MAP_VERSION << ""from QByteArray of size""\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 18, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455408439, 'comment_body': 'Can we have a section type too?', 'comment_created': datetime.datetime(2020, 7, 15, 22, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 455414293, 'comment_body': 'We should only define the types which we actually use now. We can add more at any time when needed without breaking backwards compatibility.\r\n\r\nThe other way round is not possible, i.e. you cannot delete types from this enum once you released them without breaking backwards compatibility.', 'comment_created': datetime.datetime(2020, 7, 15, 23, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 455441798, 'comment_body': 'How about we only add BEAT and BAR for now? Then @crisclacerda can modify #2877 to output the detected downbeats to this new protobuf format. When @crisclacerda implements phrase and section detection we can add those, or alternatively if @hacksdump implements the UI for editing phrases and sections before the analysis is implemented he could add those to the protobuf at that time.', 'comment_created': datetime.datetime(2020, 7, 16, 0, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455532584, 'comment_body': ""Exactly. If we don't use PHRASE yet (i.e. for this PR), don't add it."", 'comment_created': datetime.datetime(2020, 7, 16, 6, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 455843022, 'comment_body': '```suggestion\r\n  INTRO = 0;\r\n  OUTRO = 1;\r\n  OTHER = 2;\r\n```\r\n\r\nThe user can put the intro or outro somewhere that is not the very beginning or end of the track, so ""inner"" is somewhat misleading.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455844912, 'comment_body': 'I think sections should be able to have a color. What type can we use to store an RGB color in a protobuf?', 'comment_created': datetime.datetime(2020, 7, 16, 14, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455846498, 'comment_body': 'We can define a new message color\r\n```\r\nint32 red\r\nint32 green\r\nint32 blue\r\ndouble alpha\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 14, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 455847429, 'comment_body': 'I do not think we need an alpha channel for section colors. We explicitly chose to not have an alpha channel for cue and track colors.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455849824, 'comment_body': ""Oh true. I remember that :/\r\nWe'll only use solid colors on the waveform."", 'comment_created': datetime.datetime(2020, 7, 16, 14, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 455849884, 'comment_body': 'Did clang-format do this? We put each item of the initializer list on separate lines.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455851560, 'comment_body': ""I don't think I have ever seen a different constructor of the same class called in the initializer list. Is this necessary?"", 'comment_created': datetime.datetime(2020, 7, 16, 14, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455851909, 'comment_body': 'Probably. I did not touch this constructor.', 'comment_created': datetime.datetime(2020, 7, 16, 14, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 455852493, 'comment_body': '```suggestion\r\n        qDebug() << ""ERROR: Could not parse Beats from QByteArray of size""\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 14, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455853193, 'comment_body': '```suggestion\r\n    VERIFY_OR_DEBUG_ASSERT(beatsProto.time_signature_markers_size() > 0) {\r\n        // create one 4/4 time signature marker\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 14, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455856038, 'comment_body': ""We also need the downbeats, phrases, sections, and time signatures from the analyzer. For now, add these arguments to the constructor signature and add these to this class' data by assuming defaults."", 'comment_created': datetime.datetime(2020, 7, 16, 15, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455859673, 'comment_body': '```suggestion\r\n    for (const auto& beat : beats) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 15, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455860927, 'comment_body': '```suggestion\r\n        VERIFY_OR_DEBUG_ASSERT(beat >= previousBeatPos || beat > FramePos(0)) {\r\n            qDebug() << ""Beats not in increasing order or negative, discarding beat"" << beat;\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 15, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455862219, 'comment_body': '```suggestion\r\n    for (const auto& beat : m_beats) {\r\n        beatsProto.add_beat()->CopyFrom(beat);\r\n    }\r\n```\r\n\r\n`m_` prefix is for member variables, not local variables.', 'comment_created': datetime.datetime(2020, 7, 16, 15, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455862863, 'comment_body': '```suggestion\r\n    for (const auto& timeSignatureMarker : m_timeSignatureMarkers) {\r\n        beatsProto.add_time_signature_markers()->CopyFrom(\r\n                timeSignatureMarker);\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 15, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455864276, 'comment_body': 'What is the meaning of an invalid time signature? A time signature with 0 as one of the numbers?', 'comment_created': datetime.datetime(2020, 7, 16, 15, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455864560, 'comment_body': '```suggestion\r\n    if (beatIndex <= 0) {\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 7, 16, 15, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455976257, 'comment_body': '```suggestion\r\ninline bool TimeSignatureMarkerEarlier(\r\n```\r\nThis clarifies that it is the positions of the markers that is being compared, not what they mark.', 'comment_created': datetime.datetime(2020, 7, 16, 18, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 455983473, 'comment_body': 'Factor this out to a function to get the time signature for any position.', 'comment_created': datetime.datetime(2020, 7, 16, 18, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}]","[{'commit_sha': '148e216bc7a468d2125f2a579b87116737623d8e', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a90b4379ee583f2edccdba7e77c5878d12239b', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8fbe779ddbe77f6b8135ffb00b68b416968249', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee469541daf5b4fad16042f8e549cc23b308e6f', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05a4720ca95db6920064f561a9b47cfc6de73214', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d38e75b3e9a34d47f6df273105e163d0a554819', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1428f0a3dccb612591f510f8718121d44cabca6', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590be5d1ec10900bba5e7f311f76d6369f122b66', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2c9ecac71ec36681fad831a5c17e16f4ecfe640', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0084ddc5262147dfdf2264646b7c9c5bfacc57dc', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8b8ae45ee3b29faaab54cb7d4208026c439118a', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa68e2daefd619e9334fe71ec22f7c9cd3001166', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87cc60783a293c3ecaf35c5c3b3d50040d2ca636', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01583e83b4ad7763b011d60e30451acdb0f3c463', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b533ac4e0e9175ebb9b857110edc11cf65beda53', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e030aeeda8e8b1b2b6eaade2398f5ceb8f64ca', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d652ca1d0c6d0e2715cd46cde409cd997d62996', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91c993031bc2673b123c45402f734e22e4686776', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0f083f79966eefc90083d83b139a5ff51b3796', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b358fc8a29be6a36be8289771c7809c9f88510', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97cd1e8859c54df7d5e4b4c676e924d82e59def', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48ec71b4b31cfe33e8ff7625cbd29188629f9b38', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b4a0d84d0dbbdc27b5e8d2bd82009d92d55516d', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '769e9223a9b8953cbcfc17ef3db4ffbeff146c3e', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3647af9692a63c9e31f652ccb28dcbb2c0ad7e44', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcdc11619240e48d26b1c15c7721d9ac74aa0072', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c54b7c1f146061560915667185a349a2521d964', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dccf044b06bc00477c8ba27ee194d57c468f5b93', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331ef5a4e795fbb7a46d514c76165950a8697d40', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a7baadad82ec9d1d63c1f497f6a1a41ffa952f0', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04d89eabe97548400d3255f8f695d5f82e8c6e3f', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800adf685f793e734a5375fba56a060d5679f9a2', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7cf0d05d49ab5e981c916255de3e7bdfa8e3764', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865caf5213558cd26e4209919af38dc5d8c0d592', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730abaaa892d4e74c3a8e553d5eb94107e63df23', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f857a61cb448b3b236d0674c71d3ddda93e4e7b', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f1039df4573934d66cca2290ddf70f34b53caad', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3ecb4e270995e5fa3cdbef08748e1a9273f057a', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1485e8af3ac49d79c3b0b5a6804dee7ff271f4c0', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58dbf80269a1da2ca5a91b7da7fedfd24b18a7e8', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e3d09d8a5ed17955e55063c07c3f62dd90ddf9', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c628235873bf1fd4d77c2a73ecee96066bf38cf1', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b90cc323fd826c7cdd1ee9d065010ae3851bc56', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35129477fbcdcf48150fbe445d58ecadc4dd0c22', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20cd34cea7aafa3fa7f3813b25f60214dd096aee', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd663f04cbbbab03b511d4bf483a0d2f438b2ec64', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbdba123139b7b1f300511d684e2b3c0a093c3fc', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22d6d19e604fec3ca565e0d792c2c966fdd107f6', 'committer_username': 'JaviVilarroig', 'committer_name': 'Javier Vilarroig', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 15, 9, 24, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f81f1fd274b2ca1e9d626d5abb06076895772d3d', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7c8f7bef9e43118f431f53874873936c3221f0e', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dde8b8fd6f3c99b5049aa3f3d17890d6eae9967d', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85c85f5cd7c5eac919e2ce071bb39efe42d52a8b', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10715cde3114cf014962cf8156918af63d825dc9', 'committer_username': 'uklotzde', 'committer_name': 'Uwe Klotz', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 25, 21, 41, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ef78f3cbfecbcd0f1f3cf7d2db660e1f9bbca77', 'committer_username': 'uklotzde', 'committer_name': 'Uwe Klotz', 'committer_email': None, 'commit_date': datetime.datetime(2012, 2, 25, 21, 41, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03afb56a8a44e145e4f77f71cf61d390a09ff78c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f432e595d11ce75ad00297ebc5a3321df86ca681', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dc057d4d5ccff21740ca979edd6b720665fc4a9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51fdd4292d0999cc68dc2efae01dfd7e6622a619', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8009b69fc92c17ab4ba9aac860da73b203ad81', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a4bffb5385d8b4201fabadb51e98679a787ca9e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e905109b7a7e57edcbc2e067fd2142ceda3df1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e6625ae6fccf3bd0a3d2e35e11d156c37d81daa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec62228247421088b1334ba0451508102c665db8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91eb3d8c31b59dda40265c4fccc77f2f6ef5cf5f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9fd3333f6dc0be77cac727ca26d71ff469124b4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b962d7af7eed210d79d3427f31e42945ed99ec0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480f7f7ba44ea012efea27dcf946a6c8b71a3afd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65a0d84f3bc53fe1f486c2c6fa6c63c9956c5cd5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a49ebe0f736490f738fccb79657332399c246531', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4664ec7770be528d8f2a447f5fc81dde8819c4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b6d0122300f21acaa7826b34f58ef2d99ac27a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919e1b9cff40c503a1719457f5545393e32d427c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d689cf3f318e9f92cc2cc8ec0a6d3d30bf9e94', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe7fd32e1956970cc5dd5d6716cd5f1e3b3a85bb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8957a08f2170bbfa9e9d2f6ffb9e08fa66e40126', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6b038394a6e1ca3fa97d4a3d26015e8e0bed52e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b156cd5ecde3399911bbfbcab2c39df871275e2a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67686f27b15f2d814664b94130e9cc81b5f6235', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eab8bb043f1c196bed9608920bb78a6465fbea06', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43acd8fe2fb7c67458a455407b897025347eaeb1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df01ccedefb4abc2b3bfdb0abe0b149e5a02b7bd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff991789d01533093b1f173df4e2629ec6b973e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '754ecfed2745a1cdeaa0455c69c56eec50279c18', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b515f21bb97d8884bc0647b37cfff9778542da0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1dc7785d0c57388765d08c94bd82e941a190ea0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e32a19c54e7d87c8e3216c3ada29a27442cfa103', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454ba2c9a68e862f9192b07a8d0e6ce0b4bbfba1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eb655ce1965713a9c178c2129c86126cd3725e6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c981fbe5e85ad16b26ef4ad247a86fc40be80e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4329021a75151a621f9457454f881c5a410037b9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1356ccbda486686bf18268f80f3057e5929ba0e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e04891a88d71ab4c6e76263f637792edac6a52c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43e16c1c761d75ed5899be772bb527e8d5af183f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f46860fbfeeeea07d19f20a2d0e1e44c1bba8bee', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4447a10bc4d8dea28386834b1754e3f4d8297c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33b6a4f950d81a71bcc62b0fd640b393a6a81a49', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ecd2aebbe4d83648f8b9fde7729c063db7c789', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0135760abfb93f2f90d345023274b60a7daa22b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0576be85ae5fe4c130b387ba3588e29966c9aec1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc7977ca87f7d9cf7c1cce9a83ecb31f06410b2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2553640ff85ad05352d72afe5ae104ccd8ca1df', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397b33832af36960f09d4fc0860e034e4e5d0267', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0ff6d934f96a8fdd143b6085098b4680afe18c2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf75244ae42996cabd94b16d0d765dfa82646a20', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '074a921b125944cee26f71996d10e2bfcac6c513', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136060b1f719d83d4e580d3b627b757bef0a51eb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86b834aa46cf6f87bb3ae636b2f7f45382bf373b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab96a2b1381971e0c93f9931315e9ac7fbcbef1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be6891238128ecb34b86a5dc298d049646f6b87d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9707f8d8ad618a32554b450eb284fd6ab7d0d1e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bf4c9f77952aaad70c34202f36699146cf9fec', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34c35d7d414cd47d5e40254b01f9b41c063c5686', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe266d04b3a639a47fa6c19f1f1742ef34f28b13', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8f2f2cd151f3d3e57fd5782f566a0fc41e351b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0534db330906f04a19591ac16435d00997dbc63d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '915a671077389461405a7fef8b317dc8337a8eaa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4425ac07ebd5cf0d3cdcea387bfa38c6be1eff', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '540c7497a0adc82ee0f5afb6ea4442795d47d4ae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c00da8043ff08500fcefd07e418754ac9385e16e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f0ce46759e7765df451249669ee9680a9d23b60', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa86f2a29e77e1b503e013d7e7daaf79629efe94', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38555e09322d0e8c4bbbc90bf7a8623e85b9a2de', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f89649c9b212efa1bd61d44ea2cc368a2828cc6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68a1949bb3294b957eae335f680a5dc3bfc9d22b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c19d2f2cd586839fd0d20f53f2f3cccf0eab64b9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d7784bf89117b026f838fc77bc52145e98f241', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fff80c0f444ba59283352aee87b93cf3dfa20e4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f283485672df482b64acde86026ca82fb69829c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8506d0bcb777808f56c748fe055af6e4e444872f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71bf183d44bf4f44dfd78e465761aa9be93892d6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3933e7645d33e4ff110939588cb5346a2f39c2be', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e75c9d11a6e53e53a7b869dfcd214df8b4e658', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '425c7fdf0d0f6839c6b54ad180250924493d2325', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca2be4c87e49e8644ea1a08431340c87f5ee19b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0710437cf38e08329b8771f3ff3beaf51c41ccb7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006cd744af4262611230701d19307e98611ec422', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd80c282e211bd668405e19aa5b68159738ec640', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcd32c120cc76411416ec207a27161f651eacc72', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a7edd78d9b367600c42e893c4692efdccca194', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6268b30da41d7eab9d82eca2aa39a27c1c05bc26', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2a9bcfd3b0caa1bab07e1b8f5744046be0f9fde', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '792c682d28d34907dfe183cbc9c88634a480ba40', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '845265788dafc6ae512aa896b28f862fb1d1a3ca', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8134eaefac6ea6b75332631012fff96db1fa3efa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a60beeeba62c405f391eb81cb5cc2986752446ed', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a08d058e766aceb536debc15e7086eeea7ae598', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13538d3045aa154b288b82e2991962f107f70d32', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a5fba3b48c1e33b292f7f31551106736590c46f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '274c9fa4bc5e0f4bc6d77f0cd28a1969d0bc913e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49686eb44f1e1e8fd896e71b3762bce671e851da', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3b6c9816697b8a760d76a16b836d4112d3dee4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b7a5a95f6e7b4cce9774db8ea6459eeb86711f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f5b2a8cd6392cd726c19ace50ca9efe573aeaf', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a52caba4c649bc134330645282096bcdf9a54e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf9694bd326949da9097c5107832820a2e3b87c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73029220fa510c62b98e0f90698e00148421cf83', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77c8d82fdd7dc0ea6ebe1935281c5f6dfc18bd5a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e2565a910ce7e823650311efee013a519bdd455', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc0d8ef2fa383df405a6c46e287aed8f495e7113', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de26dd4246944d9c5969d88258f3922fd6b739e7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76bfc3987679b27e7ffef232658147d05353d4c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1967c0fc71cd7cd3e7dead4648a433f50dd56fa5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}]",Harshit Maurya,30816844,,User,,41,,123,68
455815074,New Beats with UI [GSoC 2020],"PR history:
#2861 (Continuation of #2512)
#2844 

Beatgrid editing operations for editing BPM (variable) and Time Signature (variable) will be implemented in this PR. The backend and GUI will be simultaneously developed.

TODO:
- [x] Edit time signature at arbitrary downbeats.

- [x] Edit BPM at arbitrary beats.

- [x] Hybridise BeatGrid and BeatMap implementations to allow beat jump before track.

- [x] Fix TimeSignatureShouldNotChangeBpm Test.

- [ ] Write more tests for new code.

- [ ] Improve editing UX.

- [ ] The leftmost beat disappears too early when waveform scrolls. The features such as markers and downbeat triangles should be visible even if the beat is not on screen.

- [ ] Use interbeat distance to eliminate beats.",False,2961,https://api.github.com/repos/mixxxdj/mixxx/pulls/2961,https://github.com/mixxxdj/mixxx/pull/2961,open,5428,3839,104,352,129,231,5,0,"[{'name': 'skins'}, {'name': 'library'}, {'name': 'ui'}, {'name': 'build'}, {'name': 'code quality'}]",2020-07-23 16:07:40+00:00,,0.0,,"[{'comment_id': 459572325, 'comment_body': ""Why are these separate messages? Also, aren't we adding a color for sections?"", 'comment_created': datetime.datetime(2020, 7, 23, 16, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 459573083, 'comment_body': 'We should have either Beats or BpmMarkers. Storing both is redundant and a likely source of bugs.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 459585234, 'comment_body': 'update this with the changes from #2924', 'comment_created': datetime.datetime(2020, 7, 23, 16, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 459590355, 'comment_body': 'These can be merged into only the SectionMarker. And we do have Color in the latest commits.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 459591073, 'comment_body': 'We only have the LegacyBeat for old types. We are only using BpmMarkers now.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 459592302, 'comment_body': ""Or maybe I should remove or comment Sections and Phrases from the protobuf since they won't be implemented in this PR anyways."", 'comment_created': datetime.datetime(2020, 7, 23, 16, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 459600159, 'comment_body': ""Okay, let's comment those out for now. We can uncomment them when we start to use them."", 'comment_created': datetime.datetime(2020, 7, 23, 17, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 459762581, 'comment_body': 'OTHER should be the first value, followed by the specified variants. The first enum value is also the default, not need to specify it redundantly (see below).', 'comment_created': datetime.datetime(2020, 7, 23, 22, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459762869, 'comment_body': 'This default value is redundant: https://developers.google.com/protocol-buffers/docs/proto#optional', 'comment_created': datetime.datetime(2020, 7, 23, 22, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459763110, 'comment_body': 'unnecessary default', 'comment_created': datetime.datetime(2020, 7, 23, 22, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459763148, 'comment_body': 'unnecessary default', 'comment_created': datetime.datetime(2020, 7, 23, 22, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459763777, 'comment_body': ""I don't recommend to specify default strings on the protocol level. An empty string is perfectly ok. The application(!) might assign a default, predefined upon creation."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459764056, 'comment_body': 'Redundant default when designing the enumeration appropriately with the canonical default value as the first value/variant.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459764251, 'comment_body': 'redundant default', 'comment_created': datetime.datetime(2020, 7, 23, 22, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459764944, 'comment_body': '`first_downbeat_index` would be more specific. This terminology is already used for `Beats`, please consider to apply it consistently for all messages that are defining a range, i.e `Section`, `PhraseMarker`.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459766523, 'comment_body': 'Naming: Why just `Section` but `PhraseMarker` and not `Phrase`?', 'comment_created': datetime.datetime(2020, 7, 23, 22, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459767336, 'comment_body': ""Why do we need to specify a default color at the protocol level? This is an arbitrary decision and doesn't belong here. Implicitly using (0, 0, 0) is also arbitrary, but avoids to convey any special meaning."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459768213, 'comment_body': 'I agree that this is the only exception where special default values are acceptable.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459872109, 'comment_body': 'Here we need something to annotate the accented beats we want to see on the waveforms. \r\nThis is required to annotate odd time signatures with high denominators. Like the Igorrr track.  \r\n\r\nI like the idea of @crisclacerda  to use the Shorthand Notation for Musical Rhythm (SNMR)\r\nEither in the ASCII or binary format. \r\nIgorrr:  \r\n14/16\r\nHH--\r\n10001000100100\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 24, 6, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 459873195, 'comment_body': 'We have no consensus that such complexity is wanted.', 'comment_created': datetime.datetime(2020, 7, 24, 6, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460145820, 'comment_body': 'Are you still the opinion to annotate the Igorrr track with changing speeds inside a measure?\r\n', 'comment_created': datetime.datetime(2020, 7, 24, 16, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460162885, 'comment_body': 'I never suggested that.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460248520, 'comment_body': ""Let's get this working before getting carried away implementing more features."", 'comment_created': datetime.datetime(2020, 7, 24, 19, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460282651, 'comment_body': 'What did you suggest? ', 'comment_created': datetime.datetime(2020, 7, 24, 20, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460336257, 'comment_body': 'Do we really need other? And the even intro and outro.\r\nFirst section is intro, last section is outro, all others are other?', 'comment_created': datetime.datetime(2020, 7, 25, 0, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 460348151, 'comment_body': 'I believe we could annotate it in 3 ways, odd signature, changing tempo inside a measure or the note simply being outside the beat. These all in way makes sense, and unless one have to the original sheet music, or the daw project there is no possible way of knowing which one is the ""ground truth"". What is important for us are the use cases, sync and quantizing.\r\n\r\nThe odd signature allows to quantize to the notes without add messing to sync.\r\nThe changing tempo inside the measure also allows us to quantize nicely but will cause sync to warp the beats.\r\nFinally the note being outside the beat does not allows to sync and does not allow to quantize either.\r\n\r\nIdeally we should be flexible to support all. \r\n\r\nFor now to support the odd signatures all we need is an extra 32 bit int together with the time signature in the proto to save the SNMR binary format. Then we need some code to hide some beats based on that, and some way for the user to add or edit those.', 'comment_created': datetime.datetime(2020, 7, 25, 1, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 460366803, 'comment_body': ""As it is no difference between a int32 and a int 64 inside the prototype let's go with int64 this way we have without a doubt enough beats. "", 'comment_created': datetime.datetime(2020, 7, 25, 5, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460367123, 'comment_body': 'We use static casts in this case, to have it clear distinguished from a function call.  ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460367322, 'comment_body': 'Maybe we can consider to add a function:\r\n```\r\npCurrentBeats->findFirstBeat();\r\n``` ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460368556, 'comment_body': 'I think -2 was correct, because we are already ahead the current beat. \r\nIn this case -1 will return the current and not the previous beat. ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460369701, 'comment_body': 'mixxx::kInvalidFramePos and samplePosToFramePos? ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460369849, 'comment_body': 'samplePosToFramePos() ? ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460370083, 'comment_body': 'We discussed that earlier as well. The first section might not be the intro. We may resume the discussion on Zulip if there are doubts on this.', 'comment_created': datetime.datetime(2020, 7, 25, 5, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 460370237, 'comment_body': 'You must not call getSampleOfTrack() twice in a single function,\r\nelse the values might be unrelated due to a write in between. \r\n\r\nIn this case you should make a local copy first. \r\n', 'comment_created': datetime.datetime(2020, 7, 25, 6, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460374536, 'comment_body': ""First downbeat specifies an offset in downbeats for starting bar in a track. It's not relevant for sections. Sections only need to know the bar number aka the downbeat index."", 'comment_created': datetime.datetime(2020, 7, 25, 6, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 460427077, 'comment_body': '```suggestion\r\nconstexpr int kMinBeatsPerBar = 1;\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 17, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460428082, 'comment_body': '```suggestion\r\n    m_pBeatLengthBox->addItem(""1"");\r\n```\r\nNo need to translate numbers', 'comment_created': datetime.datetime(2020, 7, 25, 17, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460438100, 'comment_body': 'This does not work how I expect. I think changing the note value should not add or remove any downbeats. Instead, it should insert new beats half way between each beat to double the note value or remove every other beat to half the note value.', 'comment_created': datetime.datetime(2020, 7, 25, 19, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460443546, 'comment_body': "">  The changing tempo inside the measure also allows us to quantize nicely but will cause sync to warp the beats.\r\n\r\nRight, marking a complex rhythm as changing tempos does not make sense. I never suggested this.\r\n\r\n> For now to support the odd signatures all we need is an extra 32 bit int together with the time signature in the proto to save the SNMR binary format. Then we need some code to hide some beats based on that, and some way for the user to add or edit those.\r\n\r\nI don't agree that this is necessary nor do I understand why it is desirable. I would appreciate if we drop this idea at least for now and focus on getting this PR done. More features for edge cases can be added later as long as we don't encode assumptions into the data structure that prevent them."", 'comment_created': datetime.datetime(2020, 7, 25, 20, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460450051, 'comment_body': ""> Right, marking a complex rhythm as changing tempos does not make sense. I never suggested this.\r\n\r\nCool, we have a common sense here. But how do you like to annotate the Igorrr track? \r\n\r\n> I don't agree that this is necessary nor do I understand why it is desirable.\r\n\r\nDid you read my Zulip post whit the screen shots of down beat-matched tracks? Down-beat matching is the mayor use case for me. I am happy to discuss alternative Ideas, but for now I don't see any better way. \r\n\r\n> More features for edge cases can be added later as long as we don't encode assumptions into the data structure that prevent them.\r\n\r\nUnfortunately this is not an edge case. The way how and if we represent different rhythms in a measure is essential for the workflow. Sure, the Igorrr track is an edge case with no real value for beat matching, but if we solve this problem everything else is solved. Real use cases are 9/8 and 7/8 tracks which should receive first class support among easy 4/4 and 3/4 tracks.      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 25, 21, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460452261, 'comment_body': 'I think the numbers should be arranged vertically as they are on sheet music.', 'comment_created': datetime.datetime(2020, 7, 25, 22, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460483316, 'comment_body': '```\r\noptional int64 snmr_bins = 3 [ default = 0 ]\r\n```\r\nBinary Shorthand Notation for Musical Rhythm in binary format.\r\n\r\n0 = invalid value, all metronome beats annotated.\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 26, 6, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460759894, 'comment_body': 'Thanks for noticing that. I might have hastily converted that while converting samples to frames. Apparently, this line is not covered by any test case. I was able to change this number to anything and all tests passed.', 'comment_created': datetime.datetime(2020, 7, 27, 9, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 460905586, 'comment_body': 'Good idea to move this to a separate file. I may be useful in another context.', 'comment_created': datetime.datetime(2020, 7, 27, 13, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460906413, 'comment_body': ""Oh I see you're already using it in 2 classes now."", 'comment_created': datetime.datetime(2020, 7, 27, 13, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460906751, 'comment_body': '```suggestion\r\nclass WaveformBeatChangeMarker final {\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 7, 27, 13, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 463511354, 'comment_body': '```\r\n 7/13 Test #45: BeatsTest.ChangingTimeSignatureShouldNotChangeBpm ...***Failed    0.21 sec\r\nfaad2::LibLoader - Successfully loaded FAAD2 library ""libfaad.so"" version 2.9.2\r\nNote: Google Test filter = BeatsTest.ChangingTimeSignatureShouldNotChangeBpm\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from BeatsTest\r\n[ RUN      ] BeatsTest.ChangingTimeSignatureShouldNotChangeBpm\r\nDEBUG ASSERT: ""m_beatsProto.time_signature_markers_size() > 0"" in function void mixxx::BeatsInternal::generateBeatsFromMarkers() at /home/jan/Projects/mixxx/src/track/beats.cpp:829\r\nDEBUG ASSERT: ""m_beatsProto.time_signature_markers_size() > 0"" in function void mixxx::BeatsInternal::generateBeatsFromMarkers() at /home/jan/Projects/mixxx/src/track/beats.cpp:829\r\n/home/jan/Projects/mixxx/src/test/beatstest.cpp:456: Failure\r\nExpected equality of these values:\r\n  oldBpm\r\n    Which is: 8-byte object <00-00 00-00 00-00 4E-40>\r\n  newBpm\r\n    Which is: 8-byte object <00-00 00-00 00-00 5E-40>\r\n[  FAILED  ] BeatsTest.ChangingTimeSignatureShouldNotChangeBpm (1 ms)\r\n[----------] 1 test from BeatsTest (1 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 1 test from 1 test case ran. (1 ms total)\r\n[  PASSED  ] 0 tests.\r\n[  FAILED  ] 1 test, listed below:\r\n[  FAILED  ] BeatsTest.ChangingTimeSignatureShouldNotChangeBpm\r\n\r\n 1 FAILED TEST\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 9, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 463516870, 'comment_body': 'Even after deleting my Mixxx directory, I\'m hitting this debug assertion when I load a track onto a deck and the analysis finishes:\r\n```\r\nDEBUG ASSERT: ""m_beatsProto.time_signature_markers_size() > 0"" in function void mixxx::BeatsInternal::initWithAnalyzer(const QVector<mixxx::FramePos>&, const QVector<mixxx::track::io::TimeSignatureMarker>&) at /home/jan/Projects/mixxx/src/track/beats.cpp:348\r\nAborted (core dumped)\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 9, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 463739087, 'comment_body': 'I am working on this. This is a new test which is needed since we can change beat length now by changing the time signature. So the BPM calculation algorithm will be changed accordingly.', 'comment_created': datetime.datetime(2020, 7, 31, 17, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 470304822, 'comment_body': 'Drawing this in the middle of the bertical height obscures the view of the waveform. I think it would be better at the top.', 'comment_created': datetime.datetime(2020, 8, 13, 23, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 470305584, 'comment_body': '```suggestion\r\n        QString barBeatString = QString(""%1:%2"").arg(\r\n```\r\nIMO the use of `.` to separate bars and beat numbers is confusing. It looks like one number with a decimal point. I propose using `:` as the separator instead.', 'comment_created': datetime.datetime(2020, 8, 13, 23, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 470741726, 'comment_body': 'I just took some inspiration from the Ableton grid. I would change it if it makes it more clear.', 'comment_created': datetime.datetime(2020, 8, 14, 16, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 472287468, 'comment_body': '@Be-ing this is what the Ableton beat and bar numbers look like:\r\n![55a6747deef35](https://user-images.githubusercontent.com/30816844/90533242-d8afd480-e195-11ea-9d9e-5aeebe6843ad.jpg)', 'comment_created': datetime.datetime(2020, 8, 18, 15, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 472532928, 'comment_body': ""I don't have a strong opinion either way. IIRC Rekordbox also uses the `bar.beat` notation. Does anyone else have thoughts on this?"", 'comment_created': datetime.datetime(2020, 8, 18, 22, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 472786125, 'comment_body': 'I suggest adopting the common notation that users are familiar with instead of re-inventing the wheel. The formatting should be moved into a public (member) function for reusability.', 'comment_created': datetime.datetime(2020, 8, 19, 7, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 473559092, 'comment_body': 'The triangles still look slightly too prominent IMO. How about 6?', 'comment_created': datetime.datetime(2020, 8, 20, 3, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 473561371, 'comment_body': 'okay', 'comment_created': datetime.datetime(2020, 8, 20, 3, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475005218, 'comment_body': 'This should always be available regardless of how the track was analyzed.', 'comment_created': datetime.datetime(2020, 8, 21, 23, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475060101, 'comment_body': ""Okay. I assumed variable bpm is not allowed when constant bpm is selected. I'll remove this comment."", 'comment_created': datetime.datetime(2020, 8, 22, 7, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475129758, 'comment_body': 'ping', 'comment_created': datetime.datetime(2020, 8, 22, 20, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475141953, 'comment_body': 'I think we should get rid of this arbitrary maximum limit and continue to hide more downbeats as the waveform is zoomed out more. We would need to synchronize the zoom of all the waveforms for this to be useful though.', 'comment_created': datetime.datetime(2020, 8, 22, 21, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475182428, 'comment_body': 'The waveform becomes smaller than the overview waveform if we go way past this limit.', 'comment_created': datetime.datetime(2020, 8, 23, 7, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475184023, 'comment_body': 'I think there was a PR which enables zoom sync on by default.', 'comment_created': datetime.datetime(2020, 8, 23, 7, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475187689, 'comment_body': 'mixxx::FramePos(0) is used very often. I suggest to define a constexpr for this constant, e.g. `kStartFramePos`. @Be How about the naming?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475187850, 'comment_body': 'With the new constant `mixxx::kStartFramePos` int/double inconsistencies like here become obsolete.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475187952, 'comment_body': 'I suggest defining a `constexpr int kFirstBeatIndex = 0`', 'comment_created': datetime.datetime(2020, 8, 23, 8, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475188137, 'comment_body': ""*slight* doesn't really fit for the naming, maybe *tiny* or *small*? @Be Any suggestions?"", 'comment_created': datetime.datetime(2020, 8, 23, 8, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475188391, 'comment_body': 'Please add the missing braces after reformatting. Also applies to other locations in this file.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475188763, 'comment_body': 'Replace `mixxx::Bpm(0.0)` and `mixxx::Bpm(0)` with just `mixxx::Bpm()` or the corresponding empty initializer `{}`', 'comment_created': datetime.datetime(2020, 8, 23, 8, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475189759, 'comment_body': 'Please use `kEngineChannelCount` instead of the literal `2.0`. This applies to multiple locations in this and maybe other files.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475189899, 'comment_body': ""Same here, don't hardcode numeric literals in the channel transformation calculation."", 'comment_created': datetime.datetime(2020, 8, 23, 8, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190052, 'comment_body': 'Are all the reformattings in this file really needed? They might cause merge conflicts.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190208, 'comment_body': 'reduceBpmPrecision()? Requirements on the precision may vary depending on the use case.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190342, 'comment_body': 'Please use CamelCase for enum class variants, i.e. `Beats` and `BeatsAndDownbeats`', 'comment_created': datetime.datetime(2020, 8, 23, 8, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190778, 'comment_body': 'You could then define `constexpr BeatGridMode kDefaultBeatGridMode = BeatGridMode::BeatsAndDownbeats` and the comment becomes obsolete. Please use this constant wherever appropriate.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190878, 'comment_body': 'Is the explicit cast to `int` needed?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475191108, 'comment_body': 'Please add a note that the code has been commented out because it anticipates future extensions. ', 'comment_created': datetime.datetime(2020, 8, 23, 8, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475191293, 'comment_body': 'Are all those reformattings really needed or were they caused by a former version of the pre-commit hook?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475191452, 'comment_body': 'Please use `enum class` for both and CamelCase enum variant naming', 'comment_created': datetime.datetime(2020, 8, 23, 8, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475191662, 'comment_body': 'I suggest extracting those enums from the class with their own names, i.e. `BeatType` and `BeatMarker`. ', 'comment_created': datetime.datetime(2020, 8, 23, 8, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475192706, 'comment_body': 'Why not explicitly *beat in bar index*? Would be more concise and readable imo.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475193561, 'comment_body': ""For new classes we tend to follow the Qt naming by omitting the `get` prefix, i.e. just `beatIndex()`. Even more appropriate if there aren't any setters."", 'comment_created': datetime.datetime(2020, 8, 23, 9, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475193882, 'comment_body': 'constexpr', 'comment_created': datetime.datetime(2020, 8, 23, 9, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475193959, 'comment_body': 'Could become a constexpr after declaring the constructor as constexpr', 'comment_created': datetime.datetime(2020, 8, 23, 9, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475194455, 'comment_body': 'This PR contains commits since Nov 2019. This could be the result of the old hooks.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475212269, 'comment_body': ""> The waveform becomes smaller than the overview waveform if we go way past this limit.\r\n\r\nIs that a problem? I don't think so.\r\n\r\n> I think there was a PR which enables zoom sync on by default.\r\n\r\nI forgot there is already an option for this. The option should be removed. There is no use case for having it disabled."", 'comment_created': datetime.datetime(2020, 8, 23, 12, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218336, 'comment_body': '#3040', 'comment_created': datetime.datetime(2020, 8, 23, 13, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218463, 'comment_body': 'How about `kStartFrame`?', 'comment_created': datetime.datetime(2020, 8, 23, 13, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218581, 'comment_body': '""small""', 'comment_created': datetime.datetime(2020, 8, 23, 13, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218828, 'comment_body': 'Perhaps it would have been better to not do the reformatting in this PR, but now that it is there, I think it would be more trouble than it is worth to undo it. Undoing reformatting has already caused trouble with this branch.', 'comment_created': datetime.datetime(2020, 8, 23, 13, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218928, 'comment_body': 'Maybe use qFuzzyCompare here?', 'comment_created': datetime.datetime(2020, 8, 23, 13, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475219033, 'comment_body': 'Yes, it is an `enum class`.', 'comment_created': datetime.datetime(2020, 8, 23, 13, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475220532, 'comment_body': ""Ok, but let's include the whole type name in the constant. It is easier to remember and acts like a static constructor."", 'comment_created': datetime.datetime(2020, 8, 23, 13, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475225940, 'comment_body': '`kStartFramePos` works fine', 'comment_created': datetime.datetime(2020, 8, 23, 14, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475242715, 'comment_body': ""I'm quite confused by the signaling between Track and Beats. Beats should signal to Track when Beats is updated, but Track doesn't directly edit Beats so why are signals from Track connected to Beats::slotTrackBeatsUpdated? I'm unclear why slotTrackBeatsUpdated exists. @uklotzde any thoughts on this?"", 'comment_created': datetime.datetime(2020, 8, 23, 17, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475246054, 'comment_body': 'Those cyclic signal/slot connections seem to be wrong. The connections to the signals Track::beatsUpdated and Track::changed must be removed.\r\n\r\nThe Beats object must not react to changes in the Track object. It is the responsibility of the Track object to update or replace the Beats object as needed.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475246168, 'comment_body': '@Be-ing Good catch!', 'comment_created': datetime.datetime(2020, 8, 23, 17, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475246539, 'comment_body': ""I think this may mostly be an issue of confusing naming. All that Beats::slotTrackBeatsUpdated does is get the sample rate and duration from the Track. I think this could be replaced by passing these parameters to the Beats constructor. An instance of Beats should not outlive Track or moved between Track instances, so if I understand correctly, there shouldn't be any scenario where Beats needs to get updated information from Track."", 'comment_created': datetime.datetime(2020, 8, 23, 17, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475262881, 'comment_body': 'Add a blank line between functions.', 'comment_created': datetime.datetime(2020, 8, 23, 20, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475263780, 'comment_body': 'This should be rewritten to get the BPM from the last BPM marker. If the frame is before the start of the track, get the BPM from the first BPM marker.', 'comment_created': datetime.datetime(2020, 8, 23, 20, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475265687, 'comment_body': ""The track has a pointer to the Beats object and is supposed to update it directly by calling a method when those properties are updated. It doesn't matter if the Beats object gets orphaned. Then it won't be updated by the track anymore.\r\n\r\nIn the long term, only Track should be a QObject that sends signals. Neither Beats nor individual Cue objects are needed."", 'comment_created': datetime.datetime(2020, 8, 23, 20, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475267904, 'comment_body': 'Did you intend to do something with this `indices` local variable? Currently it does nothing.', 'comment_created': datetime.datetime(2020, 8, 23, 21, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475268114, 'comment_body': ""This comment doesn't seem to be relevant anymore. (I'm not sure it ever was?)"", 'comment_created': datetime.datetime(2020, 8, 23, 21, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475268878, 'comment_body': 'Using `getBpm` here assumes the track is one constant tempo. The local BPM should be used.', 'comment_created': datetime.datetime(2020, 8, 23, 21, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475269294, 'comment_body': 'Here we need to extrapolate beats before the beginning of the track based from the first tempo and downbeat markers.', 'comment_created': datetime.datetime(2020, 8, 23, 21, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475270387, 'comment_body': 'Rename this `getGlobalBpm` for clarity.', 'comment_created': datetime.datetime(2020, 8, 23, 21, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475274106, 'comment_body': ""I don't understand why this exists. Why isn't the position of the first beat sufficient?"", 'comment_created': datetime.datetime(2020, 8, 23, 22, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475275663, 'comment_body': 'This seems problematic. If I understand correctly, shifting any downbeat shifts the downbeats for the entire track; there is no way to shift the downbeats for part of the track. I think we need to be able to shift downbeats between arbitrary frames or beat indices.', 'comment_created': datetime.datetime(2020, 8, 23, 22, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475275787, 'comment_body': 'This option should be removed, so Beats should not have anything to do with this option.', 'comment_created': datetime.datetime(2020, 8, 23, 22, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475275809, 'comment_body': ""Shouldn't we just use a single int32 here and ignore the most significant byte? We only use 3-byte RGB anyway. "", 'comment_created': datetime.datetime(2020, 8, 23, 22, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 475276034, 'comment_body': ""I suppose we could, but then we would need to do some bitwise math to convert between the protobuf value and the data we need. I'd prefer to make the protobuf format more straightforward."", 'comment_created': datetime.datetime(2020, 8, 23, 22, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475276633, 'comment_body': ""Can't we just pass it to mixxx::RgbColor? I think so.\r\n\r\nI fear that using separate int32 values opens more room for strange bugs. What happens if a RGB channel value is greater than 0xFF? What happens if a value is negative? "", 'comment_created': datetime.datetime(2020, 8, 23, 22, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 475276719, 'comment_body': ""This is commented out from the protobuf, so we don't need to determine this now."", 'comment_created': datetime.datetime(2020, 8, 23, 22, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475289962, 'comment_body': 'On further thought, this may be okay. Having only this one index to shift downbeats ensures that all the downbeat markers are consistent with the time signatures. If there is a section in the middle of the track which is preceded by a single pick up beat, that pickup beat could be marked as a downbeat in its own measure.', 'comment_created': datetime.datetime(2020, 8, 24, 0, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475566710, 'comment_body': 'Apparently, I cannot declare this constructor with constexpr since it includes `mixxx::TimeSignature` which in turn includes `track::io::TimeSignature` (generated by `protoc`) which is not constexpr. Am I missing something? Please let me know if I should read more on this somewhere.', 'comment_created': datetime.datetime(2020, 8, 24, 12, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475603970, 'comment_body': 'Ok, then this is not possible.', 'comment_created': datetime.datetime(2020, 8, 24, 13, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475755046, 'comment_body': 'It is exactly what this encodes. Did you mean something else?', 'comment_created': datetime.datetime(2020, 8, 24, 16, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475812869, 'comment_body': 'Sure. But what is the lower limit?\r\nThe `BeatGrid` generated beats on-demand using the `BeatGridIterator` based on what part of the track is on the screen in the waveform. We cannot store an arbitrarily large number of beats in our `BeatMap` like beats cache just to have beats before the start of the track.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475909921, 'comment_body': ""I don't think there should be a lower limit. I think this should generate beats on demand at any arbitrary position before the start of the track like the legacy BeatGridIterator."", 'comment_created': datetime.datetime(2020, 8, 24, 21, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475915098, 'comment_body': 'I think `first_beat_frame` would be a clearer name.', 'comment_created': datetime.datetime(2020, 8, 24, 21, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475918716, 'comment_body': 'This looks like a significant change. Are you sure this is what we want?', 'comment_created': datetime.datetime(2020, 8, 24, 22, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475919408, 'comment_body': 'Use `///` for documentation comments', 'comment_created': datetime.datetime(2020, 8, 24, 22, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475927722, 'comment_body': 'I agree, `beatInBar` is more straightforward than `barRelativeBeatIndex`.', 'comment_created': datetime.datetime(2020, 8, 24, 22, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475932040, 'comment_body': '@uklotzde could you take a look at this and 4c7d3d7? ', 'comment_created': datetime.datetime(2020, 8, 24, 22, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 476119768, 'comment_body': ""I could not find any way to annotate function parameters with '///' comments. I think it is important to describe the parameters. For starters, I can see a nice and detailed function definition when I hover at a function in my IDE."", 'comment_created': datetime.datetime(2020, 8, 25, 3, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 476201373, 'comment_body': '- redundant `inline`\r\n- should be `const`\r\n- ~~locking is missing~~ (wrong class)', 'comment_created': datetime.datetime(2020, 8, 25, 6, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476201444, 'comment_body': '- should be `const`\r\n- ~~locking is missing~~', 'comment_created': datetime.datetime(2020, 8, 25, 6, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476202222, 'comment_body': 'should be `const`\r\n', 'comment_created': datetime.datetime(2020, 8, 25, 6, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476202343, 'comment_body': '- should be `const`\r\n- locking is missing', 'comment_created': datetime.datetime(2020, 8, 25, 6, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476202455, 'comment_body': '- redundant `inline`\r\n- should be `const`\r\n- locking is missing', 'comment_created': datetime.datetime(2020, 8, 25, 6, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476202590, 'comment_body': 'The default should use the new constant', 'comment_created': datetime.datetime(2020, 8, 25, 6, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476203069, 'comment_body': 'Instead of adding a comment you could name the parameter `trackDurationInSeconds`.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476203283, 'comment_body': 'Or the function itself, i.e. `setTrackDurationInSeconds` to be more specific.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476206334, 'comment_body': 'Replacement(s) for the copy constructor:\r\n```\r\nexplicit Beats(const Track* track, const BeatsInternal& internal = BeatsInternal());\r\nBeats(const Beats&) = delete;\r\n\r\nBeatsInternal getInternal() const; // return a copy of internal while locked\r\n```\r\n\r\nBeats object cannot be copied as a whole, only explicitly from a Track object and a copy of BeatsInternal.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476208032, 'comment_body': 'Thanks for the added suggestions.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 476210158, 'comment_body': 'The signature of `Track::setBeats()` must be changed:\r\n\r\n```\r\nvoid Track::setBeats(const mixxx::BeatsInternal& beats) {\r\n    auto pBeats = std::make_shared<mixxx::Beats>(this, beats);\r\n    QMutexLocker lock(&m_qMutex);\r\n    setBeatsMarkDirtyAndUnlock(&lock, pBeats);\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 6, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476211380, 'comment_body': 'The visibility of all constructors should be changed from `public`  to `final` with `Track` as a friend class. Only the Track itself is allowed to construct new Beats object by passing `this` as the first parameter.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476258414, 'comment_body': '@Be-ing I was using the horizontal layout as inspired by musescore.\r\n![Horizontal time signature boxes](https://musescore.org/sites/musescore.org/files/styles/width_740/public/TimeSig.jpg?itok=6nZcIBwR)', 'comment_created': datetime.datetime(2020, 8, 25, 8, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 476258692, 'comment_body': 'I think adding a `/` in between should do the job.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 477073051, 'comment_body': 'The sample rate should only be used internally and not exposed in the public interface.', 'comment_created': datetime.datetime(2020, 8, 26, 6, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477076102, 'comment_body': 'I suggest to replace setSampleRate() and setDuration() seconds with a single function:\r\n\r\n`void updateStreamInfo(const mixxx::audio::StreamInfo& streamInfo);`\r\n\r\nYou could still store only the sample rate and duration internally, but please prefer to reuse the corresponding type-safe classes instead of plain int or double.\r\n\r\nInstead of `this` the track object could pass an initial value `streamInfo` in the constructor. Furthermore, the moveToThread() should be moved out of the `Beats` constructor. This is the responsibility of the caller, i.e. the `Track` object.\r\n\r\nWith those changes the `Beats` class does not need to know that there is a *track*. All constructors could remain public.', 'comment_created': datetime.datetime(2020, 8, 26, 6, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477081870, 'comment_body': ""We might also store the whole `StreamInfo` in BeatsInternal instead of individual values:\r\n\r\n```\r\nstd::optional<mixxx::audio::SteamInfo> m_streamInfo;\r\n```\r\n\r\n- it could be missing/unknown\r\n- it is injected from outside and doesn't belong to the other properties that are stored in the protobuf, i.e. it is a *transient* property"", 'comment_created': datetime.datetime(2020, 8, 26, 7, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477086659, 'comment_body': 'It would be even favorable to keep this `m_streamInfo` member in `Beats` and instead pass the current value of selected properties as additional function parameters to `BeatsInternal` only when needed.', 'comment_created': datetime.datetime(2020, 8, 26, 7, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477089488, 'comment_body': 'Since all properties of `StreamInfo` have (invalid) default values we could try to omit wrapping it into `std::optional` to not complicate the implementation.', 'comment_created': datetime.datetime(2020, 8, 26, 7, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477219071, 'comment_body': 'Here we mixxx time based info with smaples based info in one data structure. \r\nWe should not do this. Instead we should give here the beat length in samples. This is what we need anyway when accessing the data. \r\nAnd that is the output of the analyzer. ', 'comment_created': datetime.datetime(2020, 8, 26, 11, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477219799, 'comment_body': 'Here is a unnecessary conversion and iSampleRate dependency. ', 'comment_created': datetime.datetime(2020, 8, 26, 11, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477221668, 'comment_body': 'and here', 'comment_created': datetime.datetime(2020, 8, 26, 11, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477221919, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 8, 26, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477222235, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 8, 26, 11, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477225157, 'comment_body': ""I have just skimmed through the code and it turns out that we can remove sample rated dependency in various places. \r\nThis avoids also rounding issues. Let's store the data in the format it is detected and needed later. No conversion to human readable format. \r\n\r\nAdding a sample rate field to the protobuffer is however a good idea to be able to create the time based representation at any time. \r\n\r\n  "", 'comment_created': datetime.datetime(2020, 8, 26, 11, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478402235, 'comment_body': 'This would mean creating a hybrid of `BeatMap` and `BeatGrid` for the `BeatsIterator` and all functions like `findNthBeat`.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 479584501, 'comment_body': ""I don't understand why removing Beats' reference to Track requires this change to BpmControl."", 'comment_created': datetime.datetime(2020, 8, 29, 0, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479609904, 'comment_body': '`getSampleRate` is made private in `BeatsInternal` class, so it is better to retrieve sample rate from the track itself.', 'comment_created': datetime.datetime(2020, 8, 29, 5, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 479637408, 'comment_body': 'Using a reference to a smart pointer is a bad idea. Because it does not increment the reference counter. It is basically a pointer to the location where the actual pointer is stored.\r\nThis pointer can change at any time.', 'comment_created': datetime.datetime(2020, 8, 29, 10, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479637652, 'comment_body': 'The same here. No reference to a smart pointer.', 'comment_created': datetime.datetime(2020, 8, 29, 10, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479638062, 'comment_body': 'This breaks the atomic assumption of m_pBeats.\r\nThe whole code works, because it holds a atomic pointer to a consistent beats dataset.\r\nThe track is a new dataset which changes independently.\r\nA calculations must be done based into the same atomic pointer. \r\nWe must assure that this pointer (m_pBeats) is only touched at one point during the callback.', 'comment_created': datetime.datetime(2020, 8, 29, 11, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479638605, 'comment_body': 'Please revert. We need a direct reference to the constant BeatsPointer. With guramteed matching data. The indirection via track object does not work.\r\n\r\nThis also reveals, that we need a track independent sample rate in the beats object. \r\nOnly this must be use, because only this gurantees to give the right sample value from the time based values. \r\n\r\nAn alternative would be to convert all values to samples when importing the data from the protobuf.', 'comment_created': datetime.datetime(2020, 8, 29, 11, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479640075, 'comment_body': 'The persistent, time-based beats object does not need a sample rate. Only the frame-based wrapper at runtime does. This fact that has never been up for debate so nothing new is ""revealed"" here.', 'comment_created': datetime.datetime(2020, 8, 29, 11, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 479721319, 'comment_body': 'This is strange that the Beats constructor takes a BeatsInternal argument which must be constructed elsewhere. I would expect something called ""BeatsInternal"" to only be a private member of Beats not used anywhere outside of Beats. I am not sure if this is an issue with the code architecture or ""BeatsInternal"" being a misleading name. @uklotzde what do you think?', 'comment_created': datetime.datetime(2020, 8, 30, 4, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479721584, 'comment_body': 'Should this still exist?', 'comment_created': datetime.datetime(2020, 8, 30, 4, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479721626, 'comment_body': '```suggestion\r\n    /// Starting from frame, return the previous\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 4, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479721741, 'comment_body': '```suggestion\r\n    /// value is the next beat position. Returns false if *at least one* frame is -1.  (Can return false\r\n```\r\n""Non- -1 values a guaranteed to be even"" is legacy from when this returned stereo samples and is no longer true.', 'comment_created': datetime.datetime(2020, 8, 30, 4, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479721780, 'comment_body': '```suggestion\r\n    /// in the track, or -1 if none exists.\r\n    FramePos findClosestBeat(FramePos frame) const;\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 4, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479722644, 'comment_body': ""The documentation in beats.h still refers to `-1` as the invalid value. IMO `-1` was a strange hack, but I'm not sure this is better. Maybe this should be `NAN`?"", 'comment_created': datetime.datetime(2020, 8, 30, 5, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479820552, 'comment_body': 'Think of `Beats` as the socket that deals with all the outer wiring and of `BeatsInternal` as the finished bulb that is just mounted in. Assembling it in place would be too complex because then you would need to mix the wiring with the assembly parameters.\r\n\r\nThis could be a use case for move construction, i.e. *r-value reference* in conjunction with `std::forward`. Unfortunately, C++ makes this semantics tedious to write whereas in Rust it is the default for both assignment (= name binding) and passing parameters.', 'comment_created': datetime.datetime(2020, 8, 30, 21, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 479831933, 'comment_body': '```suggestion\r\n    } else if (frame < getFirstBeatPosition()) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 23, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479990947, 'comment_body': 'By removing this function, the alternative would be three steps:\r\n1. clear()\r\n2. setBpm(bpm, index=0)\r\n3. setFirstBeatFrame(framePos)', 'comment_created': datetime.datetime(2020, 8, 31, 8, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 484083902, 'comment_body': 'Extracting a single line helper method getTrackBeats() would remove distracting redundancy from the code.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484084217, 'comment_body': 'Remove the `const` qualifiers from pass-by-value parameters if the signature has been modified in this PR.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484084594, 'comment_body': 'If needed add a new getter to `Track` that obtains all the needed information at once, wrapped into a custom `struct`/`class` that can be passed by value.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484084960, 'comment_body': 'If you store the sample rate twice you must ensure that the values are synchronized! Do not use an inconsistent set of parameters that is obtained from multiple places. Fetch data from `Track` atomically and update `Beats`/`BeatsInternal` consistently all at once.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484085214, 'comment_body': 'We have `mixxx::SampleRate`, no need to use double', 'comment_created': datetime.datetime(2020, 9, 6, 15, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484085533, 'comment_body': 'Storing a reference to the whole track object if we only need the sample rate is disproportionate and might be a hint that the design is not appropriate.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484087231, 'comment_body': 'If you implement `<`/`>` also implement `<=`/`>=`', 'comment_created': datetime.datetime(2020, 9, 6, 16, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484087441, 'comment_body': 'Only use inlining for very short and lightweight functions. Neither needed nor appropriate here.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484087499, 'comment_body': 'Please fix all EOF issues caused by missing newlines', 'comment_created': datetime.datetime(2020, 9, 6, 16, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484087781, 'comment_body': 'Move this constant definition into the .cpp file. Also, check that it is never used in another const declaration in another .cpp file. Initialization order of constants in different object modules is undefined in C++!! if in doubt, move it as a static, inlined method (= factory method) into `Beat`.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088200, 'comment_body': 'If the setters of BeatsInternal return a boolean that indicates if anything has changed or not we might be able to prevent a lot of unnecessary update signals!', 'comment_created': datetime.datetime(2020, 9, 6, 16, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088407, 'comment_body': 'If kInvalidBeat is used for only this purpose then std::optional<Beat> is more appropriate. It would also ensure that the caller must handle both possible outcomes.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088586, 'comment_body': 'Please use early return and break up the nesting. It is not obvious that all code paths actually return a value, although compilation should fail with a warning if not.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088644, 'comment_body': 'Locking is missing!', 'comment_created': datetime.datetime(2020, 9, 6, 16, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088811, 'comment_body': 'VERIFY_OR_DEBUG_ASSERT(isValid())? These functions should never be invoked on an invalid instance.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089080, 'comment_body': 'Please prefer the classical `typedef` instead of `using` as already discussed in the preceding PR', 'comment_created': datetime.datetime(2020, 9, 6, 16, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089141, 'comment_body': 'All forward declarations should also be moved below the include directives', 'comment_created': datetime.datetime(2020, 9, 6, 16, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089201, 'comment_body': 'explicit', 'comment_created': datetime.datetime(2020, 9, 6, 16, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089269, 'comment_body': 'Constants should start with a `k` followed by UpperCamelCase', 'comment_created': datetime.datetime(2020, 9, 6, 16, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089543, 'comment_body': '- explicit\r\n- BeatsInternal should be passed as the first and only argument\r\n- The 2nd parameter streamInfo is redundant, because this information is already included in BeatsInternal. Please remove it to avoid inconcistencies.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089666, 'comment_body': ""Don't rely on relative includes, always use the full path from src."", 'comment_created': datetime.datetime(2020, 9, 6, 16, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089916, 'comment_body': 'Please use the commonly known term `sampleRate` instead of introducing another name `framesPerSecond` for the same concept.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090108, 'comment_body': 'Such a long function should not be inlined.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090319, 'comment_body': 'This typedef is wrong here and must be moved into FramePos. A global mixxx::value_t must not be defined!!', 'comment_created': datetime.datetime(2020, 9, 6, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090462, 'comment_body': '`static constexpr value_t kStartValue = 0;`', 'comment_created': datetime.datetime(2020, 9, 6, 16, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090566, 'comment_body': 'm_dFramePos(kStartValue)', 'comment_created': datetime.datetime(2020, 9, 6, 16, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090725, 'comment_body': '```\r\nconstexpr FramePos kInvalidFramePos = FramePos(FramePos::kInvalidValue);\r\nconstexpr FramePos kStartFramePos = FramePos(FramePos::kStartValue);\r\n```\r\nDefine in corresponding value type kInvalidValue = ... as a static constexpr in FramePos.\r\n', 'comment_created': datetime.datetime(2020, 9, 6, 16, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091079, 'comment_body': 'In global namespace:\r\n```\r\nQ_DECLARE_TYPEINFO(mixxx::FramePos, Q_MOVABLE_TYPE);\r\nQ_DECLARE_METATYPE(mixxx::FramePos)\r\n```\r\n\r\nAlso, register the type with `qRegisterMetaType()` in mixxxapplication.cpp. Otherwise it could not be passed in signals between threads.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091131, 'comment_body': 'Remove preamble', 'comment_created': datetime.datetime(2020, 9, 6, 16, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091372, 'comment_body': 'moveToThread should be called immediately after creation, not sometimes later', 'comment_created': datetime.datetime(2020, 9, 6, 16, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091458, 'comment_body': 'Only do this immedately after creation, even though it would be possible later or at any time.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091547, 'comment_body': 'Explicitly use this->thread() for clarification about the context', 'comment_created': datetime.datetime(2020, 9, 6, 16, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091730, 'comment_body': 'Only lock once here!! This is not only a TODO but a FIXME.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091948, 'comment_body': 'This function is redundant and should be removed in favor of `QDebug operator<<(QDebug dbg, const Track& arg);` see below.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484092136, 'comment_body': '- include for `FramePos` types and mixxx::kEngineChannelCount is missing\r\n- enclose all functions into the `mixxx` namespace. No explicit qualification `mixxx::` needed by the caller due to *argument dependent lookup* in C++', 'comment_created': datetime.datetime(2020, 9, 6, 16, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093256, 'comment_body': 'Why has this check been removed? Should be VERIFY_OR_DEBUG_ASSERT', 'comment_created': datetime.datetime(2020, 9, 6, 17, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093299, 'comment_body': 'anonymous namespace  in header file is useless', 'comment_created': datetime.datetime(2020, 9, 6, 17, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093328, 'comment_body': 'Please move into a new .cpp file', 'comment_created': datetime.datetime(2020, 9, 6, 17, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093486, 'comment_body': 'Is this function really needed? Defining only a single, selected comparison operator is bad style.', 'comment_created': datetime.datetime(2020, 9, 6, 17, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093601, 'comment_body': 'Every base class needs a virtual destructor!', 'comment_created': datetime.datetime(2020, 9, 6, 17, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093777, 'comment_body': 'FIXME', 'comment_created': datetime.datetime(2020, 9, 6, 17, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093889, 'comment_body': '~WaveformRenderPlayMarker() override = default;', 'comment_created': datetime.datetime(2020, 9, 6, 17, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484099081, 'comment_body': 'And use ///', 'comment_created': datetime.datetime(2020, 9, 6, 18, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 484356106, 'comment_body': 'This serves as the default comparator in std algorithms that require ordering e.g. `std::lower_bound`', 'comment_created': datetime.datetime(2020, 9, 7, 10, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 484519139, 'comment_body': 'Ok, I suppose it makes sense to define the other comparison operators too then? @uklotzde WDYT?', 'comment_created': datetime.datetime(2020, 9, 7, 16, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 484527053, 'comment_body': 'The STL uses `std::less` as the default functor for strict ordering. The default implementation of `std::less` then invokes `operator<`.\r\n\r\nIt may be more appropriate to instead specialize `std::less` instead of implementing only one of the comparison operators.', 'comment_created': datetime.datetime(2020, 9, 7, 17, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484528407, 'comment_body': ""Not sure though how to correctly specialize `std::less` :grimacing: Even the Core Guidelines don't mention how to handle this situation correctly.\r\n\r\nOr just leave a comment that this only needed for the default ordering comparator std::less."", 'comment_created': datetime.datetime(2020, 9, 7, 17, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 485417989, 'comment_body': 'Perhaps I was told to do so. Earlier, frames were stored as integers, but now that we store frames as floating-point, the even check is not required.', 'comment_created': datetime.datetime(2020, 9, 9, 8, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 486431816, 'comment_body': 'Should this be a QFlags field instead? Maybe there are other kinds of beat highlights, e. g. Phase/section start. ', 'comment_created': datetime.datetime(2020, 9, 10, 15, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 486787270, 'comment_body': 'It is more save to use the sample rate stored in the beats object. This way there is no doubt that the data is consistent.', 'comment_created': datetime.datetime(2020, 9, 11, 5, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486788340, 'comment_body': 'Please store the beats pointer on the stack as is was implemented before. ', 'comment_created': datetime.datetime(2020, 9, 11, 5, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486788834, 'comment_body': 'Store betas pointer on stack. Please check every single occurring', 'comment_created': datetime.datetime(2020, 9, 11, 5, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486790376, 'comment_body': ""The same here, use the beat's sample rate."", 'comment_created': datetime.datetime(2020, 9, 11, 5, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486790738, 'comment_body': 'Please use curly braces.', 'comment_created': datetime.datetime(2020, 9, 11, 5, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486792439, 'comment_body': 'Store brats pointer on stack.', 'comment_created': datetime.datetime(2020, 9, 11, 6, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486804418, 'comment_body': 'We need here to make use of the values we have received with a single call to getBeatContext.\r\nThis gurantees that the values used for calculations are matching.\r\n\r\nI think we have room to refactor this a bit to be seconds independent and use the ratio compared to the master buffer instead, but that is out of the scope of this PR. Here we need to restore the old behavior.', 'comment_created': datetime.datetime(2020, 9, 11, 6, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486806150, 'comment_body': 'It might happen that a control update is received in between. Please revert.', 'comment_created': datetime.datetime(2020, 9, 11, 6, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486807063, 'comment_body': ""Please revert. We can't guarantee that this is always up to date. All used variables for calculation need to be atonic."", 'comment_created': datetime.datetime(2020, 9, 11, 6, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 487248229, 'comment_body': 'It was a design choice to make the sample rate unavailable to the public interface of the Beats class, since it is an internal implementation detail for it, and the sample rate is a property of the Track, not Beats.', 'comment_created': datetime.datetime(2020, 9, 11, 19, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 487248865, 'comment_body': '@uklotzde suggested creating a new method in `Track` to return both beats and sample rate as a single struct with locking. Should I do something like that?', 'comment_created': datetime.datetime(2020, 9, 11, 19, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 487278708, 'comment_body': 'Instead of revealing the sample rate those operations should be added as methods to `Beats` where they have access to the internal sample rate. The translation distance then needs to be specified in time units and is mapped to frames internally.', 'comment_created': datetime.datetime(2020, 9, 11, 20, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 487323286, 'comment_body': 'No, pBeats has already a sample rate and it is already received atomic. So there is no need to hack around that. \r\nOtherwise you have still the ongoing issue that both sample rates can differ later. ', 'comment_created': datetime.datetime(2020, 9, 11, 22, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 487323836, 'comment_body': 'Yes right, since bBeats is aware of the seconds representation it can take kSmallBeatsTranslateFactor directly. ', 'comment_created': datetime.datetime(2020, 9, 11, 22, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 495447879, 'comment_body': ""With this PR, I'll let it be. I'll change this to `QFlags` while implementing sections and phrases."", 'comment_created': datetime.datetime(2020, 9, 26, 11, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}]","[{'commit_sha': '51fdd4292d0999cc68dc2efae01dfd7e6622a619', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8009b69fc92c17ab4ba9aac860da73b203ad81', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a4bffb5385d8b4201fabadb51e98679a787ca9e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e905109b7a7e57edcbc2e067fd2142ceda3df1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e6625ae6fccf3bd0a3d2e35e11d156c37d81daa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec62228247421088b1334ba0451508102c665db8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91eb3d8c31b59dda40265c4fccc77f2f6ef5cf5f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9fd3333f6dc0be77cac727ca26d71ff469124b4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b962d7af7eed210d79d3427f31e42945ed99ec0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480f7f7ba44ea012efea27dcf946a6c8b71a3afd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65a0d84f3bc53fe1f486c2c6fa6c63c9956c5cd5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a49ebe0f736490f738fccb79657332399c246531', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4664ec7770be528d8f2a447f5fc81dde8819c4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b6d0122300f21acaa7826b34f58ef2d99ac27a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919e1b9cff40c503a1719457f5545393e32d427c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d689cf3f318e9f92cc2cc8ec0a6d3d30bf9e94', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe7fd32e1956970cc5dd5d6716cd5f1e3b3a85bb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8957a08f2170bbfa9e9d2f6ffb9e08fa66e40126', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6b038394a6e1ca3fa97d4a3d26015e8e0bed52e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b156cd5ecde3399911bbfbcab2c39df871275e2a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67686f27b15f2d814664b94130e9cc81b5f6235', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eab8bb043f1c196bed9608920bb78a6465fbea06', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43acd8fe2fb7c67458a455407b897025347eaeb1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df01ccedefb4abc2b3bfdb0abe0b149e5a02b7bd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff991789d01533093b1f173df4e2629ec6b973e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '754ecfed2745a1cdeaa0455c69c56eec50279c18', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b515f21bb97d8884bc0647b37cfff9778542da0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1dc7785d0c57388765d08c94bd82e941a190ea0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e32a19c54e7d87c8e3216c3ada29a27442cfa103', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454ba2c9a68e862f9192b07a8d0e6ce0b4bbfba1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eb655ce1965713a9c178c2129c86126cd3725e6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c981fbe5e85ad16b26ef4ad247a86fc40be80e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4329021a75151a621f9457454f881c5a410037b9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1356ccbda486686bf18268f80f3057e5929ba0e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e04891a88d71ab4c6e76263f637792edac6a52c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43e16c1c761d75ed5899be772bb527e8d5af183f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f46860fbfeeeea07d19f20a2d0e1e44c1bba8bee', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4447a10bc4d8dea28386834b1754e3f4d8297c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33b6a4f950d81a71bcc62b0fd640b393a6a81a49', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ecd2aebbe4d83648f8b9fde7729c063db7c789', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0135760abfb93f2f90d345023274b60a7daa22b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0576be85ae5fe4c130b387ba3588e29966c9aec1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc7977ca87f7d9cf7c1cce9a83ecb31f06410b2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2553640ff85ad05352d72afe5ae104ccd8ca1df', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397b33832af36960f09d4fc0860e034e4e5d0267', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0ff6d934f96a8fdd143b6085098b4680afe18c2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf75244ae42996cabd94b16d0d765dfa82646a20', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '074a921b125944cee26f71996d10e2bfcac6c513', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136060b1f719d83d4e580d3b627b757bef0a51eb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86b834aa46cf6f87bb3ae636b2f7f45382bf373b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab96a2b1381971e0c93f9931315e9ac7fbcbef1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be6891238128ecb34b86a5dc298d049646f6b87d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9707f8d8ad618a32554b450eb284fd6ab7d0d1e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bf4c9f77952aaad70c34202f36699146cf9fec', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34c35d7d414cd47d5e40254b01f9b41c063c5686', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe266d04b3a639a47fa6c19f1f1742ef34f28b13', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8f2f2cd151f3d3e57fd5782f566a0fc41e351b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0534db330906f04a19591ac16435d00997dbc63d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '915a671077389461405a7fef8b317dc8337a8eaa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4425ac07ebd5cf0d3cdcea387bfa38c6be1eff', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '540c7497a0adc82ee0f5afb6ea4442795d47d4ae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c00da8043ff08500fcefd07e418754ac9385e16e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f0ce46759e7765df451249669ee9680a9d23b60', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa86f2a29e77e1b503e013d7e7daaf79629efe94', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38555e09322d0e8c4bbbc90bf7a8623e85b9a2de', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f89649c9b212efa1bd61d44ea2cc368a2828cc6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68a1949bb3294b957eae335f680a5dc3bfc9d22b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c19d2f2cd586839fd0d20f53f2f3cccf0eab64b9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d7784bf89117b026f838fc77bc52145e98f241', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fff80c0f444ba59283352aee87b93cf3dfa20e4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f283485672df482b64acde86026ca82fb69829c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8506d0bcb777808f56c748fe055af6e4e444872f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71bf183d44bf4f44dfd78e465761aa9be93892d6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3933e7645d33e4ff110939588cb5346a2f39c2be', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e75c9d11a6e53e53a7b869dfcd214df8b4e658', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '425c7fdf0d0f6839c6b54ad180250924493d2325', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca2be4c87e49e8644ea1a08431340c87f5ee19b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0710437cf38e08329b8771f3ff3beaf51c41ccb7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006cd744af4262611230701d19307e98611ec422', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd80c282e211bd668405e19aa5b68159738ec640', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcd32c120cc76411416ec207a27161f651eacc72', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a7edd78d9b367600c42e893c4692efdccca194', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6268b30da41d7eab9d82eca2aa39a27c1c05bc26', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2a9bcfd3b0caa1bab07e1b8f5744046be0f9fde', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '792c682d28d34907dfe183cbc9c88634a480ba40', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '845265788dafc6ae512aa896b28f862fb1d1a3ca', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8134eaefac6ea6b75332631012fff96db1fa3efa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a60beeeba62c405f391eb81cb5cc2986752446ed', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a08d058e766aceb536debc15e7086eeea7ae598', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13538d3045aa154b288b82e2991962f107f70d32', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a5fba3b48c1e33b292f7f31551106736590c46f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '274c9fa4bc5e0f4bc6d77f0cd28a1969d0bc913e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49686eb44f1e1e8fd896e71b3762bce671e851da', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3b6c9816697b8a760d76a16b836d4112d3dee4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b7a5a95f6e7b4cce9774db8ea6459eeb86711f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f5b2a8cd6392cd726c19ace50ca9efe573aeaf', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a52caba4c649bc134330645282096bcdf9a54e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf9694bd326949da9097c5107832820a2e3b87c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73029220fa510c62b98e0f90698e00148421cf83', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77c8d82fdd7dc0ea6ebe1935281c5f6dfc18bd5a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e2565a910ce7e823650311efee013a519bdd455', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc0d8ef2fa383df405a6c46e287aed8f495e7113', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de26dd4246944d9c5969d88258f3922fd6b739e7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76bfc3987679b27e7ffef232658147d05353d4c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1967c0fc71cd7cd3e7dead4648a433f50dd56fa5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3263537b666b8e085473e94a2f0ab6ba022f9c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbca10d9a303dfb11646d8f51428093df9e827bc', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372152efab2e1a83cc1f2079f9aa32280e6f6ca5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32e6b6afc6fe2139fd8dd2bd7cca33da176239d1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad0290dcf3278c1bc411b675c0d9b949402477fa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '933020d710d23d1f4a7033a4bf42be6fe96073d7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88dcdeb97de9898de630042038d0aa3991ccc435', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '090528ff6b3d8b3a23eb5303e38ce2608ee9a749', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787b0072d476f64a6ea2bb874ce401af27150cb1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811135a0266d1ca71dc75a84102016c1275725ce', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56bf68178d6e2787c4adfb4860a56c61b2cd3af', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9c7e626292fc0e3cbd7a25930efb59ce1e392b1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a8969acdca6258d7177837490b7f75ead4cf7d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc9a366732e5a89950877360ea2039976f70f68', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b2f5b7710d47fe5833dc19bcabfcc5cc01cba23', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89874814ce57dd58573a00c1adc6da5cbdd15e7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3d004ef8ef45c8f34c531b56a568d98da089388', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '812d137797a41dea5f6c7e5dc555a3563f34bf75', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3f23d4ad990f6b7eb8d9919df756144bb2f665e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '191da3a4911677c0c6cb475bc45c1ad05eb9c7bc', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b3b28bc79be750846b7deebac90f71ebcb9d3af', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1468375e6f471890b1fd795070104bb88f170396', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3c71133e0f24eb4820756b0f17f2db1bcc0ba6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4102109b9a45cded7fd74d352d8619e7ed9734e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c38c927d020d1cc1021f7ae05029d23d50f182ae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '084fa4a9a7c9d5f2bde1000109fedc9851754a81', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1851af4b10ba27eae395f456df3155fe7f4a6d9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fa9e95c95b9a36210e8f77526da69124443b084', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61e802f90a9208e693a807b27eec9081a9613f19', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c2ff501ee2d1566ecf3030f575a723614638faf', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cb40dd1788ea9ae2c9c3ecbca9e2f8c774bc3b4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b7a84819e56ff32de1b464764ecd23669c8c659', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b02c7039f97ceb7c1c66b577c9ccd5e197674da7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab202053437a05ed220f61ac5f4a829ea2bff50', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '833d3d6d992fde411dab3e96833ae2abffc2554e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8a49f7e89b27f165d86acd42cbad57ada57ea7d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed408f53eab0e49cebfe0129d628616501a7a83a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f16cc57ebd3a619b3eff62bced4fb6e2b505a6d5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce4950fea0afb70880719d378c636a1df68d15d2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ed5c897cf5e247f18f62b5e89e0eadf0042799e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c90de25071017b961a3faca2107f4d3d534152ae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e931e6036a74563439a7937c74f40b6613c64722', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6abe9bb6adf89b71d49a4283e6ebf47c238328b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb0f666c1785de3bd85c5cf34cc2cddb367e297', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e560ed60bd06fd6656540f504704849e4c00d1d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1a15088f7b1fd990c9e12edeb5a8d243226014', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3add4264107e3af96ebe94045aa97b95fc627788', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6f0383da208ff680ac7255c18070c3b5eacb3e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b35816856e72d3f239bdff32830a1b47b8cd0aed', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc3a571879baa13e5fa251b078ac54c3de5ff60e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca92a123e31c5a145ce35045079666771ffbfcda', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff68b5a7adf71046bef9c21a63791bc17e18e18c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2923c77d4d60c0ef40b33457136813fa559f17', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '699289a2e0ca909d2d52f6550bddbfe77db72eb2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a1cb0967d4251c8a9ecbe4d8e6e7c16ba9e150', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94fa4637463be11ec68afb54241c4c1d8d046a08', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77140bb4517cfdd5bd77ee3ea00146fb6454c65d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eab86fd8a04ebfff429ba6fb61f8c44fcdd5623', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '204b8a54ba57a00b2c34c9aa387e7697c4713f81', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '101f4ae6d99df5cebf4413b8981a910d8843c44b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a199842c0bac69ac426843360f9251fbf5bea696', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b751bf60d83cb4ef2c3e8c05f1e93ca2c70389', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '706a7a3de94926c927fe3833f9529fdc131eb491', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f01fb63c5f9b2e56c0a0c0a6d4517e037d6891c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c7d3d7193a18dbc29237c97219018d50676337a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef2cc6545f081cac65c5c73f4d2c129d79805aec', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8924435f0527521fd1488511203c59a9dcc2349c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a59f6ae37d11ac891279b5169c85e2524f63130', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce0c966e7091e2b7ec771bce7549c5c885ae8a4d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '207747b3edee2f7846cd522a772f03d56ea3ee2c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9148a06270b8885e735edd29efa391966e3015', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa2bb84f504d9dca4e328ec593761315a761650e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09442e27e084b3702707e6d94cc631bd3f8e0337', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60eaa03451e8a23e13df801d4f7da9d3aa4e0ca7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd8270b2eb3cf17a62157c03caa77181ea5a49f4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c8867608821a7c90236034f7ee37e1013bdf072', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ec8ab79f682c6b0adf8682b4eca384f4125e60a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af8ff0e974a17facba81e879510d45890419e6d3', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5edbd8df081fc35d610d111d35d2992e1ac01dcf', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9d1d893d2b6063488beb60d33df98b6fc7086d0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8f5809ad77fda29f18ceda60e65d8ed0ea23153', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734a2d09bae57b6983e9989e978b0e59080fa08e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac32f50addce4fde65d5091820f374d9c5bfa448', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd4c52c93a0f495f8d37d3f016cd1957383e4b4c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e887784aa7688fa98f877f4daf1f3afbc33dae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f06be240cd993548d734fc92129e8c3a7b017a1c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5f5b05e2c8470e2e4caec6b8f6bd17af988e4e9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c8227125e1a43aafb03e12cb92c9117f808b3b0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e62c78b67dcd4df16b3c00e94a41d73843e6789', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a267a4481be25b5dca8d3d3731c16d93ba212aa5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68cb8e103f41f9ad2bc8d6706689cea10ea2c6ef', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ced9b0c1c0947122bd2f2d23876f8c493848603', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4879d89e26b4a3848931add743790f13143cf098', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1848b4775d19dc59d3207013fc3c3931359d7f2e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3086160fd727962444bbcbe8d9d84d5dc5ad1182', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec079f7bba9a539240254cefba499eb219493b5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b2fdef653273ce8289b53b991adca8043c1f74', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d4ca2ad4b33b2ac151a3a711b165c7f54c4b1ba', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a61532ce0d5bba04da31bff35fa3e9c18ef34fa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebfb63df8f13e41d5605723c8b1fcae30067a119', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea3d2f9fd1487dd79f1b7b43614b863a85844f3', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b36b8391f2ac160c4d8c1fcdf9fba446d699c52', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f7c03e8088614269714807aeead9a46877173a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0acc63e93f704923ab7b2d8eb0949c910011f03b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec984f9533a9e69b2a09e90e942b63edb6e91413', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe74a00e809111467ff976681e5172938921c17', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5cad2517816080b0f85424c88699727989494a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03dab11a907ed22655141d2b57b8cb1657c15463', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7ff8ed4a034f8e2d41fa63074db4a7bff13b01', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ebf61dc00c6d27f3df39e59e45434f4867be05', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90698486e55499898b78e2e7e42863f04f475a4b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '904855b63d2d32d440dd0db0af40ad74d3619438', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c035f139b8013916ac62f710a01f55f7c51a294', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '106edce136f6079315ad1a79eadd05e547cc2230', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b496fcbf2c132b9c687bc65136f57082a5cebac9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52895c3364b02e74691d00388e2d24301a577f77', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '329e62422e7ecccbbf7815e5042ff6eae833035e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a09c6fe4783fc3760d4c9bc7652c16e07c2054', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a1c5f33995e7026ed408e78134201348babfa9a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e0152ff11019019fee07fb8a3dd90dd9d762626', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac82ed1c1bc4e92f30f69514114a9af59f8988d8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31d0497a52722bc13ffccc697feb7f011d9c27ac', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98eab8e6aafac37788e329c7d2554eef496ce384', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281445be86434874d3bb2c95ae2be891239704d8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '975b28ec26476fe8572c8d631fd5aa9bd8785052', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f67b0eb7e220c5fa5850a4ad9691851e57aa644', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '510907f6688c8a31944c37ffc2ae4ca46ba96b3d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09af57ce05e813e55fb674913e3ae79f183d6cac', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ff46a286472cb22d004086eb5f7b782208eee2a', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a2d25079b5d6587160a849dba775748d006ef57', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3da98b1a805079508b036f913958a8a35578d8', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e60ad9d28176efa562038e89209d2bde2ab726', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8eda948b2e15e4f60455f444385aa83a6248af7', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cac45b49a6de6bc231e33356e23ec7a38a343f6', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9475a4d4ec0c974270948d1c657c08a4c4086d19', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a10b7a4cef5fa345f8600cdcdc983858ab28672a', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b0ecad9ed558e3e395c5405e7d030f9f894b0a4', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a759b109dbc8cab6607742428a9048922dc5a542', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a39037bcf9190112364319a50deac933b5bbc2', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1967a7cdbdaf72b4e8dfa82fc7a609e1b4b95ad', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd51caa76923d807a985e9917036641490ba0a187', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66d4be5e60a8a78deb4e57994dd12b6f104cb059', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df01aa0ba63d53738a7a4c2fcab7c42e0966d71e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dbc2219779d8e706e8ac46f31a1402eaea22c32', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d07ab2c4b3fc38c8dacdeae4de538bd78c96d2f', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}]",Harshit Maurya,30816844,,User,,41,,123,68
455815074,New Beats with UI [GSoC 2020],"PR history:
#2861 (Continuation of #2512)
#2844 

Beatgrid editing operations for editing BPM (variable) and Time Signature (variable) will be implemented in this PR. The backend and GUI will be simultaneously developed.

TODO:
- [x] Edit time signature at arbitrary downbeats.

- [x] Edit BPM at arbitrary beats.

- [x] Hybridise BeatGrid and BeatMap implementations to allow beat jump before track.

- [x] Fix TimeSignatureShouldNotChangeBpm Test.

- [ ] Write more tests for new code.

- [ ] Improve editing UX.

- [ ] The leftmost beat disappears too early when waveform scrolls. The features such as markers and downbeat triangles should be visible even if the beat is not on screen.

- [ ] Use interbeat distance to eliminate beats.",False,2961,https://api.github.com/repos/mixxxdj/mixxx/pulls/2961,https://github.com/mixxxdj/mixxx/pull/2961,open,5428,3839,104,352,129,231,5,0,"[{'name': 'skins'}, {'name': 'library'}, {'name': 'ui'}, {'name': 'build'}, {'name': 'code quality'}]",2020-07-23 16:07:40+00:00,,0.0,,"[{'comment_id': 459572325, 'comment_body': ""Why are these separate messages? Also, aren't we adding a color for sections?"", 'comment_created': datetime.datetime(2020, 7, 23, 16, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 459573083, 'comment_body': 'We should have either Beats or BpmMarkers. Storing both is redundant and a likely source of bugs.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 459585234, 'comment_body': 'update this with the changes from #2924', 'comment_created': datetime.datetime(2020, 7, 23, 16, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 459590355, 'comment_body': 'These can be merged into only the SectionMarker. And we do have Color in the latest commits.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 459591073, 'comment_body': 'We only have the LegacyBeat for old types. We are only using BpmMarkers now.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 459592302, 'comment_body': ""Or maybe I should remove or comment Sections and Phrases from the protobuf since they won't be implemented in this PR anyways."", 'comment_created': datetime.datetime(2020, 7, 23, 16, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 459600159, 'comment_body': ""Okay, let's comment those out for now. We can uncomment them when we start to use them."", 'comment_created': datetime.datetime(2020, 7, 23, 17, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 459762581, 'comment_body': 'OTHER should be the first value, followed by the specified variants. The first enum value is also the default, not need to specify it redundantly (see below).', 'comment_created': datetime.datetime(2020, 7, 23, 22, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459762869, 'comment_body': 'This default value is redundant: https://developers.google.com/protocol-buffers/docs/proto#optional', 'comment_created': datetime.datetime(2020, 7, 23, 22, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459763110, 'comment_body': 'unnecessary default', 'comment_created': datetime.datetime(2020, 7, 23, 22, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459763148, 'comment_body': 'unnecessary default', 'comment_created': datetime.datetime(2020, 7, 23, 22, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459763777, 'comment_body': ""I don't recommend to specify default strings on the protocol level. An empty string is perfectly ok. The application(!) might assign a default, predefined upon creation."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459764056, 'comment_body': 'Redundant default when designing the enumeration appropriately with the canonical default value as the first value/variant.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459764251, 'comment_body': 'redundant default', 'comment_created': datetime.datetime(2020, 7, 23, 22, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459764944, 'comment_body': '`first_downbeat_index` would be more specific. This terminology is already used for `Beats`, please consider to apply it consistently for all messages that are defining a range, i.e `Section`, `PhraseMarker`.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459766523, 'comment_body': 'Naming: Why just `Section` but `PhraseMarker` and not `Phrase`?', 'comment_created': datetime.datetime(2020, 7, 23, 22, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459767336, 'comment_body': ""Why do we need to specify a default color at the protocol level? This is an arbitrary decision and doesn't belong here. Implicitly using (0, 0, 0) is also arbitrary, but avoids to convey any special meaning."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459768213, 'comment_body': 'I agree that this is the only exception where special default values are acceptable.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 459872109, 'comment_body': 'Here we need something to annotate the accented beats we want to see on the waveforms. \r\nThis is required to annotate odd time signatures with high denominators. Like the Igorrr track.  \r\n\r\nI like the idea of @crisclacerda  to use the Shorthand Notation for Musical Rhythm (SNMR)\r\nEither in the ASCII or binary format. \r\nIgorrr:  \r\n14/16\r\nHH--\r\n10001000100100\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 24, 6, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 459873195, 'comment_body': 'We have no consensus that such complexity is wanted.', 'comment_created': datetime.datetime(2020, 7, 24, 6, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460145820, 'comment_body': 'Are you still the opinion to annotate the Igorrr track with changing speeds inside a measure?\r\n', 'comment_created': datetime.datetime(2020, 7, 24, 16, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460162885, 'comment_body': 'I never suggested that.', 'comment_created': datetime.datetime(2020, 7, 24, 16, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460248520, 'comment_body': ""Let's get this working before getting carried away implementing more features."", 'comment_created': datetime.datetime(2020, 7, 24, 19, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460282651, 'comment_body': 'What did you suggest? ', 'comment_created': datetime.datetime(2020, 7, 24, 20, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460336257, 'comment_body': 'Do we really need other? And the even intro and outro.\r\nFirst section is intro, last section is outro, all others are other?', 'comment_created': datetime.datetime(2020, 7, 25, 0, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 460348151, 'comment_body': 'I believe we could annotate it in 3 ways, odd signature, changing tempo inside a measure or the note simply being outside the beat. These all in way makes sense, and unless one have to the original sheet music, or the daw project there is no possible way of knowing which one is the ""ground truth"". What is important for us are the use cases, sync and quantizing.\r\n\r\nThe odd signature allows to quantize to the notes without add messing to sync.\r\nThe changing tempo inside the measure also allows us to quantize nicely but will cause sync to warp the beats.\r\nFinally the note being outside the beat does not allows to sync and does not allow to quantize either.\r\n\r\nIdeally we should be flexible to support all. \r\n\r\nFor now to support the odd signatures all we need is an extra 32 bit int together with the time signature in the proto to save the SNMR binary format. Then we need some code to hide some beats based on that, and some way for the user to add or edit those.', 'comment_created': datetime.datetime(2020, 7, 25, 1, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'crisclacerda', 'type': 'User'}, {'comment_id': 460366803, 'comment_body': ""As it is no difference between a int32 and a int 64 inside the prototype let's go with int64 this way we have without a doubt enough beats. "", 'comment_created': datetime.datetime(2020, 7, 25, 5, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460367123, 'comment_body': 'We use static casts in this case, to have it clear distinguished from a function call.  ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460367322, 'comment_body': 'Maybe we can consider to add a function:\r\n```\r\npCurrentBeats->findFirstBeat();\r\n``` ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460368556, 'comment_body': 'I think -2 was correct, because we are already ahead the current beat. \r\nIn this case -1 will return the current and not the previous beat. ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460369701, 'comment_body': 'mixxx::kInvalidFramePos and samplePosToFramePos? ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460369849, 'comment_body': 'samplePosToFramePos() ? ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460370083, 'comment_body': 'We discussed that earlier as well. The first section might not be the intro. We may resume the discussion on Zulip if there are doubts on this.', 'comment_created': datetime.datetime(2020, 7, 25, 5, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 460370237, 'comment_body': 'You must not call getSampleOfTrack() twice in a single function,\r\nelse the values might be unrelated due to a write in between. \r\n\r\nIn this case you should make a local copy first. \r\n', 'comment_created': datetime.datetime(2020, 7, 25, 6, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460374536, 'comment_body': ""First downbeat specifies an offset in downbeats for starting bar in a track. It's not relevant for sections. Sections only need to know the bar number aka the downbeat index."", 'comment_created': datetime.datetime(2020, 7, 25, 6, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 460427077, 'comment_body': '```suggestion\r\nconstexpr int kMinBeatsPerBar = 1;\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 17, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460428082, 'comment_body': '```suggestion\r\n    m_pBeatLengthBox->addItem(""1"");\r\n```\r\nNo need to translate numbers', 'comment_created': datetime.datetime(2020, 7, 25, 17, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460438100, 'comment_body': 'This does not work how I expect. I think changing the note value should not add or remove any downbeats. Instead, it should insert new beats half way between each beat to double the note value or remove every other beat to half the note value.', 'comment_created': datetime.datetime(2020, 7, 25, 19, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460443546, 'comment_body': "">  The changing tempo inside the measure also allows us to quantize nicely but will cause sync to warp the beats.\r\n\r\nRight, marking a complex rhythm as changing tempos does not make sense. I never suggested this.\r\n\r\n> For now to support the odd signatures all we need is an extra 32 bit int together with the time signature in the proto to save the SNMR binary format. Then we need some code to hide some beats based on that, and some way for the user to add or edit those.\r\n\r\nI don't agree that this is necessary nor do I understand why it is desirable. I would appreciate if we drop this idea at least for now and focus on getting this PR done. More features for edge cases can be added later as long as we don't encode assumptions into the data structure that prevent them."", 'comment_created': datetime.datetime(2020, 7, 25, 20, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460450051, 'comment_body': ""> Right, marking a complex rhythm as changing tempos does not make sense. I never suggested this.\r\n\r\nCool, we have a common sense here. But how do you like to annotate the Igorrr track? \r\n\r\n> I don't agree that this is necessary nor do I understand why it is desirable.\r\n\r\nDid you read my Zulip post whit the screen shots of down beat-matched tracks? Down-beat matching is the mayor use case for me. I am happy to discuss alternative Ideas, but for now I don't see any better way. \r\n\r\n> More features for edge cases can be added later as long as we don't encode assumptions into the data structure that prevent them.\r\n\r\nUnfortunately this is not an edge case. The way how and if we represent different rhythms in a measure is essential for the workflow. Sure, the Igorrr track is an edge case with no real value for beat matching, but if we solve this problem everything else is solved. Real use cases are 9/8 and 7/8 tracks which should receive first class support among easy 4/4 and 3/4 tracks.      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 25, 21, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460452261, 'comment_body': 'I think the numbers should be arranged vertically as they are on sheet music.', 'comment_created': datetime.datetime(2020, 7, 25, 22, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460483316, 'comment_body': '```\r\noptional int64 snmr_bins = 3 [ default = 0 ]\r\n```\r\nBinary Shorthand Notation for Musical Rhythm in binary format.\r\n\r\n0 = invalid value, all metronome beats annotated.\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 26, 6, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 460759894, 'comment_body': 'Thanks for noticing that. I might have hastily converted that while converting samples to frames. Apparently, this line is not covered by any test case. I was able to change this number to anything and all tests passed.', 'comment_created': datetime.datetime(2020, 7, 27, 9, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 460905586, 'comment_body': 'Good idea to move this to a separate file. I may be useful in another context.', 'comment_created': datetime.datetime(2020, 7, 27, 13, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460906413, 'comment_body': ""Oh I see you're already using it in 2 classes now."", 'comment_created': datetime.datetime(2020, 7, 27, 13, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 460906751, 'comment_body': '```suggestion\r\nclass WaveformBeatChangeMarker final {\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 7, 27, 13, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 463511354, 'comment_body': '```\r\n 7/13 Test #45: BeatsTest.ChangingTimeSignatureShouldNotChangeBpm ...***Failed    0.21 sec\r\nfaad2::LibLoader - Successfully loaded FAAD2 library ""libfaad.so"" version 2.9.2\r\nNote: Google Test filter = BeatsTest.ChangingTimeSignatureShouldNotChangeBpm\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from BeatsTest\r\n[ RUN      ] BeatsTest.ChangingTimeSignatureShouldNotChangeBpm\r\nDEBUG ASSERT: ""m_beatsProto.time_signature_markers_size() > 0"" in function void mixxx::BeatsInternal::generateBeatsFromMarkers() at /home/jan/Projects/mixxx/src/track/beats.cpp:829\r\nDEBUG ASSERT: ""m_beatsProto.time_signature_markers_size() > 0"" in function void mixxx::BeatsInternal::generateBeatsFromMarkers() at /home/jan/Projects/mixxx/src/track/beats.cpp:829\r\n/home/jan/Projects/mixxx/src/test/beatstest.cpp:456: Failure\r\nExpected equality of these values:\r\n  oldBpm\r\n    Which is: 8-byte object <00-00 00-00 00-00 4E-40>\r\n  newBpm\r\n    Which is: 8-byte object <00-00 00-00 00-00 5E-40>\r\n[  FAILED  ] BeatsTest.ChangingTimeSignatureShouldNotChangeBpm (1 ms)\r\n[----------] 1 test from BeatsTest (1 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 1 test from 1 test case ran. (1 ms total)\r\n[  PASSED  ] 0 tests.\r\n[  FAILED  ] 1 test, listed below:\r\n[  FAILED  ] BeatsTest.ChangingTimeSignatureShouldNotChangeBpm\r\n\r\n 1 FAILED TEST\r\n```', 'comment_created': datetime.datetime(2020, 7, 31, 9, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 463516870, 'comment_body': 'Even after deleting my Mixxx directory, I\'m hitting this debug assertion when I load a track onto a deck and the analysis finishes:\r\n```\r\nDEBUG ASSERT: ""m_beatsProto.time_signature_markers_size() > 0"" in function void mixxx::BeatsInternal::initWithAnalyzer(const QVector<mixxx::FramePos>&, const QVector<mixxx::track::io::TimeSignatureMarker>&) at /home/jan/Projects/mixxx/src/track/beats.cpp:348\r\nAborted (core dumped)\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 9, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 463739087, 'comment_body': 'I am working on this. This is a new test which is needed since we can change beat length now by changing the time signature. So the BPM calculation algorithm will be changed accordingly.', 'comment_created': datetime.datetime(2020, 7, 31, 17, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 470304822, 'comment_body': 'Drawing this in the middle of the bertical height obscures the view of the waveform. I think it would be better at the top.', 'comment_created': datetime.datetime(2020, 8, 13, 23, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 470305584, 'comment_body': '```suggestion\r\n        QString barBeatString = QString(""%1:%2"").arg(\r\n```\r\nIMO the use of `.` to separate bars and beat numbers is confusing. It looks like one number with a decimal point. I propose using `:` as the separator instead.', 'comment_created': datetime.datetime(2020, 8, 13, 23, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 470741726, 'comment_body': 'I just took some inspiration from the Ableton grid. I would change it if it makes it more clear.', 'comment_created': datetime.datetime(2020, 8, 14, 16, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 472287468, 'comment_body': '@Be-ing this is what the Ableton beat and bar numbers look like:\r\n![55a6747deef35](https://user-images.githubusercontent.com/30816844/90533242-d8afd480-e195-11ea-9d9e-5aeebe6843ad.jpg)', 'comment_created': datetime.datetime(2020, 8, 18, 15, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 472532928, 'comment_body': ""I don't have a strong opinion either way. IIRC Rekordbox also uses the `bar.beat` notation. Does anyone else have thoughts on this?"", 'comment_created': datetime.datetime(2020, 8, 18, 22, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 472786125, 'comment_body': 'I suggest adopting the common notation that users are familiar with instead of re-inventing the wheel. The formatting should be moved into a public (member) function for reusability.', 'comment_created': datetime.datetime(2020, 8, 19, 7, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 473559092, 'comment_body': 'The triangles still look slightly too prominent IMO. How about 6?', 'comment_created': datetime.datetime(2020, 8, 20, 3, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 473561371, 'comment_body': 'okay', 'comment_created': datetime.datetime(2020, 8, 20, 3, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475005218, 'comment_body': 'This should always be available regardless of how the track was analyzed.', 'comment_created': datetime.datetime(2020, 8, 21, 23, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475060101, 'comment_body': ""Okay. I assumed variable bpm is not allowed when constant bpm is selected. I'll remove this comment."", 'comment_created': datetime.datetime(2020, 8, 22, 7, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475129758, 'comment_body': 'ping', 'comment_created': datetime.datetime(2020, 8, 22, 20, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475141953, 'comment_body': 'I think we should get rid of this arbitrary maximum limit and continue to hide more downbeats as the waveform is zoomed out more. We would need to synchronize the zoom of all the waveforms for this to be useful though.', 'comment_created': datetime.datetime(2020, 8, 22, 21, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475182428, 'comment_body': 'The waveform becomes smaller than the overview waveform if we go way past this limit.', 'comment_created': datetime.datetime(2020, 8, 23, 7, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475184023, 'comment_body': 'I think there was a PR which enables zoom sync on by default.', 'comment_created': datetime.datetime(2020, 8, 23, 7, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475187689, 'comment_body': 'mixxx::FramePos(0) is used very often. I suggest to define a constexpr for this constant, e.g. `kStartFramePos`. @Be How about the naming?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475187850, 'comment_body': 'With the new constant `mixxx::kStartFramePos` int/double inconsistencies like here become obsolete.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475187952, 'comment_body': 'I suggest defining a `constexpr int kFirstBeatIndex = 0`', 'comment_created': datetime.datetime(2020, 8, 23, 8, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475188137, 'comment_body': ""*slight* doesn't really fit for the naming, maybe *tiny* or *small*? @Be Any suggestions?"", 'comment_created': datetime.datetime(2020, 8, 23, 8, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475188391, 'comment_body': 'Please add the missing braces after reformatting. Also applies to other locations in this file.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475188763, 'comment_body': 'Replace `mixxx::Bpm(0.0)` and `mixxx::Bpm(0)` with just `mixxx::Bpm()` or the corresponding empty initializer `{}`', 'comment_created': datetime.datetime(2020, 8, 23, 8, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475189759, 'comment_body': 'Please use `kEngineChannelCount` instead of the literal `2.0`. This applies to multiple locations in this and maybe other files.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475189899, 'comment_body': ""Same here, don't hardcode numeric literals in the channel transformation calculation."", 'comment_created': datetime.datetime(2020, 8, 23, 8, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190052, 'comment_body': 'Are all the reformattings in this file really needed? They might cause merge conflicts.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190208, 'comment_body': 'reduceBpmPrecision()? Requirements on the precision may vary depending on the use case.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190342, 'comment_body': 'Please use CamelCase for enum class variants, i.e. `Beats` and `BeatsAndDownbeats`', 'comment_created': datetime.datetime(2020, 8, 23, 8, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190778, 'comment_body': 'You could then define `constexpr BeatGridMode kDefaultBeatGridMode = BeatGridMode::BeatsAndDownbeats` and the comment becomes obsolete. Please use this constant wherever appropriate.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475190878, 'comment_body': 'Is the explicit cast to `int` needed?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475191108, 'comment_body': 'Please add a note that the code has been commented out because it anticipates future extensions. ', 'comment_created': datetime.datetime(2020, 8, 23, 8, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475191293, 'comment_body': 'Are all those reformattings really needed or were they caused by a former version of the pre-commit hook?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475191452, 'comment_body': 'Please use `enum class` for both and CamelCase enum variant naming', 'comment_created': datetime.datetime(2020, 8, 23, 8, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475191662, 'comment_body': 'I suggest extracting those enums from the class with their own names, i.e. `BeatType` and `BeatMarker`. ', 'comment_created': datetime.datetime(2020, 8, 23, 8, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475192706, 'comment_body': 'Why not explicitly *beat in bar index*? Would be more concise and readable imo.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475193561, 'comment_body': ""For new classes we tend to follow the Qt naming by omitting the `get` prefix, i.e. just `beatIndex()`. Even more appropriate if there aren't any setters."", 'comment_created': datetime.datetime(2020, 8, 23, 9, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475193882, 'comment_body': 'constexpr', 'comment_created': datetime.datetime(2020, 8, 23, 9, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475193959, 'comment_body': 'Could become a constexpr after declaring the constructor as constexpr', 'comment_created': datetime.datetime(2020, 8, 23, 9, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475194455, 'comment_body': 'This PR contains commits since Nov 2019. This could be the result of the old hooks.', 'comment_created': datetime.datetime(2020, 8, 23, 9, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475212269, 'comment_body': ""> The waveform becomes smaller than the overview waveform if we go way past this limit.\r\n\r\nIs that a problem? I don't think so.\r\n\r\n> I think there was a PR which enables zoom sync on by default.\r\n\r\nI forgot there is already an option for this. The option should be removed. There is no use case for having it disabled."", 'comment_created': datetime.datetime(2020, 8, 23, 12, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218336, 'comment_body': '#3040', 'comment_created': datetime.datetime(2020, 8, 23, 13, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218463, 'comment_body': 'How about `kStartFrame`?', 'comment_created': datetime.datetime(2020, 8, 23, 13, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218581, 'comment_body': '""small""', 'comment_created': datetime.datetime(2020, 8, 23, 13, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218828, 'comment_body': 'Perhaps it would have been better to not do the reformatting in this PR, but now that it is there, I think it would be more trouble than it is worth to undo it. Undoing reformatting has already caused trouble with this branch.', 'comment_created': datetime.datetime(2020, 8, 23, 13, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475218928, 'comment_body': 'Maybe use qFuzzyCompare here?', 'comment_created': datetime.datetime(2020, 8, 23, 13, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475219033, 'comment_body': 'Yes, it is an `enum class`.', 'comment_created': datetime.datetime(2020, 8, 23, 13, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475220532, 'comment_body': ""Ok, but let's include the whole type name in the constant. It is easier to remember and acts like a static constructor."", 'comment_created': datetime.datetime(2020, 8, 23, 13, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475225940, 'comment_body': '`kStartFramePos` works fine', 'comment_created': datetime.datetime(2020, 8, 23, 14, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475242715, 'comment_body': ""I'm quite confused by the signaling between Track and Beats. Beats should signal to Track when Beats is updated, but Track doesn't directly edit Beats so why are signals from Track connected to Beats::slotTrackBeatsUpdated? I'm unclear why slotTrackBeatsUpdated exists. @uklotzde any thoughts on this?"", 'comment_created': datetime.datetime(2020, 8, 23, 17, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475246054, 'comment_body': 'Those cyclic signal/slot connections seem to be wrong. The connections to the signals Track::beatsUpdated and Track::changed must be removed.\r\n\r\nThe Beats object must not react to changes in the Track object. It is the responsibility of the Track object to update or replace the Beats object as needed.', 'comment_created': datetime.datetime(2020, 8, 23, 17, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475246168, 'comment_body': '@Be-ing Good catch!', 'comment_created': datetime.datetime(2020, 8, 23, 17, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475246539, 'comment_body': ""I think this may mostly be an issue of confusing naming. All that Beats::slotTrackBeatsUpdated does is get the sample rate and duration from the Track. I think this could be replaced by passing these parameters to the Beats constructor. An instance of Beats should not outlive Track or moved between Track instances, so if I understand correctly, there shouldn't be any scenario where Beats needs to get updated information from Track."", 'comment_created': datetime.datetime(2020, 8, 23, 17, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475262881, 'comment_body': 'Add a blank line between functions.', 'comment_created': datetime.datetime(2020, 8, 23, 20, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475263780, 'comment_body': 'This should be rewritten to get the BPM from the last BPM marker. If the frame is before the start of the track, get the BPM from the first BPM marker.', 'comment_created': datetime.datetime(2020, 8, 23, 20, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475265687, 'comment_body': ""The track has a pointer to the Beats object and is supposed to update it directly by calling a method when those properties are updated. It doesn't matter if the Beats object gets orphaned. Then it won't be updated by the track anymore.\r\n\r\nIn the long term, only Track should be a QObject that sends signals. Neither Beats nor individual Cue objects are needed."", 'comment_created': datetime.datetime(2020, 8, 23, 20, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475267904, 'comment_body': 'Did you intend to do something with this `indices` local variable? Currently it does nothing.', 'comment_created': datetime.datetime(2020, 8, 23, 21, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475268114, 'comment_body': ""This comment doesn't seem to be relevant anymore. (I'm not sure it ever was?)"", 'comment_created': datetime.datetime(2020, 8, 23, 21, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475268878, 'comment_body': 'Using `getBpm` here assumes the track is one constant tempo. The local BPM should be used.', 'comment_created': datetime.datetime(2020, 8, 23, 21, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475269294, 'comment_body': 'Here we need to extrapolate beats before the beginning of the track based from the first tempo and downbeat markers.', 'comment_created': datetime.datetime(2020, 8, 23, 21, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475270387, 'comment_body': 'Rename this `getGlobalBpm` for clarity.', 'comment_created': datetime.datetime(2020, 8, 23, 21, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475274106, 'comment_body': ""I don't understand why this exists. Why isn't the position of the first beat sufficient?"", 'comment_created': datetime.datetime(2020, 8, 23, 22, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475275663, 'comment_body': 'This seems problematic. If I understand correctly, shifting any downbeat shifts the downbeats for the entire track; there is no way to shift the downbeats for part of the track. I think we need to be able to shift downbeats between arbitrary frames or beat indices.', 'comment_created': datetime.datetime(2020, 8, 23, 22, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475275787, 'comment_body': 'This option should be removed, so Beats should not have anything to do with this option.', 'comment_created': datetime.datetime(2020, 8, 23, 22, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475275809, 'comment_body': ""Shouldn't we just use a single int32 here and ignore the most significant byte? We only use 3-byte RGB anyway. "", 'comment_created': datetime.datetime(2020, 8, 23, 22, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 475276034, 'comment_body': ""I suppose we could, but then we would need to do some bitwise math to convert between the protobuf value and the data we need. I'd prefer to make the protobuf format more straightforward."", 'comment_created': datetime.datetime(2020, 8, 23, 22, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475276633, 'comment_body': ""Can't we just pass it to mixxx::RgbColor? I think so.\r\n\r\nI fear that using separate int32 values opens more room for strange bugs. What happens if a RGB channel value is greater than 0xFF? What happens if a value is negative? "", 'comment_created': datetime.datetime(2020, 8, 23, 22, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 475276719, 'comment_body': ""This is commented out from the protobuf, so we don't need to determine this now."", 'comment_created': datetime.datetime(2020, 8, 23, 22, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475289962, 'comment_body': 'On further thought, this may be okay. Having only this one index to shift downbeats ensures that all the downbeat markers are consistent with the time signatures. If there is a section in the middle of the track which is preceded by a single pick up beat, that pickup beat could be marked as a downbeat in its own measure.', 'comment_created': datetime.datetime(2020, 8, 24, 0, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475566710, 'comment_body': 'Apparently, I cannot declare this constructor with constexpr since it includes `mixxx::TimeSignature` which in turn includes `track::io::TimeSignature` (generated by `protoc`) which is not constexpr. Am I missing something? Please let me know if I should read more on this somewhere.', 'comment_created': datetime.datetime(2020, 8, 24, 12, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475603970, 'comment_body': 'Ok, then this is not possible.', 'comment_created': datetime.datetime(2020, 8, 24, 13, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 475755046, 'comment_body': 'It is exactly what this encodes. Did you mean something else?', 'comment_created': datetime.datetime(2020, 8, 24, 16, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475812869, 'comment_body': 'Sure. But what is the lower limit?\r\nThe `BeatGrid` generated beats on-demand using the `BeatGridIterator` based on what part of the track is on the screen in the waveform. We cannot store an arbitrarily large number of beats in our `BeatMap` like beats cache just to have beats before the start of the track.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 475909921, 'comment_body': ""I don't think there should be a lower limit. I think this should generate beats on demand at any arbitrary position before the start of the track like the legacy BeatGridIterator."", 'comment_created': datetime.datetime(2020, 8, 24, 21, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475915098, 'comment_body': 'I think `first_beat_frame` would be a clearer name.', 'comment_created': datetime.datetime(2020, 8, 24, 21, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475918716, 'comment_body': 'This looks like a significant change. Are you sure this is what we want?', 'comment_created': datetime.datetime(2020, 8, 24, 22, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475919408, 'comment_body': 'Use `///` for documentation comments', 'comment_created': datetime.datetime(2020, 8, 24, 22, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475927722, 'comment_body': 'I agree, `beatInBar` is more straightforward than `barRelativeBeatIndex`.', 'comment_created': datetime.datetime(2020, 8, 24, 22, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 475932040, 'comment_body': '@uklotzde could you take a look at this and 4c7d3d7? ', 'comment_created': datetime.datetime(2020, 8, 24, 22, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 476119768, 'comment_body': ""I could not find any way to annotate function parameters with '///' comments. I think it is important to describe the parameters. For starters, I can see a nice and detailed function definition when I hover at a function in my IDE."", 'comment_created': datetime.datetime(2020, 8, 25, 3, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 476201373, 'comment_body': '- redundant `inline`\r\n- should be `const`\r\n- ~~locking is missing~~ (wrong class)', 'comment_created': datetime.datetime(2020, 8, 25, 6, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476201444, 'comment_body': '- should be `const`\r\n- ~~locking is missing~~', 'comment_created': datetime.datetime(2020, 8, 25, 6, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476202222, 'comment_body': 'should be `const`\r\n', 'comment_created': datetime.datetime(2020, 8, 25, 6, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476202343, 'comment_body': '- should be `const`\r\n- locking is missing', 'comment_created': datetime.datetime(2020, 8, 25, 6, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476202455, 'comment_body': '- redundant `inline`\r\n- should be `const`\r\n- locking is missing', 'comment_created': datetime.datetime(2020, 8, 25, 6, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476202590, 'comment_body': 'The default should use the new constant', 'comment_created': datetime.datetime(2020, 8, 25, 6, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476203069, 'comment_body': 'Instead of adding a comment you could name the parameter `trackDurationInSeconds`.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476203283, 'comment_body': 'Or the function itself, i.e. `setTrackDurationInSeconds` to be more specific.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476206334, 'comment_body': 'Replacement(s) for the copy constructor:\r\n```\r\nexplicit Beats(const Track* track, const BeatsInternal& internal = BeatsInternal());\r\nBeats(const Beats&) = delete;\r\n\r\nBeatsInternal getInternal() const; // return a copy of internal while locked\r\n```\r\n\r\nBeats object cannot be copied as a whole, only explicitly from a Track object and a copy of BeatsInternal.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476208032, 'comment_body': 'Thanks for the added suggestions.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 476210158, 'comment_body': 'The signature of `Track::setBeats()` must be changed:\r\n\r\n```\r\nvoid Track::setBeats(const mixxx::BeatsInternal& beats) {\r\n    auto pBeats = std::make_shared<mixxx::Beats>(this, beats);\r\n    QMutexLocker lock(&m_qMutex);\r\n    setBeatsMarkDirtyAndUnlock(&lock, pBeats);\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 6, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476211380, 'comment_body': 'The visibility of all constructors should be changed from `public`  to `final` with `Track` as a friend class. Only the Track itself is allowed to construct new Beats object by passing `this` as the first parameter.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 476258414, 'comment_body': '@Be-ing I was using the horizontal layout as inspired by musescore.\r\n![Horizontal time signature boxes](https://musescore.org/sites/musescore.org/files/styles/width_740/public/TimeSig.jpg?itok=6nZcIBwR)', 'comment_created': datetime.datetime(2020, 8, 25, 8, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 476258692, 'comment_body': 'I think adding a `/` in between should do the job.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 477073051, 'comment_body': 'The sample rate should only be used internally and not exposed in the public interface.', 'comment_created': datetime.datetime(2020, 8, 26, 6, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477076102, 'comment_body': 'I suggest to replace setSampleRate() and setDuration() seconds with a single function:\r\n\r\n`void updateStreamInfo(const mixxx::audio::StreamInfo& streamInfo);`\r\n\r\nYou could still store only the sample rate and duration internally, but please prefer to reuse the corresponding type-safe classes instead of plain int or double.\r\n\r\nInstead of `this` the track object could pass an initial value `streamInfo` in the constructor. Furthermore, the moveToThread() should be moved out of the `Beats` constructor. This is the responsibility of the caller, i.e. the `Track` object.\r\n\r\nWith those changes the `Beats` class does not need to know that there is a *track*. All constructors could remain public.', 'comment_created': datetime.datetime(2020, 8, 26, 6, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477081870, 'comment_body': ""We might also store the whole `StreamInfo` in BeatsInternal instead of individual values:\r\n\r\n```\r\nstd::optional<mixxx::audio::SteamInfo> m_streamInfo;\r\n```\r\n\r\n- it could be missing/unknown\r\n- it is injected from outside and doesn't belong to the other properties that are stored in the protobuf, i.e. it is a *transient* property"", 'comment_created': datetime.datetime(2020, 8, 26, 7, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477086659, 'comment_body': 'It would be even favorable to keep this `m_streamInfo` member in `Beats` and instead pass the current value of selected properties as additional function parameters to `BeatsInternal` only when needed.', 'comment_created': datetime.datetime(2020, 8, 26, 7, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477089488, 'comment_body': 'Since all properties of `StreamInfo` have (invalid) default values we could try to omit wrapping it into `std::optional` to not complicate the implementation.', 'comment_created': datetime.datetime(2020, 8, 26, 7, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 477219071, 'comment_body': 'Here we mixxx time based info with smaples based info in one data structure. \r\nWe should not do this. Instead we should give here the beat length in samples. This is what we need anyway when accessing the data. \r\nAnd that is the output of the analyzer. ', 'comment_created': datetime.datetime(2020, 8, 26, 11, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477219799, 'comment_body': 'Here is a unnecessary conversion and iSampleRate dependency. ', 'comment_created': datetime.datetime(2020, 8, 26, 11, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477221668, 'comment_body': 'and here', 'comment_created': datetime.datetime(2020, 8, 26, 11, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477221919, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 8, 26, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477222235, 'comment_body': 'here', 'comment_created': datetime.datetime(2020, 8, 26, 11, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 477225157, 'comment_body': ""I have just skimmed through the code and it turns out that we can remove sample rated dependency in various places. \r\nThis avoids also rounding issues. Let's store the data in the format it is detected and needed later. No conversion to human readable format. \r\n\r\nAdding a sample rate field to the protobuffer is however a good idea to be able to create the time based representation at any time. \r\n\r\n  "", 'comment_created': datetime.datetime(2020, 8, 26, 11, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 478402235, 'comment_body': 'This would mean creating a hybrid of `BeatMap` and `BeatGrid` for the `BeatsIterator` and all functions like `findNthBeat`.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 479584501, 'comment_body': ""I don't understand why removing Beats' reference to Track requires this change to BpmControl."", 'comment_created': datetime.datetime(2020, 8, 29, 0, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479609904, 'comment_body': '`getSampleRate` is made private in `BeatsInternal` class, so it is better to retrieve sample rate from the track itself.', 'comment_created': datetime.datetime(2020, 8, 29, 5, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 479637408, 'comment_body': 'Using a reference to a smart pointer is a bad idea. Because it does not increment the reference counter. It is basically a pointer to the location where the actual pointer is stored.\r\nThis pointer can change at any time.', 'comment_created': datetime.datetime(2020, 8, 29, 10, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479637652, 'comment_body': 'The same here. No reference to a smart pointer.', 'comment_created': datetime.datetime(2020, 8, 29, 10, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479638062, 'comment_body': 'This breaks the atomic assumption of m_pBeats.\r\nThe whole code works, because it holds a atomic pointer to a consistent beats dataset.\r\nThe track is a new dataset which changes independently.\r\nA calculations must be done based into the same atomic pointer. \r\nWe must assure that this pointer (m_pBeats) is only touched at one point during the callback.', 'comment_created': datetime.datetime(2020, 8, 29, 11, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479638605, 'comment_body': 'Please revert. We need a direct reference to the constant BeatsPointer. With guramteed matching data. The indirection via track object does not work.\r\n\r\nThis also reveals, that we need a track independent sample rate in the beats object. \r\nOnly this must be use, because only this gurantees to give the right sample value from the time based values. \r\n\r\nAn alternative would be to convert all values to samples when importing the data from the protobuf.', 'comment_created': datetime.datetime(2020, 8, 29, 11, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479640075, 'comment_body': 'The persistent, time-based beats object does not need a sample rate. Only the frame-based wrapper at runtime does. This fact that has never been up for debate so nothing new is ""revealed"" here.', 'comment_created': datetime.datetime(2020, 8, 29, 11, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 479721319, 'comment_body': 'This is strange that the Beats constructor takes a BeatsInternal argument which must be constructed elsewhere. I would expect something called ""BeatsInternal"" to only be a private member of Beats not used anywhere outside of Beats. I am not sure if this is an issue with the code architecture or ""BeatsInternal"" being a misleading name. @uklotzde what do you think?', 'comment_created': datetime.datetime(2020, 8, 30, 4, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479721584, 'comment_body': 'Should this still exist?', 'comment_created': datetime.datetime(2020, 8, 30, 4, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479721626, 'comment_body': '```suggestion\r\n    /// Starting from frame, return the previous\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 4, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479721741, 'comment_body': '```suggestion\r\n    /// value is the next beat position. Returns false if *at least one* frame is -1.  (Can return false\r\n```\r\n""Non- -1 values a guaranteed to be even"" is legacy from when this returned stereo samples and is no longer true.', 'comment_created': datetime.datetime(2020, 8, 30, 4, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479721780, 'comment_body': '```suggestion\r\n    /// in the track, or -1 if none exists.\r\n    FramePos findClosestBeat(FramePos frame) const;\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 4, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479722644, 'comment_body': ""The documentation in beats.h still refers to `-1` as the invalid value. IMO `-1` was a strange hack, but I'm not sure this is better. Maybe this should be `NAN`?"", 'comment_created': datetime.datetime(2020, 8, 30, 5, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479820552, 'comment_body': 'Think of `Beats` as the socket that deals with all the outer wiring and of `BeatsInternal` as the finished bulb that is just mounted in. Assembling it in place would be too complex because then you would need to mix the wiring with the assembly parameters.\r\n\r\nThis could be a use case for move construction, i.e. *r-value reference* in conjunction with `std::forward`. Unfortunately, C++ makes this semantics tedious to write whereas in Rust it is the default for both assignment (= name binding) and passing parameters.', 'comment_created': datetime.datetime(2020, 8, 30, 21, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 479831933, 'comment_body': '```suggestion\r\n    } else if (frame < getFirstBeatPosition()) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 23, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479990947, 'comment_body': 'By removing this function, the alternative would be three steps:\r\n1. clear()\r\n2. setBpm(bpm, index=0)\r\n3. setFirstBeatFrame(framePos)', 'comment_created': datetime.datetime(2020, 8, 31, 8, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 484083902, 'comment_body': 'Extracting a single line helper method getTrackBeats() would remove distracting redundancy from the code.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484084217, 'comment_body': 'Remove the `const` qualifiers from pass-by-value parameters if the signature has been modified in this PR.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484084594, 'comment_body': 'If needed add a new getter to `Track` that obtains all the needed information at once, wrapped into a custom `struct`/`class` that can be passed by value.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484084960, 'comment_body': 'If you store the sample rate twice you must ensure that the values are synchronized! Do not use an inconsistent set of parameters that is obtained from multiple places. Fetch data from `Track` atomically and update `Beats`/`BeatsInternal` consistently all at once.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484085214, 'comment_body': 'We have `mixxx::SampleRate`, no need to use double', 'comment_created': datetime.datetime(2020, 9, 6, 15, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484085533, 'comment_body': 'Storing a reference to the whole track object if we only need the sample rate is disproportionate and might be a hint that the design is not appropriate.', 'comment_created': datetime.datetime(2020, 9, 6, 15, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484087231, 'comment_body': 'If you implement `<`/`>` also implement `<=`/`>=`', 'comment_created': datetime.datetime(2020, 9, 6, 16, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484087441, 'comment_body': 'Only use inlining for very short and lightweight functions. Neither needed nor appropriate here.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484087499, 'comment_body': 'Please fix all EOF issues caused by missing newlines', 'comment_created': datetime.datetime(2020, 9, 6, 16, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484087781, 'comment_body': 'Move this constant definition into the .cpp file. Also, check that it is never used in another const declaration in another .cpp file. Initialization order of constants in different object modules is undefined in C++!! if in doubt, move it as a static, inlined method (= factory method) into `Beat`.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088200, 'comment_body': 'If the setters of BeatsInternal return a boolean that indicates if anything has changed or not we might be able to prevent a lot of unnecessary update signals!', 'comment_created': datetime.datetime(2020, 9, 6, 16, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088407, 'comment_body': 'If kInvalidBeat is used for only this purpose then std::optional<Beat> is more appropriate. It would also ensure that the caller must handle both possible outcomes.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088586, 'comment_body': 'Please use early return and break up the nesting. It is not obvious that all code paths actually return a value, although compilation should fail with a warning if not.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088644, 'comment_body': 'Locking is missing!', 'comment_created': datetime.datetime(2020, 9, 6, 16, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484088811, 'comment_body': 'VERIFY_OR_DEBUG_ASSERT(isValid())? These functions should never be invoked on an invalid instance.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089080, 'comment_body': 'Please prefer the classical `typedef` instead of `using` as already discussed in the preceding PR', 'comment_created': datetime.datetime(2020, 9, 6, 16, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089141, 'comment_body': 'All forward declarations should also be moved below the include directives', 'comment_created': datetime.datetime(2020, 9, 6, 16, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089201, 'comment_body': 'explicit', 'comment_created': datetime.datetime(2020, 9, 6, 16, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089269, 'comment_body': 'Constants should start with a `k` followed by UpperCamelCase', 'comment_created': datetime.datetime(2020, 9, 6, 16, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089543, 'comment_body': '- explicit\r\n- BeatsInternal should be passed as the first and only argument\r\n- The 2nd parameter streamInfo is redundant, because this information is already included in BeatsInternal. Please remove it to avoid inconcistencies.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089666, 'comment_body': ""Don't rely on relative includes, always use the full path from src."", 'comment_created': datetime.datetime(2020, 9, 6, 16, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484089916, 'comment_body': 'Please use the commonly known term `sampleRate` instead of introducing another name `framesPerSecond` for the same concept.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090108, 'comment_body': 'Such a long function should not be inlined.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090319, 'comment_body': 'This typedef is wrong here and must be moved into FramePos. A global mixxx::value_t must not be defined!!', 'comment_created': datetime.datetime(2020, 9, 6, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090462, 'comment_body': '`static constexpr value_t kStartValue = 0;`', 'comment_created': datetime.datetime(2020, 9, 6, 16, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090566, 'comment_body': 'm_dFramePos(kStartValue)', 'comment_created': datetime.datetime(2020, 9, 6, 16, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484090725, 'comment_body': '```\r\nconstexpr FramePos kInvalidFramePos = FramePos(FramePos::kInvalidValue);\r\nconstexpr FramePos kStartFramePos = FramePos(FramePos::kStartValue);\r\n```\r\nDefine in corresponding value type kInvalidValue = ... as a static constexpr in FramePos.\r\n', 'comment_created': datetime.datetime(2020, 9, 6, 16, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091079, 'comment_body': 'In global namespace:\r\n```\r\nQ_DECLARE_TYPEINFO(mixxx::FramePos, Q_MOVABLE_TYPE);\r\nQ_DECLARE_METATYPE(mixxx::FramePos)\r\n```\r\n\r\nAlso, register the type with `qRegisterMetaType()` in mixxxapplication.cpp. Otherwise it could not be passed in signals between threads.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091131, 'comment_body': 'Remove preamble', 'comment_created': datetime.datetime(2020, 9, 6, 16, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091372, 'comment_body': 'moveToThread should be called immediately after creation, not sometimes later', 'comment_created': datetime.datetime(2020, 9, 6, 16, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091458, 'comment_body': 'Only do this immedately after creation, even though it would be possible later or at any time.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091547, 'comment_body': 'Explicitly use this->thread() for clarification about the context', 'comment_created': datetime.datetime(2020, 9, 6, 16, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091730, 'comment_body': 'Only lock once here!! This is not only a TODO but a FIXME.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484091948, 'comment_body': 'This function is redundant and should be removed in favor of `QDebug operator<<(QDebug dbg, const Track& arg);` see below.', 'comment_created': datetime.datetime(2020, 9, 6, 16, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484092136, 'comment_body': '- include for `FramePos` types and mixxx::kEngineChannelCount is missing\r\n- enclose all functions into the `mixxx` namespace. No explicit qualification `mixxx::` needed by the caller due to *argument dependent lookup* in C++', 'comment_created': datetime.datetime(2020, 9, 6, 16, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093256, 'comment_body': 'Why has this check been removed? Should be VERIFY_OR_DEBUG_ASSERT', 'comment_created': datetime.datetime(2020, 9, 6, 17, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093299, 'comment_body': 'anonymous namespace  in header file is useless', 'comment_created': datetime.datetime(2020, 9, 6, 17, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093328, 'comment_body': 'Please move into a new .cpp file', 'comment_created': datetime.datetime(2020, 9, 6, 17, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093486, 'comment_body': 'Is this function really needed? Defining only a single, selected comparison operator is bad style.', 'comment_created': datetime.datetime(2020, 9, 6, 17, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093601, 'comment_body': 'Every base class needs a virtual destructor!', 'comment_created': datetime.datetime(2020, 9, 6, 17, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093777, 'comment_body': 'FIXME', 'comment_created': datetime.datetime(2020, 9, 6, 17, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484093889, 'comment_body': '~WaveformRenderPlayMarker() override = default;', 'comment_created': datetime.datetime(2020, 9, 6, 17, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484099081, 'comment_body': 'And use ///', 'comment_created': datetime.datetime(2020, 9, 6, 18, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 484356106, 'comment_body': 'This serves as the default comparator in std algorithms that require ordering e.g. `std::lower_bound`', 'comment_created': datetime.datetime(2020, 9, 7, 10, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 484519139, 'comment_body': 'Ok, I suppose it makes sense to define the other comparison operators too then? @uklotzde WDYT?', 'comment_created': datetime.datetime(2020, 9, 7, 16, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 484527053, 'comment_body': 'The STL uses `std::less` as the default functor for strict ordering. The default implementation of `std::less` then invokes `operator<`.\r\n\r\nIt may be more appropriate to instead specialize `std::less` instead of implementing only one of the comparison operators.', 'comment_created': datetime.datetime(2020, 9, 7, 17, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 484528407, 'comment_body': ""Not sure though how to correctly specialize `std::less` :grimacing: Even the Core Guidelines don't mention how to handle this situation correctly.\r\n\r\nOr just leave a comment that this only needed for the default ordering comparator std::less."", 'comment_created': datetime.datetime(2020, 9, 7, 17, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 485417989, 'comment_body': 'Perhaps I was told to do so. Earlier, frames were stored as integers, but now that we store frames as floating-point, the even check is not required.', 'comment_created': datetime.datetime(2020, 9, 9, 8, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 486431816, 'comment_body': 'Should this be a QFlags field instead? Maybe there are other kinds of beat highlights, e. g. Phase/section start. ', 'comment_created': datetime.datetime(2020, 9, 10, 15, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 486787270, 'comment_body': 'It is more save to use the sample rate stored in the beats object. This way there is no doubt that the data is consistent.', 'comment_created': datetime.datetime(2020, 9, 11, 5, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486788340, 'comment_body': 'Please store the beats pointer on the stack as is was implemented before. ', 'comment_created': datetime.datetime(2020, 9, 11, 5, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486788834, 'comment_body': 'Store betas pointer on stack. Please check every single occurring', 'comment_created': datetime.datetime(2020, 9, 11, 5, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486790376, 'comment_body': ""The same here, use the beat's sample rate."", 'comment_created': datetime.datetime(2020, 9, 11, 5, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486790738, 'comment_body': 'Please use curly braces.', 'comment_created': datetime.datetime(2020, 9, 11, 5, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486792439, 'comment_body': 'Store brats pointer on stack.', 'comment_created': datetime.datetime(2020, 9, 11, 6, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486804418, 'comment_body': 'We need here to make use of the values we have received with a single call to getBeatContext.\r\nThis gurantees that the values used for calculations are matching.\r\n\r\nI think we have room to refactor this a bit to be seconds independent and use the ratio compared to the master buffer instead, but that is out of the scope of this PR. Here we need to restore the old behavior.', 'comment_created': datetime.datetime(2020, 9, 11, 6, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486806150, 'comment_body': 'It might happen that a control update is received in between. Please revert.', 'comment_created': datetime.datetime(2020, 9, 11, 6, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 486807063, 'comment_body': ""Please revert. We can't guarantee that this is always up to date. All used variables for calculation need to be atonic."", 'comment_created': datetime.datetime(2020, 9, 11, 6, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 487248229, 'comment_body': 'It was a design choice to make the sample rate unavailable to the public interface of the Beats class, since it is an internal implementation detail for it, and the sample rate is a property of the Track, not Beats.', 'comment_created': datetime.datetime(2020, 9, 11, 19, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 487248865, 'comment_body': '@uklotzde suggested creating a new method in `Track` to return both beats and sample rate as a single struct with locking. Should I do something like that?', 'comment_created': datetime.datetime(2020, 9, 11, 19, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}, {'comment_id': 487278708, 'comment_body': 'Instead of revealing the sample rate those operations should be added as methods to `Beats` where they have access to the internal sample rate. The translation distance then needs to be specified in time units and is mapped to frames internally.', 'comment_created': datetime.datetime(2020, 9, 11, 20, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 487323286, 'comment_body': 'No, pBeats has already a sample rate and it is already received atomic. So there is no need to hack around that. \r\nOtherwise you have still the ongoing issue that both sample rates can differ later. ', 'comment_created': datetime.datetime(2020, 9, 11, 22, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 487323836, 'comment_body': 'Yes right, since bBeats is aware of the seconds representation it can take kSmallBeatsTranslateFactor directly. ', 'comment_created': datetime.datetime(2020, 9, 11, 22, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 495447879, 'comment_body': ""With this PR, I'll let it be. I'll change this to `QFlags` while implementing sections and phrases."", 'comment_created': datetime.datetime(2020, 9, 26, 11, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hacksdump', 'type': 'User'}]","[{'commit_sha': '51fdd4292d0999cc68dc2efae01dfd7e6622a619', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8009b69fc92c17ab4ba9aac860da73b203ad81', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a4bffb5385d8b4201fabadb51e98679a787ca9e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e905109b7a7e57edcbc2e067fd2142ceda3df1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e6625ae6fccf3bd0a3d2e35e11d156c37d81daa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec62228247421088b1334ba0451508102c665db8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91eb3d8c31b59dda40265c4fccc77f2f6ef5cf5f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9fd3333f6dc0be77cac727ca26d71ff469124b4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b962d7af7eed210d79d3427f31e42945ed99ec0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480f7f7ba44ea012efea27dcf946a6c8b71a3afd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65a0d84f3bc53fe1f486c2c6fa6c63c9956c5cd5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a49ebe0f736490f738fccb79657332399c246531', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4664ec7770be528d8f2a447f5fc81dde8819c4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b6d0122300f21acaa7826b34f58ef2d99ac27a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919e1b9cff40c503a1719457f5545393e32d427c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84d689cf3f318e9f92cc2cc8ec0a6d3d30bf9e94', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe7fd32e1956970cc5dd5d6716cd5f1e3b3a85bb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8957a08f2170bbfa9e9d2f6ffb9e08fa66e40126', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6b038394a6e1ca3fa97d4a3d26015e8e0bed52e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b156cd5ecde3399911bbfbcab2c39df871275e2a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67686f27b15f2d814664b94130e9cc81b5f6235', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eab8bb043f1c196bed9608920bb78a6465fbea06', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43acd8fe2fb7c67458a455407b897025347eaeb1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df01ccedefb4abc2b3bfdb0abe0b149e5a02b7bd', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff991789d01533093b1f173df4e2629ec6b973e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '754ecfed2745a1cdeaa0455c69c56eec50279c18', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b515f21bb97d8884bc0647b37cfff9778542da0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1dc7785d0c57388765d08c94bd82e941a190ea0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e32a19c54e7d87c8e3216c3ada29a27442cfa103', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454ba2c9a68e862f9192b07a8d0e6ce0b4bbfba1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eb655ce1965713a9c178c2129c86126cd3725e6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c981fbe5e85ad16b26ef4ad247a86fc40be80e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4329021a75151a621f9457454f881c5a410037b9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1356ccbda486686bf18268f80f3057e5929ba0e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e04891a88d71ab4c6e76263f637792edac6a52c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43e16c1c761d75ed5899be772bb527e8d5af183f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f46860fbfeeeea07d19f20a2d0e1e44c1bba8bee', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4447a10bc4d8dea28386834b1754e3f4d8297c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33b6a4f950d81a71bcc62b0fd640b393a6a81a49', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ecd2aebbe4d83648f8b9fde7729c063db7c789', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0135760abfb93f2f90d345023274b60a7daa22b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0576be85ae5fe4c130b387ba3588e29966c9aec1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc7977ca87f7d9cf7c1cce9a83ecb31f06410b2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2553640ff85ad05352d72afe5ae104ccd8ca1df', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '397b33832af36960f09d4fc0860e034e4e5d0267', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0ff6d934f96a8fdd143b6085098b4680afe18c2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf75244ae42996cabd94b16d0d765dfa82646a20', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '074a921b125944cee26f71996d10e2bfcac6c513', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136060b1f719d83d4e580d3b627b757bef0a51eb', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86b834aa46cf6f87bb3ae636b2f7f45382bf373b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab96a2b1381971e0c93f9931315e9ac7fbcbef1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be6891238128ecb34b86a5dc298d049646f6b87d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9707f8d8ad618a32554b450eb284fd6ab7d0d1e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33bf4c9f77952aaad70c34202f36699146cf9fec', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34c35d7d414cd47d5e40254b01f9b41c063c5686', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe266d04b3a639a47fa6c19f1f1742ef34f28b13', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8f2f2cd151f3d3e57fd5782f566a0fc41e351b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0534db330906f04a19591ac16435d00997dbc63d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '915a671077389461405a7fef8b317dc8337a8eaa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4425ac07ebd5cf0d3cdcea387bfa38c6be1eff', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '540c7497a0adc82ee0f5afb6ea4442795d47d4ae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c00da8043ff08500fcefd07e418754ac9385e16e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f0ce46759e7765df451249669ee9680a9d23b60', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa86f2a29e77e1b503e013d7e7daaf79629efe94', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38555e09322d0e8c4bbbc90bf7a8623e85b9a2de', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f89649c9b212efa1bd61d44ea2cc368a2828cc6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68a1949bb3294b957eae335f680a5dc3bfc9d22b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c19d2f2cd586839fd0d20f53f2f3cccf0eab64b9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d7784bf89117b026f838fc77bc52145e98f241', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fff80c0f444ba59283352aee87b93cf3dfa20e4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f283485672df482b64acde86026ca82fb69829c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8506d0bcb777808f56c748fe055af6e4e444872f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71bf183d44bf4f44dfd78e465761aa9be93892d6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3933e7645d33e4ff110939588cb5346a2f39c2be', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e75c9d11a6e53e53a7b869dfcd214df8b4e658', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '425c7fdf0d0f6839c6b54ad180250924493d2325', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca2be4c87e49e8644ea1a08431340c87f5ee19b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0710437cf38e08329b8771f3ff3beaf51c41ccb7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006cd744af4262611230701d19307e98611ec422', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd80c282e211bd668405e19aa5b68159738ec640', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcd32c120cc76411416ec207a27161f651eacc72', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a7edd78d9b367600c42e893c4692efdccca194', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6268b30da41d7eab9d82eca2aa39a27c1c05bc26', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2a9bcfd3b0caa1bab07e1b8f5744046be0f9fde', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '792c682d28d34907dfe183cbc9c88634a480ba40', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '845265788dafc6ae512aa896b28f862fb1d1a3ca', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8134eaefac6ea6b75332631012fff96db1fa3efa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a60beeeba62c405f391eb81cb5cc2986752446ed', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a08d058e766aceb536debc15e7086eeea7ae598', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13538d3045aa154b288b82e2991962f107f70d32', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a5fba3b48c1e33b292f7f31551106736590c46f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '274c9fa4bc5e0f4bc6d77f0cd28a1969d0bc913e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49686eb44f1e1e8fd896e71b3762bce671e851da', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3b6c9816697b8a760d76a16b836d4112d3dee4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3b7a5a95f6e7b4cce9774db8ea6459eeb86711f', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f5b2a8cd6392cd726c19ace50ca9efe573aeaf', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a52caba4c649bc134330645282096bcdf9a54e0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf9694bd326949da9097c5107832820a2e3b87c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73029220fa510c62b98e0f90698e00148421cf83', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77c8d82fdd7dc0ea6ebe1935281c5f6dfc18bd5a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e2565a910ce7e823650311efee013a519bdd455', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc0d8ef2fa383df405a6c46e287aed8f495e7113', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de26dd4246944d9c5969d88258f3922fd6b739e7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76bfc3987679b27e7ffef232658147d05353d4c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1967c0fc71cd7cd3e7dead4648a433f50dd56fa5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3263537b666b8e085473e94a2f0ab6ba022f9c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbca10d9a303dfb11646d8f51428093df9e827bc', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372152efab2e1a83cc1f2079f9aa32280e6f6ca5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32e6b6afc6fe2139fd8dd2bd7cca33da176239d1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad0290dcf3278c1bc411b675c0d9b949402477fa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '933020d710d23d1f4a7033a4bf42be6fe96073d7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88dcdeb97de9898de630042038d0aa3991ccc435', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '090528ff6b3d8b3a23eb5303e38ce2608ee9a749', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787b0072d476f64a6ea2bb874ce401af27150cb1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811135a0266d1ca71dc75a84102016c1275725ce', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56bf68178d6e2787c4adfb4860a56c61b2cd3af', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9c7e626292fc0e3cbd7a25930efb59ce1e392b1', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a8969acdca6258d7177837490b7f75ead4cf7d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc9a366732e5a89950877360ea2039976f70f68', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b2f5b7710d47fe5833dc19bcabfcc5cc01cba23', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89874814ce57dd58573a00c1adc6da5cbdd15e7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3d004ef8ef45c8f34c531b56a568d98da089388', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '812d137797a41dea5f6c7e5dc555a3563f34bf75', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3f23d4ad990f6b7eb8d9919df756144bb2f665e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '191da3a4911677c0c6cb475bc45c1ad05eb9c7bc', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b3b28bc79be750846b7deebac90f71ebcb9d3af', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1468375e6f471890b1fd795070104bb88f170396', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3c71133e0f24eb4820756b0f17f2db1bcc0ba6', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4102109b9a45cded7fd74d352d8619e7ed9734e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c38c927d020d1cc1021f7ae05029d23d50f182ae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '084fa4a9a7c9d5f2bde1000109fedc9851754a81', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1851af4b10ba27eae395f456df3155fe7f4a6d9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fa9e95c95b9a36210e8f77526da69124443b084', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61e802f90a9208e693a807b27eec9081a9613f19', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c2ff501ee2d1566ecf3030f575a723614638faf', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cb40dd1788ea9ae2c9c3ecbca9e2f8c774bc3b4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b7a84819e56ff32de1b464764ecd23669c8c659', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b02c7039f97ceb7c1c66b577c9ccd5e197674da7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab202053437a05ed220f61ac5f4a829ea2bff50', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '833d3d6d992fde411dab3e96833ae2abffc2554e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8a49f7e89b27f165d86acd42cbad57ada57ea7d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed408f53eab0e49cebfe0129d628616501a7a83a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f16cc57ebd3a619b3eff62bced4fb6e2b505a6d5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce4950fea0afb70880719d378c636a1df68d15d2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ed5c897cf5e247f18f62b5e89e0eadf0042799e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c90de25071017b961a3faca2107f4d3d534152ae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e931e6036a74563439a7937c74f40b6613c64722', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6abe9bb6adf89b71d49a4283e6ebf47c238328b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb0f666c1785de3bd85c5cf34cc2cddb367e297', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e560ed60bd06fd6656540f504704849e4c00d1d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1a15088f7b1fd990c9e12edeb5a8d243226014', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3add4264107e3af96ebe94045aa97b95fc627788', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6f0383da208ff680ac7255c18070c3b5eacb3e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b35816856e72d3f239bdff32830a1b47b8cd0aed', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc3a571879baa13e5fa251b078ac54c3de5ff60e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca92a123e31c5a145ce35045079666771ffbfcda', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff68b5a7adf71046bef9c21a63791bc17e18e18c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2923c77d4d60c0ef40b33457136813fa559f17', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '699289a2e0ca909d2d52f6550bddbfe77db72eb2', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a1cb0967d4251c8a9ecbe4d8e6e7c16ba9e150', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94fa4637463be11ec68afb54241c4c1d8d046a08', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77140bb4517cfdd5bd77ee3ea00146fb6454c65d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eab86fd8a04ebfff429ba6fb61f8c44fcdd5623', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '204b8a54ba57a00b2c34c9aa387e7697c4713f81', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '101f4ae6d99df5cebf4413b8981a910d8843c44b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a199842c0bac69ac426843360f9251fbf5bea696', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b751bf60d83cb4ef2c3e8c05f1e93ca2c70389', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '706a7a3de94926c927fe3833f9529fdc131eb491', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f01fb63c5f9b2e56c0a0c0a6d4517e037d6891c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c7d3d7193a18dbc29237c97219018d50676337a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef2cc6545f081cac65c5c73f4d2c129d79805aec', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8924435f0527521fd1488511203c59a9dcc2349c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a59f6ae37d11ac891279b5169c85e2524f63130', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce0c966e7091e2b7ec771bce7549c5c885ae8a4d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '207747b3edee2f7846cd522a772f03d56ea3ee2c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9148a06270b8885e735edd29efa391966e3015', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa2bb84f504d9dca4e328ec593761315a761650e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09442e27e084b3702707e6d94cc631bd3f8e0337', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60eaa03451e8a23e13df801d4f7da9d3aa4e0ca7', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd8270b2eb3cf17a62157c03caa77181ea5a49f4', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c8867608821a7c90236034f7ee37e1013bdf072', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ec8ab79f682c6b0adf8682b4eca384f4125e60a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af8ff0e974a17facba81e879510d45890419e6d3', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5edbd8df081fc35d610d111d35d2992e1ac01dcf', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9d1d893d2b6063488beb60d33df98b6fc7086d0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8f5809ad77fda29f18ceda60e65d8ed0ea23153', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '734a2d09bae57b6983e9989e978b0e59080fa08e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac32f50addce4fde65d5091820f374d9c5bfa448', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd4c52c93a0f495f8d37d3f016cd1957383e4b4c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e887784aa7688fa98f877f4daf1f3afbc33dae', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f06be240cd993548d734fc92129e8c3a7b017a1c', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5f5b05e2c8470e2e4caec6b8f6bd17af988e4e9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c8227125e1a43aafb03e12cb92c9117f808b3b0', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e62c78b67dcd4df16b3c00e94a41d73843e6789', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a267a4481be25b5dca8d3d3731c16d93ba212aa5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68cb8e103f41f9ad2bc8d6706689cea10ea2c6ef', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ced9b0c1c0947122bd2f2d23876f8c493848603', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4879d89e26b4a3848931add743790f13143cf098', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1848b4775d19dc59d3207013fc3c3931359d7f2e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3086160fd727962444bbcbe8d9d84d5dc5ad1182', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec079f7bba9a539240254cefba499eb219493b5', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b2fdef653273ce8289b53b991adca8043c1f74', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d4ca2ad4b33b2ac151a3a711b165c7f54c4b1ba', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a61532ce0d5bba04da31bff35fa3e9c18ef34fa', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebfb63df8f13e41d5605723c8b1fcae30067a119', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea3d2f9fd1487dd79f1b7b43614b863a85844f3', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b36b8391f2ac160c4d8c1fcdf9fba446d699c52', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83f7c03e8088614269714807aeead9a46877173a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0acc63e93f704923ab7b2d8eb0949c910011f03b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec984f9533a9e69b2a09e90e942b63edb6e91413', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe74a00e809111467ff976681e5172938921c17', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5cad2517816080b0f85424c88699727989494a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03dab11a907ed22655141d2b57b8cb1657c15463', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7ff8ed4a034f8e2d41fa63074db4a7bff13b01', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ebf61dc00c6d27f3df39e59e45434f4867be05', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90698486e55499898b78e2e7e42863f04f475a4b', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '904855b63d2d32d440dd0db0af40ad74d3619438', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c035f139b8013916ac62f710a01f55f7c51a294', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '106edce136f6079315ad1a79eadd05e547cc2230', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b496fcbf2c132b9c687bc65136f57082a5cebac9', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52895c3364b02e74691d00388e2d24301a577f77', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '329e62422e7ecccbbf7815e5042ff6eae833035e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a09c6fe4783fc3760d4c9bc7652c16e07c2054', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a1c5f33995e7026ed408e78134201348babfa9a', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e0152ff11019019fee07fb8a3dd90dd9d762626', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac82ed1c1bc4e92f30f69514114a9af59f8988d8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31d0497a52722bc13ffccc697feb7f011d9c27ac', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98eab8e6aafac37788e329c7d2554eef496ce384', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281445be86434874d3bb2c95ae2be891239704d8', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '975b28ec26476fe8572c8d631fd5aa9bd8785052', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f67b0eb7e220c5fa5850a4ad9691851e57aa644', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '510907f6688c8a31944c37ffc2ae4ca46ba96b3d', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09af57ce05e813e55fb674913e3ae79f183d6cac', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ff46a286472cb22d004086eb5f7b782208eee2a', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a2d25079b5d6587160a849dba775748d006ef57', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3da98b1a805079508b036f913958a8a35578d8', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e60ad9d28176efa562038e89209d2bde2ab726', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8eda948b2e15e4f60455f444385aa83a6248af7', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cac45b49a6de6bc231e33356e23ec7a38a343f6', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9475a4d4ec0c974270948d1c657c08a4c4086d19', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a10b7a4cef5fa345f8600cdcdc983858ab28672a', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b0ecad9ed558e3e395c5405e7d030f9f894b0a4', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a759b109dbc8cab6607742428a9048922dc5a542', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a39037bcf9190112364319a50deac933b5bbc2', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1967a7cdbdaf72b4e8dfa82fc7a609e1b4b95ad', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd51caa76923d807a985e9917036641490ba0a187', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66d4be5e60a8a78deb4e57994dd12b6f104cb059', 'committer_username': 'Holzhaus', 'committer_name': 'Jan Holthuis', 'committer_email': 'holthuis.jan@googlemail.com', 'commit_date': datetime.datetime(2012, 6, 9, 23, 19, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df01aa0ba63d53738a7a4c2fcab7c42e0966d71e', 'committer_username': 'hacksdump', 'committer_name': 'Harshit Maurya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 8, 1, 38, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dbc2219779d8e706e8ac46f31a1402eaea22c32', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d07ab2c4b3fc38c8dacdeae4de538bd78c96d2f', 'committer_username': 'daschuer', 'committer_name': 'Daniel Schürmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 5, 25, 9, 53, 25, tzinfo=datetime.timezone.utc)}]",Harshit Maurya,30816844,,User,,41,,123,68

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
10126031,mixxx,mixxxdj/mixxx,C++,1254,4344,136,357,48333,2137,16,252,"[{'id': 497731142, 'number': 3149, 'closed': datetime.datetime(2021, 7, 10, 12, 14, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 5, 9, 49, 55, tzinfo=datetime.timezone.utc), 'time_taken': 24027879.0, 'time_delta': '278 days, 2:24:39', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 481647413, 'number': 3080, 'closed': datetime.datetime(2020, 9, 7, 23, 24, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 7, 21, 23, 26, tzinfo=datetime.timezone.utc), 'time_taken': 7275.0, 'time_delta': '2:01:15', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 455815074, 'number': 2961, 'closed': None, 'created': datetime.datetime(2020, 7, 23, 16, 7, 40, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 5428, 'deletions': 3839, 'state': 'open'}, {'id': 433960308, 'number': 2861, 'closed': datetime.datetime(2020, 7, 23, 16, 10, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 5, 9, 23, tzinfo=datetime.timezone.utc), 'time_taken': 3495653.0, 'time_delta': '40 days, 11:00:53', 'additions': 3488, 'deletions': 3031, 'state': 'closed'}, {'id': 427971096, 'number': 2844, 'closed': datetime.datetime(2020, 7, 23, 16, 9, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 17, 2, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4230413.0, 'time_delta': '48 days, 23:06:53', 'additions': 739, 'deletions': 189, 'state': 'closed'}, {'id': 417008902, 'number': 2783, 'closed': datetime.datetime(2020, 5, 16, 19, 38, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 22, 34, 49, tzinfo=datetime.timezone.utc), 'time_taken': 335001.0, 'time_delta': '3 days, 21:03:21', 'additions': 201, 'deletions': 71, 'state': 'closed'}, {'id': 415462461, 'number': 2766, 'closed': datetime.datetime(2020, 5, 12, 14, 15, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 8, 22, 39, 34, tzinfo=datetime.timezone.utc), 'time_taken': 315366.0, 'time_delta': '3 days, 15:36:06', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 407209352, 'number': 2696, 'closed': datetime.datetime(2020, 4, 22, 22, 25, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 22, 10, 50, 39, tzinfo=datetime.timezone.utc), 'time_taken': 41662.0, 'time_delta': '11:34:22', 'additions': 33, 'deletions': 0, 'state': 'closed'}, {'id': 395352798, 'number': 2612, 'closed': datetime.datetime(2020, 4, 17, 15, 34, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 30, 0, 56, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1607839.0, 'time_delta': '18 days, 14:37:19', 'additions': 2225, 'deletions': 1670, 'state': 'closed'}]"
