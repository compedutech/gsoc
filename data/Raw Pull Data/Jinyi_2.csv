pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
674074564,Improve list item parsing and indented code blocks parsing,"What's in this PR:
1. solve the issue of #59 by using the technique of Open/Closed Blocks
2. change the UnorderedList type to a block container like BlockQuote
3. associate indent information to unordered list item and allow some nest specs according to the indent (and solve #81)
4. solve some minimal failing test cases about list item parsing by the way
5. fix minor failing test cases about ‚ÄúIndented code blocks‚Äù by allowing blank line between chunks

Update: How I  parse Lists and List items
1. parse the string to RawBlock type UnorderedListBlock/OrderedListBlock
	1. [Changes in [RawBlock.elm](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-c64e203e18fae05b2ee217cbeb744d92d8a2eda3270ac39617aab03ac432ca0eR24-R42) ] Firstly, we need to change the RawBlock type UnorderedListBlock/OrderedListBlock to contain ‚ÄúList RawBlock‚Äù instead of ‚ÄúList UnparsedInlines‚Äù because list item is container block that can contain other blocks. We also need to contain more information in the type UnorderedListBlock/OrderedListBlock to support Open/Close Block method: tight/loose, intended, marker. Because we parse the string to RawBlock when the block is closed, we also need to contain unparsed string as an open block that can merge later unparsed string. 
	2. [Changes in   [UnorderedList.elm](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-05709390a78385547d8f1efa8438f1947abfc96d8ec61ba5774ee22db3f2006b) and  [OrderedList.elm](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-dda95df11f221e8002e69e665d2b8495619d2fd63b6d4a9358ddc96a6336e57e)] Then, we need to change the parsers that parse string to some information that the RawBlock type UnorderedListBlock/OrderedListBlock need. Generally, I deleted the part where subsequent items are parsed because we only parse a single list item here and merge this list item by Open/Close Block method later.  And more information (intended and marker) is gotten. And there are also some minor fixes in order to fit the spec. (I‚Äôm sorry that the code style in these two files are bad.)
	3. [Changes in [RawBlock Parser unorderedListBlock and orderedListBlock in Parser.elm](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-de85daeee0fdb2d74f34329de78564a3902699d29f674d352a38d02dbab16b0dL407-L432)] Finally, the functions that convert the needed informations to RawBlock type UnorderedListBlock/OrderedListBlock also need to change.
2. apply Open/Close Block method to the parsing of UnorderedListBlock/OrderedListBlock.
	1. I made some changes in completeOrMergeBlock and completeBlock. I just applied the similar way of Open/Close Block method as we always use to merge list type. Changes in [completeOrMergeBlocks in Parser.elm](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-de85daeee0fdb2d74f34329de78564a3902699d29f674d352a38d02dbab16b0dR742-R807) (when the open block is UnorderedListBlock);  Changes in [completeOrMergeBlocks in Parser.elm](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-de85daeee0fdb2d74f34329de78564a3902699d29f674d352a38d02dbab16b0dR811-R877) (when the open block is OrderedListBlock); Changes in [completeOrMergeBlocks in Parser.elm ](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-de85daeee0fdb2d74f34329de78564a3902699d29f674d352a38d02dbab16b0dR925-R967)(when the open block is Blankline::OrderedListBlock or UnorderedListBlock); Changes in [completeBlocks](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-de85daeee0fdb2d74f34329de78564a3902699d29f674d352a38d02dbab16b0dR1171-R1248)
	2. Also, I match the intended of the open block and unparsed string to support intended list item [here](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-de85daeee0fdb2d74f34329de78564a3902699d29f674d352a38d02dbab16b0dR997-R1151).
3.   [Changes in [Block.elm](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-8a6bfd02a20644066e8a13c21d3e48f9f062e1021a032d07c6e6cd3113404940)]  Here, I just did some adjustments according to the type change (Inline -> Block in [Block type UnorderedList/OrderedList](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-8a6bfd02a20644066e8a13c21d3e48f9f062e1021a032d07c6e6cd3113404940L80-R81); UnparsedInline -> RawBlock in RawBlock type UnorderedList/OrderedList)
4.  [Changes in [Render.elm](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-d3a9446c640904e36e0b9d91324ab53d987f774ced108b29ea87e914c8c5e33b)] Here, we only need to did some adjustment saccording to the type change  (Inline -> Block in [Block type UnorderedList/OrderedList](https://github.com/dillonkearns/elm-markdown/pull/88/files#diff-8a6bfd02a20644066e8a13c21d3e48f9f062e1021a032d07c6e6cd3113404940L80-R81). We also need to render according to tight/loose. Thanks to Jonas‚Äô work, I completely use his code here.",True,88,https://api.github.com/repos/dillonkearns/elm-markdown/pulls/88,https://github.com/dillonkearns/elm-markdown/pull/88,closed,5289,3844,48,33,5,7,0,0,[],2021-06-20 17:55:46+00:00,2021-08-20 15:29:06+00:00,5261600.0,"60 days, 21:33:20","[{'comment_id': 672528030, 'comment_body': '@LutSa this looks great, just one small detail: could we use a custom type like this here, and use that type instead of `Bool` for both `UnorderedList` and `OrderedList`?\r\n\r\n```elm\r\n{-|\r\nA markdown list can be either [Loose](https://github.github.com/gfm/#loose) or [Tight](https://github.github.com/gfm/#tight).\r\n\r\n> A list is loose if any of its constituent list items are separated by blank lines, or if any of its constituent list items directly contain two block-level elements with a blank line between them. Otherwise a list is tight. (The difference in HTML output is that paragraphs in a loose list are wrapped in <p> tags, while paragraphs in a tight list are not.)\r\n\r\nThe `paragraph` renderer will be used to wrap loose lists.\r\n\r\n-}\r\ntype ListDisplay\r\n    = Loose\r\n    | Tight\r\n```\r\n\r\nUsing this type instead of a `Bool` will make it a little easier to figure out what the semantics are for users working with this Block AST.', 'comment_created': datetime.datetime(2021, 7, 19, 18, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dillonkearns', 'type': 'User'}, {'comment_id': 672535275, 'comment_body': 'Is there any way to parse into a `PlainItem """"` instead of an `EmptyItem`? I\'m guessing this was added to handle a special case related to loose lists with item items, maybe?\r\n\r\nBecause the `ListItem` type is a user-facing type that they can access as part of a `Markdown.Block.Block`, it would be nice to keep these types clean for a simpler user experience. If need be, maybe we could have a separate internal type? Or maybe we could check for `PlainItem """" -> -- handle like empty item here`?', 'comment_created': datetime.datetime(2021, 7, 19, 18, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dillonkearns', 'type': 'User'}, {'comment_id': 672544494, 'comment_body': 'Any idea why the text after the `1.` and `2.` is disappearing here?', 'comment_created': datetime.datetime(2021, 7, 19, 18, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dillonkearns', 'type': 'User'}, {'comment_id': 692274809, 'comment_body': ""I went ahead and changed out the Bool's in the Block type, and I think it's looking good! So this is resolved now ‚úÖ"", 'comment_created': datetime.datetime(2021, 8, 19, 16, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dillonkearns', 'type': 'User'}, {'comment_id': 692366180, 'comment_body': ""Actually, I see that I was mistaken about this being user-facing. This is an internal type, so the user-facing types `Markdown.Block` aren't effected by this. So this is good as is üëç"", 'comment_created': datetime.datetime(2021, 8, 19, 18, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dillonkearns', 'type': 'User'}, {'comment_id': 692369954, 'comment_body': ""I figured out what was going on! It was an issue with the test runner. It looks like it wasn't deleting these files, so they got committed but don't didn't deleted even though they are passing now. This is in good shape now üëç"", 'comment_created': datetime.datetime(2021, 8, 19, 18, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dillonkearns', 'type': 'User'}]","[{'commit_sha': '1441e20d2eb34fece70a608f049239a080431f7a', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83643f7152f8b63325aa1bc9040f212e957d5b21', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e970820b34db6f053212bc3630cf5351d013daf8', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c0fd0df2825ec6449950e85e9adb5185279a9f', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65c5f2f43885d646170f6fe90b64ab54dc7806b7', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fad16bfe7e159159d728c07fd9821c87620296', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6856d325eefb0b12a3f862d053ff22667b012ebf', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27222c7abc9a8d98b55f56873024d1d906f48e06', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a40fbddaf8d54a7de5120cd7ec855e057f684e1d', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75c87f94ecd6bfa2b1b877b752950234f4fc7c03', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c27fa617725d1e4cb98f3ce2a885b1383044767', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b92e11a6df375cbf3e0a19e363bb3dc1a9db88c', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4070820fc62deebde4a879f67cf8ffc192edd5fb', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0c2c04d0f0766a4d8f0246689c4283f0d4f07e0', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'defe517be6fb3640431e745f7d38f9815140ff2e', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a83fdfcb384e65cc4bd141da920b6effca9f98a3', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5143ec4a8f07e96ba21cb7ba6095ea6a7994517b', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bed063e6c0d65684d42ba86bc4506b9ebd42ae5c', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6673d2007e8c3b62fb20a78ac29beae1c7e75a8', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '182f42d6a2049b1eee1711b2aade65e23a2f24e6', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcaf5db98cde413199e8eb79c16e794b1b52e4a9', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093d791e7dcd2a456746a1273145303bfdfcd666', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caea152e2c549e8adb94d2fe2da58b63d2820e65', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a35712689e6aca90c17cbab7ea245b3024503c25', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4794bc579e222681abbc76871b4b9d7d9f66645', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6134e4ae202d69caaf4ae166e320331d127a5fd4', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '667b926cbd7195774bdb6a443a33d17e3c44ae1a', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5d1e1334cf5c4b9dc7fcf7acd5cfc5895b505e1', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8391a01c36cc61f1c8c2b313457738722753a8e7', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40997ffef6b27203852b85823e884f41b894e58e', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea40598c79116ead405ca0492ead5b1ab2082a9d', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd459651d9cbd8fa9845b7188b0cd44fb989c96c5', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '417823c672c82359a3989b7b7382ad687fc52b55', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}]",Wu Jinyi,80566705,,User,,6,,13,21
661841356,Fix failing case of nested link references by making rawBlockParser recursive,"Exploration to solve the issue of nested link references #60 by using rawBlockParser recursively when a block container is completed/close.
",True,84,https://api.github.com/repos/dillonkearns/elm-markdown/pulls/84,https://github.com/dillonkearns/elm-markdown/pull/84,closed,232,116,10,5,1,1,0,0,[],2021-06-04 15:01:55+00:00,2021-07-13 14:54:27+00:00,3369152.0,"38 days, 23:52:32","[{'comment_id': 645711479, 'comment_body': 'If you change this to `andThen`, I believe you could use `succeed` and `fail` to pass through the parsed value or error. That would allow you to resolve your todo comment `-- TODO return this error`.', 'comment_created': datetime.datetime(2021, 6, 4, 16, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dillonkearns', 'type': 'User'}]","[{'commit_sha': '1441e20d2eb34fece70a608f049239a080431f7a', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83643f7152f8b63325aa1bc9040f212e957d5b21', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e970820b34db6f053212bc3630cf5351d013daf8', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c0fd0df2825ec6449950e85e9adb5185279a9f', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65c5f2f43885d646170f6fe90b64ab54dc7806b7', 'committer_username': 'LutSa', 'committer_name': 'Wu Jinyi', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 13, 6, 18, 48, tzinfo=datetime.timezone.utc)}]",Wu Jinyi,80566705,,User,,6,,13,21
650816543,Fix minor emphasis parsing cases,"Support for strong/emphasis and open and close token. 
",True,82,https://api.github.com/repos/dillonkearns/elm-markdown/pulls/82,https://github.com/dillonkearns/elm-markdown/pull/82,closed,275,285,9,2,1,0,0,0,[],2021-05-23 16:22:59+00:00,2021-05-23 16:36:32+00:00,813.0,0:13:33,[],"[{'commit_sha': 'f614759cf2ef470ecdb5fe6aaac3734e8eea5709', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b0d45a5a3bb6a57ffe37d6685e5d39250683bc23', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Wu Jinyi,80566705,,User,,6,,13,21
592384202,Another attempt to fix minor heading parsing cases related to whitespace #76,"I tried to fix all of the issues in #58. I dropped the closing sequence (trailing '#') and required space or the end of line (or the end of file) after the opening sequence of '#'. I didn't finish the tests in the previous PR and now I've tested it hopefully :-).

I'm not an expert and this is even my second PR :-). So please point out some deficiencies if there are any.",True,77,https://api.github.com/repos/dillonkearns/elm-markdown/pulls/77,https://github.com/dillonkearns/elm-markdown/pull/77,closed,3101,68,9,5,2,1,0,0,[],2021-03-13 16:00:47+00:00,2021-03-16 18:00:59+00:00,266412.0,"3 days, 2:00:12","[{'comment_id': 593815165, 'comment_body': '```suggestion\r\n                                    |> String.trim\r\n```\r\n\r\nThis should be equivalent to `trim` (and might be a little bit more performant possibly).', 'comment_created': datetime.datetime(2021, 3, 13, 23, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dillonkearns', 'type': 'User'}]","[{'commit_sha': '01c802bb2a8df75217cecda44918e5cbe0a3d27d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c59497436d7305ee80aaec91ef8e5873354c64ff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '75480f088c2fa76c30ee872b265fe6e8a60d0c8c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '886a571ea2d174d1402e77e52f787a8324180332', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd3f6c21dd1db879dd745685d501f23cc12776c2d', 'committer_username': 'dillonkearns', 'committer_name': 'Dillon Kearns', 'committer_email': 'dillon@incrementalelm.com', 'commit_date': datetime.datetime(2012, 1, 27, 7, 18, 19, tzinfo=datetime.timezone.utc)}]",Wu Jinyi,80566705,,User,,6,,13,21

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
211747963,elm-markdown,dillonkearns/elm-markdown,Elm,32,106,6,18,894,37,13,10,"[{'id': 1161995911, 'number': 130, 'closed': datetime.datetime(2023, 1, 2, 16, 31, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 13, 1, 27, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1782252.0, 'time_delta': '20 days, 15:04:12', 'additions': 71, 'deletions': 2, 'state': 'closed'}, {'id': 1150014729, 'number': 127, 'closed': datetime.datetime(2023, 1, 2, 16, 24, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 6, 21, 41, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2313768.0, 'time_delta': '26 days, 18:42:48', 'additions': 221, 'deletions': 141, 'state': 'closed'}, {'id': 674074564, 'number': 88, 'closed': datetime.datetime(2021, 8, 20, 15, 29, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 20, 17, 55, 46, tzinfo=datetime.timezone.utc), 'time_taken': 5261600.0, 'time_delta': '60 days, 21:33:20', 'additions': 5289, 'deletions': 3844, 'state': 'closed'}, {'id': 661877350, 'number': 85, 'closed': datetime.datetime(2021, 7, 13, 14, 54, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 15, 38, 29, tzinfo=datetime.timezone.utc), 'time_taken': 3366959.0, 'time_delta': '38 days, 23:15:59', 'additions': 87, 'deletions': 58, 'state': 'closed'}, {'id': 661841356, 'number': 84, 'closed': datetime.datetime(2021, 7, 13, 14, 54, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 15, 1, 55, tzinfo=datetime.timezone.utc), 'time_taken': 3369152.0, 'time_delta': '38 days, 23:52:32', 'additions': 232, 'deletions': 116, 'state': 'closed'}, {'id': 650816543, 'number': 82, 'closed': datetime.datetime(2021, 5, 23, 16, 36, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 23, 16, 22, 59, tzinfo=datetime.timezone.utc), 'time_taken': 813.0, 'time_delta': '0:13:33', 'additions': 275, 'deletions': 285, 'state': 'closed'}, {'id': 592384202, 'number': 77, 'closed': datetime.datetime(2021, 3, 16, 18, 0, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 16, 0, 47, tzinfo=datetime.timezone.utc), 'time_taken': 266412.0, 'time_delta': '3 days, 2:00:12', 'additions': 3101, 'deletions': 68, 'state': 'closed'}, {'id': 592354989, 'number': 76, 'closed': datetime.datetime(2021, 3, 13, 13, 13, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 12, 25, 1, tzinfo=datetime.timezone.utc), 'time_taken': 2914.0, 'time_delta': '0:48:34', 'additions': 30, 'deletions': 10, 'state': 'closed'}]"
