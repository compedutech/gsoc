pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
658887122,Refactor liouville solver,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348

#### Brief description of what is fixed or changed
Refactored liouville hint.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21555,https://api.github.com/repos/sympy/sympy/pulls/21555,https://github.com/sympy/sympy/pull/21555,closed,100,93,3,4,4,7,0,0,[],2021-06-01 10:36:25+00:00,2021-06-03 00:05:57+00:00,134972.0,"1 day, 13:29:32","[{'comment_id': 643032431, 'comment_body': ""We shouldn't call `simplify` twice. This was already calculated in `_verify`."", 'comment_created': datetime.datetime(2021, 6, 1, 11, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 644092964, 'comment_body': 'What does `simplify: bool=True` mean? And how is it used (whatever the name) in this function? Perhaps it should just be dropped.', 'comment_created': datetime.datetime(2021, 6, 2, 15, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 644116023, 'comment_body': 'I guess this was used to simplify the solution, not sure though. @oscarbenjamin can you please explain a little?', 'comment_created': datetime.datetime(2021, 6, 2, 16, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 644290972, 'comment_body': ""I don't see the `simplify` flag being used anywhere. Not sure what it means. Maybe it should be dropped. In `dsolve` simplification is controlled elsewhere..."", 'comment_created': datetime.datetime(2021, 6, 2, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 644343555, 'comment_body': ""How do you read that syntax? what is 'simplify: bool=True'?"", 'comment_created': datetime.datetime(2021, 6, 2, 21, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 644346868, 'comment_body': 'Oh, static type-check reads as ""simplify is a bool and its value is True by default"". Let\'s drop this arg -- there is no simplification being requested or done by any of these functions.', 'comment_created': datetime.datetime(2021, 6, 2, 21, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 644363882, 'comment_body': 'It might be needed for some solvers so I suggest to finish the refactoring before deciding about that. These classes and methods are all internal so it should be safe to delete the argument later.', 'comment_created': datetime.datetime(2021, 6, 2, 22, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '2d2bb9f6f43b48d4bf4482c463e7079c60784524', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0855ccf482742a03bd879b735fdd0f036efc2d9b', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d16aba785f93d36c9e462bd26bcccf746c0db7', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a2eccd02c5e253b7d62b900a6006940b88b127', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
660722589,refactor separable solver,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348 

#### Brief description of what is fixed or changed
Refactored separable hint.

#### Other comments
 `ode_separable` method is still in `ode.py` as `separable_reduced` hint uses it.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21569,https://api.github.com/repos/sympy/sympy/pulls/21569,https://github.com/sympy/sympy/pull/21569,closed,103,67,3,1,2,0,1,0,[{'name': 'solvers.dsolve'}],2021-06-03 08:56:14+00:00,2021-06-04 00:00:19+00:00,54245.0,15:04:05,[],"[{'commit_sha': '45a56435f3396f413a9290d8778200ec220adc3e', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
662820486,Refactor separable reduced,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348

#### Brief description of what is fixed or changed
`separable_reduced` is refactored, as it used the same function as ode_separable after extracting coefficients, `SeparableReduced`  is inherited from `Separable` class.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21578,https://api.github.com/repos/sympy/sympy/pulls/21578,https://github.com/sympy/sympy/pull/21578,closed,154,162,3,2,2,1,1,0,[{'name': 'solvers.dsolve'}],2021-06-06 07:08:58+00:00,2021-06-06 11:49:25+00:00,16827.0,4:40:27,"[{'comment_id': 646121692, 'comment_body': '@oscarbenjamin I had a doubt as it was inherited from `Separable` class, In `ode.rst` when I wrote :members: it gave an error can you explain the reason?', 'comment_created': datetime.datetime(2021, 6, 6, 11, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}]","[{'commit_sha': 'd7cdda0d5971ccd7a4c651af90107e8b2910bcb1', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d880b76f1e157010a2a11a9476eed8296a9855', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
664448203,refactor dep-div-indep hint,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348

#### Brief description of what is fixed or changed


#### Other comments

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21588,https://api.github.com/repos/sympy/sympy/pulls/21588,https://github.com/sympy/sympy/pull/21588,closed,555,492,4,11,10,5,1,0,[{'name': 'solvers.dsolve'}],2021-06-08 08:08:32+00:00,2021-06-12 11:43:19+00:00,358487.0,"4 days, 3:34:47","[{'comment_id': 649392845, 'comment_body': 'Should this be `autoclass`?', 'comment_created': datetime.datetime(2021, 6, 10, 17, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 649398053, 'comment_body': 'yes, this should be autoclass. will rectify it', 'comment_created': datetime.datetime(2021, 6, 10, 17, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 649525748, 'comment_body': 'Why do some autoclass blocks have members but others not?\r\n\r\nIs it useful to show the members?', 'comment_created': datetime.datetime(2021, 6, 10, 20, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 649717489, 'comment_body': ""official documentation says if we keep the :members: block then it will include docstrings of member functions also. but in previous class like Factorable, initially it was not there but someone made commit stating 'expanding documentation', so I thought it is the practice to be followed."", 'comment_created': datetime.datetime(2021, 6, 11, 6, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 650382820, 'comment_body': 'There should be two blank lines between top-level classes/functions', 'comment_created': datetime.datetime(2021, 6, 12, 11, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '23a452182fdeb22a78b8e8959df25c8c12e34867', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ddf5de3dd8e946ebde819b8c1a0f35a59200aad', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c7a2e2bd2f787eaaccbff728cfcdf07e0f509f', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64bab8cd45b59e6e07a44d525c83cffaa151460c', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f0efcc0c0b73b17767dff21c9c82e46da7f684a', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065b15b35d2c0fd1f42cf4ef0dddce0ac70bf756', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f4a3fd263644b0bfc1fff95339abf3fb0c7498', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e3d8a8003d1c0a174df82accab9829ef7645ea', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7061891cb2e5917ad77733d9c47c0913ddb50ea', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59897a2276e6b05a181575da4d0c1958c5932279', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2867b051a88d88a329154d35b6a2a32f126bac5', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
669098094,Refactor(dsolve): nth order reducible,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21609,https://api.github.com/repos/sympy/sympy/pulls/21609,https://github.com/sympy/sympy/pull/21609,closed,96,95,4,4,4,4,1,0,[{'name': 'solvers'}],2021-06-13 18:46:22+00:00,2021-06-14 13:39:00+00:00,67958.0,18:52:38,"[{'comment_id': 650567320, 'comment_body': 'Maybe just change the function `F` rather than adding the same to all examples', 'comment_created': datetime.datetime(2021, 6, 13, 19, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 650567670, 'comment_body': ""Sorry, I couldn't understand the part change the function F? "", 'comment_created': datetime.datetime(2021, 6, 13, 19, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 650568192, 'comment_body': ""The function `F` is supposed to handle the repetitive parts in these test examples. You've just added repetitive changes to each example when you could have just changed the function `F`."", 'comment_created': datetime.datetime(2021, 6, 13, 19, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 650568652, 'comment_body': '````\nF = lambda eq: NthOrderReducible(SingleODEProblem(eq, f(x) , x))._matches()\nD = Derivative\nassert F(D(y*f(x), x, y) + D(f(x), x)) == False\n````\nSomething like this? ', 'comment_created': datetime.datetime(2021, 6, 13, 19, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}]","[{'commit_sha': '4a12e4636f5623d4e3c85c07631a64ef74c63920', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3bd87655c5ae2dda5cb98f4cfb8b84cf1002f1d', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dedd0d7ea5f53b6d544996d3813c0bb3550da1c', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4711ae297bf9c697ada9f38179df6360b1b9cd6', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
672375620,Refactor hypergeometric solver,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21630,https://api.github.com/repos/sympy/sympy/pulls/21630,https://github.com/sympy/sympy/pull/21630,closed,368,256,5,8,16,15,2,0,"[{'name': 'GSoC'}, {'name': 'solvers.dsolve'}]",2021-06-17 08:24:43+00:00,2021-06-20 19:35:19+00:00,299436.0,"3 days, 11:10:36","[{'comment_id': 653349129, 'comment_body': '@oscarbenjamin I am not sure about this example whether it should match this equation with `2nd_hypergeometric` hint. Although it returns a solution when called with dsolve.\r\n```python\r\n>>> eq = (1 + x**2)*(f(x).diff(x, 2)) + 2*x*(f(x).diff(x)) -2*f(x)\r\n>>> dsolve(eq)\r\nEq(f(x), sqrt(x**2 + 1)*(C1*sqrt(x**2/(x**2 + 1))*hyper((0, 0), (3/2,), x**2/(x**2 + 1)) + C2*hyper((-1/2, -1/2), (1/2,), x**2/(x**2 + 1)))*(x**2)**(1/4)/sqrt(x))\r\n```\r\nBut when I call checkodesol(eq, sol), It hangs.\r\n\r\nAccording to earlier matching code, it has conditions such that whener a example has `2nd_power_series_ordinary` as a hint, then it will not check for `2nd_hypergeometric`', 'comment_created': datetime.datetime(2021, 6, 17, 8, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 653370529, 'comment_body': 'We basically never want the series solution if one of the other solvers can give a non-series solution so the earlier matching code was incorrect.', 'comment_created': datetime.datetime(2021, 6, 17, 9, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654272353, 'comment_body': 'Most of the code in this class should be in functions in hypergeometric.py. The class should be completely minimal.', 'comment_created': datetime.datetime(2021, 6, 18, 9, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654273206, 'comment_body': 'The code for getting the coefficients of a linear ODE should not just be in this particular solver. Many solvers need it.', 'comment_created': datetime.datetime(2021, 6, 18, 9, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654317662, 'comment_body': 'In `SinglePatternODESolver`, there is `wilds()` method, so should I use pattern matching for this?', 'comment_created': datetime.datetime(2021, 6, 18, 10, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 654391173, 'comment_body': 'I think that the ODE problem class should have a method for getting the coefficients of a linear ODE:\r\nhttps://github.com/sympy/sympy/blob/ce8b52f462ac1017f37bfef944c095a0b5756be0/sympy/solvers/ode/single.py#L144-L148', 'comment_created': datetime.datetime(2021, 6, 18, 12, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654409498, 'comment_body': 'https://github.com/sympy/sympy/blob/a8299e5d3a4309946439dd440421c2a8d7b91ae9/sympy/solvers/ode/ode.py#L3275\r\nThis one?', 'comment_created': datetime.datetime(2021, 6, 18, 13, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 654800063, 'comment_body': 'I think this would make a better example for the doctest.', 'comment_created': datetime.datetime(2021, 6, 19, 14, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654800105, 'comment_body': 'This should say that `A` and `B` are rational functions of `x`.', 'comment_created': datetime.datetime(2021, 6, 19, 14, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654800254, 'comment_body': 'This should go in a\r\n```\r\nNotes\r\n=====\r\n```\r\nsection and should be worded better. The equation should be part of a sentence.', 'comment_created': datetime.datetime(2021, 6, 19, 14, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654800326, 'comment_body': 'There should be two spaces here and also in other places. Currently the spacing is inconsistent in this file.', 'comment_created': datetime.datetime(2021, 6, 19, 14, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654800679, 'comment_body': 'Yes, I tried that but only classify_ode works fine for this. dsolve returns ""This equation cannot be solved by hypergeometric""', 'comment_created': datetime.datetime(2021, 6, 19, 14, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 654801899, 'comment_body': 'This is not well written. Capitalisation is inconsistent. There should be a space after a comma.\r\n```\r\nThis module contains the implementation of the 2nd_hypergeometric hint for\r\ndsolve. This is an incomplete implementation of the algorithm described in [1].\r\nThe algorithm solves 2nd order linear ODEs of the form\r\n\r\n.. math:: y\'\' + A(x) y\' + B(x) y = 0\\text{,}\r\n\r\nwhere `A` and `B` are rational functions. The algorithm should find any\r\nsolution of the form\r\n\r\n.. math:: y = P(x) _pF_q(..; ..;\\frac{\\alpha x^k + \\beta}{\\gamma x^k + \\delta})\\text{,}\r\n\r\nwhere pFq is any of 2F1, 1F1 or 0F1 and `P` is an ""arbitrary function"".\r\nCurrently only the 2F1 case is implemented in SymPy but the other cases are\r\ndescribed in the paper and could be implemented in future (contributions\r\nwelcome!).\r\n\r\nReferences\r\n==========\r\n\r\n.. [1] L. Chan, E.S. Cheb-Terrab, Non-Liouvillian solutions for second order\r\n       linear ODEs, (2004).\r\n       https://arxiv.org/abs/math-ph/0402063\r\n```', 'comment_created': datetime.datetime(2021, 6, 19, 14, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654802439, 'comment_body': ""Oh well that's a bug. Can you open an issue? Maybe CC @RituRajSingh878 in the issue"", 'comment_created': datetime.datetime(2021, 6, 19, 14, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 654896503, 'comment_body': ""I have fixed this in the latest commit of this PR, But I don't know why it is not showing this review 'outdated'.🤔"", 'comment_created': datetime.datetime(2021, 6, 20, 8, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}]","[{'commit_sha': '4156966c68ffc82c4510ab83d1f22108e81abc2f', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed00be5526ec565d97db0acb2387a223839b4c82', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce8b52f462ac1017f37bfef944c095a0b5756be0', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46932534390fa81d6df0b3a9c5bd2fc644b80f0c', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d6347af88c179cdbe163410a1be15852364f789', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '401262b9a5212a6c0c15a4674fe63c229de94f14', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17173940c572d5a93d06bc93e00955c44123687', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd7209269ce636bd5ff731471db2a6eafc481bca', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
676029669,refactor const homogenous hints,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21654,https://api.github.com/repos/sympy/sympy/pulls/21654,https://github.com/sympy/sympy/pull/21654,closed,744,145,5,7,4,59,1,0,[{'name': 'solvers.dsolve'}],2021-06-23 07:36:30+00:00,2021-06-30 13:24:38+00:00,625688.0,"7 days, 5:48:08","[{'comment_id': 656840358, 'comment_body': '@oscarbenjamin This snippet is kept as separate function for now because when I keep it inside `preprocess_eq`, other solvers( pattern matching ones) fail to classify many examples as everytime the highest order coeff is removed. example : `f(x).diff(x)*f(x) + f(x)*f(x) - x*f(x)`. If you could please help in this, how this should be handled as this manipulation is required for const coeff hints.', 'comment_created': datetime.datetime(2021, 6, 23, 7, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 656843355, 'comment_body': 'Also, this raises an exception  \r\n```\r\nFile ""/home/runner/work/sympy/sympy/sympy/solvers/ode/single.py"", line 2691, in _get_general_solution\r\n    gsol = self._solve_undetermined_coefficients(self.r)\r\n File ""/home/runner/work/sympy/sympy/sympy/solvers/ode/single.py"", line 2668, in _solve_undetermined_coefficients\r\n    coeffvals = solve(list(coeffsdict.values()), coefflist)\r\n    raise GeneratorsNeeded(\r\nsympy.polys.polyerrors.GeneratorsNeeded: can\'t initialize from \'dict\' without generators\r\n```\r\nwhereas when I used inheritance, it was working fine.', 'comment_created': datetime.datetime(2021, 6, 23, 7, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 656959065, 'comment_body': 'I think this is fine.', 'comment_created': datetime.datetime(2021, 6, 23, 10, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657841450, 'comment_body': 'These examples should be updated to show how to use the method here', 'comment_created': datetime.datetime(2021, 6, 24, 10, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657843315, 'comment_body': 'Can this function just use the `_lineq2dict` function defined here:\r\nhttps://github.com/sympy/sympy/blob/6a57794ca820ac055106e7f421f12e99e5aac832/sympy/polys/matrices/linsolve.py#L171-L172', 'comment_created': datetime.datetime(2021, 6, 24, 10, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657845348, 'comment_body': 'We should keep the naming consistent. None of the other solvers has abbreviations like `Undet`. Also the other class names correspond directly to the hint names except in camel case rather than snake case.', 'comment_created': datetime.datetime(2021, 6, 24, 11, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657846346, 'comment_body': 'Why has this changed?', 'comment_created': datetime.datetime(2021, 6, 24, 11, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657855932, 'comment_body': ""`NthLinearConstantCoeffUndeterminedCoefficients`  but wouldn't it be too long as a class name?"", 'comment_created': datetime.datetime(2021, 6, 24, 11, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 657858211, 'comment_body': 'I think because of ordering of constants and simplification function is called inside solver earlier this was handled in `odesimp`.', 'comment_created': datetime.datetime(2021, 6, 24, 11, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 657873792, 'comment_body': ""Hardly anyone ever needs to type the class name. The hint is what users have to type and is `nth_linear_constant_coeff_undetermined_coefficients`. It would have been good to make that shorter but it's too late for that now. For the class names consistency is more important than length."", 'comment_created': datetime.datetime(2021, 6, 24, 11, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657874079, 'comment_body': 'Can we not just let `odesimp` handle this?', 'comment_created': datetime.datetime(2021, 6, 24, 11, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657882424, 'comment_body': 'In odesimp there was explicit condition for the hints having `nth_linear_const_coeff`, with the help of global variable it was handling the simplification which we discussed in the meeting. But now that simplification is moved in the solver.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 657893223, 'comment_body': '```python\r\n>>> _lin_eq2dict(eq, {f(x),f(x).diff(x),f(x).diff(x,2),f(x).diff(x,3)})\r\n(x - sin(x), {f(x): -1, Derivative(f(x), x): cos(x) + 2, Derivative(f(x), (x, 2)): x, Derivative(f(x), (x, 3)): 1})\r\n```\r\nThis also looks fine, only output format is changed. so should I change to use this function?\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 12, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 657914529, 'comment_body': 'Yes. that should simplify it a bit.\r\n\r\nThe docstring should be rewritten just to say that it gets the coefficients of the ODE. Is it more convenient for the calling code to have a dict with e.g. `f(x)` as the key or just a list of coefficients in order of derivatives?', 'comment_created': datetime.datetime(2021, 6, 24, 12, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657915623, 'comment_body': ""I still don't understand why we can't just let `odesimp` do all the simplification. If it can't figure out which expressions to collect on then maybe odesimp needs to be improved."", 'comment_created': datetime.datetime(2021, 6, 24, 12, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657948675, 'comment_body': 'so If we keep that simplification part in `odesimp` then we also need to pass the list of collectterms to it so that it can handle.\r\nIf you can suggest some other way, it would be helpful.', 'comment_created': datetime.datetime(2021, 6, 24, 13, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 657959702, 'comment_body': 'I think dictionary is good as it provides more readability. If you want me to change to list, I will do that', 'comment_created': datetime.datetime(2021, 6, 24, 13, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 657971676, 'comment_body': ""Why can't `odesimp` just figure out which terms to collect on itself?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 24, 13, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 657978055, 'comment_body': 'In this case the terms are roots of that equation with real and imaginary parts also. I will try to think if it can be managed', 'comment_created': datetime.datetime(2021, 6, 24, 14, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 658130126, 'comment_body': '@oscarbenjamin `_lin_eq2dict()` does not check whether the given ODE is linear. so should I keep `nth_linear_match` code only?\r\n```python\r\n>>> eq=f(x).diff(x, 3) + 2*f(x).diff(x) +x*f(x).diff(x, 2) + cos(x)*f(x).diff(x) + x - f(x) -sin(f(x))\r\n>>> _nth_linear_match(eq, f(x), 3)\r\nNone\r\n>>> _lin_eq2dict(eq,{f(x),f(x).diff(x),f(x).diff(x,2),f(x).diff(x,3)})\r\n(x - sin(f(x)), {f(x): -1, Derivative(f(x), x): cos(x) + 2, Derivative(f(x), (x, 2)): x, Derivative(f(x), (x, 3)): 1})\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 24, 17, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 658132090, 'comment_body': ""I had a look at `odesimp` it solves for `func` basically and handles constants. I couldn't come up with a way to handle our case. if you can have a look and suggest please."", 'comment_created': datetime.datetime(2021, 6, 24, 17, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 658135477, 'comment_body': 'Oh yes, I forgot about that.\r\n\r\nYou could check if the rhs or any of the values of the dict has `f(x)` like:\r\n```python\r\nIn [1]: sin(f(x)).has(f(x))\r\nOut[1]: True\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 17, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 658138025, 'comment_body': 'Wherever the old code is calling collect with `collectterms` it should be possible to add some code that calculates which terms to collect with by checking for e.g. `exp`, `sin` or `cos` terms that involve `t`.', 'comment_created': datetime.datetime(2021, 6, 24, 17, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 658608464, 'comment_body': 'Old code is calling collect on `x**i*exp(reroot*x)*sin(abs(imroot)*x)` where i is the multiplicity. so if we want odesimp to handle this then it will require `(i,imroot,reroot)` also. ', 'comment_created': datetime.datetime(2021, 6, 25, 8, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 658667566, 'comment_body': ""Why does it need them? Why can't it just do `expr.atoms(exp)`?\r\n\r\nThe `simpsol` function in `systems.py` doesn't need to be told exactly which terms to collect on so why does `odesimp`?"", 'comment_created': datetime.datetime(2021, 6, 25, 10, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 658712291, 'comment_body': '```python\r\nsol = expand_mul(sol)\r\narr=eq[0].rhs.atoms(exp)\r\narr2=eq[0].rhs.atoms(sin)\r\narr3=eq[0].rhs.atoms(cos)\r\nfor i in arr:\r\n    sol = collect(sol,i)\r\nfor i in arr2:\r\n    sol = collect(sol,i)\r\nfor i in arr3:\r\n    sol = collect(sol,i)\r\nsol = powsimp(sol)\r\nreturn Eq(f(x), sol)\r\n```\r\nI tried this, it changes a lot of current expected solutions for these hints.', 'comment_created': datetime.datetime(2021, 6, 25, 12, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 658762471, 'comment_body': 'If you can make it pass the same arguments to `collect` then it should give the same results.', 'comment_created': datetime.datetime(2021, 6, 25, 13, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 658780256, 'comment_body': 'how do i pass that because old code does `sol = collect(sol, x**i*exp(reroot*x)*sin(abs(imroot)*x))`', 'comment_created': datetime.datetime(2021, 6, 25, 13, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 658831821, 'comment_body': 'Can you give an example of input and expected output as well as the arguments that are passed to `collect`?', 'comment_created': datetime.datetime(2021, 6, 25, 14, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 658872764, 'comment_body': '```python\r\n>>> eq=-x**4*sin(x - 1) + f(x) + Derivative(f(x), (x, 2))\r\n[(0, 0, -1), (0, 0, 1)]  #(multiplicity, reroot, imroot)\r\nsol = collect(sol, x**i*exp(reroot*x)*sin(abs(imroot)*x))\r\nsol = collect(sol, x**i*exp(reroot*x)*cos(imroot*x))\r\nsol = collect(sol, x**i*exp(reroot*x))\r\nsol = powsimp(sol)\r\nexpected_sol = Eq(f(x), C1*sin(x) + C2*cos(x) - x**5*cos(x - 1)/10 + x**4*sin(x - 1)/4 + x**3*cos(x - 1)/2 - 3*x**2*sin(x - 1)/4 - 3*x*cos(x - 1)/4)\r\n```\r\nThe code snippet which I shared [here](https://github.com/sympy/sympy/pull/21654#discussion_r658712291) gives `Eq(f(x), C1*sin(x) + C2*cos(x) + x**2*(x**2 - 3)*sin(x - 1)/4 + x*(-2*x**4 + 10*x**2 - 15)*cos(x - 1)/20)`', 'comment_created': datetime.datetime(2021, 6, 25, 15, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 658924378, 'comment_body': 'This discussion would be a lot quicker if you would communicate more clearly.\r\n\r\nWhat is `sol` in this example?', 'comment_created': datetime.datetime(2021, 6, 25, 17, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 658938553, 'comment_body': ""sorry for the miscommunication.\r\nLet's take the example `eq=-8*f(x) + 12*Derivative(f(x), x) - 6*Derivative(f(x), (x, 2)) + Derivative(f(x), (x, 3))` the root is 2. so the collectterms (which is an array of tupe having `(multiplicity, realroot, imaginaryPart)`) will be  `[(2, 2, 0), (1, 2, 0), (0, 2, 0)]`.\r\ngeneral sol returned will be `Eq(f(x), C1*exp(2*x) + C2*x*exp(2*x) + C3*x**2*exp(2*x))`.\r\nAfter doing collect on roots the expected simplified solution is `Eq(f(x), (C1 + x*(C2 + C3*x))*exp(2*x))`.\r\nIf it is still not clear, can we have discuss this on meet? "", 'comment_created': datetime.datetime(2021, 6, 25, 17, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 658973970, 'comment_body': ""We can do that like:\r\n```python\r\nIn [24]: C1, C2, C3 = symbols('C1:4')\r\n\r\nIn [25]: eq = Eq(f(x), C1*exp(2*x) + C2*x*exp(2*x) + C3*x**2*exp(2*x)).rhs\r\n\r\nIn [26]: eq\r\nOut[26]: \r\n    2⋅x         2⋅x       2  2⋅x\r\nC₁⋅ℯ    + C₂⋅x⋅ℯ    + C₃⋅x ⋅ℯ   \r\n\r\nIn [27]: eq.collect(eq.atoms(exp))\r\nOut[27]: \r\n⎛                2⎞  2⋅x\r\n⎝C₁ + C₂⋅x + C₃⋅x ⎠⋅ℯ \r\n\r\n\r\nIn [28]: eq.collect(eq.atoms(exp), horner)\r\nOut[28]: \r\n                      2⋅x\r\n(C₁ + x⋅(C₂ + C₃⋅x))⋅ℯ \r\n```\r\nActually I prefer `Out[27]` though. I don't see why we would want to change it to `Out[28]`."", 'comment_created': datetime.datetime(2021, 6, 25, 18, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 658976434, 'comment_body': 'Yes `out[27]` is achievable, but this was just one of the examples. I think I should commit and change the examples and then we can discuss further if the examples look simplified or not. ', 'comment_created': datetime.datetime(2021, 6, 25, 18, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659242998, 'comment_body': 'This line is too long', 'comment_created': datetime.datetime(2021, 6, 27, 0, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659243043, 'comment_body': 'Do we still need to check the hint here? It would be better not to have simplification that is specific to one hint if possible.', 'comment_created': datetime.datetime(2021, 6, 27, 0, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659243175, 'comment_body': 'Can we just do `rhs.atoms(exp, sin, cos)` and then collect on that?\r\n', 'comment_created': datetime.datetime(2021, 6, 27, 0, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659243232, 'comment_body': 'This line is too long', 'comment_created': datetime.datetime(2021, 6, 27, 0, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659243281, 'comment_body': 'Space after comma', 'comment_created': datetime.datetime(2021, 6, 27, 0, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659243471, 'comment_body': 'If this is not supposed to match any more then this list should be deleted', 'comment_created': datetime.datetime(2021, 6, 27, 0, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659272608, 'comment_body': 'The reason I did separately was because we also want to do `collect(expr, exp(x)*sin(x))` basically on all combinations of `exp*sin` and `exp*cos`', 'comment_created': datetime.datetime(2021, 6, 27, 6, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659273744, 'comment_body': 'yes, because the way collect is done is specifically for the solutions returned by `nth_linear_constant_coeff` due to roots of characterstic equation. \r\nIf we remove this if statement, It will change the form of solutions of other hints too as they already return solution solved for func.\r\nExample:\r\n```python\r\n>>> eq = (x*log(f(x)/x) - 2*x)*Derivative(f(x), x) + f(x)\r\n>>> dsolve(eq)  # keeping this If condition\r\nEq(f(x), -exp(C1)*LambertW(-x*exp(1 - C1)))\r\n\r\n>>> dsolve(eq) #removing If condition\r\nEq(f(x), -exp(C1)*LambertW(-E*x*exp(-C1)))\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 6, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659302490, 'comment_body': 'Does it make a different to the end result?', 'comment_created': datetime.datetime(2021, 6, 27, 10, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659302680, 'comment_body': 'Ideally we would apply the same simplification routines to the solutions from all solvers. For now we can leave this here but ultimately I think it should be removed.\r\n\r\nPerhaps the best result would be to use the `simpsol` function from `systems.py`.', 'comment_created': datetime.datetime(2021, 6, 27, 10, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659306691, 'comment_body': 'The ans is correct without it also, but it was combining some examples in a nicer way. If you want me to remove, I will do that', 'comment_created': datetime.datetime(2021, 6, 27, 11, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659307096, 'comment_body': 'When you say ""in a nicer way"" it\'s hard for me to know what you mean without any examples.', 'comment_created': datetime.datetime(2021, 6, 27, 11, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659316608, 'comment_body': 'My bad. It was related to ordering only. \r\nI tried with `rhs.atoms(exp, sin, cos)` and ran collect over it. It change solution like:\r\n```\r\nThe ODE is:\r\nf(x) - Derivative(f(x), x) + Derivative(f(x), (x, 2))\r\n\r\nThe expected solution was\r\nEq(f(x), (C1*sin(sqrt(3)*x/2) + C2*cos(sqrt(3)*x/2))*exp(x/2))\r\n\r\nWhat dsolve returned is:\r\nEq(f(x), (C1*sin(sqrt(3)*x/2) + C2*cos(sqrt(3)*x/2))*sqrt(exp(x)))\r\n\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659332817, 'comment_body': ""Why does that come out different? There must be something else turning `exp(x/2)` into `sqrt(exp(x))` because `collect` shouldn't do that."", 'comment_created': datetime.datetime(2021, 6, 27, 14, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659349441, 'comment_body': ""The reason was as `.atoms()` returns a set so it was returning `{cos(sqrt(3)*x/2), sin(sqrt(3)*x/2), exp(x/2)}` for the above mentioned example whereas we wanted to collect first on exp terms. That's why I have used a list now."", 'comment_created': datetime.datetime(2021, 6, 27, 17, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659384837, 'comment_body': 'What happens if you use the `simpsol` function from `systems.py` here? Does it give different results?', 'comment_created': datetime.datetime(2021, 6, 27, 22, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659540553, 'comment_body': 'As far as I understood, simpsol takes list of symbols to be collected on but we want this collect to be on given functions i.e exp,sin and cos.\r\nAlthough I tried by passing constants like `simpsol(eq, [C1], constants)`, here is the example of simple equations: \r\n```python\r\n>>> eq=f(x).diff(x, 3) - f(x).diff(x) - sinh(x) - exp(x)\r\n>>> dsolve(eq)\r\n[Eq(f(x), C1*exp(-x) + C2 + C3*exp(x) + x*(exp(x) + sinh(x))/2)]   #solution returned by simpsol\r\nEq(f(x), C1 + C3*exp(-x) + x*sinh(x)/2 + (C2 + x/2)*exp(x))   #expected solution\r\n\r\n>>> eq=f(x).diff(x, 2) - f(x) - exp(x - 1)\r\n>>> dsolve(eq)\r\n[Eq(f(x), C1*exp(-x) + C2*exp(x) + x*exp(x - 1)/2)]  #solution returned by simpsol\r\nEq(f(x), C2*exp(-x) + (C1 + x*exp(-1)/2)*exp(x))  #expected solution\r\n``` ', 'comment_created': datetime.datetime(2021, 6, 28, 7, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659717977, 'comment_body': 'The idea with `simpsol` is that you tell it to collect like `simpsol(eq, [C1, C2, ...], [t])` and then it understands that `t` could mean `exp(t)`, `sin(t)*exp(t)` etc. It finds everything that involves `t`. You can also tell it to collect like `simpsol(eq, [t], [C1, C2, ...])` to reverse the order between collecting on `t` vs collecting on the constants.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659735157, 'comment_body': ""I tried `simpsol(eq, [x], constants)`  as well as `simpsol(eq, constants, [x])` . But for some of the examples it doesn't collect properly. Two of them are:\r\n```\r\nThe ODE is:\r\n-exp(x) - sinh(x) - Derivative(f(x), x) + Derivative(f(x), (x, 3))\r\n\r\nThe expected solution was\r\n[Eq(f(x), C1 + C3*exp(-x) + x*sinh(x)/2 + (C2 + x/2)*exp(x))]\r\n\r\nWhat dsolve returned is:\r\nEq(f(x), C1 + C2*exp(-x) + C3*exp(x) + x*exp(x)/2 + x*sinh(x)/2)\r\n\r\n```\r\n\r\n```\r\nThe ODE is:\r\n-x - x*exp(-x) - f(x) + Derivative(f(x), x) + 5*Derivative(f(x), (x, 2)) + 3*Derivative(f(x), (x, 3))\r\n\r\nThe expected solution was\r\n[Eq(f(x), C3*exp(x/3) - x + (C1 + C2*x - x**3/24 - 3*x**2/32)*exp(-x) - 1)]\r\n\r\nWhat dsolve returned is:\r\nEq(f(x), C1*x*exp(-x) + C2*exp(-x) + C3*exp(x/3) - x**3*exp(-x)/24 - 3*x**2*exp(-x)/32 - x - 1)\r\n\r\n```"", 'comment_created': datetime.datetime(2021, 6, 28, 12, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659743778, 'comment_body': ""Maybe `simpsol` can be improved. I'm still not sure which of these forms I prefer. I think that this is something good to discuss in the meeting. Can you collect examples of how solutions look when collected in different ways so that we can compare them in the meeting?"", 'comment_created': datetime.datetime(2021, 6, 28, 12, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659745506, 'comment_body': 'okay, sure I will write them.', 'comment_created': datetime.datetime(2021, 6, 28, 12, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659943303, 'comment_body': 'Here is the list of examples. [Link](https://docs.google.com/document/d/1i4Zr22VXeDRA0eialHRlLmp-2zbp_ALUdGr21ceOnd4/edit?usp=sharing)', 'comment_created': datetime.datetime(2021, 6, 28, 16, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659954812, 'comment_body': 'Which way round are you passing the arguments to `simpsol`? Does that make a difference? How is `simpsol` called in `systems.py`?', 'comment_created': datetime.datetime(2021, 6, 28, 16, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 659961091, 'comment_body': ""These examples in the doc were generated using `simpsol(eq, constants, [x])` . In most of the examples it wasn't making any difference when simpsol was called like this `simpsol(eq, [x],  constants)`.  In this [comment](https://github.com/sympy/sympy/pull/21654#discussion_r659735157) only these two examples doesn't change when the order of arguments was swapped."", 'comment_created': datetime.datetime(2021, 6, 28, 16, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 659964133, 'comment_body': 'In `systems.py` simpsol is called like `simpsol(sol, [t], constants, doit=doit)` where t is Independent variable in the system of ODEs', 'comment_created': datetime.datetime(2021, 6, 28, 17, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}]","[{'commit_sha': '2bb63bd10329a461643b8e6e51eb15e18ba8fed0', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8d2caa58bcbce2e5e2b6c83f93bcaadf934ce1a', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de7278277632fa4ff9a05b61be133ade19f53585', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c111fb7f09ff457a17eed95f2c31a545857d8ec4', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64a855d4fdc07af738759ba8111b5884aabf4074', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b18556b35fdc29840074c17742040095e3cd51e', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de4614d584ea58c056c0a4c95c7a385c6326a9eb', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
680970606,refactor euler solvers,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348 

#### Brief description of what is fixed or changed
Refactor Euler solvers and cleanup the constant coff code from ode.py

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21692,https://api.github.com/repos/sympy/sympy/pulls/21692,https://github.com/sympy/sympy/pull/21692,closed,835,1253,6,10,10,27,1,0,[{'name': 'solvers.dsolve'}],2021-06-30 15:15:36+00:00,2021-07-04 22:05:10+00:00,370174.0,"4 days, 6:49:34","[{'comment_id': 661865174, 'comment_body': ""It's helpful during refactoring if the tests are changed as little as possible so we can be clear that the mostly unchanged tests still pass. This could be:\r\n```\r\ndef _undetermined_coefficients_match(eq, x):\r\n    problem = SingleODEProblem(eq, f(x), x)\r\n    solver = NthLinearConstantCoeffUndeterminedCoefficients(problem)\r\n    return solver. _undetermined_coefficients_match(eq, x)\r\n```\r\nThen the rest of the testing code would not need to be changed."", 'comment_created': datetime.datetime(2021, 6, 30, 23, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662530242, 'comment_body': 'There should be a space after a comma (here and everywhere else)', 'comment_created': datetime.datetime(2021, 7, 1, 19, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662530402, 'comment_body': 'This line is too long', 'comment_created': datetime.datetime(2021, 7, 1, 19, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662530766, 'comment_body': ""It's probably better to give an example using `dsolve` here."", 'comment_created': datetime.datetime(2021, 7, 1, 19, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662531263, 'comment_body': ""Returning anything other than a list should fail here. Is there some code somewhere else that checks for this? Why didn't this fail before?"", 'comment_created': datetime.datetime(2021, 7, 1, 19, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662532012, 'comment_body': 'Only one blank line here', 'comment_created': datetime.datetime(2021, 7, 1, 19, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662533124, 'comment_body': ""Shouldn't this just be `return self._get_sols()`?\r\n\r\nIt would be better if the methods in these classes don't use internal variables like this. We should minimise instance attributes.\r\n\r\nWhy is `_get_sols` a different method from `_get_general_solution`?"", 'comment_created': datetime.datetime(2021, 7, 1, 19, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662536347, 'comment_body': ""If `r` is a dict then it isn't necessary to call `keys` here (the dict is already iterable).\r\n\r\nWhy would `i` be a `str`?"", 'comment_created': datetime.datetime(2021, 7, 1, 19, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662546972, 'comment_body': ""`r` can have key named 'trialset' which will be used for undetermined coefficient. \n"", 'comment_created': datetime.datetime(2021, 7, 1, 19, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 662548975, 'comment_body': '`_get_sols() ` is the method which calcutates the roots of characteristic equation. And to form that we need match_object.\n`self.r`  was kept as an argument because this method is also used by euler variation of parameters and euler undetermined coeffs so we need to pass their match object to this. ', 'comment_created': datetime.datetime(2021, 7, 1, 19, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 662559014, 'comment_body': 'It would be better to store trialset as a separate attribute rather than mix it up with the roots:\r\n```\r\nself.roots = ...\r\nself.trialset = ...\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 20, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662559544, 'comment_body': 'Rather than passing the match object it would be better if this had names arguments like `roots, trialset` or something.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662560772, 'comment_body': ""Why can't the vop and undet classes just use the euler class `get_general_solution` method?"", 'comment_created': datetime.datetime(2021, 7, 1, 20, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 662751088, 'comment_body': 'This docstring is just for getting trial set method. For examples of undet_coeff solver the docstring at class level has examples with dsolve.', 'comment_created': datetime.datetime(2021, 7, 2, 5, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 662752042, 'comment_body': 'Currently `test_single.py` handles both type of solutions with list as well as without as some of the solvers are yet to be refactored. After refactoring I will remove the conditional part from test suite so that it should expect list of solution from every  solver.', 'comment_created': datetime.datetime(2021, 7, 2, 5, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 662760953, 'comment_body': ""> Why can't the vop and undet classes just use the euler class `get_general_solution` method?\r\n\r\n\r\nbecause `get_general_solution` will return a equation where as in vop and undet we just want the list of roots of characterstic equation."", 'comment_created': datetime.datetime(2021, 7, 2, 6, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 663035186, 'comment_body': 'This space should not be here', 'comment_created': datetime.datetime(2021, 7, 2, 14, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663035669, 'comment_body': ""The `\\,` in latex is different from other commas since it represents a small space. I don't think that we need to also add a space after this."", 'comment_created': datetime.datetime(2021, 7, 2, 14, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663036004, 'comment_body': 'This space should not be here', 'comment_created': datetime.datetime(2021, 7, 2, 14, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663342796, 'comment_body': 'Two blank lines', 'comment_created': datetime.datetime(2021, 7, 3, 9, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663342901, 'comment_body': 'characteristic', 'comment_created': datetime.datetime(2021, 7, 3, 9, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663359318, 'comment_body': 'There should be some kind of comment or module level docstring at the top of the module explaining what it is.', 'comment_created': datetime.datetime(2021, 7, 3, 12, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663362217, 'comment_body': 'The functions in this file should have at least a one line docstring explaining what they are as well as comments explaining why they are here and what they are used for.', 'comment_created': datetime.datetime(2021, 7, 3, 12, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663405193, 'comment_body': 'Don\'t use ""It"" here. Just ""Returns ..."" is fine.\r\n\r\nThis doesn\'t really explain the function very well. What is the `match_obj` parameter supposed to be for example?', 'comment_created': datetime.datetime(2021, 7, 3, 20, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663405337, 'comment_body': ""I don't think that you need to detail each function at the top here. These kinds of comments/description are better placed in or immediately before the function.\r\n\r\nThis module level docstring just needs to explain the general purpose of the module."", 'comment_created': datetime.datetime(2021, 7, 3, 20, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663562027, 'comment_body': ""There shouldn't be a space here"", 'comment_created': datetime.datetime(2021, 7, 4, 22, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 663657252, 'comment_body': 'Okay, will remove it in next PR. ', 'comment_created': datetime.datetime(2021, 7, 5, 5, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}]","[{'commit_sha': '3d24590dd0b22b9c0d92085fb4653c1963106e04', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efe503c1580bb7a328e493301df81d3f4f266c4c', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd988a9b4684c295b0681db466d0aad06807697c2', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb490e057ded723731052ed92df97e74ed17404', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce0f8089c98a906f486f4ef0b770f3e9580d0e13', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f599823b62b9b65350720517ad3503253fbe637', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb786b4d9f4c155e72b13ec4fac29c50cc90704', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f90e7170258c97172174d72972059b0f880a1c65', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e407295ce0821612382065956af3204060479c7', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd943d0a7a3000bcb5a601a595f40199fd25b7c31', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
683564132,Refactor bessel solver,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
SEE #18348 

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21706,https://api.github.com/repos/sympy/sympy/pulls/21706,https://github.com/sympy/sympy/pull/21706,closed,210,173,4,8,12,10,1,0,[{'name': 'solvers.dsolve'}],2021-07-05 10:12:08+00:00,2021-07-08 10:48:39+00:00,261391.0,"3 days, 0:36:31","[{'comment_id': 664014687, 'comment_body': ""@oscarbenjamin According to my understanding about `2nd_linear_airy`, I attempted to simplify the match function something like :\r\n```python\r\n    def _matches(self):\r\n        eq = self.ode_problem.eq_high_order_free\r\n        f = self.ode_problem.func\r\n        order = self.ode_problem.order\r\n        x = self.ode_problem.sym\r\n        df = f.diff(x)\r\n        a4 = Wild('a4', exclude=[x,f,df])\r\n        b4 = Wild('b4', exclude=[x,f,df])\r\n        match = self.ode_problem.get_linear_coefficients(eq, f, order)\r\n        does_match = False\r\n        if order == 2 and match and match[2] != 0:\r\n            if match[1].is_zero:\r\n                self.rn = match[0].match(a4+b4*x)\r\n                if self.rn and self.rn[b4] != 0:\r\n                    self.rn = {'b':self.rn[a4],'m':self.rn[b4]}\r\n                    does_match = True\r\n        return does_match\r\n```\r\nIt passes all the tests but wanted to ask you does this diff look ok?"", 'comment_created': datetime.datetime(2021, 7, 5, 15, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 664068821, 'comment_body': ""Does `get_linear_coefficients` divide by the leading coefficient?\r\n\r\nWhat happens if you have something like `x y'' + x y = 0`?"", 'comment_created': datetime.datetime(2021, 7, 5, 17, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 664108218, 'comment_body': ""> x y'' + x y = 0\r\n\r\nIt fails for this. I thought `self.ode_problem.eq_high_order_free` passing in the `get_linear_coefficients` would work as eq_high_order_free removes leading coefficient but it only remove `f(x)` not x."", 'comment_created': datetime.datetime(2021, 7, 5, 19, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 664110589, 'comment_body': 'if we replace `self.rn = match[0].match(a4+b4*x)` with `self.rn = cancel(match[0]/match[2]).match(a4+b4*x)` . It will solve the problem :thinking: ', 'comment_created': datetime.datetime(2021, 7, 5, 20, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 664757768, 'comment_body': ""Shouldn't this be C1 and C2?"", 'comment_created': datetime.datetime(2021, 7, 6, 17, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 665322460, 'comment_body': ""Shouldn't this be marked as slow?"", 'comment_created': datetime.datetime(2021, 7, 7, 12, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 665354952, 'comment_body': 'yes, Done.', 'comment_created': datetime.datetime(2021, 7, 7, 13, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 665612665, 'comment_body': 'The equations here should be in LaTeX. If they are supposed to be code rather than equations then they should be in double backticks.', 'comment_created': datetime.datetime(2021, 7, 7, 18, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 665616333, 'comment_body': 'It would be better to call these e.g. `SecondLinearBessel`', 'comment_created': datetime.datetime(2021, 7, 7, 18, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 665647913, 'comment_body': 'Also Hypergeometric2nd should be renamed.', 'comment_created': datetime.datetime(2021, 7, 7, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '86854ccb1472dea94acaae34a7452401e6fa13c8', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b265bc8c18e2351859d80bf8d0f3ee449e558c3d', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a26542657df5f61a8e989843dfe5f1549190b8', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7688f4e016ca1b0283792891692756754792b357', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e633965f0dc23b5a281973feb13076f6880e16', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df9cc4f08261278fe55856eec3dd5b656e44f169', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '845bfcb7261fa673b8c21c9bf5c0078ba56facce', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b7910c9456ed3c7e6d48ff45578a4e79bee49f', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
686187629,refactor lie group solver,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348 

#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21722,https://api.github.com/repos/sympy/sympy/pulls/21722,https://github.com/sympy/sympy/pull/21722,closed,1227,1201,6,5,3,10,1,0,[{'name': 'solvers.dsolve'}],2021-07-08 17:07:43+00:00,2021-07-12 16:24:00+00:00,342977.0,"3 days, 23:16:17","[{'comment_id': 667389853, 'comment_body': 'This module needs a comment or module-level docstring that explains what it is', 'comment_created': datetime.datetime(2021, 7, 10, 22, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 667510513, 'comment_body': 'This is not a good explanation. Many of the functions below have docstrings with some explanations and also references to papers on which this implementation is based. Those references should be included here ideally with some context like ""this implements the algorithm from Y but also with heuristics from Z"" or something like that.', 'comment_created': datetime.datetime(2021, 7, 11, 17, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 667742281, 'comment_body': 'r""""""\r\nThis module contains the implementation of the lie_group hint for\r\ndsolve. Ideally any first order differential equation can be solved by lie_group.\r\nIt implements various heuristics.\r\n\r\nReferences\r\n==========\r\n\r\n- abaco1_simple from E.S Cheb-Terrab, L.G.S Duarte and L.A,C.P da Mota, Computer Algebra\r\nSolving of First Order ODEs Using Symmetry Methods, pp. 8\r\n\r\n- abaco1_product fromE.S. Cheb-Terrab, A.D. Roche, Symmetries and First Order ODE Patterns,\r\npp. 7 - pp. 8\r\n\r\n- abaco2_similar from E.S. Cheb-Terrab, A.D. Roche, Symmetries and First Order ODE Patterns,\r\npp. 10 - pp. 12\r\n\r\n- abaco2_unique_unknown from E.S. Cheb-Terrab, A.D. Roche, Symmetries and First Order ODE Patterns,\r\npp. 10 - pp. 12\r\n\r\n- abaco2_unique_general from E.S. Cheb-Terrab, A.D. Roche, Symmetries and First Order\r\nODE Patterns, pp. 10 - pp. 12\r\n\r\n- linear from Lie Groups and Differential Equations pp. 327 - pp. 329\r\n\r\n- function_sum from E.S. Cheb-Terrab, A.D. Roche, Symmetries and First Order\r\nODE Patterns, pp. 7 - pp. 8\r\n\r\n- bivariate from Lie Groups and Differential Equations pp. 327 - pp. 329\r\n\r\n- chi from E.S Cheb-Terrab, L.G.S Duarte and L.A,C.P da Mota, Computer Algebra\r\nSolving of First Order ODEs Using Symmetry Methods, pp. 8\r\n\r\n""""""\r\n@oscarbenjamin does this look ok?', 'comment_created': datetime.datetime(2021, 7, 12, 8, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 667826658, 'comment_body': ""Lots of those references are repeated so the descriptions can be combined. Also this text doesn't really explain anything about what anything in the module does."", 'comment_created': datetime.datetime(2021, 7, 12, 10, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 667828797, 'comment_body': 'Basically I have moved all the internal helper functions only and `single.py` has matching code and general solution for the solver. So should I write one-two line for every function at the top because that also will be redundant as every function has its docstring.', 'comment_created': datetime.datetime(2021, 7, 12, 10, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 667835198, 'comment_body': ""It's fine that each function has its own docstring. We just need some text that describes what this module contains from a high level."", 'comment_created': datetime.datetime(2021, 7, 12, 11, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 667850055, 'comment_body': 'This module contains the implementation of the internal helper functions for the lie_group hint for\r\ndsolve. These helper functions apply different heuristics on the given equation and return the solution. These functions are used by :py:meth:`sympy.solvers.ode.single.LieGroup`\r\n\r\nReferences\r\n=========\r\n\r\n* ``abaco1_simple`` , `function_sum` and `chi`  are referenced from E.S Cheb-Terrab, L.G.S Duarte and L.A,C.P da Mota, Computer Algebra Solving of First Order ODEs Using Symmetry Methods, pp. 7 - pp. 8\r\n\r\n* `abaco1_product`, `abaco2_similar`, `abaco2_unique_unknown`, `linear`  and `abaco2_unique_general` are referenced from E.S. Cheb-Terrab, A.D. Roche, Symmetries and First Order ODE Patterns, pp. 7 - pp. 12\r\n\r\n* `bivariate` from Lie Groups and Differential Equations pp. 327 - pp. 329\r\n\r\ndoes this look better?', 'comment_created': datetime.datetime(2021, 7, 12, 11, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 667938698, 'comment_body': ""Yes, that's better. Are there no authors listed for the third reference?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 12, 13, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 667945096, 'comment_body': ""No, The author isn't mentioned"", 'comment_created': datetime.datetime(2021, 7, 12, 13, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 668077477, 'comment_body': 'There should be two blank lines between top-level functions/classes.', 'comment_created': datetime.datetime(2021, 7, 12, 16, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '117e8c9899ff900c69b1e170dd503fdaeb45e062', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590289bd44a16e4a68d5bcf1ac8b795e1eeb675f', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7679b57edc19e5bed6a444b184a4d992c3ab0b50', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e92dce0ad2847ae49067322b74d49f5cb08618c', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52b10f3dc3fdeb422f23758fdb49604e40183ab9', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
689807679,Improve dsolve,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#18348 

#### Brief description of what is fixed or changed
Earlier the flow of code was dsolve -> _desolve -> classify_ode (which checked for every hint whether it matches and return all the matching hints) -> particular solver's general solution was called.

This PR now changes the flow in classify_ode as whenever the user calls with explicit hint, It won't be matching all the possible solvers. It will just create the instance of that particular class and if it matches it will return.

#### Other comments
This also significantly improves the speed of test suite.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21743,https://api.github.com/repos/sympy/sympy/pulls/21743,https://github.com/sympy/sympy/pull/21743,closed,63,51,5,11,15,10,1,0,[{'name': 'solvers.dsolve'}],2021-07-14 11:01:35+00:00,2021-07-22 10:58:21+00:00,691006.0,"7 days, 23:56:46","[{'comment_id': 669547696, 'comment_body': 'This should probably be a module level constant. Perhaps it should be defined at the bottom of `single.py`.', 'comment_created': datetime.datetime(2021, 7, 14, 12, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 669556751, 'comment_body': ""I would probably restructure this slightly:\r\n```python\r\n# Used when dsolve is called without an explicit hint.\r\n# We exit early to return the first valid match\r\nearly_exit = (user_hint == 'default')\r\n\r\n# An explicit hint has been given to dsolve\r\n# Skip matching code for other hints\r\nif user_hint not in ('default', 'all', 'all_Integral', 'best'):\r\n    solver_map = ... # only the relevant items\r\n\r\nfor hint, cls in solver_map.items()\r\n   ...\r\n   if solver.matches():\r\n       ...\r\n       if early_exit:\r\n           # maybe there needs to be a check here because of the unrefactored\r\n           # solvers that are matched below. I guess this should only return if the\r\n           # hint has a higher priority than all of those...\r\n           return matching_hints\r\n```\r\nI suppose ultimately if all solvers were refactored then we wouldn't need to call `classify_ode` at all when a hint is given but for now the explicit hint case can be handled here."", 'comment_created': datetime.datetime(2021, 7, 14, 12, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 669576860, 'comment_body': 'I am still trying to figure out what to do with the `default` hint as Factorable and NthorderReducible solvers call dsolve recursively. ', 'comment_created': datetime.datetime(2021, 7, 14, 12, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 669991643, 'comment_body': 'You have changed this code now but you seemed to have missed part of the point which is that by changing `solver_map` we can avoid duplicating the code that calls match.', 'comment_created': datetime.datetime(2021, 7, 14, 22, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 671417032, 'comment_body': 'Space after comma', 'comment_created': datetime.datetime(2021, 7, 16, 17, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 671424923, 'comment_body': ""Why is this break rather than return?\r\n\r\nPresumably it's because some of the other hints are not yet refactored and might come earlier than the match that we just found. Which hints are not refactored?\r\n\r\nLooking at `allhints` it seems that everything is refactored apart from the series solvers. If that's the case then I think it might be better to just return here. I don't see why we would want to return a series solution when it is still possible to return a non-series solution. Note that the matching code for the series solvers can be slow."", 'comment_created': datetime.datetime(2021, 7, 16, 17, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 672140907, 'comment_body': 'There should be a space after a comma.', 'comment_created': datetime.datetime(2021, 7, 19, 9, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 673230638, 'comment_body': ""There should be a space after a comma.\r\n\r\nWhy doesn't this assert what the actual output of `classify_ode` is?\r\n\r\nAlso is the behaviour changed in cases where a hint is specified?"", 'comment_created': datetime.datetime(2021, 7, 20, 15, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 673236698, 'comment_body': ""> Why doesn't this assert what the actual output of `classify_ode` is?\r\n\r\nok, will change it to that.\r\n\r\n> Also is the behaviour changed in cases where a hint is specified?\r\n\r\nEarlier classify_ode didn't take hint as argument but now it has so if we pass specific hint it will return solver for that and also checks for the series solution\r\n"", 'comment_created': datetime.datetime(2021, 7, 20, 15, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}, {'comment_id': 673239414, 'comment_body': ""Also the output of this test is something like:\r\n```\r\n{'order': 1,\r\n 'nth_algebraic': <sympy.solvers.ode.single.NthAlgebraic at 0x7f94c63cc160>,\r\n 'nth_algebraic_Integral': <sympy.solvers.ode.single.NthAlgebraic at 0x7f94c63cc160>,\r\n 'default': 'nth_algebraic'}\r\n```\r\nso how should we check with assert?\r\n"", 'comment_created': datetime.datetime(2021, 7, 20, 15, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Mohitbalwani26', 'type': 'User'}]","[{'commit_sha': '78c9f0ca489993bc036e00f864524a71318f1c80', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc2575875aae367c3c6532f350f9d6d14d3e5e9b', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38dc8aa13f9e689ffd8f2af6b53483f5e7ddff07', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc568215d59a5dbf5dd148bd9ffe9a8263ffb804', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '238d98f2aff7b0f8685db01d79dfec3784068d03', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62ac1a9ca6daee94c0379c84a5bd277696f7d8c6', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d6f9912790501ba7653df7f539448dbfd5cb60', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b335cf582f4a789b725cc37822d6eed42c8d9e71', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '133fdc30248656c8db9c6ed6533fd34e88f78cdc', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2179e6e7e1c0bad6b347aa483f98ee654b748d84', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24ec49b9d467533a37d02c75ed8508e4a7554501', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16
702044429,Reorder hints in dsolve,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
SEE #18348 

#### Brief description of what is fixed or changed
Ordering of hints is changed in dsolve.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,21816,https://api.github.com/repos/sympy/sympy/pulls/21816,https://github.com/sympy/sympy/pull/21816,closed,21,21,5,5,4,1,0,0,[],2021-08-03 07:52:35+00:00,2021-08-04 17:24:24+00:00,120709.0,"1 day, 9:31:49","[{'comment_id': 681585440, 'comment_body': 'Ideally `odesimp` or `constantsimp` would make the output the same here regardless of which hint is used.', 'comment_created': datetime.datetime(2021, 8, 3, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': 'b0322578b7e06076985a6e6d38d680a5eb88aaaf', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7978831d5462c3fff547bb6dc0cf5d6ce4bad35', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2134a55a44f901d52f28984469ac6630038222a', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdb346984c0855e42fcc4e916e2329c59dace142', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6052f25024ef483324759dc8e227033c9214211', 'committer_username': 'Mohitbalwani26', 'committer_name': 'Mohit Balwani', 'committer_email': None, 'commit_date': datetime.datetime(2018, 10, 18, 8, 42, 32, tzinfo=datetime.timezone.utc)}]",Mohit Balwani,44258119,,User,,17,,12,16

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4370,12719,292,1320,58726,5124,14,714,"[{'id': 702044429, 'number': 21816, 'closed': datetime.datetime(2021, 8, 4, 17, 24, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 7, 52, 35, tzinfo=datetime.timezone.utc), 'time_taken': 120709.0, 'time_delta': '1 day, 9:31:49', 'additions': 21, 'deletions': 21, 'state': 'closed'}, {'id': 689807679, 'number': 21743, 'closed': datetime.datetime(2021, 7, 22, 10, 58, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 11, 1, 35, tzinfo=datetime.timezone.utc), 'time_taken': 691006.0, 'time_delta': '7 days, 23:56:46', 'additions': 63, 'deletions': 51, 'state': 'closed'}, {'id': 686187629, 'number': 21722, 'closed': datetime.datetime(2021, 7, 12, 16, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 17, 7, 43, tzinfo=datetime.timezone.utc), 'time_taken': 342977.0, 'time_delta': '3 days, 23:16:17', 'additions': 1227, 'deletions': 1201, 'state': 'closed'}, {'id': 683564132, 'number': 21706, 'closed': datetime.datetime(2021, 7, 8, 10, 48, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 10, 12, 8, tzinfo=datetime.timezone.utc), 'time_taken': 261391.0, 'time_delta': '3 days, 0:36:31', 'additions': 210, 'deletions': 173, 'state': 'closed'}, {'id': 680970606, 'number': 21692, 'closed': datetime.datetime(2021, 7, 4, 22, 5, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 15, 15, 36, tzinfo=datetime.timezone.utc), 'time_taken': 370174.0, 'time_delta': '4 days, 6:49:34', 'additions': 835, 'deletions': 1253, 'state': 'closed'}, {'id': 676029669, 'number': 21654, 'closed': datetime.datetime(2021, 6, 30, 13, 24, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 7, 36, 30, tzinfo=datetime.timezone.utc), 'time_taken': 625688.0, 'time_delta': '7 days, 5:48:08', 'additions': 744, 'deletions': 145, 'state': 'closed'}, {'id': 672375620, 'number': 21630, 'closed': datetime.datetime(2021, 6, 20, 19, 35, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 8, 24, 43, tzinfo=datetime.timezone.utc), 'time_taken': 299436.0, 'time_delta': '3 days, 11:10:36', 'additions': 368, 'deletions': 256, 'state': 'closed'}, {'id': 669098094, 'number': 21609, 'closed': datetime.datetime(2021, 6, 14, 13, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 18, 46, 22, tzinfo=datetime.timezone.utc), 'time_taken': 67958.0, 'time_delta': '18:52:38', 'additions': 96, 'deletions': 95, 'state': 'closed'}, {'id': 664448203, 'number': 21588, 'closed': datetime.datetime(2021, 6, 12, 11, 43, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 8, 8, 32, tzinfo=datetime.timezone.utc), 'time_taken': 358487.0, 'time_delta': '4 days, 3:34:47', 'additions': 555, 'deletions': 492, 'state': 'closed'}, {'id': 662820486, 'number': 21578, 'closed': datetime.datetime(2021, 6, 6, 11, 49, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 6, 7, 8, 58, tzinfo=datetime.timezone.utc), 'time_taken': 16827.0, 'time_delta': '4:40:27', 'additions': 154, 'deletions': 162, 'state': 'closed'}, {'id': 660722589, 'number': 21569, 'closed': datetime.datetime(2021, 6, 4, 0, 0, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 8, 56, 14, tzinfo=datetime.timezone.utc), 'time_taken': 54245.0, 'time_delta': '15:04:05', 'additions': 103, 'deletions': 67, 'state': 'closed'}, {'id': 658887122, 'number': 21555, 'closed': datetime.datetime(2021, 6, 3, 0, 5, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 10, 36, 25, tzinfo=datetime.timezone.utc), 'time_taken': 134972.0, 'time_delta': '1 day, 13:29:32', 'additions': 100, 'deletions': 93, 'state': 'closed'}, {'id': 647805297, 'number': 21492, 'closed': None, 'created': datetime.datetime(2021, 5, 19, 15, 43, 58, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 38, 'deletions': 32, 'state': 'open'}, {'id': 577800442, 'number': 20995, 'closed': datetime.datetime(2021, 3, 13, 14, 34, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 22, 17, 14, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1632000.0, 'time_delta': '18 days, 21:20:00', 'additions': 731, 'deletions': 799, 'state': 'closed'}, {'id': 545601752, 'number': 20660, 'closed': datetime.datetime(2020, 12, 26, 15, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 25, 14, 53, 11, tzinfo=datetime.timezone.utc), 'time_taken': 88309.0, 'time_delta': '1 day, 0:31:49', 'additions': 334, 'deletions': 296, 'state': 'closed'}, {'id': 544129765, 'number': 20646, 'closed': datetime.datetime(2020, 12, 23, 11, 47, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 22, 13, 39, 10, tzinfo=datetime.timezone.utc), 'time_taken': 79688.0, 'time_delta': '22:08:08', 'additions': 118, 'deletions': 111, 'state': 'closed'}, {'id': 528677889, 'number': 20499, 'closed': datetime.datetime(2020, 12, 9, 11, 34, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 27, 15, 40, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1022039.0, 'time_delta': '11 days, 19:53:59', 'additions': 207, 'deletions': 147, 'state': 'closed'}, {'id': 528073943, 'number': 20496, 'closed': datetime.datetime(2020, 11, 26, 20, 23, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 26, 13, 21, 50, tzinfo=datetime.timezone.utc), 'time_taken': 25321.0, 'time_delta': '7:02:01', 'additions': 49, 'deletions': 36, 'state': 'closed'}, {'id': 522389091, 'number': 20439, 'closed': datetime.datetime(2020, 11, 20, 17, 20, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 17, 12, 53, 37, tzinfo=datetime.timezone.utc), 'time_taken': 275186.0, 'time_delta': '3 days, 4:26:26', 'additions': 76, 'deletions': 85, 'state': 'closed'}, {'id': 514615510, 'number': 20375, 'closed': datetime.datetime(2020, 11, 10, 0, 52, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 3, 9, 54, 26, tzinfo=datetime.timezone.utc), 'time_taken': 572304.0, 'time_delta': '6 days, 14:58:24', 'additions': 126, 'deletions': 101, 'state': 'closed'}, {'id': 509565260, 'number': 20336, 'closed': datetime.datetime(2020, 10, 29, 19, 50, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 25, 9, 49, 43, tzinfo=datetime.timezone.utc), 'time_taken': 381625.0, 'time_delta': '4 days, 10:00:25', 'additions': 58, 'deletions': 59, 'state': 'closed'}, {'id': 504277034, 'number': 20267, 'closed': datetime.datetime(2020, 10, 24, 0, 28, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 15, 17, 53, 26, tzinfo=datetime.timezone.utc), 'time_taken': 714923.0, 'time_delta': '8 days, 6:35:23', 'additions': 129, 'deletions': 120, 'state': 'closed'}, {'id': 418524829, 'number': 19325, 'closed': datetime.datetime(2020, 5, 19, 22, 59, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 15, 11, 2, 43, tzinfo=datetime.timezone.utc), 'time_taken': 388607.0, 'time_delta': '4 days, 11:56:47', 'additions': 163, 'deletions': 130, 'state': 'closed'}, {'id': 413961420, 'number': 19260, 'closed': datetime.datetime(2020, 5, 10, 16, 21, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 6, 8, 50, 58, tzinfo=datetime.timezone.utc), 'time_taken': 372644.0, 'time_delta': '4 days, 7:30:44', 'additions': 300, 'deletions': 265, 'state': 'closed'}, {'id': 408473083, 'number': 19184, 'closed': datetime.datetime(2020, 5, 1, 22, 47, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 24, 10, 40, tzinfo=datetime.timezone.utc), 'time_taken': 648478.0, 'time_delta': '7 days, 12:07:58', 'additions': 229, 'deletions': 175, 'state': 'closed'}, {'id': 407928938, 'number': 19176, 'closed': datetime.datetime(2020, 4, 23, 15, 35, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 23, 13, 43, 36, tzinfo=datetime.timezone.utc), 'time_taken': 6715.0, 'time_delta': '1:51:55', 'additions': 18, 'deletions': 6, 'state': 'closed'}, {'id': 398037669, 'number': 19063, 'closed': datetime.datetime(2020, 4, 17, 11, 13, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 8, 33, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1219156.0, 'time_delta': '14 days, 2:39:16', 'additions': 292, 'deletions': 244, 'state': 'closed'}, {'id': 389106422, 'number': 18881, 'closed': datetime.datetime(2020, 3, 31, 19, 18, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 16, 9, 41, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1330638.0, 'time_delta': '15 days, 9:37:18', 'additions': 351, 'deletions': 158, 'state': 'closed'}, {'id': 387839935, 'number': 18854, 'closed': datetime.datetime(2020, 3, 14, 23, 6, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 15, 29, 30, tzinfo=datetime.timezone.utc), 'time_taken': 113842.0, 'time_delta': '1 day, 7:37:22', 'additions': 37, 'deletions': 24, 'state': 'closed'}, {'id': 387727770, 'number': 18852, 'closed': datetime.datetime(2020, 3, 13, 13, 56, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 11, 28, 10, tzinfo=datetime.timezone.utc), 'time_taken': 8914.0, 'time_delta': '2:28:34', 'additions': 15, 'deletions': 15, 'state': 'closed'}, {'id': 383451862, 'number': 18773, 'closed': datetime.datetime(2020, 3, 4, 18, 49, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 4, 10, 4, 52, tzinfo=datetime.timezone.utc), 'time_taken': 31507.0, 'time_delta': '8:45:07', 'additions': 102, 'deletions': 102, 'state': 'closed'}, {'id': 382386675, 'number': 18757, 'closed': datetime.datetime(2020, 3, 2, 16, 12, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 13, 33, 26, tzinfo=datetime.timezone.utc), 'time_taken': 9519.0, 'time_delta': '2:38:39', 'additions': 141, 'deletions': 133, 'state': 'closed'}, {'id': 377223448, 'number': 18684, 'closed': datetime.datetime(2020, 2, 23, 12, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 19, 15, 7, 13, tzinfo=datetime.timezone.utc), 'time_taken': 336107.0, 'time_delta': '3 days, 21:21:47', 'additions': 779, 'deletions': 414, 'state': 'closed'}, {'id': 373100947, 'number': 18623, 'closed': datetime.datetime(2020, 3, 4, 1, 25, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 12, 12, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1948359.0, 'time_delta': '22 days, 13:12:39', 'additions': 98, 'deletions': 94, 'state': 'closed'}, {'id': 369987831, 'number': 18540, 'closed': datetime.datetime(2020, 2, 5, 21, 54, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 2, 8, 43, 26, tzinfo=datetime.timezone.utc), 'time_taken': 306636.0, 'time_delta': '3 days, 13:10:36', 'additions': 586, 'deletions': 548, 'state': 'closed'}, {'id': 367224712, 'number': 18471, 'closed': datetime.datetime(2020, 1, 28, 12, 39, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 26, 14, 44, 42, tzinfo=datetime.timezone.utc), 'time_taken': 165274.0, 'time_delta': '1 day, 21:54:34', 'additions': 319, 'deletions': 111, 'state': 'closed'}, {'id': 364933058, 'number': 18410, 'closed': datetime.datetime(2020, 1, 21, 15, 56, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 20, 17, 9, 26, tzinfo=datetime.timezone.utc), 'time_taken': 82013.0, 'time_delta': '22:46:53', 'additions': 19, 'deletions': 2, 'state': 'closed'}, {'id': 364444108, 'number': 18376, 'closed': datetime.datetime(2020, 1, 19, 10, 4, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 16, 54, 40, tzinfo=datetime.timezone.utc), 'time_taken': 61784.0, 'time_delta': '17:09:44', 'additions': 16, 'deletions': 14, 'state': 'closed'}, {'id': 361804297, 'number': 18309, 'closed': datetime.datetime(2020, 1, 18, 15, 13, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 12, 7, 45, 8, tzinfo=datetime.timezone.utc), 'time_taken': 545300.0, 'time_delta': '6 days, 7:28:20', 'additions': 56, 'deletions': 43, 'state': 'closed'}, {'id': 360407697, 'number': 18266, 'closed': datetime.datetime(2020, 1, 8, 15, 47, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 8, 11, 18, 46, tzinfo=datetime.timezone.utc), 'time_taken': 16108.0, 'time_delta': '4:28:28', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 359037662, 'number': 18214, 'closed': datetime.datetime(2020, 1, 7, 20, 59, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 3, 16, 3, 15, tzinfo=datetime.timezone.utc), 'time_taken': 363376.0, 'time_delta': '4 days, 4:56:16', 'additions': 45, 'deletions': 14, 'state': 'closed'}, {'id': 357750270, 'number': 18167, 'closed': datetime.datetime(2019, 12, 29, 19, 56, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 29, 16, 53, 1, tzinfo=datetime.timezone.utc), 'time_taken': 11018.0, 'time_delta': '3:03:38', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 357532185, 'number': 18157, 'closed': datetime.datetime(2019, 12, 29, 16, 54, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 28, 16, 1, 46, tzinfo=datetime.timezone.utc), 'time_taken': 89560.0, 'time_delta': '1 day, 0:52:40', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 263543057, 'number': 16382, 'closed': datetime.datetime(2020, 1, 18, 13, 11, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 3, 22, 9, 39, 52, tzinfo=datetime.timezone.utc), 'time_taken': 26105510.0, 'time_delta': '302 days, 3:31:50', 'additions': 15, 'deletions': 8, 'state': 'closed'}, {'id': 263538935, 'number': 16380, 'closed': datetime.datetime(2019, 3, 22, 9, 33, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 3, 22, 9, 26, 16, tzinfo=datetime.timezone.utc), 'time_taken': 418.0, 'time_delta': '0:06:58', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 224927941, 'number': 15419, 'closed': datetime.datetime(2018, 10, 24, 3, 2, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 10, 23, 7, 39, 16, tzinfo=datetime.timezone.utc), 'time_taken': 69807.0, 'time_delta': '19:23:27', 'additions': 7, 'deletions': 4, 'state': 'closed'}]"
