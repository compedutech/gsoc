pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
668261846,Feeds: Item Filters,"Scrapy currently doesn't have any convenient APIs to customize conditions for item exports. An ```ItemChecker``` class can be used by the user to define constraints for acceptable items for particular feeds.

Resolves #5161, resolves #4576",True,5178,https://api.github.com/repos/scrapy/scrapy/pulls/5178,https://github.com/scrapy/scrapy/pull/5178,closed,214,6,3,11,2,29,0,0,[],2021-06-11 15:16:48+00:00,2021-07-13 15:22:30+00:00,2765142.0,"32 days, 0:05:42","[{'comment_id': 650065340, 'comment_body': ""it's supposed to be ```self.accepts_class``` instead of ```self.accepts_item```, I'll change that"", 'comment_created': datetime.datetime(2021, 6, 11, 15, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 650148419, 'comment_body': 'This will fail, since `self.item_classes` is a (non-mutable) tuple.\r\n\r\nIt may make sense to make `self.item_classes` a set instead of a tuple.\r\n\r\nI also wonder if we should support item classes to be import paths instead of actual classes, in case the FEEDS setting has been defined as a JSON string.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 11, 17, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 650172603, 'comment_body': ""That's a good idea I'll include both the cases."", 'comment_created': datetime.datetime(2021, 6, 11, 17, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 650176808, 'comment_body': ""My reasoning for using ```+=```: I was planning on having item_classes declared in a tuple in settings.py so I thought I would update the class's self.item_classes tuple with the operation ```+=```."", 'comment_created': datetime.datetime(2021, 6, 11, 18, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 650562793, 'comment_body': ':lipstick:  You could use the actual class here, instead of a string, provided you import it first.\r\n\r\n```suggestion\r\n        item_filter_class = load_object(feed_options.get(""item_filter"", ItemChecker))\r\n```', 'comment_created': datetime.datetime(2021, 6, 13, 18, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 650565648, 'comment_body': ""I would suggest requiring the value to be a list. It will not be much of a trouble for users, it will keep their code consistent (`'item_classes': class` seems semantically wrong, `'item_classes': [class]` seems more consistent with the option name), and it will simplify your implementation (you don’t need an `if` statement here at all).\r\n\r\nInternally, because you are merging the user-input option with a class-defined variable, you may want to enforce the class-defined variable to be a set, and convert the user-input option into a set before you merge them. Or you could remove the class-defined variable, and only filter item classes defined by users."", 'comment_created': datetime.datetime(2021, 6, 13, 19, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 650566700, 'comment_body': 'I think here we are introducing a potential, unnecessary performance degradation: we are converting every item into a dict even if `self.accepts_fields` returns `True` for every item. That conversion into a dict may be non-trivial, specially since Scrapy supports arbitrary objects as items by extending https://github.com/scrapy/itemadapter.\r\n\r\nMoreover, `self.accept_fields` may want to check field metadata to determine whether or not to accept a field, for which it would need either the original item or the whole adapter.\r\n\r\nThe only way that I see to solve this performance issue without making `self.accepts_fields` pointless (same signature as `self.accepts_class`) is to actually remove the method.\r\n\r\nThe more I think about it, the more I see that it’s best to keep this default class simple, to only have the `accepts` method and let it do what `accepts_class` would do. But if you still want to keep the function for some reason, please avoid calling `asdict()` here.', 'comment_created': datetime.datetime(2021, 6, 13, 19, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 654472283, 'comment_body': 'I am not sure which version to write here or if this was needed at all.', 'comment_created': datetime.datetime(2021, 6, 18, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 654533547, 'comment_body': 'I would call the section “Item filtering” instead, so that it can be about item filtering in general, and not specifically about the item filter class.\r\n\r\nThen you could start the section by explaining that Scrapy allows to use the `item_classes` option in `FEEDS` to indicate which types of items to deliver to each feed. Then you could continue by explaining that this feature is implemented by Scrapy’s `ItemChecker` class, which is the default value of the `item_filter` option in `FEEDS`. Then  you could go on to explain how to create custom item filtering classes.\r\n\r\nI also think that it may be best to rename `scrapy.itemchecker.ItemChecker` to `scrapy.itemfilter.ItemFilter`, for consistency. In fact, it may be best to move it to `scrapy.extensions.feedexport.ItemFilter`, for consistency with other classes of the extension.\r\n\r\nFinally, it would be great to include here at the end the reference documentation of the `ItemChecker` class, with `.. autoclass: scrapy.itemchecker.ItemChecker`. You can then use ``` :class:`~scrapy.itemchecker.ItemChecker` ``` instead of ``` `ItemChecker` ``` when referring to the class from other parts of the documentation.', 'comment_created': datetime.datetime(2021, 6, 18, 15, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 654534076, 'comment_body': 'See https://docs.scrapy.org/en/latest/contributing.html#documentation-policies', 'comment_created': datetime.datetime(2021, 6, 18, 15, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 654535034, 'comment_body': '```suggestion\r\n-   ``item_filter``: a :ref:`filter class <item-filter>` to filter items before they are\r\n    exported to the feed storage.\r\n```\r\n\r\nThe classes do not need to subclass `ItemChecker`, which was a possible interpretation here. This way we keep it shorter, and users can read the linked section for details on how to implement such a class.', 'comment_created': datetime.datetime(2021, 6, 18, 15, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 654805139, 'comment_body': 'So as this is a new feature, we should include it in 2.6.0 version release?', 'comment_created': datetime.datetime(2021, 6, 19, 14, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 655087880, 'comment_body': 'In case you plan to use these inputs for more tests, can we declare these as constants at the top? ', 'comment_created': datetime.datetime(2021, 6, 21, 5, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'adityaa30', 'type': 'User'}, {'comment_id': 655106844, 'comment_body': ""I'll keep this in mind next time I add tests."", 'comment_created': datetime.datetime(2021, 6, 21, 6, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 655109527, 'comment_body': 'My point is that you can use `VERSION` as version. Whenever a release includes this change, be it 2.6 or a later version, we will replace `VERSION` with the actual version.', 'comment_created': datetime.datetime(2021, 6, 21, 6, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 655114707, 'comment_body': 'Simplification, split in paragraphs and article adjustment:\r\n\r\n```suggestion\r\nYou can filter items that you want to allow for a particular feed using the \r\n``item_classes`` :ref:`feed option <feed-options>`. Only items of the specified\r\ntypes will be added to the feed.\r\n\r\nThe ``item_classes`` option is implemented by the \r\n:class:`~scrapy.extensions.feedexport.ItemFilter` class, which is the default \r\nvalue of the ``item_filter`` :ref:`feed option <feed-options>`.\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 6, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 655115598, 'comment_body': 'Feed storage is how we call S3, GCS or the local file system. Because more than one feed can go into the same storage, the current phrasing can be slightly confusing.\r\n\r\nJust calling it “feed” would do the job, since the setting is called `FEEDS`, but in this specific case I believe not mentioning feeds at all works: these are feed-specific options, so it’s implied that each affects the feed where they are defined.\r\n\r\nIt can also be shortened further while keeping the same meaning:\r\n\r\n```suggestion\r\n-   ``item_classes``: list of :ref:`item classes <topics-items>` to export.\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 6, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 655118136, 'comment_body': 'No need to mention a fallback value if there is none.\r\n\r\nAlso, it can be shortened further:\r\n\r\n```suggestion\r\n    If undefined or empty, all items are exported.\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 6, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 655118370, 'comment_body': '```suggestion\r\n    .. versionadded:: VERSION\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 6, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 655118841, 'comment_body': 'Shortened, in line with previous suggestions:\r\n\r\n```suggestion\r\n-   ``item_filter``: a :ref:`filter class <item-filter>` to filter items to export.\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 6, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 655119388, 'comment_body': 'Sorry, I just love documentation, and try to keep things concise so that it will be easier to read:\r\n\r\n```suggestion\r\n    :class:`~scrapy.extensions.feedexport.ItemFilter` is used by default.\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 6, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 655119447, 'comment_body': '```suggestion\r\n    .. versionadded:: VERSION\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 6, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 655121740, 'comment_body': 'The first paragraph of a method docstring should summarize input, operation and output, and use the imperative. What about:\r\n\r\n```suggestion\r\n        Return ``True`` if `item` should be exported or ``False`` otherwise.\r\n```\r\n\r\nNote: ``` `item` ``` is not a typo, input parameters in Python documentation are usually formatted that way in docstrings.\r\n\r\nWe should not need to specify that it’s the main method, it should be obvious from the fact that it’s the only method.', 'comment_created': datetime.datetime(2021, 6, 21, 7, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 655136755, 'comment_body': 'What about this, based on @adityaa30’s feedback during our last call? (the example is untouched, just added a paragraph below)\r\n\r\n```suggestion\r\nFor instance::\r\n\r\n    class MyCustomFilter:\r\n\r\n        def __init__(self, feed_options):\r\n            self.feed_options = feed_options\r\n\r\n        def accepts(self, item):\r\n            if ""field1"" in item and item[""field1""] == ""expected_data"":\r\n                return True\r\n            return False\r\n            \r\nYou can assign your custom filtering class to the ``item_filter`` :ref:`option \r\nof  a feed <feed-options>`. See :setting:`FEEDS` for examples.\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 7, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 656782274, 'comment_body': '```suggestion\r\nItem filtering\r\n==============\r\n\r\n.. versionadded:: VERSION\r\n\r\nYou can filter items that you want to allow for a particular feed by using the\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 5, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 656782558, 'comment_body': '```suggestion\r\nclass, which is the default value of the ``item_filter`` :ref:`feed option <feed-options>`.\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 5, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 668742432, 'comment_body': ""Should we have this list there? It's going to be outdated soon."", 'comment_created': datetime.datetime(2021, 7, 13, 13, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'wRAR', 'type': 'User'}, {'comment_id': 668779550, 'comment_body': 'Good point, it would be better to say “Scrapy items” and link to the items documentation.', 'comment_created': datetime.datetime(2021, 7, 13, 13, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 668810326, 'comment_body': ""I'll modify it accordingly."", 'comment_created': datetime.datetime(2021, 7, 13, 14, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}]","[{'commit_sha': 'f8dc05197e17f46e6054e38b34b46a79ed359578', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e43b48adc6a65a518ab86a2ac145f858b3c911', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2323c2d493ed1ca83fee0124888838dbf3834b42', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef8ea9eea37db37af069f9896b72d3918259128a', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e99e722d48850f9ce4a9c6880d561acaa49858', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '901aade788de90b8557a970d2a91a16532a5274d', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffa229049e4567a48fa6c1e35669a77619234d37', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdf5788bcdf06559d223633ed843f619cafa846', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c276ca70cb2d52da46a180e8ce1bcb5f1bff98', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f8c4df2592c1ad82117af3664c18facdf7e832', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dca6d04ede788135832008106f24fcfde20b51f', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}]",D R Siddhartha,23308719,siddharthadr11@gmail.com,User,,16,,10,7
676392206,Feeds: Post-Processing,"A post-processing feature can help add more extensions dedicated to before-export-processing to scrapy. To help achieve extensibility, a PostProcessingManager can be used which will use ""plugin"" like scrapy components to process the data before writing it to target files.

Resolves #5168, resolves #2174.",True,5190,https://api.github.com/repos/scrapy/scrapy/pulls/5190,https://github.com/scrapy/scrapy/pull/5190,closed,721,2,5,16,10,46,0,0,[],2021-06-23 15:21:21+00:00,2021-08-24 09:48:02+00:00,5336801.0,"61 days, 18:26:41","[{'comment_id': 657249510, 'comment_body': 'What do you plan to do with the returned value (the number of bytes written)?', 'comment_created': datetime.datetime(2021, 6, 23, 15, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 657351488, 'comment_body': ""I thought I should have the return value similar to file object's ```write``` because if in some other part of feed code, the code has been written in such a way to use the returned number of bytes written, that existing code doesn't break while applying a plugin wrapper."", 'comment_created': datetime.datetime(2021, 6, 23, 18, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 659363721, 'comment_body': '`CsvItemExporter` actually wrapped the storage with `io.TextIOWrapper`, and `io.TextIOWrapper` expects to have a file like object having at least the attributes and methods of `io.IOBase`. So there was some error when it only got an object with `write` and `close` methods. Subclassing `io.IOBase` fixed this in addition to declaring this object as writable with the help of `writable` method.', 'comment_created': datetime.datetime(2021, 6, 27, 19, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 659515130, 'comment_body': '- `file` definition could be simplified, and made slightly more readable.\r\n- Seeing it in action now, I see it probably makes sense to simplify the signature of `PostProcessingManager`.\r\n\r\n```suggestion\r\n        file = storage.open(spider)\r\n        if ""postprocessing"" in feed_options:\r\n            file = PostProcessingManager(file, feed_options)\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 6, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 659515349, 'comment_body': '```suggestion\r\nfrom bz2 import BZ2File\r\nfrom gzip import GzipFile\r\nfrom io import IOBase\r\nfrom lzma import LZMAFile\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 659525702, 'comment_body': 'Nice. I did not realize this change only needed to affect the manager and not the plugins. This is definitely the cleanest solution, great job!\r\n\r\nI would include, however, a comment above the class definition explaining why we inherit from `IOBase` here, for future reference. Indicate that it’s so that exporters can treat the result of the post-processing as a file-like writable object, and you could mention the example of CsvItemExporter using TextIOWrapper.\r\n\r\nWe should also make sure, when updating the documentation, to also review the documentation of exporters and make sure that it is clearly stated what the API of the file-like object exporters get is: that of an open, writable, non-seekable IOBase object without a `fileno` property.', 'comment_created': datetime.datetime(2021, 6, 28, 6, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 661589990, 'comment_body': 'The test looks great overall. It should serve to make sure that all built-in compression plugins work.\r\n\r\nThey do not hurt, but I don’t think the (random) extra parameters add much to the test. For example, if you set `gzip_compresslevel` to `4` in this test, but the plugin were not processing the parameter at all, the test would still pass. It may be better to remove extra plugin parameters from this test method.\r\n\r\nTo test plugin parameters, you need tests that would break if parameters were misinterpreted. You want to make sure that the parameters have an impact on the output. I think it would be enough to test that the output changes when passing a non-default value for a parameter. You don’t need to test the underlying library (e.g. you don’t need to test that Python’s GZipFile makes files smaller with 9 than with 0), but you do need to test somehow that the plugin is passing the parameter (e.g. from feed options to GZipFile).\r\n\r\nYou also need to mind that some compressors may not be deterministic (e.g. [GZipFile seems to not be deterministic unless you set `mtime` to a fixed value](https://discuss.python.org/t/gzip-py-allow-deterministic-compression-without-time-stamp/8221)), so it may not always be enough to test that the output is different with a different value in a parameter. In these cases, you’ll need to either make the output deterministic or check for something more. For example, with GZipFile, you can either expose the `mtime` option and use it in tests in combination with the options that you are actually testing, or you can test an option like compression level by verifying that the higher the compression the smaller the file.', 'comment_created': datetime.datetime(2021, 6, 30, 15, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663098299, 'comment_body': 'I would talk about “feeds” instead of “items” here. Item post-processing is what pipelines are for. Using that word here could be confusing.\r\n\r\nI also suggest to address readers directly when the information is about them. That is, “users can create their own plugins” could be transformed into “you can create your own plugins”.\r\n\r\nYou could also make “built-in plugins” a link to the corresponding section below. Same for the comment about writing your own plugins, once you create a separate section for it (see my comment below).', 'comment_created': datetime.datetime(2021, 7, 2, 15, 34, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663104324, 'comment_body': 'Unlike literature, documentation benefits from consistent, repetitive wording. It’s better to always refer to the same concept with the same words, even if that means repeating those words. So it’s better to always call them “feed options”, even if “feed settings” is semantically the same.\r\n\r\nThe details about how feed options work users should be able to get from following the “option of a feed”. Although we could make it more obvious by also (or alternatively) linking the “feed options” text at the end to the “feed-options” reference.\r\n\r\nHow plugins get those parameters is irrelevant for users of built-in plugins, and should be left for later. In general, the documentation flow should go from the information most users want to that for more specific use cases. In other words, the information about built-in plugins should come before that about writing your own plugin, because most users will only be interested in the former. This applies to the rest of this introduction, which I suggest moving to a new section, at the same level but after “Built-in Plugins”.\r\n\r\n```suggestion\r\nThese plugins can be activated through the ``postprocessing`` :ref:`option of a feed <feed-options>`.\r\nParameters to plugins can be passed through feed options.\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 15, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663111091, 'comment_body': 'Instead of this paragraph, I think you could extend the paragraph above to explain in more details the `postprocessing` option, i.e. how its value needs to be set. Users need to know that the `postprocessing` option is a list of post-processing plugins in the order in which they should process the feed. And they need to know that they can indicate those plugins either as an import path string or with a direct class reference. An example code using the option with 2 plugins, each specified one way, could help clarify that point.\r\n\r\nThe part about the order of plugins possibly causing issues, I believe that’s something we should leave for plugin-specific documentation. Our built-in plugins happen to support arbitrary bytes as input. If someone creates a plugin that does not, it’s their responsibility to document that fact.', 'comment_created': datetime.datetime(2021, 7, 2, 15, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663113956, 'comment_body': '```suggestion\r\nEach plugin is a class that must implement the following methods:\r\n```\r\n\r\nI’m not saying that no one will ever try to define a plugin in a different language. I’m saying that, when they realize why their plugin is not working, they will possibly feel ashamed and they will definitely not request that we explicitly say Python here to clarify :slightly_smiling_face: ', 'comment_created': datetime.datetime(2021, 7, 2, 16, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663115563, 'comment_body': 'The first paragraph of a method should always be like “Do something”. Here, “Initialize the plugin” should work.', 'comment_created': datetime.datetime(2021, 7, 2, 16, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663116415, 'comment_body': '“file object” can be too vague. Users need to know that they can and cannot expect from the API of the `file`.', 'comment_created': datetime.datetime(2021, 7, 2, 16, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663116695, 'comment_body': 'I would include in the `param` line a link to the documentation of feed options.', 'comment_created': datetime.datetime(2021, 7, 2, 16, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663117937, 'comment_body': ""```suggestion\r\n   Process and write `data` into the plugin's target file.\r\n```\r\n\r\nYou could also use this and skip the parameter table below altogether, since it wouldn’t add anything.\r\n\r\n```suggestion\r\n   Process and write `data` (:class:`bytes`) into the plugin's target file.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 2, 16, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663119032, 'comment_body': 'Use `.. autoclass::` instead of a section. That way you can move this documentation to the code, so that it’s written in a single place but can be read from both code and documentation. This also causes the header to be the whole import path of the class, which allows users to know which value to set in `postprocessing`.\r\n\r\nAbout parameters, you should list them all since we don’t support every GZipFile option arbitrarily, but you don’t need to document anything about them separately. You can instead refer users to the documentation of `GZipFile` for information about them. That way you not only need to write less, you give users access to more information, and if a future version of Python changes how one of those parameters behaves, we won’t need to update our documentation.', 'comment_created': datetime.datetime(2021, 7, 2, 16, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663646925, 'comment_body': 'Since all post-processing plugins have a common structure, how about declaring an interface (eg. `IPostProcessingPlugin`) with the `write` and `close` methods? ', 'comment_created': datetime.datetime(2021, 7, 5, 5, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'adityaa30', 'type': 'User'}, {'comment_id': 663662710, 'comment_body': '```suggestion\r\nThese plugins can be activated through the ``postprocessing`` option of a feed. The option must\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 6, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663663689, 'comment_body': 'I think the section headers can be removed now that we are using `autoclass`.', 'comment_created': datetime.datetime(2021, 7, 5, 6, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663664270, 'comment_body': '```suggestion\r\n    :param file: file-like object having at least the `write` and `close` methods implemented\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 6, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663664485, 'comment_body': ""```suggestion\r\n   Process and write `data` (:class:`bytes`) into the plugin's target file.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 5, 6, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663666021, 'comment_body': '```suggestion\r\nTo pass parameters to your plugin use :ref:`feed options <feed-options>`. You \r\ncan then access those parameters from the ``__init__`` method of your plugin.\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 6, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663666836, 'comment_body': 'I think this one can be removed from the example: I don’t think it adds anything, the one above already features a class used directly in `postprocessing`.', 'comment_created': datetime.datetime(2021, 7, 5, 6, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663670282, 'comment_body': 'While there is 1 case in similar Scrapy code where we use an interface, in most similar cases we tend to instead document the interface, so the current approach I think is the one most in line with the current code base.\r\n\r\nIn Python, interfaces are seldom used, and I don’t see much benefit for them being used here.', 'comment_created': datetime.datetime(2021, 7, 5, 6, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663672111, 'comment_body': 'Since the purpose of the `write` and `close` methods of any plugin is described in the Custom Plugin section, there is no need to document them.\r\n\r\n```suggestion\r\n    def write(self, data: bytes) -> int:\r\n        return self.gzipfile.write(data)\r\n\r\n    def close(self) -> None:\r\n        self.gzipfile.close()\r\n        self.file.close()\r\n```\r\n\r\nIf after removing their documentation they still show up when using `autoclass`, use autoclass Sphinx options to hide these 2 methods in the documentation.', 'comment_created': datetime.datetime(2021, 7, 5, 6, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663675054, 'comment_body': 'The plugins should be about compressing in a specific file format.\r\n\r\n```suggestion\r\n    Compresses received data using `gzip <https://en.wikipedia.org/wiki/Gzip>`_.\r\n```\r\n\r\nThe use of a Python module from the standard library is an implementation detail, and should not be covered in the documentation. Even if we link to the Python documentation about parameters, we could technically reimplement the plugin in the future without relying on the standard library module, while supporting the same option names and values (hence it being OK to link to that documentation for option reference).\r\n', 'comment_created': datetime.datetime(2021, 7, 5, 6, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663676587, 'comment_body': 'I don’t _think_ multiple items and multiple fields can affect post-processing. So, to keep things minimal, maybe it would make sense to keep a single item with a single field.', 'comment_created': datetime.datetime(2021, 7, 5, 6, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 663681169, 'comment_body': 'Instead of a single method per plugin, you could have several methods, each to test different aspects:\r\n- Enabling the plugin results in gzip-compressed output\r\n- A non-default value for a plugin option has the expected effect (1 test method per option)\r\n\r\nI see no reason to test different output formats (i.e. csv, jsonlines, xml). Plugins should work the same with any, so to make things minimal you could use a single one.\r\n\r\nWhat we should have is tests that verify that each of the Scrapy export plugins (for csv, jsonlines, etc.) work with the file-like interface of the plugin manager. In other words, tests that would have failed if the plugin manager was not inheriting from IOBase.', 'comment_created': datetime.datetime(2021, 7, 5, 6, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 666111067, 'comment_body': ""Even `marshal.dumps` is not giving consistent data. I'll look into this."", 'comment_created': datetime.datetime(2021, 7, 8, 11, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 666212237, 'comment_body': 'You replaced the existing test function with parameter-specific functions. As a result, now there’s one scenario not being tested: when no parameter is passed.\r\n\r\nCould you add an additional test function that verifies that passing no parameters also generates a valid ZIP? For this test you would not need to compare the result to anything, just verify that it can be decompressed.\r\n\r\nThe same applies to the other plugins.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 666218462, 'comment_body': 'I think a single file would do here.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 666226550, 'comment_body': 'If the problem is across Python versions, you could use `marshal.dumps({""foo"": ""bar""})` here instead of hardcoding the value.', 'comment_created': datetime.datetime(2021, 7, 8, 14, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676150909, 'comment_body': 'Why is the casting needed? Who is trying to write a string instead of bytes? Maybe this should be fixed earlier in the execution.', 'comment_created': datetime.datetime(2021, 7, 25, 13, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676150975, 'comment_body': 'Please, include a code comment that points to the corresponding bug report or source of information.', 'comment_created': datetime.datetime(2021, 7, 25, 14, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676166824, 'comment_body': ""Pypy's pickle implementation was writing data in `memoryview` instead of expected `bytes` (And weirdly only for pickling protocol 4). So I was getting operand error. I figured converting it to `bytes`."", 'comment_created': datetime.datetime(2021, 7, 25, 16, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 676333607, 'comment_body': 'Then what about moving the casting to the Pickle plugin and adding a comment about this? (hopefully there’s an online bug report or note somewhere that we can link)', 'comment_created': datetime.datetime(2021, 7, 26, 6, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676376328, 'comment_body': ""The `write` function of the custom plugin is being used by the `pickle.dump` method in `PickleItemExporter`. Can't really move the casting there in the `dump` method. And I can't find anything about the `memoryview` problem either. Seems like a very rare case someone would use a wrapper in the `dump` method :sweat_smile:."", 'comment_created': datetime.datetime(2021, 7, 26, 7, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 676516706, 'comment_body': 'It probably makes sense to move this to the docstring of the class instead.', 'comment_created': datetime.datetime(2021, 7, 26, 11, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676518692, 'comment_body': ""This is not a reliable way to test versions:\r\n\r\n```python\r\n>>> '10.0.0' <= '7.3.1'\r\nTrue\r\n```\r\n\r\nSee `sys.version_info` usage in the code base, something like that should work."", 'comment_created': datetime.datetime(2021, 7, 26, 11, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676523606, 'comment_body': 'Does it work if you use 2 separate write calls?\r\n\r\n```python\r\nwritten_count = self.file.write(data)\r\nwritten_count += self.file.write(self.char)\r\nreturn written_count\r\n```\r\n\r\nIf we go this route, it might be good to indicate that the input data may be a `memoryview`, and support that officially.', 'comment_created': datetime.datetime(2021, 7, 26, 11, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 677492156, 'comment_body': '> Does it work if you use 2 separate write calls?\r\n\r\nYup it works that way. It also works like this: `self.file.write(self.char + data)` weirdly.\r\n\r\n> If we go this route, it might be good to indicate that the input data may be a memoryview, and support that officially.\r\n\r\nBy that you mean we should include in the documentation to warn the users that input could be a `memoryview` while using `PickleItemExporter`?', 'comment_created': datetime.datetime(2021, 7, 27, 14, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 677512922, 'comment_body': 'I would not put the focus on `PickleItemExporter`, and instead assume that any exporter, built-in or user-provided, may do the same.\r\n\r\nSince supporting a `memoryview` should be trivial, and we are going to support it in our post-processing plugins, it would make sense to indicate in the documentation of plugins that their `write` method may get either `memoryview` or `bytes`, and that they should be ready to handle any of those types as input.', 'comment_created': datetime.datetime(2021, 7, 27, 14, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 677598322, 'comment_body': 'I _think_ you can simplify this part by using `sys.version_info` instead:\r\n\r\n```suggestion\r\n            if sys.version_info <= (7, 3, 1):\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 16, 8, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 677642576, 'comment_body': '![image](https://user-images.githubusercontent.com/23308719/127197552-61b168cd-0f4c-460c-8cdf-060a277d0e5c.png)\r\n', 'comment_created': datetime.datetime(2021, 7, 27, 17, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 677643468, 'comment_body': ""`sys.version_info` returns the python version info not the pypy version and I couldn't find a simpler way to get pypy's version info."", 'comment_created': datetime.datetime(2021, 7, 27, 17, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 677646122, 'comment_body': ""Looks like it won't be needed now since we are skipping all pypy versions now."", 'comment_created': datetime.datetime(2021, 7, 27, 17, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}]","[{'commit_sha': 'b53cc37200d6c3a76ae8c564754dd0b9b74b1397', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdc27e90ec4bfb5bb6dbcbf822be4230387c9ef0', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b30f9b521686c80fadbd851c3f8436c232132c7', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb8fe6f4b499ebda4f34b534c3f4ee6e5eeb7230', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a794e728356ab9c79c18c3843b1ccdb6d9161f2', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce3b6e697b88a1223970aa1c17820fe364db408', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15eef5a89070e1c5fcc63a670a6600e359ae660c', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be630a62b0419dbc0262d54b2d3105a4d7d01d1c', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58fd8454265f7d775ad30dd284a87faac99cdd49', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab8c949f64cbc2efd8094dba2e93c4c3786ac4d6', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bc670a2a4d23334c61c1f8adf460fa77f9946fd', 'committer_username': 'Gallaecio', 'committer_name': 'Adrián Chaves', 'committer_email': 'adrian@chaves.io', 'commit_date': datetime.datetime(2011, 4, 2, 10, 9, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dd57a669ba52f65d2d775aae8621f5aff902dff', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ab357dbc2335ad03ff5998c1f13a6fa223a755f', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba40bccc2d779d332cc74f43759fe57f71d3376e', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '178c5f4ae124fcd253cece2d9d1ec14e9d36b660', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3952a08712e9a910640f560168aa7aebac2ee0e', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}]",D R Siddhartha,23308719,siddharthadr11@gmail.com,User,,16,,10,7
690945053,Feeds: Batch Triggers (Soft Limits),"Batch creation was a recently introduced feature but was limited to only item count constraints. Batch Triggers will be able to make the constraints flexible and give more control to user to create batches.

Resolves #5169.",False,5205,https://api.github.com/repos/scrapy/scrapy/pulls/5205,https://github.com/scrapy/scrapy/pull/5205,open,567,92,7,26,14,103,0,0,[],2021-07-15 18:25:04+00:00,,0.0,,"[{'comment_id': 670805267, 'comment_body': 'This should be along the rest of imports from `scrapy` below, and keeping the alphabetical order.', 'comment_created': datetime.datetime(2021, 7, 15, 21, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 670807222, 'comment_body': 'Would `current_item_count` work instead of `updated_once`? (and remove the need to define `updated_once` in the `Batch` class)', 'comment_created': datetime.datetime(2021, 7, 15, 21, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 670807493, 'comment_body': 'Why not just `item_count`?', 'comment_created': datetime.datetime(2021, 7, 15, 21, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 670808115, 'comment_body': 'What about `self.max_item_count`?', 'comment_created': datetime.datetime(2021, 7, 15, 21, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 670811477, 'comment_body': 'I don’t think we need to modify the logged message. If the goal is for the logs to explain why the batch was triggered, it probably makes sense to log a message about that separately. This message is about informing users that a file with N items has been stored in a given location, regardless of the reason (time, number of items, etc.).', 'comment_created': datetime.datetime(2021, 7, 15, 21, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 670812486, 'comment_body': 'I think `Batch` is a bad name, since this class does not represent a single batch. Maybe something in the line of `BatchTracker` or `BatchHandler`?', 'comment_created': datetime.datetime(2021, 7, 15, 21, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 670995823, 'comment_body': 'Since the goal is to provide more batch triggers than just item count, I had thought of this so that when the file size and time duration are introduced as well or maybe a custom batch class is being used, `updated_once` can be used to determine if a batch is empty. ', 'comment_created': datetime.datetime(2021, 7, 16, 6, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 670996477, 'comment_body': 'I have no idea how it got there really :laughing: ', 'comment_created': datetime.datetime(2021, 7, 16, 6, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 670998221, 'comment_body': 'I was having a bad day naming variables :D. I think `BatchHandler` would do nicely.', 'comment_created': datetime.datetime(2021, 7, 16, 6, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 670999425, 'comment_body': 'I thought that using that log message to convey the batch state will serve both points: why batch was triggered and what was the last state when it was closed. Though I see your point and I will try that.', 'comment_created': datetime.datetime(2021, 7, 16, 6, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 672400247, 'comment_body': 'These are soft limits for now. Hard limits are planned for later.', 'comment_created': datetime.datetime(2021, 7, 19, 15, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 676394678, 'comment_body': 'This variable seems unnecessary, `feed_options` seems to be used only in this `__init__` method.', 'comment_created': datetime.datetime(2021, 7, 26, 8, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676398360, 'comment_body': 'Naming suggestions (shorter with still descriptive enough):\r\n\r\n```suggestion\r\n        self.max_seconds: str = self._in_seconds(self.feed_options[""batch_duration""])\r\n```\r\n\r\nDuration implies time, so `time_duration` seems superfluous. `batch_interval` may also work, if you prefer.\r\n\r\nUsing `max_seconds` implies also switching `elapsed_time` to `elapsed_seconds`.\r\n\r\nIf (and only if) you finish batch triggers earlier than expected and you need an stretch goal, I’m also thinking that you could  implement support for an additional `batch_schedule` option which supports a [Cron expression](https://en.wikipedia.org/wiki/Cron), which may allow for a more CPU-efficient approach than what I expect time hard limit to be.', 'comment_created': datetime.datetime(2021, 7, 26, 8, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676409413, 'comment_body': 'This variable seems unused.', 'comment_created': datetime.datetime(2021, 7, 26, 8, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676410220, 'comment_body': '```suggestion\r\n        self.enabled: bool = any(\r\n            (self.max_item_count, self.max_time_duration, self.max_file_size)\r\n        )\r\n```', 'comment_created': datetime.datetime(2021, 7, 26, 8, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676411301, 'comment_body': 'Maybe `item_added` makes more sense here.', 'comment_created': datetime.datetime(2021, 7, 26, 8, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676414247, 'comment_body': 'You could move these two lines to `should_trigger`, and that way delay their execution until need, i.e. not execute them at all if the class is disabled or if an earlier condition to create a new batch is met.', 'comment_created': datetime.datetime(2021, 7, 26, 8, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676415216, 'comment_body': 'Unused', 'comment_created': datetime.datetime(2021, 7, 26, 8, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676416305, 'comment_body': 'Stretch goal (in case you finish work on batch triggers earlier than expected): support `1h 2m 3s` format', 'comment_created': datetime.datetime(2021, 7, 26, 8, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676420308, 'comment_body': 'See https://en.wikipedia.org/wiki/Byte#Multiple-byte_units\r\n\r\nI would make these units based on powers of 10, and support also binary prefixes for units expressed as powers of 2.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676422890, 'comment_body': ""```suggestion\r\n        match = re.search(r'(?i)^\\s*(\\d+)\\s*((?:[kMGT]i?)?B)\\s*$', size)\r\n        if not match:\r\n            raise ValueError(f'Invalid batch size: {size!r}')\r\n        number, unit = match[1], match[2].upper()\r\n```"", 'comment_created': datetime.datetime(2021, 7, 26, 9, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676423845, 'comment_body': 'These 2 functions seem superfluous, since they are one-liners used only once, where their return value is assigned to a variable whose name makes it clear what the outcome is.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676426054, 'comment_body': 'This comment does not seem to add much information to what is already clear from the code, I think.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 676426953, 'comment_body': 'This comment also seems superfluous.', 'comment_created': datetime.datetime(2021, 7, 26, 9, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 680667355, 'comment_body': 'Looks good. However, I still think it would be best to be more precise, to use a pair of values that only differs in 1 byte.\r\n\r\nIn fact, I think you can be more precise without actually having to guess the right value to put here. Which is great, because I suspect for pickle and marshal that value may change depending on the version of Python that you use.\r\n\r\nWhen you run the `1B` test, you can use the `exported_data` to tell what exact size the first file has, so using that size as maximum should still cause 2 files (`self.file_size >= self.max_file_size`), while that size plus 1 should cause a single file. So, instead of hardcoding sizes here, you could use the output of `self.exported_data(items, settings)` for `1B` for the tests based on higher sizes.', 'comment_created': datetime.datetime(2021, 8, 2, 5, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 680671243, 'comment_body': 'This test, with a single item, seems to indirectly demonstrate that the current implementation will cause empty files to be created sometimes.\r\n\r\nI think this is undesired behavior for the ideal batch implementation, i.e. ideally we should only create files with items. But I also think this behavior is OK for an initial implementation, and I think it is a consequence of pre-existing batch-handling code.', 'comment_created': datetime.datetime(2021, 8, 2, 5, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 680671567, 'comment_body': 'Why is the last value 1 instead of 1+1? Why is the behavior with duration different than with file size above?', 'comment_created': datetime.datetime(2021, 8, 2, 5, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 680679344, 'comment_body': 'Yes I think in the original batch trigger PR this was pointed out. Here: [https://github.com/scrapy/scrapy/pull/4434#issuecomment-658672328](https://github.com/scrapy/scrapy/pull/4434#issuecomment-658672328).', 'comment_created': datetime.datetime(2021, 8, 2, 6, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 680679699, 'comment_body': 'Ok yeah it should be triggered after getting at most 2 items. I will change that.', 'comment_created': datetime.datetime(2021, 8, 2, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 680680275, 'comment_body': 'Got it!', 'comment_created': datetime.datetime(2021, 8, 2, 6, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 680684982, 'comment_body': 'This is slightly different, though. The initial implementation creates 1 extra empty file. Somehow this test, with 1 item, can create 3 different files, so I assume 2 of those files are empty. I’m actually not sure how this happens, but it seems to be happening, because the test passes. Any idea why? (if this is a bug, it may be best to not only fix it but also add a specific test for it)', 'comment_created': datetime.datetime(2021, 8, 2, 6, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 680688792, 'comment_body': ""Oh I see, I should have put a comment explaining it. So to simulate item scraping delays I am using `DOWNLOAD_DELAY` to delay url downloads. So as to get one item per download. That's why I am using `multiple_urls` argument in the `exported_data` function. You suggested that trick for testing hard limit duration :)"", 'comment_created': datetime.datetime(2021, 8, 2, 6, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 680691026, 'comment_body': 'So I am actually getting total of 2 items, one from each url download.', 'comment_created': datetime.datetime(2021, 8, 2, 6, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 680694958, 'comment_body': ':facepalm:\r\n\r\nThat makes total sense, sorry for the noise!', 'comment_created': datetime.datetime(2021, 8, 2, 6, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 683182355, 'comment_body': ""![image](https://user-images.githubusercontent.com/23308719/128304487-ac8f08f0-5b09-4903-8bca-8e5b909dbe1f.png)\r\n\r\nIn the last entry, I was expecting item being added after a delay of 0.5 seconds at least but it was added sooner. So the batch wasn't triggered and there was only 1 batch instead of 1 (with 2 items) + 1 empty batch. Kinda hard to get at-most-2-items batch everytime. Should I continue with expecting 1 batch with 2 items duration?"", 'comment_created': datetime.datetime(2021, 8, 5, 7, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 683381907, 'comment_body': 'A paragraph like this still makes sense as part of the “Delayed file delivery”, as this paragraph provides an alternative for scenarios where “Delayed file delivery” can be problematic. So instead of removing the paragraph, it should be rephrased to link to the section below instead of linking to the documentation of the `FEED_EXPORT_BATCH_ITEM_COUNT` setting.', 'comment_created': datetime.datetime(2021, 8, 5, 11, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 683382477, 'comment_body': 'This should be after the header, not before.', 'comment_created': datetime.datetime(2021, 8, 5, 11, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 683386340, 'comment_body': 'This title seems too specific. I think this should be (is?) a section about batching or batches in general in the context of the Scrapy feed exports plugin. It should explain what batches are, how they can be useful, and how to configure them. \r\n\r\nI think “trigger”, as a concept, is not something users need to know at this point.', 'comment_created': datetime.datetime(2021, 8, 5, 11, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 683405745, 'comment_body': '> If you want item delivery to start earlier when using one of the storage backends\r\n\r\nThis is not the only reason to use batching. It is also not true for all storage backeds; for some it will not speed up delivery, it may even slow it down as far as we know. The point of batching is to deliver the output data in split, sequential files instead of a single file. (The word “sequential” is key, because for splitting files non-sequentially there’s the other feature you implemented: item filtering)\r\n\r\nWhile the tip to use batches when dealing with certain storages is useful for users, for users suffering the issue and not knowing how to deal with it, it will be easier to find this information in the section above, “Delayed file delivery”; users that already know that batching solves the problem do not need a reminder when reading about batches.\r\n\r\n> you can use triggers such as ``batch_item_count``, ``batch_file_size``, ``batch_duration`` or you can create :ref:`your own triggers <custom_batch_handler>`\r\n\r\nThe first paragraph of the section should be only about the what. This part, about the how, should star a separate paragraph.\r\n\r\nYou should also structure this a bit more. It probably makes sense to indicate the multiple criteria that can be used to split batches (item count, time, file size, custom) as list items, and detail the way to enable those and their details (e.g. supported syntax) in each list element, with multiple paragraphs per list item if needed. This makes it easier for readers to focus on the criteria they want, i.e. if I know I want to split by item count I don’t need to read about time or file size.', 'comment_created': datetime.datetime(2021, 8, 5, 12, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 683458061, 'comment_body': 'Maybe you need to also limit concurrency to 1? It’s 8 by default, so multiple requests can happen in parallel.', 'comment_created': datetime.datetime(2021, 8, 5, 13, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684030695, 'comment_body': 'Tried `CONCURRENT_REQUESTS: 1` still getting some results with delays less than 0.5 secs :(', 'comment_created': datetime.datetime(2021, 8, 6, 7, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 684061138, 'comment_body': 'Can you share code that I can use to reproduce the issue easily (i.e. what you used to print the text in the screenshot) in some branch of your Scrapy fork?', 'comment_created': datetime.datetime(2021, 8, 6, 8, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684083563, 'comment_body': '[https://github.com/drs-11/scrapy/tree/batch-duration-debug](https://github.com/drs-11/scrapy/tree/batch-duration-debug)\r\n\r\nI did the usual one item per url and two urls. The wrong delays does not happen everytime so you may need to run the crawl multiple times.', 'comment_created': datetime.datetime(2021, 8, 6, 9, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 684104566, 'comment_body': 'Oh, I bet it’s https://docs.scrapy.org/en/latest/topics/settings.html#std-setting-RANDOMIZE_DOWNLOAD_DELAY', 'comment_created': datetime.datetime(2021, 8, 6, 9, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684110848, 'comment_body': 'YES! Getting consistent delays now :sweat_smile:.', 'comment_created': datetime.datetime(2021, 8, 6, 9, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 684206564, 'comment_body': 'What about this?\r\n\r\n```suggestion\r\nbackends, use :ref:`batches<batches>` to split the output items into multiple\r\nfiles, delivered sequentially after a given criteria is met, e.g. after each\r\nfile contains a given number of items or after a given time has passed since\r\nthe last file delivered.\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 12, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684225060, 'comment_body': 'This is written from the perspective of a user that is using the default batch handler. While this will be true for most users, the documentation should be accurate.\r\n\r\nWhat about:\r\n\r\n```suggestion\r\nBatching is controlled by a batch handler, which is defined through the \r\n:ref:`batch feed option <feed-options>`.\r\n\r\nFor information about enabling and configuring the default batch handler, see\r\n:class:`~scrapy.extensions.batches.BatchHandler`. You can alternatively \r\n:ref:`create your own batch handler <custom_batch_handler>`.\r\n```\r\n\r\nThen you could create a section called something like “Built-in Batch Handler”, and use `.. autoclass:: scrapy.extensions.batches.BatchHandler` there to provide documentation about the handler directly from its docstring. Then you can place in its docstring all the information about enabling and configuring the default batch handler, including what you currently have under the “Batch Criterias” section below (by the way, it’s “criteria” even in plural), without implying that every batch handler is supposed to be enabled and configured the same way.', 'comment_created': datetime.datetime(2021, 8, 6, 13, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684229104, 'comment_body': 'You can probably replace this whole part about batch feed URIs with a paragraph that simply states that, if you enable batching, you must update your feed URI accordingly, and then link to a new section that contains all the information here.\r\n\r\nThis is to avoid the most part of the introduction about batches being something as specific as the handling of the feed URI. It also allows us to link to this information from other parts of the documentation and from the outside.', 'comment_created': datetime.datetime(2021, 8, 6, 13, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684231370, 'comment_body': 'In the documentation about the batch settings, it should be clear that they only apply if using the default batch handler.', 'comment_created': datetime.datetime(2021, 8, 6, 13, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684233221, 'comment_body': 'The settings documentation should also clarify the scope, the default batch handler.\r\n\r\nYou could also remove the settings from here, mention them in the docstring of the default batch handler as equivalents to the corresponding feed option keys (indicating which one has a higher priority over the other), and move the `.. setting:: …` anchors to right above the paragraph or list item that mentions each setting.', 'comment_created': datetime.datetime(2021, 8, 6, 13, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684235387, 'comment_body': 'Tip: you can use ``` :ref:`batches` ``` and the display string becomes the header text of the referenced section.', 'comment_created': datetime.datetime(2021, 8, 6, 13, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684236260, 'comment_body': 'What about something more generic?\r\n\r\n```suggestion\r\n            If batching is not enabled, ``batch_id`` is always ``1``.\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 13, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684941454, 'comment_body': '```suggestion\r\nfile contains a given number of items or after a given time has passed since\r\nthe last file delivery.\r\n```\r\n\r\nor \r\n\r\n```suggestion\r\nfile contains a given number of items or after a given time has passed since\r\nthe last file was delivered.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 6, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684942406, 'comment_body': '“to be ended” sounds like stopped, as opposed to end naturally. Since this applies to any way of ending:\r\n\r\n```suggestion\r\na single file. This is useful in getting item deliveries earlier before the crawl ends.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 6, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684942865, 'comment_body': 'We use hyphens instead of underscores for these anchors:\r\n\r\n```suggestion\r\n.. _default-batch-handler:\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 6, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684943116, 'comment_body': '```suggestion\r\nIf you enable batching, you must also :ref:`set feed URIs appropriately with placeholders <batch-uri>`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 6, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684945167, 'comment_body': 'Looking at this now, I think we should change how this is implemented, to make things more consistent with other Scrapy components.\r\n\r\nThey way this usually works in Scrapy is that components raise the `NotConfigured` exception in their `__init__` method (or `from_crawler` class method) to indicate that the component is disabled through settings. Could we get the same behavior here instead of using an `enabled` attribute?', 'comment_created': datetime.datetime(2021, 8, 9, 6, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684946298, 'comment_body': 'Instead of documenting attributes in the documentation of the `__init__` method, we should document them using https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-py-attribute', 'comment_created': datetime.datetime(2021, 8, 9, 6, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684948238, 'comment_body': 'After the rename, saying that the method updates anything feels weird. I think we should indicate when it is called instead, clarifying that it is called *after* an item is added:\r\n\r\n```suggestion\r\n.. method:: item_added(self)\r\n\r\n    Called every time after an item is added to the current batch file.\r\n```\r\n\r\nWhile we could add a tip about using this method to update internal data on the batch handler, I think `should_trigger` may be a better place for that, since in the future it may be called not only after `item_added`.\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 6, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684952268, 'comment_body': 'Talking about “batch limit” is too specific, since a custom batch handler may implement any kind of logic to split batches, such as a random approach.\r\n\r\n```suggestion\r\n.. method:: should_trigger(self)\r\n\r\n    Return `True` if a new batch file should be created now, or `False` otherwise.\r\n    \r\n    This method may be called at any time.\r\n```\r\n\r\nI think “This method may be called at any time.” is something we should add if we want users not to assume that this method will always only be called after `item_added`.', 'comment_created': datetime.datetime(2021, 8, 9, 6, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684954644, 'comment_body': '```suggestion\r\n.. method:: new_batch(self, file)\r\n\r\n    Called after each batch file is created, including the first batch file.\r\n    \r\n    You should use this method to update the :attribute:`batch_id` attribute.\r\n    \r\n    You may also reset any internal state of your batch handler.\r\n\r\n    :param file: file pointer of new batch storage\r\n    :type file: :class:`BinaryIO`\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 7, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684956988, 'comment_body': 'I think if we rephrase this we could move it at the beginning of the section, where it will have more visibility:\r\n\r\n```suggestion\r\nTo use a custom batch handler, write a custom batch handler class and assign \r\nthat class or its import string to the :ref:`batch feed option <feed-options>`.\r\n```\r\n\r\nThe part about `feed_options` should be clear from the documentation of the `__init__` method. Maybe you could extend the documentation of that parameter with a tip, make it clear that feed options support arbitrary parameters and custom batch handlers may allow users to pass parameters through feed options.', 'comment_created': datetime.datetime(2021, 8, 9, 7, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684969078, 'comment_body': 'If we don’t want to allow batch handlers to set this value (and hence change how it changes), we should remove it from the custom batch handler class documentation, and instead let Scrapy handle this value. Since I don’t think allowing custom values for this variable was part of the goal of this change set, maybe this would be the best approach.\r\n\r\nIf we allow batch handlers to set this value, then we must change this definition, since we cannot ensure that the ID will match this description. We can say that it is a unique ID assigned to the batch (and we should then specify in the documentation of custom batch handlers that this value should be unique for each batch), which for the default batch handler is an incremental number starting with 1.', 'comment_created': datetime.datetime(2021, 8, 9, 7, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684975572, 'comment_body': 'Anyone who does not know what a batch handler does at this point should read the batch documentation.\r\n\r\n```suggestion\r\n    The default :ref:`batch handler <batches>`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 7, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684976802, 'comment_body': '```suggestion\r\n    To activate, define one of the following :ref:`feed options <feeds-options>`:\r\n```\r\n\r\nThe clarification about the behavior when multiple options are used I think makes more sense after the list of options.', 'comment_created': datetime.datetime(2021, 8, 9, 7, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684978497, 'comment_body': '```suggestion\r\n    - ``batch_item_count`` (:class:`int`): the maximum number of items a batch can have.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 7, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684982046, 'comment_body': 'Instead of saying “soft limit”, which may not be clear to everyone, it may be better to be specific about what the option does.\r\n\r\n```suggestion\r\n    - ``batch_file_size`` (:class:`str`): deliver a batch file after it surpasses \r\n      this file size.\r\n    \r\n      The file size format is ``<number><unit>``, where ``<unit>`` is a byte \r\n      unit based on powers of 2 (KiB, MiB, GiB, TiB) or powers of 10 (kB, MB, \r\n      GB, TB). Eg: 200MB, 100KiB.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 7, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684985097, 'comment_body': '```suggestion\r\n    - ``batch_duration`` (:class:`str`): deliver a batch file after at least \r\n      this much time has passed.\r\n\r\n      The duration format is ``hours:minutes:seconds``. Eg: 1:0:0 for 1 hour,\r\n      0:30:0 for a 30 minute duration.\r\n        \r\n      Duration is only checked after an item is added to the batch file.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 7, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684990971, 'comment_body': 'What about merging this list into the one above?\r\n\r\nFor example:\r\n\r\n```\r\nTo activate, define one of the following :ref:`feed options <feeds-options>` or \r\n:ref:`settings <topics-settings>`:\r\n\r\n.. setting:: FEED_EXPORT_BATCH_ITEM_COUNT\r\n\r\n-   ``batch_item_count`` feed option or ``FEED_EXPORT_BATCH_ITEM_COUNT`` \r\n    setting (:class:`int`): the maximum number of items a batch can have.\r\n    \r\n…\r\n\r\nEach feed option overrides its counterpart setting.\r\n\r\nWhen using more than one type of limit, whichever limit comes first triggers a \r\nnew batch file.\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 8, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 684993784, 'comment_body': 'For a class implementing an interface, such as this one, you usually do not need to document the interface methods. The documentation of a method is meant to describe what it does, not how it does it, and that’s usually already covered in the documentation of the interface.\r\n\r\nIf your docstrings are meant to describe how a method works, and you feel this information is needed as a comment because the implementation or some aspect of it is not clear from code, you should use code comments for such information, not a docstring.', 'comment_created': datetime.datetime(2021, 8, 9, 8, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 685731172, 'comment_body': 'Yeah sorry I repeated this in postprocessing as well.', 'comment_created': datetime.datetime(2021, 8, 10, 6, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 686932988, 'comment_body': 'Moving internal data updating code to `should_trigger` will make `item_added` method useless. I guess I should remove `item_added` if we are doing all the updating in `should_trigger`?', 'comment_created': datetime.datetime(2021, 8, 11, 15, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 686959127, 'comment_body': 'I’m slightly inclined to keep it because I think it has some potential for extension in the future. I’m thinking that in the future (or maybe now?) we could add an `item` parameter to it, so that a batch handler can trigger batch switches based on item content.\r\n\r\nI’m also thinking that we might want to eventually have a counterpart `before_item_added` method, which would be called before an item is added to a batch and get not only the `item` as a parameter, but possibly also the `data` that will be written into the file, as both things could also be used by a batch handler to determine whether or not to switch to a new batch.\r\n\r\nInstead of removing `item_added`, maybe we could remove `should_trigger` and have `item_added` work the way `should_trigger` does, so instead of:\r\n\r\n```python\r\nself.batches[slot.uri_template].item_added()\r\nif self.batches[slot.uri_template].should_trigger():\r\n    ...\r\n```\r\n\r\nwe could have:\r\n\r\n```python\r\ncreate_new_batch = self.batches[slot.uri_template].item_added()\r\nif create_new_batch:\r\n    ...\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 15, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 686987064, 'comment_body': 'Oh nice, this could also be helpful in implementing hard limit for file size.', 'comment_created': datetime.datetime(2021, 8, 11, 16, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 687586934, 'comment_body': 'What if it is defined but 0?', 'comment_created': datetime.datetime(2021, 8, 12, 10, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687589427, 'comment_body': '```suggestion\r\n    You may reset any internal state of your batch handler.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687591679, 'comment_body': '```suggestion\r\n    - ``batch_file_size`` feed option or ``FEED_EXPORT_BATCH_FILE_SIZE``\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687596521, 'comment_body': '```suggestion\r\n      Default: ``0B``\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687597321, 'comment_body': '```suggestion\r\n    To activate, define one of the following :ref:`feed options <feed-options>`:\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687598195, 'comment_body': ':lipstick: I believe here you can simply put the type and it will automatically be treated the same as ``` :class:`dict` ``` when rendering the documentation.\r\n\r\n```suggestion\r\n    :type feed_options: dict\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687598719, 'comment_body': '```suggestion\r\n    .. note:: Feed options support arbitrary parameters passing, which can be\r\n              used by custom batch handlers to access parameters passed by users.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687601175, 'comment_body': 'This should probably be split into 2 paragraphs, and the current second paragraph be put in the middle, since the return value is more important than a tip on how you can use the method.\r\n\r\n```suggestion\r\n    Called every time after an item is exported to the feed.\r\n    \r\n    Return `True` if a new batch file should be created now, or `False` otherwise.\r\n    \r\n    You may use this method to update batch state information.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687604121, 'comment_body': 'Assuming it is supported by the implementation, I think in the documentation we should only feature times expressed with zero-padded minutes and seconds, in line with ISO times, even if the implementation does not require it. zero-padded times should be more readable.\r\n\r\n```suggestion\r\n      The duration format is ``hours:minutes:seconds``. Eg: 1:00:00 for 1 hour,\r\n      0:30:00 for a 30 minute duration.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687606695, 'comment_body': 'This does not seem correct in a couple of levels:\r\n\r\n- If should be `if not any`, since not all options need to be defined, 1 should be enough.\r\n- `<=0` values need to be taken into consideration; they should probably have the same effect as not defining a setting.\r\n\r\nThe tests are currently passing nonetheless, so new tests should be added to cover these scenarios.', 'comment_created': datetime.datetime(2021, 8, 12, 10, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687607249, 'comment_body': 'This should not be need anymore with the `NotConfigured` approach.', 'comment_created': datetime.datetime(2021, 8, 12, 10, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687608628, 'comment_body': 'These were docstrings of non-interface methods that described what the methods did (not _how_ they did it), so I believe docstrings were appropriate.', 'comment_created': datetime.datetime(2021, 8, 12, 11, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 687609946, 'comment_body': 'Now that batch handlers do not need to define `enabled`, this probably needs an update.\r\n\r\nYou should also add a test that would have caught this issue.', 'comment_created': datetime.datetime(2021, 8, 12, 11, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 688661047, 'comment_body': ""So what I am attempting here is giving only the default batch handler, an `enabled` attribute so as to know if any in built criteria has been activated. This is not needed in custom batch handlers. This I think is an implementation detail for the default batch handler only which also has `NotConfigured` exception for incorrect values.\r\n\r\nThe default batch handler needs that attribute because it is assigned by default if no other `batch` parameter has been passed. So the only way we know it's activated is through the `enabled` attribute."", 'comment_created': datetime.datetime(2021, 8, 13, 17, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 688661550, 'comment_body': ""So I think it's now more closer to being a Scrapy component than before :sweat_smile: "", 'comment_created': datetime.datetime(2021, 8, 13, 17, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 689268330, 'comment_body': 'Actually now that I think about it we can remove the automatic default batch handler assignment for non batch feeds.', 'comment_created': datetime.datetime(2021, 8, 16, 6, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 689425400, 'comment_body': '```suggestion\r\n            if feed_options.get(""batch_divisible_by"", 0) <= 0:\r\n                raise NotConfigured\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 10, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 689425833, 'comment_body': '```suggestion\r\n    - ``batch_duration`` feed option or ``FEED_EXPORT_BATCH_DURATION``\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 10, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 689426695, 'comment_body': '```suggestion\r\n    .. note:: Feed options support arbitrary parameters passing, which can be\r\n              used by custom batch handlers to access parameters passed by users.\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 10, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 689427336, 'comment_body': 'My bad :sweat_smile: \r\n\r\n```suggestion\r\n    Return ``True`` if a new batch file should be created now, or ``False`` otherwise.\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 10, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 689428040, 'comment_body': '```suggestion\r\n      Default: ``0:00:00``\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 10, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 689430016, 'comment_body': '```suggestion\r\n        if not any(limit > 0 for limit in (self.max_file_size, self.max_item_count, self.max_seconds)):\r\n            raise NotConfigured\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 10, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 689433469, 'comment_body': '`self.enable` will always be `True`, because in scenarios where it would be `False` a `NotConfigured` exception is raised, so the batch handler object is never created or used.', 'comment_created': datetime.datetime(2021, 8, 16, 10, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 689434010, 'comment_body': 'PEP-8\r\n\r\n```suggestion\r\n    def _in_seconds(self, duration: str) -> float:\r\n        """"""Convert duration string in format: \'<HOURS>:<MINUTES>:<SECONDS>\' to seconds in float.""""""\r\n        h, m, s = map(float, duration.split("":""))\r\n        duration_in_secs = h * 60 * 60 + m * 60 + s\r\n        return duration_in_secs\r\n\r\n    def _in_bytes(self, size: str) -> int:\r\n        """"""Convert string size in format: \'<SIZE><UNIT>\' to bytes in integer.""""""\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 10, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 694565319, 'comment_body': 'I think it may be better to leave the previous name. The new name could be quite confusing if we switch the default value to a different one in the future.', 'comment_created': datetime.datetime(2021, 8, 24, 7, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 694567138, 'comment_body': 'This should probably be not be a warning, since batch handling not being configured is not only OK, but will also be the case most of the time. I’m not sure we need a message here in the first place, `NotConfigured` means the component controlled the issue. We can leave up to the component to log a warning if it is warranted.', 'comment_created': datetime.datetime(2021, 8, 24, 7, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 712130639, 'comment_body': 'I think you need to add `:noindex:` to every `method`, `class`, and other API entries that do not describe something that is part of Scrapy, but an interface for users to implement themselves. For example:\r\n\r\n```suggestion\r\n.. method:: __init__(self, feed_options)\r\n   :noindex:\r\n```\r\n\r\nAlternatively, you could wrap them as part of a class (e.g. `.. class:: MyBatchHandler`). I think that’s how we have done it in similar cases in the past. Although if `:noindex:` works, maybe that would be best. Up to you.', 'comment_created': datetime.datetime(2021, 9, 20, 12, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 753317426, 'comment_body': 'Oh wait this is wrong, this will generate a warning everytime XML exporter is used. Will fix this.', 'comment_created': datetime.datetime(2021, 11, 19, 15, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}, {'comment_id': 753317761, 'comment_body': 'Same here :sweat_smile: ', 'comment_created': datetime.datetime(2021, 11, 19, 15, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'drs-11', 'type': 'User'}]","[{'commit_sha': '8c8f4bcf5e066bab31872e4769ac4efe3c2edd09', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d9ae65ff436a0dc5ffe8534b010745ea6f0fd8', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68de9594042b96f0f461f9724b1c01d16ff89670', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69bf91cdb5b8391651c38252bd9a4d9a7d11a7f2', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f8022ea8125e66444619a94a8d5031cecd742eb', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea2a65250deec6d2d2aee90ba832bd85de78e8e0', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1da6725119466f57fd379122d0b08f16e45c889c', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecbf087cf263156d4eca1ec1012e7cd8cfac24ef', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d2ab0ca3fbe3ff316ff2fb94e0631c47ca08be', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e7f63d55a70c1c8a9af564187052ef9d0e16994', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c05f490c776eb51985d6274ae3939927af9b309a', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98d47cb6e84b2b034912f31a11cdef33131d6cf1', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a2a6bef3c18ebfa5336695feb299436e4ded780', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e02d6d83d07586245b5550692ac8781257b7632', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25a1a8d53cec83595e5094a1b308a921e64a295f', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef7e7fe58d9ac329c06ac0c3ec4734a0451123dd', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '490a38937483dc9121101df4d36826960b0426c1', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec84e0f7d9f40b8742b9e80f2be2e4840ff608b', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157dc47d73b846074931d34ab113d7527863b74d', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5caefb267f17e198f4a20a5b799ed557585c02d8', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a30d53f9eb6bab2a591215dae727ed4149b3b00', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d52f8b9f2054a397f73aab7b2377fa626f8740e', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291a0cc201ef02c811a2b9d89a7be225efcdcde0', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b6fcd36b06c2c62971776edcb0870b473a3a6e9', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08c140943bd58471e6eadbf33053b8915f759a9', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c17f5ecd60f14446251ea488d1e7ddadac55c9bc', 'committer_username': 'drs-11', 'committer_name': 'D R Siddhartha', 'committer_email': 'siddharthadr11@gmail.com', 'commit_date': datetime.datetime(2016, 11, 7, 8, 46, tzinfo=datetime.timezone.utc)}]",D R Siddhartha,23308719,siddharthadr11@gmail.com,User,,16,,10,7

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
529502,scrapy,scrapy/scrapy,Python,10436,52154,1775,651,10531,669,39,220,"[{'id': 696958547, 'number': 5219, 'closed': datetime.datetime(2021, 8, 7, 6, 6, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 11, 53, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1015975.0, 'time_delta': '11 days, 18:12:55', 'additions': 160, 'deletions': 17, 'state': 'closed'}, {'id': 690945053, 'number': 5205, 'closed': None, 'created': datetime.datetime(2021, 7, 15, 18, 25, 4, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 567, 'deletions': 92, 'state': 'open'}, {'id': 676392206, 'number': 5190, 'closed': datetime.datetime(2021, 8, 24, 9, 48, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 15, 21, 21, tzinfo=datetime.timezone.utc), 'time_taken': 5336801.0, 'time_delta': '61 days, 18:26:41', 'additions': 721, 'deletions': 2, 'state': 'closed'}, {'id': 668261846, 'number': 5178, 'closed': datetime.datetime(2021, 7, 13, 15, 22, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 15, 16, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2765142.0, 'time_delta': '32 days, 0:05:42', 'additions': 214, 'deletions': 6, 'state': 'closed'}, {'id': 480555603, 'number': 4778, 'closed': datetime.datetime(2020, 10, 1, 18, 57, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 5, 17, 37, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2251195.0, 'time_delta': '26 days, 1:19:55', 'additions': 13, 'deletions': 1, 'state': 'closed'}, {'id': 472988850, 'number': 4753, 'closed': datetime.datetime(2022, 11, 7, 15, 36, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 6, 59, 42, tzinfo=datetime.timezone.utc), 'time_taken': 69496600.0, 'time_delta': '804 days, 8:36:40', 'additions': 155, 'deletions': 21, 'state': 'closed'}, {'id': 472594054, 'number': 4752, 'closed': datetime.datetime(2020, 8, 25, 13, 35, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 15, 21, 52, tzinfo=datetime.timezone.utc), 'time_taken': 80039.0, 'time_delta': '22:13:59', 'additions': 12, 'deletions': 11, 'state': 'closed'}, {'id': 472134042, 'number': 4750, 'closed': datetime.datetime(2020, 8, 24, 14, 34, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 14, 46, 52, tzinfo=datetime.timezone.utc), 'time_taken': 85635.0, 'time_delta': '23:47:15', 'additions': 12, 'deletions': 11, 'state': 'closed'}]"
