pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
470226512,OrderedRobinDict,An alternative approach for creating an ordered dictionary with RobinDict. Design philosophy is documeneted [here](https://nextjournal.com/eulerkochy/ordered-dictionary-an-alternative-approach).,True,658,https://api.github.com/repos/JuliaCollections/DataStructures.jl/pulls/658,https://github.com/JuliaCollections/DataStructures.jl/pull/658,closed,896,7,8,13,0,8,0,0,[],2020-08-19 15:04:10+00:00,2020-08-23 14:23:55+00:00,343185.0,"3 days, 23:19:45","[{'comment_id': 473258211, 'comment_body': '1 sentence per line gives good diffs when it is editted later.\r\n(since a sentence is a single idea)\r\n```suggestion\r\nThe interface of `RobinDict` replicates that of `Dict`.\r\nThis has an ordered version called `OrderedRobinDict`, which replicates the interface of `OrderedDict`.\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 19, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 473270089, 'comment_body': 'Couild we be using iterator traits to check if this has length or size, and if so do `sizehint!(h, length(kv))` ?', 'comment_created': datetime.datetime(2020, 8, 19, 19, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 473270341, 'comment_body': 'is the extra whitespace here for a reason?\r\n```suggestion\r\n    v = convert(V,  v0)\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 19, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 473272033, 'comment_body': ""why do we need `hk` and `hv` ?\r\ncan't we just use `newk` and `newv` since they are aliases?"", 'comment_created': datetime.datetime(2020, 8, 19, 19, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 473272896, 'comment_body': 'What is with the white space?\r\n\r\n```suggestion\r\n    key = convert(K,key0)\r\n    index = get(h.dict, key, -2)\r\n    index > 0 && return h.vals[index]\r\n    v = convert(V,  default)\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 19, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 473273333, 'comment_body': 'Seems extra what space ahouit this?\r\n\r\n```suggestion\r\n    index > 0 && return @inbounds h.vals[index]\r\n\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 19, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 473273928, 'comment_body': 'I wondr if we really need these `convert`s?\r\n`get` and `setindex`  i assume do this internally.\r\nAnd I assume also inline.\r\nand then the optimizer running common subexpression elimination should take care of avoiding calling it twice', 'comment_created': datetime.datetime(2020, 8, 19, 19, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475141881, 'comment_body': 'This ctor resembles closely to the one in `base/dict.jl`. Not sure, if we need to mess with it.', 'comment_created': datetime.datetime(2020, 8, 22, 21, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}]","[{'commit_sha': 'fdf804eda63971c712beef1d3b00aa8c3f872a51', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5af0c1fa079fb7593777090535b9d36f40b76669', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '594506f9dc33a9e77896a086f886fd8e85216c69', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6680c29bb181de50eeb11d197c937f4fd9e94061', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c10250a81fcd6938c11510d51088cf076d3e822', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e92434b8ff1b1bb53904f362e4de1c7757ad2066', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6485b9ade2f725ae09d28915bec71b3c66afbd39', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8535e4199b14d9bdbbc2e8803ae3ced3e0303948', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9aa7ca95d8e661c276611e2982de3c3529f42cf', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1365b387600b13d75a51cb0da25155e98092d204', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e83bac0e019edeb1a2f657b1a6186ec066b54bc', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe59e2088f6b70f7d93d61f41ee0305b7bd5e78d', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0024b7d573737a7a34d8746c81517243f9fbc00', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}]",Koustav Chowdhury,33925317,kc99.kol@gmail.com,User,,85,,6,28
434178240,SwissDict,"### SwissDict
Part of GSoC'20 work.
Initial code and tests.
Tests run and works.
As of now, the benchmarks aren't favorable.
I'll post the benchmarks once I finish the work on #517 

**Tasks remaining**

- [x] Refactor code, and improve benchmarks.
- [x] Add docstrings and deploy doc
- [x] Add file to README",True,634,https://api.github.com/repos/JuliaCollections/DataStructures.jl/pulls/634,https://github.com/JuliaCollections/DataStructures.jl/pull/634,closed,1050,1,10,67,4,12,0,0,[],2020-06-14 17:47:10+00:00,2020-08-30 17:05:40+00:00,6650310.0,"76 days, 23:18:30","[{'comment_id': 440770158, 'comment_body': 'Do we always do this per file?\r\nI thought we just did this at the top level file', 'comment_created': datetime.datetime(2020, 6, 16, 11, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 440771321, 'comment_body': 'this is never used and seems unuseful and confusing', 'comment_created': datetime.datetime(2020, 6, 16, 11, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 440773511, 'comment_body': ""Why are we chanign the default definition of `empty` for all `AbstractDicts`?\r\nThat doesn't seem right"", 'comment_created': datetime.datetime(2020, 6, 16, 11, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 440774064, 'comment_body': ""```suggestion\r\n##SIMD utilities\r\n```\r\n\r\nAlso fun, i haven't touched these `llvmcall` for SIMD in ages."", 'comment_created': datetime.datetime(2020, 6, 16, 11, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 440776247, 'comment_body': 'Can we get rid of the `if` by interpolating the type string in?\r\n\r\n```suggestion\r\n@inline function _prefetchr(p::Ptr)\r\n    p = reinterpret(UInt, p)\r\n    int_t = Int === Int64 ? ""i64"" : ""int_t""\r\n    Core.Intrinsics.llvmcall(\r\n        (""declare void @llvm.prefetch(i8*, i32, i32, i32)"",\r\n        """"""\r\n        %ptr = inttoptr $int_t %0 to i8*\r\n        call void @llvm.prefetch(i8* %ptr, i32 0, i32 3, i32 1)\r\n        ret void\r\n        """"""),\r\n        Nothing, Tuple{UInt}, p\r\n    )\r\nend\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 11, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 440776413, 'comment_body': 'similar to above, can we interpolate the type string in?', 'comment_created': datetime.datetime(2020, 6, 16, 11, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 440780538, 'comment_body': 'why is this commented  out?', 'comment_created': datetime.datetime(2020, 6, 16, 11, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 440782929, 'comment_body': 'I think maybe you did not intend to add this white-space?', 'comment_created': datetime.datetime(2020, 6, 16, 11, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 440803589, 'comment_body': ""it's there in `robin_dict.jl`. Nice suggestion, let me get to it and try to get it out from there as well. I'll remove this from here as well."", 'comment_created': datetime.datetime(2020, 6, 16, 12, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 448626195, 'comment_body': '```suggestion\r\n        ccall(""llvm.prefetch"", llvmcall, Cvoid, (Ref{Int8}, Int32, Int32, Int32), Ptr{Int8}(p), 0, 3, 1)\r\n    end\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 21, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vtjnash', 'type': 'User'}, {'comment_id': 479761895, 'comment_body': 'do we need to fix the tests to make sure to cover this?', 'comment_created': datetime.datetime(2020, 8, 30, 12, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 479781905, 'comment_body': ""I can't seem to find a test to cover this. It's quite hard to find a test case specifically for this. But, this serves the purpose of `h.idxfloor`, so it isn't wrong.\r\n"", 'comment_created': datetime.datetime(2020, 8, 30, 15, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}]","[{'commit_sha': '4002001a23ee7974356d9ae9185fc579ec583db0', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eff12d46f4a9e814fc05400ebc5a680277ae5769', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ab6c0662a0e4d405b81aeeadd8ab8eff4d2314f', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16ad2b86a62fc1d44f7cbcdd87433ac061372ef5', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d7c2b0af2a4e4c4b969c92837925354ac68581', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc7e32740abe6e430551e54815b90e3bcb7ae05b', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3971b9da5c7284b5a2b9e3051059487d09b80100', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b7406d2a3782254535f33d3897e3b82c2f0ddc', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6442ad87a6a0bfe483b080c3dbbe6cdbfd3f5d1d', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea52db52e9b4c986a56f15dec2dbd3af51b20d3c', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35485ed6676145378e75c3ec1a252721e254d813', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ce45831060e2a633bdd69cb6c981ce30d2fddd', 'committer_username': 'oxinabox', 'committer_name': 'Frames White', 'committer_email': 'me@oxinabox.net', 'commit_date': datetime.datetime(2013, 7, 31, 8, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd53806fd0fc7bb5fb658631f6922127acee924d8', 'committer_username': 'KristofferC', 'committer_name': 'Kristoffer Carlsson', 'committer_email': 'kcarlsson89@gmail.com', 'commit_date': datetime.datetime(2011, 12, 23, 18, 49, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27fbdd730bd3ce88378ba0d03f7aef4ae1614d80', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87fb04d5291c5a059821a31e29ef494042f55154', 'committer_username': 'NHDaly', 'committer_name': 'Nathan Daly', 'committer_email': 'NHDaly@gmail.com', 'commit_date': datetime.datetime(2012, 3, 28, 4, 10, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b86940b83ff6449257c34f7bde10b4441c9de0d4', 'committer_username': 'NHDaly', 'committer_name': 'Nathan Daly', 'committer_email': 'NHDaly@gmail.com', 'commit_date': datetime.datetime(2012, 3, 28, 4, 10, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8f0af1fdc4d861a07af621412188b2fdfc699de', 'committer_username': 'NHDaly', 'committer_name': 'Nathan Daly', 'committer_email': 'NHDaly@gmail.com', 'commit_date': datetime.datetime(2012, 3, 28, 4, 10, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6886aa78b24332a9ade05fc0322e7eea36332b01', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7e94725bdbe69a9f5af9e187f3329d1cb022126', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ef23243ed01ae0c59e543c1b2c088f459fc1f13', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c5bc53a9be01b926088a199a2536897e567c612', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '193cbf56bf29493ff623ce064fecb7a1303a8a0b', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba272fe1cf3bb035d87d272a54b88b2f7d692208', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '937ec3fd26598a3b7208539086d67545eaad53f7', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f9fed1943f0c34e7b83fb90f235b7b1e251809', 'committer_username': 'oxinabox', 'committer_name': 'Frames White', 'committer_email': 'me@oxinabox.net', 'commit_date': datetime.datetime(2013, 7, 31, 8, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec9611dfca16f6756cfd454a477ad08decd7d19c', 'committer_username': 'oxinabox', 'committer_name': 'Frames White', 'committer_email': 'me@oxinabox.net', 'commit_date': datetime.datetime(2013, 7, 31, 8, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b04a52e21d34912b13b69e9a330368df37e392ad', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3706cfc219c714c08de8c250684914f2d4679142', 'committer_username': 'oxinabox', 'committer_name': 'Frames White', 'committer_email': 'me@oxinabox.net', 'commit_date': datetime.datetime(2013, 7, 31, 8, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87d7be3bbd410422e1e01a051d21c6e70394946b', 'committer_username': 'oxinabox', 'committer_name': 'Frames White', 'committer_email': 'me@oxinabox.net', 'commit_date': datetime.datetime(2013, 7, 31, 8, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ed4ae8c6f9266c3c6abda1554d72dcae882e6b', 'committer_username': 'oxinabox', 'committer_name': 'Frames White', 'committer_email': 'me@oxinabox.net', 'commit_date': datetime.datetime(2013, 7, 31, 8, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31d8397679c338e4fdbc378868d46dec5e802565', 'committer_username': 'milesfrain', 'committer_name': 'Miles Frain', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 12, 21, 11, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29314f69ba4e2e00f7bc15ed97898c5a0072425d', 'committer_username': 'milesfrain', 'committer_name': 'Miles Frain', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 12, 21, 11, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7512ff21bf87e06a8840e7670072e99294168a16', 'committer_username': 'milesfrain', 'committer_name': 'Miles Frain', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 12, 21, 11, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33e7a495f626bbfbe0f87bef2b45f69f9acbce0b', 'committer_username': 'milesfrain', 'committer_name': 'Miles Frain', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 12, 21, 11, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '067ccde54566bef38e8efb90896db9c3dfae0118', 'committer_username': 'milesfrain', 'committer_name': 'Miles Frain', 'committer_email': None, 'commit_date': datetime.datetime(2013, 2, 12, 21, 11, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a312016fd6ebc90601256e7e6135d155adc49b92', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dbc4a44cb2d31e3e0758b9ed62d1c68048c5f7b', 'committer_username': 'ancapdev', 'committer_name': 'Christian Rorvik', 'committer_email': None, 'commit_date': datetime.datetime(2012, 8, 21, 10, 55, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f76fbde5dc49b0adee3520238d623e07e87f633c', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '400b373d252e06fb85851f03406226d21ee8648d', 'committer_username': 'oxinabox', 'committer_name': 'Frames White', 'committer_email': 'me@oxinabox.net', 'commit_date': datetime.datetime(2013, 7, 31, 8, 12, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35e394f536bb005527dab935980bd220ce3b890d', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6734b92796bde473cdbc87cd4c7f74b83ac933e', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '828412da1dd39f50404480e423bfcb46a24cbd06', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '094cf3e0984a65e2b7e9bae0834b7170c20d1bf3', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bb477b820f911c7093765659cecec361020fcd5', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d1c685642125efc7120522b554222529e203ef5', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951da2aaeb464bccb6226efb2b3e9cc22ace7174', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62800ed2813508493cedbcb87dc1b9fc57c29f18', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7eb1d0de9cd6cd38071cac0d6202828284de686', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7f50bf2fb065b4023de9b6a3ce919eddbe29b1', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af5fe0ec2ce488bb2a3aaec677716e58f0093113', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f866feefd7d5513fcccfb570a9d9a438c16a7ec', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d6a826ba45aa5dae536673368f53e2e27a4cd04', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8faf29be286b0d824c802f8246e1e0446eb328f4', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '677c382c375bb93b47cb5266882387f11aedbb82', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a836de2eae26b74a12899b1c18a883db5a7bc9', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee70afe49dec982c6e9d4202da320af0aa097fa4', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '033a58cd6f133c06d06767380699953128be046b', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90109c4c452239c3388235946c64ffc771752e30', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f5801a08c7d31c797e1660344931a040310740a', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a322c74261e3c145cddd1a711080c35e68d126b6', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef3dbaec506e9b252b3fa9a8631ed2ec05dd2a75', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6db72e7b4cdc9899fe697e9ce40cd7aa520c1f13', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bb69d87afc207953fb0ef385c83ddf74fe84edc', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2bc9a499e53f4316111abfa5d0656ee0d81a695', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '954b55da37cdc2d1da135c58b4aeaff02b3dc5a1', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf9ab5fc5e4d61864f35ebfc1b3f3e2c5f3041a', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12582d02dbd7e5715a77debaa57fb6bbe7948b6b', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}]",Koustav Chowdhury,33925317,kc99.kol@gmail.com,User,,85,,6,28
440354574,Red Black Tree,"Part of GSoC'2020 evaluation.
This PR is for implementation of Red Black Tree in Julia. Mainly, to be used as a `tag` for sorted containers. C++ uses `rb_tree` for it's `set` and `map`.

The only thought is whether to `export` it, or not, because `src/balanced_tree.jl` isn't exported.

- [x] Implement delete!
- [x] Write tests",True,638,https://api.github.com/repos/JuliaCollections/DataStructures.jl/pulls/638,https://github.com/JuliaCollections/DataStructures.jl/pull/638,closed,595,1,7,15,10,36,0,0,[],2020-06-26 03:00:04+00:00,2020-08-22 16:09:11+00:00,4972147.0,"57 days, 13:09:07","[{'comment_id': 446673034, 'comment_body': 'this file is using tabs instead of spaces.', 'comment_created': datetime.datetime(2020, 6, 28, 16, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 449885467, 'comment_body': 'resolved in the new commit', 'comment_created': datetime.datetime(2020, 7, 5, 14, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 464968720, 'comment_body': 'I wonder how the performance differs between this being a `Union{Nothing, T}` and just being a `T` and leaving it in the `undefined` state til it is filled. `undefined` states should work fine for the things  have `T` being `RBTreeNode` since those are reference types, but i guess not for `K`.\r\nI think it would perform identically, and I think that `nothing` is much nicer to deal with than having to constantly guard against `isdefined`', 'comment_created': datetime.datetime(2020, 8, 4, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 464970288, 'comment_body': 'why is this in TitleCase ?\r\n```suggestion\r\n    nil::RBTreeNode{K}\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 11, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 464970834, 'comment_body': 'Should this struct be mutable, or should it just be changed by mutating the root node?', 'comment_created': datetime.datetime(2020, 8, 4, 11, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 464971810, 'comment_body': ""According to docs, unless handling floating point specially one only should do `==`\r\n\r\n> \r\n> ## isequal(x, y)\r\n> \r\n>   Similar to ==, except for the treatment of floating point numbers and of missing values. isequal\r\n>   treats all floating-point NaN values as equal to each other, treats -0.0 as unequal to 0.0, and\r\n>   missing as equal to missing. Always returns a Bool value.\r\n> \r\n>   Implementation\r\n>   ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\r\n> \r\n>   The default implementation of isequal calls ==, so a type that does not involve floating-point\r\n>   values generally only needs to define ==.\r\n> \r\n>   isequal is the comparison function used by hash tables (Dict). isequal(x,y) must imply that\r\n>   hash(x) == hash(y).\r\n> \r\n>   This typically means that types for which a custom == or isequal method exists must implement a\r\n>   corresponding hash method (and vice versa). Collections typically implement isequal by calling\r\n>   isequal recursively on all contents.\r\n> \r\n>   Scalar types generally do not need to implement isequal separate from ==, unless they represent\r\n>   floating-point numbers amenable to a more efficient implementation than that provided as a\r\n>   generic fallback (based on isnan, signbit, and ==).\r\n> \r\n> ## !=(x, y)\r\n>   ≠(x,y)\r\n> \r\n>   Not-equals comparison operator. Always gives the opposite answer as ==.\r\n> \r\n>   Implementation\r\n>   ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\r\n> \r\n>   New types should generally not implement this, and rely on the fallback definition !=(x,y) =\r\n>   !(x==y) instead.\r\n\r\n\r\nSo one should just implement `==` here.\r\n\r\nand one should implement `hash` if ever implementing `==` (or `isequals`).\r\nI suggest an approproate hash is to just return the hash of the `data`.\r\nThe colour won't provide enough gain i think. Worst case is if something with each color is put into the same hashtable, and then is still resolved with a single comparison."", 'comment_created': datetime.datetime(2020, 8, 4, 11, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 464975885, 'comment_body': ""`node != tree.Nil`\r\nis the same as:\r\n```\r\n(node.color === false && node.data === node.parent===node.left_child === node.right_child === nothing)\r\n```\r\nPotentially instead of storing a explict `Nil` in the tree to compare to we can just define a `is_nil` function that does that check.\r\n\r\nOr conversly, we could always make sure the node is a reference to the tree's `Nil`,\r\nand then do `!==` which would only do a pointer equality check.\r\n\r\n\r\nif we did get rid of the `Nil` element, then we could also get rid of the `Tree` type and just have the `Node` type, since the tree would be described completely by its root."", 'comment_created': datetime.datetime(2020, 8, 4, 11, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 464977735, 'comment_body': 'I am unclear as to if this comment belongs to the block following the else or the block preciding it.\r\n(Similar for eom other comments in this section)\r\nIf it is the block following then it can be clearer if put on same line.\r\nIf not then it should be indented\r\n```suggestion\r\n        else  # parent is the rightChild of grand_parent\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 11, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 464983939, 'comment_body': '`delete!` on dicts for items that are not present does not error in julia.\r\nSo maybe it should be the same for trees?\r\n\r\n```julia\r\njulia> x = Dict(1=>3)\r\nDict{Int64,Int64} with 1 entry:\r\n  1 => 3\r\n\r\njulia> delete!(x, 2)\r\nDict{Int64,Int64} with 1 entry:\r\n  1 => 3\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 11, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 464984250, 'comment_body': 'the indentation in this bit is all messed up.\r\nit is a mix of 4 spaces, 2 spaces, and tabs', 'comment_created': datetime.datetime(2020, 8, 4, 11, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 466789313, 'comment_body': ""It can be done. But let's think of it in this way. This file is mostly to be used as an underlying container for `SortedDict` right? Throwing a `KeyError` in the underlying container doesn't hurt, we can catch this and process accordingly.\r\n"", 'comment_created': datetime.datetime(2020, 8, 7, 2, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 466791984, 'comment_body': 'I think, it should be `mutable`. Althought the `nil` element is fixed, the `root` keeps on changing.', 'comment_created': datetime.datetime(2020, 8, 7, 2, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 466793594, 'comment_body': ""The implementation of Red-Black Tree becomes complicated when `T.nil` is not used, especially in cases related to `delete`. Let's keep this for the this now. If I find a good workaround, I'll put a PR later."", 'comment_created': datetime.datetime(2020, 8, 7, 2, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 466793859, 'comment_body': 'Oops. ', 'comment_created': datetime.datetime(2020, 8, 7, 3, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 466809721, 'comment_body': ""`search_key` uses the fact that `tree.nil`'s `data` field is `nothing`. So, it is done for the sake of ease of implementation,"", 'comment_created': datetime.datetime(2020, 8, 7, 4, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 467829858, 'comment_body': ""Can we do this then:\r\n\r\n> Or conversly, we could always make sure the node is a reference to the tree's Nil,\r\nand then do !== which would only do a pointer equality check."", 'comment_created': datetime.datetime(2020, 8, 10, 11, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467831733, 'comment_body': 'Consistency is important to make it easier to learn.\r\n\r\nException catching is expensive.\r\nAs you say `SortedDict` would just supress that error and return the `Dict` unmodified anyway.\r\n', 'comment_created': datetime.datetime(2020, 8, 10, 11, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467832431, 'comment_body': 'I feel like deprecations being last is a good idea?\r\n```suggestion\r\n        include(""red_black_tree.jl"")\r\n        \r\n        include(""deprecations.jl"")\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467844827, 'comment_body': '```suggestion\r\n                if (node == parent.leftChild) # node is leftChild of its parent\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467844916, 'comment_body': '```suggestion\r\n                # node is rightChild of its parent\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467845416, 'comment_body': '```suggestion\r\n                if (node == parent.rightChild) # node is rightChild of its parent\r\n```\r\n\r\nhttps://www.grammarly.com/blog/its-vs-its/', 'comment_created': datetime.datetime(2020, 8, 10, 11, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467845558, 'comment_body': '```suggestion\r\n                # node is leftChild of its parent\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467846730, 'comment_body': 'Should this overload `Base.minimum` ?\r\nOr does ""minimum value"" not mean what i think it does?', 'comment_created': datetime.datetime(2020, 8, 10, 11, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467847413, 'comment_body': 'The rest of the package fairky  consistently uses\r\n```suggestion\r\n    for i in 1:10000\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 11, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467848464, 'comment_body': 'Why are these numbers so large?\r\nSeems like it will not improve our actually test coverage and will make the tests slower and harder to read if they fail?', 'comment_created': datetime.datetime(2020, 8, 10, 11, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467848809, 'comment_body': 'Can we use `Base.haskey` instead?', 'comment_created': datetime.datetime(2020, 8, 10, 11, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467848882, 'comment_body': 'Can we use this to provide:\r\n`Base.in` and `Base.getindex`', 'comment_created': datetime.datetime(2020, 8, 10, 11, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467849199, 'comment_body': 'Can we use this to provide `Base.push!(tree, value}` where `value` is some time type we can convert to `K`', 'comment_created': datetime.datetime(2020, 8, 10, 11, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 467850329, 'comment_body': 'We should break each section into its own sub-testset.', 'comment_created': datetime.datetime(2020, 8, 10, 11, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 474136291, 'comment_body': ""I think, it shouldn't overload `Base.minimum`. Minimum value in a subtree of a node isn't that obvious, so a separate method should be better."", 'comment_created': datetime.datetime(2020, 8, 20, 16, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 475080850, 'comment_body': 'I still think we should do this', 'comment_created': datetime.datetime(2020, 8, 22, 11, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475081102, 'comment_body': ""Isn't this exactly the same as:\r\n```suggestion\r\n        rb.root = rb.nil\r\n```\r\n\r\nit looks to me like it is wrapping it in a `Ref` then immidately unwrapping it?"", 'comment_created': datetime.datetime(2020, 8, 22, 11, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475081271, 'comment_body': ""We don't overrload `==` anymore.\r\nSo this is reference equality we are depending on right?\r\nSo we can do:\r\n```suggestion\r\n    (z === tree.nil) && return tree\r\n```\r\nto be more explict?"", 'comment_created': datetime.datetime(2020, 8, 22, 11, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475081284, 'comment_body': '```suggestion\r\n        if (node !== tree.nil)\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 11, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475081305, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 11, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475103400, 'comment_body': '```suggestion\r\njulia> tree[4]\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 15, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}]","[{'commit_sha': '917c18deeda673eec7e17302229f1b57b5d6e0ef', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e42108cc13ac31c9ad99a42016359cf5ea4e2db', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b4f0841053ef8dfb9a68efd17b8186cf3d51adb', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d4be6885461845296153247f78fed8c2da1ccf3', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91de35667fa0e0e73d43069d9c94d51938903458', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f175f679a64966c80d92225ecd7ff46b0658f7', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1f7df71db5bf367be68ea2d696192308af8763b', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0af2ef48778c8f4928c62d101b98489c27891a6', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdc22134ec63e4f1999c577c618c5a4210a855da', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe1ebd9089aa2f5fe464f086c246bf37b89f054e', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aedbb0b3d111d599d7b54def9dbf2d4db8987885', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8a4bfc08059a8b8dca839f3f97038c458add044', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b14134fd46cca29676a004602ec072f522db23d1', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97c00d4528e3902c5067da0d7ca07bf72fc96ca0', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80b4b113a14da46094a52aefb9d48e5b0217037d', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}]",Koustav Chowdhury,33925317,kc99.kol@gmail.com,User,,85,,6,28
444883887,AVL Tree,"Part of GSoC'20 evaluation
This PR implements AVL Tree. ",True,640,https://api.github.com/repos/JuliaCollections/DataStructures.jl/pulls/640,https://github.com/JuliaCollections/DataStructures.jl/pull/640,closed,460,3,8,21,1,16,0,0,[],2020-07-06 16:35:29+00:00,2020-08-29 08:41:35+00:00,4637166.0,"53 days, 16:06:06","[{'comment_id': 475566885, 'comment_body': 'Is Int8 big enough?\r\nthat means max height is 128.\r\nIs it so self-balanced that that means 2^128ish items (which is more than enough)?\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 12, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475567664, 'comment_body': ""What does this do?\r\nIt doesn't fix the hight since it doesn't mutate.\r\n\r\nPerhaps it should be called:\r\n`compute_hight` and have a comment that it computes the hight rather than using the variable?\r\n\r\nor make it should be called:\r\n`recompute_height!(node)` and it should update the hight in place?\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 24, 12, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475570128, 'comment_body': 'consider rather than calling this `temp`\r\na more explictit name like `result`, `return_value` or similar.\r\n', 'comment_created': datetime.datetime(2020, 8, 24, 12, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475570469, 'comment_body': 'Should this have a `!`?', 'comment_created': datetime.datetime(2020, 8, 24, 12, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475571373, 'comment_body': 'Do we need this docstring?\r\nOr is the docstring that is attached to the fully generic `Base.getindex` clear enough?\r\n\r\nThis one in parocular is too generically typed I think and will cause problems like:\r\nhttps://github.com/JuliaCollections/DataStructures.jl/issues/663', 'comment_created': datetime.datetime(2020, 8, 24, 12, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475572330, 'comment_body': ""Can this ever happen?\r\nI don't think it can since we did a check"", 'comment_created': datetime.datetime(2020, 8, 24, 12, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 475572543, 'comment_body': 'Should we use  a `BoundsError` here?', 'comment_created': datetime.datetime(2020, 8, 24, 12, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 476120353, 'comment_body': 'Well, it is the smallest `Integer` type right ?', 'comment_created': datetime.datetime(2020, 8, 25, 3, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 476206610, 'comment_body': ""Yes. It can. `node` might not be `nothing`, but it's `leftChild` and `rightChild` can be."", 'comment_created': datetime.datetime(2020, 8, 25, 6, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 476206776, 'comment_body': 'Removed !!', 'comment_created': datetime.datetime(2020, 8, 25, 6, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 476390206, 'comment_body': 'this will cause a out of bounds error a few lines later right?\r\nShould we just throw on directly here?', 'comment_created': datetime.datetime(2020, 8, 25, 11, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 476401550, 'comment_body': 'Ya, we could. Even I was thinking about that. \r\nOnce `traverse_tree_inorder` is called, we can be sure that, there is a valid index. So, it will come from the `leftChild`, or the `rightChild`. \r\nLet `idx` be the index we are interested in. \r\n`L` = size of the `left` array\r\n`R` = size of the `right` array.\r\n```julia\r\nif idx <= L\r\n    return left[idx]\r\nelse\r\n    return right[idx-L]\r\nend\r\n```  \r\nThis mitigates the need to merge the two arrays `left` and `right`, which is causing extra-memory to be allocated. ', 'comment_created': datetime.datetime(2020, 8, 25, 12, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 476690135, 'comment_body': 'right.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 476692106, 'comment_body': 'The name `rank` is also used by `LinearAlgebra`.\r\nAre these the same concept? Should we overload `LInearAlgebra.rank`?', 'comment_created': datetime.datetime(2020, 8, 25, 19, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 476965745, 'comment_body': '`rank` in Linear Algebra, means something fundamentally from what is present here.\r\nIn linear algebra,`rank` means the maximum number of linearly independent vectors in the vector space generated by the columns/rows.\r\nHere, it corresponds to the order/position in which the keys appear in the sorted sequence.\r\nFor example, \r\nif the tree consists of ` keys = [2, 5, 7, 10]`, \r\n```\r\nrank(2) = 1\r\nrank(5) = 2\r\nrank(7) = 3\r\nrank(10) = 4\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 1, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'eulerkochy', 'type': 'User'}, {'comment_id': 477490277, 'comment_body': 'ok, fair enough.\r\nI wonder if we can name it something different to avoid a name conflict with LinearAlgebra.\r\nLike `sort_rank` or soething', 'comment_created': datetime.datetime(2020, 8, 26, 18, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}]","[{'commit_sha': '91b138be41cefd9ff2c4695e91b93028dde17c93', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27051fdeeb5fa637814092f86730903d1c7cc479', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ad3425c6fc9c203fad617220756de9ac639947b', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ea8308bc5e552fb5f75ce951132f3a802f05fe2', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dfe465ea5331871643cfb3dc5b0773d234c07c7', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa695b33d85ef45e8cb4df988dc205c592c73ba1', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01fdb77ae16eadd9a1ad89b8221dedb5995bd1b4', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4da8040634d6e5e268820bb3df0d36e4db539093', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0444f49d92340b30493bb71c05f46df14502d432', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '845a5fc9091b87d37abd41e34a5d69b6ba4c3b75', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd076e5b0fe04bd55025a126128ee3595fe3d857c', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc453682985333b8f490624f7e13bc3f5771f233', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efd6bf8f8b1ea145cb69d323c63896ca19ec9295', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89cbbf408d067744a7ed0f6df08c5f1d4ad4395', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8cc05ac30a51b599b4123f1ee9ab82d2e3379fd', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d440320c86cd82b58ce25e6bd1666d56d24db7', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95887d4d6a595187e51c383f156c994b67ea352', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62bfb1f41dca663ebb2c6ebfdbd6bca2c374335c', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5785868003ca23d6969770a389e2b96699ae1ac4', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50eeaed713f65cd79c35831da95768195047df64', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541cd12977a4c6afc6322abc2a8a02b1e10a7a6a', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}]",Koustav Chowdhury,33925317,kc99.kol@gmail.com,User,,85,,6,28
455191195,SplayTree,"Part of GSoC'20 implementation.

SplayTree has no additional memory footprint as compared to Red-Black Tree or AVL Tree. It offers `O(log n)` amortized time complexity for the operations `search`, `insert` and `delete` 

TO-DO

- [x] writes tests",True,645,https://api.github.com/repos/JuliaCollections/DataStructures.jl/pulls/645,https://github.com/JuliaCollections/DataStructures.jl/pull/645,closed,406,3,8,22,0,7,0,0,[],2020-07-22 15:26:36+00:00,2020-08-31 17:59:07+00:00,3465151.0,"40 days, 2:32:31","[{'comment_id': 479777593, 'comment_body': 'If we are going to have this then it should be `const`, but I am not sure it is worth having evien its less clear than writing out the union in full and about the same length?\r\n```suggestion\r\nconst SplayTreeNode_or_null{K} = Union{SplayTreeNode{K}, Nothing}\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 479777816, 'comment_body': 'Seems like the comment justg repeats the next line\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 14, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 479777940, 'comment_body': 'why are we mising `isa(x, Nothing)` and `x == nothing` ?\r\n\r\nI think best would be to use `x === nothing` (and `x !== nothing`), though that is probably exactly as performant as `isa`. Both can be constant folder out a lot of the time', 'comment_created': datetime.datetime(2020, 8, 30, 14, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 479778361, 'comment_body': 'can we have a commant as to what this does? and/or a clearer name?\r\nTHe name `_join` tells me nothing.\r\nAlso it seems like it at least sometimes mutates things.\r\nSo should have a `!` on the end\r\n\r\n\r\nShould we use this to provide `merge(::SplayTree, ::SplayTree)` ?', 'comment_created': datetime.datetime(2020, 8, 30, 14, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 479778533, 'comment_body': 'We coild remove these `if isa` and replace them with defining methods for each.\r\nIt may or may not be cleaner.\r\nuse your judgement.', 'comment_created': datetime.datetime(2020, 8, 30, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 479781153, 'comment_body': 'We probably should not have 2 argument `insert!`,  just `push!`.\r\nBase only provides a 3 argument `insert` for things with seperate indexes and values.\r\nBase provides it for `Vector` but not for `Set`', 'comment_created': datetime.datetime(2020, 8, 30, 15, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}, {'comment_id': 479781496, 'comment_body': 'Possibly we need to deprecate it out of other trees also.\r\nI should have spotted this before', 'comment_created': datetime.datetime(2020, 8, 30, 15, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oxinabox', 'type': 'User'}]","[{'commit_sha': '9ef25be0dc47aef81388c865da0a423204ea7d12', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec4abd42dcf7d58367d88f63f59b7390138d8965', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0706f136b17daf0d4e70ca3b938ce436467e4503', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '684b41fc041d186506c23982b51cae075a26397e', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8295c4a5664adbe244a7c6c161af56c474c00cb5', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83398f2d577ed89ae3ce4b081ea8c9f9739c1e1e', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8bf96a8f4c1d3a919093f3a2b3ae87f2deaab4f', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc95780a5a9f889c4ef2b2674db78dc055634f95', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aaa041e5a07dbc54b828f5d363939457bd5039a', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fefb22f54e9e904a84c956948de32b395e76baef', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2002b624d9e3945e961e6b60eec63922f710eba', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6871b993efa70d4b5c4ba98ef4afeb3d0d5b004', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fcce0100eaa0421b95bd3b650e46cdac0a57bc8', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fdf15a0b7e70e1feb28105ef962d4ebb10c912a', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a60d4dc25b60225313d76bcdc9365b0912539579', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e85d379911ebf11efda27e632bee77eb1bdf188e', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf7e3da140ee8d95c720caab15e5580df6eb003c', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f72f500488317f64d72ff827b5b65a9332b70bc', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7091915d4c537128f39041b4a23563a45e0a8166', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d6924b7c80211024436f09b32383a75f473a8a', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd624e71adb16fe94874891f67901aa21e777e4', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed3847e33ea4ac1d5800c0ee9fcb9d0a768b7f1', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}]",Koustav Chowdhury,33925317,kc99.kol@gmail.com,User,,85,,6,28
467136168,[WIP] BTree,"Specifically, among other things, the following things are remaining. 

- [ ] complete cases related to delete
- [ ] write tests
- [ ] add docstrings",False,651,https://api.github.com/repos/JuliaCollections/DataStructures.jl/pulls/651,https://github.com/JuliaCollections/DataStructures.jl/pull/651,open,128,0,1,3,0,0,0,0,[],2020-08-13 04:18:20+00:00,,0.0,,[],"[{'commit_sha': 'cab00a4dc443c0a4d88e51615f5a2024920a4530', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5664910ec01f443ce99651f098768e3ee881e5e', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e0e59cac977f2aec2900284a15de2bee40cae98', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}]",Koustav Chowdhury,33925317,kc99.kol@gmail.com,User,,85,,6,28
468023231,Remove import statement from robin_dict.jl,"This PR removes `import` statements in the file `src/robin_dict.jl` and moves them to the file `src/DataStructures.jl`, as per the convention followed in this codebase.",True,653,https://api.github.com/repos/JuliaCollections/DataStructures.jl/pulls/653,https://github.com/JuliaCollections/DataStructures.jl/pull/653,closed,42,35,3,1,0,0,0,0,[],2020-08-14 14:42:41+00:00,2020-08-18 17:33:36+00:00,355855.0,"4 days, 2:50:55",[],"[{'commit_sha': 'c6d57cf3b98f9c59d9ccd5d274ac4d0556983637', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}]",Koustav Chowdhury,33925317,kc99.kol@gmail.com,User,,85,,6,28
299531033,comprehensive benchmark suite for AbstractDict,"The objective of this PR is to write a strong and comprehensive (almost) benchmark suite for `AbstractDict`.
I'll add a commit for benchmarking `delete!` operation, having a fixed number of `evals` and estimating it's performance.",True,517,https://api.github.com/repos/JuliaCollections/DataStructures.jl/pulls/517,https://github.com/JuliaCollections/DataStructures.jl/pull/517,closed,46,226,1,3,3,0,0,0,[],2019-07-20 02:45:30+00:00,2020-08-22 14:51:41+00:00,34517171.0,"399 days, 12:06:11",[],"[{'commit_sha': '476af9fef0986fc586b382d3fa517052d9132dd2', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c139ca653e85c90b5d56d9464f6dbdfea34c3cd5', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbff11a562636f4abc9be894a06f80c266cf703', 'committer_username': 'eulerkochy', 'committer_name': 'Koustav Chowdhury', 'committer_email': 'kc99.kol@gmail.com', 'commit_date': datetime.datetime(2017, 11, 23, 8, 45, 32, tzinfo=datetime.timezone.utc)}]",Koustav Chowdhury,33925317,kc99.kol@gmail.com,User,,85,,6,28

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
8756512,DataStructures.jl,JuliaCollections/DataStructures.jl,Julia,243,685,29,182,1414,175,54,57,"[{'id': 1667293467, 'number': 890, 'closed': None, 'created': datetime.datetime(2024, 1, 6, 12, 18, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 87, 'deletions': 121, 'state': 'open'}, {'id': 1665652646, 'number': 889, 'closed': datetime.datetime(2024, 1, 5, 5, 41, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 5, 5, 20, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1237.0, 'time_delta': '0:20:37', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1660675179, 'number': 888, 'closed': datetime.datetime(2024, 1, 5, 3, 10, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 31, 15, 21, 14, tzinfo=datetime.timezone.utc), 'time_taken': 388176.0, 'time_delta': '4 days, 11:49:36', 'additions': 17, 'deletions': 0, 'state': 'closed'}, {'id': 472522481, 'number': 664, 'closed': datetime.datetime(2020, 8, 24, 14, 28, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 13, 30, 8, tzinfo=datetime.timezone.utc), 'time_taken': 3496.0, 'time_delta': '0:58:16', 'additions': 1, 'deletions': 11, 'state': 'closed'}, {'id': 472076057, 'number': 662, 'closed': datetime.datetime(2020, 8, 23, 11, 6, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 5, 13, 10, tzinfo=datetime.timezone.utc), 'time_taken': 21191.0, 'time_delta': '5:53:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 472073470, 'number': 661, 'closed': datetime.datetime(2020, 8, 23, 11, 9, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 4, 45, 53, tzinfo=datetime.timezone.utc), 'time_taken': 23027.0, 'time_delta': '6:23:47', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 470226512, 'number': 658, 'closed': datetime.datetime(2020, 8, 23, 14, 23, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 15, 4, 10, tzinfo=datetime.timezone.utc), 'time_taken': 343185.0, 'time_delta': '3 days, 23:19:45', 'additions': 896, 'deletions': 7, 'state': 'closed'}, {'id': 468023231, 'number': 653, 'closed': datetime.datetime(2020, 8, 18, 17, 33, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 14, 42, 41, tzinfo=datetime.timezone.utc), 'time_taken': 355855.0, 'time_delta': '4 days, 2:50:55', 'additions': 42, 'deletions': 35, 'state': 'closed'}, {'id': 467136168, 'number': 651, 'closed': None, 'created': datetime.datetime(2020, 8, 13, 4, 18, 20, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 128, 'deletions': 0, 'state': 'open'}, {'id': 455191195, 'number': 645, 'closed': datetime.datetime(2020, 8, 31, 17, 59, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 15, 26, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3465151.0, 'time_delta': '40 days, 2:32:31', 'additions': 406, 'deletions': 3, 'state': 'closed'}, {'id': 444883887, 'number': 640, 'closed': datetime.datetime(2020, 8, 29, 8, 41, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 16, 35, 29, tzinfo=datetime.timezone.utc), 'time_taken': 4637166.0, 'time_delta': '53 days, 16:06:06', 'additions': 460, 'deletions': 3, 'state': 'closed'}, {'id': 440354574, 'number': 638, 'closed': datetime.datetime(2020, 8, 22, 16, 9, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 3, 0, 4, tzinfo=datetime.timezone.utc), 'time_taken': 4972147.0, 'time_delta': '57 days, 13:09:07', 'additions': 595, 'deletions': 1, 'state': 'closed'}, {'id': 434178240, 'number': 634, 'closed': datetime.datetime(2020, 8, 30, 17, 5, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 17, 47, 10, tzinfo=datetime.timezone.utc), 'time_taken': 6650310.0, 'time_delta': '76 days, 23:18:30', 'additions': 1050, 'deletions': 1, 'state': 'closed'}, {'id': 422421859, 'number': 629, 'closed': datetime.datetime(2020, 6, 14, 21, 19, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 14, 33, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1838753.0, 'time_delta': '21 days, 6:45:53', 'additions': 12, 'deletions': 13, 'state': 'closed'}, {'id': 422361306, 'number': 627, 'closed': datetime.datetime(2020, 6, 8, 13, 3, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 24, 4, 28, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1326914.0, 'time_delta': '15 days, 8:35:14', 'additions': 42, 'deletions': 1, 'state': 'closed'}, {'id': 421257185, 'number': 625, 'closed': None, 'created': datetime.datetime(2020, 5, 21, 9, 46, 46, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 74, 'deletions': 111, 'state': 'open'}, {'id': 417883118, 'number': 623, 'closed': datetime.datetime(2020, 5, 14, 12, 17, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 9, 52, 27, tzinfo=datetime.timezone.utc), 'time_taken': 8686.0, 'time_delta': '2:24:46', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 387555923, 'number': 595, 'closed': None, 'created': datetime.datetime(2020, 3, 13, 2, 14, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 11, 'deletions': 2, 'state': 'open'}, {'id': 385125230, 'number': 590, 'closed': datetime.datetime(2020, 3, 30, 15, 24, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 7, 9, 25, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2008784.0, 'time_delta': '23 days, 5:59:44', 'additions': 133, 'deletions': 159, 'state': 'closed'}, {'id': 385109638, 'number': 589, 'closed': None, 'created': datetime.datetime(2020, 3, 7, 6, 7, 21, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 180, 'deletions': 46, 'state': 'open'}, {'id': 384665317, 'number': 585, 'closed': datetime.datetime(2020, 3, 7, 6, 9, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 7, 1, 7, tzinfo=datetime.timezone.utc), 'time_taken': 83281.0, 'time_delta': '23:08:01', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 299531033, 'number': 517, 'closed': datetime.datetime(2020, 8, 22, 14, 51, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 7, 20, 2, 45, 30, tzinfo=datetime.timezone.utc), 'time_taken': 34517171.0, 'time_delta': '399 days, 12:06:11', 'additions': 46, 'deletions': 226, 'state': 'closed'}, {'id': 278582335, 'number': 501, 'closed': datetime.datetime(2019, 7, 5, 13, 34, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 5, 14, 8, 52, 29, tzinfo=datetime.timezone.utc), 'time_taken': 4509710.0, 'time_delta': '52 days, 4:41:50', 'additions': 1307, 'deletions': 2, 'state': 'closed'}, {'id': 270732722, 'number': 497, 'closed': datetime.datetime(2020, 3, 7, 6, 47, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 4, 16, 2, 30, 25, tzinfo=datetime.timezone.utc), 'time_taken': 28181837.0, 'time_delta': '326 days, 4:17:17', 'additions': 181, 'deletions': 2, 'state': 'closed'}, {'id': 268207987, 'number': 492, 'closed': datetime.datetime(2019, 4, 9, 20, 16, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 4, 8, 7, 5, 49, tzinfo=datetime.timezone.utc), 'time_taken': 133831.0, 'time_delta': '1 day, 13:10:31', 'additions': 33, 'deletions': 6, 'state': 'closed'}, {'id': 259492799, 'number': 485, 'closed': datetime.datetime(2019, 4, 8, 5, 58, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 3, 8, 14, 28, 28, tzinfo=datetime.timezone.utc), 'time_taken': 2647811.0, 'time_delta': '30 days, 15:30:11', 'additions': 139, 'deletions': 2, 'state': 'closed'}]"
