pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
958876982,[feature] Implement Iperf3 check #385,"- Added initial code for **Iperf3 check class.**
- Added **tests** for check class.
- Added **device connection** logic.
- Added **charts & metric (TCP & UDP mode)**.

## `Steps to test`
1. Make sure your client **(openwrt-device)** and server both have [Iperf3](https://iperf.fr/iperf-download.php), [Openwrt Iperf3 package](https://openwrt.org/packages/pkgdata/iperf3)  installed.
2.  Do check **the credential section of the device** _(It must be enabled and working with the right update strategy, i.e., **ssh**)_.

![173354971-728cb1b4-4bf1-4d89-9c22-ce9b9b1e2bef](https://user-images.githubusercontent.com/56113566/173355074-3918d860-a4ad-4f84-bfa4-2c23a7e8d94e.png)

3.  In `tests/openwisp2/settings.py` configure:
```py
OPENWISP_MONITORING_IPERF3_SERVERS = {
    # Running on my local
    # Some Public Iperf3 Servers : https://iperf.fr/iperf-servers.php#public-servers
    # 'be63c4e5-a68a-4650-bfe8-733837edb8be': ['iperf.biznetnetworks.com'],
    'a9734710-db30-46b0-a2fc-01f01046fe4f': ['speedtest.uztelecom.uz'],
    # '<org-pk>': ['<ORG_IPERF3_SERVER>']
}

```
 **NOTE :** The host can be specified by **hostname, IPv4 literal, or IPv6 literal**
```
# for ex
              iperf3 -c iperf.biznetnetworks.com

              iperf3 -c 192.168.5.109

              iperf3 -c 2001:db8::1
```
4. Run `python3 manage.py run_checks` _(To run all checks manually)_.


![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `Demo`

https://user-images.githubusercontent.com/56113566/173353857-56b344f4-89d2-47d9-884a-32a472168f66.mp4

![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `TCP Charts`

![Screenshot from 2022-06-24 18-27-43](https://user-images.githubusercontent.com/56113566/175540716-145b7736-f8c1-4293-bfa1-9234a3ffb95a.png)

![Screenshot from 2022-06-24 11-51-01](https://user-images.githubusercontent.com/56113566/175475141-4f401c73-5198-490d-b6a1-a3932182051f.png)


## `UDP Charts`

![Screenshot from 2022-06-29 20-31-49](https://user-images.githubusercontent.com/56113566/176470082-4d94a537-9032-4f2a-b7e0-3f607ee67c5b.png)

![Screenshot from 2022-06-22 13-26-21](https://user-images.githubusercontent.com/56113566/174975685-6a101362-0132-4d88-a16f-486507f61280.png)

![Screenshot from 2022-06-22 13-26-25](https://user-images.githubusercontent.com/56113566/174975707-96a7b909-c709-4b6b-8982-33fa0e8a555d.png)

Closes #385
",True,394,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/394,https://github.com/openwisp/openwisp-monitoring/pull/394,closed,2633,43,20,64,20,163,1,1,[{'name': 'enhancement'}],2022-06-06 09:25:46+00:00,2022-08-09 12:39:49+00:00,5541243.0,"64 days, 3:14:03","[{'comment_id': 902362779, 'comment_body': ""It is a good thing that you have mentioned this and I guess this is only done for testing phase. But, this should go in project's settings.py (`tests/openwisp2/settings.py`). \r\nThis is application code that will be re-used by other people, we don't want to hard-code anything here. \r\n\r\nThis is a reminder to ourselves that we should move this to project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902395191, 'comment_body': ""I don't think we need to do conversion here. We should save raw values in `bits/second` in the database. We will do appropriate conversion when showing the data to the users. \r\nWe can leverage the work that would be done for https://github.com/openwisp/openwisp-monitoring/issues/87 \r\n\r\nI think it was already planned this way, @nemesisdesign can you please confirm? "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404374, 'comment_body': 'I would refactor this method like following \r\n\r\n```suggestion\r\n    def _get_device_connection(self, device):\r\n        """"""\r\n        Returns an active SSH DeviceConnection for a device.\r\n        """"""\r\n        openwrt_ssh = UPDATE_STRATEGIES[0][0]\r\n        device_connection = DeviceConnection.objects.filter(\r\n            device_id=device.id,\r\n            update_strategy=openwrt_ssh,\r\n            enabled=True,\r\n            is_working=True,\r\n        ).first()\r\n        return device_connection\r\n```\r\n\r\nAnd the update the logic that checks for `False` to check for `None`. ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404695, 'comment_body': 'This would break if a device has multiple `DeviceConnection` (which it can have by design, this broke on my local environment).', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902405061, 'comment_body': 'Why are we checking `device.monitoring.status`? ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902434921, 'comment_body': '@Aryamanz29 can you open an issue to make this command configurable? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902437683, 'comment_body': ""**Nitpick:** Let's always write the code to return early. E.g.\r\n\r\n```python\r\nif not device_connection:\r\n    logger.warn('')\r\n    return \r\n# rest of the logic\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 10, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902439981, 'comment_body': ""Let's only put the code that can raise exception in try-except block. I think only these lines can raise `ObjectDoesNotExist` exception here. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902442292, 'comment_body': 'What should trigger this alert? Is it going to be something like `if bandwidth falls below X Mbps, then send alert`. ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902444264, 'comment_body': '@Aryamanz29 can you share why this is needed? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902446835, 'comment_body': ""If any test will fail when `OPENWISP_MONITORING_AUTO_IPERF` is set to `False`, mock that setting in the TestCase. We find that many tests fail in ansible-openwisp2 and docker-openwisp because they rely on the project environment. Since, we ship tests with the application, we should ensure that they do their job without relying on the project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902484236, 'comment_body': ""Yes, I'm thinking of same we can leverage `traffic charts` adaptive size (https://github.com/openwisp/openwisp-monitoring/issues/87) in `Iperf` charts as well."", 'comment_created': datetime.datetime(2022, 6, 21, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902487431, 'comment_body': 'Sure üëç opened : https://github.com/openwisp/openwisp-monitoring/issues/398', 'comment_created': datetime.datetime(2022, 6, 21, 11, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490038, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490075, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902497466, 'comment_body': 'We can do that as well, but according to **possible outcomes** of the project \'\'If an Iperf server is down/busy we should trigger an alert"" (We need to investigate more about this)', 'comment_created': datetime.datetime(2022, 6, 21, 11, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902499363, 'comment_body': 'It is related to : https://github.com/openwisp/openwisp-monitoring/pull/309#issuecomment-1132017719', 'comment_created': datetime.datetime(2022, 6, 21, 11, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902506988, 'comment_body': ""While running tests, I'm getting `TimeoutException` due to extra check, Now it's working fine, I'll remove that line :+1: \r\n```py\r\ndef test_restoring_deleted_device(self):\r\n...\r\n...       \r\n      except TimeoutException:\r\n            self.fail('Failed saving device')\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902600321, 'comment_body': ""> Thanks for the suggestion, I've already changed this in my local env, Will push soon :)\r\n\r\nAcc to https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374, `_get_device_connection` method now only return either `device_connection` object or `None` so I think we can now safely remove `try-except` block from the code."", 'comment_created': datetime.datetime(2022, 6, 21, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902607625, 'comment_body': ""You're right, we should do with .`filter` as you've mention above https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374"", 'comment_created': datetime.datetime(2022, 6, 21, 13, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902987581, 'comment_body': 'Update : I have moved server settings in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/fe920713890500538d8963c338bae610146166fd', 'comment_created': datetime.datetime(2022, 6, 21, 19, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902996678, 'comment_body': 'I did this condition check to solve https://github.com/openwisp/openwisp-monitoring/issues/399, later found it is due to something else so removed in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/b60c7b8408ec23f43a6769a7e71f11006f2c5f21', 'comment_created': datetime.datetime(2022, 6, 21, 19, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905764504, 'comment_body': 'I would log a more descriptive warning here. \r\n```suggestion\r\n            logger.warning(f\'Failed to get a working DeviceConnection for ""{device}"", iperf check skipped!\')\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 6, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905766348, 'comment_body': ""`AbstractDeviceConnection.connect` returns the working connection \r\nhttps://github.com/openwisp/openwisp-controller/blob/2504eaaaf972c9f9ff9d51a661735d6f1a9d0080/openwisp_controller/connection/base/models.py#L319-L331\r\n\r\nYou can refactor this as following: \r\n```suggestion\r\n        # The DeviceConnection could fail if the management tunnel is down.\r\n        if not device_connection.connect():\r\n            logger.warning(f'{device}: SSH connection is not working, Iperf skipped!')\r\n            return\r\n```\r\n\r\nI think openwisp-controller already takes cares of authentication errors. Can you double check this and confirm?"", 'comment_created': datetime.datetime(2022, 6, 24, 6, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905776864, 'comment_body': ""If we have a non-zero exit code, shouldn't we log an error here? E.g. what if the iperf client was not installed on the device. "", 'comment_created': datetime.datetime(2022, 6, 24, 7, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905785454, 'comment_body': 'Right now, you are writing `1`s and `0`s to the influxdb database depending whether the iperf check was successful or not. What if the TCP check passes but the UDP encountered an error? ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807556, 'comment_body': 'This implementation seems wrongs to me. You are ignoring the results from UDP tests. This is what I receive from the iperf command \r\n\r\n**TCP**\r\n```\r\n""sum_sent"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.000194,\r\n    ""seconds"":\t10.000194,\r\n    ""bytes"":\t63045632,\r\n    ""bits_per_second"":\t50435527.150773272,\r\n    ""retransmits"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n""sum_received"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.00187,\r\n    ""seconds"":\t10.00187,\r\n    ""bytes"":\t63044880,\r\n    ""bits_per_second"":\t50426474.249315374,\r\n    ""sender"":\ttrue\r\n},\r\n\r\n```\r\n\r\n**UDP**\r\n```\r\n""sum"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.002139,\r\n    ""seconds"":\t10.002139,\r\n    ""bytes"":\t49848848,\r\n    ""bits_per_second"":\t39878340.650697961,\r\n    ""jitter_ms"":\t0.092103039542695428,\r\n    ""lost_packets"":\t0,\r\n    ""packets"":\t34426,\r\n    ""lost_percent"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n```\r\n\r\nWas there a discussion that I am forgetting about ignoring ignoring bits/second for UDP test? Since, we are doing both tests, we should store value for both of them. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807829, 'comment_body': '@nemesisdesign this requires your input. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905813758, 'comment_body': ""Why do we need to take `MEAN` here? Shouldn't this be similar to the `traffic` query? \r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/8823581c01ff8f62a9dec9d80f2ba21eb4d3bc0e/openwisp_monitoring/db/backends/influxdb/queries.py#L39-L47"", 'comment_created': datetime.datetime(2022, 6, 24, 7, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905814495, 'comment_body': 'Okay! üëçüèº ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905820989, 'comment_body': 'packet and packet loss in themselves are not useful metrics. I think `lost_percent` would be more useful to the users. \r\n\r\nWhat do you think @nemesisdesign @okraits ? ', 'comment_created': datetime.datetime(2022, 6, 24, 8, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905827459, 'comment_body': 'We can try to log the error from the output: \r\n\r\n```\r\n{\r\n        ""start"":        {\r\n                ""connected"":    [],\r\n                ""version"":      ""iperf 3.10.1"",\r\n                ""system_info"":  ""Linux openwrt-router 5.4.188 #0 Sat Apr 16 12:59:34 2022 mips""\r\n        },\r\n        ""intervals"":    [],\r\n        ""end"":  {\r\n        },\r\n        ""error"":        ""error - unable to connect to server: Connection refused""\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 8, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905974797, 'comment_body': 'I will check :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905975261, 'comment_body': 'Yes, it would be better to log an error here :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905976168, 'comment_body': ""I'm also thinking on this, I will do some research and try to implement different logic :+1: "", 'comment_created': datetime.datetime(2022, 6, 24, 11, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905978785, 'comment_body': 'Initially I have also this in my mind to store the result of UDP test that includes `(""bytes"", ""bits_per_second"")` but we already calculated this in TCP test. Do we need to store these fields in UDP test as well?\r\n', 'comment_created': datetime.datetime(2022, 6, 24, 11, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905979770, 'comment_body': 'Same question.', 'comment_created': datetime.datetime(2022, 6, 24, 11, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906019240, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 12, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906058371, 'comment_body': 'Opened : https://github.com/openwisp/openwisp-monitoring/issues/405', 'comment_created': datetime.datetime(2022, 6, 24, 13, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906862863, 'comment_body': ""> I'm also thinking on this, I will do some research and try to implement different logic +1\r\n\r\nCan we do something like if any (tcp, udp) of iperf get passed, we can store `iperf_result` field to 1 otherwise 0. For eg: \r\n\r\n```bash\r\n# If both test passed\r\n'values': {'iperf_result': 1, 'sent_bps': 1.49, 'received_bps': 1.49, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.01, 'packets': 898, 'lost_packets': 0, 'lost_percent': 0.0},\r\n# TCP passed UDP failed (previously all values was set to '0' including 'iperf_result'), Now :\r\n'values': {'iperf_result': 1, 'sent_bps': 1.5, 'received_bps': 1.5, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n# Both fails\r\n'values': {'iperf_result': 0, 'sent_bps': 0.0, 'received_bps': 0.0, 'sent_bytes': 0.0, 'received_bytes': 0.0, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n``` \r\n**Update :** Added this in [e178c10](https://github.com/openwisp/openwisp-monitoring/pull/394/commits/e178c1062aabced0ed3fbeca08d725ea9ce18bc3)"", 'comment_created': datetime.datetime(2022, 6, 26, 19, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 907723915, 'comment_body': 'TCP consumes more bandwidth for acks so the throughput can end up being smaller.\r\nIt could be useful to have both values.', 'comment_created': datetime.datetime(2022, 6, 27, 19, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 907737238, 'comment_body': ""let's keep lost_packets but calculate also the percentage of lost packets and show it that way to users, it should be better"", 'comment_created': datetime.datetime(2022, 6, 27, 19, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 911230925, 'comment_body': '```suggestion\r\nWhether `Iperf <#iperf-1>`_ checks are created automatically for devices. The devices must have ``SSH`` `access credential <link to access credentials in controller module>`_  & \r\n`iperf3 openwrt package <https://openwrt.org/packages/pkgdata/iperf3>`_ must be installed on the devices in order for this check to work.\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911233971, 'comment_body': ""@Aryamanz29 don't make these tables too wide. As you can observe here it is difficult to read. Please break the content into multiple lines. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911234828, 'comment_body': 'Especially here, I would break it into two more more lines, one for `int` and other for `float`. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911237693, 'comment_body': '**Nitpick**: Why to use a helper function here?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911238413, 'comment_body': ""Didn't we decide to not do this conversion here? Please correct me if I am wrong. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911239618, 'comment_body': 'Why not in Gbps?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911241075, 'comment_body': 'Is this a reminder? We should flip  it back to False, and set this value in settings.py', 'comment_created': datetime.datetime(2022, 6, 30, 16, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911243851, 'comment_body': 'This device should automatically get an iperf check according to the settings. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911245912, 'comment_body': 'I would refactor this test in following ways to make it more readable:\r\n\r\n1. change the subTest string to `Test device connection not working`\r\n2. set `dc.is_working` to `False` inside the subTest', 'comment_created': datetime.datetime(2022, 6, 30, 16, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911247389, 'comment_body': '```suggestion\r\n                f\'DeviceConnection for ""{device}"" is not working, iperf check skipped!\'\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911259766, 'comment_body': 'https://github.com/openwisp/openwisp-monitoring/blob/issue-385/iperf-check/openwisp_monitoring/check/classes/iperf.py#L109-L112', 'comment_created': datetime.datetime(2022, 6, 30, 17, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911263287, 'comment_body': ""It always comes out very small value when I changed to `Gbps`. We'll remove these manual conversions once https://github.com/openwisp/openwisp-monitoring/pull/397 get merged :+1: "", 'comment_created': datetime.datetime(2022, 6, 30, 17, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911704200, 'comment_body': 'Yes it should be `false`.', 'comment_created': datetime.datetime(2022, 7, 1, 7, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907075, 'comment_body': 'I used this to make `deviceconnection.connect()` easier to mock inside `test_iperf.py`.', 'comment_created': datetime.datetime(2022, 7, 1, 12, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907644, 'comment_body': ""I'll update :+1: "", 'comment_created': datetime.datetime(2022, 7, 1, 12, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 915687006, 'comment_body': '@Aryamanz29, I asked you not to you such wide table in the last review. The ReST renderer expects to new lines to render a blank line. \r\n\r\nE.g.\r\n\r\n```rest\r\nline1 \r\nline2 \r\n```\r\n\r\nwill appear as \r\n\r\n```\r\nline1 line2\r\n```\r\n\r\nYou should also review the rendered output on GitHub. I generally check my work on https://livesphinx.herokuapp.com, you can try that too.  ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915689090, 'comment_body': 'I would break this into two lines. This is not a hard rule, but try to limit a line to 110 characters. ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915692482, 'comment_body': '```suggestion\r\nThis check is **disabled by default**. You can enable auto creation of this check by setting the\r\n`OPENWISP_MONITORING_AUTO_IPERF <#OPENWISP_MONITORING_AUTO_IPERF>`_ to ``True``.\r\n\r\nIt also supports tuning of various).\r\n\r\nYou can also change the parameters used for iperf checks (e.g. timing, buffers, protocols, etc.) using the\r\n`OPENWISP_MONITORING_IPERF_CHECK_CONFIG <#OPENWISP_MONITORING_IPERF_CHECK_CONFIG>`_ setting.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 9, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695216, 'comment_body': 'Always use relative  hyperlinks \r\n\r\n```suggestion\r\n Follow the steps in `""How to configure push updates"" section of  the openwisp-controller documentation <https://github.com/openwisp/openwisp-controller#how-to-configure-push-updates>`_ to allow SSH access to \r\n you device from OpenWISP.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695430, 'comment_body': ""Isn't it **OpenWRT SSH** ?\r\n\r\n```suggestion\r\n**Note:** Make sure device connection is enabled & working with right update strategy i.e. ``OpenWRT SSH``.\r\n```"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697414, 'comment_body': '```suggestion\r\nFor example:\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697901, 'comment_body': 'We should also point it out here to configure the celery beat. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915699905, 'comment_body': ""I don't think we need to point out here that the device needs a working SSH connection here. \r\n\r\nSomething like this would work fine \r\n\r\n```\r\nThis setting allows you to choose whether `iperf <#iperf-1>`_ checks should be\r\ncreated automatically for newly registered devices. It's disabled by default.\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915701397, 'comment_body': ""Let's remove reference to the configuration of Ping check. We will make users read the section even though we are explaining everything here. "", 'comment_created': datetime.datetime(2022, 7, 7, 10, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915705234, 'comment_body': 'I would create a heading `Usage Instructions` and move this section under the sub-heading `How to configure iperf check`.  This is make it similar to REAMDE of openwisp-controller. \r\n\r\nWait for @nemesisdesign opinion before going ahead with this change. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 916233073, 'comment_body': 'After adding `|` to my table, it looks like this : \r\n\r\n![Screenshot from 2022-07-08 01-23-35](https://user-images.githubusercontent.com/56113566/177860603-acd2bc75-cd62-4ad4-b338-a208073e2b76.png)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 7, 19, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916234611, 'comment_body': 'Got it :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 19, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244480, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244614, 'comment_body': 'Yes :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916265071, 'comment_body': ""I am not sure I understood correctly but if you look at the result generated at https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#iperf-1, it doesn't look good (this heading is bigger than the one above), so anything better than that will be ok for me, I am pretty sure we have to give it a last round of refinement anyway @pandafy."", 'comment_created': datetime.datetime(2022, 7, 7, 20, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 916890810, 'comment_body': 'Improved docs :+1: ', 'comment_created': datetime.datetime(2022, 7, 8, 14, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 917277808, 'comment_body': '`OPENWISP_MONITORING_CHECKS` should go here and be inferred from `CHECK_CLASSES` automatically, eg:\r\n\r\n```python\r\nCHECKS_LIST = list(dict(CHECK_CLASSES).keys())\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 15, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 918012397, 'comment_body': '- Added `CHECKS_LIST` in `checks/settings.py` and remained same celery beat config for **ping** and **config applied** check. \r\n- Added instructions in  `How to configure iperf check` to configure celery beat for **iperf** check.\r\n- Raise exception if check is `ImproperlyConfigured`\r\n![Screenshot from 2022-07-11 19-15-08](https://user-images.githubusercontent.com/56113566/178290155-fd900676-f6b4-4e58-a1f6-ea164861960e.png)', 'comment_created': datetime.datetime(2022, 7, 11, 14, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918272675, 'comment_body': ""Alternate option  : \r\n```py\r\nCHECKS_DICT = get_settings_value('CHECK_DICT', dict((check[::-1] for check in CHECK_CLASSES)))\r\n# {'Ping': 'openwisp_monitoring.check.classes.Ping', 'Configuration Applied': 'openwisp_monitoring.check.classes.ConfigApplied', 'Iperf': 'openwisp_monitoring.check.classes.Iperf'}\r\n```"", 'comment_created': datetime.datetime(2022, 7, 11, 19, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918273373, 'comment_body': 'Here, we can add :\r\n```py\r\nCHECKS_LIST = list(CHECKS_DICT.values())\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 19, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918275963, 'comment_body': 'Instead of hard coding check index here, We could use `CHECK_DICT` :\r\n```py\r\n    if checks is None:\r\n        # Executes only auto checks ie. ping and config applied\r\n        checks = [CHECKS_DICT[\'Ping\'], CHECKS_DICT[\'Configuration Applied\']]\r\n\r\n    # Checks that are defined in celery beat configuration\r\n    if not isinstance(checks, list):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be of type ""list""\')\r\n    if not all(check_path in CHECKS_LIST for check_path in checks):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be in {CHECKS_LIST}\')\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 11, 19, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918865697, 'comment_body': 'Why is this removed? ', 'comment_created': datetime.datetime(2022, 7, 12, 11, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918868713, 'comment_body': ""```suggestion\r\n    CELERY_BEAT_SCHEDULE = {\r\n        # Other celery beat configurations\r\n\r\n        # Celery beat configuration for iperf check\r\n        'run_iperf_checks': {\r\n            'task': 'openwisp_monitoring.check.tasks.run_checks',\r\n            # https://docs.celeryq.dev/en/latest/userguide/periodic-tasks.html#crontab-schedules\r\n            # Executes check every 5 mins from 00:00 AM to 6:00 AM (night)\r\n            'schedule': crontab(minute='*/5', hour='0-6'),\r\n            # Iperf check path\r\n            'args': (['openwisp_monitoring.check.classes.Iperf'],),\r\n            'relative': True,\r\n        }\r\n    }\r\n```"", 'comment_created': datetime.datetime(2022, 7, 12, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918920897, 'comment_body': '**nitpick:** constants should come before any function definition. ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918931330, 'comment_body': 'why not move these mocks as decorators like it is done for other tests? ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919153018, 'comment_body': ""Why don't we set this to `None` here? Then, we won't need to pass `None` argument in the celery beat configuration. \r\n\r\nAfter deploying this to the demo system, I found that the iperf check was running every 5 minutes. It was because the existing celery beat configuration for `run_checks` command  didn't passed the `None` argument. \r\n\r\nhttps://github.com/openwisp/ansible-openwisp2/blob/7c51773114d3cb9e0ae6a0c312c3f95e403b84ef/templates/openwisp2/settings.py#L231-L234\r\n\r\nWe want to be least destructive to existing systems. Also, it is wiser to have a non-mutable default parameter. "", 'comment_created': datetime.datetime(2022, 7, 12, 16, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919181343, 'comment_body': 'I think this comment is outdated. ', 'comment_created': datetime.datetime(2022, 7, 12, 16, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919202793, 'comment_body': 'Initially I did this, but what if we run management command `run_checks`, In that case it will only execute **ping** and **config applied** check instead of executing all checks in the development.', 'comment_created': datetime.datetime(2022, 7, 12, 16, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919208793, 'comment_body': 'We can modify the management command to pass all three checks in the arguments. \r\n\r\nRunning all three checks is not a standard case here. Running `ping` and `config` checks is the standard case. \r\n\r\nIf you want to provide configurability to users, you can additionally allow passing the check dotted path as arguments to the run_checks command as follows: \r\n\r\n```\r\n./manage.py run_checks openwisp_monitoring.check.classes.Iperf,openwisp_monitoring.check.classes.ConfigApplied\r\n```\r\n\r\nBut, this is not our goal now. ', 'comment_created': datetime.datetime(2022, 7, 12, 17, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919228751, 'comment_body': ""By mistake üòÖ I'll add :+1: "", 'comment_created': datetime.datetime(2022, 7, 12, 17, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919261044, 'comment_body': 'I did this because if I use decorator style mocks for `test_iperf_check` (which consists of various subTests) then for every subTests I\'m getting additive `mock_method` call counts (It includes method calls from previous subTest) which I thought is not a good idea.\r\n**For eg:**\r\n```py\r\n    @patch.object(Iperf, \'_exec_command\')\r\n    @patch.object(Iperf, \'_get_iperf_servers\', return_value=[\'iperf.openwisptestserver.com\'])\r\n    @patch.object(iperf_logger, \'warning\')\r\n    def test_iperf_check(self, mock_warn, mock_get_iperf_servers, mock_exec_command):\r\n        check, _ = self._create_iperf_test_env()\r\n        error = ""ash: iperf3: not found""\r\n        tcp_result = loads(RESULT_TCP)[\'end\']\r\n        udp_result = loads(RESULT_UDP)[\'end\'][\'sum\']\r\n\r\n        with self.subTest(\'Test iperf3 is not installed on the device\'):\r\n                mock_exec_command.side_effect = [(error, 127)]\r\n                with patch.object(iperf_logger, \'warning\') as mock_warn:\r\n                    check.perform_check(store=False)\r\n                    mock_warn.assert_called_with(\r\n                        f\'Iperf3 is not installed on the ""{self.device}"", error - {error}\'\r\n                    )\r\n                self.assertEqual(mock_warn.call_count, 1)\r\n                self.assertEqual(mock_exec_command.call_count, 1)\r\n                mock_get_iperf_servers.assert_called_once_with(\r\n                    self.device.organization.id\r\n                )\r\n        with self.subTest(\'Test iperf check passes in both TCP & UDP\'):\r\n                mock_exec_command.side_effect = [(RESULT_TCP, 0), (RESULT_UDP, 0)]\r\n                ...\r\n                ...\r\n\r\n                self.assertEqual(mock_warn.call_count, 0)\r\n                # AssertionError: 1 != 0 (Includes call count from previous subTest, Actual call 1)\r\n                self.assertEqual(mock_exec_command.call_count, 2)\r\n                # AssertionError: 3 != 2 (Same here, But exec_command actually called 2 times)\r\n    \r\n``` ', 'comment_created': datetime.datetime(2022, 7, 12, 18, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 920330832, 'comment_body': 'This test does not have any user, hence no notification is created. \r\n\r\nCreate an admin user with \r\n```\r\nself._create_admin()\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 17, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 921554871, 'comment_body': '`Todo `: Change this link after PR merge', 'comment_created': datetime.datetime(2022, 7, 14, 20, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 922313899, 'comment_body': ""Let's move all these images into the 1.1 directory please:\r\nhttps://github.com/openwisp/openwisp-monitoring/tree/docs/docs/1.1\r\nThis is needed so that if in version 1.2 we change the look of the UI, we can upload new screenshot for the 1.2 version without affecting the docs for the 1.1 version."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922314175, 'comment_body': ""let's try to break long lines please"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922320756, 'comment_body': ""I believe it's better to be explicit here and specify the ping and config_applied checks"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922324487, 'comment_body': ""I believe that if `checks` is `None` we should execute all the checks and not skip a particular check like we are doing here,  This is not consitent.\r\n\r\nMoreover, the check list can be changed by users, so the order may not be in the one we expect here, this is not robust.\r\n\r\nSo please let's remove this."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922325814, 'comment_body': ""I know that this is the output of iperf, but it's nice to have it more readable.\r\nCan you please re-format these JSON strings so they're more readable and have 4 spaces indentation?"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922349492, 'comment_body': ""we cannot do this because if the connection fails because the device is temporarily offline, then when it comes back up this flag will still be false, because SSH connections right now are tried by the system only on configuration changes, so the following can happen:\r\n\r\n- a device goes offline\r\n- iperf check runs, tries SSH connection, but fails, `is_working` is set to False by the system\r\n- the device comes back online, but no config change is done, so is_working stays False because the system hasn't tried to connect to it yet\r\n- iperf check runs again, but since `is_working` is still False, the check is not executed\r\n\r\nSo let's remove this filter."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 923036134, 'comment_body': 'üëç', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923036228, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923037224, 'comment_body': ""You're right, I'll remove `is_working` from filter :+1: "", 'comment_created': datetime.datetime(2022, 7, 18, 7, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923076855, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 8, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 924836785, 'comment_body': 'In this PR, we should also allow configuring the `bitrate` option. The default value for bitrate in UDP mode is small which leads to insignificant results from iperf. \r\n\r\nWe can leave other options for later in https://github.com/openwisp/openwisp-monitoring/issues/416', 'comment_created': datetime.datetime(2022, 7, 19, 18, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 924837883, 'comment_body': 'I think we should set bitrate on UDP to default to 10 MB and recommend users to tweak this according to their needs.\r\nOn TCP bitrate can default to 0 (unlimited).', 'comment_created': datetime.datetime(2022, 7, 19, 18, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925359967, 'comment_body': 'I would add a comment here explaining that since all three `username`, `password` and `rsa_public_key` is required for authentication to work, we only check for `username` here. ', 'comment_created': datetime.datetime(2022, 7, 20, 9, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925360323, 'comment_body': ""```suggestion\r\n    'rsa_public_key': {\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925361396, 'comment_body': ""```suggestion\r\n        # Exit code 127 : command doesn't exist\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925371059, 'comment_body': 'We use `app_settings` to distinguish between app and project settings (django.conf.settings). \r\n```suggestion\r\nfrom .. import settings as app_settings\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 9, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925419463, 'comment_body': ""I would declare the common mocks with decorators to reduce code duplicity. \r\n```suggestion\r\n    @patch.object(Iperf, '_get_iperf_servers', return_value=['iperf.openwisptestserver.com'])\r\n    @patch.object(Iperf, '_exec_command', side_effect=[(RESULT_TCP, 0), (RESULT_UDP, 0)])\r\n    @patch.object(iperf_logger, 'warning')\r\n    def test_iperf_check_auth_config(self, mock_warn, mock_exec_command, mock_get_iperf_servers):\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 10, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925425064, 'comment_body': 'After removing common mocks, I would update this to \r\n\r\n\r\n```suggestion\r\n            with patch.object(\r\n                settings, \'IPERF_CHECK_CONFIG\', iperf_config\r\n            # It is required to mock ""Iperf.schema"" here so that it \r\n            # uses the updated configuration from ""IPERF_CHECK_CONFIG"" setting.\r\n            ), patch.object(Iperf, \'schema\', get_iperf_schema()):\r\n```\r\n\r\nI have added a comment there because it was not entirely clear from the code why the `Iperf.schema` is mocked. Only after tinkering of code, I realised the reason. The comment will prevent us from making unnecessary efforts in the future. ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925426154, 'comment_body': 'After completion of each sub-test, reset the mocks with the following code: \r\n\r\n```suggestion \r\n        mock_exec_command.reset_mock()\r\n        mock_warn.reset_mock()\r\n        mock_get_iperf_servers.reset_mock()\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 10, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427096, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427263, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925428810, 'comment_body': 'This entire block has been repeated 3 times in the file. Can we move these assertions to an internal method of the test class and call it wherever required? ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925607910, 'comment_body': 'Thanks !', 'comment_created': datetime.datetime(2022, 7, 20, 13, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 927586330, 'comment_body': 'the indentation is not right here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927586538, 'comment_body': ""aren't we missing the instructions to run the iperf check?"", 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927587808, 'comment_body': '```suggestion\r\nIperf authentication\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927588695, 'comment_body': '```suggestion\r\nBy default iperf check runs without any kind of **authentication**,\r\nin this section we will explain how to configure **RSA authentication** \r\nbetween the **client** and the **server** to restrict connections\r\nto authenticated clients.\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927589925, 'comment_body': '```suggestion\r\nAfter running the commands mentioned above, the public key will be stored in ``public.pem`` \r\n```\r\n\r\nKeep it short, apply a similar change also to ``private_not_protected.pem``, I would also rename that as `private_key.pem`, while I would rename `public.pem` to `public_key.pem`.', 'comment_created': datetime.datetime(2022, 7, 22, 12, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927591635, 'comment_body': 'indentation is wrong here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927592482, 'comment_body': 'what is `default`?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927595377, 'comment_body': 'We already have a setting to configure iperf, why are you adding a new one?\r\n\r\nCan we compress everything in one setting?\r\n\r\nEg:\r\n\r\n```python\r\nOPENWISP_MONITORING_IPERF = {\r\n    \'a9734710-db30-46b0-a2fc-01f01046fe4f\': [\r\n        {\r\n            \'host\': [\'iperf1.openwisp.io\', \'iperf2.openwisp.io\'],\r\n            \'username\': \'iperfuser\',\r\n            \'password\': \'iperfpassword\',\r\n            \'rsa_public_key\': (\r\n""""""\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwuEm+iYrfSWJOupy6X3N \r\ndxZvUCxvmoL3uoGAs0O0Y32unUQrwcTIxudy38JSuCccD+k2Rf8S4WuZSiTxaoea \r\n6Du99YQGVZeY67uJ21SWFqWU+w6ONUj3TrNNWoICN7BXGLE2BbSBz9YaXefE3aqw \r\nGhEjQz364Itwm425vHn2MntSp0weWb4hUCjQUyyooRXPrFUGBOuY+VvAvMyAG4Uk \r\nmsapnWnBSxXt7Tbb++A5XbOMdM2mwNYDEtkD5ksC/x3EVBrI9FvENsH9+u/8J9Mf \r\n2oPl4MnlCMY86MQypkeUn7eVWfDnseNky7TyC0/IgCXve/iaydCCFdkjyo1MTAA4 \r\nBQIDAQAB\r\n"""""")\r\n            \'client_options\': {\r\n                \'port\': \'6209\',\r\n                \'udp\': {\r\n                    \'bitrate\': \'20M\'\r\n                },\r\n                \'tcp\': {\r\n                    \'bitrate\': \'0\'\r\n                }\r\n            }\r\n        }\r\n    ],\r\n}\r\n``` \r\n\r\nDoes it make sense?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 932113139, 'comment_body': 'Done üëç', 'comment_created': datetime.datetime(2022, 7, 28, 11, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932117536, 'comment_body': 'Sure :)', 'comment_created': datetime.datetime(2022, 7, 28, 11, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932122726, 'comment_body': 'I made it to look consistent with [`OPENWISP_MONITORING_PING_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring#openwisp_monitoring_ping_check_config), Now I have changed `iperf config setting` according to https://github.com/openwisp/openwisp-monitoring/issues/418', 'comment_created': datetime.datetime(2022, 7, 28, 11, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932125477, 'comment_body': 'Yes, it would be better to have a single setting for `iperf check` :+1: ', 'comment_created': datetime.datetime(2022, 7, 28, 11, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932202486, 'comment_body': 'I think it is mention in [`iperf-check#how-to-configure-iperf-check`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#3-configure-iperf-settings)', 'comment_created': datetime.datetime(2022, 7, 28, 13, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933005488, 'comment_body': 'This looks incorrect to me', 'comment_created': datetime.datetime(2022, 7, 29, 8, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933008280, 'comment_body': 'Do we need this @nemesisdesign ? ', 'comment_created': datetime.datetime(2022, 7, 29, 8, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933010148, 'comment_body': 'I think we should link this page instead https://openwisp.io/docs/user/configure-push-updates.html', 'comment_created': datetime.datetime(2022, 7, 29, 8, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933033617, 'comment_body': 'nitpick, can you please remove this blank line? ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933035363, 'comment_body': 'Can you please add a docstring here explaining this method ?', 'comment_created': datetime.datetime(2022, 7, 29, 9, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933046950, 'comment_body': 'The order should be same as `trace_order` otherwise, it will show incorrect labels. ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933108012, 'comment_body': 'Did you try using `connectgaps: true` instead of doing this as suggested in example shared by Federico? I was able to achieve similar results with that option locally. Can you double check that please? ', 'comment_created': datetime.datetime(2022, 7, 29, 10, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933142183, 'comment_body': 'I and @nemesisdesign had meet in which he suggested me to add this about `iperf charts` in the `README`. ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933144201, 'comment_body': 'ploty `connectgaps` property only works for scatter charts. More info : https://plotly.com/python-api-reference/generated/plotly.graph_objects.Scatter.html', 'comment_created': datetime.datetime(2022, 7, 29, 11, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933145799, 'comment_body': 'okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 7, 29, 11, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933147324, 'comment_body': 'thanks! I will update :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933147488, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933198121, 'comment_body': 'Sure üëç', 'comment_created': datetime.datetime(2022, 7, 29, 12, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933199473, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2022, 7, 29, 12, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 935156010, 'comment_body': 'Okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 8, 2, 6, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 937864645, 'comment_body': ""respect the spacing (I wish the linter warned about this!):\r\n\r\n```\r\nif (unit.includes('+')) {\r\n`"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937864912, 'comment_body': 'same here and below', 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937867677, 'comment_body': ""let's do those changes to the charts that we discussed (have bandwidth and transfer as simple lines with no fill and have 2 lines in each chart, one for TCP and one for UDP), then update the README here and screenshots."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937870690, 'comment_body': ""I don't understand, isn't this something that depends on a specific server? Why do we have a global setting?"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937874363, 'comment_body': ""definitely we cannot link files which are published in branches we are going to delete, please double check the rest of the document for similar problems, we can point to master here, even thought it won't work until published, but that's ok."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875205, 'comment_body': 'this change is unnecessary, please revert it', 'comment_created': datetime.datetime(2022, 8, 4, 14, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875935, 'comment_body': 'shall we default this to 30 MB? I think 10 is quite low.', 'comment_created': datetime.datetime(2022, 8, 4, 14, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937878521, 'comment_body': 'please break lines and maintain line length consistent with the rest of the document', 'comment_created': datetime.datetime(2022, 8, 4, 14, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937880972, 'comment_body': 'make sure spacing around parenthesis is consistent with the rest of the JS code', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881165, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881327, 'comment_body': 'double check all blocks please', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937889998, 'comment_body': ""isn't the final return statment suppposed to be updated here??\r\n\r\n```\r\nreturn self._time_crossed(time) and value_crossed\r\n```\r\n\r\nIs not taking in consideration the related field.\r\n\r\nWhat if value_crossed is False but the related value is crossed?\r\n\r\nWhat about `if self.tolerance == 0:`???\r\n\r\nSo now I have some more basic quesitons:\r\n\r\n1. Why was this kind of change, which is very delicate, introduced in this huge PR? Do we have to introduce this change or can we make the iperf check work without it for now? \r\n\r\n2. Looking at this code, I am pretty scared to merge it! I do not want to do this.\r\n@Aryamanz29 can you extract these commits into a separate branch please? I want to merge the rest of the work but not this right now, I think it needs more careful thought."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937890192, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938006217, 'comment_body': ""Linter didn't warn ü§î I'll check all my code manually :+1: \r\n\r\n![Screenshot from 2022-08-04 21-54-41](https://user-images.githubusercontent.com/56113566/182901953-77fbb3ee-110b-4660-ba2b-c2d5fdb60f2b.png)\r\n"", 'comment_created': datetime.datetime(2022, 8, 4, 16, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938205036, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 4, 20, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938249501, 'comment_body': 'Yes it should be defined in [`OPENWISP_IPERF_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config)', 'comment_created': datetime.datetime(2022, 8, 4, 21, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938256975, 'comment_body': ""1. Yes, we can make `iperf check` work without this feature (check will run without any `alertsettings`)\r\n2. I'll remove `alert_on_related_field` feature from this PR as of now & will open a separate PR :+1:"", 'comment_created': datetime.datetime(2022, 8, 4, 21, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938700817, 'comment_body': ""why there's both `rsa_public_key` and `rsa_public_key_path`? Are users supposed to use either one or the other?\r\nHow does it work? Was this meant to be the private key?"", 'comment_created': datetime.datetime(2022, 8, 5, 10, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938721204, 'comment_body': ""This is the location where the `client (ie. openwrt device)` stores it's `rsa_public_key` for `iperf check`. By default, it is `/tmp/iperf-rsa-public.pem` and this path is required for iperf3 auth, but we can also change this using [OPENWISP_IPERF_CHECK_CONFIG](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config). More info : https://github.com/openwisp/openwisp-monitoring/issues/414#issuecomment-1189408176"", 'comment_created': datetime.datetime(2022, 8, 5, 11, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938723543, 'comment_body': 'Iperf command basically doing  `f\'echo ""{rsa_public_key}"" > {rsa_public_key_path}` and after completion of check removing key from the device `rm {rsa_public_key_path}`', 'comment_created': datetime.datetime(2022, 8, 5, 11, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938733455, 'comment_body': ""`/tmp/iperf-public-key.pem` does not need to be configurable at this level, there's no usefulness in this, just set `/tmp/iperf-public-key.pem` to a variable and use the variable throughout the rest of the implementation."", 'comment_created': datetime.datetime(2022, 8, 5, 11, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938777476, 'comment_body': 'Ok :+1: ', 'comment_created': datetime.datetime(2022, 8, 5, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}]","[{'commit_sha': '506f044bfacdbf2e57448e4dd6f796b16fe764d0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd112b85b34fb0ff7ada391849cdc8be9d36743', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47467ef97bc91783babd7f8ffcaa9a06fd23f45', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488990b941bab99f046237bddf061d6a665d95de', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f890ba95c3291bff34875dad9213c00dfd345b65', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ec0dc06db4b7d14dce066b4210ca83f32fd8f0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a79a5dff088d7e1d2aef7d339c9aef0b201911', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f63fcaa77527c3a24efe88be179339a412b4dc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a346efc3fafe216a30b5a0c957f594d822c704d', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9383f3a340945d316f3f4d20e7f3fdce7cbe1b97', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7dfd5fd259da12054d149fa60edee448b68eba', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d98a66d46039c27f3048af2366aec579e681cc4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3050edf18d15c9679e0fe4047883d28ad502ac87', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efdc70a65c784586df0ef7e5e162f8c84b4c914c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f65c6adcfd92abcf5c17706796d98dd3549a74e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7396e79b0c9f8b7ae0c211bdeb025aba5737325f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b881e0616d770710cf5500dd460e5db7fd7e48b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d732bb3310db85781acc5c198541386f1373ba6', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c488abc5a9ba560c03b0a649b0502600624911a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89563034ee0244f5849b1e9ae1f922079968ad2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c75428e79debde7016665a23b9e88383c848d2f9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a9eef80a7f2d0619ef806e8f6880c9d569762a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59089944b285b38ec16847926ea16bb035c1c5c4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec80f2f7db65f89252a328f617cd565e0b46c07c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50921cbff514ff58034a6e5954890e9e5b69eca2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56543bf191c7df6d649eeff734fe4e98d8b9a0af', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef433eaa6b4f59e9ea9ceea05c7d742a2d8301bc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38991a9914a3abab5f00be688624b59706734d59', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b607da46f3041735fcbce771c9733847af4444', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce23bd0c38068dfcad9b993da39a83c7f5566197', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f9220243c4a3481bef065e5a0b48fec9da00db', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '840029189f6fa20ae0d371cabaa915ba25288b75', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b31104284172bb059d7d4f11956f7f1a8417e1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d472aa1eaa9b312c391847094dc3c05b270101', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2abe5d1f14d28391950375886484d04d76d67bd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391537e80877680fd06f7894aee7fa742c94a4e4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9810d2470b788385018e57fd93a34c8536a761fb', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd219e9f667377d616e7935613b4f0c6039dc675a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '808288118df92cff2bc444e9235af5d84746ff46', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d6061e4d6bee24e7e6d9c92a86f18e2f596bd1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df31203af6be0dc0876d38b683d67037163eda89', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02100af795a1c46c876aadfacf284eb1b43e1c2f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27732e6652cbca6ccc41e455161a2891f9bb1948', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9b82670d654d62ea86147a65904701e5a2bdf9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1bc269b0950f0f34fbaaacd5b7704ee3fa2c2e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ddce9d5df2bf136cbff09037aab5bc3fa67ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa74e9960a59bb83d7daf1a9a7568b78af77451f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d71d7c6009d30b285069fdb06ad8dfc543e2b91', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50256d20778eec1cc747ced27d54aa686a1e4f6b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01cd70e1de0202efcbc4fac054249258605e2e41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7b6cb1d96f90d3c14b5a3202e11be68816b0860', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d86f05471de61a7b6e7d67ddc9f2d1e4b17ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a4f9877a0e8ad6d2d55d4c77f2acd818080d1e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4196b0a077c6fc0a1422eca2ef741032d17f41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ce4a024351a43a3842e8030f2a385e7705a802', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '719932e8593b19c285e96323bfcc527abd6538cd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '631d2bf6db793e35f1129885b813e33c924bdebf', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3524a68f74762991cf4f9280605eef84bea68692', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe40f82ea7a3af6df4e0babc6198b5cb33f7501', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12d9b5f72c94dc418355099dedb73b2d5d35413', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e23d914c1ba9746c9e820eb1a5e255eb26fa73', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13b6416f9013e2e4759a28ed33e43d8c905b5134', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1dd84e9be003e17fcfc694a37c04c2994243fc', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9213aafa268485be75a32c36fc9bd349d831a755', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330
1021500737,[feature] Added alert on metric fields #406,"- This change will add possibility to check `alert threshold` on the specific metric field if provided in configuration otherwise, it uses `field_name`, which is current alert behaviour.

- Removed `alert_field` from the iperf metric configuration.

https://user-images.githubusercontent.com/56113566/178989966-f007a9b9-c9fd-4877-ac01-539e38b3331f.mp4

Closes #406 

Checks:

- [x] I have manually tested the proposed changes
- [x] I have written new test cases to avoid regressions (if necessary)
- [x] I have updated the documentation (e.g. README.rst)
",True,427,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/427,https://github.com/openwisp/openwisp-monitoring/pull/427,closed,346,18,9,12,1,44,1,1,[{'name': 'enhancement'}],2022-08-09 13:09:17+00:00,2022-09-16 13:46:54+00:00,3285457.0,"38 days, 0:37:37","[{'comment_id': 942356028, 'comment_body': '```suggestion\r\nwhere we used ``jitter`` (related_field) for alerts.\r\n```', 'comment_created': datetime.datetime(2022, 8, 10, 11, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 942356990, 'comment_body': '`extra_values` is a keyword argument, not a positional argument. ', 'comment_created': datetime.datetime(2022, 8, 10, 11, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 942359283, 'comment_body': ""Shouldn't this execute only if a check is `True`? "", 'comment_created': datetime.datetime(2022, 8, 10, 11, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 942645204, 'comment_body': 'my bad üòÖ', 'comment_created': datetime.datetime(2022, 8, 10, 16, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 942650389, 'comment_body': ""Yes, you're right üëç I'll update that"", 'comment_created': datetime.datetime(2022, 8, 10, 16, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 944600798, 'comment_body': '```suggestion\r\nYou can also use the ``alert_on_related_field`` key in metric configuration\r\n```', 'comment_created': datetime.datetime(2022, 8, 12, 15, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 944601273, 'comment_body': '```suggestion\r\nwhich allows ``AlertSettings`` to use the value specified in ``related_field``to check the ``threshold``, instead\r\n```', 'comment_created': datetime.datetime(2022, 8, 12, 15, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 944601526, 'comment_body': '```suggestion\r\nof the default ``field_name`` key. A real world example of this can be seen in the\r\n```', 'comment_created': datetime.datetime(2022, 8, 12, 15, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 944601691, 'comment_body': '```suggestion\r\nwhere we used ``jitter`` (``related_field``) for alerts.\r\n```', 'comment_created': datetime.datetime(2022, 8, 12, 15, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 944606744, 'comment_body': 'what happens if `self.tolerance == 0`?', 'comment_created': datetime.datetime(2022, 8, 12, 15, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 946827011, 'comment_body': '```suggestion\r\nwhich allows ``AlertSettings`` to use the value specified in ``related_field`` to check the ``threshold``, instead\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 14, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 946827562, 'comment_body': 'I am not sure whether we should have this enabled by default in the code.', 'comment_created': datetime.datetime(2022, 8, 16, 14, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 946833866, 'comment_body': 'maybe we can call this `alert_field`, then we can define that:\r\nif `alert_field` is not supplied, the system assumes it\'s ""field_name"".\r\n\r\nI would then create a method for this property, which behaves as described above, eg:\r\n\r\n```python\r\n@property\r\ndef alert_field(self):\r\n    return self.config_dict.get(\'alert_field\', self.field_name)\r\n\r\n@property\r\ndef alert_on_related_field(self):\r\n    return self.alert_field != self.field_name\r\n```\r\n\r\n```suggestion\r\n            if alert_on_related_field:\r\n                # etc.\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 14, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 946834650, 'comment_body': 'add comment hinting that this will cause the check of the threshold on the related field', 'comment_created': datetime.datetime(2022, 8, 16, 14, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 946836303, 'comment_body': '```suggestion\r\n                results.append(self._value_crossed(point[self.metric.alert_field]))\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 14, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 946842112, 'comment_body': '```suggestion\r\n        # if alert field is supplied, retrieve such field when reading\r\n        # so that we can let the system calculate the threshold on it\r\n        extra_values = []\r\n        if self.metric.alert_on_related_field:\r\n           extra_values = [self.metric.alert_field]\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 14, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 946844306, 'comment_body': 'here I would avoid this change to be shipped in the default system', 'comment_created': datetime.datetime(2022, 8, 16, 14, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 949252199, 'comment_body': 'tolerance is 0, it will send an alert at the first occurrence, which is not useful because it can send alerts too often.\r\nI would advise to have the tolerance set to at least 2 full days, so that the alert is sent only on the third consecutive day with bandwidth less than 10 Mbps.', 'comment_created': datetime.datetime(2022, 8, 18, 14, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 949253625, 'comment_body': 'Are you suggesting users to modify the code? Why does the example modifies `DEFAULT_METRICS`? It looks wrong to me. We should never suggest users to hardcode changes in the core of OpenWISP.\r\n\r\nWe should recommend using the dedicated [setting to reconfigure metrics](https://github.com/openwisp/openwisp-monitoring#openwisp-monitoring-metrics).\r\n\r\nThe wording should be simplified to be less technical and more understandable by anyone.\r\n\r\n```suggestion\r\nThe following example shows how to use the setting ...........(LINK SETTING DOCS HERE)\r\nto reconfigure the system to send an alert\r\nif the measured TCP bandwidth has been less than 10 Mbit/s for more than 2 days.\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 14, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 949257515, 'comment_body': ""is it really necessary to redefine all this?\r\n\r\nWouldn't the following be enough?\r\n\r\n```python\r\n# Main project settings.py\r\n\r\nDEFAULT_METRICS = {\r\n    'iperf': {\r\n        'alert_field': 'sent_bps_tcp',\r\n        # Alert is sent immediately (tolerance 0) when bandwidth less than 10 Mbps\r\n        'alert_settings': {'operator': '<', 'threshold': 10000000, 'tolerance': 2880},\r\n    },\r\n    'notification': {\r\n        'problem': {\r\n            'verbose_name': 'Bandwidth PROBLEM',\r\n            'verb': _('Iperf bandwidth is less than normal value'),\r\n        },\r\n        'recovery': {\r\n            'verbose_name': 'Bandwidth RECOVERY',\r\n            'verb': _('Iperf bandwidth now back to normal'),\r\n        },\r\n    },\r\n}\r\n```\r\n\r\nPlease double check this and test the pseudo code above."", 'comment_created': datetime.datetime(2022, 8, 18, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 950171466, 'comment_body': 'We need to create `AlertSettings` for `iperf check` first, then we can add the above configuration to `settings.py`.', 'comment_created': datetime.datetime(2022, 8, 19, 13, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950172203, 'comment_body': ""I'll take care of this next time :+1: "", 'comment_created': datetime.datetime(2022, 8, 19, 13, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950172521, 'comment_body': ""ok, I'll that :+1: "", 'comment_created': datetime.datetime(2022, 8, 19, 13, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 951632415, 'comment_body': ""isn't `alert_settings` missing here?"", 'comment_created': datetime.datetime(2022, 8, 22, 16, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 951633955, 'comment_body': ""Let's not recommend it this way but rather recommend the usage of the feature you're introducing in https://github.com/openwisp/openwisp-monitoring/pull/431 which will be accessible to most users and should also be easier to use.\r\nPlease leave it pending once https://github.com/openwisp/openwisp-monitoring/pull/431 is merged, then you can update this branch accordingly.\r\n\r\nThis could become a GIF."", 'comment_created': datetime.datetime(2022, 8, 22, 16, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 951634976, 'comment_body': '1. By deafult, Iperf checks do not have any alert settings defined,\r\nbut it is easy to create one through the admin interface as shown below.', 'comment_created': datetime.datetime(2022, 8, 22, 16, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 966678436, 'comment_body': '```suggestion\r\nTo add a check, you just need to select an available **check type** as shown below:\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 6, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 966679560, 'comment_body': 'Please remove this blank line', 'comment_created': datetime.datetime(2022, 9, 9, 6, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 966679669, 'comment_body': 'Please remove this blank line', 'comment_created': datetime.datetime(2022, 9, 9, 6, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 966681658, 'comment_body': '```suggestion\r\n`OPENWISP_MONITORING_METRICS setting <#openwisp_monitoring_metrics>`_\r\n```\r\n\r\nWe use relative URL s everywhere in this document. ', 'comment_created': datetime.datetime(2022, 9, 9, 6, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 966687255, 'comment_body': '```suggestion\r\n**Note:** To access the above pages, the user must have permissions for ``Check`` and ``AlertSetting`` inlines,\r\nThese permissions are included by default in the ""Administrator"" and ""Operator"" groups and are shown in the screenshot below.\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 6, 54, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 966712552, 'comment_body': 'This test is not creating any new notification because of the double alarm prevention mechanism. This tests looks bogus. \r\n\r\nI suggest deleting notifications after every sub-test. This will ensure that only one notification will be created per testing environment and we will avoid writing any bogus tests in the future as well. ', 'comment_created': datetime.datetime(2022, 9, 9, 7, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 966726960, 'comment_body': 'I think we should also add a note that even when `OPENWISP_MONITORING_AUTO_IPERF` is set to True, users need to update the metric configuration to enable alerts for the iperf check. \r\n', 'comment_created': datetime.datetime(2022, 9, 9, 7, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 966734284, 'comment_body': 'I think it would easier to read the text in the image if the image width was lesser. In my experience, 800px wide images looks good on GitHub REAMDE. Please try cropping the image and check if it makes the image more useful. ', 'comment_created': datetime.datetime(2022, 9, 9, 7, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 971603089, 'comment_body': 'If the `alert_field` is configured for the metric in the project\'s setting as shown below: \r\n\r\n```python\r\nOPENWISP_MONITORING_METRICS = {\r\n    \'iperf\': {\r\n        \'alert_field\': \'iperf_result\',\r\n    }\r\n}\r\n```\r\n\r\nThen, changing the alert field from the AlertInline on the device change admin will have no effect. The ""Field name"" in the AlertInline represents `metric.field_name`. \r\n\r\nI think we can solve this problem by modifying this code as follows\r\n\r\n```python\r\n    @property\r\n    def alert_field(self):\r\n        if self.field_name != self.config_dict[\'field_name\']:\r\n            return self.field_name\r\n        return self.config_dict.get(\'alert_field\', self.field_name)\r\n```\r\n', 'comment_created': datetime.datetime(2022, 9, 15, 7, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 971607597, 'comment_body': 'If this sub-test fails, then the notification will not get deleted. And, this would affect the following sub-tests. We should always perform operations related to resetting of the testing environment outside of the sub-tests.\r\n\r\n```suggestion\r\n        Notification.objects.all().delete()\r\n```\r\n\r\nSame applies for other occurrences. ', 'comment_created': datetime.datetime(2022, 9, 15, 7, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 971643749, 'comment_body': 'Noted!', 'comment_created': datetime.datetime(2022, 9, 15, 7, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 971644093, 'comment_body': 'Will update it, thanks!', 'comment_created': datetime.datetime(2022, 9, 15, 7, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 972680726, 'comment_body': 'Is there a dedicated test for this condition? When I comment these lines, the test suite passes. But, I expect atleast one test to fail. ', 'comment_created': datetime.datetime(2022, 9, 16, 7, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 972683579, 'comment_body': ""I'll write one üëçüèª"", 'comment_created': datetime.datetime(2022, 9, 16, 7, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 972934250, 'comment_body': 'this GIF is 1 MB, can we find a way to be less heavy? Either optmize the GIF or use one or more screenshots?', 'comment_created': datetime.datetime(2022, 9, 16, 11, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 972934302, 'comment_body': 'this GIF is 6 MB, can we find a way to be less heavy? Either optmize the GIF or use one or more screenshots?', 'comment_created': datetime.datetime(2022, 9, 16, 11, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 973028047, 'comment_body': ""I'm unable to compress those GIFs to less than **5MB**, so I'm replacing them with screenshots."", 'comment_created': datetime.datetime(2022, 9, 16, 13, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 973028128, 'comment_body': ""I'm unable to compress those GIFs to less than **5MB**, so I'm replacing them with screenshots."", 'comment_created': datetime.datetime(2022, 9, 16, 13, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}]","[{'commit_sha': '9178ba70660e6ced6c19ff2348a0a88614718bcf', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76538e8de35118953c3b89894648eb8788fca834', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c38228ab8f34fba0ef6d7ef5469ea334fec52100', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1b59a41c92ea5bb94c9a5b7f97ef71c2db93278', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f0cefbee3c57933fcee60347d640e7dca045e3f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f54cf51545e797a2f4bcdb9e03bdf1549c8f3b0b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0d212ea98768e4b1bccc4dfa4f2d0e2d6ef79dc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c13e99ec4e7af6ae4c19205e8aceeda93f21563', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd310202ca89f065b7f4f4ed6b23640b53e0d7212', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d9cd0044b21b18c7eeae5c8451bd46f92780fd5', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5609e0845c2c9b1aa4e296f1ae20e5168b56f164', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42f45372442bcc3c2b8f6a604714dba065642a37', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330
958876982,[feature] Implement Iperf3 check #385,"- Added initial code for **Iperf3 check class.**
- Added **tests** for check class.
- Added **device connection** logic.
- Added **charts & metric (TCP & UDP mode)**.

## `Steps to test`
1. Make sure your client **(openwrt-device)** and server both have [Iperf3](https://iperf.fr/iperf-download.php), [Openwrt Iperf3 package](https://openwrt.org/packages/pkgdata/iperf3)  installed.
2.  Do check **the credential section of the device** _(It must be enabled and working with the right update strategy, i.e., **ssh**)_.

![173354971-728cb1b4-4bf1-4d89-9c22-ce9b9b1e2bef](https://user-images.githubusercontent.com/56113566/173355074-3918d860-a4ad-4f84-bfa4-2c23a7e8d94e.png)

3.  In `tests/openwisp2/settings.py` configure:
```py
OPENWISP_MONITORING_IPERF3_SERVERS = {
    # Running on my local
    # Some Public Iperf3 Servers : https://iperf.fr/iperf-servers.php#public-servers
    # 'be63c4e5-a68a-4650-bfe8-733837edb8be': ['iperf.biznetnetworks.com'],
    'a9734710-db30-46b0-a2fc-01f01046fe4f': ['speedtest.uztelecom.uz'],
    # '<org-pk>': ['<ORG_IPERF3_SERVER>']
}

```
 **NOTE :** The host can be specified by **hostname, IPv4 literal, or IPv6 literal**
```
# for ex
              iperf3 -c iperf.biznetnetworks.com

              iperf3 -c 192.168.5.109

              iperf3 -c 2001:db8::1
```
4. Run `python3 manage.py run_checks` _(To run all checks manually)_.


![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `Demo`

https://user-images.githubusercontent.com/56113566/173353857-56b344f4-89d2-47d9-884a-32a472168f66.mp4

![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `TCP Charts`

![Screenshot from 2022-06-24 18-27-43](https://user-images.githubusercontent.com/56113566/175540716-145b7736-f8c1-4293-bfa1-9234a3ffb95a.png)

![Screenshot from 2022-06-24 11-51-01](https://user-images.githubusercontent.com/56113566/175475141-4f401c73-5198-490d-b6a1-a3932182051f.png)


## `UDP Charts`

![Screenshot from 2022-06-29 20-31-49](https://user-images.githubusercontent.com/56113566/176470082-4d94a537-9032-4f2a-b7e0-3f607ee67c5b.png)

![Screenshot from 2022-06-22 13-26-21](https://user-images.githubusercontent.com/56113566/174975685-6a101362-0132-4d88-a16f-486507f61280.png)

![Screenshot from 2022-06-22 13-26-25](https://user-images.githubusercontent.com/56113566/174975707-96a7b909-c709-4b6b-8982-33fa0e8a555d.png)

Closes #385
",True,394,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/394,https://github.com/openwisp/openwisp-monitoring/pull/394,closed,2633,43,20,64,20,163,1,1,[{'name': 'enhancement'}],2022-06-06 09:25:46+00:00,2022-08-09 12:39:49+00:00,5541243.0,"64 days, 3:14:03","[{'comment_id': 902362779, 'comment_body': ""It is a good thing that you have mentioned this and I guess this is only done for testing phase. But, this should go in project's settings.py (`tests/openwisp2/settings.py`). \r\nThis is application code that will be re-used by other people, we don't want to hard-code anything here. \r\n\r\nThis is a reminder to ourselves that we should move this to project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902395191, 'comment_body': ""I don't think we need to do conversion here. We should save raw values in `bits/second` in the database. We will do appropriate conversion when showing the data to the users. \r\nWe can leverage the work that would be done for https://github.com/openwisp/openwisp-monitoring/issues/87 \r\n\r\nI think it was already planned this way, @nemesisdesign can you please confirm? "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404374, 'comment_body': 'I would refactor this method like following \r\n\r\n```suggestion\r\n    def _get_device_connection(self, device):\r\n        """"""\r\n        Returns an active SSH DeviceConnection for a device.\r\n        """"""\r\n        openwrt_ssh = UPDATE_STRATEGIES[0][0]\r\n        device_connection = DeviceConnection.objects.filter(\r\n            device_id=device.id,\r\n            update_strategy=openwrt_ssh,\r\n            enabled=True,\r\n            is_working=True,\r\n        ).first()\r\n        return device_connection\r\n```\r\n\r\nAnd the update the logic that checks for `False` to check for `None`. ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404695, 'comment_body': 'This would break if a device has multiple `DeviceConnection` (which it can have by design, this broke on my local environment).', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902405061, 'comment_body': 'Why are we checking `device.monitoring.status`? ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902434921, 'comment_body': '@Aryamanz29 can you open an issue to make this command configurable? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902437683, 'comment_body': ""**Nitpick:** Let's always write the code to return early. E.g.\r\n\r\n```python\r\nif not device_connection:\r\n    logger.warn('')\r\n    return \r\n# rest of the logic\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 10, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902439981, 'comment_body': ""Let's only put the code that can raise exception in try-except block. I think only these lines can raise `ObjectDoesNotExist` exception here. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902442292, 'comment_body': 'What should trigger this alert? Is it going to be something like `if bandwidth falls below X Mbps, then send alert`. ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902444264, 'comment_body': '@Aryamanz29 can you share why this is needed? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902446835, 'comment_body': ""If any test will fail when `OPENWISP_MONITORING_AUTO_IPERF` is set to `False`, mock that setting in the TestCase. We find that many tests fail in ansible-openwisp2 and docker-openwisp because they rely on the project environment. Since, we ship tests with the application, we should ensure that they do their job without relying on the project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902484236, 'comment_body': ""Yes, I'm thinking of same we can leverage `traffic charts` adaptive size (https://github.com/openwisp/openwisp-monitoring/issues/87) in `Iperf` charts as well."", 'comment_created': datetime.datetime(2022, 6, 21, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902487431, 'comment_body': 'Sure üëç opened : https://github.com/openwisp/openwisp-monitoring/issues/398', 'comment_created': datetime.datetime(2022, 6, 21, 11, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490038, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490075, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902497466, 'comment_body': 'We can do that as well, but according to **possible outcomes** of the project \'\'If an Iperf server is down/busy we should trigger an alert"" (We need to investigate more about this)', 'comment_created': datetime.datetime(2022, 6, 21, 11, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902499363, 'comment_body': 'It is related to : https://github.com/openwisp/openwisp-monitoring/pull/309#issuecomment-1132017719', 'comment_created': datetime.datetime(2022, 6, 21, 11, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902506988, 'comment_body': ""While running tests, I'm getting `TimeoutException` due to extra check, Now it's working fine, I'll remove that line :+1: \r\n```py\r\ndef test_restoring_deleted_device(self):\r\n...\r\n...       \r\n      except TimeoutException:\r\n            self.fail('Failed saving device')\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902600321, 'comment_body': ""> Thanks for the suggestion, I've already changed this in my local env, Will push soon :)\r\n\r\nAcc to https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374, `_get_device_connection` method now only return either `device_connection` object or `None` so I think we can now safely remove `try-except` block from the code."", 'comment_created': datetime.datetime(2022, 6, 21, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902607625, 'comment_body': ""You're right, we should do with .`filter` as you've mention above https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374"", 'comment_created': datetime.datetime(2022, 6, 21, 13, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902987581, 'comment_body': 'Update : I have moved server settings in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/fe920713890500538d8963c338bae610146166fd', 'comment_created': datetime.datetime(2022, 6, 21, 19, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902996678, 'comment_body': 'I did this condition check to solve https://github.com/openwisp/openwisp-monitoring/issues/399, later found it is due to something else so removed in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/b60c7b8408ec23f43a6769a7e71f11006f2c5f21', 'comment_created': datetime.datetime(2022, 6, 21, 19, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905764504, 'comment_body': 'I would log a more descriptive warning here. \r\n```suggestion\r\n            logger.warning(f\'Failed to get a working DeviceConnection for ""{device}"", iperf check skipped!\')\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 6, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905766348, 'comment_body': ""`AbstractDeviceConnection.connect` returns the working connection \r\nhttps://github.com/openwisp/openwisp-controller/blob/2504eaaaf972c9f9ff9d51a661735d6f1a9d0080/openwisp_controller/connection/base/models.py#L319-L331\r\n\r\nYou can refactor this as following: \r\n```suggestion\r\n        # The DeviceConnection could fail if the management tunnel is down.\r\n        if not device_connection.connect():\r\n            logger.warning(f'{device}: SSH connection is not working, Iperf skipped!')\r\n            return\r\n```\r\n\r\nI think openwisp-controller already takes cares of authentication errors. Can you double check this and confirm?"", 'comment_created': datetime.datetime(2022, 6, 24, 6, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905776864, 'comment_body': ""If we have a non-zero exit code, shouldn't we log an error here? E.g. what if the iperf client was not installed on the device. "", 'comment_created': datetime.datetime(2022, 6, 24, 7, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905785454, 'comment_body': 'Right now, you are writing `1`s and `0`s to the influxdb database depending whether the iperf check was successful or not. What if the TCP check passes but the UDP encountered an error? ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807556, 'comment_body': 'This implementation seems wrongs to me. You are ignoring the results from UDP tests. This is what I receive from the iperf command \r\n\r\n**TCP**\r\n```\r\n""sum_sent"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.000194,\r\n    ""seconds"":\t10.000194,\r\n    ""bytes"":\t63045632,\r\n    ""bits_per_second"":\t50435527.150773272,\r\n    ""retransmits"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n""sum_received"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.00187,\r\n    ""seconds"":\t10.00187,\r\n    ""bytes"":\t63044880,\r\n    ""bits_per_second"":\t50426474.249315374,\r\n    ""sender"":\ttrue\r\n},\r\n\r\n```\r\n\r\n**UDP**\r\n```\r\n""sum"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.002139,\r\n    ""seconds"":\t10.002139,\r\n    ""bytes"":\t49848848,\r\n    ""bits_per_second"":\t39878340.650697961,\r\n    ""jitter_ms"":\t0.092103039542695428,\r\n    ""lost_packets"":\t0,\r\n    ""packets"":\t34426,\r\n    ""lost_percent"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n```\r\n\r\nWas there a discussion that I am forgetting about ignoring ignoring bits/second for UDP test? Since, we are doing both tests, we should store value for both of them. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807829, 'comment_body': '@nemesisdesign this requires your input. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905813758, 'comment_body': ""Why do we need to take `MEAN` here? Shouldn't this be similar to the `traffic` query? \r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/8823581c01ff8f62a9dec9d80f2ba21eb4d3bc0e/openwisp_monitoring/db/backends/influxdb/queries.py#L39-L47"", 'comment_created': datetime.datetime(2022, 6, 24, 7, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905814495, 'comment_body': 'Okay! üëçüèº ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905820989, 'comment_body': 'packet and packet loss in themselves are not useful metrics. I think `lost_percent` would be more useful to the users. \r\n\r\nWhat do you think @nemesisdesign @okraits ? ', 'comment_created': datetime.datetime(2022, 6, 24, 8, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905827459, 'comment_body': 'We can try to log the error from the output: \r\n\r\n```\r\n{\r\n        ""start"":        {\r\n                ""connected"":    [],\r\n                ""version"":      ""iperf 3.10.1"",\r\n                ""system_info"":  ""Linux openwrt-router 5.4.188 #0 Sat Apr 16 12:59:34 2022 mips""\r\n        },\r\n        ""intervals"":    [],\r\n        ""end"":  {\r\n        },\r\n        ""error"":        ""error - unable to connect to server: Connection refused""\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 8, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905974797, 'comment_body': 'I will check :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905975261, 'comment_body': 'Yes, it would be better to log an error here :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905976168, 'comment_body': ""I'm also thinking on this, I will do some research and try to implement different logic :+1: "", 'comment_created': datetime.datetime(2022, 6, 24, 11, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905978785, 'comment_body': 'Initially I have also this in my mind to store the result of UDP test that includes `(""bytes"", ""bits_per_second"")` but we already calculated this in TCP test. Do we need to store these fields in UDP test as well?\r\n', 'comment_created': datetime.datetime(2022, 6, 24, 11, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905979770, 'comment_body': 'Same question.', 'comment_created': datetime.datetime(2022, 6, 24, 11, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906019240, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 12, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906058371, 'comment_body': 'Opened : https://github.com/openwisp/openwisp-monitoring/issues/405', 'comment_created': datetime.datetime(2022, 6, 24, 13, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906862863, 'comment_body': ""> I'm also thinking on this, I will do some research and try to implement different logic +1\r\n\r\nCan we do something like if any (tcp, udp) of iperf get passed, we can store `iperf_result` field to 1 otherwise 0. For eg: \r\n\r\n```bash\r\n# If both test passed\r\n'values': {'iperf_result': 1, 'sent_bps': 1.49, 'received_bps': 1.49, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.01, 'packets': 898, 'lost_packets': 0, 'lost_percent': 0.0},\r\n# TCP passed UDP failed (previously all values was set to '0' including 'iperf_result'), Now :\r\n'values': {'iperf_result': 1, 'sent_bps': 1.5, 'received_bps': 1.5, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n# Both fails\r\n'values': {'iperf_result': 0, 'sent_bps': 0.0, 'received_bps': 0.0, 'sent_bytes': 0.0, 'received_bytes': 0.0, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n``` \r\n**Update :** Added this in [e178c10](https://github.com/openwisp/openwisp-monitoring/pull/394/commits/e178c1062aabced0ed3fbeca08d725ea9ce18bc3)"", 'comment_created': datetime.datetime(2022, 6, 26, 19, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 907723915, 'comment_body': 'TCP consumes more bandwidth for acks so the throughput can end up being smaller.\r\nIt could be useful to have both values.', 'comment_created': datetime.datetime(2022, 6, 27, 19, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 907737238, 'comment_body': ""let's keep lost_packets but calculate also the percentage of lost packets and show it that way to users, it should be better"", 'comment_created': datetime.datetime(2022, 6, 27, 19, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 911230925, 'comment_body': '```suggestion\r\nWhether `Iperf <#iperf-1>`_ checks are created automatically for devices. The devices must have ``SSH`` `access credential <link to access credentials in controller module>`_  & \r\n`iperf3 openwrt package <https://openwrt.org/packages/pkgdata/iperf3>`_ must be installed on the devices in order for this check to work.\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911233971, 'comment_body': ""@Aryamanz29 don't make these tables too wide. As you can observe here it is difficult to read. Please break the content into multiple lines. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911234828, 'comment_body': 'Especially here, I would break it into two more more lines, one for `int` and other for `float`. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911237693, 'comment_body': '**Nitpick**: Why to use a helper function here?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911238413, 'comment_body': ""Didn't we decide to not do this conversion here? Please correct me if I am wrong. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911239618, 'comment_body': 'Why not in Gbps?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911241075, 'comment_body': 'Is this a reminder? We should flip  it back to False, and set this value in settings.py', 'comment_created': datetime.datetime(2022, 6, 30, 16, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911243851, 'comment_body': 'This device should automatically get an iperf check according to the settings. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911245912, 'comment_body': 'I would refactor this test in following ways to make it more readable:\r\n\r\n1. change the subTest string to `Test device connection not working`\r\n2. set `dc.is_working` to `False` inside the subTest', 'comment_created': datetime.datetime(2022, 6, 30, 16, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911247389, 'comment_body': '```suggestion\r\n                f\'DeviceConnection for ""{device}"" is not working, iperf check skipped!\'\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911259766, 'comment_body': 'https://github.com/openwisp/openwisp-monitoring/blob/issue-385/iperf-check/openwisp_monitoring/check/classes/iperf.py#L109-L112', 'comment_created': datetime.datetime(2022, 6, 30, 17, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911263287, 'comment_body': ""It always comes out very small value when I changed to `Gbps`. We'll remove these manual conversions once https://github.com/openwisp/openwisp-monitoring/pull/397 get merged :+1: "", 'comment_created': datetime.datetime(2022, 6, 30, 17, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911704200, 'comment_body': 'Yes it should be `false`.', 'comment_created': datetime.datetime(2022, 7, 1, 7, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907075, 'comment_body': 'I used this to make `deviceconnection.connect()` easier to mock inside `test_iperf.py`.', 'comment_created': datetime.datetime(2022, 7, 1, 12, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907644, 'comment_body': ""I'll update :+1: "", 'comment_created': datetime.datetime(2022, 7, 1, 12, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 915687006, 'comment_body': '@Aryamanz29, I asked you not to you such wide table in the last review. The ReST renderer expects to new lines to render a blank line. \r\n\r\nE.g.\r\n\r\n```rest\r\nline1 \r\nline2 \r\n```\r\n\r\nwill appear as \r\n\r\n```\r\nline1 line2\r\n```\r\n\r\nYou should also review the rendered output on GitHub. I generally check my work on https://livesphinx.herokuapp.com, you can try that too.  ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915689090, 'comment_body': 'I would break this into two lines. This is not a hard rule, but try to limit a line to 110 characters. ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915692482, 'comment_body': '```suggestion\r\nThis check is **disabled by default**. You can enable auto creation of this check by setting the\r\n`OPENWISP_MONITORING_AUTO_IPERF <#OPENWISP_MONITORING_AUTO_IPERF>`_ to ``True``.\r\n\r\nIt also supports tuning of various).\r\n\r\nYou can also change the parameters used for iperf checks (e.g. timing, buffers, protocols, etc.) using the\r\n`OPENWISP_MONITORING_IPERF_CHECK_CONFIG <#OPENWISP_MONITORING_IPERF_CHECK_CONFIG>`_ setting.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 9, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695216, 'comment_body': 'Always use relative  hyperlinks \r\n\r\n```suggestion\r\n Follow the steps in `""How to configure push updates"" section of  the openwisp-controller documentation <https://github.com/openwisp/openwisp-controller#how-to-configure-push-updates>`_ to allow SSH access to \r\n you device from OpenWISP.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695430, 'comment_body': ""Isn't it **OpenWRT SSH** ?\r\n\r\n```suggestion\r\n**Note:** Make sure device connection is enabled & working with right update strategy i.e. ``OpenWRT SSH``.\r\n```"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697414, 'comment_body': '```suggestion\r\nFor example:\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697901, 'comment_body': 'We should also point it out here to configure the celery beat. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915699905, 'comment_body': ""I don't think we need to point out here that the device needs a working SSH connection here. \r\n\r\nSomething like this would work fine \r\n\r\n```\r\nThis setting allows you to choose whether `iperf <#iperf-1>`_ checks should be\r\ncreated automatically for newly registered devices. It's disabled by default.\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915701397, 'comment_body': ""Let's remove reference to the configuration of Ping check. We will make users read the section even though we are explaining everything here. "", 'comment_created': datetime.datetime(2022, 7, 7, 10, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915705234, 'comment_body': 'I would create a heading `Usage Instructions` and move this section under the sub-heading `How to configure iperf check`.  This is make it similar to REAMDE of openwisp-controller. \r\n\r\nWait for @nemesisdesign opinion before going ahead with this change. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 916233073, 'comment_body': 'After adding `|` to my table, it looks like this : \r\n\r\n![Screenshot from 2022-07-08 01-23-35](https://user-images.githubusercontent.com/56113566/177860603-acd2bc75-cd62-4ad4-b338-a208073e2b76.png)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 7, 19, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916234611, 'comment_body': 'Got it :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 19, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244480, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244614, 'comment_body': 'Yes :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916265071, 'comment_body': ""I am not sure I understood correctly but if you look at the result generated at https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#iperf-1, it doesn't look good (this heading is bigger than the one above), so anything better than that will be ok for me, I am pretty sure we have to give it a last round of refinement anyway @pandafy."", 'comment_created': datetime.datetime(2022, 7, 7, 20, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 916890810, 'comment_body': 'Improved docs :+1: ', 'comment_created': datetime.datetime(2022, 7, 8, 14, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 917277808, 'comment_body': '`OPENWISP_MONITORING_CHECKS` should go here and be inferred from `CHECK_CLASSES` automatically, eg:\r\n\r\n```python\r\nCHECKS_LIST = list(dict(CHECK_CLASSES).keys())\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 15, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 918012397, 'comment_body': '- Added `CHECKS_LIST` in `checks/settings.py` and remained same celery beat config for **ping** and **config applied** check. \r\n- Added instructions in  `How to configure iperf check` to configure celery beat for **iperf** check.\r\n- Raise exception if check is `ImproperlyConfigured`\r\n![Screenshot from 2022-07-11 19-15-08](https://user-images.githubusercontent.com/56113566/178290155-fd900676-f6b4-4e58-a1f6-ea164861960e.png)', 'comment_created': datetime.datetime(2022, 7, 11, 14, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918272675, 'comment_body': ""Alternate option  : \r\n```py\r\nCHECKS_DICT = get_settings_value('CHECK_DICT', dict((check[::-1] for check in CHECK_CLASSES)))\r\n# {'Ping': 'openwisp_monitoring.check.classes.Ping', 'Configuration Applied': 'openwisp_monitoring.check.classes.ConfigApplied', 'Iperf': 'openwisp_monitoring.check.classes.Iperf'}\r\n```"", 'comment_created': datetime.datetime(2022, 7, 11, 19, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918273373, 'comment_body': 'Here, we can add :\r\n```py\r\nCHECKS_LIST = list(CHECKS_DICT.values())\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 19, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918275963, 'comment_body': 'Instead of hard coding check index here, We could use `CHECK_DICT` :\r\n```py\r\n    if checks is None:\r\n        # Executes only auto checks ie. ping and config applied\r\n        checks = [CHECKS_DICT[\'Ping\'], CHECKS_DICT[\'Configuration Applied\']]\r\n\r\n    # Checks that are defined in celery beat configuration\r\n    if not isinstance(checks, list):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be of type ""list""\')\r\n    if not all(check_path in CHECKS_LIST for check_path in checks):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be in {CHECKS_LIST}\')\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 11, 19, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918865697, 'comment_body': 'Why is this removed? ', 'comment_created': datetime.datetime(2022, 7, 12, 11, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918868713, 'comment_body': ""```suggestion\r\n    CELERY_BEAT_SCHEDULE = {\r\n        # Other celery beat configurations\r\n\r\n        # Celery beat configuration for iperf check\r\n        'run_iperf_checks': {\r\n            'task': 'openwisp_monitoring.check.tasks.run_checks',\r\n            # https://docs.celeryq.dev/en/latest/userguide/periodic-tasks.html#crontab-schedules\r\n            # Executes check every 5 mins from 00:00 AM to 6:00 AM (night)\r\n            'schedule': crontab(minute='*/5', hour='0-6'),\r\n            # Iperf check path\r\n            'args': (['openwisp_monitoring.check.classes.Iperf'],),\r\n            'relative': True,\r\n        }\r\n    }\r\n```"", 'comment_created': datetime.datetime(2022, 7, 12, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918920897, 'comment_body': '**nitpick:** constants should come before any function definition. ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918931330, 'comment_body': 'why not move these mocks as decorators like it is done for other tests? ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919153018, 'comment_body': ""Why don't we set this to `None` here? Then, we won't need to pass `None` argument in the celery beat configuration. \r\n\r\nAfter deploying this to the demo system, I found that the iperf check was running every 5 minutes. It was because the existing celery beat configuration for `run_checks` command  didn't passed the `None` argument. \r\n\r\nhttps://github.com/openwisp/ansible-openwisp2/blob/7c51773114d3cb9e0ae6a0c312c3f95e403b84ef/templates/openwisp2/settings.py#L231-L234\r\n\r\nWe want to be least destructive to existing systems. Also, it is wiser to have a non-mutable default parameter. "", 'comment_created': datetime.datetime(2022, 7, 12, 16, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919181343, 'comment_body': 'I think this comment is outdated. ', 'comment_created': datetime.datetime(2022, 7, 12, 16, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919202793, 'comment_body': 'Initially I did this, but what if we run management command `run_checks`, In that case it will only execute **ping** and **config applied** check instead of executing all checks in the development.', 'comment_created': datetime.datetime(2022, 7, 12, 16, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919208793, 'comment_body': 'We can modify the management command to pass all three checks in the arguments. \r\n\r\nRunning all three checks is not a standard case here. Running `ping` and `config` checks is the standard case. \r\n\r\nIf you want to provide configurability to users, you can additionally allow passing the check dotted path as arguments to the run_checks command as follows: \r\n\r\n```\r\n./manage.py run_checks openwisp_monitoring.check.classes.Iperf,openwisp_monitoring.check.classes.ConfigApplied\r\n```\r\n\r\nBut, this is not our goal now. ', 'comment_created': datetime.datetime(2022, 7, 12, 17, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919228751, 'comment_body': ""By mistake üòÖ I'll add :+1: "", 'comment_created': datetime.datetime(2022, 7, 12, 17, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919261044, 'comment_body': 'I did this because if I use decorator style mocks for `test_iperf_check` (which consists of various subTests) then for every subTests I\'m getting additive `mock_method` call counts (It includes method calls from previous subTest) which I thought is not a good idea.\r\n**For eg:**\r\n```py\r\n    @patch.object(Iperf, \'_exec_command\')\r\n    @patch.object(Iperf, \'_get_iperf_servers\', return_value=[\'iperf.openwisptestserver.com\'])\r\n    @patch.object(iperf_logger, \'warning\')\r\n    def test_iperf_check(self, mock_warn, mock_get_iperf_servers, mock_exec_command):\r\n        check, _ = self._create_iperf_test_env()\r\n        error = ""ash: iperf3: not found""\r\n        tcp_result = loads(RESULT_TCP)[\'end\']\r\n        udp_result = loads(RESULT_UDP)[\'end\'][\'sum\']\r\n\r\n        with self.subTest(\'Test iperf3 is not installed on the device\'):\r\n                mock_exec_command.side_effect = [(error, 127)]\r\n                with patch.object(iperf_logger, \'warning\') as mock_warn:\r\n                    check.perform_check(store=False)\r\n                    mock_warn.assert_called_with(\r\n                        f\'Iperf3 is not installed on the ""{self.device}"", error - {error}\'\r\n                    )\r\n                self.assertEqual(mock_warn.call_count, 1)\r\n                self.assertEqual(mock_exec_command.call_count, 1)\r\n                mock_get_iperf_servers.assert_called_once_with(\r\n                    self.device.organization.id\r\n                )\r\n        with self.subTest(\'Test iperf check passes in both TCP & UDP\'):\r\n                mock_exec_command.side_effect = [(RESULT_TCP, 0), (RESULT_UDP, 0)]\r\n                ...\r\n                ...\r\n\r\n                self.assertEqual(mock_warn.call_count, 0)\r\n                # AssertionError: 1 != 0 (Includes call count from previous subTest, Actual call 1)\r\n                self.assertEqual(mock_exec_command.call_count, 2)\r\n                # AssertionError: 3 != 2 (Same here, But exec_command actually called 2 times)\r\n    \r\n``` ', 'comment_created': datetime.datetime(2022, 7, 12, 18, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 920330832, 'comment_body': 'This test does not have any user, hence no notification is created. \r\n\r\nCreate an admin user with \r\n```\r\nself._create_admin()\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 17, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 921554871, 'comment_body': '`Todo `: Change this link after PR merge', 'comment_created': datetime.datetime(2022, 7, 14, 20, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 922313899, 'comment_body': ""Let's move all these images into the 1.1 directory please:\r\nhttps://github.com/openwisp/openwisp-monitoring/tree/docs/docs/1.1\r\nThis is needed so that if in version 1.2 we change the look of the UI, we can upload new screenshot for the 1.2 version without affecting the docs for the 1.1 version."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922314175, 'comment_body': ""let's try to break long lines please"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922320756, 'comment_body': ""I believe it's better to be explicit here and specify the ping and config_applied checks"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922324487, 'comment_body': ""I believe that if `checks` is `None` we should execute all the checks and not skip a particular check like we are doing here,  This is not consitent.\r\n\r\nMoreover, the check list can be changed by users, so the order may not be in the one we expect here, this is not robust.\r\n\r\nSo please let's remove this."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922325814, 'comment_body': ""I know that this is the output of iperf, but it's nice to have it more readable.\r\nCan you please re-format these JSON strings so they're more readable and have 4 spaces indentation?"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922349492, 'comment_body': ""we cannot do this because if the connection fails because the device is temporarily offline, then when it comes back up this flag will still be false, because SSH connections right now are tried by the system only on configuration changes, so the following can happen:\r\n\r\n- a device goes offline\r\n- iperf check runs, tries SSH connection, but fails, `is_working` is set to False by the system\r\n- the device comes back online, but no config change is done, so is_working stays False because the system hasn't tried to connect to it yet\r\n- iperf check runs again, but since `is_working` is still False, the check is not executed\r\n\r\nSo let's remove this filter."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 923036134, 'comment_body': 'üëç', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923036228, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923037224, 'comment_body': ""You're right, I'll remove `is_working` from filter :+1: "", 'comment_created': datetime.datetime(2022, 7, 18, 7, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923076855, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 8, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 924836785, 'comment_body': 'In this PR, we should also allow configuring the `bitrate` option. The default value for bitrate in UDP mode is small which leads to insignificant results from iperf. \r\n\r\nWe can leave other options for later in https://github.com/openwisp/openwisp-monitoring/issues/416', 'comment_created': datetime.datetime(2022, 7, 19, 18, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 924837883, 'comment_body': 'I think we should set bitrate on UDP to default to 10 MB and recommend users to tweak this according to their needs.\r\nOn TCP bitrate can default to 0 (unlimited).', 'comment_created': datetime.datetime(2022, 7, 19, 18, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925359967, 'comment_body': 'I would add a comment here explaining that since all three `username`, `password` and `rsa_public_key` is required for authentication to work, we only check for `username` here. ', 'comment_created': datetime.datetime(2022, 7, 20, 9, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925360323, 'comment_body': ""```suggestion\r\n    'rsa_public_key': {\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925361396, 'comment_body': ""```suggestion\r\n        # Exit code 127 : command doesn't exist\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925371059, 'comment_body': 'We use `app_settings` to distinguish between app and project settings (django.conf.settings). \r\n```suggestion\r\nfrom .. import settings as app_settings\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 9, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925419463, 'comment_body': ""I would declare the common mocks with decorators to reduce code duplicity. \r\n```suggestion\r\n    @patch.object(Iperf, '_get_iperf_servers', return_value=['iperf.openwisptestserver.com'])\r\n    @patch.object(Iperf, '_exec_command', side_effect=[(RESULT_TCP, 0), (RESULT_UDP, 0)])\r\n    @patch.object(iperf_logger, 'warning')\r\n    def test_iperf_check_auth_config(self, mock_warn, mock_exec_command, mock_get_iperf_servers):\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 10, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925425064, 'comment_body': 'After removing common mocks, I would update this to \r\n\r\n\r\n```suggestion\r\n            with patch.object(\r\n                settings, \'IPERF_CHECK_CONFIG\', iperf_config\r\n            # It is required to mock ""Iperf.schema"" here so that it \r\n            # uses the updated configuration from ""IPERF_CHECK_CONFIG"" setting.\r\n            ), patch.object(Iperf, \'schema\', get_iperf_schema()):\r\n```\r\n\r\nI have added a comment there because it was not entirely clear from the code why the `Iperf.schema` is mocked. Only after tinkering of code, I realised the reason. The comment will prevent us from making unnecessary efforts in the future. ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925426154, 'comment_body': 'After completion of each sub-test, reset the mocks with the following code: \r\n\r\n```suggestion \r\n        mock_exec_command.reset_mock()\r\n        mock_warn.reset_mock()\r\n        mock_get_iperf_servers.reset_mock()\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 10, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427096, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427263, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925428810, 'comment_body': 'This entire block has been repeated 3 times in the file. Can we move these assertions to an internal method of the test class and call it wherever required? ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925607910, 'comment_body': 'Thanks !', 'comment_created': datetime.datetime(2022, 7, 20, 13, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 927586330, 'comment_body': 'the indentation is not right here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927586538, 'comment_body': ""aren't we missing the instructions to run the iperf check?"", 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927587808, 'comment_body': '```suggestion\r\nIperf authentication\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927588695, 'comment_body': '```suggestion\r\nBy default iperf check runs without any kind of **authentication**,\r\nin this section we will explain how to configure **RSA authentication** \r\nbetween the **client** and the **server** to restrict connections\r\nto authenticated clients.\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927589925, 'comment_body': '```suggestion\r\nAfter running the commands mentioned above, the public key will be stored in ``public.pem`` \r\n```\r\n\r\nKeep it short, apply a similar change also to ``private_not_protected.pem``, I would also rename that as `private_key.pem`, while I would rename `public.pem` to `public_key.pem`.', 'comment_created': datetime.datetime(2022, 7, 22, 12, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927591635, 'comment_body': 'indentation is wrong here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927592482, 'comment_body': 'what is `default`?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927595377, 'comment_body': 'We already have a setting to configure iperf, why are you adding a new one?\r\n\r\nCan we compress everything in one setting?\r\n\r\nEg:\r\n\r\n```python\r\nOPENWISP_MONITORING_IPERF = {\r\n    \'a9734710-db30-46b0-a2fc-01f01046fe4f\': [\r\n        {\r\n            \'host\': [\'iperf1.openwisp.io\', \'iperf2.openwisp.io\'],\r\n            \'username\': \'iperfuser\',\r\n            \'password\': \'iperfpassword\',\r\n            \'rsa_public_key\': (\r\n""""""\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwuEm+iYrfSWJOupy6X3N \r\ndxZvUCxvmoL3uoGAs0O0Y32unUQrwcTIxudy38JSuCccD+k2Rf8S4WuZSiTxaoea \r\n6Du99YQGVZeY67uJ21SWFqWU+w6ONUj3TrNNWoICN7BXGLE2BbSBz9YaXefE3aqw \r\nGhEjQz364Itwm425vHn2MntSp0weWb4hUCjQUyyooRXPrFUGBOuY+VvAvMyAG4Uk \r\nmsapnWnBSxXt7Tbb++A5XbOMdM2mwNYDEtkD5ksC/x3EVBrI9FvENsH9+u/8J9Mf \r\n2oPl4MnlCMY86MQypkeUn7eVWfDnseNky7TyC0/IgCXve/iaydCCFdkjyo1MTAA4 \r\nBQIDAQAB\r\n"""""")\r\n            \'client_options\': {\r\n                \'port\': \'6209\',\r\n                \'udp\': {\r\n                    \'bitrate\': \'20M\'\r\n                },\r\n                \'tcp\': {\r\n                    \'bitrate\': \'0\'\r\n                }\r\n            }\r\n        }\r\n    ],\r\n}\r\n``` \r\n\r\nDoes it make sense?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 932113139, 'comment_body': 'Done üëç', 'comment_created': datetime.datetime(2022, 7, 28, 11, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932117536, 'comment_body': 'Sure :)', 'comment_created': datetime.datetime(2022, 7, 28, 11, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932122726, 'comment_body': 'I made it to look consistent with [`OPENWISP_MONITORING_PING_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring#openwisp_monitoring_ping_check_config), Now I have changed `iperf config setting` according to https://github.com/openwisp/openwisp-monitoring/issues/418', 'comment_created': datetime.datetime(2022, 7, 28, 11, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932125477, 'comment_body': 'Yes, it would be better to have a single setting for `iperf check` :+1: ', 'comment_created': datetime.datetime(2022, 7, 28, 11, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932202486, 'comment_body': 'I think it is mention in [`iperf-check#how-to-configure-iperf-check`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#3-configure-iperf-settings)', 'comment_created': datetime.datetime(2022, 7, 28, 13, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933005488, 'comment_body': 'This looks incorrect to me', 'comment_created': datetime.datetime(2022, 7, 29, 8, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933008280, 'comment_body': 'Do we need this @nemesisdesign ? ', 'comment_created': datetime.datetime(2022, 7, 29, 8, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933010148, 'comment_body': 'I think we should link this page instead https://openwisp.io/docs/user/configure-push-updates.html', 'comment_created': datetime.datetime(2022, 7, 29, 8, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933033617, 'comment_body': 'nitpick, can you please remove this blank line? ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933035363, 'comment_body': 'Can you please add a docstring here explaining this method ?', 'comment_created': datetime.datetime(2022, 7, 29, 9, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933046950, 'comment_body': 'The order should be same as `trace_order` otherwise, it will show incorrect labels. ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933108012, 'comment_body': 'Did you try using `connectgaps: true` instead of doing this as suggested in example shared by Federico? I was able to achieve similar results with that option locally. Can you double check that please? ', 'comment_created': datetime.datetime(2022, 7, 29, 10, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933142183, 'comment_body': 'I and @nemesisdesign had meet in which he suggested me to add this about `iperf charts` in the `README`. ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933144201, 'comment_body': 'ploty `connectgaps` property only works for scatter charts. More info : https://plotly.com/python-api-reference/generated/plotly.graph_objects.Scatter.html', 'comment_created': datetime.datetime(2022, 7, 29, 11, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933145799, 'comment_body': 'okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 7, 29, 11, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933147324, 'comment_body': 'thanks! I will update :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933147488, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933198121, 'comment_body': 'Sure üëç', 'comment_created': datetime.datetime(2022, 7, 29, 12, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933199473, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2022, 7, 29, 12, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 935156010, 'comment_body': 'Okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 8, 2, 6, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 937864645, 'comment_body': ""respect the spacing (I wish the linter warned about this!):\r\n\r\n```\r\nif (unit.includes('+')) {\r\n`"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937864912, 'comment_body': 'same here and below', 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937867677, 'comment_body': ""let's do those changes to the charts that we discussed (have bandwidth and transfer as simple lines with no fill and have 2 lines in each chart, one for TCP and one for UDP), then update the README here and screenshots."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937870690, 'comment_body': ""I don't understand, isn't this something that depends on a specific server? Why do we have a global setting?"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937874363, 'comment_body': ""definitely we cannot link files which are published in branches we are going to delete, please double check the rest of the document for similar problems, we can point to master here, even thought it won't work until published, but that's ok."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875205, 'comment_body': 'this change is unnecessary, please revert it', 'comment_created': datetime.datetime(2022, 8, 4, 14, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875935, 'comment_body': 'shall we default this to 30 MB? I think 10 is quite low.', 'comment_created': datetime.datetime(2022, 8, 4, 14, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937878521, 'comment_body': 'please break lines and maintain line length consistent with the rest of the document', 'comment_created': datetime.datetime(2022, 8, 4, 14, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937880972, 'comment_body': 'make sure spacing around parenthesis is consistent with the rest of the JS code', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881165, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881327, 'comment_body': 'double check all blocks please', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937889998, 'comment_body': ""isn't the final return statment suppposed to be updated here??\r\n\r\n```\r\nreturn self._time_crossed(time) and value_crossed\r\n```\r\n\r\nIs not taking in consideration the related field.\r\n\r\nWhat if value_crossed is False but the related value is crossed?\r\n\r\nWhat about `if self.tolerance == 0:`???\r\n\r\nSo now I have some more basic quesitons:\r\n\r\n1. Why was this kind of change, which is very delicate, introduced in this huge PR? Do we have to introduce this change or can we make the iperf check work without it for now? \r\n\r\n2. Looking at this code, I am pretty scared to merge it! I do not want to do this.\r\n@Aryamanz29 can you extract these commits into a separate branch please? I want to merge the rest of the work but not this right now, I think it needs more careful thought."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937890192, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938006217, 'comment_body': ""Linter didn't warn ü§î I'll check all my code manually :+1: \r\n\r\n![Screenshot from 2022-08-04 21-54-41](https://user-images.githubusercontent.com/56113566/182901953-77fbb3ee-110b-4660-ba2b-c2d5fdb60f2b.png)\r\n"", 'comment_created': datetime.datetime(2022, 8, 4, 16, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938205036, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 4, 20, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938249501, 'comment_body': 'Yes it should be defined in [`OPENWISP_IPERF_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config)', 'comment_created': datetime.datetime(2022, 8, 4, 21, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938256975, 'comment_body': ""1. Yes, we can make `iperf check` work without this feature (check will run without any `alertsettings`)\r\n2. I'll remove `alert_on_related_field` feature from this PR as of now & will open a separate PR :+1:"", 'comment_created': datetime.datetime(2022, 8, 4, 21, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938700817, 'comment_body': ""why there's both `rsa_public_key` and `rsa_public_key_path`? Are users supposed to use either one or the other?\r\nHow does it work? Was this meant to be the private key?"", 'comment_created': datetime.datetime(2022, 8, 5, 10, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938721204, 'comment_body': ""This is the location where the `client (ie. openwrt device)` stores it's `rsa_public_key` for `iperf check`. By default, it is `/tmp/iperf-rsa-public.pem` and this path is required for iperf3 auth, but we can also change this using [OPENWISP_IPERF_CHECK_CONFIG](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config). More info : https://github.com/openwisp/openwisp-monitoring/issues/414#issuecomment-1189408176"", 'comment_created': datetime.datetime(2022, 8, 5, 11, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938723543, 'comment_body': 'Iperf command basically doing  `f\'echo ""{rsa_public_key}"" > {rsa_public_key_path}` and after completion of check removing key from the device `rm {rsa_public_key_path}`', 'comment_created': datetime.datetime(2022, 8, 5, 11, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938733455, 'comment_body': ""`/tmp/iperf-public-key.pem` does not need to be configurable at this level, there's no usefulness in this, just set `/tmp/iperf-public-key.pem` to a variable and use the variable throughout the rest of the implementation."", 'comment_created': datetime.datetime(2022, 8, 5, 11, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938777476, 'comment_body': 'Ok :+1: ', 'comment_created': datetime.datetime(2022, 8, 5, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}]","[{'commit_sha': '506f044bfacdbf2e57448e4dd6f796b16fe764d0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd112b85b34fb0ff7ada391849cdc8be9d36743', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47467ef97bc91783babd7f8ffcaa9a06fd23f45', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488990b941bab99f046237bddf061d6a665d95de', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f890ba95c3291bff34875dad9213c00dfd345b65', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ec0dc06db4b7d14dce066b4210ca83f32fd8f0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a79a5dff088d7e1d2aef7d339c9aef0b201911', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f63fcaa77527c3a24efe88be179339a412b4dc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a346efc3fafe216a30b5a0c957f594d822c704d', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9383f3a340945d316f3f4d20e7f3fdce7cbe1b97', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7dfd5fd259da12054d149fa60edee448b68eba', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d98a66d46039c27f3048af2366aec579e681cc4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3050edf18d15c9679e0fe4047883d28ad502ac87', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efdc70a65c784586df0ef7e5e162f8c84b4c914c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f65c6adcfd92abcf5c17706796d98dd3549a74e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7396e79b0c9f8b7ae0c211bdeb025aba5737325f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b881e0616d770710cf5500dd460e5db7fd7e48b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d732bb3310db85781acc5c198541386f1373ba6', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c488abc5a9ba560c03b0a649b0502600624911a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89563034ee0244f5849b1e9ae1f922079968ad2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c75428e79debde7016665a23b9e88383c848d2f9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a9eef80a7f2d0619ef806e8f6880c9d569762a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59089944b285b38ec16847926ea16bb035c1c5c4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec80f2f7db65f89252a328f617cd565e0b46c07c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50921cbff514ff58034a6e5954890e9e5b69eca2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56543bf191c7df6d649eeff734fe4e98d8b9a0af', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef433eaa6b4f59e9ea9ceea05c7d742a2d8301bc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38991a9914a3abab5f00be688624b59706734d59', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b607da46f3041735fcbce771c9733847af4444', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce23bd0c38068dfcad9b993da39a83c7f5566197', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f9220243c4a3481bef065e5a0b48fec9da00db', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '840029189f6fa20ae0d371cabaa915ba25288b75', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b31104284172bb059d7d4f11956f7f1a8417e1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d472aa1eaa9b312c391847094dc3c05b270101', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2abe5d1f14d28391950375886484d04d76d67bd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391537e80877680fd06f7894aee7fa742c94a4e4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9810d2470b788385018e57fd93a34c8536a761fb', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd219e9f667377d616e7935613b4f0c6039dc675a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '808288118df92cff2bc444e9235af5d84746ff46', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d6061e4d6bee24e7e6d9c92a86f18e2f596bd1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df31203af6be0dc0876d38b683d67037163eda89', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02100af795a1c46c876aadfacf284eb1b43e1c2f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27732e6652cbca6ccc41e455161a2891f9bb1948', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9b82670d654d62ea86147a65904701e5a2bdf9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1bc269b0950f0f34fbaaacd5b7704ee3fa2c2e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ddce9d5df2bf136cbff09037aab5bc3fa67ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa74e9960a59bb83d7daf1a9a7568b78af77451f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d71d7c6009d30b285069fdb06ad8dfc543e2b91', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50256d20778eec1cc747ced27d54aa686a1e4f6b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01cd70e1de0202efcbc4fac054249258605e2e41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7b6cb1d96f90d3c14b5a3202e11be68816b0860', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d86f05471de61a7b6e7d67ddc9f2d1e4b17ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a4f9877a0e8ad6d2d55d4c77f2acd818080d1e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4196b0a077c6fc0a1422eca2ef741032d17f41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ce4a024351a43a3842e8030f2a385e7705a802', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '719932e8593b19c285e96323bfcc527abd6538cd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '631d2bf6db793e35f1129885b813e33c924bdebf', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3524a68f74762991cf4f9280605eef84bea68692', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe40f82ea7a3af6df4e0babc6198b5cb33f7501', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12d9b5f72c94dc418355099dedb73b2d5d35413', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e23d914c1ba9746c9e820eb1a5e255eb26fa73', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13b6416f9013e2e4759a28ed33e43d8c905b5134', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1dd84e9be003e17fcfc694a37c04c2994243fc', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9213aafa268485be75a32c36fc9bd349d831a755', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330
958876982,[feature] Implement Iperf3 check #385,"- Added initial code for **Iperf3 check class.**
- Added **tests** for check class.
- Added **device connection** logic.
- Added **charts & metric (TCP & UDP mode)**.

## `Steps to test`
1. Make sure your client **(openwrt-device)** and server both have [Iperf3](https://iperf.fr/iperf-download.php), [Openwrt Iperf3 package](https://openwrt.org/packages/pkgdata/iperf3)  installed.
2.  Do check **the credential section of the device** _(It must be enabled and working with the right update strategy, i.e., **ssh**)_.

![173354971-728cb1b4-4bf1-4d89-9c22-ce9b9b1e2bef](https://user-images.githubusercontent.com/56113566/173355074-3918d860-a4ad-4f84-bfa4-2c23a7e8d94e.png)

3.  In `tests/openwisp2/settings.py` configure:
```py
OPENWISP_MONITORING_IPERF3_SERVERS = {
    # Running on my local
    # Some Public Iperf3 Servers : https://iperf.fr/iperf-servers.php#public-servers
    # 'be63c4e5-a68a-4650-bfe8-733837edb8be': ['iperf.biznetnetworks.com'],
    'a9734710-db30-46b0-a2fc-01f01046fe4f': ['speedtest.uztelecom.uz'],
    # '<org-pk>': ['<ORG_IPERF3_SERVER>']
}

```
 **NOTE :** The host can be specified by **hostname, IPv4 literal, or IPv6 literal**
```
# for ex
              iperf3 -c iperf.biznetnetworks.com

              iperf3 -c 192.168.5.109

              iperf3 -c 2001:db8::1
```
4. Run `python3 manage.py run_checks` _(To run all checks manually)_.


![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `Demo`

https://user-images.githubusercontent.com/56113566/173353857-56b344f4-89d2-47d9-884a-32a472168f66.mp4

![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `TCP Charts`

![Screenshot from 2022-06-24 18-27-43](https://user-images.githubusercontent.com/56113566/175540716-145b7736-f8c1-4293-bfa1-9234a3ffb95a.png)

![Screenshot from 2022-06-24 11-51-01](https://user-images.githubusercontent.com/56113566/175475141-4f401c73-5198-490d-b6a1-a3932182051f.png)


## `UDP Charts`

![Screenshot from 2022-06-29 20-31-49](https://user-images.githubusercontent.com/56113566/176470082-4d94a537-9032-4f2a-b7e0-3f607ee67c5b.png)

![Screenshot from 2022-06-22 13-26-21](https://user-images.githubusercontent.com/56113566/174975685-6a101362-0132-4d88-a16f-486507f61280.png)

![Screenshot from 2022-06-22 13-26-25](https://user-images.githubusercontent.com/56113566/174975707-96a7b909-c709-4b6b-8982-33fa0e8a555d.png)

Closes #385
",True,394,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/394,https://github.com/openwisp/openwisp-monitoring/pull/394,closed,2633,43,20,64,20,163,1,1,[{'name': 'enhancement'}],2022-06-06 09:25:46+00:00,2022-08-09 12:39:49+00:00,5541243.0,"64 days, 3:14:03","[{'comment_id': 902362779, 'comment_body': ""It is a good thing that you have mentioned this and I guess this is only done for testing phase. But, this should go in project's settings.py (`tests/openwisp2/settings.py`). \r\nThis is application code that will be re-used by other people, we don't want to hard-code anything here. \r\n\r\nThis is a reminder to ourselves that we should move this to project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902395191, 'comment_body': ""I don't think we need to do conversion here. We should save raw values in `bits/second` in the database. We will do appropriate conversion when showing the data to the users. \r\nWe can leverage the work that would be done for https://github.com/openwisp/openwisp-monitoring/issues/87 \r\n\r\nI think it was already planned this way, @nemesisdesign can you please confirm? "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404374, 'comment_body': 'I would refactor this method like following \r\n\r\n```suggestion\r\n    def _get_device_connection(self, device):\r\n        """"""\r\n        Returns an active SSH DeviceConnection for a device.\r\n        """"""\r\n        openwrt_ssh = UPDATE_STRATEGIES[0][0]\r\n        device_connection = DeviceConnection.objects.filter(\r\n            device_id=device.id,\r\n            update_strategy=openwrt_ssh,\r\n            enabled=True,\r\n            is_working=True,\r\n        ).first()\r\n        return device_connection\r\n```\r\n\r\nAnd the update the logic that checks for `False` to check for `None`. ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404695, 'comment_body': 'This would break if a device has multiple `DeviceConnection` (which it can have by design, this broke on my local environment).', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902405061, 'comment_body': 'Why are we checking `device.monitoring.status`? ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902434921, 'comment_body': '@Aryamanz29 can you open an issue to make this command configurable? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902437683, 'comment_body': ""**Nitpick:** Let's always write the code to return early. E.g.\r\n\r\n```python\r\nif not device_connection:\r\n    logger.warn('')\r\n    return \r\n# rest of the logic\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 10, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902439981, 'comment_body': ""Let's only put the code that can raise exception in try-except block. I think only these lines can raise `ObjectDoesNotExist` exception here. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902442292, 'comment_body': 'What should trigger this alert? Is it going to be something like `if bandwidth falls below X Mbps, then send alert`. ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902444264, 'comment_body': '@Aryamanz29 can you share why this is needed? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902446835, 'comment_body': ""If any test will fail when `OPENWISP_MONITORING_AUTO_IPERF` is set to `False`, mock that setting in the TestCase. We find that many tests fail in ansible-openwisp2 and docker-openwisp because they rely on the project environment. Since, we ship tests with the application, we should ensure that they do their job without relying on the project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902484236, 'comment_body': ""Yes, I'm thinking of same we can leverage `traffic charts` adaptive size (https://github.com/openwisp/openwisp-monitoring/issues/87) in `Iperf` charts as well."", 'comment_created': datetime.datetime(2022, 6, 21, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902487431, 'comment_body': 'Sure üëç opened : https://github.com/openwisp/openwisp-monitoring/issues/398', 'comment_created': datetime.datetime(2022, 6, 21, 11, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490038, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490075, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902497466, 'comment_body': 'We can do that as well, but according to **possible outcomes** of the project \'\'If an Iperf server is down/busy we should trigger an alert"" (We need to investigate more about this)', 'comment_created': datetime.datetime(2022, 6, 21, 11, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902499363, 'comment_body': 'It is related to : https://github.com/openwisp/openwisp-monitoring/pull/309#issuecomment-1132017719', 'comment_created': datetime.datetime(2022, 6, 21, 11, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902506988, 'comment_body': ""While running tests, I'm getting `TimeoutException` due to extra check, Now it's working fine, I'll remove that line :+1: \r\n```py\r\ndef test_restoring_deleted_device(self):\r\n...\r\n...       \r\n      except TimeoutException:\r\n            self.fail('Failed saving device')\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902600321, 'comment_body': ""> Thanks for the suggestion, I've already changed this in my local env, Will push soon :)\r\n\r\nAcc to https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374, `_get_device_connection` method now only return either `device_connection` object or `None` so I think we can now safely remove `try-except` block from the code."", 'comment_created': datetime.datetime(2022, 6, 21, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902607625, 'comment_body': ""You're right, we should do with .`filter` as you've mention above https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374"", 'comment_created': datetime.datetime(2022, 6, 21, 13, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902987581, 'comment_body': 'Update : I have moved server settings in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/fe920713890500538d8963c338bae610146166fd', 'comment_created': datetime.datetime(2022, 6, 21, 19, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902996678, 'comment_body': 'I did this condition check to solve https://github.com/openwisp/openwisp-monitoring/issues/399, later found it is due to something else so removed in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/b60c7b8408ec23f43a6769a7e71f11006f2c5f21', 'comment_created': datetime.datetime(2022, 6, 21, 19, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905764504, 'comment_body': 'I would log a more descriptive warning here. \r\n```suggestion\r\n            logger.warning(f\'Failed to get a working DeviceConnection for ""{device}"", iperf check skipped!\')\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 6, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905766348, 'comment_body': ""`AbstractDeviceConnection.connect` returns the working connection \r\nhttps://github.com/openwisp/openwisp-controller/blob/2504eaaaf972c9f9ff9d51a661735d6f1a9d0080/openwisp_controller/connection/base/models.py#L319-L331\r\n\r\nYou can refactor this as following: \r\n```suggestion\r\n        # The DeviceConnection could fail if the management tunnel is down.\r\n        if not device_connection.connect():\r\n            logger.warning(f'{device}: SSH connection is not working, Iperf skipped!')\r\n            return\r\n```\r\n\r\nI think openwisp-controller already takes cares of authentication errors. Can you double check this and confirm?"", 'comment_created': datetime.datetime(2022, 6, 24, 6, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905776864, 'comment_body': ""If we have a non-zero exit code, shouldn't we log an error here? E.g. what if the iperf client was not installed on the device. "", 'comment_created': datetime.datetime(2022, 6, 24, 7, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905785454, 'comment_body': 'Right now, you are writing `1`s and `0`s to the influxdb database depending whether the iperf check was successful or not. What if the TCP check passes but the UDP encountered an error? ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807556, 'comment_body': 'This implementation seems wrongs to me. You are ignoring the results from UDP tests. This is what I receive from the iperf command \r\n\r\n**TCP**\r\n```\r\n""sum_sent"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.000194,\r\n    ""seconds"":\t10.000194,\r\n    ""bytes"":\t63045632,\r\n    ""bits_per_second"":\t50435527.150773272,\r\n    ""retransmits"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n""sum_received"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.00187,\r\n    ""seconds"":\t10.00187,\r\n    ""bytes"":\t63044880,\r\n    ""bits_per_second"":\t50426474.249315374,\r\n    ""sender"":\ttrue\r\n},\r\n\r\n```\r\n\r\n**UDP**\r\n```\r\n""sum"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.002139,\r\n    ""seconds"":\t10.002139,\r\n    ""bytes"":\t49848848,\r\n    ""bits_per_second"":\t39878340.650697961,\r\n    ""jitter_ms"":\t0.092103039542695428,\r\n    ""lost_packets"":\t0,\r\n    ""packets"":\t34426,\r\n    ""lost_percent"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n```\r\n\r\nWas there a discussion that I am forgetting about ignoring ignoring bits/second for UDP test? Since, we are doing both tests, we should store value for both of them. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807829, 'comment_body': '@nemesisdesign this requires your input. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905813758, 'comment_body': ""Why do we need to take `MEAN` here? Shouldn't this be similar to the `traffic` query? \r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/8823581c01ff8f62a9dec9d80f2ba21eb4d3bc0e/openwisp_monitoring/db/backends/influxdb/queries.py#L39-L47"", 'comment_created': datetime.datetime(2022, 6, 24, 7, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905814495, 'comment_body': 'Okay! üëçüèº ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905820989, 'comment_body': 'packet and packet loss in themselves are not useful metrics. I think `lost_percent` would be more useful to the users. \r\n\r\nWhat do you think @nemesisdesign @okraits ? ', 'comment_created': datetime.datetime(2022, 6, 24, 8, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905827459, 'comment_body': 'We can try to log the error from the output: \r\n\r\n```\r\n{\r\n        ""start"":        {\r\n                ""connected"":    [],\r\n                ""version"":      ""iperf 3.10.1"",\r\n                ""system_info"":  ""Linux openwrt-router 5.4.188 #0 Sat Apr 16 12:59:34 2022 mips""\r\n        },\r\n        ""intervals"":    [],\r\n        ""end"":  {\r\n        },\r\n        ""error"":        ""error - unable to connect to server: Connection refused""\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 8, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905974797, 'comment_body': 'I will check :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905975261, 'comment_body': 'Yes, it would be better to log an error here :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905976168, 'comment_body': ""I'm also thinking on this, I will do some research and try to implement different logic :+1: "", 'comment_created': datetime.datetime(2022, 6, 24, 11, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905978785, 'comment_body': 'Initially I have also this in my mind to store the result of UDP test that includes `(""bytes"", ""bits_per_second"")` but we already calculated this in TCP test. Do we need to store these fields in UDP test as well?\r\n', 'comment_created': datetime.datetime(2022, 6, 24, 11, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905979770, 'comment_body': 'Same question.', 'comment_created': datetime.datetime(2022, 6, 24, 11, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906019240, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 12, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906058371, 'comment_body': 'Opened : https://github.com/openwisp/openwisp-monitoring/issues/405', 'comment_created': datetime.datetime(2022, 6, 24, 13, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906862863, 'comment_body': ""> I'm also thinking on this, I will do some research and try to implement different logic +1\r\n\r\nCan we do something like if any (tcp, udp) of iperf get passed, we can store `iperf_result` field to 1 otherwise 0. For eg: \r\n\r\n```bash\r\n# If both test passed\r\n'values': {'iperf_result': 1, 'sent_bps': 1.49, 'received_bps': 1.49, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.01, 'packets': 898, 'lost_packets': 0, 'lost_percent': 0.0},\r\n# TCP passed UDP failed (previously all values was set to '0' including 'iperf_result'), Now :\r\n'values': {'iperf_result': 1, 'sent_bps': 1.5, 'received_bps': 1.5, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n# Both fails\r\n'values': {'iperf_result': 0, 'sent_bps': 0.0, 'received_bps': 0.0, 'sent_bytes': 0.0, 'received_bytes': 0.0, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n``` \r\n**Update :** Added this in [e178c10](https://github.com/openwisp/openwisp-monitoring/pull/394/commits/e178c1062aabced0ed3fbeca08d725ea9ce18bc3)"", 'comment_created': datetime.datetime(2022, 6, 26, 19, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 907723915, 'comment_body': 'TCP consumes more bandwidth for acks so the throughput can end up being smaller.\r\nIt could be useful to have both values.', 'comment_created': datetime.datetime(2022, 6, 27, 19, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 907737238, 'comment_body': ""let's keep lost_packets but calculate also the percentage of lost packets and show it that way to users, it should be better"", 'comment_created': datetime.datetime(2022, 6, 27, 19, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 911230925, 'comment_body': '```suggestion\r\nWhether `Iperf <#iperf-1>`_ checks are created automatically for devices. The devices must have ``SSH`` `access credential <link to access credentials in controller module>`_  & \r\n`iperf3 openwrt package <https://openwrt.org/packages/pkgdata/iperf3>`_ must be installed on the devices in order for this check to work.\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911233971, 'comment_body': ""@Aryamanz29 don't make these tables too wide. As you can observe here it is difficult to read. Please break the content into multiple lines. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911234828, 'comment_body': 'Especially here, I would break it into two more more lines, one for `int` and other for `float`. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911237693, 'comment_body': '**Nitpick**: Why to use a helper function here?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911238413, 'comment_body': ""Didn't we decide to not do this conversion here? Please correct me if I am wrong. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911239618, 'comment_body': 'Why not in Gbps?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911241075, 'comment_body': 'Is this a reminder? We should flip  it back to False, and set this value in settings.py', 'comment_created': datetime.datetime(2022, 6, 30, 16, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911243851, 'comment_body': 'This device should automatically get an iperf check according to the settings. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911245912, 'comment_body': 'I would refactor this test in following ways to make it more readable:\r\n\r\n1. change the subTest string to `Test device connection not working`\r\n2. set `dc.is_working` to `False` inside the subTest', 'comment_created': datetime.datetime(2022, 6, 30, 16, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911247389, 'comment_body': '```suggestion\r\n                f\'DeviceConnection for ""{device}"" is not working, iperf check skipped!\'\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911259766, 'comment_body': 'https://github.com/openwisp/openwisp-monitoring/blob/issue-385/iperf-check/openwisp_monitoring/check/classes/iperf.py#L109-L112', 'comment_created': datetime.datetime(2022, 6, 30, 17, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911263287, 'comment_body': ""It always comes out very small value when I changed to `Gbps`. We'll remove these manual conversions once https://github.com/openwisp/openwisp-monitoring/pull/397 get merged :+1: "", 'comment_created': datetime.datetime(2022, 6, 30, 17, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911704200, 'comment_body': 'Yes it should be `false`.', 'comment_created': datetime.datetime(2022, 7, 1, 7, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907075, 'comment_body': 'I used this to make `deviceconnection.connect()` easier to mock inside `test_iperf.py`.', 'comment_created': datetime.datetime(2022, 7, 1, 12, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907644, 'comment_body': ""I'll update :+1: "", 'comment_created': datetime.datetime(2022, 7, 1, 12, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 915687006, 'comment_body': '@Aryamanz29, I asked you not to you such wide table in the last review. The ReST renderer expects to new lines to render a blank line. \r\n\r\nE.g.\r\n\r\n```rest\r\nline1 \r\nline2 \r\n```\r\n\r\nwill appear as \r\n\r\n```\r\nline1 line2\r\n```\r\n\r\nYou should also review the rendered output on GitHub. I generally check my work on https://livesphinx.herokuapp.com, you can try that too.  ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915689090, 'comment_body': 'I would break this into two lines. This is not a hard rule, but try to limit a line to 110 characters. ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915692482, 'comment_body': '```suggestion\r\nThis check is **disabled by default**. You can enable auto creation of this check by setting the\r\n`OPENWISP_MONITORING_AUTO_IPERF <#OPENWISP_MONITORING_AUTO_IPERF>`_ to ``True``.\r\n\r\nIt also supports tuning of various).\r\n\r\nYou can also change the parameters used for iperf checks (e.g. timing, buffers, protocols, etc.) using the\r\n`OPENWISP_MONITORING_IPERF_CHECK_CONFIG <#OPENWISP_MONITORING_IPERF_CHECK_CONFIG>`_ setting.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 9, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695216, 'comment_body': 'Always use relative  hyperlinks \r\n\r\n```suggestion\r\n Follow the steps in `""How to configure push updates"" section of  the openwisp-controller documentation <https://github.com/openwisp/openwisp-controller#how-to-configure-push-updates>`_ to allow SSH access to \r\n you device from OpenWISP.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695430, 'comment_body': ""Isn't it **OpenWRT SSH** ?\r\n\r\n```suggestion\r\n**Note:** Make sure device connection is enabled & working with right update strategy i.e. ``OpenWRT SSH``.\r\n```"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697414, 'comment_body': '```suggestion\r\nFor example:\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697901, 'comment_body': 'We should also point it out here to configure the celery beat. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915699905, 'comment_body': ""I don't think we need to point out here that the device needs a working SSH connection here. \r\n\r\nSomething like this would work fine \r\n\r\n```\r\nThis setting allows you to choose whether `iperf <#iperf-1>`_ checks should be\r\ncreated automatically for newly registered devices. It's disabled by default.\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915701397, 'comment_body': ""Let's remove reference to the configuration of Ping check. We will make users read the section even though we are explaining everything here. "", 'comment_created': datetime.datetime(2022, 7, 7, 10, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915705234, 'comment_body': 'I would create a heading `Usage Instructions` and move this section under the sub-heading `How to configure iperf check`.  This is make it similar to REAMDE of openwisp-controller. \r\n\r\nWait for @nemesisdesign opinion before going ahead with this change. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 916233073, 'comment_body': 'After adding `|` to my table, it looks like this : \r\n\r\n![Screenshot from 2022-07-08 01-23-35](https://user-images.githubusercontent.com/56113566/177860603-acd2bc75-cd62-4ad4-b338-a208073e2b76.png)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 7, 19, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916234611, 'comment_body': 'Got it :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 19, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244480, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244614, 'comment_body': 'Yes :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916265071, 'comment_body': ""I am not sure I understood correctly but if you look at the result generated at https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#iperf-1, it doesn't look good (this heading is bigger than the one above), so anything better than that will be ok for me, I am pretty sure we have to give it a last round of refinement anyway @pandafy."", 'comment_created': datetime.datetime(2022, 7, 7, 20, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 916890810, 'comment_body': 'Improved docs :+1: ', 'comment_created': datetime.datetime(2022, 7, 8, 14, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 917277808, 'comment_body': '`OPENWISP_MONITORING_CHECKS` should go here and be inferred from `CHECK_CLASSES` automatically, eg:\r\n\r\n```python\r\nCHECKS_LIST = list(dict(CHECK_CLASSES).keys())\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 15, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 918012397, 'comment_body': '- Added `CHECKS_LIST` in `checks/settings.py` and remained same celery beat config for **ping** and **config applied** check. \r\n- Added instructions in  `How to configure iperf check` to configure celery beat for **iperf** check.\r\n- Raise exception if check is `ImproperlyConfigured`\r\n![Screenshot from 2022-07-11 19-15-08](https://user-images.githubusercontent.com/56113566/178290155-fd900676-f6b4-4e58-a1f6-ea164861960e.png)', 'comment_created': datetime.datetime(2022, 7, 11, 14, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918272675, 'comment_body': ""Alternate option  : \r\n```py\r\nCHECKS_DICT = get_settings_value('CHECK_DICT', dict((check[::-1] for check in CHECK_CLASSES)))\r\n# {'Ping': 'openwisp_monitoring.check.classes.Ping', 'Configuration Applied': 'openwisp_monitoring.check.classes.ConfigApplied', 'Iperf': 'openwisp_monitoring.check.classes.Iperf'}\r\n```"", 'comment_created': datetime.datetime(2022, 7, 11, 19, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918273373, 'comment_body': 'Here, we can add :\r\n```py\r\nCHECKS_LIST = list(CHECKS_DICT.values())\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 19, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918275963, 'comment_body': 'Instead of hard coding check index here, We could use `CHECK_DICT` :\r\n```py\r\n    if checks is None:\r\n        # Executes only auto checks ie. ping and config applied\r\n        checks = [CHECKS_DICT[\'Ping\'], CHECKS_DICT[\'Configuration Applied\']]\r\n\r\n    # Checks that are defined in celery beat configuration\r\n    if not isinstance(checks, list):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be of type ""list""\')\r\n    if not all(check_path in CHECKS_LIST for check_path in checks):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be in {CHECKS_LIST}\')\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 11, 19, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918865697, 'comment_body': 'Why is this removed? ', 'comment_created': datetime.datetime(2022, 7, 12, 11, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918868713, 'comment_body': ""```suggestion\r\n    CELERY_BEAT_SCHEDULE = {\r\n        # Other celery beat configurations\r\n\r\n        # Celery beat configuration for iperf check\r\n        'run_iperf_checks': {\r\n            'task': 'openwisp_monitoring.check.tasks.run_checks',\r\n            # https://docs.celeryq.dev/en/latest/userguide/periodic-tasks.html#crontab-schedules\r\n            # Executes check every 5 mins from 00:00 AM to 6:00 AM (night)\r\n            'schedule': crontab(minute='*/5', hour='0-6'),\r\n            # Iperf check path\r\n            'args': (['openwisp_monitoring.check.classes.Iperf'],),\r\n            'relative': True,\r\n        }\r\n    }\r\n```"", 'comment_created': datetime.datetime(2022, 7, 12, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918920897, 'comment_body': '**nitpick:** constants should come before any function definition. ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918931330, 'comment_body': 'why not move these mocks as decorators like it is done for other tests? ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919153018, 'comment_body': ""Why don't we set this to `None` here? Then, we won't need to pass `None` argument in the celery beat configuration. \r\n\r\nAfter deploying this to the demo system, I found that the iperf check was running every 5 minutes. It was because the existing celery beat configuration for `run_checks` command  didn't passed the `None` argument. \r\n\r\nhttps://github.com/openwisp/ansible-openwisp2/blob/7c51773114d3cb9e0ae6a0c312c3f95e403b84ef/templates/openwisp2/settings.py#L231-L234\r\n\r\nWe want to be least destructive to existing systems. Also, it is wiser to have a non-mutable default parameter. "", 'comment_created': datetime.datetime(2022, 7, 12, 16, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919181343, 'comment_body': 'I think this comment is outdated. ', 'comment_created': datetime.datetime(2022, 7, 12, 16, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919202793, 'comment_body': 'Initially I did this, but what if we run management command `run_checks`, In that case it will only execute **ping** and **config applied** check instead of executing all checks in the development.', 'comment_created': datetime.datetime(2022, 7, 12, 16, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919208793, 'comment_body': 'We can modify the management command to pass all three checks in the arguments. \r\n\r\nRunning all three checks is not a standard case here. Running `ping` and `config` checks is the standard case. \r\n\r\nIf you want to provide configurability to users, you can additionally allow passing the check dotted path as arguments to the run_checks command as follows: \r\n\r\n```\r\n./manage.py run_checks openwisp_monitoring.check.classes.Iperf,openwisp_monitoring.check.classes.ConfigApplied\r\n```\r\n\r\nBut, this is not our goal now. ', 'comment_created': datetime.datetime(2022, 7, 12, 17, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919228751, 'comment_body': ""By mistake üòÖ I'll add :+1: "", 'comment_created': datetime.datetime(2022, 7, 12, 17, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919261044, 'comment_body': 'I did this because if I use decorator style mocks for `test_iperf_check` (which consists of various subTests) then for every subTests I\'m getting additive `mock_method` call counts (It includes method calls from previous subTest) which I thought is not a good idea.\r\n**For eg:**\r\n```py\r\n    @patch.object(Iperf, \'_exec_command\')\r\n    @patch.object(Iperf, \'_get_iperf_servers\', return_value=[\'iperf.openwisptestserver.com\'])\r\n    @patch.object(iperf_logger, \'warning\')\r\n    def test_iperf_check(self, mock_warn, mock_get_iperf_servers, mock_exec_command):\r\n        check, _ = self._create_iperf_test_env()\r\n        error = ""ash: iperf3: not found""\r\n        tcp_result = loads(RESULT_TCP)[\'end\']\r\n        udp_result = loads(RESULT_UDP)[\'end\'][\'sum\']\r\n\r\n        with self.subTest(\'Test iperf3 is not installed on the device\'):\r\n                mock_exec_command.side_effect = [(error, 127)]\r\n                with patch.object(iperf_logger, \'warning\') as mock_warn:\r\n                    check.perform_check(store=False)\r\n                    mock_warn.assert_called_with(\r\n                        f\'Iperf3 is not installed on the ""{self.device}"", error - {error}\'\r\n                    )\r\n                self.assertEqual(mock_warn.call_count, 1)\r\n                self.assertEqual(mock_exec_command.call_count, 1)\r\n                mock_get_iperf_servers.assert_called_once_with(\r\n                    self.device.organization.id\r\n                )\r\n        with self.subTest(\'Test iperf check passes in both TCP & UDP\'):\r\n                mock_exec_command.side_effect = [(RESULT_TCP, 0), (RESULT_UDP, 0)]\r\n                ...\r\n                ...\r\n\r\n                self.assertEqual(mock_warn.call_count, 0)\r\n                # AssertionError: 1 != 0 (Includes call count from previous subTest, Actual call 1)\r\n                self.assertEqual(mock_exec_command.call_count, 2)\r\n                # AssertionError: 3 != 2 (Same here, But exec_command actually called 2 times)\r\n    \r\n``` ', 'comment_created': datetime.datetime(2022, 7, 12, 18, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 920330832, 'comment_body': 'This test does not have any user, hence no notification is created. \r\n\r\nCreate an admin user with \r\n```\r\nself._create_admin()\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 17, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 921554871, 'comment_body': '`Todo `: Change this link after PR merge', 'comment_created': datetime.datetime(2022, 7, 14, 20, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 922313899, 'comment_body': ""Let's move all these images into the 1.1 directory please:\r\nhttps://github.com/openwisp/openwisp-monitoring/tree/docs/docs/1.1\r\nThis is needed so that if in version 1.2 we change the look of the UI, we can upload new screenshot for the 1.2 version without affecting the docs for the 1.1 version."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922314175, 'comment_body': ""let's try to break long lines please"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922320756, 'comment_body': ""I believe it's better to be explicit here and specify the ping and config_applied checks"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922324487, 'comment_body': ""I believe that if `checks` is `None` we should execute all the checks and not skip a particular check like we are doing here,  This is not consitent.\r\n\r\nMoreover, the check list can be changed by users, so the order may not be in the one we expect here, this is not robust.\r\n\r\nSo please let's remove this."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922325814, 'comment_body': ""I know that this is the output of iperf, but it's nice to have it more readable.\r\nCan you please re-format these JSON strings so they're more readable and have 4 spaces indentation?"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922349492, 'comment_body': ""we cannot do this because if the connection fails because the device is temporarily offline, then when it comes back up this flag will still be false, because SSH connections right now are tried by the system only on configuration changes, so the following can happen:\r\n\r\n- a device goes offline\r\n- iperf check runs, tries SSH connection, but fails, `is_working` is set to False by the system\r\n- the device comes back online, but no config change is done, so is_working stays False because the system hasn't tried to connect to it yet\r\n- iperf check runs again, but since `is_working` is still False, the check is not executed\r\n\r\nSo let's remove this filter."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 923036134, 'comment_body': 'üëç', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923036228, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923037224, 'comment_body': ""You're right, I'll remove `is_working` from filter :+1: "", 'comment_created': datetime.datetime(2022, 7, 18, 7, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923076855, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 8, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 924836785, 'comment_body': 'In this PR, we should also allow configuring the `bitrate` option. The default value for bitrate in UDP mode is small which leads to insignificant results from iperf. \r\n\r\nWe can leave other options for later in https://github.com/openwisp/openwisp-monitoring/issues/416', 'comment_created': datetime.datetime(2022, 7, 19, 18, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 924837883, 'comment_body': 'I think we should set bitrate on UDP to default to 10 MB and recommend users to tweak this according to their needs.\r\nOn TCP bitrate can default to 0 (unlimited).', 'comment_created': datetime.datetime(2022, 7, 19, 18, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925359967, 'comment_body': 'I would add a comment here explaining that since all three `username`, `password` and `rsa_public_key` is required for authentication to work, we only check for `username` here. ', 'comment_created': datetime.datetime(2022, 7, 20, 9, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925360323, 'comment_body': ""```suggestion\r\n    'rsa_public_key': {\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925361396, 'comment_body': ""```suggestion\r\n        # Exit code 127 : command doesn't exist\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925371059, 'comment_body': 'We use `app_settings` to distinguish between app and project settings (django.conf.settings). \r\n```suggestion\r\nfrom .. import settings as app_settings\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 9, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925419463, 'comment_body': ""I would declare the common mocks with decorators to reduce code duplicity. \r\n```suggestion\r\n    @patch.object(Iperf, '_get_iperf_servers', return_value=['iperf.openwisptestserver.com'])\r\n    @patch.object(Iperf, '_exec_command', side_effect=[(RESULT_TCP, 0), (RESULT_UDP, 0)])\r\n    @patch.object(iperf_logger, 'warning')\r\n    def test_iperf_check_auth_config(self, mock_warn, mock_exec_command, mock_get_iperf_servers):\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 10, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925425064, 'comment_body': 'After removing common mocks, I would update this to \r\n\r\n\r\n```suggestion\r\n            with patch.object(\r\n                settings, \'IPERF_CHECK_CONFIG\', iperf_config\r\n            # It is required to mock ""Iperf.schema"" here so that it \r\n            # uses the updated configuration from ""IPERF_CHECK_CONFIG"" setting.\r\n            ), patch.object(Iperf, \'schema\', get_iperf_schema()):\r\n```\r\n\r\nI have added a comment there because it was not entirely clear from the code why the `Iperf.schema` is mocked. Only after tinkering of code, I realised the reason. The comment will prevent us from making unnecessary efforts in the future. ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925426154, 'comment_body': 'After completion of each sub-test, reset the mocks with the following code: \r\n\r\n```suggestion \r\n        mock_exec_command.reset_mock()\r\n        mock_warn.reset_mock()\r\n        mock_get_iperf_servers.reset_mock()\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 10, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427096, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427263, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925428810, 'comment_body': 'This entire block has been repeated 3 times in the file. Can we move these assertions to an internal method of the test class and call it wherever required? ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925607910, 'comment_body': 'Thanks !', 'comment_created': datetime.datetime(2022, 7, 20, 13, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 927586330, 'comment_body': 'the indentation is not right here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927586538, 'comment_body': ""aren't we missing the instructions to run the iperf check?"", 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927587808, 'comment_body': '```suggestion\r\nIperf authentication\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927588695, 'comment_body': '```suggestion\r\nBy default iperf check runs without any kind of **authentication**,\r\nin this section we will explain how to configure **RSA authentication** \r\nbetween the **client** and the **server** to restrict connections\r\nto authenticated clients.\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927589925, 'comment_body': '```suggestion\r\nAfter running the commands mentioned above, the public key will be stored in ``public.pem`` \r\n```\r\n\r\nKeep it short, apply a similar change also to ``private_not_protected.pem``, I would also rename that as `private_key.pem`, while I would rename `public.pem` to `public_key.pem`.', 'comment_created': datetime.datetime(2022, 7, 22, 12, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927591635, 'comment_body': 'indentation is wrong here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927592482, 'comment_body': 'what is `default`?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927595377, 'comment_body': 'We already have a setting to configure iperf, why are you adding a new one?\r\n\r\nCan we compress everything in one setting?\r\n\r\nEg:\r\n\r\n```python\r\nOPENWISP_MONITORING_IPERF = {\r\n    \'a9734710-db30-46b0-a2fc-01f01046fe4f\': [\r\n        {\r\n            \'host\': [\'iperf1.openwisp.io\', \'iperf2.openwisp.io\'],\r\n            \'username\': \'iperfuser\',\r\n            \'password\': \'iperfpassword\',\r\n            \'rsa_public_key\': (\r\n""""""\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwuEm+iYrfSWJOupy6X3N \r\ndxZvUCxvmoL3uoGAs0O0Y32unUQrwcTIxudy38JSuCccD+k2Rf8S4WuZSiTxaoea \r\n6Du99YQGVZeY67uJ21SWFqWU+w6ONUj3TrNNWoICN7BXGLE2BbSBz9YaXefE3aqw \r\nGhEjQz364Itwm425vHn2MntSp0weWb4hUCjQUyyooRXPrFUGBOuY+VvAvMyAG4Uk \r\nmsapnWnBSxXt7Tbb++A5XbOMdM2mwNYDEtkD5ksC/x3EVBrI9FvENsH9+u/8J9Mf \r\n2oPl4MnlCMY86MQypkeUn7eVWfDnseNky7TyC0/IgCXve/iaydCCFdkjyo1MTAA4 \r\nBQIDAQAB\r\n"""""")\r\n            \'client_options\': {\r\n                \'port\': \'6209\',\r\n                \'udp\': {\r\n                    \'bitrate\': \'20M\'\r\n                },\r\n                \'tcp\': {\r\n                    \'bitrate\': \'0\'\r\n                }\r\n            }\r\n        }\r\n    ],\r\n}\r\n``` \r\n\r\nDoes it make sense?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 932113139, 'comment_body': 'Done üëç', 'comment_created': datetime.datetime(2022, 7, 28, 11, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932117536, 'comment_body': 'Sure :)', 'comment_created': datetime.datetime(2022, 7, 28, 11, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932122726, 'comment_body': 'I made it to look consistent with [`OPENWISP_MONITORING_PING_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring#openwisp_monitoring_ping_check_config), Now I have changed `iperf config setting` according to https://github.com/openwisp/openwisp-monitoring/issues/418', 'comment_created': datetime.datetime(2022, 7, 28, 11, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932125477, 'comment_body': 'Yes, it would be better to have a single setting for `iperf check` :+1: ', 'comment_created': datetime.datetime(2022, 7, 28, 11, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932202486, 'comment_body': 'I think it is mention in [`iperf-check#how-to-configure-iperf-check`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#3-configure-iperf-settings)', 'comment_created': datetime.datetime(2022, 7, 28, 13, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933005488, 'comment_body': 'This looks incorrect to me', 'comment_created': datetime.datetime(2022, 7, 29, 8, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933008280, 'comment_body': 'Do we need this @nemesisdesign ? ', 'comment_created': datetime.datetime(2022, 7, 29, 8, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933010148, 'comment_body': 'I think we should link this page instead https://openwisp.io/docs/user/configure-push-updates.html', 'comment_created': datetime.datetime(2022, 7, 29, 8, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933033617, 'comment_body': 'nitpick, can you please remove this blank line? ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933035363, 'comment_body': 'Can you please add a docstring here explaining this method ?', 'comment_created': datetime.datetime(2022, 7, 29, 9, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933046950, 'comment_body': 'The order should be same as `trace_order` otherwise, it will show incorrect labels. ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933108012, 'comment_body': 'Did you try using `connectgaps: true` instead of doing this as suggested in example shared by Federico? I was able to achieve similar results with that option locally. Can you double check that please? ', 'comment_created': datetime.datetime(2022, 7, 29, 10, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933142183, 'comment_body': 'I and @nemesisdesign had meet in which he suggested me to add this about `iperf charts` in the `README`. ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933144201, 'comment_body': 'ploty `connectgaps` property only works for scatter charts. More info : https://plotly.com/python-api-reference/generated/plotly.graph_objects.Scatter.html', 'comment_created': datetime.datetime(2022, 7, 29, 11, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933145799, 'comment_body': 'okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 7, 29, 11, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933147324, 'comment_body': 'thanks! I will update :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933147488, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933198121, 'comment_body': 'Sure üëç', 'comment_created': datetime.datetime(2022, 7, 29, 12, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933199473, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2022, 7, 29, 12, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 935156010, 'comment_body': 'Okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 8, 2, 6, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 937864645, 'comment_body': ""respect the spacing (I wish the linter warned about this!):\r\n\r\n```\r\nif (unit.includes('+')) {\r\n`"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937864912, 'comment_body': 'same here and below', 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937867677, 'comment_body': ""let's do those changes to the charts that we discussed (have bandwidth and transfer as simple lines with no fill and have 2 lines in each chart, one for TCP and one for UDP), then update the README here and screenshots."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937870690, 'comment_body': ""I don't understand, isn't this something that depends on a specific server? Why do we have a global setting?"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937874363, 'comment_body': ""definitely we cannot link files which are published in branches we are going to delete, please double check the rest of the document for similar problems, we can point to master here, even thought it won't work until published, but that's ok."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875205, 'comment_body': 'this change is unnecessary, please revert it', 'comment_created': datetime.datetime(2022, 8, 4, 14, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875935, 'comment_body': 'shall we default this to 30 MB? I think 10 is quite low.', 'comment_created': datetime.datetime(2022, 8, 4, 14, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937878521, 'comment_body': 'please break lines and maintain line length consistent with the rest of the document', 'comment_created': datetime.datetime(2022, 8, 4, 14, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937880972, 'comment_body': 'make sure spacing around parenthesis is consistent with the rest of the JS code', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881165, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881327, 'comment_body': 'double check all blocks please', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937889998, 'comment_body': ""isn't the final return statment suppposed to be updated here??\r\n\r\n```\r\nreturn self._time_crossed(time) and value_crossed\r\n```\r\n\r\nIs not taking in consideration the related field.\r\n\r\nWhat if value_crossed is False but the related value is crossed?\r\n\r\nWhat about `if self.tolerance == 0:`???\r\n\r\nSo now I have some more basic quesitons:\r\n\r\n1. Why was this kind of change, which is very delicate, introduced in this huge PR? Do we have to introduce this change or can we make the iperf check work without it for now? \r\n\r\n2. Looking at this code, I am pretty scared to merge it! I do not want to do this.\r\n@Aryamanz29 can you extract these commits into a separate branch please? I want to merge the rest of the work but not this right now, I think it needs more careful thought."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937890192, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938006217, 'comment_body': ""Linter didn't warn ü§î I'll check all my code manually :+1: \r\n\r\n![Screenshot from 2022-08-04 21-54-41](https://user-images.githubusercontent.com/56113566/182901953-77fbb3ee-110b-4660-ba2b-c2d5fdb60f2b.png)\r\n"", 'comment_created': datetime.datetime(2022, 8, 4, 16, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938205036, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 4, 20, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938249501, 'comment_body': 'Yes it should be defined in [`OPENWISP_IPERF_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config)', 'comment_created': datetime.datetime(2022, 8, 4, 21, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938256975, 'comment_body': ""1. Yes, we can make `iperf check` work without this feature (check will run without any `alertsettings`)\r\n2. I'll remove `alert_on_related_field` feature from this PR as of now & will open a separate PR :+1:"", 'comment_created': datetime.datetime(2022, 8, 4, 21, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938700817, 'comment_body': ""why there's both `rsa_public_key` and `rsa_public_key_path`? Are users supposed to use either one or the other?\r\nHow does it work? Was this meant to be the private key?"", 'comment_created': datetime.datetime(2022, 8, 5, 10, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938721204, 'comment_body': ""This is the location where the `client (ie. openwrt device)` stores it's `rsa_public_key` for `iperf check`. By default, it is `/tmp/iperf-rsa-public.pem` and this path is required for iperf3 auth, but we can also change this using [OPENWISP_IPERF_CHECK_CONFIG](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config). More info : https://github.com/openwisp/openwisp-monitoring/issues/414#issuecomment-1189408176"", 'comment_created': datetime.datetime(2022, 8, 5, 11, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938723543, 'comment_body': 'Iperf command basically doing  `f\'echo ""{rsa_public_key}"" > {rsa_public_key_path}` and after completion of check removing key from the device `rm {rsa_public_key_path}`', 'comment_created': datetime.datetime(2022, 8, 5, 11, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938733455, 'comment_body': ""`/tmp/iperf-public-key.pem` does not need to be configurable at this level, there's no usefulness in this, just set `/tmp/iperf-public-key.pem` to a variable and use the variable throughout the rest of the implementation."", 'comment_created': datetime.datetime(2022, 8, 5, 11, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938777476, 'comment_body': 'Ok :+1: ', 'comment_created': datetime.datetime(2022, 8, 5, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}]","[{'commit_sha': '506f044bfacdbf2e57448e4dd6f796b16fe764d0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd112b85b34fb0ff7ada391849cdc8be9d36743', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47467ef97bc91783babd7f8ffcaa9a06fd23f45', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488990b941bab99f046237bddf061d6a665d95de', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f890ba95c3291bff34875dad9213c00dfd345b65', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ec0dc06db4b7d14dce066b4210ca83f32fd8f0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a79a5dff088d7e1d2aef7d339c9aef0b201911', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f63fcaa77527c3a24efe88be179339a412b4dc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a346efc3fafe216a30b5a0c957f594d822c704d', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9383f3a340945d316f3f4d20e7f3fdce7cbe1b97', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7dfd5fd259da12054d149fa60edee448b68eba', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d98a66d46039c27f3048af2366aec579e681cc4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3050edf18d15c9679e0fe4047883d28ad502ac87', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efdc70a65c784586df0ef7e5e162f8c84b4c914c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f65c6adcfd92abcf5c17706796d98dd3549a74e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7396e79b0c9f8b7ae0c211bdeb025aba5737325f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b881e0616d770710cf5500dd460e5db7fd7e48b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d732bb3310db85781acc5c198541386f1373ba6', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c488abc5a9ba560c03b0a649b0502600624911a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89563034ee0244f5849b1e9ae1f922079968ad2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c75428e79debde7016665a23b9e88383c848d2f9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a9eef80a7f2d0619ef806e8f6880c9d569762a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59089944b285b38ec16847926ea16bb035c1c5c4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec80f2f7db65f89252a328f617cd565e0b46c07c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50921cbff514ff58034a6e5954890e9e5b69eca2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56543bf191c7df6d649eeff734fe4e98d8b9a0af', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef433eaa6b4f59e9ea9ceea05c7d742a2d8301bc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38991a9914a3abab5f00be688624b59706734d59', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b607da46f3041735fcbce771c9733847af4444', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce23bd0c38068dfcad9b993da39a83c7f5566197', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f9220243c4a3481bef065e5a0b48fec9da00db', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '840029189f6fa20ae0d371cabaa915ba25288b75', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b31104284172bb059d7d4f11956f7f1a8417e1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d472aa1eaa9b312c391847094dc3c05b270101', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2abe5d1f14d28391950375886484d04d76d67bd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391537e80877680fd06f7894aee7fa742c94a4e4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9810d2470b788385018e57fd93a34c8536a761fb', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd219e9f667377d616e7935613b4f0c6039dc675a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '808288118df92cff2bc444e9235af5d84746ff46', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d6061e4d6bee24e7e6d9c92a86f18e2f596bd1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df31203af6be0dc0876d38b683d67037163eda89', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02100af795a1c46c876aadfacf284eb1b43e1c2f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27732e6652cbca6ccc41e455161a2891f9bb1948', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9b82670d654d62ea86147a65904701e5a2bdf9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1bc269b0950f0f34fbaaacd5b7704ee3fa2c2e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ddce9d5df2bf136cbff09037aab5bc3fa67ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa74e9960a59bb83d7daf1a9a7568b78af77451f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d71d7c6009d30b285069fdb06ad8dfc543e2b91', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50256d20778eec1cc747ced27d54aa686a1e4f6b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01cd70e1de0202efcbc4fac054249258605e2e41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7b6cb1d96f90d3c14b5a3202e11be68816b0860', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d86f05471de61a7b6e7d67ddc9f2d1e4b17ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a4f9877a0e8ad6d2d55d4c77f2acd818080d1e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4196b0a077c6fc0a1422eca2ef741032d17f41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ce4a024351a43a3842e8030f2a385e7705a802', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '719932e8593b19c285e96323bfcc527abd6538cd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '631d2bf6db793e35f1129885b813e33c924bdebf', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3524a68f74762991cf4f9280605eef84bea68692', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe40f82ea7a3af6df4e0babc6198b5cb33f7501', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12d9b5f72c94dc418355099dedb73b2d5d35413', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e23d914c1ba9746c9e820eb1a5e255eb26fa73', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13b6416f9013e2e4759a28ed33e43d8c905b5134', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1dd84e9be003e17fcfc694a37c04c2994243fc', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9213aafa268485be75a32c36fc9bd349d831a755', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330
971416000,"[ux] Show size in (KB, MB or GB) adaptively in charts #87","Fixes #87

<!--
Before submitting a Pull Request, please make sure you have read
the OpenWISP Contributing Guidelines:
http://openwisp.io/docs/developer/contributing.html#how-to-commit-your-changes-properly
-->
   Before        |  After
:-------------------------:|:-------------------------:
![Screenshot from 2022-06-19 17-45-56](https://user-images.githubusercontent.com/77020164/174481050-73a16930-a307-4e5b-9be7-e48d7edca569.png) | ![Screenshot from 2022-06-19 17-42-21](https://user-images.githubusercontent.com/77020164/174481059-2416a245-03a0-4461-92be-61a7b737ef47.png)

**After**

1. ![Screenshot (70)](https://user-images.githubusercontent.com/77020164/175225197-85c7348c-3177-4a12-bb1e-2cb1cd9237c7.png)

2. ![Screenshot (71)](https://user-images.githubusercontent.com/77020164/175228171-06ef3d7f-3fcf-4434-b516-82a690e99a0c.png)



**Changes**:
* All the data points have their data converted as per the range, and a particular chart has one specific unit.
* The percircles have their data converted and have different units as per the range.
* The side y-axis has a unit as same as what data points have.


**Demo**:

https://user-images.githubusercontent.com/77020164/175221352-22b969b6-05c2-499c-aac5-32bedc8369b4.mp4



Checks:

- [ ] I have manually tested the proposed changes
- [ ] I have written new test cases to avoid regressions (if necessary)
- [ ] I have updated the documentation (e.g. README.rst)
",True,397,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/397,https://github.com/openwisp/openwisp-monitoring/pull/397,closed,108,20,4,28,16,52,0,1,[],2022-06-19 06:10:59+00:00,2022-07-19 18:15:56+00:00,2635497.0,"30 days, 12:04:57","[{'comment_id': 901120996, 'comment_body': ""Nitpick, you don't *need* to do this change, but just want to teach you a cleaner way to do this:\r\n\r\n```\r\nconst sum = total_traffic_charts.reduce((sum, chart) => sum = sum + chart, 0);\r\n```\r\n\r\nWhy is this better? Pl. google `pure functions`. :smile:"", 'comment_created': datetime.datetime(2022, 6, 19, 15, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 901121315, 'comment_body': 'I think we can stop using `var` and use `let` and `const` only.\r\n\r\n`const` support: https://caniuse.com/?search=const\r\n`let` support: https://caniuse.com/?search=let\r\n\r\nCC: @nemesisdesign ', 'comment_created': datetime.datetime(2022, 6, 19, 15, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 901121626, 'comment_body': 'Again, nitpick for learning, can use `map` here! üòÑ ', 'comment_created': datetime.datetime(2022, 6, 19, 15, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'atb00ker', 'type': 'User'}, {'comment_id': 901125269, 'comment_body': 'Actually! I did this in my first commit, but to maintain consistency I again updated this.', 'comment_created': datetime.datetime(2022, 6, 19, 15, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yashikajotwani12', 'type': 'User'}, {'comment_id': 901125555, 'comment_body': 'I agree this looks cleaner :+1:\r\n', 'comment_created': datetime.datetime(2022, 6, 19, 15, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'yashikajotwani12', 'type': 'User'}, {'comment_id': 903149805, 'comment_body': 'this name kind of puzzles me, why did you choose `{unit}`?', 'comment_created': datetime.datetime(2022, 6, 21, 23, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 903338318, 'comment_body': 'I choose `{unit}` because like the conversion happening in values would pass a specific unit either of these `GB, MB, KB`. If you suggest something else I will update it.\r\n', 'comment_created': datetime.datetime(2022, 6, 22, 6, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yashikajotwani12', 'type': 'User'}, {'comment_id': 903398609, 'comment_body': ""> Good progress, for the moment the most obvious points to improve I see are the following, but first, let's look at the screenshot:\r\n> \r\n> ![yashika-1](https://user-images.githubusercontent.com/841044/174913986-49d62590-ffc1-4230-8fca-9657808ff476.png)\r\n> \r\n> 1. there should be a space between the number and the unit, so 20GB > 20 GB\r\n> 2. in the example I'm showing, the unit chosen is MB but I think GB would be more suited, what do you think?\r\n> \r\n> Regarding the code, I think we can see this in our next meeting, but for the moment @atb00ker lert's focus on the functionality, let's make it work as we need first, that's the most important thing, code quality comes later.\r\n\r\n\r\nYeah! as an average of the data would have been less than `1 GB`, that's why it would show all data in `MB`, basically where the points which have no data are also calculated in the average that is why the average has been lowered and the data it converts shown to be in  `MB`."", 'comment_created': datetime.datetime(2022, 6, 22, 7, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yashikajotwani12', 'type': 'User'}, {'comment_id': 907740563, 'comment_body': ""what if we change this to:\r\n\r\n```\r\n'unit': 'adaptive_bytes`,\r\n```\r\n\r\nThen just pass `{unit}` where the code needs this, if at all.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 27, 19, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 907742445, 'comment_body': ""I don't understand how this code is being triggered.\r\n\r\nShouldn't we check whether the filter we have enabled is present in the config?\r\n\r\nWhy check for `data.trace_order !== undefined`?\r\n\r\nPlease separate this logic into its own function, eg:\r\n\r\n`adaptiveFilterPoints(data)`."", 'comment_created': datetime.datetime(2022, 6, 27, 19, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 907742640, 'comment_body': 'same here regarding `data.trace_order !== undefined` and `adaptiveFilterSummary(data, percircles)`.', 'comment_created': datetime.datetime(2022, 6, 27, 19, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 907748439, 'comment_body': 'please maintain a space before the parenthesis and one space after, applies to all the other lines which have a code block (ifs/else blocks, for loops, etc).', 'comment_created': datetime.datetime(2022, 6, 27, 19, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 907749033, 'comment_body': 'can you please rewrite `)/100` as `) / 100`?', 'comment_created': datetime.datetime(2022, 6, 27, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 908913829, 'comment_body': 'Please break the lines at a length similar to the rest of the document.', 'comment_created': datetime.datetime(2022, 6, 28, 20, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 908914250, 'comment_body': ""let's move this after the first heading and get rid of this heading."", 'comment_created': datetime.datetime(2022, 6, 28, 20, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 908915148, 'comment_body': 'I\'d call this ""Byte Adaptive Measuring in Charts""', 'comment_created': datetime.datetime(2022, 6, 28, 20, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 908915755, 'comment_body': ""why `{adaptive_bytes}` and not just `adaptive_bytes`? What are the curly braces for? I don't understand, it's weird. Can we get rid of the braces please?"", 'comment_created': datetime.datetime(2022, 6, 28, 20, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 908916261, 'comment_body': 'leave one blank line before please', 'comment_created': datetime.datetime(2022, 6, 28, 20, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 908916852, 'comment_body': 'can you please try to combine as many var statements as you can please? As in the other parts of this JS code.', 'comment_created': datetime.datetime(2022, 6, 28, 20, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 908917325, 'comment_body': '`adaptive_bytes` > `adaptiveBytes`, we follow camelCase for JS code as most of the industry', 'comment_created': datetime.datetime(2022, 6, 28, 20, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 908917806, 'comment_body': '**WHY?** I said we have to look for the specific `adaptive_bytes` filter.', 'comment_created': datetime.datetime(2022, 6, 28, 20, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 908917894, 'comment_body': '**same here**', 'comment_created': datetime.datetime(2022, 6, 28, 20, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 910262127, 'comment_body': ""isn't the same operation repeated multiple times here and above? \r\n\r\nWhat about:\r\n\r\n```javascript\r\nadaptValue = function(value, multiplier) {\r\n  return Math.round((value * multiplier) * 100) / 100;\r\n}\r\n```"", 'comment_created': datetime.datetime(2022, 6, 29, 18, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 910262490, 'comment_body': 'fix the indentation here please', 'comment_created': datetime.datetime(2022, 6, 29, 18, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 910262504, 'comment_body': 'I meant to move it right after \r\n\r\n```\r\nByte Adaptive Measuring in Charts\r\n---------------------------------\r\n```', 'comment_created': datetime.datetime(2022, 6, 29, 18, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 910263509, 'comment_body': 'please break the lines above at a line length similar to the rest of the document, eg:\r\n\r\n```\r\nThis behavior helps us to show the data and unit of the chart in a more readable way,\r\nthe units are shown in `B`, `KB`, `MB` and `GB` respectively, and datapoints have\r\nsame unit to maintain consistency in the chart, summarycircles have different units\r\n... etc ...\r\n``` ', 'comment_created': datetime.datetime(2022, 6, 29, 18, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 910292351, 'comment_body': 'Yeah! I will improve this', 'comment_created': datetime.datetime(2022, 6, 29, 18, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'yashikajotwani12', 'type': 'User'}, {'comment_id': 911384603, 'comment_body': '```suggestion\r\n        for(var i=0; i<charts[0].y.length; i++) {\r\n```\r\n\r\nWhy suddenly the style of indenting these curly braces is changed? Can you maintain consistency with the rest of the code please?\r\n\r\nApplies for all the other lines as well.\r\n', 'comment_created': datetime.datetime(2022, 6, 30, 19, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 911385256, 'comment_body': ""```suggestion\r\n        if (unit == 'adaptive_bytes') {\r\n```\r\n\r\nLet's leave a space before the rounded parenthesis in code blocks like this one or in `for`, please apply the same changes to other lines as well.\r\n\r\n@codesankalp @pandafy how can we enforce this in the linter?"", 'comment_created': datetime.datetime(2022, 6, 30, 19, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 911398022, 'comment_body': 'I think we should start using `eslint` in `openwisp-utils`, It is much more configurable than any other linter package.\r\nAlso, Django is using this as a linter in JavaScript code: https://github.com/django/django/blob/main/.eslintrc', 'comment_created': datetime.datetime(2022, 6, 30, 19, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'codesankalp', 'type': 'User'}, {'comment_id': 912081775, 'comment_body': 'More readable:\r\n```suggestion\r\n            var yRawValue;\r\n```', 'comment_created': datetime.datetime(2022, 7, 1, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 912082027, 'comment_body': ""I'd remove this blank line for consistency."", 'comment_created': datetime.datetime(2022, 7, 1, 15, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 912083028, 'comment_body': 'Can you please add also support for TB (on some large systems this can happen).', 'comment_created': datetime.datetime(2022, 7, 1, 16, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 912083980, 'comment_body': ""I don't think `newArr` is a good variable name here, because it's not really a new array but it's the same array which we are reading. I'd call it simply `y`."", 'comment_created': datetime.datetime(2022, 7, 1, 16, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 912084368, 'comment_body': ""if you can implement the TB as I am asking, here and below we'll have to update it to mention it."", 'comment_created': datetime.datetime(2022, 7, 1, 16, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 913065111, 'comment_body': 'reminder: update help text (unit of measure is now adaptive so we have to account for this)', 'comment_created': datetime.datetime(2022, 7, 4, 14, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 913116864, 'comment_body': ""I would also add a comment like following:\r\n```suggestion\r\n    'traffic': {\r\n        # other configurations for this chart\r\n        'unit': 'adaptive_bytes',\r\n    },\r\n```"", 'comment_created': datetime.datetime(2022, 7, 4, 15, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 913118836, 'comment_body': 'If it was your intent to point out that the traffic charts uses this feature, I suggest you to explicitly write that \r\n\r\n```\r\nThe default traffic chart uses this feature to automatically adapt units for the traffic data.\r\n```', 'comment_created': datetime.datetime(2022, 7, 4, 15, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 913119763, 'comment_body': 'Why is this change required? The change in example does not reflect the changes mentioned in the text. ', 'comment_created': datetime.datetime(2022, 7, 4, 15, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 913127751, 'comment_body': '@yashikajotwani12 I think the following code can be reduced by using nested `for` loops. E.g.: \r\n\r\n```js\r\nfor (var i=0; i<charts.length; i++) {\r\n    for (var j=0; j<charts[i].y.length; j++) {\r\n          // logic for converting bytes \r\n   }\r\n}\r\n```\r\n\r\nIs there any specific reason that you wrote it in the following manner (does logic of these loops differ in a way which is not immediately visible) ? ', 'comment_created': datetime.datetime(2022, 7, 4, 16, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 913131030, 'comment_body': 'You can improve this function which will also improve the readability. This is an utility function. This does not need to know anything about the chart because it does not perform any operation on it. I would update the signature of this function in following way.  \r\n\r\n\r\n```js\r\nvar convertToAdaptiveBytes = function(value, multiplier) {\r\n    return  Math.round((value * multiplier) * 100) / 100;\r\n}\r\n```\r\nAnd you can do assignments on `charts[type].y[i]` and `charts[type].hovertemplate[i]` in the loop that calls this function below. \r\n\r\n\r\n@yashikajotwani12 work on this suggestion at the very last, because it does not affect the functionality anyway. Also, wait for green flag from @nemesisdesign on this suggestion before proceeding. ', 'comment_created': datetime.datetime(2022, 7, 4, 16, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 913134488, 'comment_body': ""```suggestion\r\n        else if (average >= 1000) {\r\n            layout.yaxis.title = 'TB';\r\n        }\r\n```\r\n\r\nOtherwise, 1TB data would appear in bytes. "", 'comment_created': datetime.datetime(2022, 7, 4, 16, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 913134805, 'comment_body': 'I would add a comment here explaining what this function does. ', 'comment_created': datetime.datetime(2022, 7, 4, 16, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 913136686, 'comment_body': 'Please pay attention to the formatting. \r\n\r\n\r\nThis is something that I would expect the QA checks to take care for me. I will look into QA checks later on. ', 'comment_created': datetime.datetime(2022, 7, 4, 16, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 913139535, 'comment_body': '@yashikajotwani12 it is not clear to me how this function is related to the `filter` as indicated by the name. Can you please explain it? ', 'comment_created': datetime.datetime(2022, 7, 4, 16, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 913161036, 'comment_body': 'Because the Y-axis layout has a specific unit that has been set by calculating the values of data points, basically filtering through the average of the set of values.', 'comment_created': datetime.datetime(2022, 7, 4, 17, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'yashikajotwani12', 'type': 'User'}, {'comment_id': 913273186, 'comment_body': ""we'd need to rename this `getAdaptiveBytes`."", 'comment_created': datetime.datetime(2022, 7, 4, 21, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 913275742, 'comment_body': ""definitely there's a lot of repetition here, the same code is repeated 3 times @yashikajotwani12!"", 'comment_created': datetime.datetime(2022, 7, 4, 21, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 913275927, 'comment_body': ""One observation: isn't this series of if/else which checks the size of the value repeated all over the place?\r\nWhy don't we turn that into a function that returns a list with two values: the unit and the scale to use in `convertToAdaptiveBytes`?\r\n\r\nThat should allow to have code like:\r\n\r\n``` \r\nvar scales = getAdaptiveScale(value),\r\n    unit = scales[0],\r\n    scale = scales[1];\r\n\r\nlayout.yaxis = unit;\r\n```"", 'comment_created': datetime.datetime(2022, 7, 4, 21, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 913276115, 'comment_body': 'same here, eg:\r\n\r\n```\r\nvar scales = getAdaptiveScale(value),\r\n    unit = scales[0],\r\n    scale = scales[1];\r\n\r\nconvertToAdaptiveBytes(charts, 2, i, scale, unit);\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 4, 21, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922973035, 'comment_body': ""Minor change:\r\n```suggestion\r\n                    'Network traffic of the whole network (total, download, upload).'\r\n```"", 'comment_created': datetime.datetime(2022, 7, 18, 5, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'codesankalp', 'type': 'User'}, {'comment_id': 924689652, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 7, 19, 15, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': '9b5403fbf236d230afdb3211a08ba1da28eb80c5', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '633f33c2e2a17a9474426e2e922a4f09c1a849e8', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbea3b47b26db46373dcf0662400a412ec267ed0', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4d52c3d8a5673ba836ce4ba0c8fa99409a59f18', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66921dec65a34f28320fb3720ab07048744035ed', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '557fc353b6eb81bba366b5bfc3c63a9989982c11', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e1b581d20ec5d0e60ee65e63fa0dd8582513585', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aef8eb9c5c13ecd100eb8e98108e9fda24ff6cdc', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcc1858330a2da77fd86d30c9d77bb2dd9eeb7f4', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c7232693f7dc46d5f72bb9b0f92185c8ce8015', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08eb39e969b9e4e401d5b67b5125f2904118bd7', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9320ae90c27eb6456983a0e20d1d7973ed6d99e', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '828a59ff053036efe34b84fc2d012594c7d3dfea', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca36f3109a8cb46432fb3e939ede7aa88ed8aa6f', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aad3e3f8230cdc1a8f7e9e485830bd8dbb67ce1', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd436ddaf90ae56957c7dc620398fabd80c486a6', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1d457fe9fd59adae71e27d50e93addd8cf4bd1', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b106e735fe93bef18f1d28f8dc162dc36926a8ae', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9f0c12915ba33514816ebe975fed17f3f4cb8a', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab9d8498c1eb9b028fc4089a0735afdcd3a1d167', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3c8bcf5de628d2cd03072d443816e8b3671ff8', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '409f864d0d36148d43f4ce4928058f24a44d7610', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf16b4b017d9c6e13e04f707ead319d21c6a7c4', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffc496895c118f3d6b670f2acdc5c5fff051bbdb', 'committer_username': 'yashikajotwani12', 'committer_name': 'Yashika Jotwani', 'committer_email': 'yashikajotwani12@gmail.com', 'commit_date': datetime.datetime(2021, 1, 5, 18, 8, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dfa7d1fc43393446e3a927c34bce81d315ec1ea', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd10a2a74bd0d3821c2996507cb93a85ff6299c82', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70229fca75d85345d4ee9f9a6250181bbeaa46b3', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f115b07726011ca23bfc5e04e6b97173f8752848', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Yashika Jotwani,77020164,yashikajotwani12@gmail.com,User,,101,,62,176
958876982,[feature] Implement Iperf3 check #385,"- Added initial code for **Iperf3 check class.**
- Added **tests** for check class.
- Added **device connection** logic.
- Added **charts & metric (TCP & UDP mode)**.

## `Steps to test`
1. Make sure your client **(openwrt-device)** and server both have [Iperf3](https://iperf.fr/iperf-download.php), [Openwrt Iperf3 package](https://openwrt.org/packages/pkgdata/iperf3)  installed.
2.  Do check **the credential section of the device** _(It must be enabled and working with the right update strategy, i.e., **ssh**)_.

![173354971-728cb1b4-4bf1-4d89-9c22-ce9b9b1e2bef](https://user-images.githubusercontent.com/56113566/173355074-3918d860-a4ad-4f84-bfa4-2c23a7e8d94e.png)

3.  In `tests/openwisp2/settings.py` configure:
```py
OPENWISP_MONITORING_IPERF3_SERVERS = {
    # Running on my local
    # Some Public Iperf3 Servers : https://iperf.fr/iperf-servers.php#public-servers
    # 'be63c4e5-a68a-4650-bfe8-733837edb8be': ['iperf.biznetnetworks.com'],
    'a9734710-db30-46b0-a2fc-01f01046fe4f': ['speedtest.uztelecom.uz'],
    # '<org-pk>': ['<ORG_IPERF3_SERVER>']
}

```
 **NOTE :** The host can be specified by **hostname, IPv4 literal, or IPv6 literal**
```
# for ex
              iperf3 -c iperf.biznetnetworks.com

              iperf3 -c 192.168.5.109

              iperf3 -c 2001:db8::1
```
4. Run `python3 manage.py run_checks` _(To run all checks manually)_.


![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `Demo`

https://user-images.githubusercontent.com/56113566/173353857-56b344f4-89d2-47d9-884a-32a472168f66.mp4

![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `TCP Charts`

![Screenshot from 2022-06-24 18-27-43](https://user-images.githubusercontent.com/56113566/175540716-145b7736-f8c1-4293-bfa1-9234a3ffb95a.png)

![Screenshot from 2022-06-24 11-51-01](https://user-images.githubusercontent.com/56113566/175475141-4f401c73-5198-490d-b6a1-a3932182051f.png)


## `UDP Charts`

![Screenshot from 2022-06-29 20-31-49](https://user-images.githubusercontent.com/56113566/176470082-4d94a537-9032-4f2a-b7e0-3f607ee67c5b.png)

![Screenshot from 2022-06-22 13-26-21](https://user-images.githubusercontent.com/56113566/174975685-6a101362-0132-4d88-a16f-486507f61280.png)

![Screenshot from 2022-06-22 13-26-25](https://user-images.githubusercontent.com/56113566/174975707-96a7b909-c709-4b6b-8982-33fa0e8a555d.png)

Closes #385
",True,394,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/394,https://github.com/openwisp/openwisp-monitoring/pull/394,closed,2633,43,20,64,20,163,1,1,[{'name': 'enhancement'}],2022-06-06 09:25:46+00:00,2022-08-09 12:39:49+00:00,5541243.0,"64 days, 3:14:03","[{'comment_id': 902362779, 'comment_body': ""It is a good thing that you have mentioned this and I guess this is only done for testing phase. But, this should go in project's settings.py (`tests/openwisp2/settings.py`). \r\nThis is application code that will be re-used by other people, we don't want to hard-code anything here. \r\n\r\nThis is a reminder to ourselves that we should move this to project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902395191, 'comment_body': ""I don't think we need to do conversion here. We should save raw values in `bits/second` in the database. We will do appropriate conversion when showing the data to the users. \r\nWe can leverage the work that would be done for https://github.com/openwisp/openwisp-monitoring/issues/87 \r\n\r\nI think it was already planned this way, @nemesisdesign can you please confirm? "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404374, 'comment_body': 'I would refactor this method like following \r\n\r\n```suggestion\r\n    def _get_device_connection(self, device):\r\n        """"""\r\n        Returns an active SSH DeviceConnection for a device.\r\n        """"""\r\n        openwrt_ssh = UPDATE_STRATEGIES[0][0]\r\n        device_connection = DeviceConnection.objects.filter(\r\n            device_id=device.id,\r\n            update_strategy=openwrt_ssh,\r\n            enabled=True,\r\n            is_working=True,\r\n        ).first()\r\n        return device_connection\r\n```\r\n\r\nAnd the update the logic that checks for `False` to check for `None`. ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404695, 'comment_body': 'This would break if a device has multiple `DeviceConnection` (which it can have by design, this broke on my local environment).', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902405061, 'comment_body': 'Why are we checking `device.monitoring.status`? ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902434921, 'comment_body': '@Aryamanz29 can you open an issue to make this command configurable? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902437683, 'comment_body': ""**Nitpick:** Let's always write the code to return early. E.g.\r\n\r\n```python\r\nif not device_connection:\r\n    logger.warn('')\r\n    return \r\n# rest of the logic\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 10, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902439981, 'comment_body': ""Let's only put the code that can raise exception in try-except block. I think only these lines can raise `ObjectDoesNotExist` exception here. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902442292, 'comment_body': 'What should trigger this alert? Is it going to be something like `if bandwidth falls below X Mbps, then send alert`. ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902444264, 'comment_body': '@Aryamanz29 can you share why this is needed? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902446835, 'comment_body': ""If any test will fail when `OPENWISP_MONITORING_AUTO_IPERF` is set to `False`, mock that setting in the TestCase. We find that many tests fail in ansible-openwisp2 and docker-openwisp because they rely on the project environment. Since, we ship tests with the application, we should ensure that they do their job without relying on the project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902484236, 'comment_body': ""Yes, I'm thinking of same we can leverage `traffic charts` adaptive size (https://github.com/openwisp/openwisp-monitoring/issues/87) in `Iperf` charts as well."", 'comment_created': datetime.datetime(2022, 6, 21, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902487431, 'comment_body': 'Sure üëç opened : https://github.com/openwisp/openwisp-monitoring/issues/398', 'comment_created': datetime.datetime(2022, 6, 21, 11, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490038, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490075, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902497466, 'comment_body': 'We can do that as well, but according to **possible outcomes** of the project \'\'If an Iperf server is down/busy we should trigger an alert"" (We need to investigate more about this)', 'comment_created': datetime.datetime(2022, 6, 21, 11, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902499363, 'comment_body': 'It is related to : https://github.com/openwisp/openwisp-monitoring/pull/309#issuecomment-1132017719', 'comment_created': datetime.datetime(2022, 6, 21, 11, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902506988, 'comment_body': ""While running tests, I'm getting `TimeoutException` due to extra check, Now it's working fine, I'll remove that line :+1: \r\n```py\r\ndef test_restoring_deleted_device(self):\r\n...\r\n...       \r\n      except TimeoutException:\r\n            self.fail('Failed saving device')\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902600321, 'comment_body': ""> Thanks for the suggestion, I've already changed this in my local env, Will push soon :)\r\n\r\nAcc to https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374, `_get_device_connection` method now only return either `device_connection` object or `None` so I think we can now safely remove `try-except` block from the code."", 'comment_created': datetime.datetime(2022, 6, 21, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902607625, 'comment_body': ""You're right, we should do with .`filter` as you've mention above https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374"", 'comment_created': datetime.datetime(2022, 6, 21, 13, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902987581, 'comment_body': 'Update : I have moved server settings in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/fe920713890500538d8963c338bae610146166fd', 'comment_created': datetime.datetime(2022, 6, 21, 19, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902996678, 'comment_body': 'I did this condition check to solve https://github.com/openwisp/openwisp-monitoring/issues/399, later found it is due to something else so removed in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/b60c7b8408ec23f43a6769a7e71f11006f2c5f21', 'comment_created': datetime.datetime(2022, 6, 21, 19, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905764504, 'comment_body': 'I would log a more descriptive warning here. \r\n```suggestion\r\n            logger.warning(f\'Failed to get a working DeviceConnection for ""{device}"", iperf check skipped!\')\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 6, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905766348, 'comment_body': ""`AbstractDeviceConnection.connect` returns the working connection \r\nhttps://github.com/openwisp/openwisp-controller/blob/2504eaaaf972c9f9ff9d51a661735d6f1a9d0080/openwisp_controller/connection/base/models.py#L319-L331\r\n\r\nYou can refactor this as following: \r\n```suggestion\r\n        # The DeviceConnection could fail if the management tunnel is down.\r\n        if not device_connection.connect():\r\n            logger.warning(f'{device}: SSH connection is not working, Iperf skipped!')\r\n            return\r\n```\r\n\r\nI think openwisp-controller already takes cares of authentication errors. Can you double check this and confirm?"", 'comment_created': datetime.datetime(2022, 6, 24, 6, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905776864, 'comment_body': ""If we have a non-zero exit code, shouldn't we log an error here? E.g. what if the iperf client was not installed on the device. "", 'comment_created': datetime.datetime(2022, 6, 24, 7, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905785454, 'comment_body': 'Right now, you are writing `1`s and `0`s to the influxdb database depending whether the iperf check was successful or not. What if the TCP check passes but the UDP encountered an error? ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807556, 'comment_body': 'This implementation seems wrongs to me. You are ignoring the results from UDP tests. This is what I receive from the iperf command \r\n\r\n**TCP**\r\n```\r\n""sum_sent"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.000194,\r\n    ""seconds"":\t10.000194,\r\n    ""bytes"":\t63045632,\r\n    ""bits_per_second"":\t50435527.150773272,\r\n    ""retransmits"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n""sum_received"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.00187,\r\n    ""seconds"":\t10.00187,\r\n    ""bytes"":\t63044880,\r\n    ""bits_per_second"":\t50426474.249315374,\r\n    ""sender"":\ttrue\r\n},\r\n\r\n```\r\n\r\n**UDP**\r\n```\r\n""sum"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.002139,\r\n    ""seconds"":\t10.002139,\r\n    ""bytes"":\t49848848,\r\n    ""bits_per_second"":\t39878340.650697961,\r\n    ""jitter_ms"":\t0.092103039542695428,\r\n    ""lost_packets"":\t0,\r\n    ""packets"":\t34426,\r\n    ""lost_percent"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n```\r\n\r\nWas there a discussion that I am forgetting about ignoring ignoring bits/second for UDP test? Since, we are doing both tests, we should store value for both of them. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807829, 'comment_body': '@nemesisdesign this requires your input. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905813758, 'comment_body': ""Why do we need to take `MEAN` here? Shouldn't this be similar to the `traffic` query? \r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/8823581c01ff8f62a9dec9d80f2ba21eb4d3bc0e/openwisp_monitoring/db/backends/influxdb/queries.py#L39-L47"", 'comment_created': datetime.datetime(2022, 6, 24, 7, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905814495, 'comment_body': 'Okay! üëçüèº ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905820989, 'comment_body': 'packet and packet loss in themselves are not useful metrics. I think `lost_percent` would be more useful to the users. \r\n\r\nWhat do you think @nemesisdesign @okraits ? ', 'comment_created': datetime.datetime(2022, 6, 24, 8, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905827459, 'comment_body': 'We can try to log the error from the output: \r\n\r\n```\r\n{\r\n        ""start"":        {\r\n                ""connected"":    [],\r\n                ""version"":      ""iperf 3.10.1"",\r\n                ""system_info"":  ""Linux openwrt-router 5.4.188 #0 Sat Apr 16 12:59:34 2022 mips""\r\n        },\r\n        ""intervals"":    [],\r\n        ""end"":  {\r\n        },\r\n        ""error"":        ""error - unable to connect to server: Connection refused""\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 8, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905974797, 'comment_body': 'I will check :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905975261, 'comment_body': 'Yes, it would be better to log an error here :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905976168, 'comment_body': ""I'm also thinking on this, I will do some research and try to implement different logic :+1: "", 'comment_created': datetime.datetime(2022, 6, 24, 11, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905978785, 'comment_body': 'Initially I have also this in my mind to store the result of UDP test that includes `(""bytes"", ""bits_per_second"")` but we already calculated this in TCP test. Do we need to store these fields in UDP test as well?\r\n', 'comment_created': datetime.datetime(2022, 6, 24, 11, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905979770, 'comment_body': 'Same question.', 'comment_created': datetime.datetime(2022, 6, 24, 11, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906019240, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 12, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906058371, 'comment_body': 'Opened : https://github.com/openwisp/openwisp-monitoring/issues/405', 'comment_created': datetime.datetime(2022, 6, 24, 13, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906862863, 'comment_body': ""> I'm also thinking on this, I will do some research and try to implement different logic +1\r\n\r\nCan we do something like if any (tcp, udp) of iperf get passed, we can store `iperf_result` field to 1 otherwise 0. For eg: \r\n\r\n```bash\r\n# If both test passed\r\n'values': {'iperf_result': 1, 'sent_bps': 1.49, 'received_bps': 1.49, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.01, 'packets': 898, 'lost_packets': 0, 'lost_percent': 0.0},\r\n# TCP passed UDP failed (previously all values was set to '0' including 'iperf_result'), Now :\r\n'values': {'iperf_result': 1, 'sent_bps': 1.5, 'received_bps': 1.5, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n# Both fails\r\n'values': {'iperf_result': 0, 'sent_bps': 0.0, 'received_bps': 0.0, 'sent_bytes': 0.0, 'received_bytes': 0.0, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n``` \r\n**Update :** Added this in [e178c10](https://github.com/openwisp/openwisp-monitoring/pull/394/commits/e178c1062aabced0ed3fbeca08d725ea9ce18bc3)"", 'comment_created': datetime.datetime(2022, 6, 26, 19, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 907723915, 'comment_body': 'TCP consumes more bandwidth for acks so the throughput can end up being smaller.\r\nIt could be useful to have both values.', 'comment_created': datetime.datetime(2022, 6, 27, 19, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 907737238, 'comment_body': ""let's keep lost_packets but calculate also the percentage of lost packets and show it that way to users, it should be better"", 'comment_created': datetime.datetime(2022, 6, 27, 19, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 911230925, 'comment_body': '```suggestion\r\nWhether `Iperf <#iperf-1>`_ checks are created automatically for devices. The devices must have ``SSH`` `access credential <link to access credentials in controller module>`_  & \r\n`iperf3 openwrt package <https://openwrt.org/packages/pkgdata/iperf3>`_ must be installed on the devices in order for this check to work.\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911233971, 'comment_body': ""@Aryamanz29 don't make these tables too wide. As you can observe here it is difficult to read. Please break the content into multiple lines. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911234828, 'comment_body': 'Especially here, I would break it into two more more lines, one for `int` and other for `float`. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911237693, 'comment_body': '**Nitpick**: Why to use a helper function here?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911238413, 'comment_body': ""Didn't we decide to not do this conversion here? Please correct me if I am wrong. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911239618, 'comment_body': 'Why not in Gbps?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911241075, 'comment_body': 'Is this a reminder? We should flip  it back to False, and set this value in settings.py', 'comment_created': datetime.datetime(2022, 6, 30, 16, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911243851, 'comment_body': 'This device should automatically get an iperf check according to the settings. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911245912, 'comment_body': 'I would refactor this test in following ways to make it more readable:\r\n\r\n1. change the subTest string to `Test device connection not working`\r\n2. set `dc.is_working` to `False` inside the subTest', 'comment_created': datetime.datetime(2022, 6, 30, 16, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911247389, 'comment_body': '```suggestion\r\n                f\'DeviceConnection for ""{device}"" is not working, iperf check skipped!\'\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911259766, 'comment_body': 'https://github.com/openwisp/openwisp-monitoring/blob/issue-385/iperf-check/openwisp_monitoring/check/classes/iperf.py#L109-L112', 'comment_created': datetime.datetime(2022, 6, 30, 17, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911263287, 'comment_body': ""It always comes out very small value when I changed to `Gbps`. We'll remove these manual conversions once https://github.com/openwisp/openwisp-monitoring/pull/397 get merged :+1: "", 'comment_created': datetime.datetime(2022, 6, 30, 17, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911704200, 'comment_body': 'Yes it should be `false`.', 'comment_created': datetime.datetime(2022, 7, 1, 7, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907075, 'comment_body': 'I used this to make `deviceconnection.connect()` easier to mock inside `test_iperf.py`.', 'comment_created': datetime.datetime(2022, 7, 1, 12, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907644, 'comment_body': ""I'll update :+1: "", 'comment_created': datetime.datetime(2022, 7, 1, 12, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 915687006, 'comment_body': '@Aryamanz29, I asked you not to you such wide table in the last review. The ReST renderer expects to new lines to render a blank line. \r\n\r\nE.g.\r\n\r\n```rest\r\nline1 \r\nline2 \r\n```\r\n\r\nwill appear as \r\n\r\n```\r\nline1 line2\r\n```\r\n\r\nYou should also review the rendered output on GitHub. I generally check my work on https://livesphinx.herokuapp.com, you can try that too.  ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915689090, 'comment_body': 'I would break this into two lines. This is not a hard rule, but try to limit a line to 110 characters. ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915692482, 'comment_body': '```suggestion\r\nThis check is **disabled by default**. You can enable auto creation of this check by setting the\r\n`OPENWISP_MONITORING_AUTO_IPERF <#OPENWISP_MONITORING_AUTO_IPERF>`_ to ``True``.\r\n\r\nIt also supports tuning of various).\r\n\r\nYou can also change the parameters used for iperf checks (e.g. timing, buffers, protocols, etc.) using the\r\n`OPENWISP_MONITORING_IPERF_CHECK_CONFIG <#OPENWISP_MONITORING_IPERF_CHECK_CONFIG>`_ setting.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 9, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695216, 'comment_body': 'Always use relative  hyperlinks \r\n\r\n```suggestion\r\n Follow the steps in `""How to configure push updates"" section of  the openwisp-controller documentation <https://github.com/openwisp/openwisp-controller#how-to-configure-push-updates>`_ to allow SSH access to \r\n you device from OpenWISP.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695430, 'comment_body': ""Isn't it **OpenWRT SSH** ?\r\n\r\n```suggestion\r\n**Note:** Make sure device connection is enabled & working with right update strategy i.e. ``OpenWRT SSH``.\r\n```"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697414, 'comment_body': '```suggestion\r\nFor example:\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697901, 'comment_body': 'We should also point it out here to configure the celery beat. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915699905, 'comment_body': ""I don't think we need to point out here that the device needs a working SSH connection here. \r\n\r\nSomething like this would work fine \r\n\r\n```\r\nThis setting allows you to choose whether `iperf <#iperf-1>`_ checks should be\r\ncreated automatically for newly registered devices. It's disabled by default.\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915701397, 'comment_body': ""Let's remove reference to the configuration of Ping check. We will make users read the section even though we are explaining everything here. "", 'comment_created': datetime.datetime(2022, 7, 7, 10, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915705234, 'comment_body': 'I would create a heading `Usage Instructions` and move this section under the sub-heading `How to configure iperf check`.  This is make it similar to REAMDE of openwisp-controller. \r\n\r\nWait for @nemesisdesign opinion before going ahead with this change. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 916233073, 'comment_body': 'After adding `|` to my table, it looks like this : \r\n\r\n![Screenshot from 2022-07-08 01-23-35](https://user-images.githubusercontent.com/56113566/177860603-acd2bc75-cd62-4ad4-b338-a208073e2b76.png)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 7, 19, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916234611, 'comment_body': 'Got it :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 19, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244480, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244614, 'comment_body': 'Yes :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916265071, 'comment_body': ""I am not sure I understood correctly but if you look at the result generated at https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#iperf-1, it doesn't look good (this heading is bigger than the one above), so anything better than that will be ok for me, I am pretty sure we have to give it a last round of refinement anyway @pandafy."", 'comment_created': datetime.datetime(2022, 7, 7, 20, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 916890810, 'comment_body': 'Improved docs :+1: ', 'comment_created': datetime.datetime(2022, 7, 8, 14, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 917277808, 'comment_body': '`OPENWISP_MONITORING_CHECKS` should go here and be inferred from `CHECK_CLASSES` automatically, eg:\r\n\r\n```python\r\nCHECKS_LIST = list(dict(CHECK_CLASSES).keys())\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 15, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 918012397, 'comment_body': '- Added `CHECKS_LIST` in `checks/settings.py` and remained same celery beat config for **ping** and **config applied** check. \r\n- Added instructions in  `How to configure iperf check` to configure celery beat for **iperf** check.\r\n- Raise exception if check is `ImproperlyConfigured`\r\n![Screenshot from 2022-07-11 19-15-08](https://user-images.githubusercontent.com/56113566/178290155-fd900676-f6b4-4e58-a1f6-ea164861960e.png)', 'comment_created': datetime.datetime(2022, 7, 11, 14, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918272675, 'comment_body': ""Alternate option  : \r\n```py\r\nCHECKS_DICT = get_settings_value('CHECK_DICT', dict((check[::-1] for check in CHECK_CLASSES)))\r\n# {'Ping': 'openwisp_monitoring.check.classes.Ping', 'Configuration Applied': 'openwisp_monitoring.check.classes.ConfigApplied', 'Iperf': 'openwisp_monitoring.check.classes.Iperf'}\r\n```"", 'comment_created': datetime.datetime(2022, 7, 11, 19, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918273373, 'comment_body': 'Here, we can add :\r\n```py\r\nCHECKS_LIST = list(CHECKS_DICT.values())\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 19, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918275963, 'comment_body': 'Instead of hard coding check index here, We could use `CHECK_DICT` :\r\n```py\r\n    if checks is None:\r\n        # Executes only auto checks ie. ping and config applied\r\n        checks = [CHECKS_DICT[\'Ping\'], CHECKS_DICT[\'Configuration Applied\']]\r\n\r\n    # Checks that are defined in celery beat configuration\r\n    if not isinstance(checks, list):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be of type ""list""\')\r\n    if not all(check_path in CHECKS_LIST for check_path in checks):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be in {CHECKS_LIST}\')\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 11, 19, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918865697, 'comment_body': 'Why is this removed? ', 'comment_created': datetime.datetime(2022, 7, 12, 11, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918868713, 'comment_body': ""```suggestion\r\n    CELERY_BEAT_SCHEDULE = {\r\n        # Other celery beat configurations\r\n\r\n        # Celery beat configuration for iperf check\r\n        'run_iperf_checks': {\r\n            'task': 'openwisp_monitoring.check.tasks.run_checks',\r\n            # https://docs.celeryq.dev/en/latest/userguide/periodic-tasks.html#crontab-schedules\r\n            # Executes check every 5 mins from 00:00 AM to 6:00 AM (night)\r\n            'schedule': crontab(minute='*/5', hour='0-6'),\r\n            # Iperf check path\r\n            'args': (['openwisp_monitoring.check.classes.Iperf'],),\r\n            'relative': True,\r\n        }\r\n    }\r\n```"", 'comment_created': datetime.datetime(2022, 7, 12, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918920897, 'comment_body': '**nitpick:** constants should come before any function definition. ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918931330, 'comment_body': 'why not move these mocks as decorators like it is done for other tests? ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919153018, 'comment_body': ""Why don't we set this to `None` here? Then, we won't need to pass `None` argument in the celery beat configuration. \r\n\r\nAfter deploying this to the demo system, I found that the iperf check was running every 5 minutes. It was because the existing celery beat configuration for `run_checks` command  didn't passed the `None` argument. \r\n\r\nhttps://github.com/openwisp/ansible-openwisp2/blob/7c51773114d3cb9e0ae6a0c312c3f95e403b84ef/templates/openwisp2/settings.py#L231-L234\r\n\r\nWe want to be least destructive to existing systems. Also, it is wiser to have a non-mutable default parameter. "", 'comment_created': datetime.datetime(2022, 7, 12, 16, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919181343, 'comment_body': 'I think this comment is outdated. ', 'comment_created': datetime.datetime(2022, 7, 12, 16, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919202793, 'comment_body': 'Initially I did this, but what if we run management command `run_checks`, In that case it will only execute **ping** and **config applied** check instead of executing all checks in the development.', 'comment_created': datetime.datetime(2022, 7, 12, 16, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919208793, 'comment_body': 'We can modify the management command to pass all three checks in the arguments. \r\n\r\nRunning all three checks is not a standard case here. Running `ping` and `config` checks is the standard case. \r\n\r\nIf you want to provide configurability to users, you can additionally allow passing the check dotted path as arguments to the run_checks command as follows: \r\n\r\n```\r\n./manage.py run_checks openwisp_monitoring.check.classes.Iperf,openwisp_monitoring.check.classes.ConfigApplied\r\n```\r\n\r\nBut, this is not our goal now. ', 'comment_created': datetime.datetime(2022, 7, 12, 17, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919228751, 'comment_body': ""By mistake üòÖ I'll add :+1: "", 'comment_created': datetime.datetime(2022, 7, 12, 17, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919261044, 'comment_body': 'I did this because if I use decorator style mocks for `test_iperf_check` (which consists of various subTests) then for every subTests I\'m getting additive `mock_method` call counts (It includes method calls from previous subTest) which I thought is not a good idea.\r\n**For eg:**\r\n```py\r\n    @patch.object(Iperf, \'_exec_command\')\r\n    @patch.object(Iperf, \'_get_iperf_servers\', return_value=[\'iperf.openwisptestserver.com\'])\r\n    @patch.object(iperf_logger, \'warning\')\r\n    def test_iperf_check(self, mock_warn, mock_get_iperf_servers, mock_exec_command):\r\n        check, _ = self._create_iperf_test_env()\r\n        error = ""ash: iperf3: not found""\r\n        tcp_result = loads(RESULT_TCP)[\'end\']\r\n        udp_result = loads(RESULT_UDP)[\'end\'][\'sum\']\r\n\r\n        with self.subTest(\'Test iperf3 is not installed on the device\'):\r\n                mock_exec_command.side_effect = [(error, 127)]\r\n                with patch.object(iperf_logger, \'warning\') as mock_warn:\r\n                    check.perform_check(store=False)\r\n                    mock_warn.assert_called_with(\r\n                        f\'Iperf3 is not installed on the ""{self.device}"", error - {error}\'\r\n                    )\r\n                self.assertEqual(mock_warn.call_count, 1)\r\n                self.assertEqual(mock_exec_command.call_count, 1)\r\n                mock_get_iperf_servers.assert_called_once_with(\r\n                    self.device.organization.id\r\n                )\r\n        with self.subTest(\'Test iperf check passes in both TCP & UDP\'):\r\n                mock_exec_command.side_effect = [(RESULT_TCP, 0), (RESULT_UDP, 0)]\r\n                ...\r\n                ...\r\n\r\n                self.assertEqual(mock_warn.call_count, 0)\r\n                # AssertionError: 1 != 0 (Includes call count from previous subTest, Actual call 1)\r\n                self.assertEqual(mock_exec_command.call_count, 2)\r\n                # AssertionError: 3 != 2 (Same here, But exec_command actually called 2 times)\r\n    \r\n``` ', 'comment_created': datetime.datetime(2022, 7, 12, 18, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 920330832, 'comment_body': 'This test does not have any user, hence no notification is created. \r\n\r\nCreate an admin user with \r\n```\r\nself._create_admin()\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 17, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 921554871, 'comment_body': '`Todo `: Change this link after PR merge', 'comment_created': datetime.datetime(2022, 7, 14, 20, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 922313899, 'comment_body': ""Let's move all these images into the 1.1 directory please:\r\nhttps://github.com/openwisp/openwisp-monitoring/tree/docs/docs/1.1\r\nThis is needed so that if in version 1.2 we change the look of the UI, we can upload new screenshot for the 1.2 version without affecting the docs for the 1.1 version."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922314175, 'comment_body': ""let's try to break long lines please"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922320756, 'comment_body': ""I believe it's better to be explicit here and specify the ping and config_applied checks"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922324487, 'comment_body': ""I believe that if `checks` is `None` we should execute all the checks and not skip a particular check like we are doing here,  This is not consitent.\r\n\r\nMoreover, the check list can be changed by users, so the order may not be in the one we expect here, this is not robust.\r\n\r\nSo please let's remove this."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922325814, 'comment_body': ""I know that this is the output of iperf, but it's nice to have it more readable.\r\nCan you please re-format these JSON strings so they're more readable and have 4 spaces indentation?"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922349492, 'comment_body': ""we cannot do this because if the connection fails because the device is temporarily offline, then when it comes back up this flag will still be false, because SSH connections right now are tried by the system only on configuration changes, so the following can happen:\r\n\r\n- a device goes offline\r\n- iperf check runs, tries SSH connection, but fails, `is_working` is set to False by the system\r\n- the device comes back online, but no config change is done, so is_working stays False because the system hasn't tried to connect to it yet\r\n- iperf check runs again, but since `is_working` is still False, the check is not executed\r\n\r\nSo let's remove this filter."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 923036134, 'comment_body': 'üëç', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923036228, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923037224, 'comment_body': ""You're right, I'll remove `is_working` from filter :+1: "", 'comment_created': datetime.datetime(2022, 7, 18, 7, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923076855, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 8, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 924836785, 'comment_body': 'In this PR, we should also allow configuring the `bitrate` option. The default value for bitrate in UDP mode is small which leads to insignificant results from iperf. \r\n\r\nWe can leave other options for later in https://github.com/openwisp/openwisp-monitoring/issues/416', 'comment_created': datetime.datetime(2022, 7, 19, 18, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 924837883, 'comment_body': 'I think we should set bitrate on UDP to default to 10 MB and recommend users to tweak this according to their needs.\r\nOn TCP bitrate can default to 0 (unlimited).', 'comment_created': datetime.datetime(2022, 7, 19, 18, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925359967, 'comment_body': 'I would add a comment here explaining that since all three `username`, `password` and `rsa_public_key` is required for authentication to work, we only check for `username` here. ', 'comment_created': datetime.datetime(2022, 7, 20, 9, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925360323, 'comment_body': ""```suggestion\r\n    'rsa_public_key': {\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925361396, 'comment_body': ""```suggestion\r\n        # Exit code 127 : command doesn't exist\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925371059, 'comment_body': 'We use `app_settings` to distinguish between app and project settings (django.conf.settings). \r\n```suggestion\r\nfrom .. import settings as app_settings\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 9, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925419463, 'comment_body': ""I would declare the common mocks with decorators to reduce code duplicity. \r\n```suggestion\r\n    @patch.object(Iperf, '_get_iperf_servers', return_value=['iperf.openwisptestserver.com'])\r\n    @patch.object(Iperf, '_exec_command', side_effect=[(RESULT_TCP, 0), (RESULT_UDP, 0)])\r\n    @patch.object(iperf_logger, 'warning')\r\n    def test_iperf_check_auth_config(self, mock_warn, mock_exec_command, mock_get_iperf_servers):\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 10, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925425064, 'comment_body': 'After removing common mocks, I would update this to \r\n\r\n\r\n```suggestion\r\n            with patch.object(\r\n                settings, \'IPERF_CHECK_CONFIG\', iperf_config\r\n            # It is required to mock ""Iperf.schema"" here so that it \r\n            # uses the updated configuration from ""IPERF_CHECK_CONFIG"" setting.\r\n            ), patch.object(Iperf, \'schema\', get_iperf_schema()):\r\n```\r\n\r\nI have added a comment there because it was not entirely clear from the code why the `Iperf.schema` is mocked. Only after tinkering of code, I realised the reason. The comment will prevent us from making unnecessary efforts in the future. ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925426154, 'comment_body': 'After completion of each sub-test, reset the mocks with the following code: \r\n\r\n```suggestion \r\n        mock_exec_command.reset_mock()\r\n        mock_warn.reset_mock()\r\n        mock_get_iperf_servers.reset_mock()\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 10, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427096, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427263, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925428810, 'comment_body': 'This entire block has been repeated 3 times in the file. Can we move these assertions to an internal method of the test class and call it wherever required? ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925607910, 'comment_body': 'Thanks !', 'comment_created': datetime.datetime(2022, 7, 20, 13, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 927586330, 'comment_body': 'the indentation is not right here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927586538, 'comment_body': ""aren't we missing the instructions to run the iperf check?"", 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927587808, 'comment_body': '```suggestion\r\nIperf authentication\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927588695, 'comment_body': '```suggestion\r\nBy default iperf check runs without any kind of **authentication**,\r\nin this section we will explain how to configure **RSA authentication** \r\nbetween the **client** and the **server** to restrict connections\r\nto authenticated clients.\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927589925, 'comment_body': '```suggestion\r\nAfter running the commands mentioned above, the public key will be stored in ``public.pem`` \r\n```\r\n\r\nKeep it short, apply a similar change also to ``private_not_protected.pem``, I would also rename that as `private_key.pem`, while I would rename `public.pem` to `public_key.pem`.', 'comment_created': datetime.datetime(2022, 7, 22, 12, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927591635, 'comment_body': 'indentation is wrong here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927592482, 'comment_body': 'what is `default`?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927595377, 'comment_body': 'We already have a setting to configure iperf, why are you adding a new one?\r\n\r\nCan we compress everything in one setting?\r\n\r\nEg:\r\n\r\n```python\r\nOPENWISP_MONITORING_IPERF = {\r\n    \'a9734710-db30-46b0-a2fc-01f01046fe4f\': [\r\n        {\r\n            \'host\': [\'iperf1.openwisp.io\', \'iperf2.openwisp.io\'],\r\n            \'username\': \'iperfuser\',\r\n            \'password\': \'iperfpassword\',\r\n            \'rsa_public_key\': (\r\n""""""\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwuEm+iYrfSWJOupy6X3N \r\ndxZvUCxvmoL3uoGAs0O0Y32unUQrwcTIxudy38JSuCccD+k2Rf8S4WuZSiTxaoea \r\n6Du99YQGVZeY67uJ21SWFqWU+w6ONUj3TrNNWoICN7BXGLE2BbSBz9YaXefE3aqw \r\nGhEjQz364Itwm425vHn2MntSp0weWb4hUCjQUyyooRXPrFUGBOuY+VvAvMyAG4Uk \r\nmsapnWnBSxXt7Tbb++A5XbOMdM2mwNYDEtkD5ksC/x3EVBrI9FvENsH9+u/8J9Mf \r\n2oPl4MnlCMY86MQypkeUn7eVWfDnseNky7TyC0/IgCXve/iaydCCFdkjyo1MTAA4 \r\nBQIDAQAB\r\n"""""")\r\n            \'client_options\': {\r\n                \'port\': \'6209\',\r\n                \'udp\': {\r\n                    \'bitrate\': \'20M\'\r\n                },\r\n                \'tcp\': {\r\n                    \'bitrate\': \'0\'\r\n                }\r\n            }\r\n        }\r\n    ],\r\n}\r\n``` \r\n\r\nDoes it make sense?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 932113139, 'comment_body': 'Done üëç', 'comment_created': datetime.datetime(2022, 7, 28, 11, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932117536, 'comment_body': 'Sure :)', 'comment_created': datetime.datetime(2022, 7, 28, 11, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932122726, 'comment_body': 'I made it to look consistent with [`OPENWISP_MONITORING_PING_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring#openwisp_monitoring_ping_check_config), Now I have changed `iperf config setting` according to https://github.com/openwisp/openwisp-monitoring/issues/418', 'comment_created': datetime.datetime(2022, 7, 28, 11, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932125477, 'comment_body': 'Yes, it would be better to have a single setting for `iperf check` :+1: ', 'comment_created': datetime.datetime(2022, 7, 28, 11, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932202486, 'comment_body': 'I think it is mention in [`iperf-check#how-to-configure-iperf-check`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#3-configure-iperf-settings)', 'comment_created': datetime.datetime(2022, 7, 28, 13, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933005488, 'comment_body': 'This looks incorrect to me', 'comment_created': datetime.datetime(2022, 7, 29, 8, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933008280, 'comment_body': 'Do we need this @nemesisdesign ? ', 'comment_created': datetime.datetime(2022, 7, 29, 8, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933010148, 'comment_body': 'I think we should link this page instead https://openwisp.io/docs/user/configure-push-updates.html', 'comment_created': datetime.datetime(2022, 7, 29, 8, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933033617, 'comment_body': 'nitpick, can you please remove this blank line? ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933035363, 'comment_body': 'Can you please add a docstring here explaining this method ?', 'comment_created': datetime.datetime(2022, 7, 29, 9, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933046950, 'comment_body': 'The order should be same as `trace_order` otherwise, it will show incorrect labels. ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933108012, 'comment_body': 'Did you try using `connectgaps: true` instead of doing this as suggested in example shared by Federico? I was able to achieve similar results with that option locally. Can you double check that please? ', 'comment_created': datetime.datetime(2022, 7, 29, 10, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933142183, 'comment_body': 'I and @nemesisdesign had meet in which he suggested me to add this about `iperf charts` in the `README`. ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933144201, 'comment_body': 'ploty `connectgaps` property only works for scatter charts. More info : https://plotly.com/python-api-reference/generated/plotly.graph_objects.Scatter.html', 'comment_created': datetime.datetime(2022, 7, 29, 11, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933145799, 'comment_body': 'okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 7, 29, 11, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933147324, 'comment_body': 'thanks! I will update :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933147488, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933198121, 'comment_body': 'Sure üëç', 'comment_created': datetime.datetime(2022, 7, 29, 12, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933199473, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2022, 7, 29, 12, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 935156010, 'comment_body': 'Okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 8, 2, 6, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 937864645, 'comment_body': ""respect the spacing (I wish the linter warned about this!):\r\n\r\n```\r\nif (unit.includes('+')) {\r\n`"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937864912, 'comment_body': 'same here and below', 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937867677, 'comment_body': ""let's do those changes to the charts that we discussed (have bandwidth and transfer as simple lines with no fill and have 2 lines in each chart, one for TCP and one for UDP), then update the README here and screenshots."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937870690, 'comment_body': ""I don't understand, isn't this something that depends on a specific server? Why do we have a global setting?"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937874363, 'comment_body': ""definitely we cannot link files which are published in branches we are going to delete, please double check the rest of the document for similar problems, we can point to master here, even thought it won't work until published, but that's ok."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875205, 'comment_body': 'this change is unnecessary, please revert it', 'comment_created': datetime.datetime(2022, 8, 4, 14, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875935, 'comment_body': 'shall we default this to 30 MB? I think 10 is quite low.', 'comment_created': datetime.datetime(2022, 8, 4, 14, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937878521, 'comment_body': 'please break lines and maintain line length consistent with the rest of the document', 'comment_created': datetime.datetime(2022, 8, 4, 14, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937880972, 'comment_body': 'make sure spacing around parenthesis is consistent with the rest of the JS code', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881165, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881327, 'comment_body': 'double check all blocks please', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937889998, 'comment_body': ""isn't the final return statment suppposed to be updated here??\r\n\r\n```\r\nreturn self._time_crossed(time) and value_crossed\r\n```\r\n\r\nIs not taking in consideration the related field.\r\n\r\nWhat if value_crossed is False but the related value is crossed?\r\n\r\nWhat about `if self.tolerance == 0:`???\r\n\r\nSo now I have some more basic quesitons:\r\n\r\n1. Why was this kind of change, which is very delicate, introduced in this huge PR? Do we have to introduce this change or can we make the iperf check work without it for now? \r\n\r\n2. Looking at this code, I am pretty scared to merge it! I do not want to do this.\r\n@Aryamanz29 can you extract these commits into a separate branch please? I want to merge the rest of the work but not this right now, I think it needs more careful thought."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937890192, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938006217, 'comment_body': ""Linter didn't warn ü§î I'll check all my code manually :+1: \r\n\r\n![Screenshot from 2022-08-04 21-54-41](https://user-images.githubusercontent.com/56113566/182901953-77fbb3ee-110b-4660-ba2b-c2d5fdb60f2b.png)\r\n"", 'comment_created': datetime.datetime(2022, 8, 4, 16, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938205036, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 4, 20, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938249501, 'comment_body': 'Yes it should be defined in [`OPENWISP_IPERF_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config)', 'comment_created': datetime.datetime(2022, 8, 4, 21, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938256975, 'comment_body': ""1. Yes, we can make `iperf check` work without this feature (check will run without any `alertsettings`)\r\n2. I'll remove `alert_on_related_field` feature from this PR as of now & will open a separate PR :+1:"", 'comment_created': datetime.datetime(2022, 8, 4, 21, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938700817, 'comment_body': ""why there's both `rsa_public_key` and `rsa_public_key_path`? Are users supposed to use either one or the other?\r\nHow does it work? Was this meant to be the private key?"", 'comment_created': datetime.datetime(2022, 8, 5, 10, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938721204, 'comment_body': ""This is the location where the `client (ie. openwrt device)` stores it's `rsa_public_key` for `iperf check`. By default, it is `/tmp/iperf-rsa-public.pem` and this path is required for iperf3 auth, but we can also change this using [OPENWISP_IPERF_CHECK_CONFIG](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config). More info : https://github.com/openwisp/openwisp-monitoring/issues/414#issuecomment-1189408176"", 'comment_created': datetime.datetime(2022, 8, 5, 11, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938723543, 'comment_body': 'Iperf command basically doing  `f\'echo ""{rsa_public_key}"" > {rsa_public_key_path}` and after completion of check removing key from the device `rm {rsa_public_key_path}`', 'comment_created': datetime.datetime(2022, 8, 5, 11, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938733455, 'comment_body': ""`/tmp/iperf-public-key.pem` does not need to be configurable at this level, there's no usefulness in this, just set `/tmp/iperf-public-key.pem` to a variable and use the variable throughout the rest of the implementation."", 'comment_created': datetime.datetime(2022, 8, 5, 11, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938777476, 'comment_body': 'Ok :+1: ', 'comment_created': datetime.datetime(2022, 8, 5, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}]","[{'commit_sha': '506f044bfacdbf2e57448e4dd6f796b16fe764d0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd112b85b34fb0ff7ada391849cdc8be9d36743', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47467ef97bc91783babd7f8ffcaa9a06fd23f45', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488990b941bab99f046237bddf061d6a665d95de', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f890ba95c3291bff34875dad9213c00dfd345b65', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ec0dc06db4b7d14dce066b4210ca83f32fd8f0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a79a5dff088d7e1d2aef7d339c9aef0b201911', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f63fcaa77527c3a24efe88be179339a412b4dc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a346efc3fafe216a30b5a0c957f594d822c704d', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9383f3a340945d316f3f4d20e7f3fdce7cbe1b97', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7dfd5fd259da12054d149fa60edee448b68eba', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d98a66d46039c27f3048af2366aec579e681cc4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3050edf18d15c9679e0fe4047883d28ad502ac87', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efdc70a65c784586df0ef7e5e162f8c84b4c914c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f65c6adcfd92abcf5c17706796d98dd3549a74e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7396e79b0c9f8b7ae0c211bdeb025aba5737325f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b881e0616d770710cf5500dd460e5db7fd7e48b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d732bb3310db85781acc5c198541386f1373ba6', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c488abc5a9ba560c03b0a649b0502600624911a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89563034ee0244f5849b1e9ae1f922079968ad2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c75428e79debde7016665a23b9e88383c848d2f9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a9eef80a7f2d0619ef806e8f6880c9d569762a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59089944b285b38ec16847926ea16bb035c1c5c4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec80f2f7db65f89252a328f617cd565e0b46c07c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50921cbff514ff58034a6e5954890e9e5b69eca2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56543bf191c7df6d649eeff734fe4e98d8b9a0af', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef433eaa6b4f59e9ea9ceea05c7d742a2d8301bc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38991a9914a3abab5f00be688624b59706734d59', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b607da46f3041735fcbce771c9733847af4444', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce23bd0c38068dfcad9b993da39a83c7f5566197', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f9220243c4a3481bef065e5a0b48fec9da00db', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '840029189f6fa20ae0d371cabaa915ba25288b75', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b31104284172bb059d7d4f11956f7f1a8417e1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d472aa1eaa9b312c391847094dc3c05b270101', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2abe5d1f14d28391950375886484d04d76d67bd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391537e80877680fd06f7894aee7fa742c94a4e4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9810d2470b788385018e57fd93a34c8536a761fb', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd219e9f667377d616e7935613b4f0c6039dc675a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '808288118df92cff2bc444e9235af5d84746ff46', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d6061e4d6bee24e7e6d9c92a86f18e2f596bd1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df31203af6be0dc0876d38b683d67037163eda89', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02100af795a1c46c876aadfacf284eb1b43e1c2f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27732e6652cbca6ccc41e455161a2891f9bb1948', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9b82670d654d62ea86147a65904701e5a2bdf9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1bc269b0950f0f34fbaaacd5b7704ee3fa2c2e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ddce9d5df2bf136cbff09037aab5bc3fa67ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa74e9960a59bb83d7daf1a9a7568b78af77451f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d71d7c6009d30b285069fdb06ad8dfc543e2b91', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50256d20778eec1cc747ced27d54aa686a1e4f6b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01cd70e1de0202efcbc4fac054249258605e2e41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7b6cb1d96f90d3c14b5a3202e11be68816b0860', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d86f05471de61a7b6e7d67ddc9f2d1e4b17ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a4f9877a0e8ad6d2d55d4c77f2acd818080d1e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4196b0a077c6fc0a1422eca2ef741032d17f41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ce4a024351a43a3842e8030f2a385e7705a802', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '719932e8593b19c285e96323bfcc527abd6538cd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '631d2bf6db793e35f1129885b813e33c924bdebf', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3524a68f74762991cf4f9280605eef84bea68692', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe40f82ea7a3af6df4e0babc6198b5cb33f7501', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12d9b5f72c94dc418355099dedb73b2d5d35413', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e23d914c1ba9746c9e820eb1a5e255eb26fa73', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13b6416f9013e2e4759a28ed33e43d8c905b5134', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1dd84e9be003e17fcfc694a37c04c2994243fc', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9213aafa268485be75a32c36fc9bd349d831a755', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330
1021533508,[feature] Added support for configuring more parameters for iperf3 check,"Closes #416

Checks:

- [x] I have manually tested the proposed changes
- [x] I have written new test cases to avoid regressions (if necessary)
- [x] I have updated the documentation (e.g. README.rst)
",True,428,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/428,https://github.com/openwisp/openwisp-monitoring/pull/428,closed,503,75,4,11,1,16,1,1,[{'name': 'enhancement'}],2022-08-09 13:37:24+00:00,2022-10-06 12:58:10+00:00,5008846.0,"57 days, 23:20:46","[{'comment_id': 944614054, 'comment_body': 'I think we should move this to a separate method which returns the two commands. ', 'comment_created': datetime.datetime(2022, 8, 12, 16, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 948917716, 'comment_body': 'yes, thanks!', 'comment_created': datetime.datetime(2022, 8, 18, 9, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950133828, 'comment_body': 'I would move this to the end of the ""Iperf"" section. I would add links to this in the following sections of the documentation: \r\n\r\n1. [""3. Set up and configure Iperf server settings""](https://github.com/openwisp/openwisp-monitoring/blob/0ae7702d3cd0ddea77c7a075046697f644f9ba07/README.rst#3-set-up-and-configure-iperf-server-settings)\r\n2. [""OPENWISP_MONITORING_IPERF_CHECK_CONFIG""](https://github.com/openwisp/openwisp-monitoring/blob/0ae7702d3cd0ddea77c7a075046697f644f9ba07/README.rst#openwisp_monitoring_iperf_check_config)\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 19, 12, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950139594, 'comment_body': ""‚ö†Ô∏è Before spending time on this, let's double check with @nemesisdesign. \r\n\r\nI would restructure this table to show that other parameters should be defined under `client_options` \r\n\r\n```rst\r\n+--------------------+-------------------------------------+\r\n| ``client_options`` | +----------+---------+------------+ |\r\n|                    | | ``port`` | ``int`` | ``5201``   | |\r\n|                    | +----------+---------+------------+ |\r\n|                    | | ``time`` | ``int`` | ``10``     | |\r\n|                    | +----------+---------+------------+ |\r\n+--------------------+-------------------------------------+\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 19, 12, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950146506, 'comment_body': 'This is better, but I meant to add a method which returns the commands\r\n\r\n```python\r\ndef _get_check_command(self):\r\n    # build tcp and udp commands\r\n    return tcp_command, udp_command\r\n```    \r\n\r\n\r\nThen from `check` method, we would call this method\r\n\r\n```python\r\ndef check(self):\r\n     tcp_command, udp_command = self._get_check_command()\r\n     # perform check\r\n```\r\n\r\nThis will make the code of `check` method easy to follow. ', 'comment_created': datetime.datetime(2022, 8, 19, 12, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950858823, 'comment_body': ""Sure, I'll update that :+1: "", 'comment_created': datetime.datetime(2022, 8, 21, 14, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950859361, 'comment_body': '@pandafy I also think a nested table will fit better for `client_options`.', 'comment_created': datetime.datetime(2022, 8, 21, 15, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950859718, 'comment_body': '![Screenshot from 2022-08-21 20-31-27](https://user-images.githubusercontent.com/56113566/185797430-14f13453-7de1-4607-b672-f0a4c3704a24.png)\r\n', 'comment_created': datetime.datetime(2022, 8, 21, 15, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950860059, 'comment_body': ""I'll update that :+1:  thanks!"", 'comment_created': datetime.datetime(2022, 8, 21, 15, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 951278849, 'comment_body': 'looks good!', 'comment_created': datetime.datetime(2022, 8, 22, 10, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 952217200, 'comment_body': ""I don't think this needs to be numbered heading."", 'comment_created': datetime.datetime(2022, 8, 23, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 952218006, 'comment_body': '```suggestion\r\n```\r\nThis creates an empty row, is that intentional? ', 'comment_created': datetime.datetime(2022, 8, 23, 6, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 952219637, 'comment_body': 'great! Now the check code is easier to follow. ', 'comment_created': datetime.datetime(2022, 8, 23, 6, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 952362498, 'comment_body': ""It's not required, I'll remove that :+1: "", 'comment_created': datetime.datetime(2022, 8, 23, 9, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 985890083, 'comment_body': 'Where is it explained how to use these parameters? Is there already an example somewhere?\r\n\r\nI think we should link to https://github.com/openwisp/openwisp-monitoring/tree/issue-416/add-support-for-more-iperf-params#openwisp_monitoring_iperf_check_config and also add a few more options in that example.', 'comment_created': datetime.datetime(2022, 10, 3, 14, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 986744874, 'comment_body': ""I'll update that :+1: "", 'comment_created': datetime.datetime(2022, 10, 4, 11, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}]","[{'commit_sha': 'f2cefdd908a2a9346dd706a7036a40d9999e7ac6', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95717dad5336282cadd201373f9282d51e64270c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f5e407973fb056ee70f41c4cb9267d154cb7d63', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20e035a73b13d047c28087707d6a364aed4b47f2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68a642098345d3c713da36690cf758550d9c4ec8', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd361f340940136102294041a1c06d85440f810c5', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb064364d4872a5b90f8d50816d3e2e5b99eb1d2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53558777197973b961afeb4cc74453150b17c43b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3248ac48f6ed3745482b0b77b0015b554e9a7bde', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '574ce4281f3a003209705f151738b46c7e0f60c2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edea80d8e4665efbb61cd7952ce947810415ad0d', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330
1039676118,[feature] Added support for multiple iperf3 servers,"### `Iperf check` on multiple server

https://user-images.githubusercontent.com/56113566/187673896-1e358f5e-98bc-4afb-b3c4-21ef2750fb39.mp4

![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

#### If the server is already occupied by the `device`, then put other `iperf_checks` back in the queue

![Screenshot from 2022-09-02 17-50-46](https://user-images.githubusercontent.com/56113566/188141962-54f99094-d594-4653-8e47-34b40159f55f.png)

### Iperf check `cache keys`

![Screenshot from 2022-09-05 14-09-03](https://user-images.githubusercontent.com/56113566/188406682-cd64ea45-876f-4a2d-9f8d-0399673861c8.png)

#### Cache keys before running checks

![Screenshot from 2022-09-05 14-02-42](https://user-images.githubusercontent.com/56113566/188406328-a167d229-9a01-4a94-9718-a8b888c9d12c.png)

#### Cache keys in between running checks

![Screenshot from 2022-09-05 14-03-06](https://user-images.githubusercontent.com/56113566/188406358-63274898-dead-491e-ab15-37e9ff17cd95.png)

#### Cache keys after completion of checks

![Screenshot from 2022-09-05 14-03-24](https://user-images.githubusercontent.com/56113566/188406379-d6bb9bd4-08db-4557-a190-058c5ae03146.png)

 
Closes #391

![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)
Checks:

- [x] I have manually tested the proposed changes
- [x] I have written new test cases to avoid regressions (if necessary)
- [x] I have updated the documentation (e.g. README.rst)

Closes #439 ",True,434,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/434,https://github.com/openwisp/openwisp-monitoring/pull/434,closed,349,181,6,16,2,20,1,1,[{'name': 'enhancement'}],2022-08-29 13:15:33+00:00,2022-10-07 12:15:27+00:00,3365994.0,"38 days, 22:59:54","[{'comment_id': 965886287, 'comment_body': ""What does the `nx` parameter do? I don't see it in the [Django documentation](https://docs.djangoproject.com/en/4.1/topics/cache/#django.core.caches.cache.set). "", 'comment_created': datetime.datetime(2022, 9, 8, 12, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965918027, 'comment_body': ""Can we move this logic to the `Iperf` check class? The check instance has information about the `Check` object. \r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/4ef6fba9b54a2f041dc5efb4b2a738c66564980e/openwisp_monitoring/check/classes/base.py#L10-L14\r\n\r\nTherefore, we can also call this from the check class\r\n\r\n```python\r\nperform_check.apply_async(args=[self.check_instance.id], countdown=2 * iperf_check_time)\r\n```\r\n\r\nThe only thing I don't like about this implementation is that we will be binding the `Iperf` check class with a celery task. But we can get around it pretty easily. See below: \r\n\r\nWe add the following method in the `Check` class\r\n```python\r\nclass AbstractCheck(TimeStampedEditableModel):\r\n    # other logic\r\n    def perform_check_delayed(self, duration=0):\r\n        from ..tasks import perform_check\r\n        perform_check.apply_async(args=[[self]], countdown=duration)\r\n```\r\n\r\nThen from the `Iperf` check class, we will be able to perform this operation: \r\n\r\n```python\r\nself.check_instance.perform_check_delayed(countdown=2 * iperf_check_time)\r\n```\r\n\r\nWe do add some coupling in the second implementation as well, but it is between tasks and models of the same django app. Hence, it is less likely that it will come to bite us in the future. "", 'comment_created': datetime.datetime(2022, 9, 8, 12, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965918621, 'comment_body': '@nemesisdesign what do you think about this? ', 'comment_created': datetime.datetime(2022, 9, 8, 12, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965927254, 'comment_body': ""What does the `nx` argument do? I don't find it in the [Django's documentation](https://docs.djangoproject.com/en/4.1/topics/cache/#django.core.caches.cache.set)."", 'comment_created': datetime.datetime(2022, 9, 8, 12, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965929521, 'comment_body': '**Careful Aryaman!** You are breaking the abstraction of Django cache framework. The `nx` parameter is only supported by the Redis backend. I wonder why the code is not raising any errors because the signature of the `cache.set` function is different.  ', 'comment_created': datetime.datetime(2022, 9, 8, 12, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965932474, 'comment_body': 'You can use [`cache.add`](https://docs.djangoproject.com/en/4.1/topics/cache/#django.core.caches.cache.add) to avoid making multiple requests to the cache backend. ', 'comment_created': datetime.datetime(2022, 9, 8, 12, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965938619, 'comment_body': 'This is a good place to use [`for-else`](https://docs.djangoproject.com/en/4.1/topics/cache/#django.core.caches.cache.add).\r\n\r\n```suggestion\r\n    # Try to acquire a lock, or put task back on queue\r\n    for server in available_iperf_servers:\r\n        server_lock_key = f\'ow_monitoring_{org}_iperf_check_{server}\'\r\n        # Set available_iperf_server to the org device\r\n        lock_acquired = cache.add(\r\n            server_lock_key,\r\n            str(check.content_object),\r\n            timeout=IPERF_CHECK_LOCK_EXPIRE,\r\n        )\r\n        if lock_acquired:\r\n            break\r\n    else:\r\n        logger.warning(\r\n            (\r\n                f\'At the moment, all available iperf servers of organization ""{org}"" \'\r\n                f\'are busy running checks, putting ""{check}"" back in the queue..\'\r\n            )\r\n        )\r\n        # Return the iperf_check task to the queue,\r\n        # it will executed after 2*iperf_check_time (TCP+UDP)\r\n        perform_check.apply_async(args=[uuid], countdown=2 * iperf_check_time)\r\n        return\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 12, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965942039, 'comment_body': ""We won't require this change after implementing the suggestions left above. "", 'comment_created': datetime.datetime(2022, 9, 8, 13, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965948198, 'comment_body': 'Always do resetting of test outside of the `subTest`. In the current code, if this subTest fails for some reason, then the mocks would not be reset which would make the following sub-tests to fail as well. \r\n\r\n```suggestion\r\n            mock_set.reset_mock()\r\n            mock_warn.reset_mock()\r\n            mock_task_logger.reset_mock()\r\n            mock_exec_command.reset_mock()\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 13, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 966312173, 'comment_body': 'yeah at least we have all the logic in one place which is good for maintainability :+1: ', 'comment_created': datetime.datetime(2022, 9, 8, 18, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 967229473, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2022, 9, 9, 15, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 967231229, 'comment_body': 'My bad, I forgot to remove the `redis` parameters üòÖ', 'comment_created': datetime.datetime(2022, 9, 9, 15, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 967232290, 'comment_body': ""ok, I'll move this to `Iperf` check class, thanks!"", 'comment_created': datetime.datetime(2022, 9, 9, 15, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 967232642, 'comment_body': 'yes :+1: ', 'comment_created': datetime.datetime(2022, 9, 9, 15, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 967232947, 'comment_body': ""I'll update it :+1: "", 'comment_created': datetime.datetime(2022, 9, 9, 15, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 970767004, 'comment_body': '```suggestion\r\nthe iperf checks to run concurrently on different devices. If all of the available servers are busy, then it will add the check back in the queue.\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 12, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 971082999, 'comment_body': ""I'll update it, thanks!"", 'comment_created': datetime.datetime(2022, 9, 14, 17, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 985897081, 'comment_body': ""organisation > organization, the spelling with the s is valid too but let's stay consistent."", 'comment_created': datetime.datetime(2022, 10, 3, 14, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 985898799, 'comment_body': ""let's use `info` instead of warning, since this may happen often on busy systems and I do not see a reason to treat this log line differently than info."", 'comment_created': datetime.datetime(2022, 10, 3, 14, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 986662316, 'comment_body': ""I'll update that :+1:"", 'comment_created': datetime.datetime(2022, 10, 4, 9, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}]","[{'commit_sha': '4edc1921904e068a717dff426a7078afd0b7954c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca8153bfc13a1c6cae9a489c5e257999fb35331b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff189b63c56d8f8b888f4b98303baa6f1f1de21c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a599dc9330d9e25ab74be2a448bf3010ff9b983e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d5c2c7ecf857cb3264dc922b26a7e7cd2c46ce2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1093bb16c81e07ab6668c3ca0ecb228ea36e9a8', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59a9ab9d2305fd30214a20043659cbee742941f6', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ff1add44d26864c6600a19090ce96ad2aed3c2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd57f970863af00bd67127e5a40990ed4b016fd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29114d411cc5c517fc49fbc3979880ab535157bb', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef0035a3f438453430e99cac131ab28a93d9a56f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c15290a482410346f3d58369c6be615ea99b0d3', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e467114cde80b58ebae0c353f189a88a4813ebf', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a280b6d488eccf87a22594e7a0c9754c7adce1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6bd4b871c78917b05eb23e23338f7edc9184735', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '500e0debc5254ad070218e35e9b3f1b6298d788c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330
958876982,[feature] Implement Iperf3 check #385,"- Added initial code for **Iperf3 check class.**
- Added **tests** for check class.
- Added **device connection** logic.
- Added **charts & metric (TCP & UDP mode)**.

## `Steps to test`
1. Make sure your client **(openwrt-device)** and server both have [Iperf3](https://iperf.fr/iperf-download.php), [Openwrt Iperf3 package](https://openwrt.org/packages/pkgdata/iperf3)  installed.
2.  Do check **the credential section of the device** _(It must be enabled and working with the right update strategy, i.e., **ssh**)_.

![173354971-728cb1b4-4bf1-4d89-9c22-ce9b9b1e2bef](https://user-images.githubusercontent.com/56113566/173355074-3918d860-a4ad-4f84-bfa4-2c23a7e8d94e.png)

3.  In `tests/openwisp2/settings.py` configure:
```py
OPENWISP_MONITORING_IPERF3_SERVERS = {
    # Running on my local
    # Some Public Iperf3 Servers : https://iperf.fr/iperf-servers.php#public-servers
    # 'be63c4e5-a68a-4650-bfe8-733837edb8be': ['iperf.biznetnetworks.com'],
    'a9734710-db30-46b0-a2fc-01f01046fe4f': ['speedtest.uztelecom.uz'],
    # '<org-pk>': ['<ORG_IPERF3_SERVER>']
}

```
 **NOTE :** The host can be specified by **hostname, IPv4 literal, or IPv6 literal**
```
# for ex
              iperf3 -c iperf.biznetnetworks.com

              iperf3 -c 192.168.5.109

              iperf3 -c 2001:db8::1
```
4. Run `python3 manage.py run_checks` _(To run all checks manually)_.


![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `Demo`

https://user-images.githubusercontent.com/56113566/173353857-56b344f4-89d2-47d9-884a-32a472168f66.mp4

![-------------------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

## `TCP Charts`

![Screenshot from 2022-06-24 18-27-43](https://user-images.githubusercontent.com/56113566/175540716-145b7736-f8c1-4293-bfa1-9234a3ffb95a.png)

![Screenshot from 2022-06-24 11-51-01](https://user-images.githubusercontent.com/56113566/175475141-4f401c73-5198-490d-b6a1-a3932182051f.png)


## `UDP Charts`

![Screenshot from 2022-06-29 20-31-49](https://user-images.githubusercontent.com/56113566/176470082-4d94a537-9032-4f2a-b7e0-3f607ee67c5b.png)

![Screenshot from 2022-06-22 13-26-21](https://user-images.githubusercontent.com/56113566/174975685-6a101362-0132-4d88-a16f-486507f61280.png)

![Screenshot from 2022-06-22 13-26-25](https://user-images.githubusercontent.com/56113566/174975707-96a7b909-c709-4b6b-8982-33fa0e8a555d.png)

Closes #385
",True,394,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/394,https://github.com/openwisp/openwisp-monitoring/pull/394,closed,2633,43,20,64,20,163,1,1,[{'name': 'enhancement'}],2022-06-06 09:25:46+00:00,2022-08-09 12:39:49+00:00,5541243.0,"64 days, 3:14:03","[{'comment_id': 902362779, 'comment_body': ""It is a good thing that you have mentioned this and I guess this is only done for testing phase. But, this should go in project's settings.py (`tests/openwisp2/settings.py`). \r\nThis is application code that will be re-used by other people, we don't want to hard-code anything here. \r\n\r\nThis is a reminder to ourselves that we should move this to project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902395191, 'comment_body': ""I don't think we need to do conversion here. We should save raw values in `bits/second` in the database. We will do appropriate conversion when showing the data to the users. \r\nWe can leverage the work that would be done for https://github.com/openwisp/openwisp-monitoring/issues/87 \r\n\r\nI think it was already planned this way, @nemesisdesign can you please confirm? "", 'comment_created': datetime.datetime(2022, 6, 21, 9, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404374, 'comment_body': 'I would refactor this method like following \r\n\r\n```suggestion\r\n    def _get_device_connection(self, device):\r\n        """"""\r\n        Returns an active SSH DeviceConnection for a device.\r\n        """"""\r\n        openwrt_ssh = UPDATE_STRATEGIES[0][0]\r\n        device_connection = DeviceConnection.objects.filter(\r\n            device_id=device.id,\r\n            update_strategy=openwrt_ssh,\r\n            enabled=True,\r\n            is_working=True,\r\n        ).first()\r\n        return device_connection\r\n```\r\n\r\nAnd the update the logic that checks for `False` to check for `None`. ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902404695, 'comment_body': 'This would break if a device has multiple `DeviceConnection` (which it can have by design, this broke on my local environment).', 'comment_created': datetime.datetime(2022, 6, 21, 9, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902405061, 'comment_body': 'Why are we checking `device.monitoring.status`? ', 'comment_created': datetime.datetime(2022, 6, 21, 9, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902434921, 'comment_body': '@Aryamanz29 can you open an issue to make this command configurable? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902437683, 'comment_body': ""**Nitpick:** Let's always write the code to return early. E.g.\r\n\r\n```python\r\nif not device_connection:\r\n    logger.warn('')\r\n    return \r\n# rest of the logic\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 10, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902439981, 'comment_body': ""Let's only put the code that can raise exception in try-except block. I think only these lines can raise `ObjectDoesNotExist` exception here. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902442292, 'comment_body': 'What should trigger this alert? Is it going to be something like `if bandwidth falls below X Mbps, then send alert`. ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902444264, 'comment_body': '@Aryamanz29 can you share why this is needed? ', 'comment_created': datetime.datetime(2022, 6, 21, 10, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902446835, 'comment_body': ""If any test will fail when `OPENWISP_MONITORING_AUTO_IPERF` is set to `False`, mock that setting in the TestCase. We find that many tests fail in ansible-openwisp2 and docker-openwisp because they rely on the project environment. Since, we ship tests with the application, we should ensure that they do their job without relying on the project's settings. "", 'comment_created': datetime.datetime(2022, 6, 21, 10, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 902484236, 'comment_body': ""Yes, I'm thinking of same we can leverage `traffic charts` adaptive size (https://github.com/openwisp/openwisp-monitoring/issues/87) in `Iperf` charts as well."", 'comment_created': datetime.datetime(2022, 6, 21, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902487431, 'comment_body': 'Sure üëç opened : https://github.com/openwisp/openwisp-monitoring/issues/398', 'comment_created': datetime.datetime(2022, 6, 21, 11, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490038, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902490075, 'comment_body': ""Thanks for the suggestion, I've already changed this in my local env, Will push soon :)"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902497466, 'comment_body': 'We can do that as well, but according to **possible outcomes** of the project \'\'If an Iperf server is down/busy we should trigger an alert"" (We need to investigate more about this)', 'comment_created': datetime.datetime(2022, 6, 21, 11, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902499363, 'comment_body': 'It is related to : https://github.com/openwisp/openwisp-monitoring/pull/309#issuecomment-1132017719', 'comment_created': datetime.datetime(2022, 6, 21, 11, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902506988, 'comment_body': ""While running tests, I'm getting `TimeoutException` due to extra check, Now it's working fine, I'll remove that line :+1: \r\n```py\r\ndef test_restoring_deleted_device(self):\r\n...\r\n...       \r\n      except TimeoutException:\r\n            self.fail('Failed saving device')\r\n```"", 'comment_created': datetime.datetime(2022, 6, 21, 11, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902600321, 'comment_body': ""> Thanks for the suggestion, I've already changed this in my local env, Will push soon :)\r\n\r\nAcc to https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374, `_get_device_connection` method now only return either `device_connection` object or `None` so I think we can now safely remove `try-except` block from the code."", 'comment_created': datetime.datetime(2022, 6, 21, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902607625, 'comment_body': ""You're right, we should do with .`filter` as you've mention above https://github.com/openwisp/openwisp-monitoring/pull/394#discussion_r902404374"", 'comment_created': datetime.datetime(2022, 6, 21, 13, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902987581, 'comment_body': 'Update : I have moved server settings in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/fe920713890500538d8963c338bae610146166fd', 'comment_created': datetime.datetime(2022, 6, 21, 19, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 902996678, 'comment_body': 'I did this condition check to solve https://github.com/openwisp/openwisp-monitoring/issues/399, later found it is due to something else so removed in https://github.com/openwisp/openwisp-monitoring/pull/394/commits/b60c7b8408ec23f43a6769a7e71f11006f2c5f21', 'comment_created': datetime.datetime(2022, 6, 21, 19, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905764504, 'comment_body': 'I would log a more descriptive warning here. \r\n```suggestion\r\n            logger.warning(f\'Failed to get a working DeviceConnection for ""{device}"", iperf check skipped!\')\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 6, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905766348, 'comment_body': ""`AbstractDeviceConnection.connect` returns the working connection \r\nhttps://github.com/openwisp/openwisp-controller/blob/2504eaaaf972c9f9ff9d51a661735d6f1a9d0080/openwisp_controller/connection/base/models.py#L319-L331\r\n\r\nYou can refactor this as following: \r\n```suggestion\r\n        # The DeviceConnection could fail if the management tunnel is down.\r\n        if not device_connection.connect():\r\n            logger.warning(f'{device}: SSH connection is not working, Iperf skipped!')\r\n            return\r\n```\r\n\r\nI think openwisp-controller already takes cares of authentication errors. Can you double check this and confirm?"", 'comment_created': datetime.datetime(2022, 6, 24, 6, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905776864, 'comment_body': ""If we have a non-zero exit code, shouldn't we log an error here? E.g. what if the iperf client was not installed on the device. "", 'comment_created': datetime.datetime(2022, 6, 24, 7, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905785454, 'comment_body': 'Right now, you are writing `1`s and `0`s to the influxdb database depending whether the iperf check was successful or not. What if the TCP check passes but the UDP encountered an error? ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807556, 'comment_body': 'This implementation seems wrongs to me. You are ignoring the results from UDP tests. This is what I receive from the iperf command \r\n\r\n**TCP**\r\n```\r\n""sum_sent"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.000194,\r\n    ""seconds"":\t10.000194,\r\n    ""bytes"":\t63045632,\r\n    ""bits_per_second"":\t50435527.150773272,\r\n    ""retransmits"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n""sum_received"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.00187,\r\n    ""seconds"":\t10.00187,\r\n    ""bytes"":\t63044880,\r\n    ""bits_per_second"":\t50426474.249315374,\r\n    ""sender"":\ttrue\r\n},\r\n\r\n```\r\n\r\n**UDP**\r\n```\r\n""sum"":\t{\r\n    ""start"":\t0,\r\n    ""end"":\t10.002139,\r\n    ""seconds"":\t10.002139,\r\n    ""bytes"":\t49848848,\r\n    ""bits_per_second"":\t39878340.650697961,\r\n    ""jitter_ms"":\t0.092103039542695428,\r\n    ""lost_packets"":\t0,\r\n    ""packets"":\t34426,\r\n    ""lost_percent"":\t0,\r\n    ""sender"":\ttrue\r\n},\r\n```\r\n\r\nWas there a discussion that I am forgetting about ignoring ignoring bits/second for UDP test? Since, we are doing both tests, we should store value for both of them. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905807829, 'comment_body': '@nemesisdesign this requires your input. ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905813758, 'comment_body': ""Why do we need to take `MEAN` here? Shouldn't this be similar to the `traffic` query? \r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/8823581c01ff8f62a9dec9d80f2ba21eb4d3bc0e/openwisp_monitoring/db/backends/influxdb/queries.py#L39-L47"", 'comment_created': datetime.datetime(2022, 6, 24, 7, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905814495, 'comment_body': 'Okay! üëçüèº ', 'comment_created': datetime.datetime(2022, 6, 24, 7, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905820989, 'comment_body': 'packet and packet loss in themselves are not useful metrics. I think `lost_percent` would be more useful to the users. \r\n\r\nWhat do you think @nemesisdesign @okraits ? ', 'comment_created': datetime.datetime(2022, 6, 24, 8, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905827459, 'comment_body': 'We can try to log the error from the output: \r\n\r\n```\r\n{\r\n        ""start"":        {\r\n                ""connected"":    [],\r\n                ""version"":      ""iperf 3.10.1"",\r\n                ""system_info"":  ""Linux openwrt-router 5.4.188 #0 Sat Apr 16 12:59:34 2022 mips""\r\n        },\r\n        ""intervals"":    [],\r\n        ""end"":  {\r\n        },\r\n        ""error"":        ""error - unable to connect to server: Connection refused""\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 8, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 905974797, 'comment_body': 'I will check :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905975261, 'comment_body': 'Yes, it would be better to log an error here :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 11, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905976168, 'comment_body': ""I'm also thinking on this, I will do some research and try to implement different logic :+1: "", 'comment_created': datetime.datetime(2022, 6, 24, 11, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905978785, 'comment_body': 'Initially I have also this in my mind to store the result of UDP test that includes `(""bytes"", ""bits_per_second"")` but we already calculated this in TCP test. Do we need to store these fields in UDP test as well?\r\n', 'comment_created': datetime.datetime(2022, 6, 24, 11, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 905979770, 'comment_body': 'Same question.', 'comment_created': datetime.datetime(2022, 6, 24, 11, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906019240, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 6, 24, 12, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906058371, 'comment_body': 'Opened : https://github.com/openwisp/openwisp-monitoring/issues/405', 'comment_created': datetime.datetime(2022, 6, 24, 13, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 906862863, 'comment_body': ""> I'm also thinking on this, I will do some research and try to implement different logic +1\r\n\r\nCan we do something like if any (tcp, udp) of iperf get passed, we can store `iperf_result` field to 1 otherwise 0. For eg: \r\n\r\n```bash\r\n# If both test passed\r\n'values': {'iperf_result': 1, 'sent_bps': 1.49, 'received_bps': 1.49, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.01, 'packets': 898, 'lost_packets': 0, 'lost_percent': 0.0},\r\n# TCP passed UDP failed (previously all values was set to '0' including 'iperf_result'), Now :\r\n'values': {'iperf_result': 1, 'sent_bps': 1.5, 'received_bps': 1.5, 'sent_bytes': 1.87, 'received_bytes': 1.87, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n# Both fails\r\n'values': {'iperf_result': 0, 'sent_bps': 0.0, 'received_bps': 0.0, 'sent_bytes': 0.0, 'received_bytes': 0.0, 'retransmits': 0, 'jitter': 0.0, 'packets': 0, 'lost_packets': 0, 'lost_percent': 0.0}\r\n``` \r\n**Update :** Added this in [e178c10](https://github.com/openwisp/openwisp-monitoring/pull/394/commits/e178c1062aabced0ed3fbeca08d725ea9ce18bc3)"", 'comment_created': datetime.datetime(2022, 6, 26, 19, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 907723915, 'comment_body': 'TCP consumes more bandwidth for acks so the throughput can end up being smaller.\r\nIt could be useful to have both values.', 'comment_created': datetime.datetime(2022, 6, 27, 19, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 907737238, 'comment_body': ""let's keep lost_packets but calculate also the percentage of lost packets and show it that way to users, it should be better"", 'comment_created': datetime.datetime(2022, 6, 27, 19, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 911230925, 'comment_body': '```suggestion\r\nWhether `Iperf <#iperf-1>`_ checks are created automatically for devices. The devices must have ``SSH`` `access credential <link to access credentials in controller module>`_  & \r\n`iperf3 openwrt package <https://openwrt.org/packages/pkgdata/iperf3>`_ must be installed on the devices in order for this check to work.\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911233971, 'comment_body': ""@Aryamanz29 don't make these tables too wide. As you can observe here it is difficult to read. Please break the content into multiple lines. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911234828, 'comment_body': 'Especially here, I would break it into two more more lines, one for `int` and other for `float`. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911237693, 'comment_body': '**Nitpick**: Why to use a helper function here?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911238413, 'comment_body': ""Didn't we decide to not do this conversion here? Please correct me if I am wrong. "", 'comment_created': datetime.datetime(2022, 6, 30, 16, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911239618, 'comment_body': 'Why not in Gbps?', 'comment_created': datetime.datetime(2022, 6, 30, 16, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911241075, 'comment_body': 'Is this a reminder? We should flip  it back to False, and set this value in settings.py', 'comment_created': datetime.datetime(2022, 6, 30, 16, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911243851, 'comment_body': 'This device should automatically get an iperf check according to the settings. ', 'comment_created': datetime.datetime(2022, 6, 30, 16, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911245912, 'comment_body': 'I would refactor this test in following ways to make it more readable:\r\n\r\n1. change the subTest string to `Test device connection not working`\r\n2. set `dc.is_working` to `False` inside the subTest', 'comment_created': datetime.datetime(2022, 6, 30, 16, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911247389, 'comment_body': '```suggestion\r\n                f\'DeviceConnection for ""{device}"" is not working, iperf check skipped!\'\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 16, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 911259766, 'comment_body': 'https://github.com/openwisp/openwisp-monitoring/blob/issue-385/iperf-check/openwisp_monitoring/check/classes/iperf.py#L109-L112', 'comment_created': datetime.datetime(2022, 6, 30, 17, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911263287, 'comment_body': ""It always comes out very small value when I changed to `Gbps`. We'll remove these manual conversions once https://github.com/openwisp/openwisp-monitoring/pull/397 get merged :+1: "", 'comment_created': datetime.datetime(2022, 6, 30, 17, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911704200, 'comment_body': 'Yes it should be `false`.', 'comment_created': datetime.datetime(2022, 7, 1, 7, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907075, 'comment_body': 'I used this to make `deviceconnection.connect()` easier to mock inside `test_iperf.py`.', 'comment_created': datetime.datetime(2022, 7, 1, 12, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 911907644, 'comment_body': ""I'll update :+1: "", 'comment_created': datetime.datetime(2022, 7, 1, 12, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 915687006, 'comment_body': '@Aryamanz29, I asked you not to you such wide table in the last review. The ReST renderer expects to new lines to render a blank line. \r\n\r\nE.g.\r\n\r\n```rest\r\nline1 \r\nline2 \r\n```\r\n\r\nwill appear as \r\n\r\n```\r\nline1 line2\r\n```\r\n\r\nYou should also review the rendered output on GitHub. I generally check my work on https://livesphinx.herokuapp.com, you can try that too.  ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915689090, 'comment_body': 'I would break this into two lines. This is not a hard rule, but try to limit a line to 110 characters. ', 'comment_created': datetime.datetime(2022, 7, 7, 9, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915692482, 'comment_body': '```suggestion\r\nThis check is **disabled by default**. You can enable auto creation of this check by setting the\r\n`OPENWISP_MONITORING_AUTO_IPERF <#OPENWISP_MONITORING_AUTO_IPERF>`_ to ``True``.\r\n\r\nIt also supports tuning of various).\r\n\r\nYou can also change the parameters used for iperf checks (e.g. timing, buffers, protocols, etc.) using the\r\n`OPENWISP_MONITORING_IPERF_CHECK_CONFIG <#OPENWISP_MONITORING_IPERF_CHECK_CONFIG>`_ setting.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 9, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695216, 'comment_body': 'Always use relative  hyperlinks \r\n\r\n```suggestion\r\n Follow the steps in `""How to configure push updates"" section of  the openwisp-controller documentation <https://github.com/openwisp/openwisp-controller#how-to-configure-push-updates>`_ to allow SSH access to \r\n you device from OpenWISP.\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915695430, 'comment_body': ""Isn't it **OpenWRT SSH** ?\r\n\r\n```suggestion\r\n**Note:** Make sure device connection is enabled & working with right update strategy i.e. ``OpenWRT SSH``.\r\n```"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697414, 'comment_body': '```suggestion\r\nFor example:\r\n```', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915697901, 'comment_body': 'We should also point it out here to configure the celery beat. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915699905, 'comment_body': ""I don't think we need to point out here that the device needs a working SSH connection here. \r\n\r\nSomething like this would work fine \r\n\r\n```\r\nThis setting allows you to choose whether `iperf <#iperf-1>`_ checks should be\r\ncreated automatically for newly registered devices. It's disabled by default.\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 7, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915701397, 'comment_body': ""Let's remove reference to the configuration of Ping check. We will make users read the section even though we are explaining everything here. "", 'comment_created': datetime.datetime(2022, 7, 7, 10, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 915705234, 'comment_body': 'I would create a heading `Usage Instructions` and move this section under the sub-heading `How to configure iperf check`.  This is make it similar to REAMDE of openwisp-controller. \r\n\r\nWait for @nemesisdesign opinion before going ahead with this change. ', 'comment_created': datetime.datetime(2022, 7, 7, 10, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 916233073, 'comment_body': 'After adding `|` to my table, it looks like this : \r\n\r\n![Screenshot from 2022-07-08 01-23-35](https://user-images.githubusercontent.com/56113566/177860603-acd2bc75-cd62-4ad4-b338-a208073e2b76.png)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 7, 19, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916234611, 'comment_body': 'Got it :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 19, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244480, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916244614, 'comment_body': 'Yes :+1: ', 'comment_created': datetime.datetime(2022, 7, 7, 20, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 916265071, 'comment_body': ""I am not sure I understood correctly but if you look at the result generated at https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#iperf-1, it doesn't look good (this heading is bigger than the one above), so anything better than that will be ok for me, I am pretty sure we have to give it a last round of refinement anyway @pandafy."", 'comment_created': datetime.datetime(2022, 7, 7, 20, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 916890810, 'comment_body': 'Improved docs :+1: ', 'comment_created': datetime.datetime(2022, 7, 8, 14, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 917277808, 'comment_body': '`OPENWISP_MONITORING_CHECKS` should go here and be inferred from `CHECK_CLASSES` automatically, eg:\r\n\r\n```python\r\nCHECKS_LIST = list(dict(CHECK_CLASSES).keys())\r\n```', 'comment_created': datetime.datetime(2022, 7, 9, 15, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 918012397, 'comment_body': '- Added `CHECKS_LIST` in `checks/settings.py` and remained same celery beat config for **ping** and **config applied** check. \r\n- Added instructions in  `How to configure iperf check` to configure celery beat for **iperf** check.\r\n- Raise exception if check is `ImproperlyConfigured`\r\n![Screenshot from 2022-07-11 19-15-08](https://user-images.githubusercontent.com/56113566/178290155-fd900676-f6b4-4e58-a1f6-ea164861960e.png)', 'comment_created': datetime.datetime(2022, 7, 11, 14, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918272675, 'comment_body': ""Alternate option  : \r\n```py\r\nCHECKS_DICT = get_settings_value('CHECK_DICT', dict((check[::-1] for check in CHECK_CLASSES)))\r\n# {'Ping': 'openwisp_monitoring.check.classes.Ping', 'Configuration Applied': 'openwisp_monitoring.check.classes.ConfigApplied', 'Iperf': 'openwisp_monitoring.check.classes.Iperf'}\r\n```"", 'comment_created': datetime.datetime(2022, 7, 11, 19, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918273373, 'comment_body': 'Here, we can add :\r\n```py\r\nCHECKS_LIST = list(CHECKS_DICT.values())\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 19, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918275963, 'comment_body': 'Instead of hard coding check index here, We could use `CHECK_DICT` :\r\n```py\r\n    if checks is None:\r\n        # Executes only auto checks ie. ping and config applied\r\n        checks = [CHECKS_DICT[\'Ping\'], CHECKS_DICT[\'Configuration Applied\']]\r\n\r\n    # Checks that are defined in celery beat configuration\r\n    if not isinstance(checks, list):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be of type ""list""\')\r\n    if not all(check_path in CHECKS_LIST for check_path in checks):\r\n        raise ImproperlyConfigured(f\'Check path {checks} should be in {CHECKS_LIST}\')\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 11, 19, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 918865697, 'comment_body': 'Why is this removed? ', 'comment_created': datetime.datetime(2022, 7, 12, 11, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918868713, 'comment_body': ""```suggestion\r\n    CELERY_BEAT_SCHEDULE = {\r\n        # Other celery beat configurations\r\n\r\n        # Celery beat configuration for iperf check\r\n        'run_iperf_checks': {\r\n            'task': 'openwisp_monitoring.check.tasks.run_checks',\r\n            # https://docs.celeryq.dev/en/latest/userguide/periodic-tasks.html#crontab-schedules\r\n            # Executes check every 5 mins from 00:00 AM to 6:00 AM (night)\r\n            'schedule': crontab(minute='*/5', hour='0-6'),\r\n            # Iperf check path\r\n            'args': (['openwisp_monitoring.check.classes.Iperf'],),\r\n            'relative': True,\r\n        }\r\n    }\r\n```"", 'comment_created': datetime.datetime(2022, 7, 12, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918920897, 'comment_body': '**nitpick:** constants should come before any function definition. ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 918931330, 'comment_body': 'why not move these mocks as decorators like it is done for other tests? ', 'comment_created': datetime.datetime(2022, 7, 12, 12, 51, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919153018, 'comment_body': ""Why don't we set this to `None` here? Then, we won't need to pass `None` argument in the celery beat configuration. \r\n\r\nAfter deploying this to the demo system, I found that the iperf check was running every 5 minutes. It was because the existing celery beat configuration for `run_checks` command  didn't passed the `None` argument. \r\n\r\nhttps://github.com/openwisp/ansible-openwisp2/blob/7c51773114d3cb9e0ae6a0c312c3f95e403b84ef/templates/openwisp2/settings.py#L231-L234\r\n\r\nWe want to be least destructive to existing systems. Also, it is wiser to have a non-mutable default parameter. "", 'comment_created': datetime.datetime(2022, 7, 12, 16, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919181343, 'comment_body': 'I think this comment is outdated. ', 'comment_created': datetime.datetime(2022, 7, 12, 16, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919202793, 'comment_body': 'Initially I did this, but what if we run management command `run_checks`, In that case it will only execute **ping** and **config applied** check instead of executing all checks in the development.', 'comment_created': datetime.datetime(2022, 7, 12, 16, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919208793, 'comment_body': 'We can modify the management command to pass all three checks in the arguments. \r\n\r\nRunning all three checks is not a standard case here. Running `ping` and `config` checks is the standard case. \r\n\r\nIf you want to provide configurability to users, you can additionally allow passing the check dotted path as arguments to the run_checks command as follows: \r\n\r\n```\r\n./manage.py run_checks openwisp_monitoring.check.classes.Iperf,openwisp_monitoring.check.classes.ConfigApplied\r\n```\r\n\r\nBut, this is not our goal now. ', 'comment_created': datetime.datetime(2022, 7, 12, 17, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 919228751, 'comment_body': ""By mistake üòÖ I'll add :+1: "", 'comment_created': datetime.datetime(2022, 7, 12, 17, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 919261044, 'comment_body': 'I did this because if I use decorator style mocks for `test_iperf_check` (which consists of various subTests) then for every subTests I\'m getting additive `mock_method` call counts (It includes method calls from previous subTest) which I thought is not a good idea.\r\n**For eg:**\r\n```py\r\n    @patch.object(Iperf, \'_exec_command\')\r\n    @patch.object(Iperf, \'_get_iperf_servers\', return_value=[\'iperf.openwisptestserver.com\'])\r\n    @patch.object(iperf_logger, \'warning\')\r\n    def test_iperf_check(self, mock_warn, mock_get_iperf_servers, mock_exec_command):\r\n        check, _ = self._create_iperf_test_env()\r\n        error = ""ash: iperf3: not found""\r\n        tcp_result = loads(RESULT_TCP)[\'end\']\r\n        udp_result = loads(RESULT_UDP)[\'end\'][\'sum\']\r\n\r\n        with self.subTest(\'Test iperf3 is not installed on the device\'):\r\n                mock_exec_command.side_effect = [(error, 127)]\r\n                with patch.object(iperf_logger, \'warning\') as mock_warn:\r\n                    check.perform_check(store=False)\r\n                    mock_warn.assert_called_with(\r\n                        f\'Iperf3 is not installed on the ""{self.device}"", error - {error}\'\r\n                    )\r\n                self.assertEqual(mock_warn.call_count, 1)\r\n                self.assertEqual(mock_exec_command.call_count, 1)\r\n                mock_get_iperf_servers.assert_called_once_with(\r\n                    self.device.organization.id\r\n                )\r\n        with self.subTest(\'Test iperf check passes in both TCP & UDP\'):\r\n                mock_exec_command.side_effect = [(RESULT_TCP, 0), (RESULT_UDP, 0)]\r\n                ...\r\n                ...\r\n\r\n                self.assertEqual(mock_warn.call_count, 0)\r\n                # AssertionError: 1 != 0 (Includes call count from previous subTest, Actual call 1)\r\n                self.assertEqual(mock_exec_command.call_count, 2)\r\n                # AssertionError: 3 != 2 (Same here, But exec_command actually called 2 times)\r\n    \r\n``` ', 'comment_created': datetime.datetime(2022, 7, 12, 18, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 920330832, 'comment_body': 'This test does not have any user, hence no notification is created. \r\n\r\nCreate an admin user with \r\n```\r\nself._create_admin()\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 17, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 921554871, 'comment_body': '`Todo `: Change this link after PR merge', 'comment_created': datetime.datetime(2022, 7, 14, 20, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 922313899, 'comment_body': ""Let's move all these images into the 1.1 directory please:\r\nhttps://github.com/openwisp/openwisp-monitoring/tree/docs/docs/1.1\r\nThis is needed so that if in version 1.2 we change the look of the UI, we can upload new screenshot for the 1.2 version without affecting the docs for the 1.1 version."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922314175, 'comment_body': ""let's try to break long lines please"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922320756, 'comment_body': ""I believe it's better to be explicit here and specify the ping and config_applied checks"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922324487, 'comment_body': ""I believe that if `checks` is `None` we should execute all the checks and not skip a particular check like we are doing here,  This is not consitent.\r\n\r\nMoreover, the check list can be changed by users, so the order may not be in the one we expect here, this is not robust.\r\n\r\nSo please let's remove this."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922325814, 'comment_body': ""I know that this is the output of iperf, but it's nice to have it more readable.\r\nCan you please re-format these JSON strings so they're more readable and have 4 spaces indentation?"", 'comment_created': datetime.datetime(2022, 7, 15, 16, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 922349492, 'comment_body': ""we cannot do this because if the connection fails because the device is temporarily offline, then when it comes back up this flag will still be false, because SSH connections right now are tried by the system only on configuration changes, so the following can happen:\r\n\r\n- a device goes offline\r\n- iperf check runs, tries SSH connection, but fails, `is_working` is set to False by the system\r\n- the device comes back online, but no config change is done, so is_working stays False because the system hasn't tried to connect to it yet\r\n- iperf check runs again, but since `is_working` is still False, the check is not executed\r\n\r\nSo let's remove this filter."", 'comment_created': datetime.datetime(2022, 7, 15, 16, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 923036134, 'comment_body': 'üëç', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923036228, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 7, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923037224, 'comment_body': ""You're right, I'll remove `is_working` from filter :+1: "", 'comment_created': datetime.datetime(2022, 7, 18, 7, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 923076855, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2022, 7, 18, 8, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 924836785, 'comment_body': 'In this PR, we should also allow configuring the `bitrate` option. The default value for bitrate in UDP mode is small which leads to insignificant results from iperf. \r\n\r\nWe can leave other options for later in https://github.com/openwisp/openwisp-monitoring/issues/416', 'comment_created': datetime.datetime(2022, 7, 19, 18, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 924837883, 'comment_body': 'I think we should set bitrate on UDP to default to 10 MB and recommend users to tweak this according to their needs.\r\nOn TCP bitrate can default to 0 (unlimited).', 'comment_created': datetime.datetime(2022, 7, 19, 18, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925359967, 'comment_body': 'I would add a comment here explaining that since all three `username`, `password` and `rsa_public_key` is required for authentication to work, we only check for `username` here. ', 'comment_created': datetime.datetime(2022, 7, 20, 9, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925360323, 'comment_body': ""```suggestion\r\n    'rsa_public_key': {\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925361396, 'comment_body': ""```suggestion\r\n        # Exit code 127 : command doesn't exist\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 9, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925371059, 'comment_body': 'We use `app_settings` to distinguish between app and project settings (django.conf.settings). \r\n```suggestion\r\nfrom .. import settings as app_settings\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 9, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925419463, 'comment_body': ""I would declare the common mocks with decorators to reduce code duplicity. \r\n```suggestion\r\n    @patch.object(Iperf, '_get_iperf_servers', return_value=['iperf.openwisptestserver.com'])\r\n    @patch.object(Iperf, '_exec_command', side_effect=[(RESULT_TCP, 0), (RESULT_UDP, 0)])\r\n    @patch.object(iperf_logger, 'warning')\r\n    def test_iperf_check_auth_config(self, mock_warn, mock_exec_command, mock_get_iperf_servers):\r\n```"", 'comment_created': datetime.datetime(2022, 7, 20, 10, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925425064, 'comment_body': 'After removing common mocks, I would update this to \r\n\r\n\r\n```suggestion\r\n            with patch.object(\r\n                settings, \'IPERF_CHECK_CONFIG\', iperf_config\r\n            # It is required to mock ""Iperf.schema"" here so that it \r\n            # uses the updated configuration from ""IPERF_CHECK_CONFIG"" setting.\r\n            ), patch.object(Iperf, \'schema\', get_iperf_schema()):\r\n```\r\n\r\nI have added a comment there because it was not entirely clear from the code why the `Iperf.schema` is mocked. Only after tinkering of code, I realised the reason. The comment will prevent us from making unnecessary efforts in the future. ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925426154, 'comment_body': 'After completion of each sub-test, reset the mocks with the following code: \r\n\r\n```suggestion \r\n        mock_exec_command.reset_mock()\r\n        mock_warn.reset_mock()\r\n        mock_get_iperf_servers.reset_mock()\r\n```', 'comment_created': datetime.datetime(2022, 7, 20, 10, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427096, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925427263, 'comment_body': 'Please update the mocks here as well as mentioned for other sub-test.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925428810, 'comment_body': 'This entire block has been repeated 3 times in the file. Can we move these assertions to an internal method of the test class and call it wherever required? ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 925607910, 'comment_body': 'Thanks !', 'comment_created': datetime.datetime(2022, 7, 20, 13, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 927586330, 'comment_body': 'the indentation is not right here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927586538, 'comment_body': ""aren't we missing the instructions to run the iperf check?"", 'comment_created': datetime.datetime(2022, 7, 22, 12, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927587808, 'comment_body': '```suggestion\r\nIperf authentication\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927588695, 'comment_body': '```suggestion\r\nBy default iperf check runs without any kind of **authentication**,\r\nin this section we will explain how to configure **RSA authentication** \r\nbetween the **client** and the **server** to restrict connections\r\nto authenticated clients.\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 12, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927589925, 'comment_body': '```suggestion\r\nAfter running the commands mentioned above, the public key will be stored in ``public.pem`` \r\n```\r\n\r\nKeep it short, apply a similar change also to ``private_not_protected.pem``, I would also rename that as `private_key.pem`, while I would rename `public.pem` to `public_key.pem`.', 'comment_created': datetime.datetime(2022, 7, 22, 12, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927591635, 'comment_body': 'indentation is wrong here', 'comment_created': datetime.datetime(2022, 7, 22, 12, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927592482, 'comment_body': 'what is `default`?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 927595377, 'comment_body': 'We already have a setting to configure iperf, why are you adding a new one?\r\n\r\nCan we compress everything in one setting?\r\n\r\nEg:\r\n\r\n```python\r\nOPENWISP_MONITORING_IPERF = {\r\n    \'a9734710-db30-46b0-a2fc-01f01046fe4f\': [\r\n        {\r\n            \'host\': [\'iperf1.openwisp.io\', \'iperf2.openwisp.io\'],\r\n            \'username\': \'iperfuser\',\r\n            \'password\': \'iperfpassword\',\r\n            \'rsa_public_key\': (\r\n""""""\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwuEm+iYrfSWJOupy6X3N \r\ndxZvUCxvmoL3uoGAs0O0Y32unUQrwcTIxudy38JSuCccD+k2Rf8S4WuZSiTxaoea \r\n6Du99YQGVZeY67uJ21SWFqWU+w6ONUj3TrNNWoICN7BXGLE2BbSBz9YaXefE3aqw \r\nGhEjQz364Itwm425vHn2MntSp0weWb4hUCjQUyyooRXPrFUGBOuY+VvAvMyAG4Uk \r\nmsapnWnBSxXt7Tbb++A5XbOMdM2mwNYDEtkD5ksC/x3EVBrI9FvENsH9+u/8J9Mf \r\n2oPl4MnlCMY86MQypkeUn7eVWfDnseNky7TyC0/IgCXve/iaydCCFdkjyo1MTAA4 \r\nBQIDAQAB\r\n"""""")\r\n            \'client_options\': {\r\n                \'port\': \'6209\',\r\n                \'udp\': {\r\n                    \'bitrate\': \'20M\'\r\n                },\r\n                \'tcp\': {\r\n                    \'bitrate\': \'0\'\r\n                }\r\n            }\r\n        }\r\n    ],\r\n}\r\n``` \r\n\r\nDoes it make sense?', 'comment_created': datetime.datetime(2022, 7, 22, 12, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 932113139, 'comment_body': 'Done üëç', 'comment_created': datetime.datetime(2022, 7, 28, 11, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932117536, 'comment_body': 'Sure :)', 'comment_created': datetime.datetime(2022, 7, 28, 11, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932122726, 'comment_body': 'I made it to look consistent with [`OPENWISP_MONITORING_PING_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring#openwisp_monitoring_ping_check_config), Now I have changed `iperf config setting` according to https://github.com/openwisp/openwisp-monitoring/issues/418', 'comment_created': datetime.datetime(2022, 7, 28, 11, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932125477, 'comment_body': 'Yes, it would be better to have a single setting for `iperf check` :+1: ', 'comment_created': datetime.datetime(2022, 7, 28, 11, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 932202486, 'comment_body': 'I think it is mention in [`iperf-check#how-to-configure-iperf-check`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#3-configure-iperf-settings)', 'comment_created': datetime.datetime(2022, 7, 28, 13, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933005488, 'comment_body': 'This looks incorrect to me', 'comment_created': datetime.datetime(2022, 7, 29, 8, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933008280, 'comment_body': 'Do we need this @nemesisdesign ? ', 'comment_created': datetime.datetime(2022, 7, 29, 8, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933010148, 'comment_body': 'I think we should link this page instead https://openwisp.io/docs/user/configure-push-updates.html', 'comment_created': datetime.datetime(2022, 7, 29, 8, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933033617, 'comment_body': 'nitpick, can you please remove this blank line? ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933035363, 'comment_body': 'Can you please add a docstring here explaining this method ?', 'comment_created': datetime.datetime(2022, 7, 29, 9, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933046950, 'comment_body': 'The order should be same as `trace_order` otherwise, it will show incorrect labels. ', 'comment_created': datetime.datetime(2022, 7, 29, 9, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933108012, 'comment_body': 'Did you try using `connectgaps: true` instead of doing this as suggested in example shared by Federico? I was able to achieve similar results with that option locally. Can you double check that please? ', 'comment_created': datetime.datetime(2022, 7, 29, 10, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933142183, 'comment_body': 'I and @nemesisdesign had meet in which he suggested me to add this about `iperf charts` in the `README`. ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933144201, 'comment_body': 'ploty `connectgaps` property only works for scatter charts. More info : https://plotly.com/python-api-reference/generated/plotly.graph_objects.Scatter.html', 'comment_created': datetime.datetime(2022, 7, 29, 11, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933145799, 'comment_body': 'okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 7, 29, 11, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 933147324, 'comment_body': 'thanks! I will update :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933147488, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 7, 29, 11, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933198121, 'comment_body': 'Sure üëç', 'comment_created': datetime.datetime(2022, 7, 29, 12, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 933199473, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2022, 7, 29, 12, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 935156010, 'comment_body': 'Okay, thank you! \r\n', 'comment_created': datetime.datetime(2022, 8, 2, 6, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 937864645, 'comment_body': ""respect the spacing (I wish the linter warned about this!):\r\n\r\n```\r\nif (unit.includes('+')) {\r\n`"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937864912, 'comment_body': 'same here and below', 'comment_created': datetime.datetime(2022, 8, 4, 14, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937867677, 'comment_body': ""let's do those changes to the charts that we discussed (have bandwidth and transfer as simple lines with no fill and have 2 lines in each chart, one for TCP and one for UDP), then update the README here and screenshots."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937870690, 'comment_body': ""I don't understand, isn't this something that depends on a specific server? Why do we have a global setting?"", 'comment_created': datetime.datetime(2022, 8, 4, 14, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937874363, 'comment_body': ""definitely we cannot link files which are published in branches we are going to delete, please double check the rest of the document for similar problems, we can point to master here, even thought it won't work until published, but that's ok."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875205, 'comment_body': 'this change is unnecessary, please revert it', 'comment_created': datetime.datetime(2022, 8, 4, 14, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937875935, 'comment_body': 'shall we default this to 30 MB? I think 10 is quite low.', 'comment_created': datetime.datetime(2022, 8, 4, 14, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937878521, 'comment_body': 'please break lines and maintain line length consistent with the rest of the document', 'comment_created': datetime.datetime(2022, 8, 4, 14, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937880972, 'comment_body': 'make sure spacing around parenthesis is consistent with the rest of the JS code', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881165, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937881327, 'comment_body': 'double check all blocks please', 'comment_created': datetime.datetime(2022, 8, 4, 14, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937889998, 'comment_body': ""isn't the final return statment suppposed to be updated here??\r\n\r\n```\r\nreturn self._time_crossed(time) and value_crossed\r\n```\r\n\r\nIs not taking in consideration the related field.\r\n\r\nWhat if value_crossed is False but the related value is crossed?\r\n\r\nWhat about `if self.tolerance == 0:`???\r\n\r\nSo now I have some more basic quesitons:\r\n\r\n1. Why was this kind of change, which is very delicate, introduced in this huge PR? Do we have to introduce this change or can we make the iperf check work without it for now? \r\n\r\n2. Looking at this code, I am pretty scared to merge it! I do not want to do this.\r\n@Aryamanz29 can you extract these commits into a separate branch please? I want to merge the rest of the work but not this right now, I think it needs more careful thought."", 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 937890192, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 4, 14, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938006217, 'comment_body': ""Linter didn't warn ü§î I'll check all my code manually :+1: \r\n\r\n![Screenshot from 2022-08-04 21-54-41](https://user-images.githubusercontent.com/56113566/182901953-77fbb3ee-110b-4660-ba2b-c2d5fdb60f2b.png)\r\n"", 'comment_created': datetime.datetime(2022, 8, 4, 16, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938205036, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 4, 20, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938249501, 'comment_body': 'Yes it should be defined in [`OPENWISP_IPERF_CHECK_CONFIG`](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config)', 'comment_created': datetime.datetime(2022, 8, 4, 21, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938256975, 'comment_body': ""1. Yes, we can make `iperf check` work without this feature (check will run without any `alertsettings`)\r\n2. I'll remove `alert_on_related_field` feature from this PR as of now & will open a separate PR :+1:"", 'comment_created': datetime.datetime(2022, 8, 4, 21, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938700817, 'comment_body': ""why there's both `rsa_public_key` and `rsa_public_key_path`? Are users supposed to use either one or the other?\r\nHow does it work? Was this meant to be the private key?"", 'comment_created': datetime.datetime(2022, 8, 5, 10, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938721204, 'comment_body': ""This is the location where the `client (ie. openwrt device)` stores it's `rsa_public_key` for `iperf check`. By default, it is `/tmp/iperf-rsa-public.pem` and this path is required for iperf3 auth, but we can also change this using [OPENWISP_IPERF_CHECK_CONFIG](https://github.com/openwisp/openwisp-monitoring/tree/issue-385/iperf-check#openwisp_monitoring_iperf_check_config). More info : https://github.com/openwisp/openwisp-monitoring/issues/414#issuecomment-1189408176"", 'comment_created': datetime.datetime(2022, 8, 5, 11, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938723543, 'comment_body': 'Iperf command basically doing  `f\'echo ""{rsa_public_key}"" > {rsa_public_key_path}` and after completion of check removing key from the device `rm {rsa_public_key_path}`', 'comment_created': datetime.datetime(2022, 8, 5, 11, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 938733455, 'comment_body': ""`/tmp/iperf-public-key.pem` does not need to be configurable at this level, there's no usefulness in this, just set `/tmp/iperf-public-key.pem` to a variable and use the variable throughout the rest of the implementation."", 'comment_created': datetime.datetime(2022, 8, 5, 11, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 938777476, 'comment_body': 'Ok :+1: ', 'comment_created': datetime.datetime(2022, 8, 5, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}]","[{'commit_sha': '506f044bfacdbf2e57448e4dd6f796b16fe764d0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd112b85b34fb0ff7ada391849cdc8be9d36743', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c47467ef97bc91783babd7f8ffcaa9a06fd23f45', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488990b941bab99f046237bddf061d6a665d95de', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f890ba95c3291bff34875dad9213c00dfd345b65', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ec0dc06db4b7d14dce066b4210ca83f32fd8f0', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a79a5dff088d7e1d2aef7d339c9aef0b201911', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f63fcaa77527c3a24efe88be179339a412b4dc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a346efc3fafe216a30b5a0c957f594d822c704d', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9383f3a340945d316f3f4d20e7f3fdce7cbe1b97', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7dfd5fd259da12054d149fa60edee448b68eba', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d98a66d46039c27f3048af2366aec579e681cc4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3050edf18d15c9679e0fe4047883d28ad502ac87', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efdc70a65c784586df0ef7e5e162f8c84b4c914c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f65c6adcfd92abcf5c17706796d98dd3549a74e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7396e79b0c9f8b7ae0c211bdeb025aba5737325f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b881e0616d770710cf5500dd460e5db7fd7e48b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d732bb3310db85781acc5c198541386f1373ba6', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c488abc5a9ba560c03b0a649b0502600624911a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89563034ee0244f5849b1e9ae1f922079968ad2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c75428e79debde7016665a23b9e88383c848d2f9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a9eef80a7f2d0619ef806e8f6880c9d569762a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59089944b285b38ec16847926ea16bb035c1c5c4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec80f2f7db65f89252a328f617cd565e0b46c07c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50921cbff514ff58034a6e5954890e9e5b69eca2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56543bf191c7df6d649eeff734fe4e98d8b9a0af', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef433eaa6b4f59e9ea9ceea05c7d742a2d8301bc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38991a9914a3abab5f00be688624b59706734d59', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b607da46f3041735fcbce771c9733847af4444', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce23bd0c38068dfcad9b993da39a83c7f5566197', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f9220243c4a3481bef065e5a0b48fec9da00db', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '840029189f6fa20ae0d371cabaa915ba25288b75', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b31104284172bb059d7d4f11956f7f1a8417e1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d472aa1eaa9b312c391847094dc3c05b270101', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2abe5d1f14d28391950375886484d04d76d67bd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391537e80877680fd06f7894aee7fa742c94a4e4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9810d2470b788385018e57fd93a34c8536a761fb', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd219e9f667377d616e7935613b4f0c6039dc675a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '808288118df92cff2bc444e9235af5d84746ff46', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d6061e4d6bee24e7e6d9c92a86f18e2f596bd1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df31203af6be0dc0876d38b683d67037163eda89', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02100af795a1c46c876aadfacf284eb1b43e1c2f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27732e6652cbca6ccc41e455161a2891f9bb1948', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9b82670d654d62ea86147a65904701e5a2bdf9', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1bc269b0950f0f34fbaaacd5b7704ee3fa2c2e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ddce9d5df2bf136cbff09037aab5bc3fa67ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa74e9960a59bb83d7daf1a9a7568b78af77451f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d71d7c6009d30b285069fdb06ad8dfc543e2b91', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50256d20778eec1cc747ced27d54aa686a1e4f6b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01cd70e1de0202efcbc4fac054249258605e2e41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7b6cb1d96f90d3c14b5a3202e11be68816b0860', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46d86f05471de61a7b6e7d67ddc9f2d1e4b17ecc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a4f9877a0e8ad6d2d55d4c77f2acd818080d1e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4196b0a077c6fc0a1422eca2ef741032d17f41', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ce4a024351a43a3842e8030f2a385e7705a802', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '719932e8593b19c285e96323bfcc527abd6538cd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '631d2bf6db793e35f1129885b813e33c924bdebf', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3524a68f74762991cf4f9280605eef84bea68692', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe40f82ea7a3af6df4e0babc6198b5cb33f7501', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12d9b5f72c94dc418355099dedb73b2d5d35413', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e23d914c1ba9746c9e820eb1a5e255eb26fa73', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13b6416f9013e2e4759a28ed33e43d8c905b5134', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b1dd84e9be003e17fcfc694a37c04c2994243fc', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9213aafa268485be75a32c36fc9bd349d831a755', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330
1039676118,[feature] Added support for multiple iperf3 servers,"### `Iperf check` on multiple server

https://user-images.githubusercontent.com/56113566/187673896-1e358f5e-98bc-4afb-b3c4-21ef2750fb39.mp4

![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)

#### If the server is already occupied by the `device`, then put other `iperf_checks` back in the queue

![Screenshot from 2022-09-02 17-50-46](https://user-images.githubusercontent.com/56113566/188141962-54f99094-d594-4653-8e47-34b40159f55f.png)

### Iperf check `cache keys`

![Screenshot from 2022-09-05 14-09-03](https://user-images.githubusercontent.com/56113566/188406682-cd64ea45-876f-4a2d-9f8d-0399673861c8.png)

#### Cache keys before running checks

![Screenshot from 2022-09-05 14-02-42](https://user-images.githubusercontent.com/56113566/188406328-a167d229-9a01-4a94-9718-a8b888c9d12c.png)

#### Cache keys in between running checks

![Screenshot from 2022-09-05 14-03-06](https://user-images.githubusercontent.com/56113566/188406358-63274898-dead-491e-ab15-37e9ff17cd95.png)

#### Cache keys after completion of checks

![Screenshot from 2022-09-05 14-03-24](https://user-images.githubusercontent.com/56113566/188406379-d6bb9bd4-08db-4557-a190-058c5ae03146.png)

 
Closes #391

![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)
Checks:

- [x] I have manually tested the proposed changes
- [x] I have written new test cases to avoid regressions (if necessary)
- [x] I have updated the documentation (e.g. README.rst)

Closes #439 ",True,434,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/434,https://github.com/openwisp/openwisp-monitoring/pull/434,closed,349,181,6,16,2,20,1,1,[{'name': 'enhancement'}],2022-08-29 13:15:33+00:00,2022-10-07 12:15:27+00:00,3365994.0,"38 days, 22:59:54","[{'comment_id': 965886287, 'comment_body': ""What does the `nx` parameter do? I don't see it in the [Django documentation](https://docs.djangoproject.com/en/4.1/topics/cache/#django.core.caches.cache.set). "", 'comment_created': datetime.datetime(2022, 9, 8, 12, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965918027, 'comment_body': ""Can we move this logic to the `Iperf` check class? The check instance has information about the `Check` object. \r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/4ef6fba9b54a2f041dc5efb4b2a738c66564980e/openwisp_monitoring/check/classes/base.py#L10-L14\r\n\r\nTherefore, we can also call this from the check class\r\n\r\n```python\r\nperform_check.apply_async(args=[self.check_instance.id], countdown=2 * iperf_check_time)\r\n```\r\n\r\nThe only thing I don't like about this implementation is that we will be binding the `Iperf` check class with a celery task. But we can get around it pretty easily. See below: \r\n\r\nWe add the following method in the `Check` class\r\n```python\r\nclass AbstractCheck(TimeStampedEditableModel):\r\n    # other logic\r\n    def perform_check_delayed(self, duration=0):\r\n        from ..tasks import perform_check\r\n        perform_check.apply_async(args=[[self]], countdown=duration)\r\n```\r\n\r\nThen from the `Iperf` check class, we will be able to perform this operation: \r\n\r\n```python\r\nself.check_instance.perform_check_delayed(countdown=2 * iperf_check_time)\r\n```\r\n\r\nWe do add some coupling in the second implementation as well, but it is between tasks and models of the same django app. Hence, it is less likely that it will come to bite us in the future. "", 'comment_created': datetime.datetime(2022, 9, 8, 12, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965918621, 'comment_body': '@nemesisdesign what do you think about this? ', 'comment_created': datetime.datetime(2022, 9, 8, 12, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965927254, 'comment_body': ""What does the `nx` argument do? I don't find it in the [Django's documentation](https://docs.djangoproject.com/en/4.1/topics/cache/#django.core.caches.cache.set)."", 'comment_created': datetime.datetime(2022, 9, 8, 12, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965929521, 'comment_body': '**Careful Aryaman!** You are breaking the abstraction of Django cache framework. The `nx` parameter is only supported by the Redis backend. I wonder why the code is not raising any errors because the signature of the `cache.set` function is different.  ', 'comment_created': datetime.datetime(2022, 9, 8, 12, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965932474, 'comment_body': 'You can use [`cache.add`](https://docs.djangoproject.com/en/4.1/topics/cache/#django.core.caches.cache.add) to avoid making multiple requests to the cache backend. ', 'comment_created': datetime.datetime(2022, 9, 8, 12, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965938619, 'comment_body': 'This is a good place to use [`for-else`](https://docs.djangoproject.com/en/4.1/topics/cache/#django.core.caches.cache.add).\r\n\r\n```suggestion\r\n    # Try to acquire a lock, or put task back on queue\r\n    for server in available_iperf_servers:\r\n        server_lock_key = f\'ow_monitoring_{org}_iperf_check_{server}\'\r\n        # Set available_iperf_server to the org device\r\n        lock_acquired = cache.add(\r\n            server_lock_key,\r\n            str(check.content_object),\r\n            timeout=IPERF_CHECK_LOCK_EXPIRE,\r\n        )\r\n        if lock_acquired:\r\n            break\r\n    else:\r\n        logger.warning(\r\n            (\r\n                f\'At the moment, all available iperf servers of organization ""{org}"" \'\r\n                f\'are busy running checks, putting ""{check}"" back in the queue..\'\r\n            )\r\n        )\r\n        # Return the iperf_check task to the queue,\r\n        # it will executed after 2*iperf_check_time (TCP+UDP)\r\n        perform_check.apply_async(args=[uuid], countdown=2 * iperf_check_time)\r\n        return\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 12, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965942039, 'comment_body': ""We won't require this change after implementing the suggestions left above. "", 'comment_created': datetime.datetime(2022, 9, 8, 13, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 965948198, 'comment_body': 'Always do resetting of test outside of the `subTest`. In the current code, if this subTest fails for some reason, then the mocks would not be reset which would make the following sub-tests to fail as well. \r\n\r\n```suggestion\r\n            mock_set.reset_mock()\r\n            mock_warn.reset_mock()\r\n            mock_task_logger.reset_mock()\r\n            mock_exec_command.reset_mock()\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 13, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 966312173, 'comment_body': 'yeah at least we have all the logic in one place which is good for maintainability :+1: ', 'comment_created': datetime.datetime(2022, 9, 8, 18, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 967229473, 'comment_body': 'thanks!', 'comment_created': datetime.datetime(2022, 9, 9, 15, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 967231229, 'comment_body': 'My bad, I forgot to remove the `redis` parameters üòÖ', 'comment_created': datetime.datetime(2022, 9, 9, 15, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 967232290, 'comment_body': ""ok, I'll move this to `Iperf` check class, thanks!"", 'comment_created': datetime.datetime(2022, 9, 9, 15, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 967232642, 'comment_body': 'yes :+1: ', 'comment_created': datetime.datetime(2022, 9, 9, 15, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 967232947, 'comment_body': ""I'll update it :+1: "", 'comment_created': datetime.datetime(2022, 9, 9, 15, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 970767004, 'comment_body': '```suggestion\r\nthe iperf checks to run concurrently on different devices. If all of the available servers are busy, then it will add the check back in the queue.\r\n```', 'comment_created': datetime.datetime(2022, 9, 14, 12, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 971082999, 'comment_body': ""I'll update it, thanks!"", 'comment_created': datetime.datetime(2022, 9, 14, 17, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 985897081, 'comment_body': ""organisation > organization, the spelling with the s is valid too but let's stay consistent."", 'comment_created': datetime.datetime(2022, 10, 3, 14, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 985898799, 'comment_body': ""let's use `info` instead of warning, since this may happen often on busy systems and I do not see a reason to treat this log line differently than info."", 'comment_created': datetime.datetime(2022, 10, 3, 14, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 986662316, 'comment_body': ""I'll update that :+1:"", 'comment_created': datetime.datetime(2022, 10, 4, 9, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}]","[{'commit_sha': '4edc1921904e068a717dff426a7078afd0b7954c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca8153bfc13a1c6cae9a489c5e257999fb35331b', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff189b63c56d8f8b888f4b98303baa6f1f1de21c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a599dc9330d9e25ab74be2a448bf3010ff9b983e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d5c2c7ecf857cb3264dc922b26a7e7cd2c46ce2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1093bb16c81e07ab6668c3ca0ecb228ea36e9a8', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59a9ab9d2305fd30214a20043659cbee742941f6', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ff1add44d26864c6600a19090ce96ad2aed3c2', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd57f970863af00bd67127e5a40990ed4b016fd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29114d411cc5c517fc49fbc3979880ab535157bb', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef0035a3f438453430e99cac131ab28a93d9a56f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c15290a482410346f3d58369c6be615ea99b0d3', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e467114cde80b58ebae0c353f189a88a4813ebf', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a280b6d488eccf87a22594e7a0c9754c7adce1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6bd4b871c78917b05eb23e23338f7edc9184735', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '500e0debc5254ad070218e35e9b3f1b6298d788c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330
1024904892,[change] Added checks & alertsettings permission for device tab #424,"
![Screenshot from 2022-08-12 16-49-25](https://user-images.githubusercontent.com/56113566/184355611-4eb761b3-706f-4184-9ec1-311c9d8ae828.png)

![Screenshot from 2022-08-12 16-48-48](https://user-images.githubusercontent.com/56113566/184355635-b37ab796-0e6c-4a58-9168-9ff147d074be.png)

![Screenshot from 2022-08-12 16-49-10](https://user-images.githubusercontent.com/56113566/184355631-0cf53a1a-13e7-4754-b787-3fbc64807165.png)

Closes #424

Closes #426

Checks:

- [x] I have manually tested the proposed changes
- [x] I have written new test cases to avoid regressions (if necessary)
- [x] I have updated the documentation (e.g. README.rst)
",True,431,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/431,https://github.com/openwisp/openwisp-monitoring/pull/431,closed,449,30,15,16,8,51,1,1,[{'name': 'enhancement'}],2022-08-12 12:39:59+00:00,2022-09-07 16:45:06+00:00,2261107.0,"26 days, 4:05:07","[{'comment_id': 944620461, 'comment_body': ""what is this doing? I don't understand."", 'comment_created': datetime.datetime(2022, 8, 12, 16, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 945264111, 'comment_body': ""`CheckInline` (with current fields ['check_type', 'is_active'])\r\n\r\n![Screenshot from 2022-08-14 15-36-00](https://user-images.githubusercontent.com/56113566/184532079-14067716-aaf4-4cf8-8eb9-2a58b415de90.png)\r\n\r\n`CheckInline` (with all fields [])\r\n\r\nI think this will be more useful for the users because here they have more options to configure e.g. `checks params, name` etc & also it's similar to general check page, Although we can remove `description` field if required.\r\n \r\n![Screenshot from 2022-08-14 15-39-41](https://user-images.githubusercontent.com/56113566/184532191-e4f9511e-7d02-4900-9bd4-3bd5b23c28fd.png)\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 14, 10, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 945267123, 'comment_body': ""why do you set it this way instead of just setting it at class level? I can't make sense of it."", 'comment_created': datetime.datetime(2022, 8, 14, 10, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 945273514, 'comment_body': 'I did this way because we only want to show these fields when the user has `check_inline` permissions if we set those at the class level, then those form fields are also visible for `check model` permissions that have already accessed to `check admin page`.', 'comment_created': datetime.datetime(2022, 8, 14, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 949242611, 'comment_body': 'why this renaming here?', 'comment_created': datetime.datetime(2022, 8, 18, 14, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 949242748, 'comment_body': 'why is this being moved?', 'comment_created': datetime.datetime(2022, 8, 18, 14, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 949242958, 'comment_body': 'This is wrong Aryaman. The application code should not know anything about `SAMPLE_APP`. We use sample app to test the extensibility of OpenWISP modules. Please update your test to check for correct label. ', 'comment_created': datetime.datetime(2022, 8, 18, 14, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 949244199, 'comment_body': 'I think it would be simpler and clearer to add new data migration code instead of editing the existing data migrations.\r\nMoving around logic which deals with data migrations is error prone and not worth the effort at the moment.', 'comment_created': datetime.datetime(2022, 8, 18, 14, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 949245055, 'comment_body': ""You should be able to get the `model_name` like this: \r\n\r\n```suggestion\r\n        if request.user.has_perm(f'{self.model._meta.model_name}.add_check_inline'):\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 8, 18, 14, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 949817098, 'comment_body': 'Because I have moved `add_group_permissions` migration to `monitoring app`.', 'comment_created': datetime.datetime(2022, 8, 19, 5, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 949818156, 'comment_body': '`assign_permissions_to_groups()` is placed both in `device/migrations/__init__.py` and `monitoring/migrations/__init__.py`\r\nand one of them never get used in our code.', 'comment_created': datetime.datetime(2022, 8, 19, 5, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 949819062, 'comment_body': ""Ok, I'll create a separate data migration in `monitoring` app named `add_inline_permissions.py` :+1: "", 'comment_created': datetime.datetime(2022, 8, 19, 5, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 949819622, 'comment_body': ""Yea, I feel the same this is not a correct way to do that, I'll update it :+1: "", 'comment_created': datetime.datetime(2022, 8, 19, 5, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 949820236, 'comment_body': ""I think it should be `if request.user.has_perm(f'{self.model._meta.app_label}.add_check_inline'):`"", 'comment_created': datetime.datetime(2022, 8, 19, 5, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950234544, 'comment_body': 'Why did you only extend the `has_view_permission` method but override other method?', 'comment_created': datetime.datetime(2022, 8, 19, 14, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950242672, 'comment_body': 'I am not sure if this is a wrong way to achieve this functionality, but it does not feel right. Django provides hooks for returning `fields` and `readonly_fields`. Using them makes the code more readable. \r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 19, 14, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950250062, 'comment_body': ""The current code won't allow a user that has permission to edit the `Check` model to edit the inline form. @nemesisdesign is this a desired quality? "", 'comment_created': datetime.datetime(2022, 8, 19, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950251171, 'comment_body': ""I would re-write this code in this way: \r\n\r\n```python\r\n    fields = [\r\n        'name',\r\n        'is_active',\r\n        'description',\r\n        'check_type',\r\n        'params',\r\n    ]\r\n\r\n    def get_fields(self, request, obj=None):\r\n        if not self.has_change_permission(request, obj) or not self.has_view_permission(\r\n            request, obj\r\n        ):\r\n            return ['check_type', 'is_active']\r\n        return super().get_fields(request, obj)\r\n\r\n    def get_readonly_fields(self, request, obj=None):\r\n        if not self.has_change_permission(request, obj) or not self.has_view_permission(\r\n            request, obj\r\n        ):\r\n            return ['check_type']\r\n        return super().get_readonly_fields(request, obj)\r\n\r\n    def has_add_permission(self, request, obj=None):\r\n       # User will be able to add check from inline even if it only has permission \r\n       # to add a check object. \r\n        return super().has_add_permission(request, obj) or request.user.has_perm(\r\n            f'{self.model._meta.app_label}.add_check_inline'\r\n        )\r\n\r\n    def has_change_permission(self, request, obj=None):\r\n        return super().has_change_permission(request, obj) or request.user.has_perm(\r\n            f'{self.model._meta.app_label}.change_check_inline'\r\n        )\r\n\r\n    def has_view_permission(self, request, obj=None):\r\n        return super().has_view_permission(request, obj) or request.user.has_perm(\r\n            f'{self.model._meta.app_label}.view_check_inline'\r\n        )\r\n\r\n    def has_delete_permission(self, request, obj=None):\r\n        return super().has_delete_permission(request, obj) or request.user.has_perm(\r\n            f'{self.model._meta.app_label}.delete_check_inline'\r\n        )\r\n```\r\n\r\nI did rudimentary testing and it works. @Aryamanz29 please test it more and improve it \r\n"", 'comment_created': datetime.datetime(2022, 8, 19, 14, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950253648, 'comment_body': 'Why do we need an extra here? ', 'comment_created': datetime.datetime(2022, 8, 19, 14, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950256853, 'comment_body': 'Similar improvements here to use `get_fields` and `get_readonly_fields` here', 'comment_created': datetime.datetime(2022, 8, 19, 14, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950270976, 'comment_body': 'We should also add `view` permission to the administrator for completeness. ', 'comment_created': datetime.datetime(2022, 8, 19, 14, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 950688809, 'comment_body': 'I change this way to make sure `Inlines` works similar to our current version of code, i.e. When we have model permissions other than `view`, then they should **add/change/delete** only through  `CheckAdmin` & `MetricAdmin` but not from device `Inlines`.\r\n\r\n**Ref** : https://github.com/openwisp/openwisp-monitoring/blob/52cf287a31026874fe73948badbbe174adfd250d/openwisp_monitoring/device/admin.py#L66-L70\r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/52cf287a31026874fe73948badbbe174adfd250d/openwisp_monitoring/device/admin.py#L95-L99\r\n\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/52cf287a31026874fe73948badbbe174adfd250d/openwisp_monitoring/device/admin.py#L112-L116', 'comment_created': datetime.datetime(2022, 8, 20, 12, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950688925, 'comment_body': 'I have updated this :+1: ', 'comment_created': datetime.datetime(2022, 8, 20, 12, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950689068, 'comment_body': 'thanks! Yes, it was working as expected :+1: ', 'comment_created': datetime.datetime(2022, 8, 20, 12, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950689165, 'comment_body': ""I'll update that :+1:  thanks :)"", 'comment_created': datetime.datetime(2022, 8, 20, 12, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950689689, 'comment_body': 'I changed `extra = 1` to get the complete form, but now it looks weird when the user has `view` permission (it shows empty input fields as well) so I reverted this change :+1: \r\n\r\n#### `With extra = 0`\r\n\r\n![Screenshot from 2022-08-20 18-00-50](https://user-images.githubusercontent.com/56113566/185746306-9f828190-34c3-4481-ab99-ce64f638e03d.png)\r\n\r\n#### `With extra = 1`\r\n\r\n![Screenshot from 2022-08-20 18-00-33](https://user-images.githubusercontent.com/56113566/185746331-99561891-c588-48a7-9005-589c45eb3575.png)\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 20, 12, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 950689878, 'comment_body': 'Sure :+1: ', 'comment_created': datetime.datetime(2022, 8, 20, 12, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 951279154, 'comment_body': 'so it sounds like this was not intentional, right @Aryamanz29?', 'comment_created': datetime.datetime(2022, 8, 22, 10, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 951329530, 'comment_body': '@nemesisdesign https://github.com/openwisp/openwisp-monitoring/pull/431#discussion_r950688809', 'comment_created': datetime.datetime(2022, 8, 22, 11, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 951642650, 'comment_body': ""These methods to check for the additional permissions are always the same, except the suffix of the permission, therefore we could create a base class / mixin which has this logic and requires only a class attribute to be set which specifies the suffix, eg: `inline_permission_suffix = 'alertsettings_inline'`.\r\n\r\nThis allows us to follow the DRY principle closely and reduce maintenance whenever we need to change or upgrade this logic."", 'comment_created': datetime.datetime(2022, 8, 22, 16, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 952264482, 'comment_body': '@nemesisdesign should we move the data migration for the `Check` model to the `check` sub-app or is it okay here? ', 'comment_created': datetime.datetime(2022, 8, 23, 7, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 952778520, 'comment_body': '```suggestion\r\n**Note:** To access the above page, the user must have some special permissions, which are included by default in the groups ""Administrator"" and ""Operator"" and are shown in the screenshot below.\r\n```\r\n', 'comment_created': datetime.datetime(2022, 8, 23, 15, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 956184860, 'comment_body': 'this one makes more sense to have it in the checks app', 'comment_created': datetime.datetime(2022, 8, 26, 15, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 961893077, 'comment_body': 'Shall we mention also how to create the alert setting and indicate how to get alerted if the bandwidth is less than, for example, 30 Mmbit/s?', 'comment_created': datetime.datetime(2022, 9, 2, 17, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 961893938, 'comment_body': 'is it possible to obtain the same by moving this logic to the model instead of here?\r\nThe problem with this code is that if we implement similar logic in the REST API or in other views, we will have to repeat it.', 'comment_created': datetime.datetime(2022, 9, 2, 17, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 961894109, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 9, 2, 17, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 962137520, 'comment_body': ""No problem, I'll move it to their respective models üëç"", 'comment_created': datetime.datetime(2022, 9, 3, 10, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 962137549, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 9, 3, 10, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 962141491, 'comment_body': ""Yea, for this we have to change `MetricInline` visible fields to include `field_name` as well (we may add it in advance mode),  For example:\r\n```py\r\n    fieldsets = [\r\n        (None, {'fields': ('is_healthy', 'configuration')}),\r\n        (\r\n            _('Advanced options'),\r\n            {'classes': ('collapse',), 'fields': ('field_name',)},\r\n        ),\r\n    ]\r\n```\r\n\r\n![Screenshot from 2022-09-03 16-42-56](https://user-images.githubusercontent.com/56113566/188267848-791b3b9d-3feb-4acc-9e5c-23b45f175f5a.png)\r\n\r\n@nemesisdesign I think we should add this in https://github.com/openwisp/openwisp-monitoring/pull/427 as you've already suggested in https://github.com/openwisp/openwisp-monitoring/pull/427#discussion_r951633955, what do you think?"", 'comment_created': datetime.datetime(2022, 9, 3, 11, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 962990975, 'comment_body': 'Yes, this would work, as long as the field name defaults to the one configured and as long as we do validation of this value before saving to ensure it exists.', 'comment_created': datetime.datetime(2022, 9, 5, 15, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 963611086, 'comment_body': ""I would re-write this as following \r\n\r\n```suggestion\r\n            self.assertEqual(test_user.user_permissions.count(), 0)\r\n```\r\n\r\nYou are not using the content of the returned list, hence there's no point in requesting that data from the database. Please update other occurrences as well. "", 'comment_created': datetime.datetime(2022, 9, 6, 11, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 963612301, 'comment_body': 'This logic is shared between all subtests. I would make an internal method for this test and re-use it. ', 'comment_created': datetime.datetime(2022, 9, 6, 11, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 963616851, 'comment_body': ""Maybe, we can create an internal function that adds permission for user \r\n\r\n```python\r\ndef _add_user_permissions(self, user, permission_query, expected_perm_count):\r\n    user.user_permissions.add(*Permission.objects.filter(**permission_query))\r\n    self.assertEqual(user.user_permissions.count(), expected_perm_count)\r\n```\r\n\r\nWe will call this function like this \r\n\r\n```python\r\n_add_user_permissions(test_user, {'codename_endswith': 'check'}, 8)\r\n```"", 'comment_created': datetime.datetime(2022, 9, 6, 12, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 963618673, 'comment_body': 'Instead of repeating this check again and again, I would create a separate test for this case (when user does not have permission to access these models or inline)', 'comment_created': datetime.datetime(2022, 9, 6, 12, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 963619577, 'comment_body': 'I would avoid nesting sub-tests like this. ', 'comment_created': datetime.datetime(2022, 9, 6, 12, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 963978974, 'comment_body': ""I'll update it, thanks!"", 'comment_created': datetime.datetime(2022, 9, 6, 17, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 963982912, 'comment_body': 'Yes, we can :+1: ', 'comment_created': datetime.datetime(2022, 9, 6, 17, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 963988986, 'comment_body': ""I'll update it, thanks :+1: "", 'comment_created': datetime.datetime(2022, 9, 6, 17, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 963989060, 'comment_body': ""I'll update that :+1: "", 'comment_created': datetime.datetime(2022, 9, 6, 17, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 964035838, 'comment_body': ""> Yes, this would work, as long as the field name defaults to the one configured and as long as we do validation of this value before saving to ensure it exists.\r\n\r\n@nemesisdesign I think we should add this in https://github.com/openwisp/openwisp-monitoring/pull/427 as you've already suggested in https://github.com/openwisp/openwisp-monitoring/pull/427#discussion_r951633955, what do you think?"", 'comment_created': datetime.datetime(2022, 9, 6, 18, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Aryamanz29', 'type': 'User'}, {'comment_id': 964459844, 'comment_body': 'Yes, right, ok!', 'comment_created': datetime.datetime(2022, 9, 7, 7, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'ed44eb8c0d950268b34f905f53b19f442985035a', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '613f4f14d8c7a432a9fcb2be4e0f4b6b7e2a7b35', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf4d943157aa1f5c2aa25ce3147d70931bab2342', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03bdcb4eb144265ec027c3cc87fc5cc1fdba049c', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b76c417ff0af635c4e784ea82bd6dd8397d808d1', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e224e092179fe150c84501050785f43faacb18e', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2a3dab3394d4f9d778560b5c2294ca3339d728', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe46345ce64be9d48251cfd55d5808c2888ecbc', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0b783115dc1132782a91bd9a1183eaa39510450', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6806e7dec6e7e7c7c4a753f37738fcef727bdefd', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9477082d7fcf169253ca7b4975d298fe15b1feec', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fa8d1ff419e9087d0233862f6927c97e56f869f', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98c89c97886cfc9a31ede66c2a9fabe011d42534', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5efa495b0a489fe5286a82af108d8fff8c42acb4', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6f01868c3aeabfced570c1676324a7bd574ba04', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe54a9339b181e1ffff4d0dabc2960a6ab11969', 'committer_username': 'Aryamanz29', 'committer_name': 'Aryaman', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 3, 9, 46, 24, tzinfo=datetime.timezone.utc)}]",Aryaman,56113566,,User,,92,,40,330

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
248636968,openwisp-monitoring,openwisp/openwisp-monitoring,Python,107,160,12,21,573,42,19,9,"[{'id': 1363544690, 'number': 517, 'closed': datetime.datetime(2023, 5, 25, 14, 1, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 24, 17, 37, 42, tzinfo=datetime.timezone.utc), 'time_taken': 73425.0, 'time_delta': '20:23:45', 'additions': 6, 'deletions': 30, 'state': 'closed'}, {'id': 1343586442, 'number': 515, 'closed': datetime.datetime(2023, 5, 15, 20, 15, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 9, 10, 47, 27, tzinfo=datetime.timezone.utc), 'time_taken': 552478.0, 'time_delta': '6 days, 9:27:58', 'additions': 29, 'deletions': 29, 'state': 'closed'}, {'id': 1325635538, 'number': 511, 'closed': datetime.datetime(2023, 4, 29, 16, 49, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 24, 14, 53, 38, tzinfo=datetime.timezone.utc), 'time_taken': 438945.0, 'time_delta': '5 days, 1:55:45', 'additions': 59, 'deletions': 2, 'state': 'closed'}, {'id': 1321655697, 'number': 509, 'closed': datetime.datetime(2023, 5, 15, 20, 34, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 20, 14, 53, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2180419.0, 'time_delta': '25 days, 5:40:19', 'additions': 169, 'deletions': 74, 'state': 'closed'}, {'id': 1308863272, 'number': 507, 'closed': datetime.datetime(2023, 4, 12, 20, 52, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 11, 11, 45, 2, tzinfo=datetime.timezone.utc), 'time_taken': 119225.0, 'time_delta': '1 day, 9:07:05', 'additions': 88, 'deletions': 1, 'state': 'closed'}, {'id': 1301575183, 'number': 506, 'closed': datetime.datetime(2023, 4, 21, 15, 13, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 4, 12, 18, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1479302.0, 'time_delta': '17 days, 2:55:02', 'additions': 237, 'deletions': 23, 'state': 'closed'}, {'id': 1280075731, 'number': 505, 'closed': datetime.datetime(2023, 3, 19, 22, 27, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 17, 11, 34, 37, tzinfo=datetime.timezone.utc), 'time_taken': 211987.0, 'time_delta': '2 days, 10:53:07', 'additions': 27, 'deletions': 15, 'state': 'closed'}, {'id': 1215170017, 'number': 497, 'closed': datetime.datetime(2023, 1, 24, 14, 43, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 24, 14, 7, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2153.0, 'time_delta': '0:35:53', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 1198784139, 'number': 489, 'closed': datetime.datetime(2023, 1, 17, 21, 27, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 16, 10, 25, 53, tzinfo=datetime.timezone.utc), 'time_taken': 126103.0, 'time_delta': '1 day, 11:01:43', 'additions': 19, 'deletions': 8, 'state': 'closed'}, {'id': 1197094720, 'number': 488, 'closed': datetime.datetime(2023, 1, 20, 20, 22, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 13, 18, 12, 13, tzinfo=datetime.timezone.utc), 'time_taken': 612645.0, 'time_delta': '7 days, 2:10:45', 'additions': 97, 'deletions': 0, 'state': 'closed'}, {'id': 1180247003, 'number': 480, 'closed': datetime.datetime(2023, 3, 22, 16, 0, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 29, 13, 18, 30, tzinfo=datetime.timezone.utc), 'time_taken': 7180917.0, 'time_delta': '83 days, 2:41:57', 'additions': 322, 'deletions': 39, 'state': 'closed'}, {'id': 1179301360, 'number': 479, 'closed': datetime.datetime(2023, 1, 11, 22, 48, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 28, 10, 45, 45, tzinfo=datetime.timezone.utc), 'time_taken': 1252990.0, 'time_delta': '14 days, 12:03:10', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 1179243781, 'number': 478, 'closed': datetime.datetime(2022, 12, 30, 15, 34, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 28, 9, 28, 52, tzinfo=datetime.timezone.utc), 'time_taken': 194750.0, 'time_delta': '2 days, 6:05:50', 'additions': 46, 'deletions': 41, 'state': 'closed'}, {'id': 1171956631, 'number': 471, 'closed': datetime.datetime(2022, 12, 20, 21, 11, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 20, 10, 12, 2, tzinfo=datetime.timezone.utc), 'time_taken': 39575.0, 'time_delta': '10:59:35', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 1152183162, 'number': 469, 'closed': datetime.datetime(2022, 12, 13, 2, 11, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 7, 18, 37, 9, tzinfo=datetime.timezone.utc), 'time_taken': 459243.0, 'time_delta': '5 days, 7:34:03', 'additions': 42, 'deletions': 42, 'state': 'closed'}, {'id': 1129109252, 'number': 463, 'closed': datetime.datetime(2022, 11, 20, 15, 3, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 20, 10, 56, 38, tzinfo=datetime.timezone.utc), 'time_taken': 14804.0, 'time_delta': '4:06:44', 'additions': 0, 'deletions': 2, 'state': 'closed'}, {'id': 1106528369, 'number': 457, 'closed': datetime.datetime(2022, 12, 10, 15, 56, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 1, 10, 14, 43, tzinfo=datetime.timezone.utc), 'time_taken': 3390124.0, 'time_delta': '39 days, 5:42:04', 'additions': 68, 'deletions': 5, 'state': 'closed'}, {'id': 1101777171, 'number': 454, 'closed': datetime.datetime(2022, 12, 13, 2, 10, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 27, 14, 23, 3, tzinfo=datetime.timezone.utc), 'time_taken': 4016852.0, 'time_delta': '46 days, 11:47:32', 'additions': 59, 'deletions': 32, 'state': 'closed'}, {'id': 1096170801, 'number': 452, 'closed': datetime.datetime(2022, 10, 25, 13, 48, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 22, 13, 48, 9, tzinfo=datetime.timezone.utc), 'time_taken': 259211.0, 'time_delta': '3 days, 0:00:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1095167601, 'number': 450, 'closed': datetime.datetime(2023, 1, 20, 16, 7, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 21, 10, 59, 5, tzinfo=datetime.timezone.utc), 'time_taken': 7880927.0, 'time_delta': '91 days, 5:08:47', 'additions': 173, 'deletions': 16, 'state': 'closed'}, {'id': 1094993697, 'number': 449, 'closed': datetime.datetime(2022, 10, 21, 14, 51, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 21, 8, 24, 58, tzinfo=datetime.timezone.utc), 'time_taken': 23205.0, 'time_delta': '6:26:45', 'additions': 13, 'deletions': 13, 'state': 'closed'}, {'id': 1080944129, 'number': 444, 'closed': datetime.datetime(2022, 10, 20, 12, 47, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 8, 7, 4, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1057355.0, 'time_delta': '12 days, 5:42:35', 'additions': 359, 'deletions': 353, 'state': 'closed'}, {'id': 1074565766, 'number': 441, 'closed': datetime.datetime(2022, 10, 25, 13, 16, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 3, 11, 56, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1905589.0, 'time_delta': '22 days, 1:19:49', 'additions': 826, 'deletions': 66, 'state': 'closed'}, {'id': 1048948384, 'number': 436, 'closed': datetime.datetime(2022, 10, 6, 11, 59, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 7, 15, 49, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2491773.0, 'time_delta': '28 days, 20:09:33', 'additions': 227, 'deletions': 28, 'state': 'closed'}, {'id': 1039676118, 'number': 434, 'closed': datetime.datetime(2022, 10, 7, 12, 15, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 13, 15, 33, tzinfo=datetime.timezone.utc), 'time_taken': 3365994.0, 'time_delta': '38 days, 22:59:54', 'additions': 349, 'deletions': 181, 'state': 'closed'}, {'id': 1024904892, 'number': 431, 'closed': datetime.datetime(2022, 9, 7, 16, 45, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 12, 39, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2261107.0, 'time_delta': '26 days, 4:05:07', 'additions': 449, 'deletions': 30, 'state': 'closed'}, {'id': 1021533508, 'number': 428, 'closed': datetime.datetime(2022, 10, 6, 12, 58, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 13, 37, 24, tzinfo=datetime.timezone.utc), 'time_taken': 5008846.0, 'time_delta': '57 days, 23:20:46', 'additions': 503, 'deletions': 75, 'state': 'closed'}, {'id': 1021500737, 'number': 427, 'closed': datetime.datetime(2022, 9, 16, 13, 46, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 13, 9, 17, tzinfo=datetime.timezone.utc), 'time_taken': 3285457.0, 'time_delta': '38 days, 0:37:37', 'additions': 346, 'deletions': 18, 'state': 'closed'}, {'id': 958876982, 'number': 394, 'closed': datetime.datetime(2022, 8, 9, 12, 39, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 9, 25, 46, tzinfo=datetime.timezone.utc), 'time_taken': 5541243.0, 'time_delta': '64 days, 3:14:03', 'additions': 2633, 'deletions': 43, 'state': 'closed'}, {'id': 949221150, 'number': 382, 'closed': datetime.datetime(2023, 5, 29, 23, 7, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 11, 37, 6, tzinfo=datetime.timezone.utc), 'time_taken': 31750236.0, 'time_delta': '367 days, 11:30:36', 'additions': 452, 'deletions': 5, 'state': 'closed'}, {'id': 945259482, 'number': 380, 'closed': datetime.datetime(2022, 6, 6, 23, 29, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 24, 7, 25, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1181062.0, 'time_delta': '13 days, 16:04:22', 'additions': 1, 'deletions': 1348, 'state': 'closed'}, {'id': 928078191, 'number': 371, 'closed': datetime.datetime(2022, 5, 5, 20, 22, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 4, 20, 39, 46, tzinfo=datetime.timezone.utc), 'time_taken': 85348.0, 'time_delta': '23:42:28', 'additions': 13, 'deletions': 0, 'state': 'closed'}, {'id': 833700271, 'number': 342, 'closed': datetime.datetime(2022, 2, 17, 21, 32, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 27, 17, 4, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1830480.0, 'time_delta': '21 days, 4:28:00', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 808178863, 'number': 331, 'closed': datetime.datetime(2022, 2, 1, 16, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 22, 8, 20, 7, tzinfo=datetime.timezone.utc), 'time_taken': 3570893.0, 'time_delta': '41 days, 7:54:53', 'additions': 2, 'deletions': 0, 'state': 'closed'}]"
