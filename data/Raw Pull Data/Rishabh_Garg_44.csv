pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
687547693,Add Decision Tree Regressor.,"This PR is created to fix the commit history of #2905. All the relevant commits are cherry-picked from that PR. Only the last few commits are left which will be added too once the error is resolved in them.

@rcurtin @gmanlan hopefully it will be a little bit easier for you to review it now :)",True,3011,https://api.github.com/repos/mlpack/mlpack/pulls/3011,https://github.com/mlpack/mlpack/pull/3011,closed,5049,84,22,87,2,0,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2021-07-12 06:23:51+00:00,2021-07-19 05:00:20+00:00,599789.0,"6 days, 22:36:29",[],"[{'commit_sha': '80a094e5453ada62170f3c5683c29e23b2923948', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d3a7d7799db1ed040e668f91c17be73aabaab7d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c265ccffe2b56b4a39330144fcc0cbd6926d8be', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8634ca0836f65cc3040c538874e7e81110337a1', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24cd615fc6c6b584b70ca7462130768655a47f7f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e47962f18c165e67397765ba66ea6db3f71382bd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be9ff3437e684d1f7857a5ba3db498785aa9c0b5', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7d4c25c329aeca9bfda1e4ed5c383e16c4915c6', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '415ac24c50d1fc0c842e6448c402661d4c698004', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2690c2c489cc031a5a476dd98e77562ac053027f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13311bb25c09fde4d4a109e96c8fce474ec3a40b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a030a556d50bb045e9e3735d844148475f21dcb6', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a3f378d27ff692a78f9ec5a9a66e03b6f1ad23', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd0715b5f06da2085d76e58ff834e26bb9149fb', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2c9cd0c2d177e0150b7830b8514972efcb6ef0d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37559821bf21993c3bfbeadbb6f7decd655dee6f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3579871afb47311fa7f36b1f12f8801864cd215', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e6d60f2b33aa11dae7ef533aa9ee08a85882b1d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff85e20b96425a57a40131d27cedc146ee932c85', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f541fe20b0c173cc6f11e7583866b904ddac32f2', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d20ce9099847e89f084478894df981ce0805f5a', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '722df85864a507cf10db717fab4153dbe657223f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e336ad118220ceaf72ee08680e7746534b9333c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536c5f9880c30b32f2f89443a5ed9f956855113b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab4f3c3646262a3a10360b3cea86979032a69558', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4e3d1fcc3ae88cc23b3c7201c1c86305d8e4c18', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6f0d2945743652b30f8119add9f1980e0306f66', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0449ace9228ce944ce8d3908dddd86d86e9aaefe', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcc96c056ce9d07a3bddfd50999e58c360f7dc25', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be81c14a52b50bc8fcf34417fb21fa8a81e9f8ef', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3fc8d9fe6c5cdec2fa92f0ec6445242e2de6f55', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f000d5894034dff308abb33fb8c21f24920e6cc', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2c85f0250b260738dc0571702ecd3ec38f57983', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64fde38ae8510fdeaf39a10a3103434454c9cde2', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa78c26d7ab1f3dd6d8ba719592b56a17572f269', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6145adab8a28f5c6c10a3a0fd28beb11c617f4d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c72f126801ab5ac892bfc979fafad672d7f944', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e4b891c82e6bc850c537eec1c1de6f2803371ef', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271e90130ecdf9f6f07d56c7b4f34f6e7bb45cd4', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c174f68d0fdc8112c9cdfa68217a550a86a5ff8d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57572aa876091968ce481e976e772f9830dee6a1', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdb90df2d36886cbb467b50aa9ebe8c267e7f8d6', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e34bc02c6cfbb44981ab70bb1d0150bdf823c99', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c2b5ca51d7e1f64492f787717a7a9655dab65f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d8687a928bbd481bcd297b1382f49de5bc1cbdc', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7d2f22bdc43e7ddbed58e84bc541f84e757b272', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0487772eac79380e68103607c6231becd3d37fe', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26477c778c0d64dcede8c4a85c2e0ac887348366', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc37b23a843fde10e5e36b24050dd6781debca1', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac0b08ead8a065082ecd81bf38db0474c1c4b7d7', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1f5a836d99a050b8ad444cb069223aabbdd6611', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34b5ac7badcb6481b8a0b4f85ece42067fc95ec2', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917885b609adc486d0207d9486310ad16d14454b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0717855241c43f2e0a405d2897265061f3e8b463', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ff17398a50e88362a795420d8797b147ead9c1f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ae3872fddab67c63554c54373022ee3f888a25', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db1fcdc26b6363cd7608b57b36c387fe1ab86918', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '442cb4284dc8454dd3a1193d48013aacf8df6c82', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffb68e0f7ce9c44e49430bc1e530a6da79c453df', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60c2239210343ecd7f0c7ddb8dc4b370e2bbff43', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d1c188883c3561efb37055131e83286873743fc', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9539af8caef3691765b1897ba56896b7406de73b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '561c14062d3f8a164d8b66f944e0f64143d23ddc', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0bb74468487456da12c882045bd0f82892c7569', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fccba9fb52fdb9fa84ee554d41583a2da360d146', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0f78cc65a454015c27d9bec9b2427f03f69b8d3', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a171bcfef18ce00cf02f4a0b272f283554dcd46', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3051459e46092ed67319026593cd5e1ff1098bde', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c6f86de071a599590b7c210b2d949d3309780b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aa4dc403c4a66b772970691d910b6241a7c67f4', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25657755b694d6ca2a04c1c85911f64b0ce0a40', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16f5fc1a22827d5ce321bae9cc7283738a26e778', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '451fa167ea35f70e7b32486bb16e5d3318a533e8', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8174764fe1552817d5b696fdf29cf76a858e7162', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd204474e8d50aeb820af1ec722726d9f0128a991', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9f43d4957aa5050aa4ab0217d57b98aeea5348d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af3e985d784d469e6f3eb75d258a9b2107415367', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed21bb6a89bbeda6ca2bf715827505c1bee780af', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0ecbf5f85ca75a25b1ea828beab6ec329611bb6', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6c8e1b3eb79da0b03af8b6afbbdb4afad6710f2', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '167667785056fe1d2b6a8d79b8ad6717f6c9a09c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edb9879f2a185eff4f8b4d1ba3945b746137a5cf', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c84846f052a3fe1779c1a630ad8cca93fafeee', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4bd653cfe096f2617481f20c71d717087591ac', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5892cc7ec66b349be7de5b9ccc78179fe7dd10', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e609efc0a945a23ff64a2e5edbe1b7bf190743', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a7290a47d0cf1829e583df831a9c22f751fd9e1', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}]",Rishabh Garg,56191449,,User,,14,,80,60
609151601,Add regression tree,"This PR attempts to add regression tree support to mlpack. Relevant discussion #2619.
This is going to be a long PR so hopefully, I will divide it into multiple parts.

The following checklist will broadly keep track of the PR.

- [x] MAD gain.
- [x] MSE gain
- [x] All categorical splitter
- [x] Best numeric Splitter
- [x] Random numeric Splitter
- [x] Add DecisionTreeRegressor class",False,2905,https://api.github.com/repos/mlpack/mlpack/pulls/2905,https://github.com/mlpack/mlpack/pull/2905,closed,5195,109,30,118,20,165,3,0,"[{'name': 's: needs review'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2021-04-05 19:32:00+00:00,2021-07-15 00:41:15+00:00,8658555.0,"100 days, 5:09:15","[{'comment_id': 616185626, 'comment_body': ""I had used an `arma::vec` here before in case we have more general splitting strategies.  For instance, consider a N-ary numeric split... we'll need an `arma::vec` of length `N - 1` to store each of the split points."", 'comment_created': datetime.datetime(2021, 4, 19, 21, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616186232, 'comment_body': 'Alternately, we could use `LabelsType` or `ResponsesType` as a typedef for the labels here, instead of requiring an `arma::Row<>`.', 'comment_created': datetime.datetime(2021, 4, 19, 21, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616186645, 'comment_body': ""I'd really prefer to avoid adding this parameter, if possible."", 'comment_created': datetime.datetime(2021, 4, 19, 21, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616189676, 'comment_body': 'The core of the loop for `SplitIfBetter` is the same, but the different part is here, in how we compute the gain of the left and right child.  I might suggest instead splitting out the gain computation part, so that we have only one `SplitIfBetter`, but then when we compute the child gains, that is where we split out to different code.\r\n\r\nWe might consider, e.g., modifying the `FitnessFunction::Evaluate()` definition to something a bit more like this:\r\n\r\n```\r\ntemplate<typename LabelsType, typename WeightsType, typename UseWeights>\r\nFitnessFunction::EvaluateSplit(\r\n    const LabelsType& labels,\r\n    const WeightsType& weights,\r\n    const size_t splitIndex,\r\n    double& totalGain,\r\n    double& leftGain,\r\n    double& rightGain);\r\n```\r\n\r\nLet me know if that makes sense, and what you think of the idea.  I think it would be best if we managed to keep `BestBinaryNumericSplit` entirely independent of whether the task is regression or classification---we just push that detail down into the `FitnessFunction`.', 'comment_created': datetime.datetime(2021, 4, 19, 21, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616190313, 'comment_body': 'Thanks, I guess that comment had gone out of date.', 'comment_created': datetime.datetime(2021, 4, 19, 21, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616190682, 'comment_body': 'Is there any particular reason to not use a `subvec()`?  (I suppose it may be better to create an alias with the advanced `vec` constructor, so that there is no data copying.)', 'comment_created': datetime.datetime(2021, 4, 19, 21, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 616311411, 'comment_body': ""I was getting this weird template error when I was passing a `subvec()`.\r\n`candidate template ignored: could not match 'Row' against 'subview_row'`. \r\nI had a long discussion with jonpsy about this on April 9 on IRC. But we couldn't figure it out. \r\n\r\n\r\n> (I suppose it may be better to create an alias with the advanced `vec` constructor, so that there is no data copying.)\r\n\r\nCorrect me if I am wrong here. I am passing `labels` as `const arma::Row<ElemType>& labels`. Since I am passing it by reference, it shouldn't be copying it right?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 4, 20, 3, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 616311780, 'comment_body': ""I also didn't want it. But I was getting some errors (check the other comment) which forced me to use this :("", 'comment_created': datetime.datetime(2021, 4, 20, 3, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 616350878, 'comment_body': ""Apart from the difference in gain computation inside the for loop, the `SplitIfBetter` also keeps track of `classCounts` for each iteration.\r\n\r\nSo, the main idea for making two overloads here was that since finding the best numeric split is computationally expensive, so in future, we can store some information about labels like their prefix sum in order to speed up the process (like we are doing by storing `classCounts` in case of classification).\r\n\r\nI did come up with an algorithm that could do optimization, but it was only applicable for training without weights. The mathematical equation for this optimization in weighted training was very complicated and I was unable to solve it. So, I decided that we can leave it for future if some better mathematician than me could figure out a way to do this for weighted training also :).\r\n\r\nWhat you are suggesting might become a bit difficult to handle because we need to calculate `classCounts` only for classification and that too while calculating `BestNumericSplit`, so even though we change the `FitnessFunction::Evaluate`, then also that can't be used anywhere else apart from this.\r\n\r\nI apologise if I overlooked something. Does my reasoning for making this choice makes sense?"", 'comment_created': datetime.datetime(2021, 4, 20, 5, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 617714481, 'comment_body': 'Ahh, I see. I thought about it and I think, in that case, we can make it a template. So, in future, if we try to add support for N-ary split, then we can make another function that will store the relevant split information into this variable based on its data type. Does this seem reasonable?', 'comment_created': datetime.datetime(2021, 4, 21, 16, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 617717477, 'comment_body': 'Just for clarification, when you say ""typedef"" you mean instead of `arma::Row<ElemType>`, I should use another template `LabelsType`. Or did you mean something else?', 'comment_created': datetime.datetime(2021, 4, 21, 16, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 624754226, 'comment_body': ""I suppose it could work, but it seems like it might be a bit overkill.  You would have to extract the information of what you need to return as a typedef from the split type, and then create one of those and pass it... I dunno, personally I think it's fine just as an `arma::vec`."", 'comment_created': datetime.datetime(2021, 5, 2, 20, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 624754310, 'comment_body': 'Yes, sorry, I\'m not sure why I used the word ""typedef"" there... I think ""type"" was what I meant. :)  And yeah, if you use a template `LabelsType`, it can be an Armadillo object holding whatever underlying type---including subviews.  That could help prevent copies in some situations.', 'comment_created': datetime.datetime(2021, 5, 2, 20, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 624754588, 'comment_body': ""Yes, but actually that is the cause of the error. :)  If you call `.subvec()`, I believe that returns a subview, not an `arma::Row<ElemType>`.  So, if you templatize to accept any `LabelsType` like was discussed in a different comment, that could fix the issue.  Alternately, you can use the 'advanced' constructor to construct an alias of the `labels` vector of the correct length, starting at the correct position."", 'comment_created': datetime.datetime(2021, 5, 2, 21, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 624754950, 'comment_body': 'I see, I understand now.  Thanks for the explanation---I had missed `classCounts`.  I think the best option here is to have two separate functions, like have done it, then. :+1:', 'comment_created': datetime.datetime(2021, 5, 2, 21, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 624754996, 'comment_body': 'Do you want to leave a TODO in the code comments about the optimization you were discussing?', 'comment_created': datetime.datetime(2021, 5, 2, 21, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 624755135, 'comment_body': 'It might be better to make the difference clearer by removing the `numClasses` parameter (since it is irrelevant for regression).  You could also templatize `labels`, since a user could do regression with `float` too.  So I might suggest changing that type to `const ResponsesType& labels` and adding an extra template parameter. :+1:', 'comment_created': datetime.datetime(2021, 5, 2, 21, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 624885355, 'comment_body': 'Actually, If we keep it `arma::vec`, then we will have to write another overload for regression because in that case, we are storing `double splitInfo` for each node in place of `arma::vec classProbabilities`.\r\n\r\nSo, in my opinion, It would be worth it to add it to make it template. This will help us in two ways - \r\n1. It will reduce code duplication.\r\n2. It will not affect memory usage or performance either.\r\n\r\nI hope I am able to express my point to you. Please let me know your thoughts.', 'comment_created': datetime.datetime(2021, 5, 3, 5, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 624885529, 'comment_body': 'Thanks for the clarification! I will try to do that. 👍 ', 'comment_created': datetime.datetime(2021, 5, 3, 5, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 624886041, 'comment_body': 'Okay, I will give it another shot and see if I am successful with templates. If not, then I will do it with an advanced constructor.', 'comment_created': datetime.datetime(2021, 5, 3, 5, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 624886394, 'comment_body': '> I see, I understand now. Thanks for the explanation---I had missed classCounts. I think the best option here is to have two separate functions, like have done it, then. 👍\r\n\r\nAwesome! :D\r\n\r\n> Do you want to leave a TODO in the code comments about the optimization you were discussing?\r\n\r\nSure, I will do that. 👍 ', 'comment_created': datetime.datetime(2021, 5, 3, 5, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 624888312, 'comment_body': 'Definitely, I will try to make `ResponseType` a template. \r\n\r\nActually, the reason I kept numClasses there was just to make its signature the same as the other existing ones. Would it be fine if I change it to `const size_t /* numClasses */`? This will make it clear that this parameter is irrelevant and not used.', 'comment_created': datetime.datetime(2021, 5, 3, 5, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 627119629, 'comment_body': ""```suggestion\r\nsortedLabels = labels(sortedIndices).t()\r\n```\r\nIf you do decide to go with it, you'd have to enforce this pattern for the entire module for consistency reasons. It's your choice."", 'comment_created': datetime.datetime(2021, 5, 6, 6, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 627155230, 'comment_body': ""Actually, I just now realised, that if in future, we decide to implement N-ary categorical split, then for that, we might need to change the whole bulk of the `SplitIfBetter` and we would also require to pass more information about the split points to the function signature. So, I think that will demand a separate overload of itself. So, maybe we don't have to go the extra mile to tackle that case for now?"", 'comment_created': datetime.datetime(2021, 5, 6, 7, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 627157820, 'comment_body': ""Actually, at this point in time, I am not much concerned about these micro-changes. This is a very big refactoring and I don't want to get distracted by these things. My main focus right now is to do the refactoring correctly, so that I do not introduce any new bug. We can definitely deal with these small issues later."", 'comment_created': datetime.datetime(2021, 5, 6, 7, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 627196718, 'comment_body': 'Good. Nice work btw, would be cool to have this merged!', 'comment_created': datetime.datetime(2021, 5, 6, 8, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jonpsy', 'type': 'User'}, {'comment_id': 638340144, 'comment_body': ""In this case, I don't think it's necessary to keep the signature the same, since there are really two different overloads here anyway: one for regression and one for classification."", 'comment_created': datetime.datetime(2021, 5, 24, 22, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 638341189, 'comment_body': ""I'm not sure I understand---if you leave it as an `arma::vec`, you can just use a vector of length 1 to store `double splitInfo`.  This is kind of what happens now... you can think of that `arma::vec` just as some auxiliary storage that can be used for whatever is required.  Maybe we could choose a better name or provide better documentation, but in any case, I guess I am not fully understanding what the issue with leaving it as an `arma::vec` is."", 'comment_created': datetime.datetime(2021, 5, 24, 22, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 638403828, 'comment_body': 'I kept the signatures the same because earlier the plan was to write a single `Train` function and use it for both classification and regression.', 'comment_created': datetime.datetime(2021, 5, 25, 2, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 638406037, 'comment_body': '`sizeof(arma::vec) = 192` and `sizeof(double) = 8`. So, for each node, we will be wasting 184 bytes. So, for a decently big ensemble of decent size trees, this will make a huge difference. I recall that you once told me that we are trying to reduce the memory of the decision tree as much as possible to decrease the cache miss.', 'comment_created': datetime.datetime(2021, 5, 25, 2, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 640137715, 'comment_body': ""Yeah, you are right about that.  But here is the problem that we have... leaves in a decision tree classifier must hold a vector of class probabilities.  This vector could have arbitrary length, as a user's data can have any number of classes.  So we unfortunately can't add the number of classes as a template parameter, and then use a `double[NumClasses]` to store the probabilities.  Thus I chose to use an `arma::vec`.  It's possible we could use something a little bit lighter there, but almost no matter what, we'll end up storing the class probabilities in some allocated memory somewhere else.  (That's what the `arma::vec` will do internally too, if the size of the vector is large enough.)\r\n\r\nThe other constraint we have is that every leaf node and non-leaf node must be of the same type... so, even if we don't have a leaf, we must still store the member that the leaf uses for the class probabilities.  Therefore, since we already have this `arma::vec classProbabilities` member, I reused it to store the split value for a non-leaf node that was split with `BestBinaryNumericSplit`.  So, at the very least, I don't add an *additional* member that takes up more space.\r\n\r\nI think it is an important observation that `sizeof(arma::vec)` is so big, and I do think that perhaps we could improve that, but regardless of what we do, we'll need some kind of member for leaf nodes, so it makes sense to try and reuse that for a non-leaf node.  Maybe it makes sense to approach the `sizeof(arma::vec)` issue separately, in a different PR or something, but, up to you.  Honestly the next best thing I can think is just a `double*` that we manually allocate and deallocate.  It'll be a little bit more overhead, but it'll at least be a lot smaller (should be 8 bytes for the pointer, then whatever we end up allocating will be stored somewhere else)."", 'comment_created': datetime.datetime(2021, 5, 26, 21, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 640140385, 'comment_body': ""But, if we have to split `DecisionTreeRegressor` into a separate class, then I think we can't have a single `Train` function anyway, right?  So if `DecisionTree` calls a version of `SplitIfBetter()` that does take `numClasses`, and `DecisionTreeRegressor` calls a version of `SplitIfBetter()` that doesn't take a `numClasses` argument, I think that's just fine.\r\n\r\nOriginally I thought it would be really cool if we could manage to make the `DecisionTree` class do both classification and regression, but as this effort has progressed, I think we came to the conclusion that that's not feasible.\r\n\r\n(Please keep in mind you are putting way more time into this than I am, and I'm jumping between lots of different things, so if I am saying something now that contradicts with what I said earlier, I'm really sorry about that!  If I did that, please point it out, because I probably forgot what I said earlier. :cold_sweat:)"", 'comment_created': datetime.datetime(2021, 5, 26, 21, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 640490048, 'comment_body': 'I see. Thanks for the clarification. So, at this moment I think I can make two separate overloads of `AllCategoricalSplit::SplitIfBetter` for classification and regression (the same way I did in `BestBinaryNumericSplit::SplitIfBetter`). This will at least save space for regression, and we can worry about classification some other day.', 'comment_created': datetime.datetime(2021, 5, 27, 10, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 640491645, 'comment_body': ""Yeah, it's fine for me too. I guess I might have misunderstood what you said earlier. I will remove the `numClasses` from the Regressor class. 👍 "", 'comment_created': datetime.datetime(2021, 5, 27, 10, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 640954537, 'comment_body': ""Yes, I guess you are thinking to use just a `double` for regression?  That sounds fine to me, but, I think, for some regression split types that need more than a single `double`, we'll have to use `AuxiliarySplitInfo`.  (The split types you are implementing, I think, don't need extra information.  But, suppose you wanted to have a binary split type for categoricals, that split any categorical feature into two groups of types.  In that case, a single `double` would not be sufficient---you'd need some kind of mapping from each categorical value to indicate whether that category should go to the left or right child.)"", 'comment_created': datetime.datetime(2021, 5, 27, 20, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 640955013, 'comment_body': ""Up to you too, but maybe we should open a separate issue about `sizeof(classProbabilities)` being so large for classification decision trees?  We don't need to address it immediately, of course, but it might be good to just write down somewhere that it is an issue that we eventually need to handle. :)"", 'comment_created': datetime.datetime(2021, 5, 27, 20, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 650388132, 'comment_body': 'Actually I wonder if we should be using a weighted gain computation here.  Instead of taking `leftGain + rightGain` and using unnormalized MSE (e.g. squared error), use MSE as it was before your most recent commit, and then use `leftGain * (numPointsOnLeft / totalPoints) + rightGain * (numPointsOnRight / totalPoints)`. I believe this should give the same result, but it keeps the name ""MSE"" accurate. :)', 'comment_created': datetime.datetime(2021, 6, 12, 12, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 650394517, 'comment_body': 'Sure, this sounds good. I will make this change 👍 ', 'comment_created': datetime.datetime(2021, 6, 12, 13, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 650624841, 'comment_body': '@rcurtin I have applied this change 👍 ', 'comment_created': datetime.datetime(2021, 6, 14, 2, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 651342728, 'comment_body': 'Will it ever happen that the indexes are both zero? Maybe not, but just checking to see if we need a sanity check for the division.', 'comment_created': datetime.datetime(2021, 6, 14, 23, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gmanlan', 'type': 'User'}, {'comment_id': 651342981, 'comment_body': 'labls = labels?', 'comment_created': datetime.datetime(2021, 6, 14, 23, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gmanlan', 'type': 'User'}, {'comment_id': 651402999, 'comment_body': ""Inside Decision Tree, we force each node to have at least one data point, so it can never be empty. This can happen only if a user himself use this and provide an empty `labels` vector. But for that too, there is another overload of this that doesn't require you to pass indices. Personally, I would promote the use of that other overload where the user can pass a subvector of labels."", 'comment_created': datetime.datetime(2021, 6, 15, 2, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 651403089, 'comment_body': 'Yep. Thanks :)', 'comment_created': datetime.datetime(2021, 6, 15, 2, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652125436, 'comment_body': 'That makes sense, thanks for clarifying Rishabh', 'comment_created': datetime.datetime(2021, 6, 15, 20, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gmanlan', 'type': 'User'}, {'comment_id': 652259910, 'comment_body': ""It looks like you've adapted `SplitIfBetter()` to work for both classification and regression tasks, but `BestBinaryNumericSplit` has another overload without `numClasses`.  Should we add that overload here too?"", 'comment_created': datetime.datetime(2021, 6, 16, 0, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652260102, 'comment_body': '```suggestion\r\n   * This overload is used only for regression tasks.\r\n```\r\nI know it is a little pedantic to make this change, but it removes all ambiguity about the comment. :)', 'comment_created': datetime.datetime(2021, 6, 16, 0, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652260759, 'comment_body': 'I noticed while doing some testing that training is quite slow, and I think your comment here explains a large part of why.  Do you want to handle this issue in this PR, or later?  Definitely we should make sure we handle it by the end of the project, otherwise our implementation will not be competitive at all. :smile:', 'comment_created': datetime.datetime(2021, 6, 16, 0, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652262254, 'comment_body': ""It looks like here you've changed things to pass only the first element of `classProbabilities`, instead of the whole vector.  That works for `AllCategoricalSplit` and `BestBinaryNumericSplit`, which only need to store a single `double` as metadata anyway (`AllCategoricalSplit` stores the number of categories only, and `BestBinaryNumericSplit` stores the split value only).  But, if we had more complicated splitting strategies, like one that splits a numeric node three ways, `classProbabilities[0]` is no longer sufficient to compute the direction to go, and may also not be sufficient to compute the number of children.\r\n\r\nSo, I think it is necessary to pass `classProbabilities` here.  A `const arma::vec&` will actually have the same size as a `double` (8 bytes on a typical x86-64 system), so I don't anticipate any performance issue from that alone."", 'comment_created': datetime.datetime(2021, 6, 16, 0, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652263207, 'comment_body': ""In a related vein, you had mentioned earlier that `sizeof(arma::vec)` is actually quite large, which is not helpful when we want to keep the nodes themselves small!  The reason for that is actually that Armadillo includes some pre-allocated space directly inside the class, which is used if the vector is small enough.  However, that is a big disadvantage here since we don't usually need that...\r\n\r\nAs it turns out, there is no option in Armadillo to remove this preallocated space, unless you modify Armadillo through some preprocessor defines (which we can't do in the context of a library... only a user should be doing that).  So, we could use a `std::vector<>`, I suppose, or even a hand-allocated `double*` plus a size member.  (But between those two, honestly, `std::vector<>` is probably the better choice.)\r\n\r\nAnyway, up to you if you want to think about that in this PR.  We could always handle it elsewhere.  But, I had been thinking about it and wanted to write the thought down. :)"", 'comment_created': datetime.datetime(2021, 6, 16, 0, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652263306, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2021, 6, 16, 0, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652263613, 'comment_body': ""I think it makes sense to remove the `numClasses` parameter from here (and the other overload), since we've decided to split the classes out. :+1:"", 'comment_created': datetime.datetime(2021, 6, 16, 0, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652263808, 'comment_body': ""This is pedantic, but I'd suggest calling this `ResponsesType& responses`, since they are not (integer-valued) class labels; they are numeric-valued responses to the data. :+1:"", 'comment_created': datetime.datetime(2021, 6, 16, 0, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652266309, 'comment_body': ""I suppose that for regression splitting techniques that need more information than just a single `double`, this member could be used.  For classification splitting techniques though, we will already have an `arma::vec` (or a `std::vector`, see my other comment), so perhaps this is not the way to store it.\r\n\r\nHowever, for classification there is another concern I had not thought about: if we use a `std::vector<double>`, the actual memory holding the `double`s will not be contiguous with the class member itself---it will be heap allocated.  Since we are trying to maximize memory locality, I wonder if it would be better to *always* use the `AuxiliarySplitInfo` for classification... for `BestBinaryNumericSplit`, it can just be a `double`, and for `AllCategoricalSplit`, it can just be a `size_t`.  Then, the overall size of the class probabilities and auxiliary split information compared to the current `arma::vec` solution will be `sizeof(std::vector<double>) + sizeof(double)` (which is likely 32 bytes on a typical x86-64 system), compared with `sizeof(arma::vec) + sizeof(empty struct)` (which is a lot larger, especially because I think the C++ standard doesn't allow the compiler to optimize out the empty struct).  I didn't include padding effects in that computation, but still, I suspect what I just described might be a significantly better solution.\r\n\r\nLet me know what you think... I know it is off-topic for this PR a little bit, but maybe still worth discussing..."", 'comment_created': datetime.datetime(2021, 6, 16, 0, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652266725, 'comment_body': 'Should we remove `numClasses` here too?  I think that we should for the sake of consistency.', 'comment_created': datetime.datetime(2021, 6, 16, 0, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652266853, 'comment_body': '```suggestion\r\n```\r\nWe can probably remove this debugging output now. :)', 'comment_created': datetime.datetime(2021, 6, 16, 0, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652266935, 'comment_body': '```suggestion\r\n```\r\nThis can probably be removed too. :)', 'comment_created': datetime.datetime(2021, 6, 16, 0, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652267174, 'comment_body': 'Do you want to adapt this comment and others to use `splitPointOrPrediction` instead of `classProbabilities`?\r\n\r\nIf you think there are opportunities for code reuse between these two classes (perhaps via non-virtual inheritance?) it might be worth looking into---up to you. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 0, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652267277, 'comment_body': '```suggestion\r\n```\r\nJust a little more debugging output. :)', 'comment_created': datetime.datetime(2021, 6, 16, 0, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652267778, 'comment_body': '```suggestion\r\n * The mean absolute deviation gain class, a fitness function for regression\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 0, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652267910, 'comment_body': 'Here too I think we should use the term `responses` (or even `values`) instead of `labels` since these are not class labels. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 0, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652268425, 'comment_body': ""It may be more efficient to try and express this as a single-line Armadillo expression and then let Armadillo's underlying machinery do the optimization (it will probably use a hand-unrolled loop and some other optimizations)."", 'comment_created': datetime.datetime(2021, 6, 16, 0, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652268809, 'comment_body': ""I think it might be better to remove this parameter, since it doesn't make sense in the context of regression."", 'comment_created': datetime.datetime(2021, 6, 16, 0, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652269906, 'comment_body': ""Are you following a particular paper's implementation here?  It might be better to use a data-dependent sampling process, more like this:\r\n\r\n```\r\n// This may have edge case bugs, beware...\r\nsize_t randomPivotIndex = math::RandInt(0, data.n_elem - 2);\r\ndouble randomPivot = (data[randomPivotIndex] + data[randomPivotIndex + 1]) / 2\r\n```\r\n\r\nThis way, the split is more likely to produce a balanced split on very unbalanced data (consider, e.g., a dataset like [0, 0.9999, 0.99991, 0.99992, ... 1.0]; the strategy you've got here would be overwhelmingly likely to always split into [0] and [0.9999, 1.0]).\r\n\r\nHowever, I don't have intuition for which will actually perform better in the context of decision tree learning... I think it might be the data-dependent strategy, but, I am not 100% sure..."", 'comment_created': datetime.datetime(2021, 6, 16, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652270019, 'comment_body': '```suggestion\r\n    leftWeights.set_size(leftLeafSize);\r\n    rightWeights.set_size(rightLeafSize);\r\n```\r\nSimple style fix. :)', 'comment_created': datetime.datetime(2021, 6, 16, 0, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652270079, 'comment_body': '```suggestion\r\n  for (size_t i = 0; i < data.n_elem; ++i)\r\n```\r\nAnother simple style fix. :)', 'comment_created': datetime.datetime(2021, 6, 16, 0, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652270704, 'comment_body': 'It might be better to call this `boston_housing_price_responses.csv` instead to indicate that the data is for regression, not classification. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 0, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652271501, 'comment_body': 'Any reason for the underscore in the name here?', 'comment_created': datetime.datetime(2021, 6, 16, 0, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652272090, 'comment_body': 'Do you want to uncomment this test now?  Or remove the Boston housing dataset?  Up to you.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652272635, 'comment_body': 'Should we remove these two tests?', 'comment_created': datetime.datetime(2021, 6, 16, 1, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652272776, 'comment_body': 'I imagine you are planning to modify this test, but if you want to keep it, we should definitely have a `REQUIRE()` test for the RMSE value. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 1, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652272901, 'comment_body': 'Can you be sure to at least add one test back in that uses `arma::fmat` as a data type?  This will help us ensure that the template types for data types are working correctly. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 1, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652273003, 'comment_body': 'Nice tests!', 'comment_created': datetime.datetime(2021, 6, 16, 1, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652273383, 'comment_body': 'If you choose to keep this, after #2980 is merged this should work fine.', 'comment_created': datetime.datetime(2021, 6, 16, 1, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652273742, 'comment_body': ""Nice, this looks good!  You might consider reducing the range of the noise a little bit, but if you're not seeing any failures then I think it's fine."", 'comment_created': datetime.datetime(2021, 6, 16, 1, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 652318019, 'comment_body': 'We have to handle it before we move on with XGBoost otherwise XGBoost will run horribly slow. This PR is getting way too big. I think once this PR gets merged, then I will open another one to handle this. This will require benchmarking etc., so we will deal with it after this 👍 ', 'comment_created': datetime.datetime(2021, 6, 16, 3, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652320978, 'comment_body': 'I think we should handle it but in a separate PR. Earlier I was thinking that I will deal with things later, but now I am realising that Decision Trees need to be perfect because the performance of many other methods depends directly on their performance.\r\n\r\nIt might mess up a little with the timeline, but I think that this needs proper attention. What do you think?', 'comment_created': datetime.datetime(2021, 6, 16, 3, 21, 59, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652321302, 'comment_body': 'Yeah, correct. I will remove this 👍 ', 'comment_created': datetime.datetime(2021, 6, 16, 3, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652321586, 'comment_body': 'Sure. I will fix that 👍 ', 'comment_created': datetime.datetime(2021, 6, 16, 3, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652331602, 'comment_body': 'After reading the other comments as well, I think this is an important issue which we should address. Honestly, I have no knowledge about memory management. So, whatever you just said went over my head. I can take whatever you suggest as the best approach as a grain of salt and can implement that. :)', 'comment_created': datetime.datetime(2021, 6, 16, 3, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652333251, 'comment_body': 'Yeah, we can do that. I kept it that way because I wanted to reuse code and I simply adapted the old AllCategoricalSplit that used this parameter. It will be easy to remove this. So, I think we can do this at the end. The thing is there is still some confusion about how we are storing info in the splitting strategies. So, I think once that part is sorted, we can remove this easily if needed.', 'comment_created': datetime.datetime(2021, 6, 16, 4, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652333332, 'comment_body': 'Sure, I will remove that once I have tested the Boston housing dataset.', 'comment_created': datetime.datetime(2021, 6, 16, 4, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652333421, 'comment_body': 'Same as above reply.', 'comment_created': datetime.datetime(2021, 6, 16, 4, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652334824, 'comment_body': ""Yeah. I haven't yet looked closely at the documentation. I will fix it. \r\n\r\nI need to learn about non-virtual inheritance first. I will give it a shot."", 'comment_created': datetime.datetime(2021, 6, 16, 4, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652335030, 'comment_body': 'Yeah. Sure 👍 ', 'comment_created': datetime.datetime(2021, 6, 16, 4, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652335758, 'comment_body': 'Yeah. This was kept because I was reusing the old AllCategoricalSplit. I think then we have to create another overload for AllCategoricalSplit::SplitIfBetter too. Only then we will be able to remove it. I will look into it too.', 'comment_created': datetime.datetime(2021, 6, 16, 4, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652337555, 'comment_body': 'I am indeed following the algorithm described in the paper. It is mentioned on page 4 [here](https://orbi.uliege.be/bitstream/2268/9357/1/geurts-mlj-advance.pdf). But anyway, if there is such a big imbalance in data, then it makes perfect sense to split it about that point. This might be overfitting, but the split does make sense.', 'comment_created': datetime.datetime(2021, 6, 16, 4, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652337665, 'comment_body': 'Sure 👍 ', 'comment_created': datetime.datetime(2021, 6, 16, 4, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652338348, 'comment_body': 'I was wondering when you were gonna ask me this. :-)\r\nActually, these tests are also in `decision_tree_test.cpp`. So, in ""catch2"", we can have only one test with a particular name. It won\'t accept even though they are in different test suits. So, I added an underscore to them.', 'comment_created': datetime.datetime(2021, 6, 16, 4, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652339488, 'comment_body': ""We can't remove the Boston housing dataset. There are some tests like `SimpleGeneralizationTest`, this one and a couple more that requires a real-world dataset. So, I would say we should keep this for now. Once DatasetInfo is fixed, I will complete these tests."", 'comment_created': datetime.datetime(2021, 6, 16, 4, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652339944, 'comment_body': 'I think we can adapt these tests to use MADGain. All the tests currently use MSEGain. I think there should be at least one or two tests where the tree is trained on MADGain. What do you think?', 'comment_created': datetime.datetime(2021, 6, 16, 4, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652340307, 'comment_body': 'Yeah, this is one of the tests that is still left. Once it is completed, it will have a REQUIRE() statement.', 'comment_created': datetime.datetime(2021, 6, 16, 4, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652340472, 'comment_body': 'Yeah. I have this in mind. This one also relies on Boston dataset :)', 'comment_created': datetime.datetime(2021, 6, 16, 4, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652340757, 'comment_body': 'Thanks :D', 'comment_created': datetime.datetime(2021, 6, 16, 4, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652341014, 'comment_body': ""Yeah. Right now they throw an error, that's why they are commented. I will keep it 👍 "", 'comment_created': datetime.datetime(2021, 6, 16, 4, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 652341277, 'comment_body': 'I am getting pretty good RMSE (close to 0.5). So, I think this is just fine.', 'comment_created': datetime.datetime(2021, 6, 16, 4, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 653108774, 'comment_body': 'That sounds like a great plan to me. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 22, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653109578, 'comment_body': ""I agree that this could make a big difference.  Why don't we handle the prefix-sum issue first, then see what the performance is?  I have spent some time thinking about it, and I suspect that the change actually won't be all that hard to implement.  Also I do think it is okay to delay the timeline a bit for this issue.  My assumption is that it would probably take maybe a week to implement the change, debug it, and do some quick benchmarking---let me know what you're thinking, you probably have a better picture than I do. :) @gmanlan any thoughts on that?"", 'comment_created': datetime.datetime(2021, 6, 16, 23, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653110795, 'comment_body': ""Sure, basically what I think at this point might work best is if:\r\n\r\n - `DecisionTreeClassifier` holds a `std::vector<double>` instead of an `arma::vec` for `classProbabilities`\r\n - `DecisionTreeRegressor` should hold a `double` for the prediction, just like it does now (so no change needed)\r\n - `AuxiliarySplitInfo` for `BestBinaryNumericSplit` should be a `double` that holds the split value, and `classProbabilities` shouldn't be used\r\n - `AuxiliarySplitInfo` for `AllCategoricalSplit` should just be a `size_t` holding the number of categories, and `classProbabilities` shouldn't be used\r\n\r\nIf you want, I'm happy to spend some more time explaining what's guiding my intuition above.  If you like reading, Ulrich Drepper's [What Every Programmer Should Know About Memory](https://people.freebsd.org/~lstewart/articles/cpumemory.pdf) is an *awesome* article (though it is quite long!) that I learned a *lot* from.  I can give you the short summary too, just let me know. :+1:"", 'comment_created': datetime.datetime(2021, 6, 16, 23, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653111144, 'comment_body': ""Yeah, honestly if you would rather put the time into optimizing the implementations, maybe that is a better way to spend the available time---so if you're thinking this one might be tedious or hard, my opinion is, let's not worry about it for now. :+1:"", 'comment_created': datetime.datetime(2021, 6, 16, 23, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653111462, 'comment_body': ""Yeah, I think we may end up with a situation where each split type will need a separate overload for regression and classification.  But it seems like that's the way it should be, since the gain function for classification and regression will be different (one requires `numClasses` and one doesn't)."", 'comment_created': datetime.datetime(2021, 6, 16, 23, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653111631, 'comment_body': ""Ahhh, ok, then let's stick with the paper's implementation then. :+1:"", 'comment_created': datetime.datetime(2021, 6, 16, 23, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653111859, 'comment_body': ""Ah, understood.  I'm ok with that, but you could also just make them all `...RegressionTest` or `...ClassificationTest` instead of `...Test_`---up to you. :+1:"", 'comment_created': datetime.datetime(2021, 6, 16, 23, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653111966, 'comment_body': 'I agree, we should test both gain functions for sure.', 'comment_created': datetime.datetime(2021, 6, 16, 23, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653112180, 'comment_body': 'Ah, ok, sounds good then. :+1:', 'comment_created': datetime.datetime(2021, 6, 16, 23, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 653153549, 'comment_body': ""I agree with you both about this being important for the PR completeness. Think about it, without prefix-sum and proper handling of memory used by nodes we may struggle to achieve the goals proposed for XGB (that being, comparable performance as benchmarked against reference implementations). That said, I would recommend addressing these two because it's more like an investment for the right foundation - if you implement XGB first and then realize that it blows up memory or runs quite slowly, then we will need to come back to this anyway so maybe sooner rather than later?"", 'comment_created': datetime.datetime(2021, 6, 17, 1, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gmanlan', 'type': 'User'}, {'comment_id': 653190696, 'comment_body': 'I think it will be redundant because the name of the test suite is ""DecisionTreeRegressor"".', 'comment_created': datetime.datetime(2021, 6, 17, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 653193455, 'comment_body': ""@rcurtin @gmanlan, Okay. So, let me first wrap up the remaining tests and handle the basic suggestions from the review. Then I will work on this. First I will benchmark our current implementation. I think UCI energy dataset will be good enough for this. \r\n\r\nI don't know if you remember, but I mentioned earlier that I was unable to figure out mathematically how to do prefix-sum in weighted scenario. Maybe you can help with that?"", 'comment_created': datetime.datetime(2021, 6, 17, 3, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 653194709, 'comment_body': 'Thanks for the detailed strategy. The starting part where Ulrich is explaining the memory architecture seems familiar. This semester, I had Computer Organisation course where these architectures were taught on hardware level. But, yeah the article is too big to read right now, if you could give me some highlights then it would be great. :)', 'comment_created': datetime.datetime(2021, 6, 17, 3, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 653195057, 'comment_body': ""Well, then let's focus on optimization right now. We will jump back to it later 👍 "", 'comment_created': datetime.datetime(2021, 6, 17, 3, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 653459187, 'comment_body': ""> I don't know if you remember, but I mentioned earlier that I was unable to figure out mathematically how to do prefix-sum in weighted scenario. Maybe you can help with that?\r\n\r\n@rcurtin @gmanlan I cracked this 😃. Check this out https://drive.google.com/file/d/1OH4DTL9F-FGLvC76i2TyA5rkfaS878Za/view?usp=sharing. Please let me know if my handwritten expressions are not legible.\r\n\r\nEarlier when I tried to solve this problem, I was expanding the summation and then trying to simplify it. That method was pretty complicated and didn't give any result. But keeping the summation as it is, the solution became pretty neat and easy. Now, I guess for MSEGain, we have reduced complexity from O(n^2) to O(n).🚀\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 11, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 653995517, 'comment_body': 'Yes, I believe your derivation is right.  Nice work!', 'comment_created': datetime.datetime(2021, 6, 17, 22, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 654001094, 'comment_body': 'The ""shortest version"" is just that sequential memory accesses are comparatively cheap, and random memory accesses are not.  So if you can ""stream"" through data, it will be fast, but if you have to jump around in memory, it probably won\'t be.  If I have a vector in memory `[1, 2, 3, 4, 5, 6, ..., N]`, summing all the elements in that vector will be very fast since I can do that as a simple single pass through contiguous memory.  Hardware is often tuned so that if you request the memory address `M`, it is very fast to load the address `M + c` where `c` is, e.g., the cache line size or something similar.  On the other hand, if I represented that vector as a linked list, then every element could live somewhere completely different in memory---and hardware tends to be not as good at this.\r\n\r\nThe ""second shortest version"" adds the observations that chunks of data are loaded into cache at a time, and once you have something in the L1/L2/L3 cache, it is very fast to operate on!\r\n\r\nSo, while keeping in mind that all intuition needs to be validated with experiments, it is generally a decent rule of thumb for design to try and make memory access as linear as possible, and try to make all the memory you need fit into as few cache lines as possible.  For a decision tree this is hard, since the tree structure itself means we won\'t always have a linear traversal in memory.  But, we can at least try and make sure that all of the decision tree fits into as few cache lines as possible.\r\n\r\nAnyway, if you find this kind of thing interesting, keep reading and keep paying attention in the computer architecture classes! :smile: There is some *really cool* stuff to know about all this (at least in my opinion :)).', 'comment_created': datetime.datetime(2021, 6, 17, 22, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 654001491, 'comment_body': 'Yeah, I can see what you mean.  No worries leaving it as-is. :+1:', 'comment_created': datetime.datetime(2021, 6, 17, 22, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 654139285, 'comment_body': 'Thanks for the tip. I will keep it in mind. Knowing about these architectures and how they work gives programmers good intuition to write efficient code and get the most out of the processor. I too find it interesting.', 'comment_created': datetime.datetime(2021, 6, 18, 4, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 658804121, 'comment_body': 'Do you want to add a snippet to `HISTORY.md` about the addition of the regression tree too?', 'comment_created': datetime.datetime(2021, 6, 25, 14, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 658810774, 'comment_body': ""I think you had said you didn't want to continue the refactoring of `DecisionTree` to use `AuxiliarySplitInfo` only, which is okay, but can you open an issue for it?  Really I think we can remove the `double` parameter here entirely and just use `AuxiliarySplitInfo`.  Anyway, I just want to make sure it doesn't get forgotten, so an issue would be super helpful. :)"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 658812610, 'comment_body': 'As a follow-up thought, we could also remove `classProbabilities` from the `SplitIfBetter()` parameters too. :)', 'comment_created': datetime.datetime(2021, 6, 25, 14, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 658823425, 'comment_body': 'Technically the type here should not be `double`, but instead `typename WeightVecType::elem_type`.  Also, is `responses` always `arma::rowvec`?  That too could be templatized, so that a user could pass, e.g., `arma::frowvec` too for regression.', 'comment_created': datetime.datetime(2021, 6, 25, 14, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 658832431, 'comment_body': 'Do you think that if we used a different interface for the gains, we could simplify the code a bit?  Perhaps we can have each gain function implement something like:\r\n\r\n```\r\ndouble FindBestBinarySplit(const ValuesType& values, const WeightVecType& weights, const size_t start, const size_t end, size_t& splitValue);\r\n```\r\n\r\nSince each gain type has a slightly different way of performing this computation, maybe it is better to keep that logic with the gain type itself, instead of using template specializations.\r\n\r\nI suppose, we could use SFINAE inside of `BestBinaryNumericSplit` to determine if we need to manually loop over all possible splits (e.g. if something like `FindBestBinarySplit()` is not available).\r\n\r\nIt might be possible to define an ""incremental"" interface for each gain type where, given some vector `[x_0, ..., x_n]`, and the gain for the vector `[x_0, ..., x_{n - 1}]` plus perhaps some other cached data, we would quickly compute the gain of `[x_0, ..., x_n]`.  Then we could express `BestBinaryNumericSplit` in terms of that interface, which could be more general.\r\n\r\nAnyway, let me know what you think.  My hope here is that we can find a way to get the huge computational savings of your template specialization, but in a more general way. :+1:', 'comment_created': datetime.datetime(2021, 6, 25, 15, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 658833498, 'comment_body': '```suggestion\r\n                       const arma::rowvec& weights,\r\n                       const size_t begin,\r\n                       const size_t end,\r\n                       double& accWeights,\r\n                       double& weightedMean)\r\n```\r\n\r\nI think this will fix the style issue... hope I counted right...', 'comment_created': datetime.datetime(2021, 6, 25, 15, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 658833776, 'comment_body': '```suggestion\r\n              const size_t begin,\r\n              const size_t end,\r\n              double& mean)\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 15, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 658858709, 'comment_body': ""We had discussed changing how `AuxiliarySplitInfo` worked so that this class would not need to inherit from them.  But, I think you said you didn't want to do that refactoring now, which is fine---but would you mind opening an issue for it so we won't forget it?\r\n\r\nAlso, we discussed a base class for the `DecisionTree` from which both the classifier and regressor would inherit, so we could at least keep base logic in one place.  What do you think of that idea?  Do you want to open an issue for that one too?"", 'comment_created': datetime.datetime(2021, 6, 25, 15, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 658890466, 'comment_body': 'Definitely 👍 ', 'comment_created': datetime.datetime(2021, 6, 25, 16, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 658893372, 'comment_body': 'Yeah. We can do that. From the source code point of view, this will be a great step because it will greatly simplify the implementation without any of these clever techniques like empty struct, reusing variables etc. :)\r\n', 'comment_created': datetime.datetime(2021, 6, 25, 16, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 658894542, 'comment_body': ""Yeah. We can do that. Earlier I was under the impression that since this is used internally, it will be sufficient to use arma::rowvec, but I didn't think about the case where responses could be arma::frowvec. I will templateize it 👍 "", 'comment_created': datetime.datetime(2021, 6, 25, 16, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 658897208, 'comment_body': ""Yeah sure. I will open an issue for both of them once this one gets merged. I don't want to open an issue right now because it creates a bit of confusion for someone and it also needs to be stated that this is WIP etc etc.\r\n\r\nDon't worry, I keep a log of all details like this so that I don't forget them. And I have noted these down :)"", 'comment_created': datetime.datetime(2021, 6, 25, 16, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 658898483, 'comment_body': ""Since we are talking about optimization here, it came to my mind today that can't we parallelize the gain computation for each feature while calculating the best dimension?🤔"", 'comment_created': datetime.datetime(2021, 6, 25, 16, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 658902752, 'comment_body': 'Yeah! This sounds like a great idea. We can do this. This will remove the necessity of creating multiple overloads for each fitness function.', 'comment_created': datetime.datetime(2021, 6, 25, 16, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 659986237, 'comment_body': ""Sounds good!  I just want to make sure it doesn't fall off of the list. :)"", 'comment_created': datetime.datetime(2021, 6, 28, 17, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 659986961, 'comment_body': ""We talked about this last week, but just to write down my thoughts, I do think that it could be possible to use OpenMP parallel for loops in `DecisionTree<>::Train()`... I think that will work okay.  If we try it, we should make sure to test the random forest runtime (which is parallelized at the level of trees), to make sure that we don't have any slowdown or anything."", 'comment_created': datetime.datetime(2021, 6, 28, 17, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 660783073, 'comment_body': '@rcurtin, What do you mean by ""incremental"" interface?\r\n\r\nAlso, correct me If I understood you correctly, all we need to do is take the part where we are calculating the best split point into the FitnessFunction classes. Then have two overloads for numeric splits---one with optimizations and the other without optimization. Right?\r\n\r\nAlso, are we sure that the signatures for these functions that will find the best split efficiently will all require the same kind of input parameters? Combination of all splitting strategies and fitness functions that we have till now, they all require the same set of parameters i.e. data, responses and weights.\r\nBut, is there any other splitting strategy or fitness function which you think might be out there that might need anything else?', 'comment_created': datetime.datetime(2021, 6, 29, 16, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 661045106, 'comment_body': ""Right, so if we can compute the gain for the split at index `i` based on what the left and right gains were at index `i - 1`, then this would lead to an 'incremental' interface (that might not be the best word for it).  In this scheme, the gain computation function would take in the data points, the index to split on, and then the left and right gains at the previous split.  We would have to establish a unified interface for something like this which provided all the necessary information to a split function: while the left and right gains at index `i - 1` would be sufficient for MSE, would that information also be sufficient for other gain functions?  Or would there be something else we should pass too?  (I didn't consider weights in that discussion, so that may be another parameter that needs to be passed.  There are many variations on the general idea above that could be explored.)\r\n\r\nI suppose it would be okay for now to pass the things that MSE needs, and then make sure that the MSE interface can store state somehow (so, e.g., the gain computation is not a `static` function, so that we can store things like the left side's statistics and right side's statistics).  If we get the interface wrong and more needs to be added later, we can always take care of that later.\r\n\r\nAnyway, we can check for the presence of this more efficient overload using SFINAE (just like you were investigating), and then choose the correct one from the `SplitIfBetter()` function.\r\n\r\nI think I answered everything here... let me know if not. :)"", 'comment_created': datetime.datetime(2021, 6, 30, 0, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 661179186, 'comment_body': 'Thanks for the explanation. Now, I get the idea. So, I think in general any such optimization has the following structure:-\r\n1. Precompute some data and cache it.\r\n2. Loop through all the points and use the data at the current index to update the cached data for that particular iteration.\r\n3. Use the updated data to compute the gain.\r\n\r\nI think we can also have these three things inside our fitness functions. And each of them can implement these interfaces in their own ways. The MSEGain class already has the third part done. I think we can do the other two things as well.\r\n\r\nOne question I have in my mind is where shall I store the cached data? I was thinking probably it will be good to store it in the FitnessFunction class, but as you mentioned something about ""static function"", can you tell how will it affect the existing functions?\r\n\r\nI also think that this might entirely remove the need to have an additional overload for SplitIfBetter because let\'s say if a particular FitnessFunction is not optimized, then it can simply have the interfaces (for points 1 and 2 explained above) that do nothing.', 'comment_created': datetime.datetime(2021, 6, 30, 6, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 662677412, 'comment_body': ""I agree with what you've written up.  I think we have to store the data as a class member inside the `FitnessFunction`, and then use an instantiated version of it that can hold the cached data."", 'comment_created': datetime.datetime(2021, 7, 2, 1, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 663307005, 'comment_body': 'Nice, this refactoring looks great!  I have a few comments and they mostly have to do with naming and API simplicity.  I think they would all be simple refactorings.  Mostly the thought I have here is ""how can we future-proof this API for other split types?"" and also ""how can we make it as general as possible, so we don\'t have to change it later?""\r\n\r\nThe first suggestion would be to prefix these functions\' names with something like `Binary`, since these three functions (`CalculateStatistics()`, `UpdateStatistics()`, and the new overload of `Evaluate()`) are specific to the case where we are looking to find the best binary split by scanning an entire array.\r\n\r\nNext, I see that you\'re calling `Evaluate()` with two different indices to get the left and right gain.  But I wonder if it would be simpler to just return a `std::tuple<double, double>` (i.e. both gains at once), since the strategy we are using here is restricted to a binary split.  (It seems possible but very nontrivial to generalize to a more-than-binary split, and we don\'t need it for our purposes anyway...)  Another way to achieve the same thing would be to take two `double&`s that you set to the left and right gains in the function.  That might ""look"" more like other functions inside of mlpack.\r\n\r\nIf you did return both gains at once, then actually it would be possible to simplify further and combine `UpdateStatistics()` with this new function that computes both gains.\r\n\r\nSo, for instance, we might have two functions like `BinaryScanInitialize()` (I believe this actually does not need any parameters---more comments below) and `BinaryGains(const ResponsesType& responses, const WeightVecType& weights, const size_t splitIndex, double& leftGain, double& rightGain)`.\r\n\r\nThose are just some ideas... let me know what you think.  Like any design, part of it is personal preference, so, don\'t feel obligated to take every suggestion.', 'comment_created': datetime.datetime(2021, 7, 3, 2, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 663307565, 'comment_body': 'I believe it is possible to avoid holding the vector `sumSquares` and instead use `O(1)` memory to do this computation.  It is possible there is something I have overlooked, but whenever we are accessing `sumSquares` in `Evaluate()` we are accessing `sumSquares[index]`.  To me this implies that we could just store one `sumSquares` value.', 'comment_created': datetime.datetime(2021, 7, 3, 2, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 663307661, 'comment_body': 'If the user does not pass `index` as 1 greater than the previous `index` that was used when `UpdateStatistics()` was called, this could give an incorrect result.  I wonder if it might be better to internally store `lastIndex` (initialized to `0`), and loop over all values between `lastIndex + 1` and `index` (inclusive) to update the value, instead of just `index`.', 'comment_created': datetime.datetime(2021, 7, 3, 3, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 663307772, 'comment_body': 'This is a minor implementation detail, but if you did hold `lastIndex`, then both `leftSize` and `rightSize` can be derived from it and the total length: `leftSize = lastIndex` and `rightSize = responses.n_elem - leftSize`.', 'comment_created': datetime.datetime(2021, 7, 3, 3, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 663315644, 'comment_body': 'Yep. Nice observation!', 'comment_created': datetime.datetime(2021, 7, 3, 4, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 663316661, 'comment_body': ""I think it is just fine because we don't expect the user to call this function directly.\r\n\r\nMoreover, iterating in this way allows us to check if the data value has changed from the last index or not. This helps us to skip computing gain for some of the indexes where the value doesn't change. Now, I don't deny that this can't be done with the way you are suggesting here but for that too, something similar would be needed to skip some indexes. So, I think this is okay the way it is now. Let me know if it doesn't make sense :)"", 'comment_created': datetime.datetime(2021, 7, 3, 4, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 663316898, 'comment_body': 'These variables also store the sum of weights for left and right children too in weighted training. So, if we remove one of these, then we will have to add another data member that stores the total weight. So, we will end up the same thing.', 'comment_created': datetime.datetime(2021, 7, 3, 4, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 663318488, 'comment_body': 'Take a look at https://github.com/RishabhGarg108/mlpack-1/blob/ad64ad07d717c2b2d19be7bac82be03a2329071b/src/mlpack/methods/decision_tree/best_binary_numeric_split_impl.hpp#L407 from lines 407 to 417. First, we update statistics, then we do a check if we can skip the gain computation for a particular index and then we evaluate gain and later do other stuff.\r\n\r\nNow, if we want to combine the `UpdateStatistics` and `Evaluate` method, then we have to move this check that skips the gain computation into that function too and it will be ugly to `continue` the loop from the function. We will have to create a flag variable that will be set to true when the skip condition is true in the function and based on that we will have to put another condition in the loop to `continue` it.\r\n\r\nSo, I think we can keep them separated. Let me know if I overlooked something or if there is some other way to achieve this.\r\n\r\nOne thing that we can definitely do is to return a tuple from the `Evaluate` method. 👍 \r\n\r\nAlso, I am not that good at naming functions. Can you tell the exact names for these functions that you would like? :)', 'comment_created': datetime.datetime(2021, 7, 3, 5, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 664925337, 'comment_body': ""You're right, I forgot about the weighted case. :)"", 'comment_created': datetime.datetime(2021, 7, 6, 22, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 664930851, 'comment_body': ""Yeah, agreed, there are a couple ways to do it---either you have two functions, one of which takes a step but doesn't return the gain, and the other of which takes a step and returns the gain (this is the way you have it now), or you have one function that allows 'fast forwarding', e.g., taking possibly multiple steps and returning the gain of the last one.\r\n\r\n(By 'step' there I mean 'increase the index'.)\r\n\r\nUp to you which you want to go with---personally, I think just one function is cleaner, but, I can see advantages and disadvantages to both approaches.  (They are pretty minor tradeoffs though.)"", 'comment_created': datetime.datetime(2021, 7, 6, 23, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 664932496, 'comment_body': ""Ahh, so the only thing I was thinking is that the update on line 407 can be removed, but then you would need to have the function that computes the gain allow updating the index by many points at once (like described [here](https://github.com/mlpack/mlpack/pull/2905#discussion_r664930851)).  But I do think either way is fine, so, up to you.\r\n\r\nFor names I might suggest:\r\n\r\n - `BinaryScanInitialize()`\r\n - `BinaryStep()` for `UpdateStatistics()` (since it 'step's one index at a time)\r\n - `BinaryGains()` to compute the left and right gains\r\n\r\nLet me know what you think. :+1:"", 'comment_created': datetime.datetime(2021, 7, 6, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 665306334, 'comment_body': 'The names make sense. Thanks :)', 'comment_created': datetime.datetime(2021, 7, 7, 12, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 667217403, 'comment_body': '```suggestion\r\n    `mlpack::tree::DecisionTreeRegressor`. It is accessible only though C++.\r\n    \r\n```\r\nJust an extra line break. :)', 'comment_created': datetime.datetime(2021, 7, 9, 21, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667219668, 'comment_body': 'Oops, looks like the spacing on this comment is off. :)  (It should be spaced in just one more.)', 'comment_created': datetime.datetime(2021, 7, 9, 21, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667219808, 'comment_body': 'Technically now this is specialized for any fitness function that implements `BinaryScanInitialize()` and `BinaryScanStep()`.  Perhaps we should update the comment too?', 'comment_created': datetime.datetime(2021, 7, 9, 21, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667220961, 'comment_body': ""This one isn't marked `static`, but I think it should be.  However, when you do this, I expect you will have an ambiguous function call compilation error, because `MSEGain` can match both this overload and the other one.  Thus, you need to use `std::enable_if<>` with the other overload, with the negated conditional: `std::enable_if<!HasBinaryScanInitialize ... || !HasBinaryStep ..., double`.\r\n\r\nNote also you can use SFINAE as default-valued arguments to the function, like this:\r\n\r\n```\r\n  SplitIfBetter(\r\n      const double bestGain,\r\n      const VecType& data,\r\n      const ResponsesType& responses,\r\n      const WeightVecType& weights,\r\n      const size_t minimumLeafSize,\r\n      const double minimumGainSplit,\r\n      double& splitInfo,\r\n      AuxiliarySplitInfo& /* aux */,\r\n      typename std::enable_if<..., void>::type* = 0);\r\n```\r\n\r\nBut, to my knowledge they both work the same way, so it doesn't make a difference which you want to use."", 'comment_created': datetime.datetime(2021, 7, 9, 21, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667221802, 'comment_body': 'Would it be worthwhile to check via SFINAE for the existence of `BinaryGains()` also?\r\n\r\nAs a side comment, personally I think `auto` can obscure the meaning of the code a bit.  Even though it is a bit more verbose, I would consider going with the exact type definition for clarity:\r\n\r\n```suggestion\r\n    std::tuple<double, double> binaryGains = fitnessFunction.BinaryGains();\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 21, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667222332, 'comment_body': '```suggestion\r\n         template<typename> class NumericSplitType,\r\n         template<typename> class CategoricalSplitType,\r\n         typename DimensionSelectionType,\r\n         bool NoRecursion>\r\n```\r\nTiny spacing fix. :)', 'comment_created': datetime.datetime(2021, 7, 9, 21, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667222420, 'comment_body': '```suggestion\r\n         template<typename> class NumericSplitType,\r\n         template<typename> class CategoricalSplitType,\r\n         typename DimensionSelectionType,\r\n         bool NoRecursion>\r\n```\r\nHere too. :)', 'comment_created': datetime.datetime(2021, 7, 9, 21, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667279135, 'comment_body': 'Hey @rcurtin, I added the `static` keyword to the function and it did compile. But, when I added the negated condition to the regular overload, It is giving me an error that ""no matching overload of SplitIfBetter could be found"". Can you please take a look at what is going wrong here?', 'comment_created': datetime.datetime(2021, 7, 10, 2, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 667280087, 'comment_body': ""```suggestion\r\n      !HasBinaryScanInitialize<FitnessFunction, void(FitnessFunction::*)\r\n          (const ResponsesType&, const WeightVecType&, const size_t)>::value ||\r\n      !HasBinaryStep<FitnessFunction, void(FitnessFunction::*)\r\n          (const ResponsesType&, const WeightVecType&, const size_t)>::value ||\r\n```\r\n```suggestion\r\n          (const ResponsesType&, const WeightVecType&, const size_t)>::value ||\r\n```\r\nI am not sure if this will fully fix the issue, but the correct inversion of the condition should either be !(1 && 2 && 3) or !1 || !2 || !3. :)\r\n\r\nIf that still doesn't work, I'll take a look into it tomorrow morning---it's pretty late here now, so I'm headed to bed. :)"", 'comment_created': datetime.datetime(2021, 7, 10, 3, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667403145, 'comment_body': ""Okay, so I spent a while fighting with it to come to an interesting conclusion... the signatures you have appear to be correct, but `MSEGain` actually does not have a function `MSEGain::BinaryScanInitialize`... it has a function `template<bool UseWeights> MSEGain::BinaryScanInitialize<UseWeights>`!  `HAS_MEM_FUNC` can't search for this.  So I wrote a slightly different version, but it does not (quite) work and it's not very general anyway:\r\n\r\n```\r\n#define HAS_MEM_TEMPLATE_FUNC(FUNC, NAME)                                      \\\r\ntemplate<typename T, typename sig, bool arg, typename = std::true_type>    \\\r\nstruct NAME : std::false_type {};                                              \\\r\n                                                                               \\\r\ntemplate<typename T, typename sig, bool arg>                               \\\r\nstruct NAME                                                                    \\\r\n<                                                                              \\\r\n  T,                                                                           \\\r\n  sig,                                                                         \\\r\n  std::integral_constant<                                                      \\\r\n      bool,                                                                    \\\r\n      mlpack::sfinae::SigCheck<sig, &T::template FUNC<arg>>::value>                     \\\r\n> : std::true_type {};\r\n```\r\n\r\nThen, I created an auxiliary struct for nicer signatures:\r\n\r\n```\r\ntemplate<typename T, bool UseWeights, typename ResponsesType, typename WeightVecType>\r\nstruct HasOptimizedBinarySplitFunctions\r\n{\r\n  static const bool value =\r\n      typename HasBinaryScanInitialize<T, void(T::*)(const ResponsesType&, const\r\nWeightVecType&, const size_t), UseWeights>::value &&\r\n      typename HasBinaryStep<T, void(T::*)(const ResponsesType&, const WeightVecType&,\r\nconst size_t), UseWeights>::value &&\r\n      HasBinaryGains<T, std::tuple<double, double>(T::*)()>::value;\r\n};\r\n```\r\n\r\nThen in the `enable_if<>` call, you can just use `HasOptimizedBinarySplitFunctions<...>::value`.\r\n\r\nBut, as I think about it more, I am not sure it's actually worth debugging the check for *all* three functions.  I think it's fine to say, if we find `BinaryGains()`, then that's good enough to attempt to compile the optimized version.  I picked `BinaryGains()` there because it does not have a template parameter, which means that we don't have the problem above.  So, if you change the definition of `value` in the auxiliary struct to just use `HasBinaryGains<T, std::tuple<double, double>(T::*)()>::value`, it should succeed.  I think that differs from yours in that it does not have `void` for the parameter, but I am not 100% sure whether that is necessary.\r\n\r\nAnyway, if you want to fight with the template metaprogramming more to check for all three, feel free---it could be an interesting adventure---but I think just checking for one is sufficient too. :)"", 'comment_created': datetime.datetime(2021, 7, 11, 0, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667424316, 'comment_body': '@rcurtin, It is still failing after removing HasBinaryScanInitialize and HasBinaryStep. The error is different this time. Take a look at this https://pastebin.com/gkvw3X9D.', 'comment_created': datetime.datetime(2021, 7, 11, 5, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 667495743, 'comment_body': 'What have you tried to debug it?', 'comment_created': datetime.datetime(2021, 7, 11, 15, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667497170, 'comment_body': 'Check the latest commit. I simply removed the unrequired checks.', 'comment_created': datetime.datetime(2021, 7, 11, 15, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 667501420, 'comment_body': ""I won't be able to work with this until tomorrow.  Do you think you can try various changes to see if they have any effect?  I was able to make the `BinaryGains` check work without problems.  Maybe removing `void` is what is needed?"", 'comment_created': datetime.datetime(2021, 7, 11, 15, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 667574163, 'comment_body': 'I tried all possible combinations --- removed void, moved enable_if to template parameters, tried some suggestions from StackOverflow, but none of them helped.', 'comment_created': datetime.datetime(2021, 7, 12, 1, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 668211053, 'comment_body': 'I think that this commit should help: https://gist.github.com/5dfb3fd62552aa4aeb731bd382e0c6cb\r\n\r\nI left a few other comments in the chat channel that should perhaps be helpful too:\r\n\r\n```\r\nI believe that the issue you are encountering is the same thing as reported here:\r\nhttps://stackoverflow.com/questions/13401716/selecting-a-member-function-using-different-enable-if-conditions\r\n\r\nbasically, SFINAE for the member function of BestBinaryNumericSplit doesn\'t work, because we aren\'t actually using any template parameters specific to that member function, but instead only specific to the class\r\nI am trying to think of a ""clean"" solution\r\n```', 'comment_created': datetime.datetime(2021, 7, 12, 19, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 668382233, 'comment_body': 'Thanks, @rcurtin! The fix worked like a charm :-D.', 'comment_created': datetime.datetime(2021, 7, 13, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}]","[{'commit_sha': '37f24d081f06cb51615873784fc5499b04d9edd8', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f58d1f9aca48cd97e17b2418d62b08cfca63db', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb893135a21e70ec02e90d3f3cc8e73420e87d1', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '928b7ef423a08a109a56d976bd36bee04750e6a8', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bcc5298797f3a9cdc16d86ff6162e9ae2b86a93', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd7df2505671d28981eaa6ce947a94cd71c5f765', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8452b593f3a6734fb7b6d71ffab8bc81b876950', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eba8c163b02951fab194a279c63d05aacf3912a', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf8c2f4635b2de3d299aad3c10ded4c9d6bff282', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9a0d4adad51a42388a11e66a944d4ec35eb82fe', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2ccc97a88fca7a65c74721db7af306058a4edb4', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27eb4ae265fd42f46524cb0205561168f2b75acf', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2582b94480539d1340f56287ff8d6eaa9d588f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7e6f960092b9f32f8ac42c5a0565a607b4b12ed', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd14ee71ba66215e71f5882ce40eb84ae9b0d6026', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5587ce6984716123d73ca12744ae2cba45734fa', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63e8882184df014e29618274c8c7909fb5031606', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18b264634cdf2d21f253946de4795525454889a6', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f1d2ab0cce734b8dc7d220c7b957fa3a2f895b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1039e91cec30f9c9cf67a0215192cbaa0249ae57', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02ed207dc79a55699a959df06b368fd5c24d706c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aefccf0452387097bf73f5e26cf8beb52abff196', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5fa333b7e682ad202d351b1a482c51c77707265', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3063144302b9ef3f0731c7834060a075e6e176ee', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba56d2b7831fbea439d2c4e96231f6f24dee673', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd368f5ba6b79c26372e951a8a9a831c6e96d0052', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a8f178356707a13cccab3bd3fe111987e1a1dd2', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ade939f5972f8f11eee9255da95ed1369d060fa', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4c3d668915a4f9d0224554627352f687dd24485', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '807072e4c6058024c3680e8352bd7e1b94244897', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75b6e4e1379ea393f127887faa5accd0a13b90f1', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d17e06c12bf18d88617e8d14503a6c84d392139', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef81b4ad9d029a3b5330bd760281554af9c7e7ec', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05729c4377cac70bc6b9eb7ae23266410cc4e356', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e59f1028bfe22b195fd62a4c08c0fb61525f517f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23b8f67b2a38baa0f801c48144f7b4415576cf35', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d966ce2e4661931c2ff5f8f64897d3046486fff', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c04c58a41534406c57fbcbd3f241da5ea353981', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6de9c22fdf5f2256177316095ad5232ab1021f48', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '793c3d28f6d1b6ff6fa010ebf9495bc4d0b4b523', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db06241b543e28bc51f5860baa779d23393b7a60', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e918b5c6d9f8ca45aa19e10bfe2ae253c23eefe2', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37fc03465117073d6d05cec07302401c2754b1c8', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '246d96d6e157d551845153d54a09192eb7fded6b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad144e12c575c4378238f5a19298727d5bd141ba', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb024601013cc8f2e477f013903de6fbf0f0f1c4', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f2d7342009c273e8499363f30ab48b666284328', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a767a89812bab3d5f4e151236da350c88d871e7d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe1f3570ff13c20aa2d27fe9dbfd8abe5690095f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee995a2110e4f8cdf68b46b5e91f3c8ffe46f22d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e05e8a266f4e70f8e3c43f5acb2f16a7a9c88854', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9efb2de4fcdf5e170c51dd7584006ab222651d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce23730409bd1873c1b19fd6196d089c3d2ceafd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffd7b8d17f39c8cca909eac147d99016fa62a5ed', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a52d894c53038380e46503b1ce1b660872e8751', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a546767cb79f8d8a2cc2e5f6a572013a4b55ea9', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2ead9eaa4d73cbd2348330f12f16cf6f09841d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90c7c1241cc359b7007371f87d29d85b169ed3c8', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2d9da5f6d01522280eda0d8b2c8a2d9c99f8568', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bbc27090e5dddef4122c271b7a0bd51295e1e7f', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a09d33e6c319432c223dfe8beca1b88f75dfcc4', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de0057138235e3346fd109a7c5eec0215352fe26', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa0582799b0db627603e5b18b14d8c1c3cf96919', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34871d0ede0c2e07df8c7cf95b1ee8c436a9016d', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86e16a0486cf18e707fee8447515aedcaad04bf5', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c64b887e4a57976c8f753948c5d353efd34efc80', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5007e3d62be82e040c7b1c7c9f11d6a67c745e77', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '212488ad0d84c504f1927dda292532cb8d7392a6', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fff314e535a43641e87ec666ebff2d7299372a7', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f7f4368b5b822dab5de1333386db348118ec5f3', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2794d98be19b37f2faf4eab822e896934ba43128', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3e378043c2426da0a7a23796f8c968508615ed7', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4352f27203270fb71b135cbbb890c75dc2b5c53', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc11edc88af0b7da3f4693e6fb1d70dd39ae9fbe', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5d2bd0e33c9da259c3821c09bf8ae8b814d6d5c', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40755d6389e01b821accccaf2eef7f61a9887fab', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fa49dc0d6903be9b2ec3d2068f19b376963234d', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c709a1f4846061d052307efde2e06c22c518ce9', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9242bfbb2fcf1c6f837e569eb8bae46dfee50e', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aab00bf4be81049399c8bddf2dffffa821641bee', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5dc5dacc7c2af66e41debb9b76e40cfd1ecf47c', 'committer_username': 'Aakash-kaushik', 'committer_name': 'Aakash kaushik', 'committer_email': 'kaushikaakash7539@gmail.com', 'commit_date': datetime.datetime(2018, 5, 18, 14, 3, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b0f609d9e711bd40754c8f4d018fa0cfbe9174', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46ea43a1dae7e67b270c71192af0c2b04d8822fe', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '118cc773474fadc0335c39d926a1d405433f5c24', 'committer_username': 'shrit', 'committer_name': 'Omar Shrit', 'committer_email': 'omar@shrit.me', 'commit_date': datetime.datetime(2015, 10, 8, 20, 52, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2edfb99e6deeb916977ea5424e8b75b740e736a', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d5d7c0a702c0f476ad397bd1c580173b1e6f6d7', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '551e3ee070b153b0eed6730c37a85c949a730415', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ccb67cd2679795582e0ddc57124b23ba2be87c5', 'committer_username': 'rcurtin', 'committer_name': 'Ryan Curtin', 'committer_email': 'ryan@ratml.org', 'commit_date': datetime.datetime(2012, 6, 13, 3, 23, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a49e1f125fbe115a245c4c581d0e016d6b1d3b1', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bed88e3aebfb67f143fbed00fb44275147c7c85', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a04ce6aa2ecf6c071c66eb509fedc9515a5af31', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d0eed676151d48db55fd50e3a568ddf0c89b61d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26bbd4161f3ac999bf7e4653fece8b7999f5637f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9bea11edec92158361738ea64d621ee7d709dc', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd503de74b8f27d8601efeceed11943766d025da3', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96df62013a0ab7ec2f82c8d2d387191deaa7a94f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90d5669656e7f8018dd6a4ff678a6a1a760d24bd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '987f456003d6da898f4cdac3fb1065ff18accbf2', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c4370632579e8629069c21683390a7b92bfee3d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33b4cba6e8a46c8421e095e6ea7fb3973e014f94', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d109e023945e1c6b6110902e70790c82bde6199', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c7cb59031617d65c04a4059d7e908329369c16', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad64ad07d717c2b2d19be7bac82be03a2329071b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac931da1c43103fa3f1be47b89ee0fcdc24c67a', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7645cfd35e5656e288b7239360666f394d06c3c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e44ae29279d26a408f8c9e42d6f5cf7be308251', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e0aa74ebeb1fcb1ad0c5692b9324ea5bcc684b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7966e8ec459734d77837be4f525e46b19b101fb9', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b6a8938ff62c43c2eb00660d0ac65ddba96cb37', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f03d02df85ac5c36130d95f93beaa6eb49e4c1d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b12d3f3fc380efd652b9f0b36b4318616b609177', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ce7d94e199a24151e66570c8efa0a00ef7b01b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9da580a51de429356112de85b39cd2704b1a2a7e', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5226dd9338b7372e7f589b14eee53d22856cd840', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ec8261de9dc7aedb4f2e4214cb62b1b2b3872cc', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c707efcaebdcc9937f84ae23bb331f1e812134c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '553343221d34639beaca06387aa203e0f157cb58', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44490ec29bb06074871810fe893d19ecd4c7fa4c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}]",Rishabh Garg,56191449,,User,,14,,80,60
688764687,Refactor DecisionTreeRegressor to support XGBoost.,"This PR is to refactor a few parts of the DecisionTreeRegressor to support the XGBoost algorithm. It should be merged only after #3011 is merged.

The following are the major refactorings to be done:-

- [x] Use instantiated `FitnessFunction` while training.
- [x] Move the `DecisionTreeRegressor::CalculatePrediction()` to `FitnessFunction::OutputLeafValue()`.",True,3014,https://api.github.com/repos/mlpack/mlpack/pulls/3014,https://github.com/mlpack/mlpack/pull/3014,closed,169,106,11,15,1,22,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2021-07-13 10:00:37+00:00,2021-07-28 16:59:34+00:00,1321137.0,"15 days, 6:58:57","[{'comment_id': 672366556, 'comment_body': '```suggestion\r\n      FitnessFunction& fitnessFunction);\r\n```\r\nWe should use a reference here, to avoid copying the given `FitnessFunction`.', 'comment_created': datetime.datetime(2021, 7, 19, 14, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672366831, 'comment_body': '```suggestion\r\n    FitnessFunction& fitnessFunction)\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 14, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672366993, 'comment_body': '```suggestion\r\n      FitnessFunction& fitnessFunction);\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 14, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672367149, 'comment_body': '```suggestion\r\n      FitnessFunction& fitnessFunction);\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 14, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672367291, 'comment_body': '```suggestion\r\n    FitnessFunction& fitnessFunction)\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 14, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672367425, 'comment_body': '```suggestion\r\n    FitnessFunction& fitnessFunction)\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 14, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672368318, 'comment_body': ""However here I think it's good to avoid using a reference because it implies various ownership issues.  The strategy you have here is fine, because the user can avoid a copy by doing `std::move(fitnessFunction)`, or, if they do want a copy, they can just pass `fitnessFunction`."", 'comment_created': datetime.datetime(2021, 7, 19, 14, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672369986, 'comment_body': ""You can leave these as `static` if they don't need any internal state. :+1:"", 'comment_created': datetime.datetime(2021, 7, 19, 14, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672371681, 'comment_body': 'It looks like this is the same implementation as for `MSEGain`.  To me, it seems like this is not fitness-function specific but is instead an orthogonal policy that is specific to regression trees.  Maybe it makes more sense to add an additional template parameter to `DecisionTreeRegressor` to control the strategy used to compute the output prediction value?', 'comment_created': datetime.datetime(2021, 7, 19, 14, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672371844, 'comment_body': '```suggestion\r\n      FitnessFunction& fitnessFunction,\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 14, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672371935, 'comment_body': '```suggestion\r\n    FitnessFunction& fitnessFunction,\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672373483, 'comment_body': ""If `Evaluate()` isn't static, then some of these changes shouldn't be needed. :+1:"", 'comment_created': datetime.datetime(2021, 7, 19, 14, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672374340, 'comment_body': 'This change will still be needed regardless of whether `Evaluate()` is `static`; but, do you think you can rename the object to `fitnessFunction` or `f` or something?  `Gain` does not follow the style guide since it starts with a capital letter. :)', 'comment_created': datetime.datetime(2021, 7, 19, 14, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672377080, 'comment_body': ""I read a bit more about it in #3003, and I see that `SSELoss` needs to do something completely different here.  So maybe a separate template parameter is infeasible, but perhaps the idea is worth considering?\r\n\r\nIn any case, if you do go with this approach, do you think you can add some better documentation to the implementation here?  People will probably look at this and MSEGain as examples if they want to implement a new loss function, and some clarity on what `OutputLeafValue()` is (and the fact that it's only needed for a regression loss) could be helpful.  I am not sure what the best place for the documentation is---here could be okay, but maybe at a higher level for `DecisionTreeRegressor` could work too."", 'comment_created': datetime.datetime(2021, 7, 19, 14, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 672403380, 'comment_body': ""Yes, I agree on making the documentation more comprehensive. But, I am not sure if it will be worth it to add another template parameter for it. It is true that this is the same only for regression tree FitnessFunctions but it will be literally different for each and every loss function in gradient boosting trees and it will unnecessarily complicate the code there.\r\n\r\nIf we really want to reduce code duplication, then we can have a base `RegressionGain` class and implement it there. But, at this moment, I think that we don't need that too either. Maybe we can deal with it in future."", 'comment_created': datetime.datetime(2021, 7, 19, 15, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 672404485, 'comment_body': 'Sure. I will fix it to adhere to the style guide 👍 ', 'comment_created': datetime.datetime(2021, 7, 19, 15, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 675870803, 'comment_body': 'Can you add documentation for the `fitnessFunction` parameter to the function documentation?  (This applies for the other functions where you added it too. :+1:)', 'comment_created': datetime.datetime(2021, 7, 23, 21, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 675871770, 'comment_body': ""Agreed---let's avoid the extra template parameter for now then. :+1:"", 'comment_created': datetime.datetime(2021, 7, 23, 21, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 675872088, 'comment_body': 'Was there a reason to change these from `static`?  I think they should work just fine as they were---let me know if I overlooked something.', 'comment_created': datetime.datetime(2021, 7, 23, 21, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 675992905, 'comment_body': ""I think we can remove this function and move its content to the overload just below it. Because we are using this function only in line https://github.com/RishabhGarg108/mlpack-1/blob/a4081bf0c8029f70b1a9d0a36851d3285fccd43d/src/mlpack/methods/decision_tree/mse_gain.hpp#L95.\r\n\r\nRegarding it being non-static, I kept it this way because the place at which this function is called ([here](https://github.com/RishabhGarg108/mlpack-1/blob/a4081bf0c8029f70b1a9d0a36851d3285fccd43d/src/mlpack/methods/decision_tree/decision_tree_regressor_impl.hpp#L625)), we are already using an instantiated `FitnessFunction`. So it won't matter if it is static or not.\r\n\r\nIf you like then I can make it static back again. No harm in that :) Let me know what do you think 👍 "", 'comment_created': datetime.datetime(2021, 7, 24, 12, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 676997626, 'comment_body': ""Yeah, you are right, it doesn't matter, but I do think it keeps the tests a bit simpler.  So I would suggest changing it, but, in the end, up to you. :+1:"", 'comment_created': datetime.datetime(2021, 7, 26, 22, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '0858305c77b7fda169e3c51d8c518afdd3672aec', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78845cadf5fa0161d929b62a33661eb72cbadb04', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab5f440acc14ab8a545173a6b6fc283757739ff5', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52f4886efc9c883937fb03eb6ce2c2e24672dae9', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f43a51b58d0af2c596c3e1e12f74f6b0237f72e1', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '708eb5cfadf14e06bf7b1d2c3c168121b81225a7', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071f2233462df12f2d67f7ea032ecfdc642203aa', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cfe63adf217d77ae0a3037b0ce5da8601b649cd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd0d6c8c58917fc47ace2b3ff8eb65731cfae2e7', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89c3d85f6e35ccf0f9f0fde699486cd67dc1f658', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40048285568bf51ffcc69a6afa389dacff0d9faa', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a771b4e5a3b821dc25c99bb0c9b1f38145f941d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4081bf0c8029f70b1a9d0a36851d3285fccd43d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1db1c7e64dae24a2f9c7f92b6f4db5b5aac71eae', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91c609af89ef313a92dcfb724e72cb883f2b1f2e', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}]",Rishabh Garg,56191449,,User,,14,,80,60
680976420,SSE Loss for XGBoost,"This PR attempts to add SSE (Sum of Squared Errors) Loss function for xgboost. The list of methods implemented as of now is:-
1. InitialPrediction - Gives the initial constant prediction used in boosting.
2. Gradients - Calculates the first-order gradients of the loss function. (Both for scalars and vectors.)
3. Hessians - Calculates the second-order gradients of the loss function. (Both for scalars and vectors.)
4. Residuals - Calculates the pseudo residuals of the predictions.

Methods yet to be implemented:-
1. EvaluateGain - Calculates gain for splitting the tree.
2. OutputValue - Calculates the output value for the leaves of the decision tree.

The implementation which I will be doing in this PR will be pretty simple and without any optimizations. Gradually we will keep iterating over things and improving them one at a time.

Also, the methods which are implemented or yet to be implemented (mentioned above) are the basic ones that will be required very frequently. We will keep adding more methods if required later.

CC - @gmanlan @rcurtin",True,3003,https://api.github.com/repos/mlpack/mlpack/pulls/3003,https://github.com/mlpack/mlpack/pull/3003,closed,206,0,4,30,8,23,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2021-06-30 15:22:38+00:00,2021-07-26 12:32:07+00:00,2236169.0,"25 days, 21:09:29","[{'comment_id': 662677626, 'comment_body': ""I think you could just use `loss_functions/sse_loss.hpp` in the parent directory's `CMakeLists.txt`, and then you don't need this file. :+1:"", 'comment_created': datetime.datetime(2021, 7, 2, 1, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 662678366, 'comment_body': 'I *think* (but am not sure) that you can use `VecType::is_row || VecType::is_col` here as the condition. :+1:', 'comment_created': datetime.datetime(2021, 7, 2, 1, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 662678625, 'comment_body': 'If that is always true, why not just inline `-Gradients()` wherever you use it?  That seems like it could simplify the code somewhat, and reduce the number of functions that need to be implemented for the loss. :+1:', 'comment_created': datetime.datetime(2021, 7, 2, 1, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 662679096, 'comment_body': 'This computes the prediction value for a leaf in a regression tree, right?  Do we use a majority vote for classification, or some other rule?', 'comment_created': datetime.datetime(2021, 7, 2, 1, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 662679326, 'comment_body': ""It wouldn't hurt to add some sanity checks to ensure that, e.g., empty input doesn't crash. :)"", 'comment_created': datetime.datetime(2021, 7, 2, 1, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 662680432, 'comment_body': ""If I understand the algorithm correctly, I guess this is really the `FitnessFunction` that we will use to evaluate splits.  Maybe we should implement the same API, such that we can use this class as the `FitnessFunction`?  I could see this working if, e.g., we passed a *two*-dimensional matrix (instead of a one-dimensional vector) to the fitness function for the responses/labels, where the two dimensions were the gradients and hessians, respectively.  I believe that this could work since the fitness functions' `Evaluate()` method should be templatized and able to take a matrix instead of a vector.  (If that is not true, it seems like it could be a simple refactoring to make that work.)"", 'comment_created': datetime.datetime(2021, 7, 2, 1, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 662737027, 'comment_body': 'Great! I will apply this change.', 'comment_created': datetime.datetime(2021, 7, 2, 5, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 662737369, 'comment_body': 'I will give it a shot. If it works, then it will be nice. :)', 'comment_created': datetime.datetime(2021, 7, 2, 5, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 662745232, 'comment_body': ""If having so many function calls like this one doesn't have any time cost, then I think that doing it this way will be better. The reason is that from where I see it, all the other operations of a loss function can be expressed in terms of gradients and hessians. So, we can have a base loss function class and all loss functions inherit from it. Then we will only need to implement the gradient and hessian functions for each loss function. \r\n\r\nMaybe we can make the gradient function an inline function? These are just possibilities and I am not exactly sure if it will be the best way to go or not."", 'comment_created': datetime.datetime(2021, 7, 2, 5, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 662751263, 'comment_body': 'In the case of XGBoost, regardless of whether we are doing classification or regression, the weak learner is a regression tree. The majority vote kind of thing is done in the gradient boosting machine.\r\n\r\nTake the example of binary classification. The weak learner decision tree predicts the probability of a point belonging to class 1. Then the XGBoost class will convert that probability into a class label. Similarly, for multi-class classification, we have to use one-v-one or one-v-rest strategies.', 'comment_created': datetime.datetime(2021, 7, 2, 5, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 662751312, 'comment_body': 'Yeah! Will add the checks 👍 ', 'comment_created': datetime.datetime(2021, 7, 2, 5, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 662764927, 'comment_body': 'Yeah! This could work. The Evaluate() method is already templatized so it should work without any refactoring. I will make the API consistent with the existing FitnessFunction classes.', 'comment_created': datetime.datetime(2021, 7, 2, 6, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 663519173, 'comment_body': ""Can you clarify a bit about how or where this will be used?  I'm not sure I understand completely."", 'comment_created': datetime.datetime(2021, 7, 4, 15, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 663519633, 'comment_body': ""Do we need an overload for scalars?  The reason that I ask is that it seems like `SSELoss` is implementing a set of methods that could be implemented by a different type of loss too.  That is, `SSELoss` is a template policy meant to be used with a gradient boosting class, and so if a user (or a maintainer) wanted to implement a new type of loss, they would need to implement the same functions that `SSELoss` implements.  That process is much easier when we can reduce the number of functions that need to be implemented to a minimum; so, if a scalar `Hessians()` overload isn't *really* needed and the result could be computed using the regular `Hessians()` overload, I might suggest using that one instead.\r\n\r\nBut, I have not seen the way that you are intending to use this function, so my comment may be misguided. :)"", 'comment_created': datetime.datetime(2021, 7, 4, 15, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 663519748, 'comment_body': 'Ok, I guess in this case, I am not really sure where this function will be used.  Is it the objective value that we are minimizing, to be computed after each iteration to see if we have converged?', 'comment_created': datetime.datetime(2021, 7, 4, 15, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 663530819, 'comment_body': 'Okay, let me go to the basics. In gradient boosting, we start with a constant prediction for all the data points. Then we calculate the residuals (difference between true and predicted values) and then we train multiple trees to fit those residuals.\r\n\r\nSo to begin with some residuals, we need some initial prediction and what value is given by this function. If you read any paper on gradient boosting, then this initial prediction is calculated by equating the derivative of loss function equal to zero.\r\n\r\nI hope I answered your question. :)', 'comment_created': datetime.datetime(2021, 7, 4, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 663531752, 'comment_body': ""I completely agree with your point. To be honest, I myself do not have absolute clarity about what functions we will be needing or not. I *think* that we might be needing this overload, so I thought I will directly use it when I will need it. But I might be wrong and we might not need it at all.\r\n\r\nThere are many things that are specific to loss functions and tasks that they can do. It's a little bit fuzzy area. This might become clearer when we are doing the splitting strategy.\r\n\r\nI think maybe we can remove the unnecessary functions later?"", 'comment_created': datetime.datetime(2021, 7, 4, 17, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 663721888, 'comment_body': '@rcurtin I just now realized that we also need regularization parameters lambda and alpha for gain computation in XGBoost. But those parameters are not needed in the normal decision tree. So will it be okay to add these parameters to existing FitnessFunctions for making them consistent?', 'comment_created': datetime.datetime(2021, 7, 5, 8, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 664985301, 'comment_body': 'Thanks for the clarification. :+1:', 'comment_created': datetime.datetime(2021, 7, 7, 1, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 664985592, 'comment_body': ""Sure, that sounds good, we just need to remember to go back once everything is working and think about whether we chose a good way to do it, or if the abstraction could be improved. :)  (But, you are right, it is very hard to predict the exact right interface to provide, and we may not get it right the first time.  That's okay!)"", 'comment_created': datetime.datetime(2021, 7, 7, 1, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 670043670, 'comment_body': '```suggestion\r\n    return -arma::accu(gradients) / (arma::accu(hessians) + lambda);\r\n```\r\nTiny style fix. :)', 'comment_created': datetime.datetime(2021, 7, 15, 0, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 670075745, 'comment_body': 'Reference - https://github.com/dmlc/xgboost/blob/8e8232fb4cceacb6bb65f61362dd2ed0ad5c3277/src/tree/param.h#L253\r\n\r\nThe idea here is to shrink the output value closer to zero using the L1 parameter. That is why there are these conditions.', 'comment_created': datetime.datetime(2021, 7, 15, 2, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 675290145, 'comment_body': '```suggestion\r\n  SSELoss() : alpha(0), lambda(0) { /* Nothing to do. */}\r\n```\r\nTiny style fix. :)', 'comment_created': datetime.datetime(2021, 7, 23, 3, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '873b35e37f38d1d451a8d790956848213a8bc3b9', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9cba5a179a82759238aa47782a72feaacb6da45', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b073f3ee7f876580f92e2859b17262a7802dbe', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b80ecf2e958d472a0b507632a8160683296a8ba4', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61e88e6b3c914807bf23da8e39d239f9102364dd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093c4433f13d54718e893ee3fc81e3ec0f1bdc5f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e617bca913076dbbe0948aa1b5d2a7b5e0d448', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f974f4e95ea48b7d1aebe6d5192e1a60f6b8b40f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44f76f0c96d98a05643badf36a05508bc83ce0ff', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b81c84c09389fc1d7c6f8d398c09f6b27c785f0a', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd082f9a866fe74f992e9ec7d8612118cc9274907', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9938ee51fdda645a8c2d0d39422077dc0be5e0', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25f8f47cb5063120259f390dfb7b4b964eb030dc', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3d65e857123870f74fece6747ec5dfedf2910ea', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '154768851a848d5ceb6927d96c7f37346ddaaa69', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1edb432b894526dac4530af45bdfb74a9f3fe45', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a187c41cd63b21dd952ff6cadc8080e7e445dcb', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3769b67999b9016f60f6c4e3fcb987aae66a160', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537e3ca44791c17cab30cfda6f1ee6ba6db9d34a', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83cca54140750bcaef0274f0994f466c8fd5f3b8', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5fffe3c0bd629e95dd211678e28a6bbb9439ddd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b34433e050fd6d70aa4f572566130fcb364e9a2', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8de86b095d6af96e506ae3ee52dc1cd01430e63', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8699af16a9375eea769b2521d05cf2e54491d3', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a7c16feb6e5bc3e5eba8249b1294a0fa161d921', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d685cd2e19705d4b44d8a455fdfdddf9799ef2', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d68b3481baace687859fe8a7e4025e5eaa5f812', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2dedaa8aca8e7a6fb65ba5a1dbb9b876516147f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8df808bed3c27fa881d87e0783f9a7367280f00f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46233af41be7be12b75c17f124b39f07dce59f96', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}]",Rishabh Garg,56191449,,User,,14,,80,60
696048745,Add XGBExactNumericSplit.,"This PR adds the ""Exact Numeric Splitter"" for XGBoost. This should be merged after #3003.

CC - @rcurtin @gmanlan",False,3022,https://api.github.com/repos/mlpack/mlpack/pulls/3022,https://github.com/mlpack/mlpack/pull/3022,closed,382,27,12,34,16,32,3,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}]",2021-07-23 16:05:03+00:00,2021-10-17 01:37:08+00:00,7378325.0,"85 days, 9:32:05","[{'comment_id': 677000296, 'comment_body': 'Just checking, I think the intention is to do this in a later PR, not this one?', 'comment_created': datetime.datetime(2021, 7, 26, 23, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 677000551, 'comment_body': '```suggestion\r\n    if (endLoop)\r\n      break;\r\n```\r\n(Tiny style suggestion.)', 'comment_created': datetime.datetime(2021, 7, 26, 23, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 677009512, 'comment_body': ""Shouldn't this be called `BinaryGains()`?  (I am not 100% sure, I think it should be though.)"", 'comment_created': datetime.datetime(2021, 7, 26, 23, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 677009711, 'comment_body': 'Maybe it is better to adapt `BinaryStep()` to return a `bool` if we should terminate early?  However, I think it may be better to try and do this check in the `XGBExactNumericSplit` class.', 'comment_created': datetime.datetime(2021, 7, 26, 23, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 677010914, 'comment_body': 'I think maybe it might be better to encode the `minChildWeight` condition as part of the `XGBExactNumericSplit` class.', 'comment_created': datetime.datetime(2021, 7, 26, 23, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 677071715, 'comment_body': 'Yeah, it should be called `BinaryGains()` if you are thinking about making it similar to `MSEGain`, but I thought that we are simply returning the gain of the split so I guessed naming it `Evaluate()` will make more sense. In `MSEGain::BinaryGains()` we were returning gains of both left and right child so we were obligated to use the word ""binary"" there.\r\n\r\nBut now I am thinking that we have other functions `BinaryStep()` and `BinaryScanInitialize()` so it would also make sense to name it `BinaryGains()`. I think I will change it to `BinaryGain()`. :)', 'comment_created': datetime.datetime(2021, 7, 27, 2, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 677071935, 'comment_body': 'Yup. This would be much cleaner. Thanks :)', 'comment_created': datetime.datetime(2021, 7, 27, 2, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 677073521, 'comment_body': ""For doing that, we will have to move `gLeft`, `gRight`, `hLeft`, `hRight` and `minChildWeight` to the `XGBExactNumericSplit` class. We can't move `minChildWeight` there because there is no way to store it as we are not instantiating `NumericSplit` classes.\r\n\r\nI know it makes more sense to have the condition within the loop itself, but I couldn't think of a cleaner way of doing it. Do you have something in your mind?"", 'comment_created': datetime.datetime(2021, 7, 27, 2, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 677083012, 'comment_body': 'Yes. It is for a future PR. :)', 'comment_created': datetime.datetime(2021, 7, 27, 3, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 680419610, 'comment_body': ""Can you add some comments for this member?  People will look at classes like this as an example, so it's nice to point out what the member is and why it's there.  Here's a suggestion:\r\n\r\n```suggestion\r\n  /**\r\n   * For mean absolute deviation, the best possible gain of any set is 0.\r\n   */\r\n  static const bool BestGainIsZero = true;\r\n```\r\n\r\nI also suggested using a capital letter for `BestGainIsZero`, the same way that tree traits do (see `src/mlpack/core/tree/tree_traits.hpp`). :+1:"", 'comment_created': datetime.datetime(2021, 7, 31, 22, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680419683, 'comment_body': ""Can you make the name of the function match the style guide?  I'd also suggest something just a little longer... `SortGradientsAndHessians()`?"", 'comment_created': datetime.datetime(2021, 7, 31, 22, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680419784, 'comment_body': ""It's possible this could be made faster via a one-liner:\r\n\r\n```\r\nsortedGradients = gradients[sortedIndices];\r\nsortedHessians = hessians[sortedIndices];\r\n```\r\n\r\nBut, that is so simple that perhaps it's better to just inline that where you need it instead of having this function.  Your call. :)"", 'comment_created': datetime.datetime(2021, 7, 31, 23, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680419822, 'comment_body': 'Ahh, I overlooked that.  But, note that the API you are using here is different than what we came up with before for `BinaryScanInitialize()` and `BinaryStep()` (now they return `size_t` and `bool`, respectively).  I think that change is fine, but can you also update the other loss functions and `BestBinaryNumericSplit` accordingly?', 'comment_created': datetime.datetime(2021, 7, 31, 23, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680420032, 'comment_body': ""Shouldn't this return `std::tuple<double, double>`?"", 'comment_created': datetime.datetime(2021, 7, 31, 23, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680420180, 'comment_body': ""Do we want to require that loss functions used with `XGBExactNumericSplit` implement the binary splitting strategy?  That's okay with me, but that is something that we should document.  Alternately, you could add a (much slower) overload like in `BestBinaryNumericSplit`."", 'comment_created': datetime.datetime(2021, 7, 31, 23, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680420312, 'comment_body': 'Should we have a `minimumLeafSize` parameter here?  It could operate exactly the same as `BestBinaryNumericSplit` and it seems like it would be an easy change.', 'comment_created': datetime.datetime(2021, 7, 31, 23, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680420576, 'comment_body': 'We could add this check to the classification decision tree too.  It might be useful just for uniformity between regression and classification loss functions. :+1:', 'comment_created': datetime.datetime(2021, 7, 31, 23, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680461388, 'comment_body': ""We can't do that inline, because `gradients` and `hessians` not accessible from outside of `LossFunction`. I can make the function itself an `inline` function."", 'comment_created': datetime.datetime(2021, 8, 1, 6, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 680462071, 'comment_body': ""It is not a part of xgboost algorithm and I am afraid people might get confused because we already have `minChildWeight` which is doing the exact same thing. Moreover, I think `minChildWeight` is a more general version of what `minimumLeafSize` does. So, I would suggest it will be best if we don't use that.\r\n\r\nPlease let me know if I overlooked something. 👍 "", 'comment_created': datetime.datetime(2021, 8, 1, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 680462151, 'comment_body': 'Agreed. I will do that 👍 ', 'comment_created': datetime.datetime(2021, 8, 1, 6, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 680464607, 'comment_body': ""If we stick to the interface we had in `BestBinaryNumericSplit`, then yes, it should return a `std::tuple`. As you saw that there are minor changes in the signatures of `BinaryScanInitialize` and `BinaryStep` too. I did this so that the code here looks a bit cleaner.\r\n\r\n> I think that change is fine, but can you also update the other loss functions and BestBinaryNumericSplit accordingly?\r\n\r\nI am wondering why do we actually need to make both of them look exactly the same? The reason I did those checks in those functions was because I can't access `minChildWeight` from outside. If that were the case, then I would have definitely done that within the splitting strategy class. If we try to make these similar, then we have to do these checks inside the functions, but personally, I think it makes more sense to have them within the loop itself because the checks are a part of the splitting strategy and not the LossFunction or Fitnessfunction. I had to do that inside LossFunction here because I had no other choice than that.\r\n\r\nLet me know if I understood you correctly. (I am having a feeling that you are trying to say something else and I have replied something else) :)"", 'comment_created': datetime.datetime(2021, 8, 1, 7, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 680527066, 'comment_body': 'Do you mean that this function is called from `XGBExactNumericSplit` and not internally from `SSELoss`?  I disagree with that design: this now means there is another point of linkage between `XGBExactNumericSplit` and `SSELoss`, and another function that someone would need to implement in order to implement a new loss function.\r\n\r\nAre you really sure this is necessary?  Can we not have higher levels provide a pre-sorted set of gradients and hessians to `BinaryScanInitialize()` or `Evaluate()`?', 'comment_created': datetime.datetime(2021, 8, 1, 15, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680528158, 'comment_body': ""The purpose of an abstraction like we are using here is to logically separate two concepts by means of a pre-defined interface.  That interface, in this case, is the functions `BinaryScanInitialize()`, `BinaryStep()`, and `BinaryGains()` (and their signatures).  If we have a collection of gain functions that implement *similar* but not *identical* interfaces, then we cannot plug and play different losses.\r\n\r\nThings are a little bit different because we are using C++ templates, but for the sake of discussion, imagine we were using inheritance: we would define a base `Gain` class, and then overload the various methods in the children.  This way, the thing that used the gain (i.e. `XGBExactNumericSplit`, `BestBinaryNumericSplit`, etc.) could just call the functions defined in the base `Gain` class, regardless of the true derived type of the gain being used.\r\n\r\nWe should work very hard to make clean abstractions, as that makes later extension easy.  It also makes testing easier, and helps make the code easier to approach and understand because there are fewer linkages between sections of code.\r\n\r\nI want it to be possible to use `SSELoss` with `BestBinaryNumericSplit`; and similar, I want it to be possible to use `MSEGain` with `XGBExactNumericSplit`.  If we need to change the signatures of the functions involved with the abstraction, that's okay, but we need to make sure things are sufficiently general.\r\n\r\nIn the case of `minChildWeight`, this seems very specific to `SSELoss` and I think I have to agree that we can only realistically check that inside of `SSELoss` itself.  Otherwise we would have code specific to `SSELoss` inside of `XGBExactNumericSplit`."", 'comment_created': datetime.datetime(2021, 8, 1, 15, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680528234, 'comment_body': 'I just noticed, we call it `MADGain` and `MSEGain`, but `SSELoss`.  Should we call it `SSEGain` instead?', 'comment_created': datetime.datetime(2021, 8, 1, 15, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680528621, 'comment_body': 'Let me know if there are any ""problematic"" linkages between `SSELoss` and `XGBExactNumericSplit` that seem hard to overcome.  It should definitely be possible, but sometimes it can be hard to figure out exactly how to separate things cleanly. :)', 'comment_created': datetime.datetime(2021, 8, 1, 15, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680538761, 'comment_body': ""I am not sure if we can do that. The reason is that we need to sort the gradients again and again for every split because we are sorting them based on the sorted order of the data. So, we have to sort them each time. Now, we have to sort them before calling `BinaryScanInitialize()` because of [this](https://github.com/RishabhGarg108/mlpack-1/blob/83ee7b1dc954cb63a936e9d7e0f4f54b77f3e718/src/mlpack/methods/xgboost/xgb_exact_numeric_split_impl.hpp#L44) check.\r\n\r\nThus it can't be possible as long as we are storing gradients in the `SSELoss`. Now one way we can do is by having a `BaseLoss` class and implement it there and then all the loss functions can inherit from it. This will reduce the code significantly because if you will take a closer look then you will see that there is nothing within the `BinaryScanInitialize()`, `BinaryStep()` and `BinaryGains()` which is specific to `SSELoss`. We can also move `OutputValue()` to the base class. The reason that these four functions are independent of the choice of loss function because all we are doing is working with gradients and hessians in these. So, they will always be the same for all loss functions.\r\n\r\nDo you think this will be a good idea? It will definitely reduce the number of functions that needs to be implemented for sure."", 'comment_created': datetime.datetime(2021, 8, 1, 17, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 680541176, 'comment_body': ""Why don't we represent the gradients and hessians as part of the responses?  That general idea should be adaptable to solve the issue.  I thought we had discussed this concept before, so hopefully the idea should be familiar.\r\n\r\nLet us not have a base class for the losses.  Templates don't necessarily require a base class; we just need to be careful about the signatures of everything we are implementing."", 'comment_created': datetime.datetime(2021, 8, 1, 17, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680542527, 'comment_body': 'Thanks for the comprehensive write-up. I too agree that we need to make the interfaces as general as possible. But, I have one question.\r\n\r\n> I want it to be possible to use SSELoss with BestBinaryNumericSplit; and similar, I want it to be possible to use MSEGain with XGBExactNumericSplit\r\n\r\nWhy do we need to make this possible in the first place? I mean `SSELoss` has a regularized objective, have some hyperparameters which are specific only to xgboost and calculates gain & output values using second-order taylor expansion. One can never use standard gain computation classes that are built for `BestBinaryNumericSplit` in `XGBExactNumericSplit` because it won\'t meet it\'s requirements. Now if we talk the other way round i.e. using `SSELoss` in `BestBinaryNumericSplit`, we actually don\'t have the appropriate data members stored within the `SSELoss` class thus we would need to add some additional data members which might not always be needed.\r\n\r\nThe point I am trying to make is that `SSELoss` is fundamentally different in the way it works. Though on the higher level it may seem that at the end of the day it is just calculating gain and output values just like any other gain function we have for decision trees, but the internal workings are very different. I would even say that it would be logically wrong to use the `SSELoss` function anywhere other than any ""tree boosting"" method.\r\n\r\n> Let me know if there are any ""problematic"" linkages between SSELoss and XGBExactNumericSplit that seem hard to overcome.\r\n\r\nI agree with that. I can try to decrease the interdependence of `XGBExactNumericSplit` and `SSELoss` so that we can better follow the policy-based design. I will try to look for some viable options for this :)\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 1, 17, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 680543025, 'comment_body': 'I used ""Loss"" because everywhere in the boosting literatures (the ones which I have read) they use the term ""loss function"". Now, calculating gain is one of the things that this loss function do, but it has other things too like residuals, gradients and hessians. So, I thought we can call it `SSELoss`.\r\n\r\nDo you think my reasoning for the nomenclature is sound?', 'comment_created': datetime.datetime(2021, 8, 1, 17, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 680543483, 'comment_body': "">> I want it to be possible to use SSELoss with BestBinaryNumericSplit; and similar, I want it to be possible to use MSEGain with XGBExactNumericSplit\r\n>\r\n> Why do we need to make this possible in the first place? \r\n\r\nFor the sake of generality---from a conceptual level, there is actually no reason why I couldn't use `SSELoss` with `BestBinaryNumericSplit` or any other splitting strategy.  The splitting strategy is independent of the loss function used, regardless of whether we are talking about XGBoost or not.  In fact, when I look through the `XGBExactNumericSplit` class, I think that it is actually unnecessary: all `XGBExactNumericSplit` is doing (as far as I can tell but it's possible I missed a detail) is finding the best binary split.  So, if all of the details about gradients and hessians (which are specific to the loss function, not the splitting strategy) are properly encapsulated inside of `SSELoss`, then we can just use `BestBinaryNumericSplit` directly and it will do the same thing."", 'comment_created': datetime.datetime(2021, 8, 1, 17, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680543633, 'comment_body': 'In general, ""gain"" is something that is maximized; ""loss"" is something that is minimized.  Given that we are maximizing, it would make more sense to call it `SSEGain`, in my opinion.  You could add a comment to the class pointing out that we\'ve called it that because our implementation maximizes, instead of minimizes, but honestly it\'s such a simple mathematical conversion that I doubt anyone would get seriously confused over it.  Some papers talk about gain, some talk about loss, but the two concepts are very related.', 'comment_created': datetime.datetime(2021, 8, 1, 17, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 683435876, 'comment_body': ""Since `weights` is ignored, should we issue a `static_assert` error or something if `UseWeights` is true since `SSELoss` doesn't support it?"", 'comment_created': datetime.datetime(2021, 8, 5, 13, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}]","[{'commit_sha': '6b0d743473045622305e885b0ab81e7dc151fe80', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '005a53741d74c2dd65bae134913d212a20c231c9', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e804149dc2d10867d5989fdc17e0ae32c38a26dd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9684f82c692b95dfd443d222bd4222187b5bfd83', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '851893729a0cddca2613a31c2551aa43863a3f9e', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1121321a89bd904df7f56d8175ab9ae9bf1d1640', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846664c26625da07549f17cc328901723915c05e', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '733b85eaf3dbadd40820d798bf2cd20b34f3fdcd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '321741e54f98d744bc122b395a7b3c055e413154', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c34ad8be153b878b460780c517375ce5b1296cb', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7340acfa7776144e1034a7a657dfd86f575c4153', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f803d306a1a20e26f4f03eb3d6134a90e0c1a7b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a6d4d429ffa319d9bb277bef5310303be093481', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d21029c8ebc536a53064231c713fe1665f187cd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fa7e7c81b01ecd985e6ab52bd0c1f0a70d63f90', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fe8da19fcbae7a0dd71bd517dfb3c3d2f7ee06d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acda8a79b7aaff94379c3b3aa9dc7cdb4d8a3580', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0ac704593da08d2094aed480cf4813ec7f762d0', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f7bb07a61528dbd2f6c449b115361971bbe9a2f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a59521bc1f5b34f61ad719ab6cabdff117d16005', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a0cd48a2059780b21b4a479636e94dc0e2826ef', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd71e890bbcbdf35272ac2886ac3f4ce340d4aa', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd96ec4dccc8134ab4ec0def7f8bf46e98a541f82', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5bfecdd99cc2d759c5c0005d8f037b09209f81d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741d799c4b408ad6a86f7a65e07eb51125ecafe8', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4720efc1bbf12ce0bb4b02d0d9aa18575cf0722f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb78ef65d1447f2d04c33e6cb912f5011c8a53c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83ee7b1dc954cb63a936e9d7e0f4f54b77f3e718', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad7f22d08e3b2716e4f306ab884d046b1852d425', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7850018d3cf1d40d4e47daa674921084a0ce7d1c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47764370cf74fa70be04d774b936e31d7a912dac', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad7edfd16cc7ff62ff6c22b19fc4f1ca601213f8', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba1e334ef668ffe8aa3225635eb18420168ce0d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc9f7611031b49405cda72d87ba0f57cbcdacda', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}]",Rishabh Garg,56191449,,User,,14,,80,60
699454465,[WIP] Add XGBoostTreeRegressor.,"This PR adds the xgboost tree regressor algorithm.

CC: @rcurtin @gmanlan ",False,3025,https://api.github.com/repos/mlpack/mlpack/pulls/3025,https://github.com/mlpack/mlpack/pull/3025,closed,950,28,13,47,7,6,1,0,[{'name': 's: stale'}],2021-07-29 11:39:45+00:00,2021-10-16 09:37:08+00:00,6818243.0,"78 days, 21:57:23","[{'comment_id': 680420774, 'comment_body': 'I think the usual signature of `Predict()` is `void Predict(const MatType& data, arma::rowvec& predictions);`. :+1:', 'comment_created': datetime.datetime(2021, 7, 31, 23, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680420781, 'comment_body': 'Small comment, but this should return `typename VecType::elem_type`, which may not always be `double`. :)', 'comment_created': datetime.datetime(2021, 7, 31, 23, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680421041, 'comment_body': 'Should we allow specifying the categorical split type here?  Below I see you are always using `AllCategoricalSplit`, which I *think* will work, but it could be nice to have it user-specifiable too.', 'comment_created': datetime.datetime(2021, 7, 31, 23, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680421207, 'comment_body': 'If you want to support categoricals, then I think all you would need to do is add another overload that takes a `data::DatasetInfo&` too.  I guess `SSELoss` would need some minor adaptation for that case, with a ""regular"" `Evaluate()` implementation.  (I think that should be pretty easy.)', 'comment_created': datetime.datetime(2021, 7, 31, 23, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 680459246, 'comment_body': ""Actually, I did think about it. I have made the API considering that we will be having support for categorical features too in the future. When we add it in future, all we will need is to add one constructor, one public Train overload and a template parameter for it.\r\n\r\nAs of now, I didn't add a template parameter for it because we do not support it yet and it will cause unnecessary confusion."", 'comment_created': datetime.datetime(2021, 8, 1, 6, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}, {'comment_id': 680460693, 'comment_body': ""To be honest, I haven't given proper thought to it. I think we will also require a splitting strategy too that calculates and the sum of gradients and hessians accordingly (not 100% sure though). So, I would suggest we can leave it at this point. As I said in the previous comment, it won't be a big deal as I have considered it already.\r\n\r\nOne more thing, I haven't yet looked at how xgboost is doing it. They still have many open issues and PRs on it which I haven't had the chance to go through, but I would say we can at least take a look at them before just to be sure we are not overlooking something.\r\n\r\nLet me know what you think. :)"", 'comment_created': datetime.datetime(2021, 8, 1, 6, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RishabhGarg108', 'type': 'User'}]","[{'commit_sha': '6b0d743473045622305e885b0ab81e7dc151fe80', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '005a53741d74c2dd65bae134913d212a20c231c9', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e804149dc2d10867d5989fdc17e0ae32c38a26dd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9684f82c692b95dfd443d222bd4222187b5bfd83', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '851893729a0cddca2613a31c2551aa43863a3f9e', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1121321a89bd904df7f56d8175ab9ae9bf1d1640', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846664c26625da07549f17cc328901723915c05e', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '733b85eaf3dbadd40820d798bf2cd20b34f3fdcd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '321741e54f98d744bc122b395a7b3c055e413154', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c34ad8be153b878b460780c517375ce5b1296cb', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7340acfa7776144e1034a7a657dfd86f575c4153', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f803d306a1a20e26f4f03eb3d6134a90e0c1a7b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a6d4d429ffa319d9bb277bef5310303be093481', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d21029c8ebc536a53064231c713fe1665f187cd', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fa7e7c81b01ecd985e6ab52bd0c1f0a70d63f90', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fe8da19fcbae7a0dd71bd517dfb3c3d2f7ee06d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acda8a79b7aaff94379c3b3aa9dc7cdb4d8a3580', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0ac704593da08d2094aed480cf4813ec7f762d0', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f7bb07a61528dbd2f6c449b115361971bbe9a2f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a59521bc1f5b34f61ad719ab6cabdff117d16005', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a0cd48a2059780b21b4a479636e94dc0e2826ef', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd71e890bbcbdf35272ac2886ac3f4ce340d4aa', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd96ec4dccc8134ab4ec0def7f8bf46e98a541f82', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5bfecdd99cc2d759c5c0005d8f037b09209f81d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741d799c4b408ad6a86f7a65e07eb51125ecafe8', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4720efc1bbf12ce0bb4b02d0d9aa18575cf0722f', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb78ef65d1447f2d04c33e6cb912f5011c8a53c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7873eb298025771b316e105516cf7fa0daf74dde', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83ee7b1dc954cb63a936e9d7e0f4f54b77f3e718', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7132985ac7ca6690de274ab2e7c0b45a3d4d3fa', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9298ef94f5bf2850e7fd297dab5e8454a563fee9', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff8c7d6e8ae50a50a54dc030db2a8fdef26484f1', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c1fa0bf9706e7d152e5d0352393e3382e1f203e', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4425c20a8b5b7056c601fa99272c6f58170b74c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe4dc1f1572b97b6beecc5b966df5dea09d3c4a0', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'baa2f92810f85804ea4ef3eddd9546361ecd3001', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6663fe1a5eef5a8412d334feedcf92d7f3de5ad6', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ea2f9bd805cbab59d1ef4b10190ec07dfdd3379', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd664f5981b27fb9f07bbcf333eeb23457f24706c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb1265e6ba060bdc72be3314ac01cbb882d962cb', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5c62e326fa59c9aa397edf620aa70f49828c2b', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72900683e3bd6bcbd8f8e978eac0b8c26fb27154', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d57e0b9a478e07e701c3a63c9eb879dcf43433', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd47d6d7a1bc42974f779ea7437104d1e22b1dc5c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bdb15a5a4da5b94dfbbba4b54e621af9047a83c', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e50b9cf8774ac2bc7771f15f83da85aa913a5cf5', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6862c96490640a46594481ce3c12e9e7823ad521', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}]",Rishabh Garg,56191449,,User,,14,,80,60
708864923,[WIP] Parallelize DecisionTree training.,"This PR attempts to make the training of DecisionTree parallel.

CC: @rcurtin @gmanlan ",False,3031,https://api.github.com/repos/mlpack/mlpack/pulls/3031,https://github.com/mlpack/mlpack/pull/3031,closed,92,112,6,6,1,3,4,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2021-08-11 12:39:01+00:00,2021-09-30 01:31:37+00:00,4279956.0,"49 days, 12:52:36","[{'comment_id': 687263664, 'comment_body': '```suggestion\r\n   * Get the `i`th dimension.\r\n```\r\nJust a little pedantic comment fix. :)', 'comment_created': datetime.datetime(2021, 8, 11, 23, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 687268418, 'comment_body': '```suggestion\r\n   * returns the total number of dimensions to iterate.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 23, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 694398716, 'comment_body': 'Maybe I missed it, but did you already run some benchmark against the parallelization code?', 'comment_created': datetime.datetime(2021, 8, 24, 0, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '1a12a59b843d570f94fb875dfcb476da86e64cb3', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16669cf244eedfb565e1564b56e456c3361e0d3e', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e547902b0ea84212b09b55c4457ec9de26542b2e', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1168547aef5424d70a9cf81fd152f1a6151aaf2d', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02d6345b0dafb23b122d5613a915130b5b54e602', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ff616ec3f66e96e94bd2bcdc178673b19960369', 'committer_username': 'RishabhGarg108', 'committer_name': 'Rishabh Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 5, 10, 18, 37, tzinfo=datetime.timezone.utc)}]",Rishabh Garg,56191449,,User,,14,,80,60

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1590,4977,183,321,30199,24,11,15,"[{'id': 764639402, 'number': 3078, 'closed': datetime.datetime(2022, 8, 9, 8, 13, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 23, 8, 10, 55, tzinfo=datetime.timezone.utc), 'time_taken': 25056132.0, 'time_delta': '290 days, 0:02:12', 'additions': 434, 'deletions': 307, 'state': 'closed'}, {'id': 751521591, 'number': 3070, 'closed': datetime.datetime(2021, 10, 24, 19, 26, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 6, 12, 8, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1581479.0, 'time_delta': '18 days, 7:17:59', 'additions': 94, 'deletions': 58, 'state': 'closed'}, {'id': 708864923, 'number': 3031, 'closed': datetime.datetime(2021, 9, 30, 1, 31, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 12, 39, 1, tzinfo=datetime.timezone.utc), 'time_taken': 4279956.0, 'time_delta': '49 days, 12:52:36', 'additions': 92, 'deletions': 112, 'state': 'closed'}, {'id': 700889531, 'number': 3027, 'closed': datetime.datetime(2021, 8, 2, 8, 43, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 1, 11, 35, 45, tzinfo=datetime.timezone.utc), 'time_taken': 76094.0, 'time_delta': '21:08:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 699454465, 'number': 3025, 'closed': datetime.datetime(2021, 10, 16, 9, 37, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 11, 39, 45, tzinfo=datetime.timezone.utc), 'time_taken': 6818243.0, 'time_delta': '78 days, 21:57:23', 'additions': 950, 'deletions': 28, 'state': 'closed'}, {'id': 696048745, 'number': 3022, 'closed': datetime.datetime(2021, 10, 17, 1, 37, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 16, 5, 3, tzinfo=datetime.timezone.utc), 'time_taken': 7378325.0, 'time_delta': '85 days, 9:32:05', 'additions': 382, 'deletions': 27, 'state': 'closed'}, {'id': 688764687, 'number': 3014, 'closed': datetime.datetime(2021, 7, 28, 16, 59, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 10, 0, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1321137.0, 'time_delta': '15 days, 6:58:57', 'additions': 169, 'deletions': 106, 'state': 'closed'}, {'id': 687547693, 'number': 3011, 'closed': datetime.datetime(2021, 7, 19, 5, 0, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 6, 23, 51, tzinfo=datetime.timezone.utc), 'time_taken': 599789.0, 'time_delta': '6 days, 22:36:29', 'additions': 5049, 'deletions': 84, 'state': 'closed'}, {'id': 680976420, 'number': 3003, 'closed': datetime.datetime(2021, 7, 26, 12, 32, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 15, 22, 38, tzinfo=datetime.timezone.utc), 'time_taken': 2236169.0, 'time_delta': '25 days, 21:09:29', 'additions': 206, 'deletions': 0, 'state': 'closed'}, {'id': 680828058, 'number': 3002, 'closed': datetime.datetime(2021, 6, 30, 15, 23, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 12, 25, 17, tzinfo=datetime.timezone.utc), 'time_taken': 10680.0, 'time_delta': '2:58:00', 'additions': 5234, 'deletions': 109, 'state': 'closed'}, {'id': 609151601, 'number': 2905, 'closed': datetime.datetime(2021, 7, 15, 0, 41, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 19, 32, tzinfo=datetime.timezone.utc), 'time_taken': 8658555.0, 'time_delta': '100 days, 5:09:15', 'additions': 5195, 'deletions': 109, 'state': 'closed'}, {'id': 597285535, 'number': 2883, 'closed': datetime.datetime(2021, 5, 9, 2, 53, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 20, 13, 50, 4, tzinfo=datetime.timezone.utc), 'time_taken': 4280585.0, 'time_delta': '49 days, 13:03:05', 'additions': 567, 'deletions': 48, 'state': 'closed'}, {'id': 594845675, 'number': 2881, 'closed': datetime.datetime(2021, 4, 11, 4, 12, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 17, 15, 47, 58, tzinfo=datetime.timezone.utc), 'time_taken': 2118271.0, 'time_delta': '24 days, 12:24:31', 'additions': 250, 'deletions': 48, 'state': 'closed'}, {'id': 594073927, 'number': 2878, 'closed': datetime.datetime(2021, 3, 17, 23, 51, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 16, 43, 42, tzinfo=datetime.timezone.utc), 'time_taken': 112042.0, 'time_delta': '1 day, 7:07:22', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 592464738, 'number': 2875, 'closed': datetime.datetime(2021, 3, 15, 13, 59, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 14, 3, 15, 1, tzinfo=datetime.timezone.utc), 'time_taken': 125050.0, 'time_delta': '1 day, 10:44:10', 'additions': 32, 'deletions': 32, 'state': 'closed'}, {'id': 546718842, 'number': 2789, 'closed': datetime.datetime(2022, 7, 8, 2, 59, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 30, 3, 56, 40, tzinfo=datetime.timezone.utc), 'time_taken': 47948569.0, 'time_delta': '554 days, 23:02:49', 'additions': 540, 'deletions': 0, 'state': 'closed'}, {'id': 545435149, 'number': 2782, 'closed': datetime.datetime(2020, 12, 26, 7, 15, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 24, 17, 44, tzinfo=datetime.timezone.utc), 'time_taken': 135084.0, 'time_delta': '1 day, 13:31:24', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 529695939, 'number': 2746, 'closed': datetime.datetime(2021, 3, 13, 21, 14, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 30, 17, 23, tzinfo=datetime.timezone.utc), 'time_taken': 8913079.0, 'time_delta': '103 days, 3:51:19', 'additions': 441, 'deletions': 86, 'state': 'closed'}, {'id': 524915942, 'number': 2724, 'closed': datetime.datetime(2020, 12, 9, 21, 8, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 20, 19, 47, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1646449.0, 'time_delta': '19 days, 1:20:49', 'additions': 429, 'deletions': 386, 'state': 'closed'}, {'id': 520961066, 'number': 2714, 'closed': datetime.datetime(2020, 11, 28, 19, 50, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 14, 5, 1, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1262976.0, 'time_delta': '14 days, 14:49:36', 'additions': 19, 'deletions': 17, 'state': 'closed'}, {'id': 520488793, 'number': 2711, 'closed': datetime.datetime(2020, 11, 29, 16, 33, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 13, 10, 20, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1404806.0, 'time_delta': '16 days, 6:13:26', 'additions': 122, 'deletions': 0, 'state': 'closed'}, {'id': 518704329, 'number': 2708, 'closed': datetime.datetime(2020, 11, 25, 4, 28, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 10, 19, 7, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1243231.0, 'time_delta': '14 days, 9:20:31', 'additions': 285, 'deletions': 310, 'state': 'closed'}, {'id': 516914953, 'number': 2701, 'closed': datetime.datetime(2020, 11, 10, 20, 17, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 6, 18, 38, 14, tzinfo=datetime.timezone.utc), 'time_taken': 351558.0, 'time_delta': '4 days, 1:39:18', 'additions': 9, 'deletions': 0, 'state': 'closed'}]"
