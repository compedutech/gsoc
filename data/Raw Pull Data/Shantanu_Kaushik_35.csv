pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
668256669,GSoC'21: adding to FES phase 1,"<!--
  Thank you for contributing! Please use this pull request (PR) template.


 In the description field of this PR, include ""resolves #XXXX"" tagging the issue you are fixing. If this PR addresses the issue but doesn't completely resolve it (ie the issue should remain open after your PR is merged), write ""addresses #XXXX"".-->
Resolves #5304

 Changes:
<!-- Add here what changes were made in this pull request and if possible provide links showcasing the changes. -->
Changes made to `browser_errors.js`, `fes_core.js`, and `translation.json`

FES would now handle these new browser errors :

**Reference Errors:**
[`cannotAccess`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init#what_went_wrong)

**Syntax Errors:**
[`redeclaredVariable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter#what_went_wrong)
[`missingInitilizer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const#what_went_wrong)
[`badReturnOrYield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield#what_went_wrong)

**Type Errors:**
[`readFromNull`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong)
[`readFromUndefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong)
[`constAssign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment#what_went_wrong)

 Screenshots of the change:
<!-- If applicable, add screenshots depicting the changes. -->

#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [x] `npm run lint` passes
- [x] [Inline documentation] is included / updated
- [x] [Unit tests] are included / updated

[Inline documentation]: https://github.com/processing/p5.js/blob/main/contributor_docs/inline_documentation.md
[Unit tests]: https://github.com/processing/p5.js/tree/main/contributor_docs#unit-tests
",True,5305,https://api.github.com/repos/processing/p5.js/pulls/5305,https://github.com/processing/p5.js/pull/5305,closed,487,211,5,20,4,32,0,0,[],2021-06-11 15:10:48+00:00,2021-07-11 14:03:55+00:00,2587987.0,"29 days, 22:53:07","[{'comment_id': 659211946, 'comment_body': 'I would suggest: `""{{symbol}}\\"" is used before being initialized. Make sure you have initialized the variable before using it.\\n\\n{{location}}\\n\\nFor more: {{url}}""`', 'comment_created': datetime.datetime(2021, 6, 26, 18, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659212136, 'comment_body': 'I know in JS variables are automatically initialized when they are declared but I wonder if it would be more helpful to novices if we talked about declaration instead of initialization. @Aloneduckling @outofambit @Qianqianye  what do you think? ', 'comment_created': datetime.datetime(2021, 6, 26, 19, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659212429, 'comment_body': 'for this one I would suggest `\\""{{symbol}}\\"" is being redeclared.`', 'comment_created': datetime.datetime(2021, 6, 26, 19, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659212518, 'comment_body': 'Also avoid saying `below`. In the editor, for example error messages are above. My suggestion is `Check the line number in error for redeclaration of the variable.\\nFor more: {{url}}""`', 'comment_created': datetime.datetime(2021, 6, 26, 19, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659212880, 'comment_body': 'Here I would suggest `""\\nSyntax Error ▶️ `return` / `yield` is outside of a function. Make sure you’re not missing any brackets, so that `return` / `yield` is inside a function.\\nFor more: {{url}}""`', 'comment_created': datetime.datetime(2021, 6, 26, 19, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659213168, 'comment_body': 'Can we separate `BADRETURNORYIELD` and create `BADRETURN` & `BADYIELD`. Yield is not common for beginners and might be confusing to have both in the same error message', 'comment_created': datetime.datetime(2021, 6, 26, 19, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659213762, 'comment_body': 'I wonder if this message could be `""\\nError ▶️ \\""{{symbol}}\\"" is undefined, the property of undefined cannot be read`', 'comment_created': datetime.datetime(2021, 6, 26, 19, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659215954, 'comment_body': 'Please add inline comments explaining what each case is 👍 ', 'comment_created': datetime.datetime(2021, 6, 26, 19, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659325898, 'comment_body': 'Yeah talking about declaration also makes sense. \r\nI will wait for the input from all of you and then make the changes.', 'comment_created': datetime.datetime(2021, 6, 27, 13, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 659327156, 'comment_body': 'How about having `BADRETURN` only because this error focuses on misplaced return statements. I named the type `BADRETURNORYIELD` because it matches the error mentioned in the MDN reference.', 'comment_created': datetime.datetime(2021, 6, 27, 14, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 659572941, 'comment_body': 'I added the comments, please have a look', 'comment_created': datetime.datetime(2021, 6, 28, 8, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 659695453, 'comment_body': 'Then maybe keep it as `BADRETURNORYIELD` and edit the text displayed so that it only shows return.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 660178522, 'comment_body': ""@lm-n Yeah I agree on focusing on declaration instead of initialization. The two concepts are pretty nuanced for beginners so I'd vote we pick one to focus on. (Generally, you can't initialize something that hasn't been declared plus what you said about JS variables getting initialized as soon as they are declared even if you omit an explicit value)."", 'comment_created': datetime.datetime(2021, 6, 28, 23, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'outofambit', 'type': 'User'}, {'comment_id': 661267560, 'comment_body': ""@lm-n we don't have access to {{symbol}} in this error because the browser itself doesn't provide it. \r\nWhat if we change it to:\r\n`\\nError ▶️ cannot read property of undefined. Check the line number in the error and make sure the variable which is being operated is not undefined.\\nFor more: \\n{{url1}}\\n{{url2}}`"", 'comment_created': datetime.datetime(2021, 6, 30, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 661966931, 'comment_body': 'I have made the changes please have a look', 'comment_created': datetime.datetime(2021, 7, 1, 4, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 661966951, 'comment_body': 'I have made the changes please have a look', 'comment_created': datetime.datetime(2021, 7, 1, 4, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 661966995, 'comment_body': 'I have made the changes please have a look\r\n', 'comment_created': datetime.datetime(2021, 7, 1, 4, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 663514415, 'comment_body': ""Here my comment is about style. You have two ways of writing errors:\r\n\r\n- There's a syntax error due....\r\n- Syntax Error -> blah blah \r\n\r\nIt might be good to choose one and follow through with it. Maybe modify lines 32 and 35 to follow the style of other errors "", 'comment_created': datetime.datetime(2021, 7, 4, 14, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 663514487, 'comment_body': 'Same comment as above ', 'comment_created': datetime.datetime(2021, 7, 4, 14, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 663514647, 'comment_body': 'sounds good to me!', 'comment_created': datetime.datetime(2021, 7, 4, 14, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 663514716, 'comment_body': 'awesome job!', 'comment_created': datetime.datetime(2021, 7, 4, 14, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 663849137, 'comment_body': 'We could add ""(try using \'let\' or \'var\')"" to the end of the line, to give the user a possible fix without having to search the web', 'comment_created': datetime.datetime(2021, 7, 5, 11, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 663852276, 'comment_body': ' ""unexpectedToken"" often happens when the previous line is malformed. We could suggest the user to check the previous line as well?', 'comment_created': datetime.datetime(2021, 7, 5, 11, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 663859524, 'comment_body': 'Typo at ""listeners""', 'comment_created': datetime.datetime(2021, 7, 5, 11, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 663865958, 'comment_body': 'I noticed this repeats every test - if you\'re up to it, here\'s a way to brush off a couple of lines\r\n1. Make a new function (`prepSyntaxTest()`, for instance)\r\n2. It receives the relevant source code (ie. lines `547` to `549` here) as a list of strings\r\n3. It build the final array by adding `P5_SCRIPT_TAG`, `WAIT_AND_RESOLVE` and the `script` tags\r\n4. it runs this block with it.\r\n\r\nThis new function can even return the actual Promise for you, so you don\'t have to retype it for each test case. To do that, the function in the ""then"" block must become a new parameter.', 'comment_created': datetime.datetime(2021, 7, 5, 11, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 664206064, 'comment_body': '@ghalestrilo, adding this line makes sense. I will update the message. \r\nI also wanted to mention this:\r\nThe error provides a link to the MDN reference which contains all the info about what went wrong and some examples about the error. The MDN reference covers all the possible mistakes due to which error has occurred. So having a link to the reference could be really helpful for the user.\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 6, 3, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664243075, 'comment_body': '@ghalestrilo that is a great idea. However, In many cases, the error is in the same line as indicated in the error message so it might create confusion for the user. ', 'comment_created': datetime.datetime(2021, 7, 6, 5, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664279455, 'comment_body': 'I did the changes please have a look', 'comment_created': datetime.datetime(2021, 7, 6, 6, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664282179, 'comment_body': '@lm-n I have made the changes please have a look', 'comment_created': datetime.datetime(2021, 7, 6, 6, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664283430, 'comment_body': 'so I think this message is good. I am happy to defer though.', 'comment_created': datetime.datetime(2021, 7, 6, 6, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664449746, 'comment_body': 'Yes, totally agree', 'comment_created': datetime.datetime(2021, 7, 6, 10, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 664450260, 'comment_body': ""That makes sense, let's leave it as is for now"", 'comment_created': datetime.datetime(2021, 7, 6, 10, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}]","[{'commit_sha': 'cd29f0368b2398c4680e8160315f291dacfc00b2', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdedb308434b01c6676e1e83b5f37b7e690c71a7', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67707db9dad0afff893bc1e43fc4a4ee88d2ad91', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b0d65cc5adccc3575310c08e15b4854a161cf6e', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '564f629b319961d28b70bd5ba09a2be61d4303fb', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07b678564a6f93727987af65d8ac198613d3558', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b56f129e4b063c1cdc58fe2230f0848a90c3c23', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1db41eb1be4f2b8bbd8f043b07ff220cab7d1c4', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffe276152e256e28fbcbedbe0aa7ed374d4b5a69', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eabe2a1032d25c5e2f929fc2af4cc2b3e4637d7', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3b2b7ba47be069af4088463087f4f77765afac', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63ce561640ad18c5f31515db3ef572c1fc2a1fce', 'committer_username': 'outofambit', 'committer_name': 'cypress evelyn masso', 'committer_email': 'coding@outofambit.com', 'commit_date': datetime.datetime(2011, 8, 7, 19, 27, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811a836b9dca5abbcf47c76c927ad5d529222bfb', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8991a4a80628ae633f0676c12d83a0849e699e80', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86561c59c489a2d2e30c9efb1b077255917220f4', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f88ca684603ce1c0829eb55613f1916491bb1747', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eabd313bb06977ddb004562381df26cb8c23a980', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa62b17e7b7f6f57a603c090f20156bc61f69d43', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '859847fe565560ee49f2c287057d9f40ee06feaa', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d9964cf30502ba3ae1c4902cc70c1bc093acee3', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}]",Shantanu Kaushik,54030684,,User,,28,,19,7
689837961,Detecting redeclaration of p5.js reserved constants and functions,"<!--
  Thank you for contributing! Please use this pull request (PR) template.


 In the description field of this PR, include ""resolves #XXXX"" tagging the issue you are fixing. If this PR addresses the issue but doesn't completely resolve it (ie the issue should remain open after your PR is merged), write ""addresses #XXXX"".-->
Resolves #5350

 Changes:
<!-- Add here what changes were made in this pull request and if possible provide links showcasing the changes. -->

- The new file `sketch_reader.js` contains the code that will help the FES detect redeclaration of p5.js constants and functions.
- Inline documentation is included
- Unit tests are included

 Screenshots of the change:
<!-- If applicable, add screenshots depicting the changes. -->
Detection of p5.js reserved function:
![image](https://user-images.githubusercontent.com/54030684/128673985-c28f1edd-e4bd-4e89-9392-3b5ed7abd5e6.png)

Detection of p5.js reserved constant
![image](https://user-images.githubusercontent.com/54030684/128674003-08374768-f606-4d6b-9c09-ea53d2d61ae4.png)


#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [x] `npm run lint` passes
- [x] [Inline documentation] is included / updated
- [x] [Unit tests] are included / updated

[Inline documentation]: https://github.com/processing/p5.js/blob/main/contributor_docs/inline_documentation.md
[Unit tests]: https://github.com/processing/p5.js/tree/main/contributor_docs#unit-tests
",True,5351,https://api.github.com/repos/processing/p5.js/pulls/5351,https://github.com/processing/p5.js/pull/5351,closed,523,0,6,17,1,44,0,0,[],2021-07-14 11:45:43+00:00,2021-08-12 23:04:03+00:00,2546300.0,"29 days, 11:18:20","[{'comment_id': 676131343, 'comment_body': 'name sounds good to me!', 'comment_created': datetime.datetime(2021, 7, 25, 11, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676131494, 'comment_body': 'also reads well! ', 'comment_created': datetime.datetime(2021, 7, 25, 11, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676189124, 'comment_body': 'throwing an error here: ""Uncaught (in promise) TypeError: Failed to fetch""', 'comment_created': datetime.datetime(2021, 7, 25, 19, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676189301, 'comment_body': 'same fetching error here', 'comment_created': datetime.datetime(2021, 7, 25, 19, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676189405, 'comment_body': ""I'm getting a fetching error in this promise"", 'comment_created': datetime.datetime(2021, 7, 25, 19, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676189441, 'comment_body': 'I wonder how these compares to the style of other errors.  let chat about it!', 'comment_created': datetime.datetime(2021, 7, 25, 19, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676264844, 'comment_body': 'yeah cool!\r\n', 'comment_created': datetime.datetime(2021, 7, 26, 3, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 677456879, 'comment_body': 'I suggest making a variable with a descriptive name for this check (a.k.a. ""what is this condition checking for?"")', 'comment_created': datetime.datetime(2021, 7, 27, 13, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677484317, 'comment_body': 'The functional style works great here! I think we can minimize duplication though. Some ideas:\r\n\r\n```javascript\r\n\r\nlet arr = code\r\n  .split(\'\\n\')\r\n  // Doing this before line 162 avoids an extra .map call\r\n  .map(line => line.trim()) \r\n  // Here you can also filter out the comments before both extractions\r\n  .filter(line => line !== \'\' && !line.includes(\'//\'))\r\n```\r\n\r\nThe rest of the code filters out lines before sending to function/constant extraction. Because of that, some cases end up unchecked:\r\n```javascript\r\n// Declaring reserved functions as constants (and vice-versa). This also passes\r\nlet background = ""#ffffff""\r\nlet PI = x => 1\r\n\r\n// Here, PI is redeclared as a constant, but it\'s not checked: the code thinks it\'s a function (=>)\r\nlet PI = [1,2,3,4].map(x => x * 2)\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 14, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677538508, 'comment_body': 'Nice, great job!', 'comment_created': datetime.datetime(2021, 7, 27, 15, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677538648, 'comment_body': 'Looks good! Does `ele.match(reg)` always have a `[1]` element?', 'comment_created': datetime.datetime(2021, 7, 27, 15, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677538730, 'comment_body': 'I suggest splitting this code a bit: You can try creating a function from the lambda at line 104, and end up with something like:\r\n\r\n```javascript\r\nconst extractVariables = arr => arr\r\n        .map(applyVariableRegex) // Apply regexes to check for matches (lines 104 to 113, kind of)\r\n        .filter(...) // Filter out whatever doesn\'t match (line 113)\r\n        .reduce(...) // Flatten the ""ele"" items into the final list\r\n\r\nconst applyVariableRegex = s => {\r\n  if (s.includes(\'=\')) { ... }\r\n  ...\r\n}\r\n\r\n...\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 15, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677543652, 'comment_body': ""You can use `Array.every()` here:\r\n```javascript\r\n\r\nignore_files = ['p5.js', 'p5.min.js', 'p5.sounds.js', 'p5.sounds.min.js', 'previewScripts']\r\n\r\n...\r\n  .filter(attr => attr !== null\r\n      ...\r\n      && ignore_files.every(filename => !attr.includes(filename))\r\n  )\r\n\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 7, 27, 15, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677935961, 'comment_body': 'yeah, I will update the code.\r\n', 'comment_created': datetime.datetime(2021, 7, 28, 2, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 677936593, 'comment_body': 'yes, it is because we are using capture groups here and they return an array with 2 elements in them and the 2nd element is the one that we require.', 'comment_created': datetime.datetime(2021, 7, 28, 2, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 677938822, 'comment_body': ""the `extractVariables` function's purpose is to apply the regex and extract the function names so I guess code should be here and using another function for regex matching would be overdoing it. I am happy to defer though. What are your thoughts?"", 'comment_created': datetime.datetime(2021, 7, 28, 3, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 678254218, 'comment_body': 'I have updated the code\r\n', 'comment_created': datetime.datetime(2021, 7, 28, 12, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 680375487, 'comment_body': 'do this for all variables across the file: for example instead of ele say element or whatever ele stands for. instead of arr say elementArray', 'comment_created': datetime.datetime(2021, 7, 31, 15, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680375775, 'comment_body': 'instead of `arr` use a descriptive name for the array `variablesArray`. We do this in p5.js to make the code more accessible to new contributors and to other contributors that might be trying to understand what you are doing.', 'comment_created': datetime.datetime(2021, 7, 31, 15, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680375936, 'comment_body': 'great in line documentation here! Can you do the same from lines 68-78', 'comment_created': datetime.datetime(2021, 7, 31, 16, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376063, 'comment_body': '`keyArray` instead of `keyArr`', 'comment_created': datetime.datetime(2021, 7, 31, 16, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376138, 'comment_body': 'for all regex add a comment describing what you are doing', 'comment_created': datetime.datetime(2021, 7, 31, 16, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376170, 'comment_body': 'use descriptive variable names', 'comment_created': datetime.datetime(2021, 7, 31, 16, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376282, 'comment_body': 'use descriptive variable name instead of str', 'comment_created': datetime.datetime(2021, 7, 31, 16, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376550, 'comment_body': 'I agree with @Aloneduckling on this one!', 'comment_created': datetime.datetime(2021, 7, 31, 16, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680638213, 'comment_body': 'ok I will update the code', 'comment_created': datetime.datetime(2021, 8, 2, 3, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 680638352, 'comment_body': 'ok I will make the changes soon', 'comment_created': datetime.datetime(2021, 8, 2, 3, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 680858026, 'comment_body': 'I have also added a good resource https://regexr.com/ in the comments for the ease of understanding of each regex. Is it ok?', 'comment_created': datetime.datetime(2021, 8, 2, 10, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681174751, 'comment_body': 'Alright! That makes sense', 'comment_created': datetime.datetime(2021, 8, 2, 18, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681206985, 'comment_body': ""Suggestion: group the regexes together and name each one after what it searches for.\r\nThis way they're easier to find, understand and modify, and you can reuse them.\r\nThey could be file-level constants since in line 174 the one of them is also used\r\n\r\nFor instance:\r\n```javascript\r\nconst varName = /(?:(?:let|const|var)\\s+)?([\\w$]+)/\r\nconst varNameWithComma = /(?:(?:let|const|var)\\s+)?([\\w$,]+)/\r\nconst letConstName = /(?:(?:let|const)\\s+)([\\w$]+)/\r\n\r\n// Then later:\r\nlet m = s.match(varName)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 2, 19, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681221993, 'comment_body': '```suggestion\r\n   * Checks if any p5.js constant or function is\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 19, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681231059, 'comment_body': 'Here you can use `if (moveAhead) return` to avoid extra indentation', 'comment_created': datetime.datetime(2021, 8, 2, 19, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681235293, 'comment_body': ""I think this line is a bit confusing - using `isFound` to break the loop is clearer (if that's possible). In fact, you could just `return true` straight from line 344"", 'comment_created': datetime.datetime(2021, 8, 2, 20, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681236700, 'comment_body': 'Same as line `349`', 'comment_created': datetime.datetime(2021, 8, 2, 20, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681238739, 'comment_body': ""I don't see the index `i` being used anywhere else, maybe you can use a for-of instead:\r\n```javascript\r\nfor (let function_name of functionArray) { ... }\r\n```"", 'comment_created': datetime.datetime(2021, 8, 2, 20, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681709848, 'comment_body': 'I used for loop here because when p5.js is bundled it is converted to ES5 format and this conversion sometimes causes problems especially with the new variations of for loop. So to be on the safer side I used the traditional for loop.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681718377, 'comment_body': 'I will make the changes', 'comment_created': datetime.datetime(2021, 8, 3, 12, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681719056, 'comment_body': 'This is a great suggestion thanks. I will change the code and push it soon', 'comment_created': datetime.datetime(2021, 8, 3, 12, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681720000, 'comment_body': 'Thanks for the suggestion, will make the changes.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681762732, 'comment_body': ""I see, that makes sense. I'll mark this as resolved then"", 'comment_created': datetime.datetime(2021, 8, 3, 13, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681882970, 'comment_body': 'awesome!', 'comment_created': datetime.datetime(2021, 8, 3, 15, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 685154601, 'comment_body': 'be more detailed about what you mean with this. Why do we need this?', 'comment_created': datetime.datetime(2021, 8, 9, 12, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 685158401, 'comment_body': 'new features such as ', 'comment_created': datetime.datetime(2021, 8, 9, 12, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 686098878, 'comment_body': 'I made the changes. Please have a look', 'comment_created': datetime.datetime(2021, 8, 10, 14, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}]","[{'commit_sha': '824703392ef756644f9ad0991658e97652197b8a', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea9e9664bdfb1125c3768c10cc29440d1327df8f', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e43010a212d4b0e0229c9c0e4c71f1bb9910cd', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4beecefaa1b4413bf7aad1eaed9ba9028061b730', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '749b8e6101f3c59d52158d11573c24e74d495772', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03b62d15b5c51b27ef123a63f1cbe87ee0fd63b', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470e97ffdf62db8ee59b396de37ebff00850722d', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c515e50fcf38807e80243531a7eabb7da09ee5f', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95bf4ccabf23b50bc5c8aec0a010bf62c8f97a6', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa1d9da0bf4e04cc2fe972736188670ce59677c4', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ac204364bc80a6531a766cdd1017e0addd6db2', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f15027b4abec9be73ae46ce8d5375beabfeb030', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '285647d83bc6e269c2ef54e03e6fed9c307c9e3d', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de5fba06b44002bae411997715a4c74775a47ef', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e943b325aa4fade179673ff2cc1f8400270b913c', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a890fc131972799674cc0b443c954cf4a6f7bb2c', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9442267c176f37d48a4e0de893bf784e11e6c4', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}]",Shantanu Kaushik,54030684,,User,,28,,19,7
668256669,GSoC'21: adding to FES phase 1,"<!--
  Thank you for contributing! Please use this pull request (PR) template.


 In the description field of this PR, include ""resolves #XXXX"" tagging the issue you are fixing. If this PR addresses the issue but doesn't completely resolve it (ie the issue should remain open after your PR is merged), write ""addresses #XXXX"".-->
Resolves #5304

 Changes:
<!-- Add here what changes were made in this pull request and if possible provide links showcasing the changes. -->
Changes made to `browser_errors.js`, `fes_core.js`, and `translation.json`

FES would now handle these new browser errors :

**Reference Errors:**
[`cannotAccess`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init#what_went_wrong)

**Syntax Errors:**
[`redeclaredVariable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter#what_went_wrong)
[`missingInitilizer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const#what_went_wrong)
[`badReturnOrYield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield#what_went_wrong)

**Type Errors:**
[`readFromNull`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong)
[`readFromUndefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong)
[`constAssign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment#what_went_wrong)

 Screenshots of the change:
<!-- If applicable, add screenshots depicting the changes. -->

#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [x] `npm run lint` passes
- [x] [Inline documentation] is included / updated
- [x] [Unit tests] are included / updated

[Inline documentation]: https://github.com/processing/p5.js/blob/main/contributor_docs/inline_documentation.md
[Unit tests]: https://github.com/processing/p5.js/tree/main/contributor_docs#unit-tests
",True,5305,https://api.github.com/repos/processing/p5.js/pulls/5305,https://github.com/processing/p5.js/pull/5305,closed,487,211,5,20,4,32,0,0,[],2021-06-11 15:10:48+00:00,2021-07-11 14:03:55+00:00,2587987.0,"29 days, 22:53:07","[{'comment_id': 659211946, 'comment_body': 'I would suggest: `""{{symbol}}\\"" is used before being initialized. Make sure you have initialized the variable before using it.\\n\\n{{location}}\\n\\nFor more: {{url}}""`', 'comment_created': datetime.datetime(2021, 6, 26, 18, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659212136, 'comment_body': 'I know in JS variables are automatically initialized when they are declared but I wonder if it would be more helpful to novices if we talked about declaration instead of initialization. @Aloneduckling @outofambit @Qianqianye  what do you think? ', 'comment_created': datetime.datetime(2021, 6, 26, 19, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659212429, 'comment_body': 'for this one I would suggest `\\""{{symbol}}\\"" is being redeclared.`', 'comment_created': datetime.datetime(2021, 6, 26, 19, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659212518, 'comment_body': 'Also avoid saying `below`. In the editor, for example error messages are above. My suggestion is `Check the line number in error for redeclaration of the variable.\\nFor more: {{url}}""`', 'comment_created': datetime.datetime(2021, 6, 26, 19, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659212880, 'comment_body': 'Here I would suggest `""\\nSyntax Error ▶️ `return` / `yield` is outside of a function. Make sure you’re not missing any brackets, so that `return` / `yield` is inside a function.\\nFor more: {{url}}""`', 'comment_created': datetime.datetime(2021, 6, 26, 19, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659213168, 'comment_body': 'Can we separate `BADRETURNORYIELD` and create `BADRETURN` & `BADYIELD`. Yield is not common for beginners and might be confusing to have both in the same error message', 'comment_created': datetime.datetime(2021, 6, 26, 19, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659213762, 'comment_body': 'I wonder if this message could be `""\\nError ▶️ \\""{{symbol}}\\"" is undefined, the property of undefined cannot be read`', 'comment_created': datetime.datetime(2021, 6, 26, 19, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659215954, 'comment_body': 'Please add inline comments explaining what each case is 👍 ', 'comment_created': datetime.datetime(2021, 6, 26, 19, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 659325898, 'comment_body': 'Yeah talking about declaration also makes sense. \r\nI will wait for the input from all of you and then make the changes.', 'comment_created': datetime.datetime(2021, 6, 27, 13, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 659327156, 'comment_body': 'How about having `BADRETURN` only because this error focuses on misplaced return statements. I named the type `BADRETURNORYIELD` because it matches the error mentioned in the MDN reference.', 'comment_created': datetime.datetime(2021, 6, 27, 14, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 659572941, 'comment_body': 'I added the comments, please have a look', 'comment_created': datetime.datetime(2021, 6, 28, 8, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 659695453, 'comment_body': 'Then maybe keep it as `BADRETURNORYIELD` and edit the text displayed so that it only shows return.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 660178522, 'comment_body': ""@lm-n Yeah I agree on focusing on declaration instead of initialization. The two concepts are pretty nuanced for beginners so I'd vote we pick one to focus on. (Generally, you can't initialize something that hasn't been declared plus what you said about JS variables getting initialized as soon as they are declared even if you omit an explicit value)."", 'comment_created': datetime.datetime(2021, 6, 28, 23, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'outofambit', 'type': 'User'}, {'comment_id': 661267560, 'comment_body': ""@lm-n we don't have access to {{symbol}} in this error because the browser itself doesn't provide it. \r\nWhat if we change it to:\r\n`\\nError ▶️ cannot read property of undefined. Check the line number in the error and make sure the variable which is being operated is not undefined.\\nFor more: \\n{{url1}}\\n{{url2}}`"", 'comment_created': datetime.datetime(2021, 6, 30, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 661966931, 'comment_body': 'I have made the changes please have a look', 'comment_created': datetime.datetime(2021, 7, 1, 4, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 661966951, 'comment_body': 'I have made the changes please have a look', 'comment_created': datetime.datetime(2021, 7, 1, 4, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 661966995, 'comment_body': 'I have made the changes please have a look\r\n', 'comment_created': datetime.datetime(2021, 7, 1, 4, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 663514415, 'comment_body': ""Here my comment is about style. You have two ways of writing errors:\r\n\r\n- There's a syntax error due....\r\n- Syntax Error -> blah blah \r\n\r\nIt might be good to choose one and follow through with it. Maybe modify lines 32 and 35 to follow the style of other errors "", 'comment_created': datetime.datetime(2021, 7, 4, 14, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 663514487, 'comment_body': 'Same comment as above ', 'comment_created': datetime.datetime(2021, 7, 4, 14, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 663514647, 'comment_body': 'sounds good to me!', 'comment_created': datetime.datetime(2021, 7, 4, 14, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 663514716, 'comment_body': 'awesome job!', 'comment_created': datetime.datetime(2021, 7, 4, 14, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 663849137, 'comment_body': 'We could add ""(try using \'let\' or \'var\')"" to the end of the line, to give the user a possible fix without having to search the web', 'comment_created': datetime.datetime(2021, 7, 5, 11, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 663852276, 'comment_body': ' ""unexpectedToken"" often happens when the previous line is malformed. We could suggest the user to check the previous line as well?', 'comment_created': datetime.datetime(2021, 7, 5, 11, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 663859524, 'comment_body': 'Typo at ""listeners""', 'comment_created': datetime.datetime(2021, 7, 5, 11, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 663865958, 'comment_body': 'I noticed this repeats every test - if you\'re up to it, here\'s a way to brush off a couple of lines\r\n1. Make a new function (`prepSyntaxTest()`, for instance)\r\n2. It receives the relevant source code (ie. lines `547` to `549` here) as a list of strings\r\n3. It build the final array by adding `P5_SCRIPT_TAG`, `WAIT_AND_RESOLVE` and the `script` tags\r\n4. it runs this block with it.\r\n\r\nThis new function can even return the actual Promise for you, so you don\'t have to retype it for each test case. To do that, the function in the ""then"" block must become a new parameter.', 'comment_created': datetime.datetime(2021, 7, 5, 11, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 664206064, 'comment_body': '@ghalestrilo, adding this line makes sense. I will update the message. \r\nI also wanted to mention this:\r\nThe error provides a link to the MDN reference which contains all the info about what went wrong and some examples about the error. The MDN reference covers all the possible mistakes due to which error has occurred. So having a link to the reference could be really helpful for the user.\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 6, 3, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664243075, 'comment_body': '@ghalestrilo that is a great idea. However, In many cases, the error is in the same line as indicated in the error message so it might create confusion for the user. ', 'comment_created': datetime.datetime(2021, 7, 6, 5, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664279455, 'comment_body': 'I did the changes please have a look', 'comment_created': datetime.datetime(2021, 7, 6, 6, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664282179, 'comment_body': '@lm-n I have made the changes please have a look', 'comment_created': datetime.datetime(2021, 7, 6, 6, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664283430, 'comment_body': 'so I think this message is good. I am happy to defer though.', 'comment_created': datetime.datetime(2021, 7, 6, 6, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 664449746, 'comment_body': 'Yes, totally agree', 'comment_created': datetime.datetime(2021, 7, 6, 10, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 664450260, 'comment_body': ""That makes sense, let's leave it as is for now"", 'comment_created': datetime.datetime(2021, 7, 6, 10, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}]","[{'commit_sha': 'cd29f0368b2398c4680e8160315f291dacfc00b2', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdedb308434b01c6676e1e83b5f37b7e690c71a7', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67707db9dad0afff893bc1e43fc4a4ee88d2ad91', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b0d65cc5adccc3575310c08e15b4854a161cf6e', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '564f629b319961d28b70bd5ba09a2be61d4303fb', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07b678564a6f93727987af65d8ac198613d3558', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b56f129e4b063c1cdc58fe2230f0848a90c3c23', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1db41eb1be4f2b8bbd8f043b07ff220cab7d1c4', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffe276152e256e28fbcbedbe0aa7ed374d4b5a69', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eabe2a1032d25c5e2f929fc2af4cc2b3e4637d7', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3b2b7ba47be069af4088463087f4f77765afac', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63ce561640ad18c5f31515db3ef572c1fc2a1fce', 'committer_username': 'outofambit', 'committer_name': 'cypress evelyn masso', 'committer_email': 'coding@outofambit.com', 'commit_date': datetime.datetime(2011, 8, 7, 19, 27, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '811a836b9dca5abbcf47c76c927ad5d529222bfb', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8991a4a80628ae633f0676c12d83a0849e699e80', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86561c59c489a2d2e30c9efb1b077255917220f4', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f88ca684603ce1c0829eb55613f1916491bb1747', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eabd313bb06977ddb004562381df26cb8c23a980', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa62b17e7b7f6f57a603c090f20156bc61f69d43', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '859847fe565560ee49f2c287057d9f40ee06feaa', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d9964cf30502ba3ae1c4902cc70c1bc093acee3', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}]",Shantanu Kaushik,54030684,,User,,28,,19,7
689837961,Detecting redeclaration of p5.js reserved constants and functions,"<!--
  Thank you for contributing! Please use this pull request (PR) template.


 In the description field of this PR, include ""resolves #XXXX"" tagging the issue you are fixing. If this PR addresses the issue but doesn't completely resolve it (ie the issue should remain open after your PR is merged), write ""addresses #XXXX"".-->
Resolves #5350

 Changes:
<!-- Add here what changes were made in this pull request and if possible provide links showcasing the changes. -->

- The new file `sketch_reader.js` contains the code that will help the FES detect redeclaration of p5.js constants and functions.
- Inline documentation is included
- Unit tests are included

 Screenshots of the change:
<!-- If applicable, add screenshots depicting the changes. -->
Detection of p5.js reserved function:
![image](https://user-images.githubusercontent.com/54030684/128673985-c28f1edd-e4bd-4e89-9392-3b5ed7abd5e6.png)

Detection of p5.js reserved constant
![image](https://user-images.githubusercontent.com/54030684/128674003-08374768-f606-4d6b-9c09-ea53d2d61ae4.png)


#### PR Checklist
<!--
  To check any option, replace the ""[ ]"" with a ""[x]"". Be sure to check out how it looks in the Preview tab! Feel free to remove any portion of the template that is not relevant for your issue.
-->

- [x] `npm run lint` passes
- [x] [Inline documentation] is included / updated
- [x] [Unit tests] are included / updated

[Inline documentation]: https://github.com/processing/p5.js/blob/main/contributor_docs/inline_documentation.md
[Unit tests]: https://github.com/processing/p5.js/tree/main/contributor_docs#unit-tests
",True,5351,https://api.github.com/repos/processing/p5.js/pulls/5351,https://github.com/processing/p5.js/pull/5351,closed,523,0,6,17,1,44,0,0,[],2021-07-14 11:45:43+00:00,2021-08-12 23:04:03+00:00,2546300.0,"29 days, 11:18:20","[{'comment_id': 676131343, 'comment_body': 'name sounds good to me!', 'comment_created': datetime.datetime(2021, 7, 25, 11, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676131494, 'comment_body': 'also reads well! ', 'comment_created': datetime.datetime(2021, 7, 25, 11, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676189124, 'comment_body': 'throwing an error here: ""Uncaught (in promise) TypeError: Failed to fetch""', 'comment_created': datetime.datetime(2021, 7, 25, 19, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676189301, 'comment_body': 'same fetching error here', 'comment_created': datetime.datetime(2021, 7, 25, 19, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676189405, 'comment_body': ""I'm getting a fetching error in this promise"", 'comment_created': datetime.datetime(2021, 7, 25, 19, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676189441, 'comment_body': 'I wonder how these compares to the style of other errors.  let chat about it!', 'comment_created': datetime.datetime(2021, 7, 25, 19, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 676264844, 'comment_body': 'yeah cool!\r\n', 'comment_created': datetime.datetime(2021, 7, 26, 3, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 677456879, 'comment_body': 'I suggest making a variable with a descriptive name for this check (a.k.a. ""what is this condition checking for?"")', 'comment_created': datetime.datetime(2021, 7, 27, 13, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677484317, 'comment_body': 'The functional style works great here! I think we can minimize duplication though. Some ideas:\r\n\r\n```javascript\r\n\r\nlet arr = code\r\n  .split(\'\\n\')\r\n  // Doing this before line 162 avoids an extra .map call\r\n  .map(line => line.trim()) \r\n  // Here you can also filter out the comments before both extractions\r\n  .filter(line => line !== \'\' && !line.includes(\'//\'))\r\n```\r\n\r\nThe rest of the code filters out lines before sending to function/constant extraction. Because of that, some cases end up unchecked:\r\n```javascript\r\n// Declaring reserved functions as constants (and vice-versa). This also passes\r\nlet background = ""#ffffff""\r\nlet PI = x => 1\r\n\r\n// Here, PI is redeclared as a constant, but it\'s not checked: the code thinks it\'s a function (=>)\r\nlet PI = [1,2,3,4].map(x => x * 2)\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 14, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677538508, 'comment_body': 'Nice, great job!', 'comment_created': datetime.datetime(2021, 7, 27, 15, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677538648, 'comment_body': 'Looks good! Does `ele.match(reg)` always have a `[1]` element?', 'comment_created': datetime.datetime(2021, 7, 27, 15, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677538730, 'comment_body': 'I suggest splitting this code a bit: You can try creating a function from the lambda at line 104, and end up with something like:\r\n\r\n```javascript\r\nconst extractVariables = arr => arr\r\n        .map(applyVariableRegex) // Apply regexes to check for matches (lines 104 to 113, kind of)\r\n        .filter(...) // Filter out whatever doesn\'t match (line 113)\r\n        .reduce(...) // Flatten the ""ele"" items into the final list\r\n\r\nconst applyVariableRegex = s => {\r\n  if (s.includes(\'=\')) { ... }\r\n  ...\r\n}\r\n\r\n...\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 15, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677543652, 'comment_body': ""You can use `Array.every()` here:\r\n```javascript\r\n\r\nignore_files = ['p5.js', 'p5.min.js', 'p5.sounds.js', 'p5.sounds.min.js', 'previewScripts']\r\n\r\n...\r\n  .filter(attr => attr !== null\r\n      ...\r\n      && ignore_files.every(filename => !attr.includes(filename))\r\n  )\r\n\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 7, 27, 15, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 677935961, 'comment_body': 'yeah, I will update the code.\r\n', 'comment_created': datetime.datetime(2021, 7, 28, 2, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 677936593, 'comment_body': 'yes, it is because we are using capture groups here and they return an array with 2 elements in them and the 2nd element is the one that we require.', 'comment_created': datetime.datetime(2021, 7, 28, 2, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 677938822, 'comment_body': ""the `extractVariables` function's purpose is to apply the regex and extract the function names so I guess code should be here and using another function for regex matching would be overdoing it. I am happy to defer though. What are your thoughts?"", 'comment_created': datetime.datetime(2021, 7, 28, 3, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 678254218, 'comment_body': 'I have updated the code\r\n', 'comment_created': datetime.datetime(2021, 7, 28, 12, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 680375487, 'comment_body': 'do this for all variables across the file: for example instead of ele say element or whatever ele stands for. instead of arr say elementArray', 'comment_created': datetime.datetime(2021, 7, 31, 15, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680375775, 'comment_body': 'instead of `arr` use a descriptive name for the array `variablesArray`. We do this in p5.js to make the code more accessible to new contributors and to other contributors that might be trying to understand what you are doing.', 'comment_created': datetime.datetime(2021, 7, 31, 15, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680375936, 'comment_body': 'great in line documentation here! Can you do the same from lines 68-78', 'comment_created': datetime.datetime(2021, 7, 31, 16, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376063, 'comment_body': '`keyArray` instead of `keyArr`', 'comment_created': datetime.datetime(2021, 7, 31, 16, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376138, 'comment_body': 'for all regex add a comment describing what you are doing', 'comment_created': datetime.datetime(2021, 7, 31, 16, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376170, 'comment_body': 'use descriptive variable names', 'comment_created': datetime.datetime(2021, 7, 31, 16, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376282, 'comment_body': 'use descriptive variable name instead of str', 'comment_created': datetime.datetime(2021, 7, 31, 16, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680376550, 'comment_body': 'I agree with @Aloneduckling on this one!', 'comment_created': datetime.datetime(2021, 7, 31, 16, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 680638213, 'comment_body': 'ok I will update the code', 'comment_created': datetime.datetime(2021, 8, 2, 3, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 680638352, 'comment_body': 'ok I will make the changes soon', 'comment_created': datetime.datetime(2021, 8, 2, 3, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 680858026, 'comment_body': 'I have also added a good resource https://regexr.com/ in the comments for the ease of understanding of each regex. Is it ok?', 'comment_created': datetime.datetime(2021, 8, 2, 10, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681174751, 'comment_body': 'Alright! That makes sense', 'comment_created': datetime.datetime(2021, 8, 2, 18, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681206985, 'comment_body': ""Suggestion: group the regexes together and name each one after what it searches for.\r\nThis way they're easier to find, understand and modify, and you can reuse them.\r\nThey could be file-level constants since in line 174 the one of them is also used\r\n\r\nFor instance:\r\n```javascript\r\nconst varName = /(?:(?:let|const|var)\\s+)?([\\w$]+)/\r\nconst varNameWithComma = /(?:(?:let|const|var)\\s+)?([\\w$,]+)/\r\nconst letConstName = /(?:(?:let|const)\\s+)([\\w$]+)/\r\n\r\n// Then later:\r\nlet m = s.match(varName)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 2, 19, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681221993, 'comment_body': '```suggestion\r\n   * Checks if any p5.js constant or function is\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 19, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681231059, 'comment_body': 'Here you can use `if (moveAhead) return` to avoid extra indentation', 'comment_created': datetime.datetime(2021, 8, 2, 19, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681235293, 'comment_body': ""I think this line is a bit confusing - using `isFound` to break the loop is clearer (if that's possible). In fact, you could just `return true` straight from line 344"", 'comment_created': datetime.datetime(2021, 8, 2, 20, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681236700, 'comment_body': 'Same as line `349`', 'comment_created': datetime.datetime(2021, 8, 2, 20, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681238739, 'comment_body': ""I don't see the index `i` being used anywhere else, maybe you can use a for-of instead:\r\n```javascript\r\nfor (let function_name of functionArray) { ... }\r\n```"", 'comment_created': datetime.datetime(2021, 8, 2, 20, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681709848, 'comment_body': 'I used for loop here because when p5.js is bundled it is converted to ES5 format and this conversion sometimes causes problems especially with the new variations of for loop. So to be on the safer side I used the traditional for loop.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681718377, 'comment_body': 'I will make the changes', 'comment_created': datetime.datetime(2021, 8, 3, 12, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681719056, 'comment_body': 'This is a great suggestion thanks. I will change the code and push it soon', 'comment_created': datetime.datetime(2021, 8, 3, 12, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681720000, 'comment_body': 'Thanks for the suggestion, will make the changes.', 'comment_created': datetime.datetime(2021, 8, 3, 12, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}, {'comment_id': 681762732, 'comment_body': ""I see, that makes sense. I'll mark this as resolved then"", 'comment_created': datetime.datetime(2021, 8, 3, 13, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ghalestrilo', 'type': 'User'}, {'comment_id': 681882970, 'comment_body': 'awesome!', 'comment_created': datetime.datetime(2021, 8, 3, 15, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 685154601, 'comment_body': 'be more detailed about what you mean with this. Why do we need this?', 'comment_created': datetime.datetime(2021, 8, 9, 12, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 685158401, 'comment_body': 'new features such as ', 'comment_created': datetime.datetime(2021, 8, 9, 12, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lm-n', 'type': 'User'}, {'comment_id': 686098878, 'comment_body': 'I made the changes. Please have a look', 'comment_created': datetime.datetime(2021, 8, 10, 14, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Aloneduckling', 'type': 'User'}]","[{'commit_sha': '824703392ef756644f9ad0991658e97652197b8a', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea9e9664bdfb1125c3768c10cc29440d1327df8f', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e43010a212d4b0e0229c9c0e4c71f1bb9910cd', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4beecefaa1b4413bf7aad1eaed9ba9028061b730', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '749b8e6101f3c59d52158d11573c24e74d495772', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03b62d15b5c51b27ef123a63f1cbe87ee0fd63b', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470e97ffdf62db8ee59b396de37ebff00850722d', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c515e50fcf38807e80243531a7eabb7da09ee5f', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95bf4ccabf23b50bc5c8aec0a010bf62c8f97a6', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa1d9da0bf4e04cc2fe972736188670ce59677c4', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ac204364bc80a6531a766cdd1017e0addd6db2', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f15027b4abec9be73ae46ce8d5375beabfeb030', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '285647d83bc6e269c2ef54e03e6fed9c307c9e3d', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de5fba06b44002bae411997715a4c74775a47ef', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e943b325aa4fade179673ff2cc1f8400270b913c', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a890fc131972799674cc0b443c954cf4a6f7bb2c', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9442267c176f37d48a4e0de893bf784e11e6c4', 'committer_username': 'Aloneduckling', 'committer_name': 'Shantanu Kaushik', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 12, 13, 34, 26, tzinfo=datetime.timezone.utc)}]",Shantanu Kaushik,54030684,,User,,28,,19,7

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
8424040,p5.js,processing/p5.js,JavaScript,3255,21318,498,753,13058,313,7,40,"[{'id': 717103931, 'number': 5383, 'closed': datetime.datetime(2021, 8, 23, 16, 15, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 21, 6, 40, 38, tzinfo=datetime.timezone.utc), 'time_taken': 207284.0, 'time_delta': '2 days, 9:34:44', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 710772444, 'number': 5372, 'closed': datetime.datetime(2021, 8, 20, 13, 39, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 11, 53, 42, tzinfo=datetime.timezone.utc), 'time_taken': 697556.0, 'time_delta': '8 days, 1:45:56', 'additions': 73, 'deletions': 0, 'state': 'closed'}, {'id': 689837961, 'number': 5351, 'closed': datetime.datetime(2021, 8, 12, 23, 4, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 14, 11, 45, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2546300.0, 'time_delta': '29 days, 11:18:20', 'additions': 523, 'deletions': 0, 'state': 'closed'}, {'id': 668256669, 'number': 5305, 'closed': datetime.datetime(2021, 7, 11, 14, 3, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 15, 10, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2587987.0, 'time_delta': '29 days, 22:53:07', 'additions': 487, 'deletions': 211, 'state': 'closed'}, {'id': 622694744, 'number': 5205, 'closed': datetime.datetime(2021, 4, 26, 14, 56, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 25, 4, 53, 30, tzinfo=datetime.timezone.utc), 'time_taken': 122609.0, 'time_delta': '1 day, 10:03:29', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 622493199, 'number': 5204, 'closed': datetime.datetime(2021, 4, 25, 4, 56, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 24, 5, 4, 34, tzinfo=datetime.timezone.utc), 'time_taken': 85928.0, 'time_delta': '23:52:08', 'additions': 28, 'deletions': 12, 'state': 'closed'}, {'id': 613063030, 'number': 5168, 'closed': datetime.datetime(2021, 4, 27, 18, 7, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 11, 12, 12, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1403686.0, 'time_delta': '16 days, 5:54:46', 'additions': 26, 'deletions': 12, 'state': 'closed'}, {'id': 592298273, 'number': 5084, 'closed': datetime.datetime(2021, 3, 13, 21, 37, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 5, 25, 55, tzinfo=datetime.timezone.utc), 'time_taken': 58313.0, 'time_delta': '16:11:53', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 586434260, 'number': 5071, 'closed': datetime.datetime(2021, 3, 9, 15, 10, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 8, 4, 40, 41, tzinfo=datetime.timezone.utc), 'time_taken': 124169.0, 'time_delta': '1 day, 10:29:29', 'additions': 238, 'deletions': 0, 'state': 'closed'}, {'id': 548979794, 'number': 4979, 'closed': datetime.datetime(2021, 1, 8, 17, 1, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 5, 12, 32, 16, tzinfo=datetime.timezone.utc), 'time_taken': 275367.0, 'time_delta': '3 days, 4:29:27', 'additions': 34, 'deletions': 13, 'state': 'closed'}, {'id': 495910743, 'number': 4819, 'closed': datetime.datetime(2021, 1, 4, 16, 43, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 1, 2, 47, 12, tzinfo=datetime.timezone.utc), 'time_taken': 8258192.0, 'time_delta': '95 days, 13:56:32', 'additions': 16, 'deletions': 16, 'state': 'closed'}]"
