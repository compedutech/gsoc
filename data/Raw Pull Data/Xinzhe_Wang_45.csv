pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
437774080,lua support for tls module,Add lua setsockopt support for tls module.,True,1,https://api.github.com/repos/luainkernel/ktls/pulls/1,https://github.com/luainkernel/ktls/pull/1,closed,5976,0,13,3,0,23,0,0,[],2020-06-22 08:30:43+00:00,2020-07-04 21:52:20+00:00,1084897.0,"12 days, 13:21:37","[{'comment_id': 446546868, 'comment_body': 'Mixed indentation.\r\nPlease fix this.', 'comment_created': datetime.datetime(2020, 6, 27, 17, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 446546972, 'comment_body': 'Why did you remove this file?', 'comment_created': datetime.datetime(2020, 6, 27, 17, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 446547078, 'comment_body': ""This doesn't make much sense.\r\n\r\nWhy not?\r\n```\r\nobj-$(CONFIG_KTLS) := tls.o tls_main.o tls_sw.o tls_device.o tls_device_fallback.o\r\n```"", 'comment_created': datetime.datetime(2020, 6, 27, 17, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 446547350, 'comment_body': 'While testing we should prefer a controlled environment. This includes de server side as well.\r\nMoving on you should setup a local server with TLS support.', 'comment_created': datetime.datetime(2020, 6, 27, 17, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 446547471, 'comment_body': ""You can use `'` for strings in Lua."", 'comment_created': datetime.datetime(2020, 6, 27, 17, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 446547676, 'comment_body': '`GFP_ATOMIC` is not needed here in this context.\r\nYou can use `GFP_KERNEL`.', 'comment_created': datetime.datetime(2020, 6, 27, 17, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 446547727, 'comment_body': ""Code style doesn't follow already existing code.\r\nThis is bad. You should always follow the existing code's style."", 'comment_created': datetime.datetime(2020, 6, 27, 17, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 446548111, 'comment_body': 'Not ideal.\r\nThis will share one Lua state between all processes that use TLS.\r\nThe mutex access will pay a huge price in a multi-threaded web server.\r\nAlso, this would share the scripts between the processes.\r\nWhat if there are two scripts that define two different functions but with the same name?', 'comment_created': datetime.datetime(2020, 6, 27, 17, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 446832785, 'comment_body': 'Yes this is just a test\r\nIn future it will be removed.', 'comment_created': datetime.datetime(2020, 6, 29, 7, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 446838985, 'comment_body': 'We move tls module out of linux kernel source so we dont have cmd like `make menuconfig`. For simplification I moved the config to Makefile directly.', 'comment_created': datetime.datetime(2020, 6, 29, 7, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 447971637, 'comment_body': ""Hmmm, that's an assumption that doesn't always hold. For instance a user could clone this repository in-tree and integrate to the in-tree Kbuild system.\r\nLet's re-introduce this file."", 'comment_created': datetime.datetime(2020, 6, 30, 20, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 447974007, 'comment_body': 'This works for now.\r\nIn the next steps, you need to find a mechanism to have these states allocated per process and persist them.', 'comment_created': datetime.datetime(2020, 6, 30, 20, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 447975567, 'comment_body': ""The code style (indentation) of the code you are introducing is still different from the Linux's source.\r\n"", 'comment_created': datetime.datetime(2020, 6, 30, 20, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 448613024, 'comment_body': 'I think maybe `do_tls_loadlua` would be a better name', 'comment_created': datetime.datetime(2020, 7, 1, 20, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 448613066, 'comment_body': 'This is a minor issue, but normally we name Lua state variables as L', 'comment_created': datetime.datetime(2020, 7, 1, 20, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 449434176, 'comment_body': 'reverted', 'comment_created': datetime.datetime(2020, 7, 3, 7, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 449466052, 'comment_body': 'will fix in next PR', 'comment_created': datetime.datetime(2020, 7, 3, 8, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 449466165, 'comment_body': 'will fix in next PR', 'comment_created': datetime.datetime(2020, 7, 3, 8, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 449470148, 'comment_body': 'No need to post pone this minor fix.\r\nPlease fix it here.', 'comment_created': datetime.datetime(2020, 7, 3, 9, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 449470198, 'comment_body': 'No need to post pone this minor fix.\r\nPlease fix it here.', 'comment_created': datetime.datetime(2020, 7, 3, 9, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 449474102, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 9, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 449474509, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 3, 9, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 449475139, 'comment_body': 'In next PR I merge it with recv script in a struct to persist the state', 'comment_created': datetime.datetime(2020, 7, 3, 9, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}]","[{'commit_sha': 'd631526d1dfcf0c1ca5b787281b42bd9c9461b20', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'df1a3bb438796d51fd2bad4a0910ec4ed8309824', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba52ffcaf4b6f5fd8488a6bd54156243fd4231f2', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}]",Xinzhe Wang,16700613,me@imwxz.com,User,,53,,31,189
444233777,Add recv hook and improve test,"![1](https://user-images.githubusercontent.com/16700613/86504441-ecbc9400-bdea-11ea-92ad-8eb2eb14d02f.png)
",True,2,https://api.github.com/repos/luainkernel/ktls/pulls/2,https://github.com/luainkernel/ktls/pull/2,closed,1305,81,16,2,0,27,0,0,[],2020-07-04 03:35:43+00:00,2020-07-23 11:28:26+00:00,1669963.0,"19 days, 7:52:43","[{'comment_id': 454569112, 'comment_body': 'Time to split the two sources into client and server and run them in different processes.', 'comment_created': datetime.datetime(2020, 7, 14, 18, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 454578527, 'comment_body': 'OK, you load and run the Lua chunk. We are missing entry points here.\r\nThe scripts will look like this:\r\n```Lua\r\nfunction process(pkt)\r\n  -- recv() entry point\r\n  -- do stuff with the pkt...\r\nend\r\n\r\n-- the global scope runs when the script is loaded\r\n-- we should only setup stuff\r\nsetup()\r\nprint(""Finished setup"")\r\n```\r\n\r\nThe `setsockopt()` runs the global scope.\r\nThe `recv()` runs the entry point.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 454583285, 'comment_body': 'This is not correct see my other comments.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 454583466, 'comment_body': 'Flushing the states makes no sense.\r\nYou should find a way to propagate the error to the program in user space.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 454584170, 'comment_body': ""This function is plagued by a bad design decision.\r\nThere's no need to keep the scripts in memory.\r\nLua will do exactly this, in a much more efficient form.\r\nThe user space program, after loading the script, should specify entry points to be called.\r\nIn our case, we should call an entry point (a Lua function) after we get the decrypted message.\r\nWe should have different `setsockopt`[1] options to deal with these scenarios, instead of funneling everything into this function.\r\n\r\n[1] I think we need only two. `TLS_LUA_LOADSCRIPT` and `TLS_LUA_ENTRYPOINT`."", 'comment_created': datetime.datetime(2020, 7, 14, 19, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 454587336, 'comment_body': ""There's no need to keep the scripts here. Lua will do this internally for us, just load them into the state.\r\nSee my other comments."", 'comment_created': datetime.datetime(2020, 7, 14, 19, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 454588860, 'comment_body': 'This struct needs to be repurposed. See my other comments.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 454589907, 'comment_body': 'The Lua state has everything we need.\r\nWe only need to keep one more extra information, which is the entry point to call on the `recv()` system call.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 458522222, 'comment_body': 'Maybe we should create a fixed size array for the function name, instead of just using a pointer. @tammela what do you think?', 'comment_created': datetime.datetime(2020, 7, 22, 4, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 458522918, 'comment_body': ""For now I believe it's ok to push the message as a string, but in the near future we should think about using something like Luadata (https://github.com/luainkernel/luadata)."", 'comment_created': datetime.datetime(2020, 7, 22, 4, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 458525207, 'comment_body': ""I don't know if we should do this now, but it would be interesting if we could also send to user space the Lua recv function's returned value. @tammela what do you think?"", 'comment_created': datetime.datetime(2020, 7, 22, 4, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 458630367, 'comment_body': 'It looks better indeed', 'comment_created': datetime.datetime(2020, 7, 22, 8, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 458631436, 'comment_body': ""let's read the script from a file"", 'comment_created': datetime.datetime(2020, 7, 22, 8, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 458632441, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2020, 7, 22, 8, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 458652799, 'comment_body': 'Are you sure you need to copy from user here? Check the whole trace from the `recvmsg` syscall and see if there are no ""promotions"" to kernel space already.\r\n\r\nAnother thing, this is a scatter/gather array which means the buffer might not be non-linear, your code is too optimistic about it. \r\n', 'comment_created': datetime.datetime(2020, 7, 22, 9, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 458653407, 'comment_body': ""This is the HTTP payload already. I don't think luadata is needed here"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 458767797, 'comment_body': ""It seems that the function will decrypt the data into user space `msg` directly and the previous code will gather the splitted received data and decrypt into `msg`(I didn't find the `next` pointer like `skb` structure.)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 12, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 458769178, 'comment_body': 'Magically I could read the address without copy in Ubuntu but failed in Arch', 'comment_created': datetime.datetime(2020, 7, 22, 12, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 458854764, 'comment_body': 'fair enough', 'comment_created': datetime.datetime(2020, 7, 22, 14, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 459216739, 'comment_body': 'It seems we can use `process_rx_list` to make zero copy, see slack.', 'comment_created': datetime.datetime(2020, 7, 23, 5, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 459360201, 'comment_body': ""In the future, sure. For now let's stick with this simple mechanism."", 'comment_created': datetime.datetime(2020, 7, 23, 10, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 459361067, 'comment_body': 'When you push the string above, Lua already knows the payload length. No need to push it here.', 'comment_created': datetime.datetime(2020, 7, 23, 10, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 459361296, 'comment_body': '@MXWXZ Please address this comment as well', 'comment_created': datetime.datetime(2020, 7, 23, 10, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 459361749, 'comment_body': 'Make sure to add the `\\n` character in the end of the file', 'comment_created': datetime.datetime(2020, 7, 23, 10, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 459362091, 'comment_body': 'Make sure to add the `\\n` character in the end of the file\r\n\r\nFor more info:\r\nhttps://unix.stackexchange.com/questions/18743/whats-the-point-in-adding-a-new-line-to-the-end-of-a-file', 'comment_created': datetime.datetime(2020, 7, 23, 10, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 459364495, 'comment_body': 'maybe 256 is enough?', 'comment_created': datetime.datetime(2020, 7, 23, 10, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 459369787, 'comment_body': 'sounds good', 'comment_created': datetime.datetime(2020, 7, 23, 11, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}]","[{'commit_sha': '6ca09bfaf5abb7fa65d8c739ae2d7f372421167b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6a6ef7f6e241629457743c2c2b7fa96fb113350f', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}]",Xinzhe Wang,16700613,me@imwxz.com,User,,53,,31,189
446441570,Change from openssl to gnutls for bugs in openssl ktls,,True,3,https://api.github.com/repos/luainkernel/ktls/pulls/3,https://github.com/luainkernel/ktls/pull/3,closed,194,231,7,1,0,0,0,0,[],2020-07-08 19:31:42+00:00,2020-07-08 19:31:58+00:00,16.0,0:00:16,[],"[{'commit_sha': '821b5b443a790f9243770a31b4db481f9b0414f2', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}]",Xinzhe Wang,16700613,me@imwxz.com,User,,53,,31,189
456665515,add http server support and benchmark,,True,4,https://api.github.com/repos/luainkernel/ktls/pulls/4,https://github.com/luainkernel/ktls/pull/4,closed,645,145,7,2,0,23,0,0,[],2020-07-25 20:28:25+00:00,2020-07-30 08:31:14+00:00,388969.0,"4 days, 12:02:49","[{'comment_id': 460519385, 'comment_body': ""Let's remove this file, as this is for testing only.\r\nWe can use `gnutls-cli` to test the server."", 'comment_created': datetime.datetime(2020, 7, 26, 12, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460519959, 'comment_body': 'use `asprintf` instead of a static buffer, you may also cache these replies before actually receiving the `GET` requests. Please review this for kTLS as well.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460520103, 'comment_body': 'Remove these globals and pass them as arguments instead to `main_server()`', 'comment_created': datetime.datetime(2020, 7, 26, 12, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460520521, 'comment_body': 'Add `Content-Type: text/plain`', 'comment_created': datetime.datetime(2020, 7, 26, 12, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460520893, 'comment_body': 'Do we really need to redo these?\r\n\r\nWhy we can\'t go straight for this?\r\n```C\r\n\t\tif (setsockopt(client, SOL_TLS, TLS_TX, &crypto_info,\r\n\t\t\t       sizeof(crypto_info))) {\r\n\t\t\tperror(""setsockopt[tls]"");\r\n\t\t\texit(-1);\r\n\t\t}\r\n```\r\n\r\nOr even better:\r\n```C\r\nif (setsockopt(client, SOL_TLS, TLS_RX|TLS_TX, &crypto_info,\r\n```\r\nIt seems that it\'s the exact same information.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460521871, 'comment_body': 'The `recv()` call above is too artificial, in the sense that we are expecting the entire message in the first call. We should be more pragmatic and use a dynamic buffer and process the http header only when we read `\\r\\n\\r\\n`, which is the end of the header message by the protocol standard.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460521908, 'comment_body': '```suggestion\r\n#define HTTP_404 ""HTTP/1.1 404 Not Found\\r\\nConnection: close""\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 12, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460521928, 'comment_body': '```suggestion\r\n#define HTTP_200                                                               \\\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 12, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460521984, 'comment_body': '```suggestion\r\n\t""HTTP/1.1 200 OK\\r\\n"" \\\r\n\t""Content-Length: %d\\r\\n"" \\\r\n\t""Connection: close\\r\\n"" \\\r\n\t""\\r\\n""\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 12, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460523112, 'comment_body': 'needs to check if it was successful', 'comment_created': datetime.datetime(2020, 7, 26, 12, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460523172, 'comment_body': 'read about `TCP_CORK` and employ it here through a command line option', 'comment_created': datetime.datetime(2020, 7, 26, 12, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460523766, 'comment_body': 'Also, improve the parsing please.', 'comment_created': datetime.datetime(2020, 7, 26, 12, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460524078, 'comment_body': 'is it really GBytes/sec?', 'comment_created': datetime.datetime(2020, 7, 26, 12, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 460534468, 'comment_body': 'according to `gnutls_record_get_state` document here https://www.gnutls.org/manual/gnutls.html\r\nThe read and write param maybe different controlled by `read` param, so I think we must split the RX and TX', 'comment_created': datetime.datetime(2020, 7, 26, 14, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 460534835, 'comment_body': 'Yes the iperf report said that', 'comment_created': datetime.datetime(2020, 7, 26, 14, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 461793215, 'comment_body': 'Split this into an import commit', 'comment_created': datetime.datetime(2020, 7, 28, 18, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 461794867, 'comment_body': '```suggestion\r\n\tif (d = opendir(path)) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 28, 18, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 461795026, 'comment_body': '```suggestion\r\n\tDIR *dir;\r\n```', 'comment_created': datetime.datetime(2020, 7, 28, 18, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 461795130, 'comment_body': '```suggestion\r\n\tstruct dirent *dentry;\r\n```', 'comment_created': datetime.datetime(2020, 7, 28, 18, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 461796344, 'comment_body': '```suggestion\r\n\tcache_replies(&cache, www_path);\r\n```', 'comment_created': datetime.datetime(2020, 7, 28, 18, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 461798067, 'comment_body': 'Got it.', 'comment_created': datetime.datetime(2020, 7, 28, 18, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 461798894, 'comment_body': '```suggestion\r\n\t\tbuf = (char *)malloc(getpagesize());\r\n```', 'comment_created': datetime.datetime(2020, 7, 28, 18, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 461813372, 'comment_body': '```suggestion\r\n```\r\nNot needed here', 'comment_created': datetime.datetime(2020, 7, 28, 19, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}]","[{'commit_sha': '07e45585d4deadbafb50e8913bacddd2f929f9f5', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '972228fde6240de6b45ec77562aa79c3b0d629f7', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}]",Xinzhe Wang,16700613,me@imwxz.com,User,,53,,31,189
463977543,benchmark,,True,6,https://api.github.com/repos/luainkernel/ktls/pulls/6,https://github.com/luainkernel/ktls/pull/6,closed,501,1895,16,4,0,11,0,0,[],2020-08-06 11:52:26+00:00,2020-08-20 16:50:35+00:00,1227489.0,"14 days, 4:58:09","[{'comment_id': 467467600, 'comment_body': '`then` is usually on the same line as `if`', 'comment_created': datetime.datetime(2020, 8, 8, 13, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 467467746, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 8, 8, 13, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 467467885, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 8, 8, 14, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 467468273, 'comment_body': 'You got the idea wrong here.\r\nThe correct idea is something like this:\r\n```Lua\r\n-- files that are available in the www root\r\n-- use a set so setsockopt can manipulate this table by running `luaL_dostring()`\r\nfiles = {}\r\nfiles[\'foo.txt\'] = true\r\nfiles[\'boo.txt\'] = true\r\n\r\nfunction recv(msg)\r\n   -- ...\r\n   if method == ""GET"" and file[name] then\r\n       return 200 -- the file is available\r\n   end\r\nend\r\n```\r\n\r\nPlease adapt the PR accordingly', 'comment_created': datetime.datetime(2020, 8, 8, 14, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 467468414, 'comment_body': 'Style changes here, what happened?', 'comment_created': datetime.datetime(2020, 8, 8, 14, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 467534803, 'comment_body': ""For the case that system lua header version is different from lunatik. Mine is the same but I'm not sure others with low or newer version can work"", 'comment_created': datetime.datetime(2020, 8, 9, 4, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}, {'comment_id': 468311222, 'comment_body': 'Do you need to look at the code if you already have the file in the cache?', 'comment_created': datetime.datetime(2020, 8, 11, 3, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 468313406, 'comment_body': 'Why not load the `WWWROOT` value inside a Lua script? I believe doing so would really simplify your code.', 'comment_created': datetime.datetime(2020, 8, 11, 4, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 468315675, 'comment_body': ""you could do something like:\r\n```\r\nbuf = ''\r\nwwwroot = 'randomdir'\r\nfiles = {'index.html', 'test.html', ... }\r\n```\r\n\r\nOr load the `wwwroot` value and the files in another script."", 'comment_created': datetime.datetime(2020, 8, 11, 4, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 468324217, 'comment_body': ""Maybe this would be simpler:\r\n```\r\nlocal name = buf:match('GET /(%S+) HTTP/%d%.%d\\r\\n')\r\n```\r\nYou can assume that, if you can't match GET, the method is incorrect.\r\n\r\nps: untested code!\r\npps: Instead of `/` you should use `path's` value and, also, take a look at this: https://tools.ietf.org/html/rfc3986#section-3.3 to create a more precise pattern"", 'comment_created': datetime.datetime(2020, 8, 11, 4, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'VictorNogueiraRio', 'type': 'User'}, {'comment_id': 469743376, 'comment_body': ""The request parser is handled in lua script so the c server didn't know the file name requested or other information."", 'comment_created': datetime.datetime(2020, 8, 13, 7, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'MXWXZ', 'type': 'User'}]","[{'commit_sha': 'ea05d584a878d764f0fd03f4013dcc5790abe6c4', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d049f59e1455e65e7fb9c8082c7f74dce0414dc', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6479b86a64c2502eb63f9d8f48da978ce82c08a7', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bad720b35611a9666075ed253acf779104f8821c', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}]",Xinzhe Wang,16700613,me@imwxz.com,User,,53,,31,189
472164947,final report,,True,8,https://api.github.com/repos/luainkernel/ktls/pulls/8,https://github.com/luainkernel/ktls/pull/8,closed,78,21,1,1,0,12,0,0,[],2020-08-23 19:09:45+00:00,2020-08-26 07:26:40+00:00,217015.0,"2 days, 12:16:55","[{'comment_id': 475421954, 'comment_body': '```suggestion\r\n- Zero copy support.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 8, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 475422300, 'comment_body': '```suggestion\r\n- The implementation is not yet optimized to avoid copies.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 8, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 475423871, 'comment_body': ""Let's add a section that explains how things work in the Linux kernel.\r\n```\r\nThe kTLS ULP operates in the network system calls, it does the encryption / decryption transparently...\r\n```"", 'comment_created': datetime.datetime(2020, 8, 24, 8, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 475424076, 'comment_body': 'Add section with all the PRs you made', 'comment_created': datetime.datetime(2020, 8, 24, 8, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 475425060, 'comment_body': ""I don't understand this phrase. Please review the structure."", 'comment_created': datetime.datetime(2020, 8, 24, 8, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 475425885, 'comment_body': 'Mention that the server only serves static files', 'comment_created': datetime.datetime(2020, 8, 24, 8, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}, {'comment_id': 475426112, 'comment_body': ""Let's show more code here"", 'comment_created': datetime.datetime(2020, 8, 24, 8, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tammela', 'type': 'User'}]","[{'commit_sha': '57ea1deb9b7e6843b0e65387c29904556eaeb784', 'committer_username': 'MXWXZ', 'committer_name': 'Xinzhe Wang', 'committer_email': 'me@imwxz.com', 'commit_date': datetime.datetime(2016, 1, 14, 9, 18, 19, tzinfo=datetime.timezone.utc)}]",Xinzhe Wang,16700613,me@imwxz.com,User,,53,,31,189

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
273586238,ktls,luainkernel/ktls,C,0,3,5,3,15,0,8,0,"[{'id': 474896882, 'number': 9, 'closed': datetime.datetime(2020, 8, 27, 20, 3, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 19, 12, 46, tzinfo=datetime.timezone.utc), 'time_taken': 3072.0, 'time_delta': '0:51:12', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 472164947, 'number': 8, 'closed': datetime.datetime(2020, 8, 26, 7, 26, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 19, 9, 45, tzinfo=datetime.timezone.utc), 'time_taken': 217015.0, 'time_delta': '2 days, 12:16:55', 'additions': 78, 'deletions': 21, 'state': 'closed'}, {'id': 471481024, 'number': 7, 'closed': datetime.datetime(2020, 8, 23, 19, 6, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 8, 1, 22, tzinfo=datetime.timezone.utc), 'time_taken': 212726.0, 'time_delta': '2 days, 11:05:26', 'additions': 51, 'deletions': 21, 'state': 'closed'}, {'id': 463977543, 'number': 6, 'closed': datetime.datetime(2020, 8, 20, 16, 50, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 11, 52, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1227489.0, 'time_delta': '14 days, 4:58:09', 'additions': 501, 'deletions': 1895, 'state': 'closed'}, {'id': 463015325, 'number': 5, 'closed': datetime.datetime(2020, 8, 6, 11, 53, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 21, 20, 56, tzinfo=datetime.timezone.utc), 'time_taken': 138750.0, 'time_delta': '1 day, 14:32:30', 'additions': 232, 'deletions': 83, 'state': 'closed'}, {'id': 456665515, 'number': 4, 'closed': datetime.datetime(2020, 7, 30, 8, 31, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 20, 28, 25, tzinfo=datetime.timezone.utc), 'time_taken': 388969.0, 'time_delta': '4 days, 12:02:49', 'additions': 645, 'deletions': 145, 'state': 'closed'}, {'id': 446441570, 'number': 3, 'closed': datetime.datetime(2020, 7, 8, 19, 31, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 19, 31, 42, tzinfo=datetime.timezone.utc), 'time_taken': 16.0, 'time_delta': '0:00:16', 'additions': 194, 'deletions': 231, 'state': 'closed'}, {'id': 444233777, 'number': 2, 'closed': datetime.datetime(2020, 7, 23, 11, 28, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 3, 35, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1669963.0, 'time_delta': '19 days, 7:52:43', 'additions': 1305, 'deletions': 81, 'state': 'closed'}, {'id': 437774080, 'number': 1, 'closed': datetime.datetime(2020, 7, 4, 21, 52, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 8, 30, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1084897.0, 'time_delta': '12 days, 13:21:37', 'additions': 5976, 'deletions': 0, 'state': 'closed'}]"
