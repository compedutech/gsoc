pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1357731502,[RF] Add exceptions to set methods for non-existing objects,"# This Pull request:

Improves exception handling of RooWorkspace for non-existing objects

## Changes or fixes:

Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases.

## Checklist:

- [x] tested changes locally
- [ ] updated the docs (if necessary)

This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",True,12860,https://api.github.com/repos/root-project/root/pulls/12860,https://github.com/root-project/root/pull/12860,closed,26,7,2,1,8,1,1,1,[{'name': 'in:RooFit/RooStats'}],2023-05-19 22:17:48+00:00,2023-05-26 10:20:44+00:00,561776.0,"6 days, 12:02:56","[{'comment_id': 1203159559, 'comment_body': '```suggestion\r\n      coutE(InputArguments) << errorMsg << std::endl;\r\n```', 'comment_created': datetime.datetime(2023, 5, 23, 23, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}]","[{'commit_sha': 'e1455b17413a7af688ee54613f68ac9c7aec9ecc', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}]",Yash Solanki,67216443,,User,,20,,1,3
1370565455,[PyROOT] Feature to initialise RooWorkspace objects in PyRoot using strings,"# This Pull request:

Adds a feature in PyROOT to create new objects in RooWorkspace using a key-value pair, which has the object name as its key and an initialization string as its value.

For example, the following snippet creates a gaussian p.d.f. - 


```Python
import ROOT

ws = ROOT.RooWorkspace(""ws"")

ws[""gauss""] = ""Gaussian(x[0.0, 10.0], mu[5.0], sigma[2.0, 0.01, 10.0])""
````

## Checklist:

- [x] tested changes locally
- [ ] updated the docs (if necessary)",True,12911,https://api.github.com/repos/root-project/root/pulls/12911,https://github.com/root-project/root/pull/12911,closed,36,0,2,2,5,0,2,1,"[{'name': 'in:PyROOT'}, {'name': 'in:RooFit/RooStats'}]",2023-05-30 14:19:35+00:00,2023-06-09 01:06:58+00:00,816443.0,"9 days, 10:47:23",[],"[{'commit_sha': '73fc04ff18edd8b16b0328a06055a25c0bcac3b6', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db78046c082bf2aee081c5dd93c5774de454cb8a', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}]",Yash Solanki,67216443,,User,,20,,1,3
1388627851,[PyROOT][RF] Feature to initialise RooWorkspace objects in PyRoot using dictionaries,"# This Pull request:

Adds a feature in PyROOT to initialize objects in RooWorkspace using dictionaries.

For example - 
```python
import ROOT

ws = ROOT.RooWorkspace(""ws"")

ws[""m1""] = dict({ ""max"": 5, ""min"": -5, ""value"": 0 })

ws[""m2""] = dict({ ""max"": 5, ""min"": -5, ""value"": 1 })

ws[""mean""] = dict({ ""type"":""sum"", ""summands"":[""m1"", ""m1""] })
```

## Checklist:

- [x] tested changes locally
- [ ] updated the docs (if necessary)

",True,12994,https://api.github.com/repos/root-project/root/pulls/12994,https://github.com/root-project/root/pull/12994,closed,191,23,9,3,10,28,2,1,"[{'name': 'in:PyROOT'}, {'name': 'in:RooFit/RooStats'}]",2023-06-12 12:33:11+00:00,2023-06-29 11:36:54+00:00,1465423.0,"16 days, 23:03:43","[{'comment_id': 1230349646, 'comment_body': '```suggestion\r\n    def test_set_item_using_dictionary(self):\r\n    \r\n        ws = ROOT.RooWorkspace()\r\n    \r\n        # Test to check if new variables are created\r\n        ws[""x""] = dict({ ""min"": 0.0, ""max"": 10.0 })\r\n```\r\nIt\'s better to start with a clean workspace for this test. Then you also don\'t need to use `self.ws` everywhere, you can just use `ws`.', 'comment_created': datetime.datetime(2023, 6, 15, 2, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1230847960, 'comment_body': ""Sure, I'll make the changes. Thank you!"", 'comment_created': datetime.datetime(2023, 6, 15, 11, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1232381374, 'comment_body': ""```suggestion\r\n                ROOT.RooJSONFactoryWSTool(self).importFromString(json_string)\r\n```\r\nLet's try to keep the logic on the Python side minimal, and also not create this overhead by passing extra strings. Why not figure out on the C++ side if this is a distribution or a function?\r\n\r\nTo do the `endswith` check on the C++ side, you can copy-paste this function inside RooJSONFactoryWSTool.cxx:\r\nhttps://github.com/root-project/root/blob/master/roofit/hs3/src/JSONFactories_HistFactory.cxx#L79\r\n\r\nOr even better, create a new utility header inside `roofit/hs3/src/` that can be used by the RooJSONFactoryWSTool and `JSONFactories_HistFactory`."", 'comment_created': datetime.datetime(2023, 6, 16, 15, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1232382831, 'comment_body': '```suggestion\r\n            # Checks if the object is a variable \r\n            is_variable = not ""type"" in value\r\n```\r\nI think this would be the cheaper way to check if this is a variable specification, right?', 'comment_created': datetime.datetime(2023, 6, 16, 15, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1232398081, 'comment_body': '```C++\r\n        elif(isinstance(value, dict)):\r\n            import_dict_to_workspace(self, key, value)\r\n```\r\nAll your nice new logic has quite a few indentation levels and the `__setitem__` function becomes quite large. Can you factor out the new logic to a new function that you define at the beginning of the file, even before the `class RooWorkspace`?', 'comment_created': datetime.datetime(2023, 6, 16, 15, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1232402199, 'comment_body': 'This `value[""name""] = key` is not needed for the variable code branch. Can you put it only in the ""is not a variable"" part?', 'comment_created': datetime.datetime(2023, 6, 16, 15, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1237069490, 'comment_body': ""Hi, thanks for the suggestion!\r\n\r\nI've divided the creation of the object and variable into two parts now- variables are created with `importVarfromString()`, and functions are created with `importFunctionfromString()`."", 'comment_created': datetime.datetime(2023, 6, 21, 14, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1237088126, 'comment_body': ""Yes, I've fixed it now"", 'comment_created': datetime.datetime(2023, 6, 21, 14, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1237100778, 'comment_body': ""Sure, I've made a new `make_json_for_variable()` function for this"", 'comment_created': datetime.datetime(2023, 6, 21, 14, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1237101495, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 6, 21, 14, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1239503521, 'comment_body': '```suggestion\r\ndef make_json_for_variable(var_name, var_dict):\r\n    val, max_value, min_value, is_constant = [None, None, None, True]\r\n    if ""value"" in var_dict:\r\n        val = var_dict[""value""]\r\n    if (""max"" in var_dict) and (""min"" in var_dict):\r\n        max_value, min_value, is_constant = var_dict[""max""], var_dict[""min""], False\r\n    if not (val is None) or not ((max_value is None) and (min_value is None)):\r\n        if(val is None):\r\n            val = (max_value+min_value)/2\r\n        # Create dictionary with domains and parameter points\r\n        json_dict = {\r\n            ""domains"": [ { ""axes"": [ {""name"": var_name} ], ""name"": ""default_domain"", ""type"": ""product_domain"" } ],\r\n            ""parameter_points"": [ { ""name"": ""default_values"", ""parameters"": [ { ""name"": var_name, ""value"": val } ] } ] \r\n        }\r\n        if is_constant:\r\n            json_dict[""parameter_points""][0][""parameters""][0][""const""] = True\r\n            json_dict[""misc""] = { ""ROOT_internal"": { key: { ""tags"" : ""Constant"" } } }\r\n        if not ((max_value is None) and (min_value is None)):\r\n            json_dict[""domains""][0][""axes""][0][""max""] = max_value\r\n            json_dict[""domains""][0][""axes""][0][""min""] = min_value\r\n        return json_dict\r\n    else:\r\n        raise SyntaxError(""Invalid Syntax: Please provide either \'value\' or \'min\' and \'max\' or both"")\r\n```\r\nYou\'ll have to also rename `key` -> `var_name` and `value` -> `var_dict` in the function body to make this work.', 'comment_created': datetime.datetime(2023, 6, 23, 8, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1239505899, 'comment_body': ""```suggestion\r\n   void importFunctionfromString(const std::string &jsonString);\r\n```\r\nYou don't even use the return value, right? So this can be a `void` function, which is also consistent with `importFunction()` then.\r\n\r\nAlso, never use single letters for variable names (I know the source of the `RooJSONFactoryWS` tool is a bad example :)). It makes it difficult to find matching variable names in a file."", 'comment_created': datetime.datetime(2023, 6, 23, 8, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1239506970, 'comment_body': 'You have to register the `JSONIOUtils.cxx` also in `roofit/hs3/CMakeLists.txt` so that it gets built.\r\n\r\nThis is the reason why the CI failed.', 'comment_created': datetime.datetime(2023, 6, 23, 8, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1239509153, 'comment_body': ""```suggestion\r\nbool endsWith(std::string_view str, std::string_view suffix)\r\n```\r\nThis doesn't need to be `const`. String views are passed by value, so it doesn't matter to the caller if they are changed or not. The `const` is usually used only for pointers and references, such that the function doesn't have side effects on the variables held by the caller."", 'comment_created': datetime.datetime(2023, 6, 23, 8, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1239510593, 'comment_body': ""This `endsWith` function is also used in `JSONFactories_HistFactory.cxx`. Can you include this utils header there too? Then the `endsWith` function doesn't need to get re-declared in `JSONFactories_HistFactory.cxx`."", 'comment_created': datetime.datetime(2023, 6, 23, 8, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1239512413, 'comment_body': '```suggestion\r\n   // Check if function is a p.d.f. \r\n   bool isDistribution = endsWith(p[""type""].val(), ""_dist"");\r\n```\r\nWhat you need to check is the name of the *type*, not the name of the object. And as you can see in for example the document I sent you, the convention is that distribution names end with `_dist`.', 'comment_created': datetime.datetime(2023, 6, 23, 8, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1240644965, 'comment_body': '```suggestion\r\n   std::stringstream is(jsonString);\r\n   this->importFunction(JSONTree::create(is)->rootnode(), false);\r\n```\r\n\r\nThere is something I noticed now, thanks to your work here. The `importFunction()` right now takes an argument `isPdf`, but actually it could just figure out if a given function is ` pdf by this `_distr` suffix, just like we are now doing in your new function!\r\n\r\nSo what about changing the signature of `importFunction()` to:\r\n```c++\r\nvoid RooJSONFactoryWSTool::importFunction(const JSONNode &p, bool importAllDependants)\r\n```\r\nAnd then, in that funciton, you\'ll do:\r\n```c++\r\n   // Check if function is a p.d.f.\r\n   bool isPdf = endsWith(p[""type""].val(), ""_dist"");+   // Check if function is a p.d.f.\r\n```\r\nLike this, the caller of `importFunction()` never needs to pass this `isPdf` argument, and your new `importFunctionfromString()` would simplify to what I suggested above.', 'comment_created': datetime.datetime(2023, 6, 24, 8, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1240962498, 'comment_body': ""That's a nice idea! I've added this in the modified commit"", 'comment_created': datetime.datetime(2023, 6, 24, 22, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1241791559, 'comment_body': '```suggestion\r\n   this->importFunction(JSONTree::create(jsonString)->rootnode(), false);\r\n```\r\nYou should `git rebase` your three commits on the current ROOT master and do this change, because ROOT master now includes a commit where you can directly create a JSONTree from a string:\r\nhttps://github.com/root-project/root/commit/392e2f77e618136238886dbacfa4496ace42c487\r\n\r\nSame for `importVarfromString()`.', 'comment_created': datetime.datetime(2023, 6, 26, 8, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1241796289, 'comment_body': '```suggestion\r\n   void importFunction(const RooFit::Detail::JSONNode &n, bool importAllDependants);\r\n   void importFunction(const std::string &jsonString, bool importAllDependants);\r\n```\r\nAt this point, your `importFunctionfromString()` is just a wrapper around `importFunction()`, only that it takes an `std::string` that will first be converted to a JSONNode.\r\n\r\nTherefore, it is a good usecase for overloading instead of creating a new function with a new name. So I would:\r\n* Rename `importFunctionfromString()` to just `importFunction()` and put its declaration right below the declaration of the original `importFunction()`\r\n* also take the `importAllDependants` flag to be consistent with the two overloads\r\n* Then, in the python code, you call `ROOT.RooJSONFactoryWSTool(self).importFunction(json_string, False)`', 'comment_created': datetime.datetime(2023, 6, 26, 8, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1241798915, 'comment_body': '```suggestion\r\n    val = None\r\n    max_value = None\r\n    min_value = None\r\n    is_constant = True\r\n```\r\nIf you are not unpacking a tuple or list variable, it is preferred for readability to make only one assignment per line.\r\n\r\nCan you change this, also in other places in this function?', 'comment_created': datetime.datetime(2023, 6, 26, 8, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1241799502, 'comment_body': 'Also here, split in 3 lines', 'comment_created': datetime.datetime(2023, 6, 26, 8, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1241801974, 'comment_body': 'Here, you can avoid one layer of nesting by instead of checking for the case where you have no `Error()`, you check for the case where you want to raise your error. Then, all the logic that follows here does not to be in any if statement, it will just run when the Error was not raised.', 'comment_created': datetime.datetime(2023, 6, 26, 8, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1241804024, 'comment_body': '```suggestion\r\n        raise ValueError(""Invalid Syntax: Please provide either \'value\' or \'min\' and \'max\' or both"")\r\n```\r\nI would rather go for `ValueError` here. `SyntaxError` is for errors in the actual Python syntax. Yes, I see why you used it because it\'s about our JSON Syntax, but from the perspective of Python the dictionaries are just values.', 'comment_created': datetime.datetime(2023, 6, 26, 8, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1242332219, 'comment_body': ""Sure, I'll do this. \r\nIn fact, I have an even smaller solution-\r\nI can initialize `is_constant` to `None` and make it `True` or `False` while assigning values. Otherwise, in case of error, it stays `None`"", 'comment_created': datetime.datetime(2023, 6, 26, 14, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1242335055, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 6, 26, 14, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1242337539, 'comment_body': 'Okay, sounds good!', 'comment_created': datetime.datetime(2023, 6, 26, 14, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1244962055, 'comment_body': ""```suggestion\r\n   _domains = std::make_unique<RooFit::JSONIO::Detail::Domains>();\r\n```\r\nSorry, with the current ROOT master it doesn't compile anymore like this :( You need to qualify the full class name."", 'comment_created': datetime.datetime(2023, 6, 28, 9, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}]","[{'commit_sha': '9dcdd717d670622eaeb32a6b7cafb97f44e0242e', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '667b826733b6fb25fa350a571b9dc78c40295f04', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a71e99d9a2780a445f568e5d94ef73e73862908', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}]",Yash Solanki,67216443,,User,,20,,1,3
1415907356,[RF][PyROOT] Refactor: move RooWorkspace variable creation logic to C++ backend,"# This Pull request:

Refactors the code and moves the logic of creating variables in RooWorkspace to C++-backend

## Changes:

Moves `make_json_for_variable` from `_rooworkspace.py` to `varJSONString` in `JSONIOUtils`

## Checklist:

- [x] tested changes locally
- [ ] updated the docs (if necessary)
",True,13150,https://api.github.com/repos/root-project/root/pulls/13150,https://github.com/root-project/root/pull/13150,closed,93,77,6,2,8,2,1,1,[{'name': 'in:RooFit/RooStats'}],2023-07-01 09:01:20+00:00,2023-07-18 07:18:10+00:00,1462610.0,"16 days, 22:16:50","[{'comment_id': 1251901850, 'comment_body': '```suggestion\r\n   if (!(isConstant || isRange)) {\r\n      throw std::invalid_argument(""Invalid Syntax: Please provide either \'value\' or \'min\' and \'max\' or both"");\r\n   }\r\n   \r\n   json axesKey = json::array();\r\n   ...\r\n```\r\nThen the rest of this function doesn\'t need to be indented and it\'s easier to read the control flow. Since you don\'t even need `else` then (after the `throw`, you are not in the function anymore anyway).\r\n\r\nI think I made that point already before on the Python side, where maybe I was not completely clear. You were doing:\r\n```Python\r\n    if is_constant is None:\r\n        raise ValueError(\r\n            ""Invalid Syntax: Please provide either \'value\' or \'min\' and \'max\' or both""\r\n        )\r\n    else:\r\n       ...\r\n```\r\nEven though the `else` is unnecessary after an `if` with an exception.', 'comment_created': datetime.datetime(2023, 7, 4, 11, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1252086908, 'comment_body': ""This went unnoticed; my bad. I've changed it now."", 'comment_created': datetime.datetime(2023, 7, 4, 14, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}]","[{'commit_sha': '0adbd1ad353c42553751b9de535b74c5182d4cac', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8048968690190a8fbaa289ea4a7846288ff5e1be', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}]",Yash Solanki,67216443,,User,,20,,1,3
1416219073,[RF] Automatic JSON I/O key management,"# This Pull request:

Loads factory expressions  and export keys in RooFit automatically to avoid unnecessary imports

## Changes:

It's not required to call `loadExportKeys` and `loadFactoryExpressions` every time to load default JSON I/O keys.

## Checklist:

- [x] tested changes locally
- [ ] updated the docs (if necessary)
",True,13152,https://api.github.com/repos/root-project/root/pulls/13152,https://github.com/root-project/root/pull/13152,closed,32,66,6,2,9,6,1,1,[{'name': 'in:RooFit/RooStats'}],2023-07-01 16:09:40+00:00,2023-07-04 19:56:17+00:00,272797.0,"3 days, 3:46:37","[{'comment_id': 1251886074, 'comment_body': 'The comment with `# Import Factory Expressions to new workspace` is meaningless now. Can you remove it too please?\r\n\r\nAlso, the file is not correctly formatted. Can you format it with `black --line-length=120` in the same commit? Thanks!', 'comment_created': datetime.datetime(2023, 7, 4, 11, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1251893377, 'comment_body': ""```suggestion\r\n{\r\n   static bool isAlreadySetup = false;\r\n   if(isAlreadySetup) {\r\n      return;\r\n   }\r\n   isAlreadySetup = true;\r\n\r\n   auto etcDir = std::string(TROOT::GetEtcDir());\r\n```\r\n\r\nWhy did you remove the part with the static flag from this function? It's better to do this here instead when calling `setupKeys()` to avoid code duplication.\r\n\r\nAlso, it's not good to define static variables outside function bodies because the risk of the static initialization order fiasko:\r\nhttps://en.cppreference.com/w/cpp/language/siof\r\n\r\nIf the static variable is inside a function, the initialization time is well defined: it happens the first time the function is called.\r\n"", 'comment_created': datetime.datetime(2023, 7, 4, 11, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1251895832, 'comment_body': 'It looks like this file is not formatted with the `.clang-format` style from the ROOT repository. Please re-format the Python and C++ files after changing them (C++ with clang-format and Python with `black --line-length=120`).', 'comment_created': datetime.datetime(2023, 7, 4, 11, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'guitargeek', 'type': 'User'}, {'comment_id': 1251989186, 'comment_body': ""Sure, I've changed it!"", 'comment_created': datetime.datetime(2023, 7, 4, 12, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1251989994, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2023, 7, 4, 12, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}, {'comment_id': 1251996481, 'comment_body': ""I initially changed `isAlreadySetup` to `true` after calling `loadExportKeys` and `loadFactoryExpressions`, which led to stack overflow due to infinite recursion.\r\n\r\nI've changed it now. Thanks for the reference!"", 'comment_created': datetime.datetime(2023, 7, 4, 12, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'yashnator', 'type': 'User'}]","[{'commit_sha': 'ecad8e6305ef6634be3ebf548d54c570ddf05258', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb353f4eea8ea9d14ad77e4c30312ff5f6e924b', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}]",Yash Solanki,67216443,,User,,20,,1,3
1492259927,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial,"# This Pull request: 

- Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`.
- Adds a new Pythonic tutorial for fitting and plotting using single-channel data

## Changes:

- `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs
-  Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace
-  A new tutorial `hf101.py`

## Checklist:

- [x] tested changes locally
- [x] updated the docs 

",False,13553,https://api.github.com/repos/root-project/root/pulls/13553,https://github.com/root-project/root/pull/13553,open,161,0,4,3,1,0,1,1,[{'name': 'in:RooFit/RooStats'}],2023-08-28 15:12:59+00:00,,0.0,,[],"[{'commit_sha': '7027af3d46839f40c4c15d05adcd05e70a2487f8', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1868dd8a6fa2b6eac592d3234e927d431266d06e', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b1ed7e929325eb788539c1c7939ec11c09f0f5a', 'committer_username': 'yashnator', 'committer_name': 'Yash Solanki', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 21, 5, 0, 14, tzinfo=datetime.timezone.utc)}]",Yash Solanki,67216443,,User,,20,,1,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
10994345,root,root-project/root,C++,1247,2609,123,533,82429,802,17,272,"[{'id': 1492259927, 'number': 13553, 'closed': None, 'created': datetime.datetime(2023, 8, 28, 15, 12, 59, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 161, 'deletions': 0, 'state': 'open'}, {'id': 1416219073, 'number': 13152, 'closed': datetime.datetime(2023, 7, 4, 19, 56, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 16, 9, 40, tzinfo=datetime.timezone.utc), 'time_taken': 272797.0, 'time_delta': '3 days, 3:46:37', 'additions': 32, 'deletions': 66, 'state': 'closed'}, {'id': 1415907356, 'number': 13150, 'closed': datetime.datetime(2023, 7, 18, 7, 18, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 9, 1, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1462610.0, 'time_delta': '16 days, 22:16:50', 'additions': 93, 'deletions': 77, 'state': 'closed'}, {'id': 1388627851, 'number': 12994, 'closed': datetime.datetime(2023, 6, 29, 11, 36, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 12, 12, 33, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1465423.0, 'time_delta': '16 days, 23:03:43', 'additions': 191, 'deletions': 23, 'state': 'closed'}, {'id': 1370565455, 'number': 12911, 'closed': datetime.datetime(2023, 6, 9, 1, 6, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 30, 14, 19, 35, tzinfo=datetime.timezone.utc), 'time_taken': 816443.0, 'time_delta': '9 days, 10:47:23', 'additions': 36, 'deletions': 0, 'state': 'closed'}, {'id': 1357731502, 'number': 12860, 'closed': datetime.datetime(2023, 5, 26, 10, 20, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 19, 22, 17, 48, tzinfo=datetime.timezone.utc), 'time_taken': 561776.0, 'time_delta': '6 days, 12:02:56', 'additions': 26, 'deletions': 7, 'state': 'closed'}]"
