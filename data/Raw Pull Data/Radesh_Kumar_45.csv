pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
671910856,Added unit tests for list of small services,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #NA.
2. This PR does the following: Added unit tests for list of small services

## List of files updated

- [x] contribution-opportunities-backend-api.service.ts
- [x] editable-collection-backend-api.service.ts
- [x] editable-story-backend-api.service.ts
- [x] read-only-collection-backend-api.service.ts'
- [x] topics-and-skills-dashboard-backend-api.service.ts
- [x] pretest-question-backend-api.service.ts

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13112,https://api.github.com/repos/oppia/oppia/pulls/13112,https://github.com/oppia/oppia/pull/13112,closed,729,137,9,17,15,5,0,2,[],2021-06-16 21:16:42+00:00,2021-06-23 18:06:06+00:00,593364.0,"6 days, 20:49:24","[{'comment_id': 654996292, 'comment_body': ""I think instead of writing 'it should fail' you should describe what it does if it fails. `it should do X when Y happens` pattern."", 'comment_created': datetime.datetime(2021, 6, 20, 22, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 654996323, 'comment_body': 'Here and at other places', 'comment_created': datetime.datetime(2021, 6, 20, 22, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 656488938, 'comment_body': 'done PTAL @aishwary023 ', 'comment_created': datetime.datetime(2021, 6, 22, 18, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 656726543, 'comment_body': 'nit: spelling mistake', 'comment_created': datetime.datetime(2021, 6, 23, 3, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 657433199, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 23, 20, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': '52994f9bd1247e8436f363af74c8f459e3a8a94e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aecd4554708d6097a3c07ce57d8ad751aba3c8ac', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed850a13d933ea1707c74c9397334b734e654102', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7b35eb1369022f1be4f1d503f7241a2ac025275', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '289fea361389c41304841378497739bf5b7cef93', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e364af8cf790ffe3fb2f289347d03dda2a1c89d6', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a15d4edc2af42e10f760f54d83371ebf59e3f2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e056310c467af33fc0554a2828cbc404b5530d0f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d248cc060869c32e75e4bd74bd078446967f71a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76cd628df39993c978782447066973339a1bda5d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2828a3ab4c6027a03bc0e3db5e1e6aeab108daaa', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9fe8a6f9bc68ea55fdac94522bb65e97bcdde3a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd03ea7c51950347c007433ae5a5ac724b48b72c8', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd037b6d1c530a1eaaeac05f5507728fc931941a1', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f477d3f456abf3bab62e992f9a8bd2ef9d5d568c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f014388147dc7b3593f41923b942fbb8d301492', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e28dd0560432b131a9b3ab78a2cdb7e2efbff89f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
678459048,Added unit tests for admin page,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Added unit tests for admin page.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
![Screenshot from 2021-06-28 15-57-28](https://user-images.githubusercontent.com/54100702/123622317-b660fb80-d829-11eb-8dfd-931c27c8cb34.png)
![Screenshot from 2021-06-28 15-57-45](https://user-images.githubusercontent.com/54100702/123622329-b9f48280-d829-11eb-9a06-2e70446243e7.png)
![Screenshot from 2021-06-28 15-58-00](https://user-images.githubusercontent.com/54100702/123622340-bcef7300-d829-11eb-9351-0a50314602e4.png)


<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13230,https://api.github.com/repos/oppia/oppia/pulls/13230,https://github.com/oppia/oppia/pull/13230,closed,968,39,7,16,12,8,0,1,[],2021-06-27 05:37:05+00:00,2021-06-30 17:31:56+00:00,302091.0,"3 days, 11:54:51","[{'comment_id': 659369690, 'comment_body': 'Please check the name of the component for both files.', 'comment_created': datetime.datetime(2021, 6, 27, 20, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 659369770, 'comment_body': '```suggestion\r\n      imports: [HttpClientTestingModule],\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 20, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 659369975, 'comment_body': 'Insert a new line between setup, action, and post-checks, so it easier for others to distinguish them. Please do the same for the rest of the tests', 'comment_created': datetime.datetime(2021, 6, 27, 20, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 659370159, 'comment_body': 'Can we test it like this? Same for the rest of the tests. You can do it if you want.\r\n\r\n```suggestion\r\n    expect(component.isConfigTabOpen()).toBe(true);\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 20, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 659392191, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 27, 23, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 659392228, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 27, 23, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 659392408, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 27, 23, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 659392457, 'comment_body': ""I think it's just preference"", 'comment_created': datetime.datetime(2021, 6, 27, 23, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': '42ad79544480f6dc3c2f792364dc5a458c6004ce', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c159998a70cd236d23ad4b9484dbeacdecbb7caa', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b73569ff34fc30d2e9f5ab96d017c1a7370dd47', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff7935aecdfcd9898d9720185e5d340180991ed7', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f171a551ac5d4cc307416663e4bb47969a8c5420', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1818fa4450ed12032f762caa67d1381a30a827ae', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42cc42355dd37c7211dd4cbd7c2b1883eeaa6817', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06cdee148a46531ddcdb9ef79dc3a1859850783e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63f548db93da87be72518868bb5b0b046cc4116', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44b77bb46503284e896540f03594b37008e5c69c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c906bdbcf080ae22a9db43064fca50cffe1bd5ae', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13e37cd8c50cc77c473aa30e6bee2b9920f020ba', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf24e08a2d8fc69c63e3a5fd3452c882552927de', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c16a25c6b069575685492373e497dd995125a10d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9e10fe5d4f69c4005a368bcfab1986935768f56', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f790b3f8389b1699bcf40872561f27610cddf30', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
677841403,Added unit tests for admin roles tab,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13206,https://api.github.com/repos/oppia/oppia/pulls/13206,https://github.com/oppia/oppia/pull/13206,closed,839,28,5,7,16,14,1,2,"[{'name': ""PR: don't merge - STALE BUILD""}]",2021-06-25 11:26:18+00:00,2021-07-06 05:12:21+00:00,927963.0,"10 days, 17:46:03","[{'comment_id': 659190947, 'comment_body': 'Just making sure if this change was intentional', 'comment_created': datetime.datetime(2021, 6, 26, 16, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 659191302, 'comment_body': '*from or maybe use `by`', 'comment_created': datetime.datetime(2021, 6, 26, 16, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 659191428, 'comment_body': '*queue', 'comment_created': datetime.datetime(2021, 6, 26, 16, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 659191461, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 6, 26, 16, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 659191549, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2021, 6, 26, 16, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 659191762, 'comment_body': 'This test description seems to be repeated throughout the file -- maybe modify it to describe the type of request, so that the descriptions are distinguishable', 'comment_created': datetime.datetime(2021, 6, 26, 16, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 659266078, 'comment_body': 'please note that we have different describe blocks for each case.', 'comment_created': datetime.datetime(2021, 6, 27, 5, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 659266269, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 27, 5, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 659266289, 'comment_body': 'yup this is intentional', 'comment_created': datetime.datetime(2021, 6, 27, 5, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 659266301, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 27, 5, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 659266302, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 27, 5, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 659266317, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 27, 5, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 659480530, 'comment_body': 'Can you please leave an explanation for this change? [This will help reviewers to quickly approve the changes!]', 'comment_created': datetime.datetime(2021, 6, 28, 5, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 659671788, 'comment_body': ""\r\n![Screenshot from 2021-06-28 16-06-09](https://user-images.githubusercontent.com/54100702/123623186-c88f6980-d82a-11eb-96c1-3b9385d797e0.png)\r\n\r\n\r\nCurrently, we have two categories of roles.\r\nOne is actual roles (admin, collection editor, moderator...)\r\nAnother one is contributor rights.\r\nWe are actually viewing contributors/ or contributor rights, In order to sync with other two buttons add rights and remove rights I've made this change."", 'comment_created': datetime.datetime(2021, 6, 28, 10, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': 'dc4f028feb12bf8e1cb947ccd6fa685515f7f2a5', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c5951bddc6075e1c36f5c4f7a42128a298aa296', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4285305bbdac16fe2ec388fb9db7186781e9b2e0', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '386d8386aed6607857695805acb70da2a47476a2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86b1a33b929bcde5b1971057439434ecbd52ddaf', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6cc1d29f17f5904288dd912bb9311ed67218c2c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ff9c5fad707d4e9aaab294e05b7c0c696341de', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
682246888,Added unit tests for the following files,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## List of files updated

- [x] collection-editor-state.service.ts
- [x] skill-description-editor.component.ts
- [x] skill-misconceptions-editor.directive.ts
- [x] misconception-editor.directive.ts
- [x] collection-player-page.directive.ts
- [x] tutor-card.directive.ts

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13284,https://api.github.com/repos/oppia/oppia/pulls/13284,https://github.com/oppia/oppia/pull/13284,closed,1756,331,9,26,15,32,0,2,[],2021-07-02 00:19:37+00:00,2021-07-09 11:42:28+00:00,645771.0,"7 days, 11:22:51","[{'comment_id': 664691232, 'comment_body': 'Why were these tests deleted?', 'comment_created': datetime.datetime(2021, 7, 6, 16, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664694840, 'comment_body': ""```suggestion\r\n    const loadCollectionSuccessCb = jasmine.createSpy('success');\r\n\r\n    // Load initial collection.\r\n```"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664694996, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 7, 6, 16, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664695184, 'comment_body': 'Ditto. Do it for other places also', 'comment_created': datetime.datetime(2021, 7, 6, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664699311, 'comment_body': ""```suggestion\r\n  it('should throw warning message when an invalid collection summary ' +\r\n    'is fetched ', fakeAsync(function() {\r\n```"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664700023, 'comment_body': ""```suggestion\r\n    ctrl.scrollToLocation('location');\r\n \r\n    expect($anchorScroll).toHaveBeenCalled();\r\n```"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664700202, 'comment_body': ""```suggestion\r\n    let eventSpy = jasmine.createSpyObj(\r\n      'event', ['stopPropagation']);\r\n \r\n    ctrl.onClickStopPropagation(eventSpy);\r\n```"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664700541, 'comment_body': '```suggestion\r\n    ctrl.explorationCardIsShown = true;\r\n\r\n    ctrl.closeOnClickingOutside();\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 16, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664703393, 'comment_body': ""```suggestion\r\n  it('should not generate path parameters when collection ' +\r\n    'node count is one', fakeAsync(function() {\r\n```\r\nIn the test `pathSvgParameters` is set to an empty string. So I'm assuming that path parameters are **not** generated. Am I right?"", 'comment_created': datetime.datetime(2021, 7, 6, 16, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664706266, 'comment_body': 'For this and rest of the tests add a space between:\r\n\r\n1. setup\r\n2. pre-checks\r\n3. action\r\n4. post-checks', 'comment_created': datetime.datetime(2021, 7, 6, 16, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664708112, 'comment_body': 'Please add when should it get toggled', 'comment_created': datetime.datetime(2021, 7, 6, 16, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664709700, 'comment_body': 'Is it possible to check what it was called with?', 'comment_created': datetime.datetime(2021, 7, 6, 16, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664709889, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2021, 7, 6, 16, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664710468, 'comment_body': 'Is it possible to check what it was called with?', 'comment_created': datetime.datetime(2021, 7, 6, 16, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 664818438, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2021, 7, 6, 19, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 664818611, 'comment_body': 'Are these changes expected in a fe tests PR?', 'comment_created': datetime.datetime(2021, 7, 6, 19, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 664869257, 'comment_body': ""Currently, these values are undefined initially.\r\nIn order to explicitly defined them as empty values, I've used null.\r\n(I will revert if these changes are not appropriate)"", 'comment_created': datetime.datetime(2021, 7, 6, 20, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664871761, 'comment_body': ""currently `_editorPreviewMode` is initialized with the initialization of the component itself( like a constructor ), which makes it hard to test the parity checks in the below if block. So, I've shifted this part of the code to `onInit` function.\r\n(It is the only place where `_editorPreviewMode` is used)"", 'comment_created': datetime.datetime(2021, 7, 6, 20, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664873942, 'comment_body': 'Previously this spec is not tested correctly, so I had to revamp the entire file.\r\n(Some functions are not even being called.)', 'comment_created': datetime.datetime(2021, 7, 6, 20, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664874366, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 6, 20, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664874507, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 6, 20, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664874542, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 6, 20, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664875608, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 6, 21, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664878261, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 6, 21, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664878326, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 6, 21, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664879224, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 6, 21, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664882931, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 6, 21, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 664888231, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 6, 21, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 665504553, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 15, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 665504601, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 7, 7, 15, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 665859620, 'comment_body': 'Ah ok thanks for explaining!', 'comment_created': datetime.datetime(2021, 7, 8, 4, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 665859819, 'comment_body': 'I think this is fine. Thanks for clarifying.', 'comment_created': datetime.datetime(2021, 7, 8, 4, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}]","[{'commit_sha': 'ad8b43178348ca2f7b24674800fb5bb850d6be19', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab2bdac104419f48bbf8e351f7e85eeb5acc42d2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae25df2d6fb12199caba52bdf60d6d0479b68033', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436afebe5a28f6d685affd02c60cc2a2d714afcb', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '070bf24f9dceadd0e5ac0606c7f9dfc978308f3d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7be11b680ac10af0c712200c75da59ab83e2b098', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '351de62ebe52cc8366c75e8618f7388b8277ab8e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1763cdb1508aaf92eabae5db539eb12ec5805f1', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac5a17057c86333bd7c54a4363c6c0c0db7406d4', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '955b6a956e9721c2b6b29f00b024d84a89daaae7', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cd520844efc61ec58bed94a893355926e8cc31d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07548809420138949384ea2703964d5d30bb5caf', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b84a96511704eaca2aa99123a1b0605b535d8141', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771f3c9eb9203dd1084f348dad936c0d1dc620e8', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5933babf56f2705ee2df4a715afd846555929c4', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51a652c603c81da47c9dabddddf50d1d3f3034f5', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d8bffe49ac61462ab24ee065c7d9639421d5993', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882b556bb2fe43c2e6cf9e8a6b9a86b8b32df94f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c0664b6d78b6d8b763026f2ab9acc9741a3c0fe', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e7610ad0fbb80823340a606373bb51041d24969', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f69b13257793b00cfc9d0e614f97b293c74a1e28', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b964a25504b5e3068341d64812d9393736828f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11f0726fad07e60b582b2d4d9ef39fd55a7e4ccd', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da2ad899ac6772b12e43cc65e3b003b8e1d4c7d4', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e420cd0d14c7085682abf1046919174c501f546d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '400b3c5f858e3c0124601677b477ea8f09a4e6f2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
676579953,Added unit tests for the following files.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## List of files updated

- [x] contribution-opportunities.service.ts
- [x] email-dashboard-data.service.ts
- [x] exploration-diff.service.ts
- [x] translate-text.service.ts
- [x] version-tree.service.ts",True,13192,https://api.github.com/repos/oppia/oppia/pulls/13192,https://github.com/oppia/oppia/pull/13192,closed,899,30,16,28,17,4,1,2,"[{'name': ""PR: don't merge - STALE BUILD""}]",2021-06-23 20:07:20+00:00,2021-07-09 11:30:04+00:00,1351364.0,"15 days, 15:22:44","[{'comment_id': 662000773, 'comment_body': 'Missing prechecks?', 'comment_created': datetime.datetime(2021, 7, 1, 6, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 662001137, 'comment_body': 'I dont think this is correct. Could you please explain?', 'comment_created': datetime.datetime(2021, 7, 1, 6, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 663414722, 'comment_body': 'I think, a better description is `it should return true when collection node is being added`\r\nchanged!', 'comment_created': datetime.datetime(2021, 7, 3, 22, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 663414723, 'comment_body': 'added!', 'comment_created': datetime.datetime(2021, 7, 3, 22, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': 'db15fc720032faf44c2b6e02817632a8d0a2f05d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fd32cb40c2442b21f28e0c525b112a3227d4f81', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c35fd212398911ba8b6f376a0df1620baa3ccd3', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a82dab043d78c0baa4cff3a65e22375d745bc38a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2edc4bf2f4e4e6e919ff3d8e7b4d635c663410ae', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6b9850ae06dac2c6d9afc15fefcd6492b7f72b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '759508220179d386cb94b3bc18c62bcf8c05ec5b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98c1d0e2705dd6abe326d47b7cc025f8636c248f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36530e5bb0a81a8ec60fc128c616bda83e45ef7f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41ff8187f607c19f3ded2eea3c593432291c2d17', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35c8416fa180037176c7d13b2a06a35bb3592cb7', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a508d226f68a594f7b2c1a8388e5f4aa3288a95b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9761ecd621ce27489c9fd94c351d293a77c7d0a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '926d9893d501a4ce6e2275dcb84ae237dce703ed', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3658c01e276e5eec94014ebbab01948bea8ad23', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92b727a52312d0f597fcff77ded1d9d58fdff253', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856ca8702425eb9939c0141cf303f399a9023154', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c633a01e714e24e522c35eb0f8f36c390141b83d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3a90b4887f6b555651eec1e5c6986b431ccbfb2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b443bafea6601755c5ee215312d87bd4298f08e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '699ed9cef501681021a6d807278bf3cb56f6796b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f264f331dd190418c92186a194d2322fa261947', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2780b73878bb3cbe62192a4caae2e705056918d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff031473a69cf0bdb810c3b05a8943e2a3c761e3', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675bcfaceef52b35980c3532b937047e89db132c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fed916ada019f31d28566ee0d5c600262749465d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd51c2d5b4e03e338d4d5115999134e0a4b883b0f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8c1d6dd45fc5b83e394c2ae71c0a1425b92fb7', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
675550161,Added unit tests for audio bar component,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Added unit tests for audio bar component

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13177,https://api.github.com/repos/oppia/oppia/pulls/13177,https://github.com/oppia/oppia/pull/13177,closed,562,28,4,13,14,17,0,2,[],2021-06-22 15:44:37+00:00,2021-06-27 05:46:30+00:00,396113.0,"4 days, 14:01:53","[{'comment_id': 656354879, 'comment_body': 'Removed unused code.\r\nSince the audio bar is working fine without these lines.\r\nDeferring @ashutoshc8101 to cross-check once.\r\nThanks!', 'comment_created': datetime.datetime(2021, 6, 22, 15, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 656383958, 'comment_body': 'I have cross-checked this. This can be removed.\r\nThanks! @Radesh-kumar \r\nCan you please remove `setProgress` and `getProgress` functions defined in audio player service too?', 'comment_created': datetime.datetime(2021, 6, 22, 16, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 656727480, 'comment_body': 'nit: extra line', 'comment_created': datetime.datetime(2021, 6, 23, 3, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 656727939, 'comment_body': 'nit: `..user pulls the...`', 'comment_created': datetime.datetime(2021, 6, 23, 3, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 656728361, 'comment_body': 'nit: `...if the number of available languages is greater than one`.', 'comment_created': datetime.datetime(2021, 6, 23, 3, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 656729438, 'comment_body': 'I think the description is wrong, should be `...play audio which are...`', 'comment_created': datetime.datetime(2021, 6, 23, 3, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 657357054, 'comment_body': 'I believe we have 1 defined in the test utils file', 'comment_created': datetime.datetime(2021, 6, 23, 18, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 657436989, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 23, 20, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 657437034, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 23, 20, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 657437046, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 23, 20, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 657437069, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 23, 20, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 657440445, 'comment_body': 'updated!', 'comment_created': datetime.datetime(2021, 6, 23, 20, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 657448930, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 23, 20, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 658285658, 'comment_body': '```suggestion\r\n * @fileoverview Unit tests for the AudioBarComponent.\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 21, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 658285933, 'comment_body': 'Move angular imports on the top*', 'comment_created': datetime.datetime(2021, 6, 24, 21, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 658695293, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 25, 11, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 658695318, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 25, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': '96ba33315e44dfc66eaca639eb29cd1bdb06603e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b9153c742501b4075a635128f742a8850b979ea', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9944d385c1e241e906e3f2b6b9945762a93c18e5', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97612ee4394a330e4925da297bb6dc9157d8de75', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '146b5e31901c6a89278e15b01831a0558abe9c21', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '310a65ab6424781c2fcda723f559a3acb190cd71', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96fe51d9004f184bd906da6c0a006d4b77de22e3', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9740653263dda68f1a5bc930af114341c4a9d8b2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8d1ce6415a13bc36eeee885fb18bd8fc847c10e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5888c9c66a59d48737411c9a5c2f948071c63ea0', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beae72050684974cf41cfeba11d817fcd26bff0d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ef839ea8f887b2e39669a23ca9e3a00c522aad3', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6adf59c2d0ad9663d7df6092519decc081682c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
669640324,Added unit tests for exploration engine service,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: Added unit tests for exploration engine service.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13084,https://api.github.com/repos/oppia/oppia/pulls/13084,https://github.com/oppia/oppia/pull/13084,closed,956,7,3,10,12,26,1,1,[{'name': 'PR: LGTM'}],2021-06-14 14:57:26+00:00,2021-06-20 22:39:24+00:00,546118.0,"6 days, 7:41:58","[{'comment_id': 651032207, 'comment_body': 'Spacing in this file is a bit of an anti-pattern.\r\nAll lines are spaced in odd numbers (3, 5, ...) instead of even.\r\nShould we catch these in lint checks @seanlip @Hudda ?', 'comment_created': datetime.datetime(2021, 6, 14, 15, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 651450383, 'comment_body': 'Yeah, I think this should be caught in lint checks. This is more a question for @Hudda and @DubeySandeep though.', 'comment_created': datetime.datetime(2021, 6, 15, 5, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 651527559, 'comment_body': 'Is it possible to test **all** the callbacks with `.toHaveBeenCalledWith`?', 'comment_created': datetime.datetime(2021, 6, 15, 7, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 651530392, 'comment_body': ""I'm not sure, but I don't think there should be a new line between these function calls, since they constitute the action part of the test. The same comment for other places also.  However, I'll leave this to your discretion."", 'comment_created': datetime.datetime(2021, 6, 15, 7, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 651532240, 'comment_body': 'When should the initial state be loaded?', 'comment_created': datetime.datetime(2021, 6, 15, 7, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 651537321, 'comment_body': 'Please make sure that the test descriptions generally, follow the format - ‘should do X if Y happens’. This and a couple of other places seems to be missing that. You can check under the `Test Descriptions` in the `Frontend Test - Review comments documentation` doc we have for more details.', 'comment_created': datetime.datetime(2021, 6, 15, 7, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 651642295, 'comment_body': '@seanlip @Radesh-kumar This issue is already tracked in #8423 ', 'comment_created': datetime.datetime(2021, 6, 15, 10, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 653108267, 'comment_body': 'Most of the tests do have `.toHaveBeenCalledWith`.\r\nIn the specific test case, success callbacks consist of HTML tags. These have random spacing which makes them hard to test.\r\n![Screenshot from 2021-06-17 04-16-42](https://user-images.githubusercontent.com/54100702/122304887-95dc9b80-cf23-11eb-8771-866fc42860b4.png)\r\nAnd I think checking implementation details of success callback is not really necessary here as we are only testing, whether the submitted answer is correct or not.', 'comment_created': datetime.datetime(2021, 6, 16, 22, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653108693, 'comment_body': 'noted!', 'comment_created': datetime.datetime(2021, 6, 16, 22, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653112317, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 16, 23, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653384665, 'comment_body': ""```suggestion\r\n  it('should return default exploration id', () => {\r\n```"", 'comment_created': datetime.datetime(2021, 6, 17, 9, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 653384758, 'comment_body': ""```suggestion\r\n    // Please note that default exploration id is 'test_id'.\r\n```"", 'comment_created': datetime.datetime(2021, 6, 17, 9, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 653385569, 'comment_body': 'Should this be a separate it block?', 'comment_created': datetime.datetime(2021, 6, 17, 9, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 653385739, 'comment_body': 'what happens if state name is not End?', 'comment_created': datetime.datetime(2021, 6, 17, 9, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 653387642, 'comment_body': 'Ok, the final error log would read ""Exploration Engine Service should return true if current state is initial state"" which is not right. (Similar to above test names). Can we make the naming slightly better?', 'comment_created': datetime.datetime(2021, 6, 17, 9, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 653388138, 'comment_body': 'Add more input cases... This just tests with 1 possible scenario', 'comment_created': datetime.datetime(2021, 6, 17, 9, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 653388355, 'comment_body': 'What if you add states?', 'comment_created': datetime.datetime(2021, 6, 17, 9, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 653594079, 'comment_body': 'The state should be final/terminal in order to get the author recommended explorations.\r\nAdded prechecks and comments.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653594116, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653594131, 'comment_body': 'Added extra checks including three states.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653595158, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653595282, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 17, 14, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653596102, 'comment_body': ""I don't think this is necessary, as the selected expectation is acting as pre-check as per https://github.com/oppia/oppia/pull/12944#discussion_r642884916"", 'comment_created': datetime.datetime(2021, 6, 17, 14, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653597665, 'comment_body': 'changed here and elsewhere.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 653978529, 'comment_body': 'If think this should be ""question content"" (question name is confusing). But I don\'t understand why we are refering to questions in the ""exploration"" engine service in the first place. It looks like it is referring to the state content. Can you add a TODO to handle this separately (i.e. we should not be referring to questions in this service)?', 'comment_created': datetime.datetime(2021, 6, 17, 21, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 654910145, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 20, 10, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': 'e667d66cb15361cb448410e3b8f2e925631ef966', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f44d323a8bf18a81c95ddb7469c367f5baff19d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4332b2ccae9788ca3c24dcafbf973bb3ac392a9d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60a53f6b84dae930ddcd5f18b99d0e115763c85', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b19072812c7c71cbd1f3a3c2fdab4a349dca36bf', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eba6d11b9ec3a167172540becf0fdc41af1ba46e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2e0f8beeb0ee68c067f70571bd70106e91ce440', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6eb530ae50a37f08e9baf5d5f0a03b9f2c9e740', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bf24d8060fac7c0e245f9ad839e252c7ccda215', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e9add4ff7f606a6e1159cbbf85dca37475eaad', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
668819460,Added unit tests for exploration player state service,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13062,https://api.github.com/repos/oppia/oppia/pulls/13062,https://github.com/oppia/oppia/pull/13062,closed,32,28,3,7,7,4,1,2,"[{'name': ""PR: don't merge - STALE BUILD""}]",2021-06-12 09:03:22+00:00,2021-06-15 05:20:59+00:00,245857.0,"2 days, 20:17:37","[{'comment_id': 650583673, 'comment_body': 'Why is this required?', 'comment_created': datetime.datetime(2021, 6, 13, 22, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 650583687, 'comment_body': 'oh! Thanks for catching this!', 'comment_created': datetime.datetime(2021, 6, 13, 22, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 650584277, 'comment_body': 'Ah never mind, I think should be fine to do this. Thanks!', 'comment_created': datetime.datetime(2021, 6, 13, 22, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 650643823, 'comment_body': 'Since the constructor will be automatically called in unit tests, it is hard to test or spy on the constructor. So, we have created a function to manually trigger and tests different edge cases.', 'comment_created': datetime.datetime(2021, 6, 14, 4, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': '4dba7c9adef609635b9ae26f4eac8b96ee97d085', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5dffbb9d0cf94e613755cfb27a12bbc8f823be7', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3edacfef7e4a81eb1c7dedc128a149fc4885bd24', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd0f17db9fcfc6b0edd57a104d2ebdd9c8fa32bf', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e59060a261e8e3703624185ddb8d4c33acaa6e38', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abcb5822d478327bd577efc5d9e7b269e52c42de', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13bd0fa2e9372f9915c6b1d42194ac6f1a1d3cba', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
657882044,Fixes: #12943 Added unit tests for question player engine service,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #12043.
2. This PR does the following: Fixes: #12943 Added unit tests for question player engine service.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,12944,https://api.github.com/repos/oppia/oppia/pulls/12944,https://github.com/oppia/oppia/pull/12944,closed,897,81,3,34,28,148,0,1,[],2021-05-31 02:08:01+00:00,2021-06-12 16:38:59+00:00,1089058.0,"12 days, 14:30:58","[{'comment_id': 642225093, 'comment_body': ""Good catch!\r\n\r\nThough I'm a bit confused. Does this mean that the question player was unusable before? /cc @aks681 "", 'comment_created': datetime.datetime(2021, 5, 31, 5, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642225452, 'comment_body': 'Why ""as unknown""?', 'comment_created': datetime.datetime(2021, 5, 31, 5, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642225493, 'comment_body': '""question"" is misspelled.', 'comment_created': datetime.datetime(2021, 5, 31, 5, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642225592, 'comment_body': 'Maybe say ""when initialized"" instead -- I think it makes it a little clearer that the initialization refers to itself rather than a third thing.', 'comment_created': datetime.datetime(2021, 5, 31, 5, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642227099, 'comment_body': 'I don\'t understand the point of this test. It seems to be testing implementation details that are not really the ""business"" of the test.\r\n\r\nTest interface, not implementation. What, from the ""outside"", is the question player service expected to do during initialization? Test that only, otherwise you end up writing a ""change detection test"" which needs to change if the implementation changes (although the end effects might stay the same).\r\n\r\nIf it is important that question player initialization loads the exploration (or similar) then have a separate test for that and state that as a required behaviour in the it().\r\n\r\nI also don\'t see why a *question* player service is calling ""load exploration"" or ""get exploration version from URL"". Is that a bug?', 'comment_created': datetime.datetime(2021, 5, 31, 5, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642227174, 'comment_body': 'Please do not use eslint-disable, here and everywhere else. Find a way to avoid the error.', 'comment_created': datetime.datetime(2021, 5, 31, 5, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642227976, 'comment_body': 'This doesn\'t explain exactly what the desired behaviour is. I think you can make it clearer. The test seems to be testing that the ""current index"" becomes the ""next index"" after recordNewCardAdded() is called, but if that\'s the case your test description should state that (""it should update the current index when a card is added"") and should also test the current index *before* recordNewCardAdded() is called to ensure that it is different from the ""after"" state.', 'comment_created': datetime.datetime(2021, 5, 31, 5, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642228244, 'comment_body': 'What is the point of testing the question player engine in ""not question player mode""? Is it supposed to be used in such a context?\r\n\r\nNote that this is one of the possible weaknesses of mocking -- you might be mocking with invalid values.', 'comment_created': datetime.datetime(2021, 5, 31, 5, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642228599, 'comment_body': 'Why is the question ID the same as the exploration ID? That seems confusing.', 'comment_created': datetime.datetime(2021, 5, 31, 5, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642230186, 'comment_body': 'Please describe the behaviour more clearly. getCurrentQuestion() seems to be the thing being tested here, so you should have a describe block for that. Then, you can say it ""should return the current question"". On the other hand, if you want the describe to be about the engine service, then you would say that it returns the current question rather than gets it.\r\n\r\nAlso, you might want to change the definition of what is current and ensure that a new question gets returned after that when getCurrentQuestion() is called. Think about what can go wrong and try to test that. The current test is very minimal.', 'comment_created': datetime.datetime(2021, 5, 31, 6, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642230507, 'comment_body': 'You should typically have at least two test cases -- try loading with one backend dict, check the number of questions, try loading with a different backend dict, check that the number is now different.', 'comment_created': datetime.datetime(2021, 5, 31, 6, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642230665, 'comment_body': 'Just noting that this is a good test because it tests the ""before"" and ""after"".', 'comment_created': datetime.datetime(2021, 5, 31, 6, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642231141, 'comment_body': 'Again, need at least two possibilities. Otherwise for all we know this could be returning the site language code.', 'comment_created': datetime.datetime(2021, 5, 31, 6, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642608948, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 5, 31, 17, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642619646, 'comment_body': 'changed.', 'comment_created': datetime.datetime(2021, 5, 31, 17, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642620108, 'comment_body': 'removed,', 'comment_created': datetime.datetime(2021, 5, 31, 17, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642637430, 'comment_body': 'Added extra check.', 'comment_created': datetime.datetime(2021, 5, 31, 18, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642638309, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 5, 31, 18, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642647651, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642647720, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642647790, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642648449, 'comment_body': 'I think Skills which contains misconceptions are not working properly before.\r\nNormal questions are working fine.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642657042, 'comment_body': 'removed here.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642657546, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642690585, 'comment_body': 'Removed private variables since it is hard to test them without getting lint errors as we are injecting service into the Testbed, but not initializing a class itself.\r\nSo they are not available in the spec file.\r\n\r\nI can think of fixing this issue using three methods\r\n1. Bypassing lints in spec file https://stackoverflow.com/questions/55336796/access-a-private-variable-in-spec-ts-angular6\r\n2. Removing private variables\r\n3. adding setters and getters for each variable (I think, only for the sake of tests adding these are redundant)\r\n\r\n', 'comment_created': datetime.datetime(2021, 5, 31, 22, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642692789, 'comment_body': ""I'm not sure how the exploration thing works here.\r\n@kevintab95 PTAL."", 'comment_created': datetime.datetime(2021, 5, 31, 22, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642710649, 'comment_body': 'Please don\'t just say ""I\'m not sure"". For anything like this, create a [short debugging doc](https://github.com/oppia/oppia/wiki/Debugging-Docs) with all your thoughts/investigation and then we\'ll have something concrete to discuss.', 'comment_created': datetime.datetime(2021, 6, 1, 0, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642710825, 'comment_body': 'Add newline above this', 'comment_created': datetime.datetime(2021, 6, 1, 0, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642711321, 'comment_body': 'I still don\'t understand why checking whether all these things have been called corresponds to ""questions have been loaded"". It is testing the implementation-level details too much IMO -- unless you can explain why the loading of questions necessitates each of these things being called, under any possible implementation. If so, such explanation should be provided inline as code comments. However, if such checks don\'t actually imply that questions are loaded, then please drop them.\r\n\r\nHere is how you can think about it: What does ""load questions"" mean? Presumably there is a variable somewhere which contains the questions. So maybe check that that is empty before init(), and populated after init()? That is all that is needed.\r\n\r\nIf you are trying to test something different then please update the description accordingly.\r\n', 'comment_created': datetime.datetime(2021, 6, 1, 0, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642711405, 'comment_body': 'Add a space after ""it"", otherwise you\'ll get ""itis"" in the terminal.', 'comment_created': datetime.datetime(2021, 6, 1, 0, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642711732, 'comment_body': 'Why is this a post-condition check? The test description suggests that making this hold is part of the setup for the test.', 'comment_created': datetime.datetime(2021, 6, 1, 0, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642711789, 'comment_body': 'In what way is this an ""update"" of the exploration version? If you want to show an update then you need to show that the original value was different.', 'comment_created': datetime.datetime(2021, 6, 1, 0, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642711866, 'comment_body': 'Why ""as unknown"" here and elsewhere?', 'comment_created': datetime.datetime(2021, 6, 1, 0, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642712061, 'comment_body': 'Isn\'t this equivalent to ""return html"" (in all cases)?', 'comment_created': datetime.datetime(2021, 6, 1, 0, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642712344, 'comment_body': 'Be more specific in the test descriptions. E.g. this test appears to be testing ""it should update the current question ID when a new card is added"".\r\n\r\nIn general explain what the trigger is and what the expected result is.', 'comment_created': datetime.datetime(2021, 6, 1, 0, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642712585, 'comment_body': ""Probably need a pre-condition test as well (before the init()) to make sure it's null and that the init() therefore changed it?"", 'comment_created': datetime.datetime(2021, 6, 1, 0, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642712665, 'comment_body': 'Question --> Questions', 'comment_created': datetime.datetime(2021, 6, 1, 0, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642713557, 'comment_body': 'If variables are private then you shouldn\'t be accessing them directly in the spec file. Similar to backend tests, what we typically do is to test a public function which surfaces the variable. Otherwise, your tests should not be checking the values of those variables because they are considered ""internal state"". \r\n\r\nRemember, tests should test the public interface. It is important that they do not test the implementation. If the implementation changes but the behaviour is still correct then your tests should still pass with no issues. This is a really important principle to bear in mind when writing tests, otherwise you will have tests that are overfitted to the specific implementation that is in the code.', 'comment_created': datetime.datetime(2021, 6, 1, 0, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642787912, 'comment_body': 'We can not directly access the questionId [""getCurrentQuestionId()""] before init, since it is dependent on ""this.questions"" which will be initialized only after init.', 'comment_created': datetime.datetime(2021, 6, 1, 5, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642787936, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 1, 5, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642788040, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 1, 5, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642788484, 'comment_body': 'I\'ve already added a check original value to be ""1"", then updated value to ""2"".', 'comment_created': datetime.datetime(2021, 6, 1, 5, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642789236, 'comment_body': 'removed.', 'comment_created': datetime.datetime(2021, 6, 1, 5, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642789410, 'comment_body': 'updated here and every where else.', 'comment_created': datetime.datetime(2021, 6, 1, 5, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642789777, 'comment_body': 'I get it now,\r\nPreviously I was testing the entire workflow and it is being overfitted, which is not ideal.\r\nUpdated now.', 'comment_created': datetime.datetime(2021, 6, 1, 5, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642790010, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 1, 5, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642876673, 'comment_body': 'I was using workaround, but I found out a better way to that.\r\nUpdated.', 'comment_created': datetime.datetime(2021, 6, 1, 8, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642878489, 'comment_body': 'No, in some specific tests we are testing a warning message when the received element is null.', 'comment_created': datetime.datetime(2021, 6, 1, 8, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642879997, 'comment_body': 'Let me rephrase. From my reading of the code, can\'t this entire inner function be replaced with ""return html""?', 'comment_created': datetime.datetime(2021, 6, 1, 8, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642880924, 'comment_body': 'Try to have your pre and post checks be similar. I.e. have an     expect(questionPlayerEngineService.getExplorationVersion()).toBe(1); beforehand.', 'comment_created': datetime.datetime(2021, 6, 1, 8, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642881249, 'comment_body': 'So what happens when getCurrentQuestionId() is called before init() (does it return null or throw an error)?', 'comment_created': datetime.datetime(2021, 6, 1, 8, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642883528, 'comment_body': '`this.questions` would be undefined before init. so it willl throw error  ""can not access undefined.getStateData(); ""', 'comment_created': datetime.datetime(2021, 6, 1, 8, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642884916, 'comment_body': 'Then your pre-check can be of the form ""expect ... toThrowError()"".', 'comment_created': datetime.datetime(2021, 6, 1, 8, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 642887116, 'comment_body': 'My bad :D done!', 'comment_created': datetime.datetime(2021, 6, 1, 8, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 642913473, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 1, 8, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 643016242, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 1, 11, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 643622466, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 2, 3, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 643622544, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 2, 3, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 643644590, 'comment_body': 'We always set Question player mode to true when initialized, `if (!this.questionPlayerMode) ` this check is redundant here and the block will never execute.\r\nPTAL @kevintab95 (I could use some help here thanks!)', 'comment_created': datetime.datetime(2021, 6, 2, 4, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 643665067, 'comment_body': ""Hi @Radesh-kumar, I'm serious about creating a debugging doc according to the guidelines in the wiki. (I already discussed this with @kevintab95 too.)\r\n\r\nIf you are asking for help, it is important to provide full context and explanation of what you've thought through so that someone can read it and give you a pointer in the right direction. It will also help you ask a more specific question and explain the limits of what you've investigated. Little throwaway tidbits like your two recent comments here are less helpful, and make it harder for someone to answer your question."", 'comment_created': datetime.datetime(2021, 6, 2, 5, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 643707335, 'comment_body': ""Shouldn't this expectation be placed in the outer scope, similar to the post-check? If you put it in here I have no idea when it runs."", 'comment_created': datetime.datetime(2021, 6, 2, 7, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 643707694, 'comment_body': 'Probably can replace `{ return html; }`  with just `html`? Ditto elsewhere.', 'comment_created': datetime.datetime(2021, 6, 2, 7, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 643709534, 'comment_body': ""Why do you need this line (what is it checking and how does it relate to the test description)?\r\n\r\nNote that, in general, checking whether a method has been called is a bit of an antipattern. That's because it tends to be directly testing implementation. The exception may be if you need to check that an endpoint method (e.g. to a third-party API which we treat as a black box) is called, but that's fairly rare."", 'comment_created': datetime.datetime(2021, 6, 2, 7, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 643711211, 'comment_body': ""Don't know what the description means; missing pre-check; missing multiple cases."", 'comment_created': datetime.datetime(2021, 6, 2, 7, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 643712037, 'comment_body': 'submitting is misspelled', 'comment_created': datetime.datetime(2021, 6, 2, 7, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 643713270, 'comment_body': ""Don't understand the description -- return what? (Or to where?)\r\n\r\nTry to write these descriptions similarly clearly to the ones in the portion of the code that has been reviewed."", 'comment_created': datetime.datetime(2021, 6, 2, 7, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 643713452, 'comment_body': 'given that --> if the', 'comment_created': datetime.datetime(2021, 6, 2, 7, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 643713592, 'comment_body': 'given that --> if the', 'comment_created': datetime.datetime(2021, 6, 2, 7, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 643714945, 'comment_body': 'exists --> exist\r\n\r\nAlso I don\'t know what ""it"" is here. Please fix the description.  Remember that ""it"" refers to the thing being ""described"".\r\n\r\nSimilar comments for the descriptions of most of the tests below. I\'m going to stop reviewing here, please make sure all test descriptions are really clear, you\'re testing interface not implementation, there are pre-checks where needed, etc. before resending for review.', 'comment_created': datetime.datetime(2021, 6, 2, 7, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 644385427, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 2, 23, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 644385452, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 2, 23, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 644385765, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 2, 23, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 644388803, 'comment_body': ""For this specific test case, I don't think pre-check will make a big difference. Since we are hardcoding `isInPreviewMode()` to return false everytime.\r\nCan you please specify what cases am i missing?"", 'comment_created': datetime.datetime(2021, 6, 2, 23, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 644392749, 'comment_body': ""Previously I've added both test cases for testing implementation and interface.\r\nRemoving all redundant (implementation) test cases.\r\n"", 'comment_created': datetime.datetime(2021, 6, 2, 23, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 644393504, 'comment_body': ""Didn't get this part.\r\nAre you suggesting to use `.and.returnValue(` ?"", 'comment_created': datetime.datetime(2021, 6, 3, 0, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 644395017, 'comment_body': ""I think we can't put it in this case. Since both are being updated in the same function `.init()`.\r\nThe other pre-check we can add here is to expect the version to be null before initialization.\r\n(Note: Issue regarding this is being investigated need some more time to figure it out.)"", 'comment_created': datetime.datetime(2021, 6, 3, 0, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 644398733, 'comment_body': 'Although I feel like we should test implementation to some extinct specifically for services, as they are not involved with UI directly.\r\nWe can definitely avoid implementation tests in directives/components as they have a definite interface to be tested.', 'comment_created': datetime.datetime(2021, 6, 3, 0, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 644431776, 'comment_body': 'To be clear: here, ""interface"" does not refer to user interface. It refers to the part of the directive/service/component that can be accessed externally through public functions. So, services have an interface too (i.e. the public functions that they expose to other components/services). You basically want to check whether inputs to those functions result in the correct output.\r\n\r\nDoes that help clarify? Here is a brief example (found by a quick search) that outlines the concepts in a fairly terse way: https://eng.libretexts.org/Bookshelves/Computer_Science/Book%3A_Object-Oriented_Reengineering_Patterns_(Demeyer_Ducasse_and_Nierstrasz)/06%3A_Tests__Your_Life_Insurance/6.05%3A_Test_the_Interface_Not_the_Implementation', 'comment_created': datetime.datetime(2021, 6, 3, 2, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 644433056, 'comment_body': 'See the second box below ""arrow function without parameters"" [here](https://www.tutorialsteacher.com/typescript/arrow-function) -- I just mean that I think you can simplify to `(html, envs) => html`.', 'comment_created': datetime.datetime(2021, 6, 3, 2, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 644433571, 'comment_body': 'I think the problem here is the description, then; it should be ""it should always return false for isInPreviewMode()"" or similar.\r\n\r\nNote that your description really sets the background for your test. It\'s what the reviewer (and any reader of the test file) will start from. If you write a description that is unclear then this will cause follow-on confusion. (Note also that, if a reader needs to refer to the implementation of the code being tested in order to understand the description, then the description isn\'t sufficient -- try to think of the code being tested as a black-box implementation.)', 'comment_created': datetime.datetime(2021, 6, 3, 2, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645063017, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 3, 19, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645063228, 'comment_body': 'changed.', 'comment_created': datetime.datetime(2021, 6, 3, 19, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645064051, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 3, 19, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645064818, 'comment_body': 'Thanks for the info, removed!', 'comment_created': datetime.datetime(2021, 6, 3, 19, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645066157, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 3, 19, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645066507, 'comment_body': 'removed this test case,', 'comment_created': datetime.datetime(2021, 6, 3, 19, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645067354, 'comment_body': 'PTAL @seanlip https://docs.google.com/document/d/1MTdaf5GCZl6uCE3bDjO_NM8gd4rp3mH4flNy_qnqzQw\r\nDone!', 'comment_created': datetime.datetime(2021, 6, 3, 19, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645392608, 'comment_body': 'Why is this line needed (and get exploration version below)? Ditto in other test functions.', 'comment_created': datetime.datetime(2021, 6, 4, 8, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645393222, 'comment_body': 'Any way to check the error message?', 'comment_created': datetime.datetime(2021, 6, 4, 8, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645393704, 'comment_body': 'Never have two consecutive newlines, here and elsewhere. Just one suffices.', 'comment_created': datetime.datetime(2021, 6, 4, 8, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645393943, 'comment_body': 'For this to be robust you would need to also demonstrate that the successCallback is called when the answer is not already being processed.', 'comment_created': datetime.datetime(2021, 6, 4, 8, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645394300, 'comment_body': ""This is a weird message. What does it have to do with the feedback html being null? I don't see any expressions to parse, should we have a better message here?\r\n\r\n(Note that, if the code is wrong, it is worth fixing it.)"", 'comment_created': datetime.datetime(2021, 6, 4, 8, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645394756, 'comment_body': 'Same question.', 'comment_created': datetime.datetime(2021, 6, 4, 8, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645395321, 'comment_body': 'What does all this have to do with the description of the test?', 'comment_created': datetime.datetime(2021, 6, 4, 8, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645591374, 'comment_body': 'removed all unnecessary spies too.', 'comment_created': datetime.datetime(2021, 6, 4, 13, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645591934, 'comment_body': 'changed.', 'comment_created': datetime.datetime(2021, 6, 4, 13, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645592051, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 4, 13, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645599415, 'comment_body': ""In `submitAnswer()` nextCard ( ~ next question) is a local variable, every time, if the correct answer has submitted this function, will load the next question state and creates a card, and pass it into the callback function.\r\nIf the nextCard/nextQuestion is null no further question will be loaded.\r\n\r\nThere is a better/more readable way to test this.\r\nWe can `expect(stateCardObjectFactory.createNewCard()).not.toHaveBeenCalled())`\r\nbut I'm afraid that you have explicitly mentioned not use expect any function/Spies to be called as it is testing the implementation rather than the interface."", 'comment_created': datetime.datetime(2021, 6, 4, 14, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645602667, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 4, 14, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645605295, 'comment_body': ""There is already a check related to that, but with a different description `it('should submit answer correctly'`,\r\ndo we need to add an extra case for that?"", 'comment_created': datetime.datetime(2021, 6, 4, 14, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645610565, 'comment_body': 'added an alert message.', 'comment_created': datetime.datetime(2021, 6, 4, 14, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645614069, 'comment_body': 'Can we change that to `should call success callback if the submitted answer is correct`?', 'comment_created': datetime.datetime(2021, 6, 4, 14, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645953549, 'comment_body': ""Format this correctly -- break after '(', not '='. Also if you break to a newline, indent by 2.\r\n\r\n/cc @Hudda is this tracked in the linter? It seems like something basic."", 'comment_created': datetime.datetime(2021, 6, 5, 7, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645953833, 'comment_body': '""There are no questions to display.""\r\n\r\n(The end user has no idea that there is a variable called \'questions\', and the phrasing ""Questions cannot be empty"" does not make sense in plain English.)', 'comment_created': datetime.datetime(2021, 6, 5, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645954131, 'comment_body': 'In this case it is fine to do as you suggest. Just make sure the same expectation happens earlier on with a toHaveBeenCalled() expectation, to show that there is a difference.\r\n\r\nNote that, in this case, you are taking ""createNewCard()"" to be the actual condition being tested (the test description is literally ""should not create new question"") so this _is_ the interface. ', 'comment_created': datetime.datetime(2021, 6, 5, 7, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645955378, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 5, 7, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645955403, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 5, 7, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645956944, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 5, 7, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 645958755, 'comment_body': 'I need to see clear indication in this test that ""the existing question is not the last one"". Please add comments to explain how the reader can easily determine that.', 'comment_created': datetime.datetime(2021, 6, 5, 7, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645958866, 'comment_body': 'Same note as above.\r\n\r\nYou might be better served having both of these in the same test. Have 3 questions perhaps. Show that the behaviour for the first two is different from the last one. That serves as the pre-check and the post-check (currently you have two tests each with only one check, which is weaker).\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 5, 7, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645958881, 'comment_body': ""Please be careful with the terminology. You're not creating a question here."", 'comment_created': datetime.datetime(2021, 6, 5, 7, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 645959522, 'comment_body': '@seanlip added to the #8423. Thanks', 'comment_created': datetime.datetime(2021, 6, 5, 8, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 646092883, 'comment_body': 'question --> card', 'comment_created': datetime.datetime(2021, 6, 6, 7, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 646092900, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 6, 7, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 646094778, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 6, 8, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 646190317, 'comment_body': '... final question, a new card was not ...', 'comment_created': datetime.datetime(2021, 6, 6, 21, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 646923417, 'comment_body': 'Why do we do a ""returnValue"" here? Should we just expect this method to have been called on init (perhaps worth adding a separate ""it"" block for checking this remains true -- we have seen regressions in the part because context service properties weren\'t initialised properly)?', 'comment_created': datetime.datetime(2021, 6, 7, 20, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646924192, 'comment_body': 'Formatting / linebreaks seems a bit awkward here. Can we fix it please?', 'comment_created': datetime.datetime(2021, 6, 7, 20, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646925965, 'comment_body': 'These names seem too similar. Can we make them a bit specific based on where it gets called to avoid confusion (e.g. `submitAnswerSuccessCb`)?', 'comment_created': datetime.datetime(2021, 6, 7, 20, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646930187, 'comment_body': ""From the test, it seems like the question id gets updated only after submitting an answer **and** a new card is recorded. Should the description reflect this?\r\n\r\nAlternatively, if the test is to simply check if the questionId changes when the currentIndex changes, we could change the name to reflect this. That way, we don't have to state the implementation details in the description."", 'comment_created': datetime.datetime(2021, 6, 7, 20, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646942586, 'comment_body': 'Optional: Thanks for adding this! But can we move the `if` block before this function is called? It seems like question list being non-empty is a prereq for loading initial question.', 'comment_created': datetime.datetime(2021, 6, 7, 21, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646944628, 'comment_body': 'Can we use `const` for these? It seems like these variables are not reassigned values after being initialized.', 'comment_created': datetime.datetime(2021, 6, 7, 21, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646944815, 'comment_body': 'Ditto: prefer `const`.', 'comment_created': datetime.datetime(2021, 6, 7, 21, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646945369, 'comment_body': 'Ditto elsewhere in this file.', 'comment_created': datetime.datetime(2021, 6, 7, 21, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646946147, 'comment_body': 'Just noting that these comments are really helpful as a reader. :)', 'comment_created': datetime.datetime(2021, 6, 7, 21, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646955248, 'comment_body': 'Although this is not really used because `answerClassificationService.getMatchingClassificationResult` gets mocked, can we still initialise this variable with a dummy value? It seems odd to pass around `undefined` in a variable.', 'comment_created': datetime.datetime(2021, 6, 7, 21, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646955882, 'comment_body': 'ditto: naming of these callbacks.', 'comment_created': datetime.datetime(2021, 6, 7, 21, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 646958666, 'comment_body': 'Is this a duplicate test (see L683)? ', 'comment_created': datetime.datetime(2021, 6, 7, 21, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 649120208, 'comment_body': ""For this specific method\r\nspyOn(contextService, 'setQuestionPlayerIsOpen').and.returnValue(null);\r\nspyOn(contextService, 'setQuestionPlayerIsOpen');\r\nboth are almost same.\r\nI've returned null since `setQuestionPlayerIsOpen` is a void function.\r\n\r\nRemoved `.and.returnValue(null);` and added extra check as suggested."", 'comment_created': datetime.datetime(2021, 6, 10, 12, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649121921, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 10, 12, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649124086, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 10, 12, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649135459, 'comment_body': 'Both are correct in this scenario since `recordNewCardAdded()` is just incrementing the current index.\r\nMentioning the current index in the description reflects the implementation details right?', 'comment_created': datetime.datetime(2021, 6, 10, 12, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649138195, 'comment_body': ""I think we can't directly move the if block since we are calling error call back here."", 'comment_created': datetime.datetime(2021, 6, 10, 12, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649140877, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 10, 12, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649141055, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 6, 10, 12, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649141126, 'comment_body': 'noted.', 'comment_created': datetime.datetime(2021, 6, 10, 12, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649142295, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 10, 12, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649143227, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 10, 12, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649145967, 'comment_body': ""Nope,\r\nthis check happens when loading a question\r\nanother one will happen after submitting a question\r\n(Please note the describe block `describe('on submitting answer '`)"", 'comment_created': datetime.datetime(2021, 6, 10, 12, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649591230, 'comment_body': 'Then errorCallback need not be passed into this function and it should be handled outside?', 'comment_created': datetime.datetime(2021, 6, 10, 23, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 649592067, 'comment_body': 'Not done? `interactionRulesService` does not seem to be initialised.', 'comment_created': datetime.datetime(2021, 6, 10, 23, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 649592334, 'comment_body': 'I see, thanks!', 'comment_created': datetime.datetime(2021, 6, 10, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 649592518, 'comment_body': 'Has this been addressed?', 'comment_created': datetime.datetime(2021, 6, 10, 23, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 649596439, 'comment_body': 'In that case, I would suggest including `.. when an answer is submitted and a new card is recorded` in the description.', 'comment_created': datetime.datetime(2021, 6, 10, 23, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 649690630, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 11, 4, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649690659, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 11, 4, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649696864, 'comment_body': 'sorry updated now.', 'comment_created': datetime.datetime(2021, 6, 11, 5, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649706377, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 11, 5, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': '97d1fee273ad909ef7fe4abbdc760a743ecd1b8f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd37463dcf234b33104751136e329480faa2b7862', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8c5fedbc0407dd5cccfbcf730c72c2e776611b9', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8298f2efd63ff0616f7d71f0c087cc59a4724a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce5bedb108a9030c7215a66793d07cd67e382fed', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da58125dc5e0cfe7f82bc7fe8bedfbe3e19c81a7', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4bdd0e41dc226e898d00e5ab1abbd4ddbd2f601', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f357e4e7133ed00d2d28093785ed595bc18f9e6', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1c978a8c55280c14a4375997552e379adb4e75', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15678577535f59e951975a2db49eff7d64c7c55a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776f993b18de5dee1c45153e2a4963af579f9f52', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a576edc14ffa2cc4f25fb92884737e8bf59107ce', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d85e3fdd9bca6d01f76da9fc995f60033f7fd89', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced1e3b71892725a837c588582ef03d09eb05f29', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c7a52dbe5debf184e6acee9c35dd66f8df0f93f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1034019770f18fe3f3389b958dce7e955daa002a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cff7b32054455ede8628404afd0997a55fc0b445', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a57257564261e6f7fc019be69beb655d76297010', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0329f5c38c55b60b8d88c6dd19360ba5857af91', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '665a9fb911fe93a260d9871c15e9390bd730f84d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd92482c97fe173eeebd29f934859a18f1c831a9', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da42a61ca25b7852304d8dfa965a7493c7be0ec2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efd3b3a42b79dccc843a6099feb17dc0a25925fb', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '402f69e366c65001e89e12644d61a0749a648f06', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb4f8f1aac0602238d6172610ed699ab25af804e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f647eeb45bcf8398829a0c8dd01c885cb36cd8ed', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '353ccc6f504289774b96cdec1b576145bc4e9993', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e08e947fc805f68f55c3f28a2aca33a8e050cde', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8491b7a6ece9ec4477d273681b493e1c3aa6841a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '075d711a39023cdfaa001d00033155383fa8607f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f9f9f0097d1c3d48d2a85bea45ed083e82619d1', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55aa75853bb3371c2a60a2158cc1a61837c771fe', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52aac996cf335ef8e88122b02d6e14fc36b8106e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f8baf729f536602c42d9b77131360cee4fe190', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
673865412,Added unit tests for stats reporting service,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13132,https://api.github.com/repos/oppia/oppia/pulls/13132,https://github.com/oppia/oppia/pull/13132,closed,452,166,3,12,25,8,1,1,[{'name': 'PR: LGTM'}],2021-06-19 11:22:57+00:00,2021-07-08 11:38:01+00:00,1642504.0,"19 days, 0:15:04","[{'comment_id': 654784928, 'comment_body': ""@nithusha21 your suggestion did the trick. But, both `StatsReportingService` and `statsReportingService` are not updating simultaneously in the tests.\r\nIf I place prechecks at the beginning of the test they are flaking (almost 90%  of the cases).\r\nSo in order to prevent that I've set the testing value to be null for each test.\r\n(I feel that the ideal thing to do is change the static variable to public.)"", 'comment_created': datetime.datetime(2021, 6, 19, 11, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 655918315, 'comment_body': 'PTAL @nithusha21 ', 'comment_created': datetime.datetime(2021, 6, 22, 6, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 657348287, 'comment_body': 'I think I like your suggestion to make it public. Do you know why it is static? In general, if the code feels off, feel free to make it correct.', 'comment_created': datetime.datetime(2021, 6, 23, 18, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 657445513, 'comment_body': ""I don't think we really need static here.\r\nAs it is not being used in hybrid state or in common anywhere else.\r\nI'll try making them public and see if anything breaks."", 'comment_created': datetime.datetime(2021, 6, 23, 20, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 661654979, 'comment_body': 'Why are we creating so many spyOn in beforeEach block? It should be created in `it` block and only the required spyOn, right?', 'comment_created': datetime.datetime(2021, 6, 30, 16, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 662543891, 'comment_body': ""Most of the test cases use multiple spies.\r\nIn order to decrease the redundancy of code I've placed them in `beforeEach` block, that way it is easier to read code too.\r\nI think both methods are identical."", 'comment_created': datetime.datetime(2021, 7, 1, 19, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 663314689, 'comment_body': 'I think to make each test case readable we should write spies in `it` function where we are testing behavior based on the spied function!', 'comment_created': datetime.datetime(2021, 7, 3, 4, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 664671754, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 7, 6, 15, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': '4ea485e1cbe982781fddb4763cd318c6d7288022', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88412b04798c8a9fcd6e147b9a9adefab43bf403', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1ded68f15e0b76d9e36e9c6d6b1d0c5260995c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35482400793ab204fbabcb2d3eb5f5990090951b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e033cb6b773c4e118b40b2226592f7da776a106f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f05acd52335c1d2d5a8e8944f417b322f2f313f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af464ec5553139d03de9c95628502efe66e1ecc6', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0a3308a6bcdbf32f3edff32b9332a62f5e5c972', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e271abc8a140e1e4e0261fa81835cb2772a3ec', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4762379a901e00a85bb1c58e24a792509e2cd56a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a3f9141f4e44b184c85412bc765cd5e5dc77a2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60ef76ec409eec48945951a3a8c39c6f410def30', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
666631870,Added unit tests for story editor navbar component,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13039,https://api.github.com/repos/oppia/oppia/pulls/13039,https://github.com/oppia/oppia/pull/13039,closed,419,23,3,8,16,27,1,1,[{'name': 'PR: LGTM'}],2021-06-10 08:06:24+00:00,2021-06-15 10:14:52+00:00,439708.0,"5 days, 2:08:28","[{'comment_id': 649320278, 'comment_body': 'Do we need tests for validation errors getting added correctly on reinitializing or undo?', 'comment_created': datetime.datetime(2021, 6, 10, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649320600, 'comment_body': 'Do we need a separate test for publishing a story?', 'comment_created': datetime.datetime(2021, 6, 10, 15, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649325980, 'comment_body': ""```suggestion\r\n  describe('open a confirmation modal for saving changes ', () => {\r\n```"", 'comment_created': datetime.datetime(2021, 6, 10, 16, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649326401, 'comment_body': 'Can we move common spies to a beforeEach?', 'comment_created': datetime.datetime(2021, 6, 10, 16, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649327060, 'comment_body': 'Missing prechecks for this block?', 'comment_created': datetime.datetime(2021, 6, 10, 16, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649328587, 'comment_body': 'Can we also ensure that the successCallback was called? And check the commit message passed in?', 'comment_created': datetime.datetime(2021, 6, 10, 16, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649328935, 'comment_body': 'Similar comments as above block', 'comment_created': datetime.datetime(2021, 6, 10, 16, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649329773, 'comment_body': 'Can we add a check to make sure that the changes are actually not saved? ', 'comment_created': datetime.datetime(2021, 6, 10, 16, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649330099, 'comment_body': 'Why was this change made?', 'comment_created': datetime.datetime(2021, 6, 10, 16, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649330171, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 6, 10, 16, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 649418900, 'comment_body': 'This function is doing nothing/empty here.', 'comment_created': datetime.datetime(2021, 6, 10, 18, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649418924, 'comment_body': 'This function is doing nothing/empty here.', 'comment_created': datetime.datetime(2021, 6, 10, 18, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649420513, 'comment_body': 'I think we can not do that here since no data is passing through this function except the commit message.', 'comment_created': datetime.datetime(2021, 6, 10, 18, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649601908, 'comment_body': 'Seems like a bug. Can you import `storyEditorNavigationService` in the constructor so it gets initialised? Ditto below.', 'comment_created': datetime.datetime(2021, 6, 10, 23, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 649736294, 'comment_body': 'fixed this and tested on mobile view working fine now.', 'comment_created': datetime.datetime(2021, 6, 11, 6, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649736366, 'comment_body': 'fixed this and tested on mobile view working fine now.', 'comment_created': datetime.datetime(2021, 6, 11, 6, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649748273, 'comment_body': 'added.', 'comment_created': datetime.datetime(2021, 6, 11, 7, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649748442, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 11, 7, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649753710, 'comment_body': 'Moved `editableStoryBackendApiService` to beforeEach,\r\nI think we can not generalize all the spies since we are testing different scenarios in a story\r\nso we need different stories in each case.', 'comment_created': datetime.datetime(2021, 6, 11, 7, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649755142, 'comment_body': ""I think it won't be necessary since initializing, reinitializing, and undo method uses EventEmitter to trigger changes, we are mocking event emitter in the test file.\r\nIf we were to add tests it would be simply changing the variable name."", 'comment_created': datetime.datetime(2021, 6, 11, 7, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 649756240, 'comment_body': 'We had the same scenario while testing the question-player-engine service, @seanlip suggested include both functions in the single test so it will act as pre-check and post-check to each other.', 'comment_created': datetime.datetime(2021, 6, 11, 7, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 650123626, 'comment_body': 'Resolved as per offline discussion.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 650123672, 'comment_body': 'Resolved as per offline discussion.', 'comment_created': datetime.datetime(2021, 6, 11, 16, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 650144741, 'comment_body': '\r\nhttps://user-images.githubusercontent.com/54100702/121724665-cf696d00-cb05-11eb-8dc7-80c73b6e742c.mp4\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 11, 17, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 650216746, 'comment_body': 'Do we need `type` here?', 'comment_created': datetime.datetime(2021, 6, 11, 19, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 650325654, 'comment_body': 'Thanks for fixing this! :)', 'comment_created': datetime.datetime(2021, 6, 12, 1, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 650343451, 'comment_body': 'done!', 'comment_created': datetime.datetime(2021, 6, 12, 4, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': 'c61999000a8b1fbc92edc07859f269b231da30b2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e3bb04aaa5f7c7f7cd9ed8114b3af94b26a31fa', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86e36627196a42918590489e29ca71c8b8394401', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf876546aab8dd9b451a07433981de7578a5814', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '327140e9636608f02d69f54eb6cfabe9d07cadbc', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9022442b0bf1978098d8d2b962c389b9a0133c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd97233b91b08dfd219f3d0728b2c2d0321270d00', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3c149a3f80e7ed0cc9de9b47ca388e7b3296a09', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
685961253,Added unit tests for the following files,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## List of files updated

- [x] skill-editor-navbar.directive.ts
",True,13340,https://api.github.com/repos/oppia/oppia/pulls/13340,https://github.com/oppia/oppia/pull/13340,closed,810,3,4,15,7,0,0,1,[],2021-07-08 12:15:45+00:00,2021-07-12 18:27:59+00:00,367934.0,"4 days, 6:12:14",[],"[{'commit_sha': '4f1196e18405f17b1a4ede97932bc2fc43c1df87', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f1077e5c063725ebc4fba950b8a2a72e4432492', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd43519d4db9001cafa9c2ad6a43d08574cec7094', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '241d95f5c5147003e85d38de58d7ec51b4224307', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adef7e1042cb4d7f6bbbba2502c888af7c7a8f7d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce4b366fe34e8ca743cc4ae3b6d05ab9959989c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f87c750e99c0c3dd9dc4689307cba7e3bd9f5c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e820152fcfb0eaee5fc8c9bc3c827fd57ea9612', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc980bacbbb5304f8fd70b8c87a9a42e54aae3b1', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2a0f70581963388ebc0558f43c197ea1f9bdfe', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '077fbd91dd2b4b30df67a57dd7da325b20c14d66', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6988ab6a86d7e83b0cd7a297bc671b6f829aad8', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79750e162c4e931b9c938371c6bf11fd1be3535a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '907d670a22764b734be6a832e0d1c941282a39b6', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '777e2151b872db251bf5b88005f58277e3705c34', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
691667863,Added unit tests for the following files,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13409,https://api.github.com/repos/oppia/oppia/pulls/13409,https://github.com/oppia/oppia/pull/13409,closed,973,399,11,19,15,0,0,3,[],2021-07-16 18:21:19+00:00,2021-07-30 05:40:40+00:00,1163961.0,"13 days, 11:19:21",[],"[{'commit_sha': 'e9e262f1a7a4b0819cd77d2c49783cb866e876df', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e14412c0127ac5e2bfb3b5d6f39fc0f234dfb332', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0e1a744c52cd9acf2be54bcf66f4caed722aec0', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e50053865337e0a6febc0dd5ead540db02f6b970', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ebd7cf7738d81a57d7eaba08b9613fa9a6864e9', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '725b4fd6c2cddf20782a678216e9a80641ba8a0c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb9b3b357fb460f14026dbccd69a365be712822', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f631ce79f540ae115f9928b1d4c8fb1379735023', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d97982b5f6e20c1a73b2f1d4186d40daccf5c93', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e8a1f64e36497eb7bfec984b3033de7cc907341', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9acef1efd4754d87b13b70b9fa5d88516fc6ee1e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96db3c6b724c0806e63812ef90c2c2f35866dffd', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985c0f0295567c580e80e1b0d1ca0684d8bebf8b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1e34076966d6eff20c43f3da23ddbf3ca4f62b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6016dc1f9c3b6bf7f9402ab349df0abdc93ade59', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb14ef19067c920f5372a970b254292bd7eaf0ce', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ded78cd49cf45651e80f70439fe4302a6b4341ee', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1c131c9090df4f92ba4c0c19104b490c8210fe8', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d40d1877df75901f3b5c124c489d9a687bf19ad', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
693421326,Added unit tests for conversation skin directive,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

Please note that `conversation-skin.directive.ts` is not removed from `check_frontend_test_coverage.py`.
Since it contains angular animations which cant be covered.(which are around 80 lines)

![Screenshot from 2021-07-29 00-21-10](https://user-images.githubusercontent.com/54100702/127381333-7eca374f-d1d9-4ec5-9296-bcd2cc77ade7.png)


<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13432,https://api.github.com/repos/oppia/oppia/pulls/13432,https://github.com/oppia/oppia/pull/13432,closed,2462,2,3,8,11,1,0,3,[],2021-07-20 12:23:08+00:00,2021-07-30 04:42:06+00:00,836338.0,"9 days, 16:18:58","[{'comment_id': 678571821, 'comment_body': ""Currently `questionPlayerConfig` is being initialized in the constructor.\r\nWhich makes it hard to test the parity checks.\r\nSo, I've moved this logic to $onInit."", 'comment_created': datetime.datetime(2021, 7, 28, 18, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': '55a3d13ca2910b9c63efdcd84c4dce640392f84f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd00c0822b2e95aa3a011cb63d7442aeaa727b094', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e376c7a316685222058fba6aabec3add8475cc3', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fafccf88c000227eea1d2250c2fc688b91e4bc4', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3114e8df7e7617cedb8dc595447d1b9ebf664c10', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6c4aecd9cf2ffe6f8a3c9a4632ae9ff6276e248', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe109431ba86aef109ba277e6b934dbe0c15baf', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f9ad0ee3af8721ee10679a2c811b15ef328a33c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
701558694,Added unit tests for the following files.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## List of files updated
- [x] collection-editor-navbar.directive.ts
- [x] exploration-save.service.ts

<!--
Add videos/screenshots of the user-facing interface in various display sizes (mainly phone, tablet, and desktop display size) to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13552,https://api.github.com/repos/oppia/oppia/pulls/13552,https://github.com/oppia/oppia/pull/13552,closed,1597,3,4,18,19,27,1,1,[{'name': 'PR: LGTM'}],2021-08-02 15:18:00+00:00,2021-08-08 16:06:25+00:00,521305.0,"6 days, 0:48:25","[{'comment_id': 681436464, 'comment_body': ""Do we expect both of these to emit during initialization?\r\nAren't the emit statements supposed to be tested separately, since they emit at different events?"", 'comment_created': datetime.datetime(2021, 8, 3, 5, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 681446861, 'comment_body': 'when?', 'comment_created': datetime.datetime(2021, 8, 3, 5, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 681447290, 'comment_body': 'Do we need to call `$rootScope` twice? If that is the case can you add a comment explaining why?', 'comment_created': datetime.datetime(2021, 8, 3, 5, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 681448835, 'comment_body': 'Is it possible to keep this describe inside the one above?  It will make the code a bit more compact.\r\nSame for the other describe stmts', 'comment_created': datetime.datetime(2021, 8, 3, 5, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 681449161, 'comment_body': '```suggestion\r\n    $rootScope.$apply();\r\n\r\n    expect(modalSpy).toHaveBeenCalledTimes(1);\r\n```', 'comment_created': datetime.datetime(2021, 8, 3, 5, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 681449369, 'comment_body': 'when?', 'comment_created': datetime.datetime(2021, 8, 3, 5, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 681825613, 'comment_body': 'Moved to separate tests.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 681826663, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 681829546, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 681829855, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 3, 14, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 681840171, 'comment_body': 'removed.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 681841490, 'comment_body': ""It will throw an error.\r\n(Can't initialize two testbed modules in the same describe block.)"", 'comment_created': datetime.datetime(2021, 8, 3, 14, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 682262391, 'comment_body': 'Do we need multiple `$rootScope` stmts here?', 'comment_created': datetime.datetime(2021, 8, 4, 3, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682262463, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 8, 4, 3, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682263155, 'comment_body': 'The `$rootScope.$apply();` statments seems to be still there.', 'comment_created': datetime.datetime(2021, 8, 4, 3, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682263351, 'comment_body': 'Do we need to call `$rootScope` twice? If that is the case can you add a comment explaining why?', 'comment_created': datetime.datetime(2021, 8, 4, 3, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682263590, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2021, 8, 4, 3, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682263749, 'comment_body': '```suggestion\r\n// Copyright 2021 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 3, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682264726, 'comment_body': '```suggestion\r\n// Copyright 2021 The Oppia Authors. All Rights Reserved.\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 3, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gp201', 'type': 'User'}, {'comment_id': 682879740, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 682879782, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 4, 18, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 682879898, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 4, 18, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 682879974, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 4, 18, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 682884409, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2021, 8, 4, 19, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 682884444, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 4, 19, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 683303509, 'comment_body': 'Are we expecting these imports to be removed?', 'comment_created': datetime.datetime(2021, 8, 5, 9, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 684747137, 'comment_body': 'This should be at ln: 23 (updated).', 'comment_created': datetime.datetime(2021, 8, 8, 9, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': 'afebdd1f145caab716b3c7dfb67e49858cb781e6', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c86040bed6bbaa36326d960d13ecf373d52ce6a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f3cbed2b4075d26a2ae9d9610860c71930c07e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6108b1ba1346ae02a395b8ab272068dddeb0e90e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1f12b8bbe044fc3a93d18ae60c93af9cca24da', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa23a855570ad88cb0f8679993730c1d2df0bede', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '542fd4879b1ed55359fb64c2173d9cb4089a46fd', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23aa27d1091ba245d0e79ee167314001db5eed4d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c00010c0335ef8ad7453432ace4d28ca01f07c4d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bd7a951f6e47bc1baf7f4c56ae13e132e82c3b9', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '380eddbdac62e3c0690549daa8a41a1d3372b2ff', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2a4a1a63f1865c8aed22f80f9dd40726d22108', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '266c7d4c46b63e059aa104a988f4e3ea8d87e75a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a412e302061f984ba3e324fb76a45b8d19bb2cf1', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f441bc5f823cd4e5be9e18f3752ef111d32a98', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24855bd47112a5255d797e8dabdf23945ea51d3c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67f648d4248d0bc9310bbdfe5569a5139fdbb0a8', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a42e167702f4d93accec87d4d35d753a6fad776', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
701847390,Added unit test for the following files,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #[fill_in_number_here].
2. This PR does the following: [Explain here what your PR does and why]

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface in various display sizes (mainly phone, tablet, and desktop display size) to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13557,https://api.github.com/repos/oppia/oppia/pulls/13557,https://github.com/oppia/oppia/pull/13557,closed,1236,155,11,20,16,4,0,2,[],2021-08-02 23:32:14+00:00,2021-08-16 13:54:15+00:00,1174921.0,"13 days, 14:22:01","[{'comment_id': 689022182, 'comment_body': '*show', 'comment_created': datetime.datetime(2021, 8, 15, 3, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 689022306, 'comment_body': '*in case', 'comment_created': datetime.datetime(2021, 8, 15, 3, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 689088773, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 8, 15, 13, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 689088784, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 8, 15, 13, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}]","[{'commit_sha': '9d6decf697ffb27d61f72ebfa551663ffbc8bdd1', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b550455661484d32597d77894fd01a8ed9eab753', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddb61e3c4349de98df0c9b2f79fb17989aa08203', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8416b41968365b0cbd44a654bfe114cf1b503649', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeebabafccfbdfe26c584d98c0d7c34d4c0242f0', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bff7a03afa31da8949935d95c7ffa1693ca5b24c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39362d8cb00b703c99179723a5141f7fe5b455dc', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2644da9a71f424f5407446e46be64dadc1a15ad5', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81a4b147a526fb0b36c7769fdb95e213bd3039d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1662b9069be34d50f01e9e077e1ccd80f5ac592', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af8344a95a1322b208eac50db3f4adbdc8631c4c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0a292d3bb3c1fbc88a96533b39d995c146b295d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd999358949cb9dd88176a7b8d988cbde3457e835', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7ce7898d10fcdc9a88dbcd50d67fa77205142ee', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69558e5870d46013c95ca7b0aed3212a7e622113', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b64a371379449169eb2003e4d0c45d91d75dffa5', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0e0fe89ec5465092df2578730c7e9b96ba27b9', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '014b86d1ad7a306fafdd7309075106d118ce425d', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '101d8d7dbeb9b39fd573aaf417eb9d2d0b792bef', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31f7175ec54e426f1ac3c091533240bf58465350', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
712077636,Added unit tests for the following files,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of  NA.
2. This PR does the following: Added unit tests for the following files

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface in various display sizes (mainly phone, tablet, and desktop display size) to demonstrate that the changes made in this PR work correctly.
If the changes in your PRs are autogenerated via a script and you cannot provide proof for the changes then please leave a comment ""No proof of changes needed because {{Reason}}"".
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Oppiabot can assign anyone for review/help if you leave a comment like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL""
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,13645,https://api.github.com/repos/oppia/oppia/pulls/13645,https://github.com/oppia/oppia/pull/13645,closed,2310,85,18,47,20,23,0,1,[],2021-08-13 05:26:14+00:00,2021-08-20 06:06:50+00:00,607236.0,"7 days, 0:40:36","[{'comment_id': 690240097, 'comment_body': 'Linked this variable to the current scope.\r\n(For making parity checks testable)', 'comment_created': datetime.datetime(2021, 8, 17, 10, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 690243421, 'comment_body': ""Currently, this logic is in the constructor which makes it hard to test the parity checks.\r\nIn order to make it testable I've moved the code to `ngOnInit`"", 'comment_created': datetime.datetime(2021, 8, 17, 10, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 690335855, 'comment_body': 'which already exists*', 'comment_created': datetime.datetime(2021, 8, 17, 12, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aishwary023', 'type': 'User'}, {'comment_id': 690491546, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 17, 15, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 691404702, 'comment_body': 'Prefer `const` if the variable is not being reassigned. Here and below.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 691406740, 'comment_body': 'Add a new line here to separate the setup from the action.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 691409004, 'comment_body': 'What does ctrl mean here?', 'comment_created': datetime.datetime(2021, 8, 18, 16, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 691409678, 'comment_body': 'Prefer `const` here and elsewhere below.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 691413055, 'comment_body': 'Can we remove new lines such that each test case has clear phases, e.g. setup, action, assertion? Here and below.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 691413349, 'comment_body': 'Typo. in voiceover.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 691414582, 'comment_body': 'Nit: voiceover*.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 691415022, 'comment_body': ""```suggestion\r\n  // Note that 'refreshFormData()' is called whenever a change\r\n  // is detected in any of the forms.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 18, 16, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 691415627, 'comment_body': 'Typo.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 691423647, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 691423742, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 691423906, 'comment_body': 'sorry typo.', 'comment_created': datetime.datetime(2021, 8, 18, 16, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 691425257, 'comment_body': 'update here and elsewhere', 'comment_created': datetime.datetime(2021, 8, 18, 16, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 691427771, 'comment_body': 'updated here and elsewhere', 'comment_created': datetime.datetime(2021, 8, 18, 16, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 691428655, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 18, 16, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 691428713, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 18, 16, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 691429265, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 18, 16, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 691429498, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 8, 18, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Radesh-kumar', 'type': 'User'}, {'comment_id': 693392905, 'comment_body': ""Hey @Radesh-kumar,\r\nServices actually do not support Oninit in angular as of now. Oninit can only be used in components and directives only as far as ik. Check [this](https://github.com/angular/angular/issues/23235).\r\nSo initially that's why I added this in the constructor. And this change of yours actually created a bug in my functionality as these subscription functions are not working. Can you please take a look at it ASAP?\r\n\r\ncc: @kevintab95 \r\n"", 'comment_created': datetime.datetime(2021, 8, 21, 19, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'atpug22', 'type': 'User'}]","[{'commit_sha': 'c0b36d609a5a9cd889dfde1adcb4af7c6b2f657f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3d388783ba136eda35767d6407ddc9a0a79015a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68878ba001483d7e39965ac32de87b83559fb502', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67e680a084662ad978d4df6360b0ed6b5e46f93f', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcad808829212b0f192753e787a5634d9ad265d9', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6771d7c93fdf1a7fe5124637ee10eca0eccdb885', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '400ed76129cdd37fbe2e2ffb0be3a0e2f0d7b06e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aadc66d5673d9c748adb453b409cfbad6e773f2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ed10edcf6d860c26195189056fc7a7ac950bb8', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ffd60f8b90caa524bd71d996c57e26d5f565a1', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7afb13f63bedb1573a3f6f554e8a4687d1e2c81c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa8f29ea9c8b77b8be43443499b40af00c749087', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb4bf14157527f219056e1c5d09075f0ede094e2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45e5ea4dfd1fd7aa486d807e7e592cb39a8d05f5', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '356fc83b86d183a7e74cd4fdebb8fb4e5dd52adf', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4389b36732dd86b712042a25b443b766d034664b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd95438f9b5a2a8725fc39c2715b4066332a3651b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0711cdfeb0f688333059eadb0dd16d6602c86407', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc993c59efca310ef7614601b60cfb1c99a5a265', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aff77e6886fffcf128420b3df11b0487d9433f5', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f08e9cd87781c6ae5fae9d5eca056016c1d30a45', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4e42ecf152297461a06bdc22da8192839ed2b1b', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a76a1e1aa877e9d36a0f441b1352a360000b9bae', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddea4a164cdcda796c03d123a8f21c87d0f5fbe3', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '682008a9c5de5ecc705706d3de0e5b44c6c8fa89', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f010d0c72034c725146267af3eb09d1ad5c84ca7', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48a0a5a995ee3b496765b83eff652628cbb91616', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84cbc7355eb6b6e3c9f03e459f5969fbc26061e8', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f117961cff34f90038fe87fdcc36bd7450611ed', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d3cf0ff1483be5cba66974bb57dc2ed02c1ef40', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cfa51704e8c0363029f96eabc4aa2c7341890c1', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88894e1bc2e9bede2104d9007e7bf4b786e47a44', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee699c11f3a8c1b626438c6c425a3bdbef7bb076', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2865edd9d729b791a6fc6e28c0739b05f67ab4e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aab127b7c9b0c28364db2fcfdcca92e42e852690', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d185f05037103e3f5f07aa64aebdd79028862b1', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1230bb06e3525d988368959e66d3dc5259351e8a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e76b928cd2c8d4095f2b467b863001a21cbb85', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5709c2ffa82b43bdbcd7c765290224eaf5b5287', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1363472ed592d5a3325ce932de44064312c0da', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ebc5559958dd309b69c4a3a17eea370da7739d2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2d4d59ca40627c02831530f26b9ac76bbd38b5', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cea08d541acc3d426fe47c50abdda8ab9431f27', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '913f3dc1f36a7ac68bc6333a292f15c9a2b2a6e2', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a56e2ad3f757572fe9ff90c01042c67848eab85a', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e556f7704d4ff04086cdcd3bb0fe06079feadb23', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5bc7160b40fadcdbf75bea677442ac7702e2a7', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2
714762647,Fixes two flakes in Customize Interaction Modal Controller,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #12612.
2. This PR does the following: fixes: #12612

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Background
<pre>
    $scope.cancelWithConfirm = function() {
      // Do nothing if the confirmation modal is already open.
      if ($('.modal-title').text().includes('Confirmation Required')) {
        return;
      }
      $uibModal.open({
      .
      .
      .


</pre>

`cancelWithConfirm` has one pre-check in order to verify whether the modal has already been opened.
And there is a unit test for this in the same describe block.
Since the unit tests are run in random order, the other test is affecting these tests.
In order to solve the flake, I've removed the `.modal-title` class before and after each test case explicitly.


## Proof that changes are correct
I've ran all tests 20 times(10 each)

https://github.com/oppia/oppia/runs/3360728802
https://github.com/Radesh-kumar/oppia/runs/3360728741





",True,13703,https://api.github.com/repos/oppia/oppia/pulls/13703,https://github.com/oppia/oppia/pull/13703,closed,27,5,1,6,16,0,0,2,[],2021-08-18 05:49:46+00:00,2021-08-19 03:51:10+00:00,79284.0,22:01:24,[],"[{'commit_sha': '8c7349ae95933924e7b1eaece7900d1570772fbc', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e86e7121ce0b1c6773765c0fbcc5ad97c8832f7', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e549cae1002df9d38cd8b41638c98bf77880e14', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52990c2f28db01d59d245c4f7f5fbd858cd5a89c', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d0135c0f48919b0c23851d19f07efee9c062896', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b42b00b6a15ead2554ef1fb466c4351bf1fea3e', 'committer_username': 'Radesh-kumar', 'committer_name': 'Radesh', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 14, 9, 2, tzinfo=datetime.timezone.utc)}]",Radesh,54100702,,User,,38,,9,2

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3838,5714,240,775,15754,1418,418,24,"[{'id': 918971066, 'number': 15398, 'closed': datetime.datetime(2022, 4, 27, 2, 38, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 26, 6, 3, 34, tzinfo=datetime.timezone.utc), 'time_taken': 74075.0, 'time_delta': '20:34:35', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 913003019, 'number': 15341, 'closed': datetime.datetime(2022, 4, 26, 19, 30, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 19, 11, 40, 31, tzinfo=datetime.timezone.utc), 'time_taken': 633014.0, 'time_delta': '7 days, 7:50:14', 'additions': 1778, 'deletions': 29, 'state': 'closed'}, {'id': 789035106, 'number': 14318, 'closed': datetime.datetime(2021, 12, 11, 12, 54, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 25, 17, 47, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1364765.0, 'time_delta': '15 days, 19:06:05', 'additions': 16, 'deletions': 61, 'state': 'closed'}, {'id': 780040638, 'number': 14249, 'closed': datetime.datetime(2021, 11, 22, 17, 5, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 14, 8, 9, 11, tzinfo=datetime.timezone.utc), 'time_taken': 723368.0, 'time_delta': '8 days, 8:56:08', 'additions': 2, 'deletions': 925, 'state': 'closed'}, {'id': 780040145, 'number': 14248, 'closed': datetime.datetime(2021, 11, 14, 8, 7, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 14, 8, 5, 11, tzinfo=datetime.timezone.utc), 'time_taken': 146.0, 'time_delta': '0:02:26', 'additions': 2, 'deletions': 925, 'state': 'closed'}, {'id': 767213815, 'number': 14138, 'closed': datetime.datetime(2021, 11, 8, 16, 52, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 27, 9, 21, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1063843.0, 'time_delta': '12 days, 7:30:43', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 760611992, 'number': 14088, 'closed': datetime.datetime(2021, 10, 20, 6, 26, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 18, 15, 41, 4, tzinfo=datetime.timezone.utc), 'time_taken': 139516.0, 'time_delta': '1 day, 14:45:16', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 759638036, 'number': 14075, 'closed': datetime.datetime(2021, 10, 18, 15, 35, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 16, 10, 50, 42, tzinfo=datetime.timezone.utc), 'time_taken': 189869.0, 'time_delta': '2 days, 4:44:29', 'additions': 85, 'deletions': 1125, 'state': 'closed'}, {'id': 758945358, 'number': 14068, 'closed': datetime.datetime(2021, 10, 19, 22, 11, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 15, 6, 30, 30, tzinfo=datetime.timezone.utc), 'time_taken': 402085.0, 'time_delta': '4 days, 15:41:25', 'additions': 62, 'deletions': 3, 'state': 'closed'}, {'id': 750052065, 'number': 13999, 'closed': datetime.datetime(2021, 10, 18, 15, 34, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 5, 16, 40, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1119270.0, 'time_delta': '12 days, 22:54:30', 'additions': 85, 'deletions': 1125, 'state': 'closed'}, {'id': 742917664, 'number': 13934, 'closed': datetime.datetime(2021, 10, 6, 7, 8, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 26, 17, 38, 40, tzinfo=datetime.timezone.utc), 'time_taken': 826175.0, 'time_delta': '9 days, 13:29:35', 'additions': 2222, 'deletions': 17, 'state': 'closed'}, {'id': 742914639, 'number': 13933, 'closed': datetime.datetime(2021, 9, 26, 17, 21, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 26, 17, 17, 57, tzinfo=datetime.timezone.utc), 'time_taken': 216.0, 'time_delta': '0:03:36', 'additions': 2255, 'deletions': 18, 'state': 'closed'}, {'id': 742740303, 'number': 13928, 'closed': datetime.datetime(2021, 9, 30, 8, 17, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 25, 18, 43, 19, tzinfo=datetime.timezone.utc), 'time_taken': 394477.0, 'time_delta': '4 days, 13:34:37', 'additions': 119, 'deletions': 3, 'state': 'closed'}, {'id': 742739268, 'number': 13927, 'closed': datetime.datetime(2021, 9, 30, 8, 17, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 25, 18, 35, 6, tzinfo=datetime.timezone.utc), 'time_taken': 394966.0, 'time_delta': '4 days, 13:42:46', 'additions': 286, 'deletions': 6, 'state': 'closed'}, {'id': 742737304, 'number': 13926, 'closed': datetime.datetime(2021, 9, 30, 8, 17, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 25, 18, 20, 23, tzinfo=datetime.timezone.utc), 'time_taken': 395844.0, 'time_delta': '4 days, 13:57:24', 'additions': 34, 'deletions': 2, 'state': 'closed'}, {'id': 742737039, 'number': 13925, 'closed': datetime.datetime(2021, 9, 30, 8, 17, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 25, 18, 18, 29, tzinfo=datetime.timezone.utc), 'time_taken': 395953.0, 'time_delta': '4 days, 13:59:13', 'additions': 831, 'deletions': 4, 'state': 'closed'}, {'id': 742733553, 'number': 13923, 'closed': datetime.datetime(2021, 9, 30, 8, 17, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 25, 17, 56, 7, tzinfo=datetime.timezone.utc), 'time_taken': 397290.0, 'time_delta': '4 days, 14:21:30', 'additions': 247, 'deletions': 2, 'state': 'closed'}, {'id': 739233353, 'number': 13891, 'closed': datetime.datetime(2021, 9, 30, 8, 17, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 21, 17, 7, 56, tzinfo=datetime.timezone.utc), 'time_taken': 745776.0, 'time_delta': '8 days, 15:09:36', 'additions': 519, 'deletions': 2, 'state': 'closed'}, {'id': 730834295, 'number': 13841, 'closed': datetime.datetime(2021, 9, 14, 19, 3, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 9, 18, 29, 55, tzinfo=datetime.timezone.utc), 'time_taken': 433997.0, 'time_delta': '5 days, 0:33:17', 'additions': 18, 'deletions': 2255, 'state': 'closed'}, {'id': 723157426, 'number': 13779, 'closed': datetime.datetime(2021, 9, 9, 18, 29, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 31, 8, 49, 57, tzinfo=datetime.timezone.utc), 'time_taken': 812368.0, 'time_delta': '9 days, 9:39:28', 'additions': 36, 'deletions': 50, 'state': 'closed'}, {'id': 717254467, 'number': 13721, 'closed': datetime.datetime(2021, 8, 25, 20, 41, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 5, 49, 22, tzinfo=datetime.timezone.utc), 'time_taken': 312742.0, 'time_delta': '3 days, 14:52:22', 'additions': 22, 'deletions': 19, 'state': 'closed'}, {'id': 714762647, 'number': 13703, 'closed': datetime.datetime(2021, 8, 19, 3, 51, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 5, 49, 46, tzinfo=datetime.timezone.utc), 'time_taken': 79284.0, 'time_delta': '22:01:24', 'additions': 27, 'deletions': 5, 'state': 'closed'}, {'id': 712077636, 'number': 13645, 'closed': datetime.datetime(2021, 8, 20, 6, 6, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 5, 26, 14, tzinfo=datetime.timezone.utc), 'time_taken': 607236.0, 'time_delta': '7 days, 0:40:36', 'additions': 2310, 'deletions': 85, 'state': 'closed'}, {'id': 701847390, 'number': 13557, 'closed': datetime.datetime(2021, 8, 16, 13, 54, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 23, 32, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1174921.0, 'time_delta': '13 days, 14:22:01', 'additions': 1236, 'deletions': 155, 'state': 'closed'}, {'id': 701558694, 'number': 13552, 'closed': datetime.datetime(2021, 8, 8, 16, 6, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 15, 18, tzinfo=datetime.timezone.utc), 'time_taken': 521305.0, 'time_delta': '6 days, 0:48:25', 'additions': 1597, 'deletions': 3, 'state': 'closed'}, {'id': 693421326, 'number': 13432, 'closed': datetime.datetime(2021, 7, 30, 4, 42, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 12, 23, 8, tzinfo=datetime.timezone.utc), 'time_taken': 836338.0, 'time_delta': '9 days, 16:18:58', 'additions': 2462, 'deletions': 2, 'state': 'closed'}, {'id': 691667863, 'number': 13409, 'closed': datetime.datetime(2021, 7, 30, 5, 40, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 18, 21, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1163961.0, 'time_delta': '13 days, 11:19:21', 'additions': 973, 'deletions': 399, 'state': 'closed'}, {'id': 687010224, 'number': 13360, 'closed': datetime.datetime(2021, 7, 10, 11, 6, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 19, 59, 36, tzinfo=datetime.timezone.utc), 'time_taken': 54427.0, 'time_delta': '15:07:07', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 686977685, 'number': 13356, 'closed': datetime.datetime(2021, 7, 9, 19, 8, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 18, 47, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1237.0, 'time_delta': '0:20:37', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 685961253, 'number': 13340, 'closed': datetime.datetime(2021, 7, 12, 18, 27, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 12, 15, 45, tzinfo=datetime.timezone.utc), 'time_taken': 367934.0, 'time_delta': '4 days, 6:12:14', 'additions': 810, 'deletions': 3, 'state': 'closed'}, {'id': 682246888, 'number': 13284, 'closed': datetime.datetime(2021, 7, 9, 11, 42, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 0, 19, 37, tzinfo=datetime.timezone.utc), 'time_taken': 645771.0, 'time_delta': '7 days, 11:22:51', 'additions': 1756, 'deletions': 331, 'state': 'closed'}, {'id': 682100360, 'number': 13282, 'closed': datetime.datetime(2021, 7, 2, 3, 54, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 19, 6, 19, tzinfo=datetime.timezone.utc), 'time_taken': 31720.0, 'time_delta': '8:48:40', 'additions': 16, 'deletions': 9, 'state': 'closed'}, {'id': 678459048, 'number': 13230, 'closed': datetime.datetime(2021, 6, 30, 17, 31, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 5, 37, 5, tzinfo=datetime.timezone.utc), 'time_taken': 302091.0, 'time_delta': '3 days, 11:54:51', 'additions': 968, 'deletions': 39, 'state': 'closed'}, {'id': 678032819, 'number': 13211, 'closed': datetime.datetime(2021, 6, 25, 23, 11, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 16, 15, 3, tzinfo=datetime.timezone.utc), 'time_taken': 24971.0, 'time_delta': '6:56:11', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 677841403, 'number': 13206, 'closed': datetime.datetime(2021, 7, 6, 5, 12, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 11, 26, 18, tzinfo=datetime.timezone.utc), 'time_taken': 927963.0, 'time_delta': '10 days, 17:46:03', 'additions': 839, 'deletions': 28, 'state': 'closed'}, {'id': 676579953, 'number': 13192, 'closed': datetime.datetime(2021, 7, 9, 11, 30, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 20, 7, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1351364.0, 'time_delta': '15 days, 15:22:44', 'additions': 899, 'deletions': 30, 'state': 'closed'}, {'id': 675550161, 'number': 13177, 'closed': datetime.datetime(2021, 6, 27, 5, 46, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 15, 44, 37, tzinfo=datetime.timezone.utc), 'time_taken': 396113.0, 'time_delta': '4 days, 14:01:53', 'additions': 562, 'deletions': 28, 'state': 'closed'}, {'id': 673865412, 'number': 13132, 'closed': datetime.datetime(2021, 7, 8, 11, 38, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 11, 22, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1642504.0, 'time_delta': '19 days, 0:15:04', 'additions': 452, 'deletions': 166, 'state': 'closed'}, {'id': 671910856, 'number': 13112, 'closed': datetime.datetime(2021, 6, 23, 18, 6, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 21, 16, 42, tzinfo=datetime.timezone.utc), 'time_taken': 593364.0, 'time_delta': '6 days, 20:49:24', 'additions': 729, 'deletions': 137, 'state': 'closed'}, {'id': 671041224, 'number': 13107, 'closed': datetime.datetime(2021, 6, 19, 20, 40, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 5, 56, 40, tzinfo=datetime.timezone.utc), 'time_taken': 312208.0, 'time_delta': '3 days, 14:43:28', 'additions': 2271, 'deletions': 1475, 'state': 'closed'}, {'id': 669640324, 'number': 13084, 'closed': datetime.datetime(2021, 6, 20, 22, 39, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 14, 57, 26, tzinfo=datetime.timezone.utc), 'time_taken': 546118.0, 'time_delta': '6 days, 7:41:58', 'additions': 956, 'deletions': 7, 'state': 'closed'}, {'id': 668819460, 'number': 13062, 'closed': datetime.datetime(2021, 6, 15, 5, 20, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 9, 3, 22, tzinfo=datetime.timezone.utc), 'time_taken': 245857.0, 'time_delta': '2 days, 20:17:37', 'additions': 32, 'deletions': 28, 'state': 'closed'}, {'id': 666631870, 'number': 13039, 'closed': datetime.datetime(2021, 6, 15, 10, 14, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 8, 6, 24, tzinfo=datetime.timezone.utc), 'time_taken': 439708.0, 'time_delta': '5 days, 2:08:28', 'additions': 419, 'deletions': 23, 'state': 'closed'}, {'id': 657882044, 'number': 12944, 'closed': datetime.datetime(2021, 6, 12, 16, 38, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 31, 2, 8, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1089058.0, 'time_delta': '12 days, 14:30:58', 'additions': 897, 'deletions': 81, 'state': 'closed'}, {'id': 655039321, 'number': 12932, 'closed': datetime.datetime(2021, 6, 1, 20, 8, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 27, 14, 11, 11, tzinfo=datetime.timezone.utc), 'time_taken': 453436.0, 'time_delta': '5 days, 5:57:16', 'additions': 9, 'deletions': 11, 'state': 'closed'}, {'id': 637616187, 'number': 12781, 'closed': datetime.datetime(2021, 6, 15, 4, 31, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 10, 13, 23, 18, tzinfo=datetime.timezone.utc), 'time_taken': 3078497.0, 'time_delta': '35 days, 15:08:17', 'additions': 2225, 'deletions': 1419, 'state': 'closed'}, {'id': 622088847, 'number': 12616, 'closed': datetime.datetime(2021, 5, 2, 14, 54, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 23, 13, 54, 28, tzinfo=datetime.timezone.utc), 'time_taken': 781174.0, 'time_delta': '9 days, 0:59:34', 'additions': 2210, 'deletions': 1532, 'state': 'closed'}, {'id': 619889627, 'number': 12574, 'closed': datetime.datetime(2021, 4, 23, 8, 23, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 21, 6, 22, 54, tzinfo=datetime.timezone.utc), 'time_taken': 180026.0, 'time_delta': '2 days, 2:00:26', 'additions': 30, 'deletions': 8, 'state': 'closed'}, {'id': 606870625, 'number': 12390, 'closed': datetime.datetime(2021, 4, 3, 10, 46, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 1, 4, 20, 45, tzinfo=datetime.timezone.utc), 'time_taken': 195958.0, 'time_delta': '2 days, 6:25:58', 'additions': 35, 'deletions': 11, 'state': 'closed'}, {'id': 600823724, 'number': 12331, 'closed': datetime.datetime(2021, 3, 26, 15, 38, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 25, 15, 10, 25, tzinfo=datetime.timezone.utc), 'time_taken': 88075.0, 'time_delta': '1 day, 0:27:55', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 585718878, 'number': 12110, 'closed': datetime.datetime(2021, 3, 18, 21, 39, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 16, 8, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1143103.0, 'time_delta': '13 days, 5:31:43', 'additions': 311, 'deletions': 91, 'state': 'closed'}, {'id': 584526985, 'number': 12094, 'closed': datetime.datetime(2021, 3, 6, 20, 22, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 4, 6, 23, 56, tzinfo=datetime.timezone.utc), 'time_taken': 223115.0, 'time_delta': '2 days, 13:58:35', 'additions': 57, 'deletions': 1, 'state': 'closed'}, {'id': 581481427, 'number': 12056, 'closed': datetime.datetime(2021, 4, 20, 4, 29, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 28, 9, 9, 42, tzinfo=datetime.timezone.utc), 'time_taken': 4389559.0, 'time_delta': '50 days, 19:19:19', 'additions': 7085, 'deletions': 3513, 'state': 'closed'}, {'id': 570585690, 'number': 11889, 'closed': datetime.datetime(2021, 2, 14, 10, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 9, 20, 23, 45, tzinfo=datetime.timezone.utc), 'time_taken': 396375.0, 'time_delta': '4 days, 14:06:15', 'additions': 847, 'deletions': 816, 'state': 'closed'}, {'id': 560102260, 'number': 11760, 'closed': datetime.datetime(2021, 1, 24, 3, 49, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 22, 17, 19, 4, tzinfo=datetime.timezone.utc), 'time_taken': 124254.0, 'time_delta': '1 day, 10:30:54', 'additions': 81, 'deletions': 64, 'state': 'closed'}, {'id': 543683495, 'number': 11463, 'closed': datetime.datetime(2021, 3, 10, 17, 43, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 21, 19, 36, 2, tzinfo=datetime.timezone.utc), 'time_taken': 6818862.0, 'time_delta': '78 days, 22:07:42', 'additions': 1689, 'deletions': 362, 'state': 'closed'}, {'id': 542933880, 'number': 11446, 'closed': datetime.datetime(2021, 3, 3, 23, 38, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 19, 14, 30, 6, tzinfo=datetime.timezone.utc), 'time_taken': 6426524.0, 'time_delta': '74 days, 9:08:44', 'additions': 302, 'deletions': 63, 'state': 'closed'}, {'id': 540670282, 'number': 11407, 'closed': datetime.datetime(2020, 12, 21, 17, 54, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 15, 20, 16, 35, tzinfo=datetime.timezone.utc), 'time_taken': 509883.0, 'time_delta': '5 days, 21:38:03', 'additions': 30, 'deletions': 49, 'state': 'closed'}, {'id': 540666390, 'number': 11406, 'closed': datetime.datetime(2021, 1, 9, 6, 44, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 15, 20, 13, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2111458.0, 'time_delta': '24 days, 10:30:58', 'additions': 18, 'deletions': 26, 'state': 'closed'}, {'id': 540660913, 'number': 11405, 'closed': datetime.datetime(2021, 2, 10, 22, 21, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 15, 20, 8, 16, tzinfo=datetime.timezone.utc), 'time_taken': 4932771.0, 'time_delta': '57 days, 2:12:51', 'additions': 16, 'deletions': 5, 'state': 'closed'}, {'id': 538977620, 'number': 11378, 'closed': datetime.datetime(2020, 12, 15, 8, 4, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 13, 16, 22, 53, tzinfo=datetime.timezone.utc), 'time_taken': 142892.0, 'time_delta': '1 day, 15:41:32', 'additions': 2, 'deletions': 7, 'state': 'closed'}, {'id': 532669857, 'number': 11331, 'closed': datetime.datetime(2021, 3, 15, 15, 45, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 4, 17, 16, 54, tzinfo=datetime.timezone.utc), 'time_taken': 8720906.0, 'time_delta': '100 days, 22:28:26', 'additions': 308, 'deletions': 70, 'state': 'closed'}]"
