pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1363644955,`ConstraintHandler` for discontinuous interpolations,"I haven't tested it with a problem, but it seems to work upon checking debugging mode.",True,729,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/729,https://github.com/Ferrite-FEM/Ferrite.jl/pull/729,closed,140,28,5,15,12,10,2,0,"[{'name': 'feature'}, {'name': 'gsoc23'}]",2023-05-24 19:04:45+00:00,2023-06-20 22:04:20+00:00,2343575.0,"27 days, 2:59:35","[{'comment_id': 1214804888, 'comment_body': 'Any reason not to error here?', 'comment_created': datetime.datetime(2023, 6, 2, 20, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1214805141, 'comment_body': '🤔', 'comment_created': datetime.datetime(2023, 6, 2, 20, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1214805737, 'comment_body': ""Looks like this isn't used after all, remove?"", 'comment_created': datetime.datetime(2023, 6, 2, 20, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1214806776, 'comment_body': 'I guess neither `get_continuous_interpolation` nor `IsDiscontinuous` is used anymore. Remove?', 'comment_created': datetime.datetime(2023, 6, 2, 20, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1214808689, 'comment_body': 'If you end up removing `get_continuous_interpolation`\r\n```suggestion\r\ndirichlet_facedof_indices(ip::DiscontinuousLagrange{shape, order}) where {shape, order} = dirichlet_facedof_indices(Lagrange{shape, order}())\r\n```', 'comment_created': datetime.datetime(2023, 6, 2, 20, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1215138066, 'comment_body': 'Not really.', 'comment_created': datetime.datetime(2023, 6, 3, 2, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1215138619, 'comment_body': '<img src=""https://media.tenor.com/GwZEshiH6jUAAAAM/disappearing.gif"" width=""40"" height=""40"" />\r\n', 'comment_created': datetime.datetime(2023, 6, 3, 2, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1226745995, 'comment_body': 'We do not need to adjust the dofs on shared entities for these elements, because there are no dofs on shared entities in first place.', 'comment_created': datetime.datetime(2023, 6, 12, 14, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1233087655, 'comment_body': 'Should this repeat `vertexdof_indices(ip::Interpolation)` or just refer to it?\r\nI repeated it so it appears in the LSP/IDE tip', 'comment_created': datetime.datetime(2023, 6, 17, 16, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1235291691, 'comment_body': 'I mean the resulting docstring should be a bit different, right? There is overlap because we use the same convention, which (as you already do) should be documented.', 'comment_created': datetime.datetime(2023, 6, 20, 13, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}]","[{'commit_sha': '8cfc3201c8dd2229412c05300f9b27e5dcda6ed0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3efd0e513ae65331795893d04aafc46a2afac2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030df5511e5dcf68fad01f4fe53e5f49aef80978', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a75fafe2de20c68380a47308ac9d44f350b36d19', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9286cf90f6543dc4fb21b3eaa5211563f2556aff', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17a479236c2980134bf1f1be42d06fc5b7faad7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b059b481fc2ccb87adb467a5731f20b7fa0612c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a8aaa58a9825e9bf3ba74a6bc6c851c65cb7605', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98bbad516b45a058c1075e54f458c1dedc725d11', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc96ce5c31ac79106899b5572e258735e5901be', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b308fce142882d3e92c8fd752dc3881fe04f9bf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852464a6a29f925b13096a9d4b6926ada25ed4ae', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9764ae8162244bf56a6d4aec17af84d461087f75', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b864017835ba743ce11586e8d994186e8ee5f4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdbd430d3bdd620a874c449ba248f32f5f9902f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1351359953,Cross-elements coupling for `DiscontinuousLagrange` sparsity patterns.,"It iterates over all cells twice, once to get the length of I,J and another to fill them. There is probably a better way to estimate their length.
Also, codegen here looks a bit complicated, I'm still learning how to use it.
I think explicit tests for sparsity patterns are missing (they're used inside other tests, but they themselves don't have a standalone test)

Manual tests:
- [x] Test with a single `DiscontinuousLagrange`
- [x] Test with multiple `DiscontinuousLagrange`
- [x] Test with older tests to make sure nothing breaks
- [x] Test with  `DiscontinuousLagrange` and  `Lagrange`
- [x] Test `coupling`

Tasks:
- [x] Write tests
- [x] Code works fine and doesn't break anything. I hope
- [x] Update docs

Things to check:
- [x] `push!` vs size precalculation
- [x] L2 trait

* I think I should stop removing the extra whitespaces :)",True,710,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/710,https://github.com/Ferrite-FEM/Ferrite.jl/pull/710,closed,354,111,7,71,14,44,2,0,"[{'name': 'feature'}, {'name': 'gsoc23'}]",2023-05-15 19:48:53+00:00,2023-07-25 07:56:15+00:00,6091642.0,"70 days, 12:07:22","[{'comment_id': 1195840470, 'comment_body': 'Commenting this makes mixed interpolation symmetric, at least for full coupling for now,\r\n```julia\r\njulia> grid = generate_grid(Line, (3,));\r\n\r\njulia> topology = ExclusiveTopology(grid);\r\n\r\njulia> ip = DiscontinuousLagrange{1, RefCube, 2}();\r\n\r\njulia> ipc = Lagrange{1, RefCube, 1}();\r\n\r\njulia> dh = DofHandler(grid);\r\n\r\njulia> add!(dh, :u, 1,ip);\r\n\r\njulia> add!(dh, :v, 1,ipc);\r\n\r\njulia> close!(dh);;\r\n\r\njulia> K = create_sparsity_pattern(dh, topology = topology, cross_element_full_coupling = true)\r\n13×13 SparseMatrixCSC{Float64, Int64} with 137 stored entries:\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   ⋅    ⋅    ⋅    ⋅\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   ⋅    ⋅    ⋅    ⋅\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   ⋅    ⋅    ⋅    ⋅\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   ⋅    ⋅    ⋅    ⋅\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n  ⋅    ⋅    ⋅    ⋅   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n  ⋅    ⋅    ⋅    ⋅   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n  ⋅    ⋅    ⋅    ⋅   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n  ⋅    ⋅    ⋅    ⋅   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n```\r\nEdit: Only L304 needs to be commented', 'comment_created': datetime.datetime(2023, 5, 17, 1, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1196347063, 'comment_body': 'We might want to think about this type of branching further. I have thought about adding a traits system to the interpolations to mark them e.g. as ""L2-conforming"", so users can add new interpolations (with corresponding dispatches), add the trait and things will just work out of the box. What do you think? cc @fredrikekre ', 'comment_created': datetime.datetime(2023, 5, 17, 11, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1197046000, 'comment_body': 'Yes, something more extensible that `typeof(fi)<:DiscontinuousLagrange` would be to prefer (like traits as already mentioned). Something similar to https://docs.julialang.org/en/v1/manual/interfaces/:\r\n\r\n```\r\nIsDiscontinuous(::Type) = false\r\n...\r\nIsDiscontinuous(::Type{<:DiscontinuousLagrange}) = true\r\n\r\nif IsDiscontinuous(typeof(fi)) ...\r\n```', 'comment_created': datetime.datetime(2023, 5, 17, 20, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KristofferC', 'type': 'User'}, {'comment_id': 1198366348, 'comment_body': ""This function tests for field coupling. I'll work on generalizing it for component coupling."", 'comment_created': datetime.datetime(2023, 5, 18, 22, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1198419618, 'comment_body': 'I would like to propose to dispatch this in the interpolation api via something like `IsDiscontinuous(ip::VectorizedInterpolation) = IsDiscontinuous(ip.ip)`', 'comment_created': datetime.datetime(2023, 5, 19, 0, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1198424974, 'comment_body': '```suggestion\r\nend\r\n\r\n```', 'comment_created': datetime.datetime(2023, 5, 19, 0, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1198436406, 'comment_body': ""Done, thanks!\r\nIt's now dispatched for both variables and types, we can remove one if it can cause confusion."", 'comment_created': datetime.datetime(2023, 5, 19, 0, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1204748157, 'comment_body': 'I think this logic is faulty. Think e.g. about P1P0 elements for Stokes problems. Here the pressure approximation is discontinuous but we do not want to couple the elements. I think the face coupling matrix needs to be an explicit input in our framework, because there is no implicit information in the interpolation when we want to couple between elements.', 'comment_created': datetime.datetime(2023, 5, 24, 20, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1204754605, 'comment_body': '(Read comment below first)\r\n\r\nI think can should just have one more argument for the face coupling here.\r\n\r\nAlso, doc string needs to be updated to clarify the new arguments.', 'comment_created': datetime.datetime(2023, 5, 24, 20, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1204755526, 'comment_body': 'I think we can roll back this file for now.\r\n\r\n`get_continuous_interpolation` is the piece for the other PR, right? Then make sure to cherry pick this into a separate PR.', 'comment_created': datetime.datetime(2023, 5, 24, 21, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1204761035, 'comment_body': 'Also marking this line as a reminder to check if this is a proper fix for https://github.com/Ferrite-FEM/Ferrite.jl/issues/728', 'comment_created': datetime.datetime(2023, 5, 24, 21, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1204795373, 'comment_body': 'I was also going to comment about this. Perhaps, if you request cross element couplings, a reasonable default is to couple discontinuous elements?', 'comment_created': datetime.datetime(2023, 5, 24, 21, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1206978856, 'comment_body': ""I don't think this one has to do with fixing #728, as it doesn't affect this PR (having inclusive topology doesn't break it)\r\nI proposed a potential fix in #728 comments."", 'comment_created': datetime.datetime(2023, 5, 26, 15, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1206980741, 'comment_body': 'Indeed, but `IsDiscontinuous` is still needed here', 'comment_created': datetime.datetime(2023, 5, 26, 15, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1211418247, 'comment_body': ""I did some edits for this, now there are 2 coupling matrices. Elements coupling defaults to no coupling while same-cell coupling defaults to full coupling as it used to. Elements coupling also requires interpolation to be discontinuous to be coupled.\r\nI'll look into the resulting matrices to make sure I haven't messed something. Thanks!"", 'comment_created': datetime.datetime(2023, 5, 31, 9, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1221706604, 'comment_body': ""I'm not sure but the test looks like it's just repeating the implementation in a less optimized way. I'm thinking of a way to automate it."", 'comment_created': datetime.datetime(2023, 6, 7, 14, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1221708252, 'comment_body': 'Indeed. Unit tests should never mirror internals, but check for simple invariants.', 'comment_created': datetime.datetime(2023, 6, 7, 14, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1231164015, 'comment_body': ""I think this now acts like the other tests but somewhat automated * and hopefully doesn't mirror internals *"", 'comment_created': datetime.datetime(2023, 6, 15, 15, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1231164134, 'comment_body': ""I'm testing something that'll probably eliminate the need of these matrices. \r\n"", 'comment_created': datetime.datetime(2023, 6, 15, 15, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1231169606, 'comment_body': 'Why not use `celldofs` instead of `dh.cell_dofs`?', 'comment_created': datetime.datetime(2023, 6, 15, 15, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1231177097, 'comment_body': 'Missed it, will change it with next push. 😄 ', 'comment_created': datetime.datetime(2023, 6, 15, 15, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1231180545, 'comment_body': 'Yes, you can eliminate these and get the information directly from the dof handler+`couplings` above.', 'comment_created': datetime.datetime(2023, 6, 15, 15, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1231187033, 'comment_body': 'Indeed, but vectorized interpolation will probably need an extra variable to store what dim to use.', 'comment_created': datetime.datetime(2023, 6, 15, 15, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252786324, 'comment_body': 'Needs something like\r\n```suggestion\r\n        has_discontinuous_ip = has_discontinuous_ip || any(ip -> is_discontinuous(ip),sdh.field_interpolations)\r\n```\r\notherwise it will be reset for every new subdofhandler.', 'comment_created': datetime.datetime(2023, 7, 5, 8, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252789747, 'comment_body': '```suggestion\r\n    # Add cross element couplings if there are discontinuous interpolations\r\n    if has_discontinuous_ip && !isnothing(elements_coupling) && any(elements_coupling)\r\n        cnt = cross_element_coupling!(dh,topology,sym, keep_constrained, elements_couplings, cnt, I, J)\r\n    end\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252794396, 'comment_body': '```suggestion\r\n        for (cell_field_i, cell_field) in pairs(sdh.field_names)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252802671, 'comment_body': 'You can/should loop directly over the cellset associated with this subdofhandler:\r\n```suggestion\r\n            for cell_idx in BitSet(sdh.cellset)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252803743, 'comment_body': '```suggestion\r\n                    for (neighbor_field_i, neighbor_field) in pairs(sdh.field_names)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252818861, 'comment_body': 'You can probably use CellCaches here (instead of the view):\r\n```\r\ncc1 = CellCache(dh)\r\ncc2 = CellCache(dh)\r\n\r\nreinit!(cc1, cell_idx)\r\nreinit!(cc2, neighbor_cell)\r\n```\r\netc', 'comment_created': datetime.datetime(2023, 7, 5, 9, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252820244, 'comment_body': 'So just to be clear, coupling is added only if the neighbor interpolation is also discontinuous? I think maybe we even warn in DofHandler construction now if all interpolations for a field don\'t belong to the same ""family"".', 'comment_created': datetime.datetime(2023, 7, 5, 9, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252821843, 'comment_body': ""Don't think this needs to be exported, and I don't think you need it internally either, use CellCache (possibly with more fine grained update flags to only update the dofs)."", 'comment_created': datetime.datetime(2023, 7, 5, 9, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252822823, 'comment_body': 'Can canonicalize the answers like so:\r\n```suggestion\r\nis_discontinuous(ip::Interpolation) = is_discontinuous(typeof(ip))\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252823059, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252823767, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252825181, 'comment_body': '```suggestion\r\nis_discontinuous(::Type{<:VectorizedInterpolation{<:Any, <:Any, <:Any, ip}}) where {ip} = is_discontinuous(ip)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252830919, 'comment_body': 'Can you clarify how one opt-in to getting cross element couplings now. Do you need to pass `elements_coupling` *and* topology?', 'comment_created': datetime.datetime(2023, 7, 5, 9, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1253024551, 'comment_body': 'You mean I should implement this : https://github.com/Ferrite-FEM/Ferrite.jl/blob/ccd0e71570993ee91c3adaa4ab97569f21a476e1/src/Dofs/DofHandler.jl#L231 ? If so, check for same interpolation or check for same family?', 'comment_created': datetime.datetime(2023, 7, 5, 12, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1253027676, 'comment_body': ""No you don't have to do that, not in this PR. I just meant that if we add that check then this should be fine, because then `:u` must always be discontinuous"", 'comment_created': datetime.datetime(2023, 7, 5, 12, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1253028684, 'comment_body': '(I think the interpolation type (Lagrange, DiscontinuousLagrange, ...), and the order, should be checked, but refshape might differ).', 'comment_created': datetime.datetime(2023, 7, 5, 12, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1253360286, 'comment_body': ""I think we can do it but not sure if should (would require more changes for coupling different fields on different subdofhandlers), the idea here is iterating over all cells that have a field.\r\nFor example, full coupling with the test:\r\n```julia\r\n    dh = DofHandler(grid)\r\n    sdh1 = SubDofHandler(dh, Set(1))\r\n    add!(sdh1, :u, DiscontinuousLagrange{RefQuadrilateral,1}()^2)\r\n    add!(sdh1, :y, DiscontinuousLagrange{RefQuadrilateral,1}())\r\n    add!(sdh1, :p, Lagrange{RefQuadrilateral,1}())\r\n    sdh2 = SubDofHandler(dh, Set(2))\r\n    add!(sdh2, :u, DiscontinuousLagrange{RefQuadrilateral,1}()^2)\r\n    close!(dh)\r\n```\r\n Would fail because the second subdofhandler doesn't have `:y` field, thus it won't couple `:u` with `:y` for second cell dofs\r\n would result in:\r\n ```julia\r\n ⎡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎤\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⎥\r\n⎢⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⎥\r\n⎣⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⎦\r\n```\r\nwhile the current implementation results in:\r\n```julia\r\n⎡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎤\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⎥\r\n⎢⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⣿⣿⎥\r\n⎣⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⣿⣿⎦\r\n```\r\nNotice some couplings are missing.\r\nPlease correct me if I'm wrong/they shouldn't be coupled.\r\nEdit: or repeat the adding part like in the last commit, it doesn't seem to improve performance, although if we don't use BitSet it improves a bit (at least for the small cases I tested)"", 'comment_created': datetime.datetime(2023, 7, 5, 16, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1255850173, 'comment_body': 'I am not sure I follow, sorry, can you post the full code for producing those two patterns so I can play around a bit? Is the problem that you only add the dofs in one ""direction"" when looping over the cells?', 'comment_created': datetime.datetime(2023, 7, 7, 13, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1255867254, 'comment_body': 'Yes, the problem is that the code added dofs in one direction, so if one cell has more fields than its neighbor they will be coupled in one direction only. This was mitigated by:\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/bb16acbee3f77d283a5864788dc54cdf75c4b863/src/Dofs/sparsity_pattern.jl#L110-L122\r\n\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/bb16acbee3f77d283a5864788dc54cdf75c4b863/src/Dofs/sparsity_pattern.jl#L161-L164\r\n\r\nIn the last commits, so we add once in each direction.\r\nFor the full code IIRC:\r\n```julia\r\ngrid = generate_grid(Quadrilateral, (2, 1))\r\ntopology = ExclusiveTopology(grid)\r\n\r\ndh = DofHandler(grid)\r\nsdh1 = SubDofHandler(dh, Set(1))\r\nadd!(sdh1, :u, DiscontinuousLagrange{RefQuadrilateral,1}()^2)\r\nadd!(sdh1, :y, DiscontinuousLagrange{RefQuadrilateral,1}())\r\nadd!(sdh1, :p, Lagrange{RefQuadrilateral,1}())\r\nsdh2 = SubDofHandler(dh, Set(2))\r\nadd!(sdh2, :u, DiscontinuousLagrange{RefQuadrilateral,1}()^2)\r\nclose!(dh)\r\n\r\ncreate_sparsity_pattern(dh; topology = topology, elements_coupling = trues(3,3))\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 13, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1255886115, 'comment_body': 'Okay, so right now we add in both directions for every cell then?', 'comment_created': datetime.datetime(2023, 7, 7, 14, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1255896872, 'comment_body': 'indeed', 'comment_created': datetime.datetime(2023, 7, 7, 14, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': '3b74b2ea0e102e3d4b1a1851f98af147284f7d4d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453ed62221fb3a84e33e89fd51c09e40e9f3c32b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '842480592d4458c72e88c46a0d7e172582768ccf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '941d1b73ed3d0dabaf8ec9eca22715c9dbb8e5b6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '945c87af4c0add91910a3af5eb3751e8f2bf2ff2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd98ba702826734231ea48d8af42cdeaa9969120c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d26fbc79dbe35bcb87ac4b109e1990f7d01f0f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddba70c060c9cb9a28b501b70a02903cc3d116a7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac20866a6e446a8c881f85cab8d9d3fab9d1ce20', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae11a0135dab23177ace39ce3d17b8701b91e151', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '788317ac9357f053d0914cb886669c8d893ec99d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da9c44b1ba4daadcf0d76ce0eea94da3cc19084e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c76b6fd1893e257e1654c0fcc5a25d9785bef8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dfd6b2fdcab1fd1653c2c8c0ba582f0fc609679', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '072c6f760e2f142c26cd88fe50749b2c6ffa43d7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37618289867ff7fb8a87e95b0b5f2020cf835fe6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7fac62dcb6545864108b907beca77037a388b8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de25a472f476dc4906aae37083697ba356c78aa', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd953555c3923bcb74d721d5e6d1c17bd77e1146', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c0baa25f0417cee091f59bfbdbf06e1da563cb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695fa16b7932b765834e8e81ca68147653a2270d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb8ff3f63610d274dcffd098cdda2d759d6293ae', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '779d3959b1f48c8f9bc627b811b2e7d03c7e817d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f64cb23d96285a5445d6375e5c8e0c97fe600ca7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76ff5ab07136490f283b0775c61e36f498b2db78', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c421f30987166959f6b0c46febd3ac2b6e1165c2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd75e9cc1f21882ec71e503014aa40376d7e866d7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cbd306cdd6b4e485bde34ac2fcf28aeba208c45', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db3cba843fd617693dff35081642b6818eb5990c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9bf93b79997364e7765c2190d2f9c668ae750bd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '462abca52f244257fd670c2745efe634fea5f8d4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0962158f86bc44845c31a2a5b5f80b637263b730', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '671493ad17a6f679af05db4b4680817844259e2d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a3c409c6243d32fb23e9bfb23fc1165be6d6861', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a44ba2d7ac0b46c0cf59fac9127f252ae97f9d0c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc790e646b997a9318eb911f1a0d4b09e396330', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7b880d317336ac1e6c75851c52725e3a2a72835', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db675e0a1a5d14fb3db26690dd81790e5a53ce13', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbf319c58b132148f827406f8f4a0093f8ff3664', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c766b01837134aefa59675998646e9e122e9ece', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4bf5720af04c0ddf26b1c8eed7ed3ce5087320f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe184fcb1bc0eeed10f70bcba1e78242b55f891', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a5db3db909375b5e3c384746557581d8abd33d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eda8d7b41bcb0efbf6f3dd4994f432ab8885d82', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bb299a7369d1fdd762f469e9dfdac4a74a018d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1501115797599d73d2ebb89c60d79fda0ee8f58', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b65a4691afc6141d226ec27cea1b2df41b9391fb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d1c6c4fd02e51188e691ef2d992e6cd4095e35b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24ebc14f520d4fef44296788490f28b313475927', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ef8323ff96fe31787e6e1c0ab89c0c9bbf3ac1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e86c90491d9e1a9473e9805657beb400d2febab', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b27e646ea7b98f454e5eb7759c98822924ccbadb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '153947633f7a98d08a0e641dc4b31cdbae4ccb49', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b719411c8b4e90c020a8c617e339356d4796a663', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd0e71570993ee91c3adaa4ab97569f21a476e1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a7425e992335a51887ff92a7b04f2e845090ef', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e340122aa12f5224e57a09e3a7f3c3d537f9d46', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9649beadd27c60692cdfb283bd5a881cd3ada54f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1bd454da8b6ff15eadfe03f00ba6abfb0c56bc3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa9d642627d448b99be77a850476760b0564991', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28d907a5c7773bb7c47aa019b02e6144bccc4686', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d87f9f09e22841889b7f97fcf69f71b4ddb7e47', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb16acbee3f77d283a5864788dc54cdf75c4b863', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e4a07a8b8b8845d07270f5f0e2a8c648f94e50a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '073e29de49c60082e3d37b04de3d04aa4368190a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d8018e96909f98d0902d5e3a935d70b97ec303e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1130709880da9c644df3c5b485003d953ec3e511', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f93c311bb3f35a3d1bd1fe45f1605d783879b0a4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aaada19bbf8b0b9f34b79561718d9000d6cde3f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a72dbb940765e125cf5aaa146418ba1dfef909b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536249d37d3d8db557d01411401b111f6ce7a9bc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1403534950,`InterfaceCache` & `InterfaceIterator`,"Used to be in #743 , now its own PR.

Tasks: 
- [x] `InterfaceCache`
- [x] `InterfaceIterator`
- [ ] docs
- [x] tests",True,747,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/747,https://github.com/Ferrite-FEM/Ferrite.jl/pull/747,closed,153,18,4,62,5,26,2,0,"[{'name': 'feature'}, {'name': 'gsoc23'}]",2023-06-22 13:33:14+00:00,2023-07-19 15:36:53+00:00,2340219.0,"27 days, 2:03:39","[{'comment_id': 1260391600, 'comment_body': 'What do you think these should be like? \r\n+ reminder missing docs.', 'comment_created': datetime.datetime(2023, 7, 11, 23, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1260392425, 'comment_body': 'Ref #759', 'comment_created': datetime.datetime(2023, 7, 11, 23, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1260396349, 'comment_body': 'The set here is [Tuple([FaceIndex(cell_a, face_a), FaceIndex(cell_b, face_b)])...].\r\nI think user can obtain it using faceset + topology.face_face_neighbor. and it\'s probably more consistent with how `FaceCache` uses `Set{FaceIndex}`. If you\'re ok with this approach I can document it.\r\nNote that it does not check if the user passes ""bad"" faceindex (not neighbors?). the check happens when reiniting interfacevalues IIRC', 'comment_created': datetime.datetime(2023, 7, 11, 23, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1260397210, 'comment_body': 'This should work with #743 ', 'comment_created': datetime.datetime(2023, 7, 11, 23, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1260981619, 'comment_body': 'How does this differ from faceskeleton?', 'comment_created': datetime.datetime(2023, 7, 12, 10, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1261001807, 'comment_body': 'I think we should cache the union of the dofs here, it will be expensive to do the `vcat` inside `interfacedofs(...)`:\r\n```suggestion\r\nstruct InterfaceCache{FC<:FaceCache}\r\n    face_a::FC\r\n    face_b::FC\r\n    dofs::Vector{Int}\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 11, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261005059, 'comment_body': 'Perhaps the way to use this would be through `getnodes(ic.a)` and `getnodes(ic.b)` instead?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261006004, 'comment_body': '```suggestion\r\n    return InterfaceCache(face_a, face_b, Int[])\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 11, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261008485, 'comment_body': '```suggestion\r\n    reinit!(cache.face_b, face_b)\r\n    resize!(cache.dofs, length(face_a.dofs) + length(face_b.dofs))\r\n    for (i, d) in pairs(face_a.dofs)\r\n        cache.dofs[i] = d\r\n    end\r\n    for (i, d) in pairs(face_b.dofs)\r\n        cache.dofs[i + length(face_a.dofs)] = d\r\n    end\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 11, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261009423, 'comment_body': 'Maybe remove in favor of `getnodes(ic.a)` and `getnodes(ic.b)`?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261010045, 'comment_body': 'Same thing here; `get_cell_coordinates(ic.a)` and `get_cell_coordinates(ic.b)`?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261010411, 'comment_body': 'and here (`cellid(ic.a)` and `cellid(ic.b)`)?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261010560, 'comment_body': '```suggestion\r\ninterfacedofs(ic::InterfaceCache) = ic.dofs\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 11, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261011270, 'comment_body': 'What is the indended use for this?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261013589, 'comment_body': 'With the other suggestions, perhaps call these\r\n```suggestion\r\n    a::FC\r\n    b::FC\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261019469, 'comment_body': ""Perhaps the set functionality doesn't need to be here and we loop over all of them? You can always skip elements inside the loop:\r\n```julia\r\nfor ic in InterfaceIterator(...)\r\n    if some_condition(ic)\r\n        continue\r\n    end\r\n    # do stuff\r\nend\r\n```"", 'comment_created': datetime.datetime(2023, 7, 12, 11, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261123182, 'comment_body': 'Can be used for \r\n```julia\r\nfunction_(value|gradient|...)(iv::InterfaceValues, qp::Int, ue::Vector{Float64}, dof_range_a::UnitRange, dof_range_b::UnitRange)\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 7, 12, 12, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1261138448, 'comment_body': ""It's face skeleton - boundary faces\r\nWas thinking maybe we can buffer this while constructing face skeleton if it's more efficient."", 'comment_created': datetime.datetime(2023, 7, 12, 12, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1261138916, 'comment_body': 'Hmm, but the dof ranges there would be dof ranges for the fields within each ""interface dofrange"", i.e. to select the u-dofs if you have both u and p.', 'comment_created': datetime.datetime(2023, 7, 12, 12, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261189529, 'comment_body': 'Btw, should set be changed to a vector/Array as its size is already known and the elements are unique? It may have better performance IIUC', 'comment_created': datetime.datetime(2023, 7, 12, 13, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1261459612, 'comment_body': ""Doing \r\n```julia\r\njulia> grid = generate_grid(Hexahedron,(100,100,100))\r\nGrid{3, Hexahedron, Float64} with 1000000 Hexahedron cells and 1030301 nodes\r\n\r\njulia> using BenchmarkTools\r\n\r\njulia> topology = ExclusiveTopology(grid);\r\n\r\njulia> @benchmark InterfaceIterator(grid, topology)\r\n```\r\nUsing set:\r\n```julia\r\njulia> @benchmark InterfaceIterator(grid, topology)\r\nBenchmarkTools.Trial: 9 samples with 1 evaluation.\r\n Range (min … max):  502.982 ms … 706.988 ms  ┊ GC (min … max): 0.00% … 25.69%\r\n Time  (median):     598.487 ms               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   597.327 ms ±  56.248 ms  ┊ GC (mean ± σ):  3.38% ±  8.56%\r\n\r\n  ▁               ▁     █     ▁▁  ▁       ▁                   ▁  \r\n  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁█▁▁▁▁▁██▁▁█▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁\r\n  503 ms           Histogram: frequency by time          707 ms <\r\n\r\n Memory estimate: 354.64 MiB, allocs estimate: 21.\r\n ```\r\n Using Vector:\r\n ```julia\r\n julia> @benchmark InterfaceIterator(grid, topology)\r\nBenchmarkTools.Trial: 40 samples with 1 evaluation.\r\n Range (min … max):  108.250 ms … 277.395 ms  ┊ GC (min … max): 0.00% … 55.66%\r\n Time  (median):     120.271 ms               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   126.711 ms ±  25.340 ms  ┊ GC (mean ± σ):  3.05% ±  8.80%\r\n\r\n     ▃█                                                          \r\n  ▃▁▃██▇▄▃▃▄▃▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃ ▁\r\n  108 ms           Histogram: frequency by time          277 ms <\r\n\r\n Memory estimate: 90.64 MiB, allocs estimate: 14.\r\n```\r\n I think it can be even better if we store a topology reference in `InerfaceIterator` and skip boundary faces when iterating so we (probably?) don't allocate. What do you think?"", 'comment_created': datetime.datetime(2023, 7, 12, 16, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1262264963, 'comment_body': '```suggestion\r\n    InterfaceCache(grid::Grid)\r\n    InterfaceCache(dh::AbstractDofHandler)\r\n\r\nCreate a cache object with pre-allocated memory for the nodes, coordinates, and dofs of an\r\ninterface. The cache is updated for a new cell by calling `reinit!(cache, face_a, face_b)` where\r\n`face_a::FaceIndex` and `face_b::FaceIndex` are the two interface faces.\r\n\r\n**Struct fields of `InterfaceCache`**\r\n - `ic.a :: FaceCache`: face cache for the first face of the interface\r\n - `ic.b :: FaceCache`: face cache for the second face of the interface\r\n - `ic.dofs :: Vector{Int}`: global dof ids for the interface (union of `ic.a.dofs` and `ic.b.dofs`)\r\n\r\n**Methods with `InterfaceCache`**\r\n - `reinit!(cache::InterfaceCache, face_a::FaceIndex, face_b::FaceIndex)`: reinitialize the cache for a new interface\r\n - `interfacedofs(ic)`: get the global dof ids of the interface\r\n \r\nSee also [`InterfaceIterator`](@ref).\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 9, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1262266920, 'comment_body': '```suggestion\r\n    InterfaceIterator(grid::Grid, [topology::ExclusiveTopology])\r\n    InterfaceIterator(dh::AbstractDofHandler, [topology::ExclusiveTopology])\r\n    \r\nCreate an `InterfaceIterator` to conveniently iterate over all the interfaces in a\r\ngrid. The elements of the iterator are [`InterfaceCache`](@ref)s which are properly\r\n`reinit!`ialized. See [`InterfaceCache`](@ref) for more details.\r\nLooping over an `InterfaceIterator`, i.e.:\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 9, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1266411940, 'comment_body': ""Doesn't seem included in this PR\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 7, 18, 8, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1266816473, 'comment_body': ""I wonder if this can be done lazily. There doesn't seem to be a need to materialize the set here, right? Just loop over all of them and skip the ones which doesn't have a neighbor"", 'comment_created': datetime.datetime(2023, 7, 18, 13, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1267573318, 'comment_body': 'Like this?\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/7fe9140555b73137afbdd7188b808d1c468d98df/src/iterators.jl#L341-L371', 'comment_created': datetime.datetime(2023, 7, 19, 5, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': '000eab44a28bed4aa7fe05299ad1d9527414aef0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d1c0e03e3bba0b23472cd815ecd665220fdf6e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5568746ce59c6f3c1d9edd122b7ed0520d1f2dc8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa236b37798bc524edd2e937d3f4c6055e8c3c8b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4754f2effe2e52844980111dc0f537a0363a211', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69b2cd434b36b89f23d468da381302da2488fe1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edfa09c75f4403d7c115a018a3b5ee584f9a9658', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06dc9e215ffee88e5964976bdf02ef5225c24d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4889e2f29f9f4ba50ad1e5067576ddf0b9a45ae', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3afb9623e4bf75117f24ad8c994bd0bb6f0ff2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60573db45ab4cca4c4b065603b4fb252d7816e7b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e81b66fdc94b0770aee7ea9f76e92efa10fc7cd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0065423731d996b60fb6866e5840e56d39daf8c2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a530f760a1029a349f24768d8571357f7fb222', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a842a3acb5dab755929b1e852b152bd995dd52', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e03b2a0dd1f6a3efb60a9a87ea5af26abdc1a3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b1f495e87c94432dd7a8f09113fd6c150b496e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09fa6bd448dda4a439f23bc20c74a065ad5bd255', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bb40ffec967b606e017ebd7100daf50f865f40', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '698874a887cbdcd58ea1438178ebb08bff4543f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e75325ece719b5c554f767a2907d0f03f75c31', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e3429f43fb6c6b07291acf7806ce9b66b6e73a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb5ddf52f49552d94d555d220e87274bdf85874', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bf804536287df1eefc35039ac774dae69e23b8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d59a7500b6e25efde25df120ae588865cb068e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c60a0b6d8b27457da99c56e6cc4819ca74e7f19', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de83a50e78fe878218f0508bc92319836cb09582', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfce1b1c084592eb9e082ec795cabfefdb89139', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10cf989c45306a54372eec3608a247f471112c0f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b86e289d4256d296b85d24490b8a702cd6fbcae3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34d72de0d68e288600d54482cd1e6567e15a6e98', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c03c787cb7d25bb8915e56197e41f2d98e95f360', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6324a83d26c5fdc1901f119ba3e7c7fd3fd496', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f6a397b719795475992e0365a5b4046d1b2c39', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef539491f7a0b51c4864cca8d72d963a7c01823b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd221888ba92450981ef21e9c31aa27e20f929523', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce68077060c9c56c5ab7c18b3409d5616b850cf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beae06b47829f8e8e5eb9b739832ab3a9126e7b3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ff108b8a419b8ed9facb887f84477e27df968f0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ce3ca98ade249db6a252b4c9919af71de154337', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df52eaae4ab309bdf2e1187937151a6933cf01a7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655e19415e85d4d9b7fafc28f49eadafd04d3f0d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec49edcd1d76be7c1a8e9582c02929aca120437f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '633e74b550b87caec2890d81c2209c9cb0430458', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ddde212ff6c7a9648b92b4b1925e4dccc9795e5', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e907e81ad0e960a3dbcb135e90a0f8198829cb81', 'committer_username': 'termi-official', 'committer_name': 'Dennis Ogiermann', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 13, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f313630b0699266a1f47284c55fc17151fec7980', 'committer_username': 'termi-official', 'committer_name': 'Dennis Ogiermann', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 13, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157222bdc53dba9a59123b96aa306d5aff532ce7', 'committer_username': 'lijas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 6, 12, 13, 34, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b9ffcfa510b774d9ad831cfb4a78964e22b5a6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaa80d1e0a95150b8f1482ebd5c11ca46b09df0', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5f1e4d2965f17160f9699adfe701fce20bd813', 'committer_username': 'termi-official', 'committer_name': 'Dennis Ogiermann', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 13, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca2a4a5673d9b6db7ff161888e24e9b4abc09d2b', 'committer_username': 'termi-official', 'committer_name': 'Dennis Ogiermann', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 13, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cec9ad2f63a847ecc8fbaa885ea985ee3ea2fd9', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c35006214148399f476901507e026ceb5208e0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07727d92edff1b090ad03824941bf991ada185e4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00be76ad04bcb938ccf2f574b8b0c82c9f314000', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '164141b4ba31de99eec61cc63dbf86d9209e4acc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5c6a9a6c1b8b082d00b992a9ea30787819f18a0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e285174e1895417892be1a2459c6035a7aea2fe', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76e429a62186b907ee0f9f23bdcc9f9b76fc2413', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b155e8c0f35c6fcbd7a035e6fbbb2dec522f6fad', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe9140555b73137afbdd7188b808d1c468d98df', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1413335271,Make benchmarks work with master branch,"Relates to #722
Main changes are:

- `(Cell/Face)(Scalar/Vector)Values` -> `(Cell/Face)Values` 
- Remove `spatial_dim` from interpolations
- Using `FaceQuadratureRule` for `FaceValues`
- `(Cell/Face)Values{dim,T,refshape}` -> `(Cell/Face)Values{<: Ferrite.InterpolationByDim{dim}}`
- FieldHandler -> SubDofHandler",True,751,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/751,https://github.com/Ferrite-FEM/Ferrite.jl/pull/751,closed,37,38,4,4,3,15,2,0,"[{'name': 'bugfix'}, {'name': 'gsoc23'}]",2023-06-29 13:22:46+00:00,2023-07-04 13:33:43+00:00,432657.0,"5 days, 0:10:57","[{'comment_id': 1246634707, 'comment_body': 'Can you open an issue after we merge this with a small description of the issue here? Because I think this currently only tests Lagrange order 1 on Quad and Hex (which seems like a weird restriction)', 'comment_created': datetime.datetime(2023, 6, 29, 13, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1246638286, 'comment_body': 'I think it tests Serendipity order >=2 (but currently 2 because of `for order in 1:2`)on Quad and Hex, the idea is that these are the two Serendipity implemented and the only order implemented is 2', 'comment_created': datetime.datetime(2023, 6, 29, 13, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1246750411, 'comment_body': 'Oh, right, not sure how I missed this. :D ', 'comment_created': datetime.datetime(2023, 6, 29, 15, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1251157513, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 17, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1251161090, 'comment_body': '`Ferrite.value` is deprecated', 'comment_created': datetime.datetime(2023, 7, 3, 17, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1251161824, 'comment_body': 'We can eliminate this hack with the new interface (because the reshape is now part of the cell definition).', 'comment_created': datetime.datetime(2023, 7, 3, 18, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1251396755, 'comment_body': ""I was thinking we can do `geo_type.super.parameters[1]`, use `getcells`, or dispatch `getrefshape` for cell types\r\nDid `geo_type.super.parameters[1]` for now not to use unnecessary calls or add new functionality if it's only used here, what do you think?"", 'comment_created': datetime.datetime(2023, 7, 4, 2, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1251847923, 'comment_body': 'Why is this duplicated?', 'comment_created': datetime.datetime(2023, 7, 4, 10, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251852887, 'comment_body': 'I would add a helper method for this, `getrefshape(::Type{T}) where {refshape, T <: AbstractCell{refshape}} = refshape`.', 'comment_created': datetime.datetime(2023, 7, 4, 10, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251853137, 'comment_body': 'Use the helper here.', 'comment_created': datetime.datetime(2023, 7, 4, 10, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251853189, 'comment_body': 'Use the helper here.', 'comment_created': datetime.datetime(2023, 7, 4, 10, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251854850, 'comment_body': '```suggestion\r\nfunction _generalized_ritz_galerkin_assemble_local_matrix(grid::Ferrite.AbstractGrid, cellvalues::CellValues, f_shape, f_test, op)\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 10, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251901165, 'comment_body': '```suggestion\r\nfunction _generalized_ritz_galerkin_assemble_local_matrix(grid::Ferrite.AbstractGrid, facevalues::FaceValues, f_shape, f_test, op)\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 11, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251903034, 'comment_body': '```suggestion\r\nfunction _generalized_petrov_galerkin_assemble_local_matrix(grid::Ferrite.AbstractGrid, facevalues_shape::FaceValues{<: Ferrite.InterpolationByDim{dim}}, f_shape, facevalues_test::FaceValues, f_test, op)\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 11, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251919052, 'comment_body': ""Ah sorry, didn't notice it."", 'comment_created': datetime.datetime(2023, 7, 4, 11, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': 'd45787ed4a68468a7063e4b14d63facf83ec5504', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcf0166258e8d1ef4ca39b949c781085bf6ee830', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b008438aaac0281352cf22f32619f2875e604bb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e52957bac59029ae10e187516705cd2033b0dbc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1397258858,`InterfaceValues` for DG interface integration,"Tasks:

- [x] `InterfaceValues`
- [x] syncing/transforming quadrature points
- [x] docs
- [x] tests


##  After merge

* [x] open issue to discuss mixed grid support for `InterfaceValues`
* [ ] check subdomain support and possibly open issue
* [ ] open issue about the investigation of mortaring with the new infrastructure",True,743,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/743,https://github.com/Ferrite-FEM/Ferrite.jl/pull/743,closed,1190,45,18,158,18,157,2,0,"[{'name': 'feature'}, {'name': 'gsoc23'}]",2023-06-18 19:53:03+00:00,2023-12-03 02:39:38+00:00,14453195.0,"167 days, 6:46:35","[{'comment_id': 1233861170, 'comment_body': ""Just noticed this one (haven't looked at the rest of the code), but why is this one doubled? Presumably the idea is that both facevalues share a quadrature rule?"", 'comment_created': datetime.datetime(2023, 6, 19, 10, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1233863190, 'comment_body': ""I fixed it locally but I don't want to push not to rerun CI 😄 I was doubling nbasefunctions and did this by mistake"", 'comment_created': datetime.datetime(2023, 6, 19, 10, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234893913, 'comment_body': 'Although this case is more complicated, you could potentially re-use some of the re-use from `CellCache` as done in #495 ', 'comment_created': datetime.datetime(2023, 6, 20, 8, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1234901375, 'comment_body': 'Sure, thanks!', 'comment_created': datetime.datetime(2023, 6, 20, 8, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234912925, 'comment_body': 'So if I revert to `InterfaceCache`/`InterfaceIterator` should I revert this also or let `FaceValues` be initialized by `InterfaceCache`?\r\n@KnutAM ', 'comment_created': datetime.datetime(2023, 6, 20, 8, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234913063, 'comment_body': ""If it's only for interfaces then we may want to exclude the boundary faces from within the iterator?\r\n```julia\r\nif set === nothing\r\n  set = findall(face -> !isempty(topology.face_neighbor[face[1],face[2]]),topology.face_skeleton)\r\nend\r\n```"", 'comment_created': datetime.datetime(2023, 6, 20, 8, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234948481, 'comment_body': 'As I understand, only the second method would be needed. If we want a nice way to iterate over single faces, we could do something like in #495 (and in combination with the current PR, the iterator interface would have even more code reuse). \r\n', 'comment_created': datetime.datetime(2023, 6, 20, 8, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1239755299, 'comment_body': 'These would be moved to `InterfaceCache` in the other PR.', 'comment_created': datetime.datetime(2023, 6, 23, 12, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239762078, 'comment_body': ""This one is the same as in `copy` test for `FaceValues` but doesn't work. * Pointers are different, values are the same*"", 'comment_created': datetime.datetime(2023, 6, 23, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239762343, 'comment_body': ""This isn't used for now."", 'comment_created': datetime.datetime(2023, 6, 23, 12, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239792838, 'comment_body': 'Maybe this is also a good oppurtunity to merge the different orientation interfaces.', 'comment_created': datetime.datetime(2023, 6, 23, 13, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1239803476, 'comment_body': ""I'm not sure yet how to use this information to sync quadrature points, however, they're currently synced by matching spatial coordinates"", 'comment_created': datetime.datetime(2023, 6, 23, 13, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239821318, 'comment_body': 'Note that this method can fail (I literally debugged a similar an issue yesterday).\r\n\r\nFor each face you can find 2 affine transformations (fully in reference space). Element 1 -> Face and Face -> Element 2 (as well as the ""inverse"" mappings). This way the quadrature point on the face of element 1 can be transferred to element 2 by applying both transformations. If noone made touchy-touchy to the face and node definitions recently then you can derive the 3D version from this code https://github.com/Ferrite-FEM/FerriteViz.jl/blob/c5b812eb31786525dd5d2ef3779f39fd9550492a/src/utils.jl#L552-L574 , which is exactly the transformation from face to element I talked about.\r\n\r\nEdit: Note that this is just a part of what you have to to, because it does not deal with the mismatch in relative orientation of the face and the element\'s local face.', 'comment_created': datetime.datetime(2023, 6, 23, 13, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1239850698, 'comment_body': ""You're talking about matching coordinates, right?\r\nI'm using the 3D coordinates in \r\nhttps://github.com/AbdAlazezAhmed/Ferrite.jl/blob/c28f0b2ebc213caf2c8b7a30845ccdb11cc7ffd7/src/FEValues/interface_values.jl#L149-L156\r\nto get the quadrature point index and use it if we're evaluating using the neighbor facevalues"", 'comment_created': datetime.datetime(2023, 6, 23, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239853628, 'comment_body': 'Yes. And if you go from element (e.g. 3D) to the face (e.g. 2D) and again to the element (e.g. 3D again), then you still have 3D coordinates.', 'comment_created': datetime.datetime(2023, 6, 23, 13, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1241317626, 'comment_body': ""If this passes I assume the transformation is working * I see it failed for 1.6, will check it. It passed locally 1.8*. How do you suggest using it? I was thinking of mutating the neighbor's `FaceValues` `qr.points` and recalculating `fv.M` when reinitializing the interface.\r\nEdit : It fails 1.6 because of swapping in array"", 'comment_created': datetime.datetime(2023, 6, 25, 23, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1242280499, 'comment_body': ""Turns out it's because not all faces are reinited (only interfaces) there are NaNs which breaks ==\r\nThis test is already covered in facevalues anyways."", 'comment_created': datetime.datetime(2023, 6, 26, 14, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1243438892, 'comment_body': 'As @fredrikekre and @termi-official  pointed out, [some use the definition with normals ](https://www.researchgate.net/publication/211746421_Unified_Analysis_of_Discontinuous_Galerkin_Methods_for_Elliptic_Problems)and [some use (here - there) definition](https://onlinelibrary.wiley.com/doi/pdf/10.1002/nme.1667). This implements both and defaults to using normals.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1243693619, 'comment_body': 'Docs incomplete: Explain what `here` is. We might also find a more descriptive variable name for this.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243695084, 'comment_body': 'Docs incomplete: Clarify what is the difference between `coords` and `ncoords`, as well as `f` and `nf`.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243698275, 'comment_body': 'Is the implementation missing?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243703071, 'comment_body': 'Maybe separate out the docstring.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243705145, 'comment_body': 'Why do we need `dof_range` here? Also, note the possible name collision with the function.\r\n\r\nDocstring for `here`', 'comment_created': datetime.datetime(2023, 6, 27, 13, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243705927, 'comment_body': 'style\r\n```suggestion\r\nfunction function_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector, dof_range = eachindex(u); here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243706852, 'comment_body': 'I think we might want to revisit this logic here.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243707491, 'comment_body': 'style\r\n```suggestion\r\nfunction function_symmetric_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector{<:Vec}; here::Bool = true)\r\nbegin\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243708876, 'comment_body': '```suggestion\r\nfunction function_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector{<:Vec}; here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243710142, 'comment_body': 'style\r\n```suggestion\r\nfunction function_value(iv::InterfaceValues, q_point::Int, u::AbstractVector, dof_range = eachindex(u); here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243711348, 'comment_body': 'style\r\n```suggestion\r\nfunction function_symmetric_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector, dof_range = eachindex(u); here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243711638, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243712162, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243717495, 'comment_body': 'Can you elaborate on the design rationale?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243719617, 'comment_body': 'Is this really true? It seems like the default is the default interpolation of the respective geometry.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243725991, 'comment_body': '```suggestion\r\nReturn the normal at the quadrature point `qp` on the interface. \r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243728104, 'comment_body': 'Probably I should dig here: Why do you differentiate between shape functions and ""nodal"" functions? What exactly is the latter?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243733065, 'comment_body': 'As discussed in the file `common_values.jl` we should specify the variable name `here` and add docs.\r\n\r\nWe should also just use the term `face` instead of `facet` for codim 1 entities to stay consistent with the remaining docs.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243738808, 'comment_body': 'Why should we forbid this? We can have continuous interpolations but might want to evaluate the jump in the gradients without computing the full gradient field.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243741424, 'comment_body': 'I think this is fine here, because the functionality is specific to ""interface stuff"".', 'comment_created': datetime.datetime(2023, 6, 27, 13, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243744295, 'comment_body': 'While I fully understand the rationale I am not sure what the performance implications are, because the function now has different return values depending on the input parameters. Fredrik might can give you more information on this.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243746521, 'comment_body': 'If this is a problem, then lets use the ""problematic"" definition without normal dotting and leave the responsibility to the user to do the right thing for their formulation.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243748384, 'comment_body': ':new_moon_with_face: ', 'comment_created': datetime.datetime(2023, 6, 27, 13, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243769799, 'comment_body': 'Can we add test coverage for `Ferrite.faces(::Type{AbstractRefShape})` to check if it is consistent with `Ferrite.faces(::AbstractCell)` ~~and the linear faces of the geometric interpolation~~ (latter is probably a bit difficult)?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243781727, 'comment_body': 'This one is really missing a doc string, because it is not obvious what happens here (partially because it is different from the `SurfaceOrientationInfo` struct above). I guess this describes how to transform the face f1 into f2 on the conforming interface described by both faces?\r\n\r\nWhy `AbstractArray` for a transformation?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243785137, 'comment_body': 'Any reason why this should be vector of vectors instead of a matrix or tensor?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243786722, 'comment_body': 'We should be able to provide an optimized constructor by also providing a topology.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243822184, 'comment_body': ""Well, I thought if it's deprecated there why not deprecate it here 😂"", 'comment_created': datetime.datetime(2023, 6, 27, 14, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245099060, 'comment_body': 'If I understand correctly, `u` is passed as the dof from both elements on the interface, so this part makes sure if we pass `dof_range` it does not contain dof from the other element, and in case no `dof_range` is passed it takes the first/second half depending on which element we use.\r\nI see this may be problematic in case of continuous interpolations, is this what you meant?', 'comment_created': datetime.datetime(2023, 6, 28, 11, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245101536, 'comment_body': ""I think it's `function_*` stuff, where we have the function value at the nodes"", 'comment_created': datetime.datetime(2023, 6, 28, 11, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245170600, 'comment_body': 'You mean e.g. `function_value`?', 'comment_created': datetime.datetime(2023, 6, 28, 12, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245224830, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2023, 6, 28, 13, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245242578, 'comment_body': '`Nodal` usually refers to e.g. nodal interpolation functions like for example `Lagrange`, but `function_value` can also evaluate e.g. `Nedelec` interpolations, which are not nodal (but integral), because the basis function is associated to an edge or face. For the integration and quadrature points it is not so common to use the term node (although they are technically also nodes).', 'comment_created': datetime.datetime(2023, 6, 28, 13, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245346153, 'comment_body': ""I'm not sure how we'd use topology here, `InterfaceOrientationInfo` will be calculated inside `InterfaceIterator` which provides `this_face::FaceIndex, other_face::FaceIndex` from topology, I mean we only need these two from topology and if we pass topology we'd still need to pass `this_face::FaceIndex` unless we're buffering it for all interfaces If I understand correctly. "", 'comment_created': datetime.datetime(2023, 6, 28, 14, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245371474, 'comment_body': 'Ah sorry, I misread here. You are right.', 'comment_created': datetime.datetime(2023, 6, 28, 15, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245386904, 'comment_body': 'Yes, this is on example. I had no time to do a full audit of the code, so I might misunderstand something fundamental here, but you introduce the input argument `dof_range` which defaults to `eachindex(u)`. Now these lines here exactly check for `dof_range == eachindex(u)`, which raises for me the question why `dof_range` has been introduced as an input argument in the first place. Can you elaborate a bit on the design here?', 'comment_created': datetime.datetime(2023, 6, 28, 15, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245410218, 'comment_body': 'I think we are missing test coverage for mixed elements, e.g. meshes with triangles and quadrilaterals.', 'comment_created': datetime.datetime(2023, 6, 28, 15, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245435551, 'comment_body': ""Doing simple testing with `@Benchmark`:\r\n```julia\r\njulia> @benchmark shape_value_jump(iv, 1, 1, true)\r\nBenchmarkTools.Trial: 10000 samples with 600 evaluations.\r\n Range (min … max):  199.667 ns …  3.141 μs  ┊ GC (min … max): 0.00% … 91.83%\r\n Time  (median):     207.167 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   214.168 ns ± 94.643 ns  ┊ GC (mean ± σ):  1.47% ±  3.16%\r\n\r\n  ▅█▂▁▄▅▇▂▂▄▂          ▁▂▂▁ ▁▁▁▁                               ▂\r\n  ████████████▇██▇▅▇▄▆██████████▇▆▆▅▅▅▆▄▆▆▆▆▅▅▁▅▆▆▆▅▅▁▆▅▄▃▅▅▃▅ █\r\n  200 ns        Histogram: log(frequency) by time       303 ns <\r\n\r\n Memory estimate: 96 bytes, allocs estimate: 4.\r\n \r\n julia> @benchmark shape_value_jump(iv, 1, 1, false)\r\nBenchmarkTools.Trial: 10000 samples with 870 evaluations.\r\n Range (min … max):  136.092 ns …  1.361 μs  ┊ GC (min … max): 0.00% … 0.00%\r\n Time  (median):     142.874 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   146.104 ns ± 30.703 ns  ┊ GC (mean ± σ):  0.39% ± 2.07%\r\n\r\n  ▃█▆▄▂▇▆▄▁▁ ▁▂▂▃▄▂▁▁▂▃                                        ▂\r\n  ██████████████████████▇▇▇▇▅▆▆▅▆▃▅▃▅▄▄▄▄▄▅▄▄▄▃▃▄▄▃▄▄▄▄▃▃▄▄▄▄▃ █\r\n  136 ns        Histogram: log(frequency) by time       215 ns <\r\n\r\n Memory estimate: 32 bytes, allocs estimate: 2.\r\n```\r\n\r\nWhich isn't far from that of `FaceVakues` (in terms of allocation, 2~3 times slower in terms of time? I mean it does operations not just accessing tensor)?\r\n\r\n```julia\r\njulia> @benchmark shape_value(iv.face_values_a, 1, 1)\r\nBenchmarkTools.Trial: 10000 samples with 980 evaluations.\r\n Range (min … max):  59.184 ns …   3.115 μs  ┊ GC (min … max): 0.00% … 97.14%\r\n Time  (median):     62.245 ns               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   74.055 ns ± 104.818 ns  ┊ GC (mean ± σ):  5.41% ±  3.97%\r\n\r\n  █▇▆▅▁     ▁▂                                                 ▁\r\n  ██████▇▇▆▆████▆▅▆▅▄▅▅▅▄▄▃▄▆▅▅▂▅▃▄▄▄▄▄▃▃▃▄▂▄▄▂▃▂▃▄▅▆▇▅▇▇▆▄▄▅▆ █\r\n  59.2 ns       Histogram: log(frequency) by time       231 ns <\r\n\r\n Memory estimate: 80 bytes, allocs estimate: 2.\r\n```\r\n"", 'comment_created': datetime.datetime(2023, 6, 28, 15, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245904594, 'comment_body': ""I'm not sure why it is there, I added it as it was there for `FaceValues` implementation."", 'comment_created': datetime.datetime(2023, 6, 28, 23, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1248863425, 'comment_body': 'If I understand correctly,  face->face transformation is predetermined, so we can make a function that maps quadrature point indices instead of transforming coordinates or store the transformation matrices and lookup the one we need.', 'comment_created': datetime.datetime(2023, 7, 1, 14, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1248863470, 'comment_body': ""There's probably a better way to do this"", 'comment_created': datetime.datetime(2023, 7, 1, 14, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1248872942, 'comment_body': 'updated benchmarks:\r\n\r\n```julia\r\njulia> @benchmark shape_value(facevalues1, 1, 1)\r\nBenchmarkTools.Trial: 10000 samples with 995 evaluations.\r\n Range (min … max):  26.734 ns …  1.063 μs  ┊ GC (min … max): 0.00% … 95.63%\r\n Time  (median):     27.236 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   29.875 ns ± 18.182 ns  ┊ GC (mean ± σ):  1.00% ±  1.65%\r\n\r\n  ▇█▇▄              ▂▁    ▄▄▃  ▃▆▅▄                     ▂▂    ▂\r\n  ████▇▆▄▁▁▁▆▅▆▆█▇▄▄██▅▃▄▇███▇▆██████▇▇▆▇▇▆▆▅▆▆▆▅▆▇▆▆▆▇████▇▅ █\r\n  26.7 ns      Histogram: log(frequency) by time      39.5 ns <\r\n\r\n Memory estimate: 16 bytes, allocs estimate: 1.\r\n\r\njulia> @benchmark shape_value_average(iv, 1, 1)\r\nBenchmarkTools.Trial: 10000 samples with 993 evaluations.\r\n Range (min … max):  30.312 ns …  1.178 μs  ┊ GC (min … max): 0.00% … 95.08%\r\n Time  (median):     30.715 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   33.991 ns ± 19.996 ns  ┊ GC (mean ± σ):  0.92% ±  1.60%\r\n\r\n  █▅         ▄▄▁▆▃         ▂▂                                 ▂\r\n  ███▇▁▄▃▁███████████▇▇▇▆█▇██▇▆▅▅▇▆▆▆▆▅▆▅▄▄▄▄▄▅▅▆▄▄▅▄▄▃▃▄▅▁▁▃ █\r\n  30.3 ns      Histogram: log(frequency) by time      57.4 ns <\r\n\r\n Memory estimate: 16 bytes, allocs estimate: 1.\r\n \r\njulia> @benchmark shape_value_jump(iv, 1, 1, true)\r\nBenchmarkTools.Trial: 10000 samples with 993 evaluations.\r\n Range (min … max):  35.347 ns …  4.546 μs  ┊ GC (min … max): 0.00% … 95.60%\r\n Time  (median):     38.167 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   62.274 ns ± 88.570 ns  ┊ GC (mean ± σ):  2.21% ±  2.36%\r\n\r\n  █▅▃▄▄▂                      ▁▁▁▁▁                           ▁\r\n  ███████▆▆▆▆▆▆▅▅▆▅▆▅▆▆▅▆▆▅▇▇█████████▇███▇▇▇▇█▇▆▇▆▅▆▅▅▅▅▃▄▄▄ █\r\n  35.3 ns      Histogram: log(frequency) by time       253 ns <\r\n\r\n Memory estimate: 32 bytes, allocs estimate: 1.\r\n\r\njulia> @benchmark shape_value_jump(iv, 1, 1, false)\r\nBenchmarkTools.Trial: 10000 samples with 993 evaluations.\r\n Range (min … max):  34.038 ns …  1.072 μs  ┊ GC (min … max): 0.00% … 94.32%\r\n Time  (median):     35.146 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   38.028 ns ± 18.710 ns  ┊ GC (mean ± σ):  0.79% ±  1.64%\r\n\r\n  ▇██▅▄▂    ▁▂▅▆▄▄▄▄▅▃▁   ▂▁▁▁ ▁▁▁                            ▂\r\n  ██████▅▆▅▇████████████▇▇████████▇▄▇▁▆▅▄▄▅▃▄▄▅▅▆▅▄▁▆▅▅▄▄▃▅▅▆ █\r\n  34 ns        Histogram: log(frequency) by time        60 ns <\r\n\r\n Memory estimate: 16 bytes, allocs estimate: 1.\r\n\r\n ```', 'comment_created': datetime.datetime(2023, 7, 1, 15, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252835987, 'comment_body': '```suggestion\r\nstruct InterfaceValues{FVA, FVB, ...} <: AbstractValues\r\n    face_values_a::FVA\r\n    face_values_b::FVB\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252837905, 'comment_body': 'Would the weight not be the same anyway? Why is it useful to specify which side in this case?', 'comment_created': datetime.datetime(2023, 7, 5, 9, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252840156, 'comment_body': ""Probably this could be it's own docstring for `function_value(::InterfaceValues)`."", 'comment_created': datetime.datetime(2023, 7, 5, 9, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252841055, 'comment_body': 'Needs to be adjusted if you change the parametrization above.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252852231, 'comment_body': 'Would it make sense to not collect all values in `u`, but to have two of them? That would make dof_range usage just like in the standard case\r\n```\r\nic = InterfaceCache(...)\r\n\r\n# x is the solution vector\r\nxe_a = x[ic.dofs_a]\r\nxe_b = x[ic.dofs_b]\r\n\r\nu_dofs = dof_range(dh, :u) # Assuming single subdofhandler\r\n\r\n# Alternative 1\r\nfunction_value(iv, q_point, u_a, u_dofs; use_element_a = true)\r\n# Alternative 2\r\nfunction_value(iv.a, q_point, u_a, u_dofs)\r\n```\r\n\r\nBut for jumps I suppose it then has to be\r\n```\r\nfunction_jump(iv, q_point, xe_a, xe_b, range)\r\nfunction_jump(iv, q_point, xe_a, xe_b, range_a, range_b)\r\n```\r\nnot too bad?', 'comment_created': datetime.datetime(2023, 7, 5, 9, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252855485, 'comment_body': 'I am a bit confused why this is needed, an  in particular it would be nice not to have this.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252858859, 'comment_body': 'I think we should settle on one single definition for the jump, document it, and show how one can compute the other version manually using `function_value_here` and `function_value_there`.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252862870, 'comment_body': 'In particular, is it not possible to compute the mappings with just the quadrature rule? Assuming the rule is ""symmetric"". Is the problem that the relative rotation isn\'t known? Then perhaps `reinit!(iv::InterfaceValues, ic::InterfaceCache)` can do it? That has the node IDs so should be able to compute this.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252960833, 'comment_body': 'I think detj can be different ', 'comment_created': datetime.datetime(2023, 7, 5, 11, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252964289, 'comment_body': 'These would be moved to interface cache in the next PR', 'comment_created': datetime.datetime(2023, 7, 5, 11, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252974415, 'comment_body': 'Ah I see. Perhaps that should be merged first then?', 'comment_created': datetime.datetime(2023, 7, 5, 11, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1253047607, 'comment_body': 'If you have\r\n```\r\n+-----+---+\r\n|     |   |\r\n+-----+---+\r\n```\r\nthen detJ differs between the elements already.', 'comment_created': datetime.datetime(2023, 7, 5, 12, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1253150508, 'comment_body': 'Does that imply that incompatible/discontinuous geometric meshes are allowed (in addition to discontinuous fields)? If so, how does that work? I thought the quadrature points have to be in the same physical location to calculate the jump (at least in the initial configuration if considering finite strains). ', 'comment_created': datetime.datetime(2023, 7, 5, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1253232852, 'comment_body': ""If I understand correctly, I think it can work if we disable the nodes check here:\r\n\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/d82f177fe86d0998f5d32fb9c300222d3cbe4e91/src/Grid/grid.jl#L1658\r\n\r\nthe quadrature points don't have the same physical location (but are the same type?), like \r\n```\r\n+-----+    +---+\r\n|     |    |   |\r\n+-----+    +---+\r\n```\r\nso we have the same quadrature rule for the faces but they are not at the same location."", 'comment_created': datetime.datetime(2023, 7, 5, 14, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1253276914, 'comment_body': ""Yes, that case could make sense! But how about \r\n```\r\n+-----++---+\r\n|     ||   |\r\n+-----+|   |\r\n|     ||   |\r\n+-----++---+\r\n```\r\n(I.e. non-matching faces, sorry for bad explanation before). I think this would be problematic, or?\r\n\r\nIn both of your examples above, if I don't misunderstand the illustrations; the value returned by `getdetJdV` would be the same for both faces (as they have the same area), even if the volume of the cells are different (so `getdetJdV` of the cellvalues would be different)?"", 'comment_created': datetime.datetime(2023, 7, 5, 15, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1253307667, 'comment_body': ""Ah, got it. It currently doesn't support this case (we assume each face may have one neighbor only or none)."", 'comment_created': datetime.datetime(2023, 7, 5, 15, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1253377387, 'comment_body': 'Technically possible, but I think mapping quadrature point indices is a bit wearisome, because you have to do it for every quadrature rule (since we do not have a convention on how to index the points)', 'comment_created': datetime.datetime(2023, 7, 5, 16, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1253412036, 'comment_body': 'Correction: Fredrik is right, we use the weight of the face mapping and not the determinant of the cell mapping.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1253414316, 'comment_body': 'It should be possible to handle the case\r\n```\r\n+-----++---+\r\n|     ||   |\r\n+-----+|   |\r\n|     ||   |\r\n+-----++---+\r\n```\r\nby introducing sub-faces or by other mechanisms. But we leave this handling to subsequent PRs. We need more time from our side (Maxi+me) for an efficient forest mesh implementation.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254337427, 'comment_body': 'Can you elaborate on this design why we need this specific grid type and the full grid? ', 'comment_created': datetime.datetime(2023, 7, 6, 12, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254343053, 'comment_body': ""These functions are called from within `reinit!` and they are the only functions which access the grid field of `InterfaceValues`, right? Can't we just pass the two elements into these routines instead of carrying the full grid?"", 'comment_created': datetime.datetime(2023, 7, 6, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254353892, 'comment_body': 'Well, this one is still inconsistent :/ @koehlerson @fredrikekre since we have this inconsistency in the codebase I might have to ask whether in 1D the vertex is a face or not?\r\n\r\nAlso, interface.\r\n```suggestion\r\n            neighbors = dim > 1 ? getneighborhood(...) : ...\r\n```', 'comment_created': datetime.datetime(2023, 7, 6, 12, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254361597, 'comment_body': 'Type stability, maybe I can change it like FVA/FVB', 'comment_created': datetime.datetime(2023, 7, 6, 12, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1254363289, 'comment_body': 'I was thinking about doing so when moving fields to `InterfaceChache`', 'comment_created': datetime.datetime(2023, 7, 6, 12, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1254367797, 'comment_body': 'Actually this might harm type stability in case of mixed grids (and if including the grid, not having the flexibility in the grid type might harm extensibility)', 'comment_created': datetime.datetime(2023, 7, 6, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1256180114, 'comment_body': 'Without any experience on the subject (So take this with a bucket of salt): \r\nWould a general definition be to use the dyadic product for the jump, $[f] = f_a \\otimes n_a + f_b \\otimes n_b$, instead of the dot product, `here-there`, or `there-here`?\r\n```\r\nfunction foo_jump(iv, q_point, xe_a, xe_b, range_a, range_b)\r\n    fa = foo(iv.a, q_point, xe_a, range_a)\r\n    na = getnormal(iv.a, q_point)\r\n    fb = foo(iv.b, q_point, xe_b, range_b)\r\n    nb = getnormal(iv.b, q_point) # Or nb = -na\r\n    return fa ⊗ na + fb ⊗ nb\r\nend\r\n```\r\nVector functions: This retains the tangential jump for vector functions (as opposed to the dot definition in the [ref](https://www.researchgate.net/publication/211746421_Unified_Analysis_of_Discontinuous_Galerkin_Methods_for_Elliptic_Problems)). The signed normal jump is `- n ⋅ foo_jump() ⋅ n` where `n` is `na` or `nb` (`na=-nb` following the same arguments as for the quadrature weights)\r\n\r\nScalar functions: Vector jump as in [ref](https://www.researchgate.net/publication/211746421_Unified_Analysis_of_Discontinuous_Galerkin_Methods_for_Elliptic_Problems) is `(foo_jump() ⋅ n)*n`. But here I guess often the absolute value of the jump suffices, in which case the dyadic implementation would be inefficient (but it would be a 1-liner for users to do that efficiently as Fredrik writes).', 'comment_created': datetime.datetime(2023, 7, 7, 17, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1257143318, 'comment_body': 'But continuing thinking out loud, I guess having the jump as, `ub-ua`, and `getnormal(iv, q_point)` giving one normal (probably `na` in this case) would be as general and more performant!', 'comment_created': datetime.datetime(2023, 7, 8, 7, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1257512134, 'comment_body': 'Not so sure. Where does the assumption come from that the normals have to align for all points in time? I think this breaks down on moving domains.', 'comment_created': datetime.datetime(2023, 7, 9, 16, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1257539508, 'comment_body': ""In the Lagrangian description, I think that should be valid since the geometric nodes are matching for `InterfaceValues` AFAIU. \r\n\r\nFor Eulerian descriptions, even the same `getdetJdV` is not true (since the faces can change area due to the deformation). And currently, I think an Eulerian description is difficult in Ferrite, for example, the derivatives of, e.g., `dV` and shape functions, wrt. cell coordinates are not available*. Furthermore, in the case that normals don't align and the jump is calculated as `ua*na + ub*nb`, if `ua=ub`, but `na!=-nb`, the jump would be nonzero which doesn't make sense to me. Hence in any case a single normal should be used IMO, where one could argue that e.g. `(na-nb)/|na-nb|` would be better if `na!=-nb`, but in the current version of Ferrite I think it always will be. (A similar approach would be required for `getdetJdV`)\r\n\r\n*Probably, this should be supported. (Might be technically possible already, with ForwardDiff and some custom initialization of CellValues containing Dual numbers, but probably not very easy nor convenient). "", 'comment_created': datetime.datetime(2023, 7, 9, 20, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1258211165, 'comment_body': 'Definitely a good point and I agree that detJdV should be different - this raises further confusion regarding what ""face integral"" means in this context, because the faces do not match anymore.\r\n\r\nA bit off-topic, but regarding an Eulerian description we should be able to ""just add the displacements to the nodes"", so it should not be that difficult. But yes we are missing some convenience functions here.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1258214297, 'comment_body': 'Maybe a compromise is to provide the common definitions with dot and dyadic product along some detailed explanation in the docs (maybe with a guide on on how to implementent custom jumps). What do you think?', 'comment_created': datetime.datetime(2023, 7, 10, 12, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1258299453, 'comment_body': 'I would vote for a *single* definition for use in the convenience. \r\nMy suggestion would be the one I suggested [above](https://github.com/Ferrite-FEM/Ferrite.jl/pull/743#discussion_r1257143318) and note that it assumes matching faces. \r\n\r\nAs you say, it should be possible to obtain the function values, normals, etc. for each part individually. And that should, as you say, be documented; perhaps even with alternative ways to define the jump if needed!\r\n\r\n> A bit off-topic, but regarding an Eulerian description we should be able to ""just add the displacements to the nodes"", so it should not be that difficult. But yes we are missing some convenience functions here.\r\n\r\nPut an issue for discussion/future reminder: https://github.com/Ferrite-FEM/Ferrite.jl/issues/761', 'comment_created': datetime.datetime(2023, 7, 10, 13, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1258364522, 'comment_body': 'The permutation can be computed in the constructor though. I think that would be much cheaper compared to i) updating the quadrature points and ii) re-compute the shape values and gradients in every reinit.', 'comment_created': datetime.datetime(2023, 7, 10, 14, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1263665904, 'comment_body': ""I just had another stupid idea. Why don't we include the transformed quadrature nodes in this struct?"", 'comment_created': datetime.datetime(2023, 7, 14, 12, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1266452470, 'comment_body': 'You would still need to permute then, right? Or do you wanna store the transformed values for every rotation and every face combination?', 'comment_created': datetime.datetime(2023, 7, 18, 8, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1266504950, 'comment_body': 'The idea is similar to what we need to do for the correction in the cell values for e.g. Nedelec elements, i.e. that we store some static elementary transformations and then compute for the current face the transformed value when we reinit. But we can also store all permutations and just query them.', 'comment_created': datetime.datetime(2023, 7, 18, 9, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314079571, 'comment_body': 'Is this here correct? The functon is already in the boundary condition docs page. It also feels like `update!` might clash with names from other packages, so we might not want to use this name anyway. Maybe we can be more specific? Really not sure here.', 'comment_created': datetime.datetime(2023, 9, 3, 3, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314080772, 'comment_body': '`ND` and `(N-1)D` might be confusing to read. Maybe we can just write it out to N dimensional and N-1 dimensional. Not sure what a good way is.', 'comment_created': datetime.datetime(2023, 9, 3, 3, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081204, 'comment_body': '""It defaults to ..."" or ""The default value is...""?', 'comment_created': datetime.datetime(2023, 9, 3, 3, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081456, 'comment_body': 'I think you can eliminate the `\\\\` by using `@raw`', 'comment_created': datetime.datetime(2023, 9, 3, 3, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081539, 'comment_body': 'So, this is your reference triangle and not the actual reference triangle in Ferrite, right?', 'comment_created': datetime.datetime(2023, 9, 3, 3, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081766, 'comment_body': 'Oopsie?', 'comment_created': datetime.datetime(2023, 9, 3, 3, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314113309, 'comment_body': 'Could we use a mutable struct here?\r\n```suggestion\r\nmutable struct InterfaceTransformation\r\n    flipped::Bool\r\n    shift_index::Int\r\n    lowest_node_shift_index::Int\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 9, 3, 5, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1314278914, 'comment_body': 'My bad, the text for this one should\'ve been ""Transforming back to triangle B"" not reference triangle.\r\nThe reference triangle is the same as Ferrite\'s one, which we transform to temporarily when flipping.', 'comment_created': datetime.datetime(2023, 9, 3, 15, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1314278956, 'comment_body': ""Didn't notice that, thanks!"", 'comment_created': datetime.datetime(2023, 9, 3, 15, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1315075861, 'comment_body': 'Outdated (?)', 'comment_created': datetime.datetime(2023, 9, 4, 15, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315076758, 'comment_body': 'Where is this used? Does it make sense to define it? Mapping here is quite different', 'comment_created': datetime.datetime(2023, 9, 4, 15, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315077420, 'comment_body': ""I think I prefer\r\n```suggestion\r\n    function_value(iv::InterfaceValues, q_point::Int, u::AbstractVector; here::Bool)\r\n```\r\ni.e. `here` instead of `use_element_a`, and also to not use a default value but require the user to always ask for the side explicitly. (Same for the other functions but won't leave comments there)."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315078813, 'comment_body': ""```suggestion\r\nTransform quadrature point from cell's coordinates to the face's reference coordinates, decreasing the number of dimensions by one.\r\nThis is the inverse of `face_to_element_transformation`.\r\n```"", 'comment_created': datetime.datetime(2023, 9, 4, 15, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315079897, 'comment_body': 'Is it possible to implement this one by passing just the node IDs of the two cells instead of the grid? The node ids are also available in the interface cache.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315080444, 'comment_body': 'I suggest you make the transformation struct immutable and create a new one every time:\r\n```suggestion\r\n    interface_transformation = compute_interface_transformation(grid, face_a, face_b)\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 15, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315080659, 'comment_body': '```suggestion\r\n    transform_interface_points!(quad_points_b, iv, quad_points_a, grid, face_a, face_b, interface_transformation)\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 15, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315081144, 'comment_body': 'Seem easier to use a loop instead of creating the temporary svectors? Then you can also remove the new functions `shape_gradients_and_values` etc.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315081831, 'comment_body': 'Use multiple dispatch instead of the ifs?', 'comment_created': datetime.datetime(2023, 9, 4, 15, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1328338252, 'comment_body': 'Can the two refshapes be type parameters here instead and remove the `nfacenodes` one?', 'comment_created': datetime.datetime(2023, 9, 18, 7, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1329417453, 'comment_body': 'Not sure where these belong', 'comment_created': datetime.datetime(2023, 9, 19, 0, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335148246, 'comment_body': 'This part is outdated, right? IIUC vector valued problems use `Vec` not scalars and `(Vector/Scalar)Values)` are deprecated since #708 ', 'comment_created': datetime.datetime(2023, 9, 24, 8, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335158194, 'comment_body': ""I think it is still possible to allow `Vector{Vec}`, but it was suggested to be removed in https://github.com/Ferrite-FEM/Ferrite.jl/pull/698 (but didn't happen, should it @fredrikekre ?). The standard way, however, is that `u` is a `Vector` of scalars for both scalar and vector function interpolations."", 'comment_created': datetime.datetime(2023, 9, 24, 10, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1335160475, 'comment_body': 'Thanks for the clarification!\r\nI thought it was similar to `shapeValues` such that `u` is a vector of  `Vec` if we use vectorized interpolation.', 'comment_created': datetime.datetime(2023, 9, 24, 10, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335164893, 'comment_body': '@KnutAM \r\n> > Good point. I guess we can do\r\n> > ```\r\n> > function_(value|gradient|...)(iv::InterfaceValues, qp::Int, ue::Vector{Float64}, dof_range::UnitRange, dof_range::UnitRange)\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > then and let the user handle the offset. It is easy to catch the mistake of not ofsetting in many cases I think, so should be reasonably safe.\r\n> \r\n> Has there been any new discussion on this topic, also following [#743 (comment)](https://github.com/Ferrite-FEM/Ferrite.jl/pull/743#issuecomment-1629260683) (at least to me, it looks like the current implementation is different)?\r\n> \r\n> For being able to use automatic differentiation, I think a single dof-vector, `ue`, input would be most practical.\r\n\r\nIIRC @fredrikekre  noted that we might sometimes have to provide two different dof ranges, so going with two `u` s would make more sense, right?\r\nI think the other options are\r\n- a single `u` and no dof ranges -> first half of `u` is here and the other half is `there` (This can be broken for mixed elements)\r\n- a single `u` and two dof ranges\r\n\r\n(Leaving this as a code comment so we can reply to it)', 'comment_created': datetime.datetime(2023, 9, 24, 11, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335175566, 'comment_body': 'For single-field problems (or when giving only the dofs corresponding to a single field), the interpolation information should be enough to know how many dofs belong to here and there, even if they are different, right?\r\n\r\nFor multi-field problems (analogous to the current dof range approach), then two dof-ranges are required. And the main challenge here, is that the user needs to offset the ""there"" dof-range? (Unless the number of celldofs for ""here"" is provided in the `reinit!`, which should be feasible since it should be available in the cache). ', 'comment_created': datetime.datetime(2023, 9, 24, 13, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1341975385, 'comment_body': 'I think we should remove it, and therefore not add it to InterfaceValues.', 'comment_created': datetime.datetime(2023, 9, 30, 15, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1341976475, 'comment_body': 'The AD argument is good. I suppose there should be some method of `dof_range` that returns two, and the second one with an offset.', 'comment_created': datetime.datetime(2023, 9, 30, 15, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1356761962, 'comment_body': 'If we are shuffling around the shape values on the ""there""-side, does this not mean that we have to shuffle the ""interfacedof"" vector on the there side aswell? (i.e. `interfacedofs = [cellhere_dofs, cellthere_dofs]` would need to be reordered aswell for the assembly in the the siffness matrix).\r\nWould it not be better to reorder the quad_points_b such that they match quad_points_a instead, and keep the order of the shape-functions fixed?\r\n\r\nI might be wrong though...', 'comment_created': datetime.datetime(2023, 10, 12, 12, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lijas', 'type': 'User'}, {'comment_id': 1356765240, 'comment_body': 'wait, maybe that is what you are doing? :smile: ', 'comment_created': datetime.datetime(2023, 10, 12, 12, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lijas', 'type': 'User'}, {'comment_id': 1356800647, 'comment_body': 'There is no reordering of the shape functions, just re-evaluation on new quadrature points.', 'comment_created': datetime.datetime(2023, 10, 12, 13, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1356808986, 'comment_body': ""Yeah, it's just transforming the quadrature points to match coordinates, shape functions order should remain the same (1:nbasefunc in the `there` interpolation)"", 'comment_created': datetime.datetime(2023, 10, 12, 13, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1356841320, 'comment_body': 'I propose we can later in separate PRs do such optimizations via specialized dispatches of special cases if we want, but let us for now take a solution which works in more general scenarios.', 'comment_created': datetime.datetime(2023, 10, 12, 13, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363705812, 'comment_body': ""Can we extract the orientation stuff into data structures and/or functions? This might be handy for merging the different internal orientation interfaces in a followup PR. Also I think for 2D we can come up with a simpler scheme. \r\n\r\nAs another note: For the extension to higher dimensions than 3 we might not have enough flexibility yet (and you don't need to address this, just to motivate why we might want to keep the logic here modular and extensible)."", 'comment_created': datetime.datetime(2023, 10, 18, 11, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363712185, 'comment_body': 'We really should not do it like this. Can we just handle the cases via (inlined) dispatches, and put the throw into the generic dispatch?', 'comment_created': datetime.datetime(2023, 10, 18, 11, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363715901, 'comment_body': '```suggestion\r\nfunction transform_interface_points!(dst::Vector{Vec{3, Float64}}, points::Vector{Vec{3, Float64}}, interface_transformation::InterfaceTransformation{RefShapeA, RefShapeB}) where {RefShapeA <: AbstractRefShape{3}, RefShapeB <: AbstractRefShape{3}}\r\n```\r\nMaybe?', 'comment_created': datetime.datetime(2023, 10, 18, 11, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363716591, 'comment_body': '```suggestion\r\nfunction get_transformation_matrix(interface_transformation::InterfaceTransformation{RefShapeA}) where RefShapeA <: AbstractRefShape{3}\r\n```', 'comment_created': datetime.datetime(2023, 10, 18, 11, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363718235, 'comment_body': 'I think the docstring needs more work for the other devs understand what exactly is constructed here.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363724279, 'comment_body': 'If we want to expose this to the user, then I would vote for also including a how to, possibly in a followup PR.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363726168, 'comment_body': 'Also, maybe something like this? Not sure.\r\n```suggestion\r\nfunction InterfaceTransformation(cell_a::AbstractCell{RefShapeA}, cell_b::AbstractCell{RefShapeB}, face_a::Int, face_b::Int) where {RefShapeA, RefShapeB}\r\n    getdim(cell_a) == 1 && return error(""1D elements don\'t use transformations for interfaces."")\r\n\r\n    nodes_a = faces(cell_a)[face_a]\r\n    nodes_b = faces(cell_b)[face_b]\r\n\r\n    min_idx_a = argmin(nodes_a)\r\n    min_idx_b = argmin(nodes_b)\r\n\r\n    shift_index = min_idx_b - min_idx_a\r\n    flipped = getdim(cell_a) == 2 ? shift_index != 0 : nodes_a[min_idx_a != 1 ? min_idx_a - 1 : end] != nodes_b[min_idx_b != 1 ? min_idx_b - 1 : end]\r\n\r\n    return InterfaceTransformation{RefShapeA, RefShapeB}(flipped, shift_index, 1 - min_idx_b, face_a, face_b)\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 10, 18, 11, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363735711, 'comment_body': 'Can we add test cases to cover these directly? I thought about testing the invariant that the spatial coordinate of a point on the face is always the same as the one for same point on the element.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363738478, 'comment_body': 'Maybe 2 dispatches here?\r\n\r\n```\r\nfunction_symmetric_gradient(fe_v::AbstractValues, q_point::Int, u::AbstractVector)\r\nfunction function_symmetric_gradient(fe_v::AbstractValues, q_point::Int, u::AbstractVector, dof_range)\r\n```\r\n\r\nThis will eliminate the redundant check.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363747072, 'comment_body': 'Debris?', 'comment_created': datetime.datetime(2023, 10, 18, 12, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363821161, 'comment_body': 'Yes. I think on moving domains things can get a bit nastier. But I also do not know how to deal with these.', 'comment_created': datetime.datetime(2023, 10, 18, 12, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363822619, 'comment_body': 'Debris?', 'comment_created': datetime.datetime(2023, 10, 18, 12, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363825596, 'comment_body': 'Maybe we should wrap this into a namespace to avoid possible future collisions.', 'comment_created': datetime.datetime(2023, 10, 18, 12, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367634189, 'comment_body': 'Like in \r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/ce1886d9e36058052f5f79cc7bbf3586eb21869d/src/Grid/grid.jl#L870-L891 ?\r\nThis should be able to replace the other two orientation info structs in #829 ', 'comment_created': datetime.datetime(2023, 10, 21, 3, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367634342, 'comment_body': 'Like\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/ce1886d9e36058052f5f79cc7bbf3586eb21869d/src/FEValues/interface_values.jl#L423-L463\r\n?', 'comment_created': datetime.datetime(2023, 10, 21, 3, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367634576, 'comment_body': 'This might break for 4D tho since we can have both 3D and 2D interfaces with 4 nodes', 'comment_created': datetime.datetime(2023, 10, 21, 3, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367634635, 'comment_body': ""Unless we can guarantee that the interface won't *hourglass *"", 'comment_created': datetime.datetime(2023, 10, 21, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367635836, 'comment_body': ""They're tested in\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/ce1886d9e36058052f5f79cc7bbf3586eb21869d/test/test_interpolations.jl#L54-L70\r\nI'm not sure if using spatial coordinates test will be helpful since IIUC it uses the cell corrdinates for both `CellValues` and `FaceValues`. Also, quadrature points already use these functions. Or you mean something else?"", 'comment_created': datetime.datetime(2023, 10, 21, 3, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367636495, 'comment_body': ""I don't think this would work since `reference_faces` is used internally\r\nMaybe change the refshape name to something like `DummyRefShapy`?"", 'comment_created': datetime.datetime(2023, 10, 21, 3, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367690017, 'comment_body': 'I see. But maybe something like\r\n```julia\r\n function get_transformation_matrix(interface_transformation::InterfaceOrientationInfo{RefHexahedron})\r\n     face_a = interface_transformation.face_a \r\n     facenodes = reference_faces(RefHexahedron)[face_a] \r\n     _get_quad_transformation_matrix(facenodes, interface_transformation)\r\n end \r\n```\r\ncould work? Or can we construct type table methods to get the face refshape and dispatch the inner _get_transformation_matrix on this type?', 'comment_created': datetime.datetime(2023, 10, 21, 8, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367690753, 'comment_body': 'That should be fine. :) I just missed this somehow', 'comment_created': datetime.datetime(2023, 10, 21, 8, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367690974, 'comment_body': 'The module should work, but this is also fine. :) Maybe `TestRefDodecahedronDummy` or so, not sure what is suitable', 'comment_created': datetime.datetime(2023, 10, 21, 8, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367691320, 'comment_body': 'Indeed. But let us focus in this PR now on getting it merged, i.e. just resolving the open issues without touching more of the existing code base, to avoid feature creep. ', 'comment_created': datetime.datetime(2023, 10, 21, 8, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367692085, 'comment_body': ""Yea, getting the face shape makes more sense but I'm not sure if it'd be useful somewhere else\r\nI assume it'll have the same performance tho as it'll be determined on runtime"", 'comment_created': datetime.datetime(2023, 10, 21, 8, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367692184, 'comment_body': 'The issue is with cells with different faces\r\n', 'comment_created': datetime.datetime(2023, 10, 21, 8, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367693414, 'comment_body': 'Yea, let us keep this then for a separate pr (maybe in the heat example?) when we start benchmarking where we land performance-wise :)', 'comment_created': datetime.datetime(2023, 10, 21, 9, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1385203043, 'comment_body': 'Okay let us leave mixed grid support for a future PR.', 'comment_created': datetime.datetime(2023, 11, 7, 16, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1385237456, 'comment_body': 'What should we do about this? Since there are concurring definitions for the jump, maybe we should not provide a default jump in the framework but in the corresponding examples?', 'comment_created': datetime.datetime(2023, 11, 7, 16, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1385316294, 'comment_body': ""I don't know and honestly I don't think that there is any truly good solution to it for d=1,d=2 and d=3. I do think there are nice definitions for d=2, d=3 but as soon as you include 1D or vice verca it becomes quite fast artificially named or defined, but these are just my two cents . So I personally don't mind if its vertex or face neighborhood as long as its stated/defined somewhere"", 'comment_created': datetime.datetime(2023, 11, 7, 17, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'koehlerson', 'type': 'User'}]","[{'commit_sha': '000eab44a28bed4aa7fe05299ad1d9527414aef0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d1c0e03e3bba0b23472cd815ecd665220fdf6e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5568746ce59c6f3c1d9edd122b7ed0520d1f2dc8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa236b37798bc524edd2e937d3f4c6055e8c3c8b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4754f2effe2e52844980111dc0f537a0363a211', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69b2cd434b36b89f23d468da381302da2488fe1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edfa09c75f4403d7c115a018a3b5ee584f9a9658', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06dc9e215ffee88e5964976bdf02ef5225c24d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4889e2f29f9f4ba50ad1e5067576ddf0b9a45ae', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3afb9623e4bf75117f24ad8c994bd0bb6f0ff2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60573db45ab4cca4c4b065603b4fb252d7816e7b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e81b66fdc94b0770aee7ea9f76e92efa10fc7cd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0065423731d996b60fb6866e5840e56d39daf8c2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a530f760a1029a349f24768d8571357f7fb222', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a842a3acb5dab755929b1e852b152bd995dd52', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e03b2a0dd1f6a3efb60a9a87ea5af26abdc1a3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b1f495e87c94432dd7a8f09113fd6c150b496e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09fa6bd448dda4a439f23bc20c74a065ad5bd255', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bb40ffec967b606e017ebd7100daf50f865f40', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '698874a887cbdcd58ea1438178ebb08bff4543f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e75325ece719b5c554f767a2907d0f03f75c31', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e3429f43fb6c6b07291acf7806ce9b66b6e73a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb5ddf52f49552d94d555d220e87274bdf85874', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bf804536287df1eefc35039ac774dae69e23b8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d59a7500b6e25efde25df120ae588865cb068e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c60a0b6d8b27457da99c56e6cc4819ca74e7f19', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de83a50e78fe878218f0508bc92319836cb09582', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfce1b1c084592eb9e082ec795cabfefdb89139', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10cf989c45306a54372eec3608a247f471112c0f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b86e289d4256d296b85d24490b8a702cd6fbcae3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34d72de0d68e288600d54482cd1e6567e15a6e98', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c03c787cb7d25bb8915e56197e41f2d98e95f360', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6324a83d26c5fdc1901f119ba3e7c7fd3fd496', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f6a397b719795475992e0365a5b4046d1b2c39', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef539491f7a0b51c4864cca8d72d963a7c01823b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd221888ba92450981ef21e9c31aa27e20f929523', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b18c3ddf3a410c5b70bfd99193f5e535d9c2b18', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c302fcad32a021be049659375a5530b7b6b98532', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f6cb092b5166eb764b27f6b95383547a456606', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1193c42cbb0d359171090a68945241468e673118', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08c4af05e5f2e60fc51309c5e9d51e03e9dcb110', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '851fe05b7f16e56d55fd46994be3ca1adbbd6ddd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b10ece4fdf173f6deff2d87674bba87f648ae826', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dadcdac8343a42746f1f1d64499a924b1a4115d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b432c917c469dc6f1ababcac21c9974e2c616b08', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c28f0b2ebc213caf2c8b7a30845ccdb11cc7ffd7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db877bfa9fbc61814d4b5b97f4359702591718d9', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff06028b92cffa85db86a2fc812737cbcaa58cf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df162712f2c569f5d9e6a9e3df98d1e86b2e6ba', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '232b2a83d16e5b5210f5710e0fc5cc90e0aa47d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd32ca77afa269eb943fcf8fa38f7cee98695c4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7732a1113c3f4febe0542db4e23b5b4b390c74f5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '874b4926035d50b39b1850cd74c903e272c25e02', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34b0356d234ae0d7cecedcc60f3780343012937', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de61c903fb51def2c647d36e41f97c3a92cb95e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d24cc08580a6650d25c26b968b7b39cab928f3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687a3e21a63058884986940928e92e71f2babe5e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbfd5b4a554be5c202b594bec3e7a00ab8ea7a4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c78c61197bbed07ccb7c39c1fbfc58c2733b30b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c222cfe613d251d6d7d7f9d93d8f01ecc32a4b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb394d8a117bffe2d461bb11ee9a83bd56b57786', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56763b765a1473e89aa0387d9ad3ff5f1a9f0f37', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd82f177fe86d0998f5d32fb9c300222d3cbe4e91', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7940cf06bd6377e66eb6b36d9cb17343e0a8a03', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050ac5e365c78ccac20fe4c604ab46e2e79e7cc5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60bf5491d55753bafc56e8d6418122a778db5942', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a7a194a0b655741e6b2605bb8bac0821f59c8fd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600fae68e088a4f6744e05c2ab76b718e8ba9b4c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d158137c1fe57e9f626ac1d4c5d70f91fae21d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe478653b4e393effe6766131e45a308a84d17a6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1ce481f76d66b4458002e2e7f5fb47c5695769e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02cc036aaa393ab0ce3c3644f717a113db23364e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee7163e44831634a6610320a5da2802f58ea75c4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2cc740b059528e848bb58c80b35c22f60603fd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6baad5aad40d76df4bf44070f8f50162902590', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0453aedecbbdcd7de5bef95554bc93126eedfeba', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '823847fc39f48e29577b7102ecc88772bd1829ef', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65585151bbbc21a425724dd6d9b7bd6fa3cf0db5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae8c7dec53a0819ac13ffe71f27ec3b68a9e895', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb369a836867e66199c907249a154d25e8303102', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750c2bf0e8ce5702f1eb0936194efaaf19911cad', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed92be2cb420ed5cad65acb25005e37abdeda24a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae501b3d4c528b4c0c38ab0b951ea50b1712345', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb041e69219a5299dc441caf3eca47f866c6d46', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c4411678ca4b9786b067e58ce0b449a11779d1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60c1cb8e32afe4d3c6bcd2a912815096b8a04d8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e35e644618aca6aebbcfeecdd087230ce35b12', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d0258011843112e5bae99b278ddb784dc7c29b6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96af08810f63e0ba310ad4290c4ad631f7a6427a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca53d0987efeb6303159d1ee4a5f1fcb4a703129', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d16d31b7654f4f7cff54214f9e56e8d51e3613', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1a24dc01b1db29ae6a792b1492acd7a5762792', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5153fde45dedc5db9a3f63b72b11a69ecb18b950', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b583b442b040a33b60a17e23847eb88974ba4a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6781338c1a3dd93590860606933c2b15af06edd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63bba44e6e7c040b0de694fc306f2eb56d49fd3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae753090de18f6eee044f14c45de2c5724c2c03b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f191c05e1b3483421b44cf0ad1ecaeed15877b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bad45f4258a67534a837334164afc80d3a841ab1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ccf6a49c0fa3e6fb89d075cea36b0ed4ac2717', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42573e75bdf277cc68a987cf995b7485eded6eb2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b74203140af60386d1b897068e1bb8dc1af5348', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852fcaa2250d25c959b9069a2c10bc6c410ea120', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5603afdebafe96faa87b0c07b53953b933095f54', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8258ea2a1ad927a4e96aa9dd1554991f0844a4b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd057454d605b99919b697211a691649d96cbc1e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c785e1253500dac4cf93401709161af012b229b1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42fbde462facc4977446d876b012b133afce779', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1981c818d7e62e4985af7f7bff47bc31f34988b4', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed7f14da2edfed3d0c2bf47aa32126ddd1368203', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f117dd7785e51bf82028f3a458ca8bf7de9e0b7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675f0ab53e0729165d41c028c3c3e0d75734cfc9', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6bed37971b31b3eba2d8667f5ba300876462e8', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b081c36d85bf9b4055569358458e6f5d2d59be6', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b228667cba287089430f784c7b9b1c5962c543', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e87fb5a54538ded198e74770e5e32304a5cf260e', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426470260bfcfa9f50ea165934179e63ceae7c51', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d36bdc9b8222c196a49b28d79c36a9c7825767', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dc6117d0a97d7faf8f335177a5cddd18a1da0f4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de79e40b4bfdf99df434dae7d7292df74130e39a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '933fe7882558f1693c9237b56d7d2f85d5b10da1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5437bb6dabb7e97fb5641ec55d0a1310c9bbfa', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59cccd06737ad52aeb50f3e3db6028356ac4364d', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b93937cc430cca9645c3b1b9ebe032f89223fb06', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9010f86685bd71342d27b61dbbb3cf86b9d50c2b', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cec25a4f6baef01708c512763c020c70a0e9af5d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '159b4a1b03f7c0c62253efb84b2dfa0b6eba5a15', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11d0a9ae592cacd7536858aa044f48704e6d1c97', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4f6ed947f4943999766dfc962e9ca1af146f50a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bed6b53083421fa205b0be4efec4943b020a292a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec55515c6745683714d3e66747036078005339e8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1048d49fc78235f7a20705ed27d2b1c4dd33a04d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f966e8400096e04fa2135fa43f7f4862c05e6c3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '347e7963fe20362ce6177cb3252b930b097fce53', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fafc549684b1a6a4f0782c4514b8af6f4c44f3f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7d31f968d6b569599e4abeb0827d6131c952311', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ac92f5164332884d5bf45e006e33d6fdbef7ca', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e21c0fbf3d70129af020a11b6aebe2e1ac00a5a2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '754eb757d4d9de49a473e057e421b734f751827a', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32799be3ae88bf40b4b570d9f31bfc2be59a06ea', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a24ab17cc9bf6ffac5c44d69f3a2df86ebdd75', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ce37c9817bd309343baae525ff55cc6056d12d', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76584355e6d79cf7b8b85e8dcfecc9a9ff35948', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c7f3664ee067b51aa4a4c1243459a698e29d74b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eb46805fb9b4538bed49fe8b84e68eef4439349', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cee960a5890bfa574f49dca7a340e3fb71121eb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d631c0579acbb8797f7b73eaa372a748ba85148', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cc5e30fc8d1e51cd1978af4ec91fe5942028f7c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2532e58dd244a76a46fbb524214bba61bec016c3', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7cd8490bb13e4acab5e48c4d37bd613cc76ea70', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e4499766ab630c368e3b6d06ec389793076fda', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e1f7c55c5fe7685c05733e2cd4dac801877cd02', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccb5242e69ad01e6afadf800e52286627928bcd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1886d9e36058052f5f79cc7bbf3586eb21869d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a32cf67a4e6b98aab1cd28424def18cce4bb52', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d61ac41a03b4472d9018069df4c59a6ca7025ea', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7de299388a662b9ec89d2f8d29307960c023736', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e665d637128f4ab52f726e033e78dd7cc052b3e', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1455258807,Implement FaceQuadratureRule for RefPrism and RefPyramid ,"Closes #772 
Changes the transformations used in `create_face_quad_rule` to use the ones in FerriteViz as they're beneficial for optimizing #743 and IIUC make more sense in general as they respect the normals directions.
Also, the transformation is separated into its own functions such that they can be reused as in #743.
Edit: test coverage should improve with interface test, because it covers face->cell transformations ",True,779,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/779,https://github.com/Ferrite-FEM/Ferrite.jl/pull/779,closed,321,123,9,30,3,51,1,0,[{'name': 'feature'}],2023-07-30 20:21:04+00:00,2023-08-29 09:51:53+00:00,2554249.0,"29 days, 13:30:49","[{'comment_id': 1279297710, 'comment_body': '1) Should this ""new"" function have the same function name when it returns the local node indices? \r\n2) Is it possible to use this function to create the existing `faces(::AbstractCell)` functions? Seems bad to duplicate the numbering if it can be avoided without performance losses...', 'comment_created': datetime.datetime(2023, 7, 31, 13, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279299620, 'comment_body': 'Perhaps a short note for each if/how the intervals are shifted? (And remove the old code)', 'comment_created': datetime.datetime(2023, 7, 31, 13, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279301683, 'comment_body': '1) Perhaps use regular comments, `#` above each specialization to avoid getting all these as docstrings. The general descriptions on the top should suffice IMO.\r\n2) Is it necessary to support `Vector` as input? Do we use that?\r\n', 'comment_created': datetime.datetime(2023, 7, 31, 13, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279302811, 'comment_body': 'Re-enable?', 'comment_created': datetime.datetime(2023, 7, 31, 13, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279303748, 'comment_body': 'Perhaps a ""harder"" test would be a linear combination of coordinates on the face, to avoid just checking exactly the reference coordinates?', 'comment_created': datetime.datetime(2023, 7, 31, 13, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279316641, 'comment_body': 'Thanks for the review! I think the name makes sense for the input, however, `reference_faces` might be better  given the input is a reference shape. What do you think?', 'comment_created': datetime.datetime(2023, 7, 31, 13, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1279316956, 'comment_body': 'I need to stop forgetting commented stuff :""D', 'comment_created': datetime.datetime(2023, 7, 31, 13, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1279319403, 'comment_body': ""The `Vector` was used in #743 IIRC, I'll check if it can be removed (and probably it can, I think I changed its calls in #743 but didn't remove `Vector`)"", 'comment_created': datetime.datetime(2023, 7, 31, 13, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1279424654, 'comment_body': 'Personally, I find a separate name easier, and `reference_faces` sounds good to me. ', 'comment_created': datetime.datetime(2023, 7, 31, 14, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279766952, 'comment_body': 'The copy test fails because of NaNs IIUC\r\n```julia\r\n    detJdV = fill(T(NaN), max_n_qpoints, n_faces)\r\n```\r\nHow about changing the default to zeros?\r\n', 'comment_created': datetime.datetime(2023, 7, 31, 19, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1279845810, 'comment_body': 'btw it looks like these throws are redundant because there are outer checks IIUC. Should I remove them or add tests for them anyways? (IDK if user would access face weighted normals directly through this function instead of using facevalues)', 'comment_created': datetime.datetime(2023, 7, 31, 20, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280229132, 'comment_body': ""The reason for filling with NaN's is to catch cases when it wasn't reinit!:ed. (For example if the user forgot)\r\n\r\nAbove that test case, the fv is reinited, right?\r\nSo it should not be filled with NaN, and also not the copied version"", 'comment_created': datetime.datetime(2023, 8, 1, 7, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280233861, 'comment_body': ""If you can show that there is a significant performance benefit by removing the error (could be), then that would be fine, but should probably be called `_unsafe_weighted_normal` or something (I don't think we do this at other places in Ferrite at the moment, although `shape_value(::Interpolation, ...)` could be a candidate, xref #766 )\r\n\r\nBut I would leave that for a separate PR "", 'comment_created': datetime.datetime(2023, 8, 1, 7, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280244115, 'comment_body': 'The thing is IIUC for pyramids and prisms not all faces has the same number of quadrature points. which makes some entries in the matrix NaNs even after init for the faces with nquadpoints <max_n_qpoints', 'comment_created': datetime.datetime(2023, 8, 1, 7, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280253826, 'comment_body': ""Aha, I'm not sure what to do here.\r\n\r\nOne option would be to fill only those entries with zero on construction to make them behave equally, but let's ask @fredrikekre on this one..."", 'comment_created': datetime.datetime(2023, 8, 1, 8, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280258674, 'comment_body': '~Or fill them with zeros on reinit~ doing that on construction sounds more efficient', 'comment_created': datetime.datetime(2023, 8, 1, 8, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280290202, 'comment_body': 'I don\'t see performance benefit (or maybe I should use something other than `@benchmark` to benchmark operations that take about 1ns :""D)\r\n\r\nMaybe I can add some tests for these error paths then to improve test coverage.', 'comment_created': datetime.datetime(2023, 8, 1, 8, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280499417, 'comment_body': ""Yes, it is hard to benchmark due to const propagation I can imagine. But let's leave that for a separate issue. "", 'comment_created': datetime.datetime(2023, 8, 1, 11, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280506860, 'comment_body': 'I think these methods belong in face_integrals.jl where the craete_face_quad_rule is', 'comment_created': datetime.datetime(2023, 8, 1, 11, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1280511085, 'comment_body': 'Thanks for the review!\r\nWill move them and push after CI finishes (making sure no older version break, had some issues with 1.6 before :""D)', 'comment_created': datetime.datetime(2023, 8, 1, 11, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280519545, 'comment_body': 'A third option could be to just change the test to allow, add a function in the tests along the lines of \r\n```julia\r\ncheck_equal_or_nan(a::Number, b::Number) = a==b || (isnan(a) && isnan(b))\r\ncheck_equal_or_nan(a::Vector, b::Vector) = all(check_equal_or_nan, a, b)\r\n```\r\nThis would (1) do the proper testing and (2) give out NaN if one by mistake (somehow) tries to access the uninitialized values. ', 'comment_created': datetime.datetime(2023, 8, 1, 11, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280585577, 'comment_body': ""I'll push a commit for better errors/coverage after it passes locally, hopefully this fully covers the PR"", 'comment_created': datetime.datetime(2023, 8, 1, 12, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286441358, 'comment_body': 'Can we do this without interpolation somehow? This kind of stuff breaks GPU compilation.', 'comment_created': datetime.datetime(2023, 8, 7, 22, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286442420, 'comment_body': 'I like the idea! Can we come up with a better name for the routine maybe?', 'comment_created': datetime.datetime(2023, 8, 7, 22, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286443016, 'comment_body': 'Can you give a reference to oriented face in the manual? Users might not be familiar with the concept.', 'comment_created': datetime.datetime(2023, 8, 7, 22, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286443595, 'comment_body': 'Is there a performance hit to this operation? If so, how severe and can we optimize it?', 'comment_created': datetime.datetime(2023, 8, 7, 22, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286444206, 'comment_body': 'What is the problem here?\r\n', 'comment_created': datetime.datetime(2023, 8, 7, 22, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286444627, 'comment_body': 'Good catch! ', 'comment_created': datetime.datetime(2023, 8, 7, 22, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286760486, 'comment_body': 'Thanks!\r\nWill think about a better one.', 'comment_created': datetime.datetime(2023, 8, 8, 8, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286760661, 'comment_body': ""Does throwing break GPU stuff or having a variable in the error?\r\nI noticed unsafe stuff in #766 if that's what you mean. Also, @KnutAM suggested something like `_unsafe_weighted_normal` if it has performance benefits but I couldn't measure the benefit :smile: "", 'comment_created': datetime.datetime(2023, 8, 8, 8, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286762955, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2023, 8, 8, 8, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286765148, 'comment_body': ""Knowing what the input face was isn't super useful, so perhaps it can be removed. Or you can keep it as is until  this actually runs on GPU."", 'comment_created': datetime.datetime(2023, 8, 8, 8, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1286766069, 'comment_body': ""It's that the copy test fails for matrices with NaN entries, and for cells with faces that have different number of dofs/quadpoints we get NaN entries for the extra entries for the faces with ndofs/nqp < max ndofs/nqp"", 'comment_created': datetime.datetime(2023, 8, 8, 8, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286769920, 'comment_body': ""I don't think there's much of a performance hit\r\nThe PR:\r\n```julia\r\njulia> @benchmark Ferrite.faces($cell)\r\nBenchmarkTools.Trial: 10000 samples with 1000 evaluations.\r\n Range (min … max):  2.945 ns … 31.522 ns  ┊ GC (min … max): 0.00% … 0.00%\r\n Time  (median):     2.956 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   2.994 ns ±  0.791 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\r\n\r\n         ▁  ▂ ▂  ▃ ▃  ▅ ▆  █ █  ▇ ▇  ▇ ▇  ▄ ▁                 \r\n  ▂▁▃▁▁▅▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁▇▁▇▁▁▆▁▆▁▁▅▁▂ ▄\r\n  2.94 ns        Histogram: frequency by time        2.97 ns <\r\n\r\n Memory estimate: 0 bytes, allocs estimate: 0.\r\n ```\r\n Master:\r\n ```julia\r\n julia> @benchmark Ferrite.faces($cell)\r\nBenchmarkTools.Trial: 10000 samples with 1000 evaluations.\r\n Range (min … max):  2.949 ns … 30.682 ns  ┊ GC (min … max): 0.00% … 0.00%\r\n Time  (median):     3.024 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   3.187 ns ±  1.418 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\r\n\r\n   █▇                                                         \r\n  ▅██▆▆▄▄▄▃▃▆▄▃▇▇▄▄▄▃▃▂▂▂▂▃▃▃▃▃▂▂▂▂▂▂▂▂▂▃▂▁▁▂▁▂▂▁▁▁▁▁▁▁▁▁▂▂▃ ▃\r\n  2.95 ns        Histogram: frequency by time        3.69 ns <\r\n\r\n Memory estimate: 0 bytes, allocs estimate: 0.\r\n ```"", 'comment_created': datetime.datetime(2023, 8, 8, 8, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286933315, 'comment_body': 'We should be able to fix this by introducing some ""matrix""-like struct with varying row/col size. I.e. something like\r\n```julia\r\nstruct VaryingMatrix{TOV, TDV}\r\n   offsets::TIV\r\n   data::TDV\r\nend\r\n```\r\nwhere the access with two indices first looks up the offset in the offset vector and the second index computes the actual element in the data vector via data[offset_index[i]+j], where the offsets start at 0. We should then start using this all over the codebase. Does this make sense? cc @fredrikekre separate PR maybe?', 'comment_created': datetime.datetime(2023, 8, 8, 10, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286975168, 'comment_body': ""I was thinking of using a vector of matrices with each matrix having its own rows/cols instead of a 3-D array `Array{T, 3}` but I'm not sure what the performance impact would be due to changing memory layout"", 'comment_created': datetime.datetime(2023, 8, 8, 11, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286995731, 'comment_body': 'Yea, we should try to keep the memory continuous here, because there is potentially quite a big performance hit, depending on the system.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1290950524, 'comment_body': 'This is only applicable for prism and pyramid I think?\r\n```suggestion\r\nfunction create_face_quad_rule(cell_T::Type{RefShape}, quad_faces::Vector{Int}, w_quad::Vector{T}, p_quad::Vector{Vec{N, T}}, tri_faces::Vector{Int}, w_tri::Vector{T}, p_tri::Vector{Vec{N, T}}) where {N, T, RefShape <: Union{RefPrism, RefPyramic}}\r\n```', 'comment_created': datetime.datetime(2023, 8, 11, 6, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1290957830, 'comment_body': ""I don't see where this is used in this PR?"", 'comment_created': datetime.datetime(2023, 8, 11, 6, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1291303148, 'comment_body': ""I checked it. It's not used directly but it's used to get `nfaces` for reference shapes which is used in `create_face_quad_rule`. It'll be used in the other PR in a more direct way, but I think it's necessary here too"", 'comment_created': datetime.datetime(2023, 8, 11, 12, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1291597705, 'comment_body': 'Sorry, I got this backwards. Reading the docstring I think it should be rather `face_to_element_transformation`.', 'comment_created': datetime.datetime(2023, 8, 11, 17, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1291603505, 'comment_body': ""Nah It's my bad I missed it :D\r\nWill rename once back to branch"", 'comment_created': datetime.datetime(2023, 8, 11, 17, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1302714876, 'comment_body': ""```suggestion\r\nTransform quadrature point from face's reference (N-1)D coordinates to ND coordinates on the cell's face.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 23, 9, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1302715121, 'comment_body': '```suggestion\r\nCompute the vector normal to the face weighted by the area ratio between the face and the reference face.\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 9, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1302715728, 'comment_body': '```suggestion\r\nThis is computed by taking the cross product of the Jacobian components that align to the face local axis.\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 9, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303254712, 'comment_body': '```suggestion\r\nfunction create_face_quad_rule(::Type{RefShape}, w::Vector{T}, p::Vector{Vec{N, T}}) where {N, T, RefShape <: AbstractRefShape}\r\n    n_points = length(w)\r\n    face_quad_rule = QuadratureRule{RefShape, T, getdim(AbstractCell{RefShape})}[]\r\n    for face in 1:nfaces(RefShape)\r\n        new_points = [face_to_element_transformation(N != 0 ? p[i] : Vec(zero(T)), RefShape, face) for i in 1:n_points] # ξ = 1-t-s, η = s, ζ = 0\r\n```\r\nI think the compiler prefer this pattern.\r\n\r\nAlso, the comment at the end of the line seems outdated?', 'comment_created': datetime.datetime(2023, 8, 23, 16, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303256437, 'comment_body': '```suggestion\r\nfunction create_face_quad_rule(::Type{RefShape}, quad_faces::Vector{Int}, w_quad::Vector{T}, p_quad::Vector{Vec{N, T}}, tri_faces::Vector{Int}, w_tri::Vector{T}, p_tri::Vector{Vec{N, T}}) where {N, T, RefShape <: Union{RefPrism, RefPyramid}}\r\n    n_points_quad = length(w_quad)\r\n    n_points_tri = length(w_tri)\r\n    face_quad_rule = Array{QuadratureRule{RefShape, T, getdim(AbstractCell{RefShape})}}(undef, nfaces(RefShape))\r\n    for face in quad_faces\r\n        new_points = [face_to_element_transformation(N != 0 ? p_quad[i] : Vec(zero(T)), RefShape, face) for i in 1:n_points_quad]\r\n        face_quad_rule[face] = QuadratureRule{RefShape, T}(w_quad, new_points)\r\n    end\r\n    for face in tri_faces\r\n        new_points = [face_to_element_transformation(N != 0 ? p_tri[i] : T[], RefShape, face) for i in 1:n_points_tri]\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 16, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303266253, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 16, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303340643, 'comment_body': 'You mean\r\n```julia\r\n# For cells with mixed faces\r\n```\r\n?\r\nI think it still works because the method underneath is for prisms and pyramids', 'comment_created': datetime.datetime(2023, 8, 23, 17, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1303407766, 'comment_body': 'I meant `ξ = 1-t-s, η = s, ζ = 0`', 'comment_created': datetime.datetime(2023, 8, 23, 18, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303418999, 'comment_body': ""Ah, you're right, my bad."", 'comment_created': datetime.datetime(2023, 8, 23, 18, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': '0af8b542caa4bf0d3010643040e5647026354ddc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5002c715285849278d950f400a7670a4ea612c37', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264eda2884483f79cd573518c5713f412d217cd6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5a40c636dc637377cbc51873460f972c1d8450a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0343907481e886da979273a9cc8053e2a79ecca8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40bda7f75d99998e89dff417630cd0f30df107f3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '049e62a4234d256fe528c1d614d8b48aba268c88', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9644a6950966f9aa8027c2578ae27593b068b12', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d34744d5060baeb5ecc51c53653ab2dbc12d68', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc396ca8405b7e00a9560c653412f3dc33e1cee5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df49e1df56f30aee0e56bbeeb2ac848c3be0438', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b10ce509d15a107825eb4ac785ffeab0ab859a9', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3970bf955d51e7c5b643b9faccdd037b406fa446', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f89faa4e52ff37c579a456acbf174e77c533ffa', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f72b9081232517f3b76f2309b2ed5d664cfc5e9c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f495ba0830f679d565b2b973b8be37826e3d339', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1474d602448ae237bae5288d6b148bd72664cddc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f7fd540a2bf4b4ea209a543eac5ce37c17d0ba', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd502de2c922fe989db7ce3a78b7f74dfef94cb9b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb9fb9c68889656aef98bf5fcb3fe4e0fe5424d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230c174341d139f100347fd4a36a5e98fe7d363d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '748cec9641dbb9e762e74be1025bbc2d62247296', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f427529d3f0a6dfe10e8a2150cfb62e37564a66e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b896373235e78a8bc7fefdf02bbbadc69aceb8f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e04524974e99f4ff6eb4b80a8b1d3344593959c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b244def78b6530c3559e0fe0671225bfdbfc5e6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce7cc4fded0200318b740e257bf06afe15baa02', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '809cb8dd4cc8d052de0221f62f4b9d48a23857ec', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4be789bc786fd085fb356cb63b1259fc8a4f2378', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73650a3a95918dc7cd90d5d955e182daf23d037e', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1475219376,Arbitrary order Lagrange interpolations for hypercubes (with arbitrary basis) and triangle (equidistant basis only),"For #626 
Some comments:
- using Vandermonde inverse resulted in worse floating point errors during Dirac-delta tests
- Tested order 10 with heat equation example, seems to work (haven't checked convergence tho but seems ok from paraview)

Note: I also edited the existing Tri345 to be arbitrary but it doesn't have the arbitrary basis/points thing",False,790,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/790,https://github.com/Ferrite-FEM/Ferrite.jl/pull/790,open,658,117,7,20,5,10,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc23'}]",2023-08-14 22:54:28+00:00,,0.0,,"[{'comment_id': 1299177807, 'comment_body': 'I just realized that using GL points should result in `dirichlet_facedof_indices` being empty IIUC. This makes this function need to either check for faces on boundary or have predetermined options for the points (equidistant, GL, Radau) instead of passing the points in the constructor.\r\nI think having predetermined options would be easier and more consistent (as we guarantee the ordering), what do you think?', 'comment_created': datetime.datetime(2023, 8, 19, 11, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1299270837, 'comment_body': 'I would suggest that we just throw an error for now when trying to extract the Dirichlet dofs for all L2 elements which are not based on ""symmetric"" nodes, when the basis functions of the interior nodes are non-zero on the boundary (and for modal basis functions). If we want to work further on strong enforcement of the Dirichlet condition we have to think a bit how to do it correctly.', 'comment_created': datetime.datetime(2023, 8, 19, 21, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299271866, 'comment_body': '@fredrikekre should we separate the fixed order implementation which we have from the arbitrary order infrastructure?', 'comment_created': datetime.datetime(2023, 8, 19, 21, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299272246, 'comment_body': 'I think it is worth to investigate a code generator here in the future (e.g. to just generate the elements from the Ciarlet definition). So, no need to invest too much time here if it is not absurdely slow. :)', 'comment_created': datetime.datetime(2023, 8, 19, 21, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299273070, 'comment_body': 'Can we add doc strings for these, so users know about the functionality?\r\n\r\nAlso, how can users discover this feature? Maybe we should add some hint in the Lagrange doc string and a tip one of the examples? Not sure if it is worth to copy paste the full heat example here. In the future we can think about adding a Lagrangian formulation of some advection problem.', 'comment_created': datetime.datetime(2023, 8, 19, 22, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299273169, 'comment_body': 'Can you elaborate?', 'comment_created': datetime.datetime(2023, 8, 19, 22, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299299722, 'comment_body': 'Passing `Val(order)` might be a quick and easy remedy', 'comment_created': datetime.datetime(2023, 8, 20, 4, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1299418078, 'comment_body': 'The first line refers to the numbering convention used (copied from fixed order one)\nThe second one refers to the permutation that maps from the generated (-1:1)^n coordinates to the ones following the convention (such as {-1,...,1} ->{-1,1,...} in 1D)', 'comment_created': datetime.datetime(2023, 8, 20, 18, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1306389218, 'comment_body': 'I think we should wrap this also into the arbitrary order Lagrange struct.', 'comment_created': datetime.datetime(2023, 8, 26, 9, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1306582937, 'comment_body': ""I think the name is kinda too long 😄. Maybe we can make it a fallback for Lagrange constructor so we don't have to use this long name?"", 'comment_created': datetime.datetime(2023, 8, 27, 1, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': '681d93bd4e35b132aa95b10f74911a22c76d10a2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aea12d0c993d589c65e9f000f57aa02518d6feca', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f9dc0699d19255d0520cf6d1e3e2214512372d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdcf12ff41e181cfa82e93db45a9a543e76047aa', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8fc662dcde107fd1cd705d94bd36ccfc0605c0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324a732061696dc85bc4e81e8c90ae4f0cbf5a04', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff4347b1f27f2a638b15d6592eabf67828c0250d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b41a072b76469e57dcf0ea384abe4367a47930a4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f76cb72a57006c14917c8f0997db60aee7bebd1a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a21469a61a5fa608d7410927ea9d277cc677618c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9cbc21db6ce5ccd60a067678207c57be79b73b4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ab1dbf371703530078ce63bdb09d74eb51085f5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15af785e8ac934097c6e6ee44af76718a18e374a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cf8d933c117058a2120fbf90ac4ba38b910e4a7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea1c6776d46ffa4b88399d023b8a059e14365a4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e6818db410eb2b865bf89592eee1c82cbf6b2f8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08163a4aa162cf17be345100a908da9b46360752', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c14c96abed619df062f6c37987d962e630c9ac', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c24f7acafa2d0c81f57dc48fdb5e448310fe170', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17040e1660dace59c50156dc0b367fa08044f2f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1472857060,DG heat equation tutorial,"Tested convergence using an edited version of #640 and it seems to converge * currently doing some edits to optimize it and see where the results stagnate. Will leave the script in a resolved comment once finished so it doesn't take much space *
![image](https://github.com/Ferrite-FEM/Ferrite.jl/assets/45468098/8cb7ae83-9221-4986-99f4-6ad8a6728c39)
![image](https://github.com/Ferrite-FEM/Ferrite.jl/assets/45468098/d87beaa8-5d93-4ff9-88d8-c8afd7eb2181)

These plots are in log-log, and N is the number of elements in one of the dimensions (so for quad the number of elements is N^2)",True,787,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/787,https://github.com/Ferrite-FEM/Ferrite.jl/pull/787,closed,401,0,5,37,6,55,1,0,[{'name': 'awaiting review'}],2023-08-12 12:47:57+00:00,2024-01-04 13:30:49+00:00,12530572.0,"145 days, 0:42:52","[{'comment_id': 1295229999, 'comment_body': '~~Are you sure this test is correct?~~ I think I see what you did here. :) Should be fine.', 'comment_created': datetime.datetime(2023, 8, 15, 23, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1295231963, 'comment_body': '~~I also might ask for clarification here. Can you expand the 1D heat problem with 2 elements by hand and check if this implementation is really equivalent?~~', 'comment_created': datetime.datetime(2023, 8, 15, 23, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1392459794, 'comment_body': 'Maybe we should add some acknowledgement here for the GSoC funding', 'comment_created': datetime.datetime(2023, 11, 14, 11, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1417373868, 'comment_body': 'Can we get away with a cleaner solution here? Is this even type stable? Same below.', 'comment_created': datetime.datetime(2023, 12, 6, 13, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1417639526, 'comment_body': 'Can we have two Neumann boundaries for the example, so this term does not vanish?', 'comment_created': datetime.datetime(2023, 12, 6, 16, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1417640080, 'comment_body': 'I think this one is outdated', 'comment_created': datetime.datetime(2023, 12, 6, 16, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1418537090, 'comment_body': '`Ferrite.function_interpolation(::FaceValues)` should help here to make the access cleaner (but probably ""nicer"" to extract this information outside the loop)', 'comment_created': datetime.datetime(2023, 12, 7, 8, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1427419780, 'comment_body': 'Is it considered a unit square?', 'comment_created': datetime.datetime(2023, 12, 15, 0, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1427859290, 'comment_body': 'Actually not. :D ', 'comment_created': datetime.datetime(2023, 12, 15, 11, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1435555465, 'comment_body': 'Would it make sense to (1) link to the basic example here and (2) point out the differences?', 'comment_created': datetime.datetime(2023, 12, 23, 10, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435556930, 'comment_body': 'It took me some time to spot the difference in the subscript between u and n. To me, using capital N for Neumann, and capital D for Dirichlet would make it more visible and easy to read. Secondly, perhaps the information in the table below can be put in directly in the equations?\r\n\r\nFor example\r\n```\r\n\\textbf{x} \\in \\partial \\Omega_D^+ = \\lbrace\\textbf{x} : x_1 = 1.0\\rbrace\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435557214, 'comment_body': '```suggestion\r\n# \\nabla u(\\textbf{x}) \\cdot \\boldsymbol{n} = 1 \\quad \\textbf{x} \\in \\partial \\Omega_n^+, \\\\\r\n# \\nabla u(\\textbf{x}) \\cdot \\boldsymbol{n} = -1 \\quad \\textbf{x} \\in \\partial \\Omega_n^-,\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435557476, 'comment_body': '```suggestion\r\n#  \\{u\\} = \\frac{1}{2}(u^+ + u^-),\\quad \\llbracket u\\rrbracket  = u^+ \\boldsymbol{n}^+ + u^- \\boldsymbol{n}^-\\\\\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435557872, 'comment_body': 'I would like vector-valued quantities in boldface in this derivation to be consistent. \r\n\r\nAlso, in this derivation, Gamma is used for the internal/element boundary, while Gamma^0 is used below. Is this intentional, or should this be made the same? ', 'comment_created': datetime.datetime(2023, 12, 23, 10, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435561164, 'comment_body': '```suggestion\r\n#     Integrating by parts and applying divergence theorem,\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435561348, 'comment_body': '```suggestion\r\nqr = QuadratureRule{RefQuadrilateral}(2);\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435561414, 'comment_body': '```suggestion\r\nK = create_sparsity_pattern(dh, topology = topology, cross_coupling = trues(1,1));\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435562886, 'comment_body': 'Since this is an advanced example, perhaps it suffices to have something like \r\n```suggestion\r\n# ### Boundary conditions\r\n# The Dirichlet boundary conditions are treated \r\n# as usual by a `ConstraintHandler`.\r\nch = ConstraintHandler(dh)\r\nadd!(ch, Dirichlet(:u, getfaceset(grid, ""right""), (x, t) -> 1.0))\r\nadd!(ch, Dirichlet(:u, getfaceset(grid, ""left""), (x, t) -> -1.0))\r\nclose!(ch);\r\n\r\n# Furthermore, we define $\\partial \\Omega_n$ as the `union` of the face sets with Neumann boundary conditions for later use\r\n∂Ωₙ = union(\r\n    getfaceset(grid, ""top""),\r\n    getfaceset(grid, ""bottom""),\r\n);\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435562951, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435563903, 'comment_body': 'Perhaps this suffices instead of explaining what is used from each object below? And if needed, only explain for the interface values. (The list below of what is used is missing the integration weight)\r\n```suggestion\r\n# * `assemble_element!` to compute the contributions ``K_e`` and ``f_e`` of volume integrals over an element using `cellvalues`.\r\n# * `assemble_interface!` to compute the contribution ``K_i`` of surface integrals over an interface using `interfacevalues`.\r\n# * `assemble_boundary!` to compute the contribution ``f_e`` of surface integrals over a boundary face using `facevalues`.\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435564281, 'comment_body': 'Is this needed here? \r\nIt follows the basic heat equation notation anyways. \r\nBut on that note, perhaps even add a remark in the beginning that readers are expected to be familiar with the heat equation tutorial before reading this one?', 'comment_created': datetime.datetime(2023, 12, 23, 10, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437569137, 'comment_body': ""I think with the additions in the bullet list above, these parts aren't required here. If desired, a few notes on `InterfaceValues` could be nice to keep, but the main info could come from referring to their docstring. \r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 12, 28, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437574854, 'comment_body': 'With the boundary condition `n cdot nabla u = n[2]` (although not explicitly stated, only via the conditional in the equation), I found it a bit hard to ""see through"" the implementation here. Could something like the following be easier to read?\r\n(Was the comment a left-over from the internal boundary contribution?)\r\n```suggestion\r\n            δu = shape_value(fv, q_point, i)\r\n            boundary_flux = normal[2]\r\n            fe[i] = boundary_flux * δu * ∂Ω\r\n```', 'comment_created': datetime.datetime(2023, 12, 28, 11, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437576085, 'comment_body': '```suggestion\r\n# #### Local assembly\r\n```', 'comment_created': datetime.datetime(2023, 12, 28, 11, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437577398, 'comment_body': ""As above, I don't think more than a short note is required in this advanced tutorial. \r\n```suggestion\r\n# We define the function `assemble_global` to loop over all elements and internal faces (interfaces), as well as the external faces involved in Neumann boundary conditions. \r\n```"", 'comment_created': datetime.datetime(2023, 12, 28, 11, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437578286, 'comment_body': 'It would be good to test: Update the result to what you get so that any changes resulting in different results are detected. ', 'comment_created': datetime.datetime(2023, 12, 28, 11, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437579658, 'comment_body': '```suggestion\r\n# The solution of the system is independent of the discontinuous discretization, and after assembling the application of constraints, linear solve, and exporting is done as usual.\r\n\r\nK, f = assemble_global(cellvalues, facevalues, interfacevalues, K, dh, h);\r\napply!(K, f, ch)\r\nu = K \\ f;\r\nvtk_grid(""dg_heat_equation"", dh) do vtk\r\n    vtk_point_data(vtk, dh, u)\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 12, 28, 11, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1438955844, 'comment_body': ""Yeah it's intentional, the derivation assumed homogeneous dbc so the face integral isn't split into boundary and interface terms\nIn the derivation the integral is over Gamma while in the example it's split into an integral over Gamma_0 and another one over Omega_N"", 'comment_created': datetime.datetime(2024, 1, 1, 3, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1439026669, 'comment_body': '```suggestion\r\n#     Defining $\\boldsymbol{\\sigma}$ as the gradient of the temperature field the equation can be expressed as\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439028021, 'comment_body': ""Shouldn't there be a minus before the volume integral on the right-hand side?\r\nHaven't checked the derivations wrt. uhat though..."", 'comment_created': datetime.datetime(2024, 1, 1, 13, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439028045, 'comment_body': ""```suggestion\r\n#     Where $\\boldsymbol{n}$ is the outwards pointing normal, and $\\Gamma$ is the union of the elements' boundaries.\r\n```\r\nWould it also be possible to define uhat and sigma hat here instead of later?"", 'comment_created': datetime.datetime(2024, 1, 1, 13, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439030160, 'comment_body': 'Unless defined above for uhat and sigma hat,\r\n```suggestion\r\n#     where $\\Gamma^0 : \\Gamma \\setminus \\partial \\Omega$, with the jumps and averages results in\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439030408, 'comment_body': '```suggestion\r\n#     Integrating $ \\int_\\Omega \\nabla u \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega $ by parts and applying divergence theorem\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439030813, 'comment_body': '```suggestion\r\n# Since $\\partial \\Omega$ is constrained with both Dirichlet and Neumann boundary conditions the term $\\int_{\\partial \\Omega} \\nabla u \\cdot \\boldsymbol{n} \\delta u \\,\\mathrm{d} \\partial \\Omega$ can be expressed as an integral over $\\partial \\Omega_N$, where $\\partial \\Omega_N$ is the boundaries with only prescribed Neumann boundary condition,\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439031367, 'comment_body': 'Would it make sense to rather do this after defining the interpolations, and then also calculate `μ` outside `assemble_global`, passing `μ` instead of `h`? That would avoid using the internal functions as `order` and `dim` are available / can be defined. ', 'comment_created': datetime.datetime(2024, 1, 1, 13, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439032804, 'comment_body': 'IMO the u in the jump should not be bold-faced as this is still a scalar, even if the jump becomes a vector. \r\n```suggestion\r\n#  \\{u\\} = \\frac{1}{2}(u^+ + u^-),\\quad \\llbracket u\\rrbracket  = u^+ \\boldsymbol{n}^+ + u^- \\boldsymbol{n}^-\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439033708, 'comment_body': 'Sorry, my writing from last time was a bit unclear. What do you think about moving it around like this?\r\n```suggestion\r\nK, f = assemble_global(cellvalues, facevalues, interfacevalues, K, dh, h);\r\n#md nothing # hide\r\n\r\n# ### Solution of the system\r\n# The solution of the system is independent of the discontinuous discretization and the application of constraints, linear solve, and exporting is done as usual.\r\n\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 14, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439115011, 'comment_body': 'I think this does not matter in practice, but technically it should be the face diameter, right? In the referenced paper they seem to use $h_e$ for the face $e$ and $h_K$ for the element size, where only $h_e$ appears in their bilinear form (above eq. 2.3).\r\n\r\n```suggestion\r\n# We calculate the characteristic size $h$ as the maximum face diameter.\r\n```\r\n\r\nI also want to note that, I am not sure if my statement regarding *maximum diameter* is correct or if it should be the minimum diameter (from a theoretical point of view). Does not matter for the case in the example at least.\r\n\r\nFurthermore, this computation also just works for structured grids. We should either add a note on this, or we just compute $h$ on the fly during the interface assembly for each face.', 'comment_created': datetime.datetime(2024, 1, 2, 1, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1439116747, 'comment_body': '```suggestion\r\ntopology = ExclusiveTopology(grid);\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 1, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1439117189, 'comment_body': '@KnutAM can you please clarify on your notation proposal on this example here?', 'comment_created': datetime.datetime(2024, 1, 2, 1, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1439117316, 'comment_body': 'xref https://github.com/Ferrite-FEM/Ferrite.jl/pull/787#discussion_r1439117189', 'comment_created': datetime.datetime(2024, 1, 2, 1, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1439276941, 'comment_body': ""I would write this like \r\n```\r\n\\int_\\Omega [\\nabla u] \\cdot [\\nabla \\delta u] \\,\\mathrm{d}\\Omega - \\int_{\\Gamma^0} \\llbracket u\\rrbracket  \\cdot \\{\\nabla \\delta u\\} + \\llbracket \\delta u\\rrbracket  \\cdot \\{\\nabla u\\}  \\,\\mathrm{d}\\Gamma^0 + \\int_{\\Gamma^0} \\frac{\\eta}{h} \\llbracket u\\rrbracket \\cdot \\llbracket \\delta u\\rrbracket   \\,\\mathrm{d}\\Gamma^0 = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_{\\partial \\Omega_N} ([\\nabla u] \\cdot \\boldsymbol{n}) \\delta u \\,\\mathrm{d} \\partial \\Omega_N\r\n```\r\nto be very explicit about where the nabla-operator is acting (also removed a few bold faces that I don't think should be there - technically I even use `\\boldsymbol{\\nabla}` everywhere, but I don't think that is necessary since nabla is always the gradient operator). "", 'comment_created': datetime.datetime(2024, 1, 2, 9, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439457769, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega = -\\int_\\Omega u (\\nabla \\cdot \\boldsymbol{\\tau}) \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\hat{u} \\boldsymbol{\\tau} \\cdot \\boldsymbol{n} \\,\\mathrm{d}\\Gamma,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439461759, 'comment_body': '```suggestion\r\n#      \\int_\\Gamma q \\boldsymbol{\\phi} \\cdot \\boldsymbol{n} \\,\\mathrm{d}\\Gamma = \\int_\\Gamma \\llbracket q\\rrbracket  \\cdot \\{\\boldsymbol{\\phi}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{q\\} \\llbracket \\boldsymbol{\\phi}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\r\n```\r\nDo I understand correctly that the jump of the vector-valued field phi is defined as $[[\\boldsymbol{\\phi}]] := \\boldsymbol{\\phi}^- \\cdot \\boldsymbol{n}^- + \\boldsymbol{\\phi}^+ \\cdot \\boldsymbol{n}^+$, in that case this should be defined. ', 'comment_created': datetime.datetime(2024, 1, 2, 13, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439464951, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega = -\\int_\\Omega u (\\nabla \\cdot \\boldsymbol{\\tau}) \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\hat{u}\\rrbracket  \\cdot \\{\\boldsymbol{\\tau}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\hat{u}\\} \\llbracket \\boldsymbol{\\tau}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\\\\\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\hat{\\boldsymbol{\\sigma}}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\delta u\\} \\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439467221, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega = \\int_\\Omega \\nabla u \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\hat{u} - u\\rrbracket  \\cdot \\{\\boldsymbol{\\tau}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\hat{u} - u\\} \\llbracket \\boldsymbol{\\tau}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\\\\\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\hat{\\boldsymbol{\\sigma}}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\delta u\\} \\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439469203, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega = \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\hat{u} - u\\rrbracket  \\cdot \\{\\nabla \\delta u\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\hat{u} - u\\} \\llbracket \\nabla \\delta u\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\\\\\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\hat{\\boldsymbol{\\sigma}}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\delta u\\} \\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439471449, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\hat{u} - u\\rrbracket  \\cdot \\{\\nabla \\delta u\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\hat{u} - u\\} \\llbracket \\nabla \\delta u\\rrbracket  \\,\\mathrm{d}\\Gamma^0 - \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\hat{\\boldsymbol{\\sigma}}\\} \\,\\mathrm{d}\\Gamma - \\int_{\\Gamma^0} \\{\\delta u\\} \\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  \\,\\mathrm{d}\\Gamma^0 = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439473713, 'comment_body': '```suggestion\r\n#     and $\\hat{u} = 0$ on $\\partial \\Omega$. Such choice results in $\\{\\hat{\\boldsymbol{\\sigma}}\\} = \\{\\nabla u\\} - \\alpha(\\llbracket u\\rrbracket)$, $\\llbracket \\hat{u}\\rrbracket  = 0$, $\\{\\hat{u}\\} = \\{u\\}$, $\\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  = 0$ and the equation becomes\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439475170, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega - \\int_\\Gamma \\llbracket u\\rrbracket  \\cdot \\{\\nabla \\delta u\\}  \\,\\mathrm{d}\\Gamma - \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\nabla u\\} - \\llbracket \\delta u\\rrbracket  \\cdot \\alpha(\\llbracket u\\rrbracket)  \\,\\mathrm{d}\\Gamma = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 14, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439476171, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega - \\int_\\Gamma \\llbracket u \\rrbracket \\cdot \\{\\nabla \\delta u\\} + \\llbracket \\delta u \\rrbracket  \\cdot \\{\\nabla u\\}  \\,\\mathrm{d}\\Gamma + \\int_\\Gamma \\frac{\\eta}{h} \\llbracket u\\rrbracket  \\cdot \\llbracket \\delta u\\rrbracket   \\,\\mathrm{d}\\Gamma = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 14, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439477548, 'comment_body': '```suggestion\r\n#  \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega - \\int_{\\Gamma^0} \\llbracket u\\rrbracket  \\cdot \\{\\nabla \\delta u\\} + \\llbracket \\delta u\\rrbracket  \\cdot \\{\\nabla u\\}  \\,\\mathrm{d}\\Gamma^0 + \\int_{\\Gamma^0} \\frac{\\eta}{h} \\llbracket u\\rrbracket \\cdot \\llbracket \\delta u\\rrbracket   \\,\\mathrm{d}\\Gamma^0 = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_{\\partial \\Omega_N} (\\nabla u \\cdot \\boldsymbol{n}) \\delta u \\,\\mathrm{d} \\partial \\Omega_N,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 14, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439478145, 'comment_body': '```suggestion\r\nend;\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 14, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1441382369, 'comment_body': 'I\'m not sure if this is related, I added it since it was the place I read the ""independent of h"" part, but I think it\'s about Nitsche\'s method. Remove it?\r\nEdit: I mean the reference', 'comment_created': datetime.datetime(2024, 1, 4, 6, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1441466148, 'comment_body': 'You can leave it as is, this is fine. You can interpret part of the penalty as a weak enforcement of a dirichlet condition and Nitsche has basically shown that that you have these 2 parameters.', 'comment_created': datetime.datetime(2024, 1, 4, 8, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}]","[{'commit_sha': 'c11561e6327632bd3ba5602db855430f3a46027e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3484b5fc1fe45a200570281f9d925c858721252e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc98741728c8f4e65516c8347df12012e0bc7225', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6929dd317d8066d73b83854d2291f2afce79e6da', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484985469cfe0fc0a9df02ac22a8105c44ca11cc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a31c4a1a165f1ce68c15f9d01a13a30837b950bf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2cec4999d6e7788edd2bb194540fe68021f0670', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cb7ddadf6ec89d39078814d8f2e26431804200c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd72a21404ff11bdadac0f103e4d78733418ed9a3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9484e3129d3b47d0ee2e0cade4229ca0a9d0543b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12170404c437a631ab28b21c843eaed90eeebb38', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '739220f034f4cf4d01de169048e2fb751750c779', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df4a0a8dcad2009be6f41718cbd682d6625acba3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ad1d4dc15bf7997ea00d07f27f34ea6ae57ea3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bad8566c0739ebe8cb84fc10a2153415c4c1d80', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158558f3b8265f601963ed7dae8dbf25e143e4b3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5491f02fdf390253ea63c0565c87a82f90dc4542', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07dd3001a519cfa419836341238a774e57237d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ba6d6a28b0ef4fefb02973a204f4668fdf45af5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d243c41c31b413a7c75e20a9ad70f172af8d6d3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488fb6c48368f9d93a755d6f2cc6d49da91eb0e3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e6d8c902c2ea1b41db49cc5fd01500acc7cb861', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4953765827fcccbaceab2459fb400928b7305eb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a78da2b9fa09861d013aad72a14b6ea61c9b3eaa', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6edbedf0122beb3a3987f03a5609ce14df842075', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29d316e8fc28aa89c3202524e20924edf441cfb3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a60d09546e85359494ee1c62243065fbbaecce6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '442f948724e1b63628de9b6e065bdd4823004556', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ae0a78d8d8cd704ea1f4b5a713c10adb8d5f366', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d79725db4c72b1d1ed00d81175e4178bcd253ca', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48433ad1b40a5c88916324d573adfda3722f212b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '295ce7e63ab50588e734e4d64d13900da1ed9759', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97b4e05855a190a1178c5a510e7300ce77e29e9', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd6eb32b7063bc9cb79e7f5c0a5e02e7e20df45', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd1d4c96752a2f4c9218f7b304bff3a0ce2c168', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2c33061783f1d02446a091b061a87f74178483', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42daa5900a4ac867bbb92af41c3fc7084b2bad66', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1363644955,`ConstraintHandler` for discontinuous interpolations,"I haven't tested it with a problem, but it seems to work upon checking debugging mode.",True,729,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/729,https://github.com/Ferrite-FEM/Ferrite.jl/pull/729,closed,140,28,5,15,12,10,2,0,"[{'name': 'feature'}, {'name': 'gsoc23'}]",2023-05-24 19:04:45+00:00,2023-06-20 22:04:20+00:00,2343575.0,"27 days, 2:59:35","[{'comment_id': 1214804888, 'comment_body': 'Any reason not to error here?', 'comment_created': datetime.datetime(2023, 6, 2, 20, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1214805141, 'comment_body': '🤔', 'comment_created': datetime.datetime(2023, 6, 2, 20, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1214805737, 'comment_body': ""Looks like this isn't used after all, remove?"", 'comment_created': datetime.datetime(2023, 6, 2, 20, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1214806776, 'comment_body': 'I guess neither `get_continuous_interpolation` nor `IsDiscontinuous` is used anymore. Remove?', 'comment_created': datetime.datetime(2023, 6, 2, 20, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1214808689, 'comment_body': 'If you end up removing `get_continuous_interpolation`\r\n```suggestion\r\ndirichlet_facedof_indices(ip::DiscontinuousLagrange{shape, order}) where {shape, order} = dirichlet_facedof_indices(Lagrange{shape, order}())\r\n```', 'comment_created': datetime.datetime(2023, 6, 2, 20, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1215138066, 'comment_body': 'Not really.', 'comment_created': datetime.datetime(2023, 6, 3, 2, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1215138619, 'comment_body': '<img src=""https://media.tenor.com/GwZEshiH6jUAAAAM/disappearing.gif"" width=""40"" height=""40"" />\r\n', 'comment_created': datetime.datetime(2023, 6, 3, 2, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1226745995, 'comment_body': 'We do not need to adjust the dofs on shared entities for these elements, because there are no dofs on shared entities in first place.', 'comment_created': datetime.datetime(2023, 6, 12, 14, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1233087655, 'comment_body': 'Should this repeat `vertexdof_indices(ip::Interpolation)` or just refer to it?\r\nI repeated it so it appears in the LSP/IDE tip', 'comment_created': datetime.datetime(2023, 6, 17, 16, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1235291691, 'comment_body': 'I mean the resulting docstring should be a bit different, right? There is overlap because we use the same convention, which (as you already do) should be documented.', 'comment_created': datetime.datetime(2023, 6, 20, 13, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}]","[{'commit_sha': '8cfc3201c8dd2229412c05300f9b27e5dcda6ed0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3efd0e513ae65331795893d04aafc46a2afac2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030df5511e5dcf68fad01f4fe53e5f49aef80978', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a75fafe2de20c68380a47308ac9d44f350b36d19', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9286cf90f6543dc4fb21b3eaa5211563f2556aff', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd17a479236c2980134bf1f1be42d06fc5b7faad7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b059b481fc2ccb87adb467a5731f20b7fa0612c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a8aaa58a9825e9bf3ba74a6bc6c851c65cb7605', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98bbad516b45a058c1075e54f458c1dedc725d11', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc96ce5c31ac79106899b5572e258735e5901be', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b308fce142882d3e92c8fd752dc3881fe04f9bf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852464a6a29f925b13096a9d4b6926ada25ed4ae', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9764ae8162244bf56a6d4aec17af84d461087f75', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b864017835ba743ce11586e8d994186e8ee5f4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdbd430d3bdd620a874c449ba248f32f5f9902f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1351359953,Cross-elements coupling for `DiscontinuousLagrange` sparsity patterns.,"It iterates over all cells twice, once to get the length of I,J and another to fill them. There is probably a better way to estimate their length.
Also, codegen here looks a bit complicated, I'm still learning how to use it.
I think explicit tests for sparsity patterns are missing (they're used inside other tests, but they themselves don't have a standalone test)

Manual tests:
- [x] Test with a single `DiscontinuousLagrange`
- [x] Test with multiple `DiscontinuousLagrange`
- [x] Test with older tests to make sure nothing breaks
- [x] Test with  `DiscontinuousLagrange` and  `Lagrange`
- [x] Test `coupling`

Tasks:
- [x] Write tests
- [x] Code works fine and doesn't break anything. I hope
- [x] Update docs

Things to check:
- [x] `push!` vs size precalculation
- [x] L2 trait

* I think I should stop removing the extra whitespaces :)",True,710,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/710,https://github.com/Ferrite-FEM/Ferrite.jl/pull/710,closed,354,111,7,71,14,44,2,0,"[{'name': 'feature'}, {'name': 'gsoc23'}]",2023-05-15 19:48:53+00:00,2023-07-25 07:56:15+00:00,6091642.0,"70 days, 12:07:22","[{'comment_id': 1195840470, 'comment_body': 'Commenting this makes mixed interpolation symmetric, at least for full coupling for now,\r\n```julia\r\njulia> grid = generate_grid(Line, (3,));\r\n\r\njulia> topology = ExclusiveTopology(grid);\r\n\r\njulia> ip = DiscontinuousLagrange{1, RefCube, 2}();\r\n\r\njulia> ipc = Lagrange{1, RefCube, 1}();\r\n\r\njulia> dh = DofHandler(grid);\r\n\r\njulia> add!(dh, :u, 1,ip);\r\n\r\njulia> add!(dh, :v, 1,ipc);\r\n\r\njulia> close!(dh);;\r\n\r\njulia> K = create_sparsity_pattern(dh, topology = topology, cross_element_full_coupling = true)\r\n13×13 SparseMatrixCSC{Float64, Int64} with 137 stored entries:\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   ⋅    ⋅    ⋅    ⋅\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   ⋅    ⋅    ⋅    ⋅\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   ⋅    ⋅    ⋅    ⋅\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   ⋅    ⋅    ⋅    ⋅\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n  ⋅    ⋅    ⋅    ⋅   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n  ⋅    ⋅    ⋅    ⋅   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n  ⋅    ⋅    ⋅    ⋅   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n  ⋅    ⋅    ⋅    ⋅   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\r\n```\r\nEdit: Only L304 needs to be commented', 'comment_created': datetime.datetime(2023, 5, 17, 1, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1196347063, 'comment_body': 'We might want to think about this type of branching further. I have thought about adding a traits system to the interpolations to mark them e.g. as ""L2-conforming"", so users can add new interpolations (with corresponding dispatches), add the trait and things will just work out of the box. What do you think? cc @fredrikekre ', 'comment_created': datetime.datetime(2023, 5, 17, 11, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1197046000, 'comment_body': 'Yes, something more extensible that `typeof(fi)<:DiscontinuousLagrange` would be to prefer (like traits as already mentioned). Something similar to https://docs.julialang.org/en/v1/manual/interfaces/:\r\n\r\n```\r\nIsDiscontinuous(::Type) = false\r\n...\r\nIsDiscontinuous(::Type{<:DiscontinuousLagrange}) = true\r\n\r\nif IsDiscontinuous(typeof(fi)) ...\r\n```', 'comment_created': datetime.datetime(2023, 5, 17, 20, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KristofferC', 'type': 'User'}, {'comment_id': 1198366348, 'comment_body': ""This function tests for field coupling. I'll work on generalizing it for component coupling."", 'comment_created': datetime.datetime(2023, 5, 18, 22, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1198419618, 'comment_body': 'I would like to propose to dispatch this in the interpolation api via something like `IsDiscontinuous(ip::VectorizedInterpolation) = IsDiscontinuous(ip.ip)`', 'comment_created': datetime.datetime(2023, 5, 19, 0, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1198424974, 'comment_body': '```suggestion\r\nend\r\n\r\n```', 'comment_created': datetime.datetime(2023, 5, 19, 0, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1198436406, 'comment_body': ""Done, thanks!\r\nIt's now dispatched for both variables and types, we can remove one if it can cause confusion."", 'comment_created': datetime.datetime(2023, 5, 19, 0, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1204748157, 'comment_body': 'I think this logic is faulty. Think e.g. about P1P0 elements for Stokes problems. Here the pressure approximation is discontinuous but we do not want to couple the elements. I think the face coupling matrix needs to be an explicit input in our framework, because there is no implicit information in the interpolation when we want to couple between elements.', 'comment_created': datetime.datetime(2023, 5, 24, 20, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1204754605, 'comment_body': '(Read comment below first)\r\n\r\nI think can should just have one more argument for the face coupling here.\r\n\r\nAlso, doc string needs to be updated to clarify the new arguments.', 'comment_created': datetime.datetime(2023, 5, 24, 20, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1204755526, 'comment_body': 'I think we can roll back this file for now.\r\n\r\n`get_continuous_interpolation` is the piece for the other PR, right? Then make sure to cherry pick this into a separate PR.', 'comment_created': datetime.datetime(2023, 5, 24, 21, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1204761035, 'comment_body': 'Also marking this line as a reminder to check if this is a proper fix for https://github.com/Ferrite-FEM/Ferrite.jl/issues/728', 'comment_created': datetime.datetime(2023, 5, 24, 21, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1204795373, 'comment_body': 'I was also going to comment about this. Perhaps, if you request cross element couplings, a reasonable default is to couple discontinuous elements?', 'comment_created': datetime.datetime(2023, 5, 24, 21, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1206978856, 'comment_body': ""I don't think this one has to do with fixing #728, as it doesn't affect this PR (having inclusive topology doesn't break it)\r\nI proposed a potential fix in #728 comments."", 'comment_created': datetime.datetime(2023, 5, 26, 15, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1206980741, 'comment_body': 'Indeed, but `IsDiscontinuous` is still needed here', 'comment_created': datetime.datetime(2023, 5, 26, 15, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1211418247, 'comment_body': ""I did some edits for this, now there are 2 coupling matrices. Elements coupling defaults to no coupling while same-cell coupling defaults to full coupling as it used to. Elements coupling also requires interpolation to be discontinuous to be coupled.\r\nI'll look into the resulting matrices to make sure I haven't messed something. Thanks!"", 'comment_created': datetime.datetime(2023, 5, 31, 9, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1221706604, 'comment_body': ""I'm not sure but the test looks like it's just repeating the implementation in a less optimized way. I'm thinking of a way to automate it."", 'comment_created': datetime.datetime(2023, 6, 7, 14, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1221708252, 'comment_body': 'Indeed. Unit tests should never mirror internals, but check for simple invariants.', 'comment_created': datetime.datetime(2023, 6, 7, 14, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1231164015, 'comment_body': ""I think this now acts like the other tests but somewhat automated * and hopefully doesn't mirror internals *"", 'comment_created': datetime.datetime(2023, 6, 15, 15, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1231164134, 'comment_body': ""I'm testing something that'll probably eliminate the need of these matrices. \r\n"", 'comment_created': datetime.datetime(2023, 6, 15, 15, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1231169606, 'comment_body': 'Why not use `celldofs` instead of `dh.cell_dofs`?', 'comment_created': datetime.datetime(2023, 6, 15, 15, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1231177097, 'comment_body': 'Missed it, will change it with next push. 😄 ', 'comment_created': datetime.datetime(2023, 6, 15, 15, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1231180545, 'comment_body': 'Yes, you can eliminate these and get the information directly from the dof handler+`couplings` above.', 'comment_created': datetime.datetime(2023, 6, 15, 15, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1231187033, 'comment_body': 'Indeed, but vectorized interpolation will probably need an extra variable to store what dim to use.', 'comment_created': datetime.datetime(2023, 6, 15, 15, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252786324, 'comment_body': 'Needs something like\r\n```suggestion\r\n        has_discontinuous_ip = has_discontinuous_ip || any(ip -> is_discontinuous(ip),sdh.field_interpolations)\r\n```\r\notherwise it will be reset for every new subdofhandler.', 'comment_created': datetime.datetime(2023, 7, 5, 8, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252789747, 'comment_body': '```suggestion\r\n    # Add cross element couplings if there are discontinuous interpolations\r\n    if has_discontinuous_ip && !isnothing(elements_coupling) && any(elements_coupling)\r\n        cnt = cross_element_coupling!(dh,topology,sym, keep_constrained, elements_couplings, cnt, I, J)\r\n    end\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252794396, 'comment_body': '```suggestion\r\n        for (cell_field_i, cell_field) in pairs(sdh.field_names)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252802671, 'comment_body': 'You can/should loop directly over the cellset associated with this subdofhandler:\r\n```suggestion\r\n            for cell_idx in BitSet(sdh.cellset)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252803743, 'comment_body': '```suggestion\r\n                    for (neighbor_field_i, neighbor_field) in pairs(sdh.field_names)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252818861, 'comment_body': 'You can probably use CellCaches here (instead of the view):\r\n```\r\ncc1 = CellCache(dh)\r\ncc2 = CellCache(dh)\r\n\r\nreinit!(cc1, cell_idx)\r\nreinit!(cc2, neighbor_cell)\r\n```\r\netc', 'comment_created': datetime.datetime(2023, 7, 5, 9, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252820244, 'comment_body': 'So just to be clear, coupling is added only if the neighbor interpolation is also discontinuous? I think maybe we even warn in DofHandler construction now if all interpolations for a field don\'t belong to the same ""family"".', 'comment_created': datetime.datetime(2023, 7, 5, 9, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252821843, 'comment_body': ""Don't think this needs to be exported, and I don't think you need it internally either, use CellCache (possibly with more fine grained update flags to only update the dofs)."", 'comment_created': datetime.datetime(2023, 7, 5, 9, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252822823, 'comment_body': 'Can canonicalize the answers like so:\r\n```suggestion\r\nis_discontinuous(ip::Interpolation) = is_discontinuous(typeof(ip))\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252823059, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252823767, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252825181, 'comment_body': '```suggestion\r\nis_discontinuous(::Type{<:VectorizedInterpolation{<:Any, <:Any, <:Any, ip}}) where {ip} = is_discontinuous(ip)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252830919, 'comment_body': 'Can you clarify how one opt-in to getting cross element couplings now. Do you need to pass `elements_coupling` *and* topology?', 'comment_created': datetime.datetime(2023, 7, 5, 9, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1253024551, 'comment_body': 'You mean I should implement this : https://github.com/Ferrite-FEM/Ferrite.jl/blob/ccd0e71570993ee91c3adaa4ab97569f21a476e1/src/Dofs/DofHandler.jl#L231 ? If so, check for same interpolation or check for same family?', 'comment_created': datetime.datetime(2023, 7, 5, 12, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1253027676, 'comment_body': ""No you don't have to do that, not in this PR. I just meant that if we add that check then this should be fine, because then `:u` must always be discontinuous"", 'comment_created': datetime.datetime(2023, 7, 5, 12, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1253028684, 'comment_body': '(I think the interpolation type (Lagrange, DiscontinuousLagrange, ...), and the order, should be checked, but refshape might differ).', 'comment_created': datetime.datetime(2023, 7, 5, 12, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1253360286, 'comment_body': ""I think we can do it but not sure if should (would require more changes for coupling different fields on different subdofhandlers), the idea here is iterating over all cells that have a field.\r\nFor example, full coupling with the test:\r\n```julia\r\n    dh = DofHandler(grid)\r\n    sdh1 = SubDofHandler(dh, Set(1))\r\n    add!(sdh1, :u, DiscontinuousLagrange{RefQuadrilateral,1}()^2)\r\n    add!(sdh1, :y, DiscontinuousLagrange{RefQuadrilateral,1}())\r\n    add!(sdh1, :p, Lagrange{RefQuadrilateral,1}())\r\n    sdh2 = SubDofHandler(dh, Set(2))\r\n    add!(sdh2, :u, DiscontinuousLagrange{RefQuadrilateral,1}()^2)\r\n    close!(dh)\r\n```\r\n Would fail because the second subdofhandler doesn't have `:y` field, thus it won't couple `:u` with `:y` for second cell dofs\r\n would result in:\r\n ```julia\r\n ⎡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎤\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⎥\r\n⎢⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⎥\r\n⎣⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⎦\r\n```\r\nwhile the current implementation results in:\r\n```julia\r\n⎡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎤\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\r\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⎥\r\n⎢⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⣿⣿⎥\r\n⎣⣿⣿⣿⣿⣿⣿⠀⠀⣿⣿⣿⣿⎦\r\n```\r\nNotice some couplings are missing.\r\nPlease correct me if I'm wrong/they shouldn't be coupled.\r\nEdit: or repeat the adding part like in the last commit, it doesn't seem to improve performance, although if we don't use BitSet it improves a bit (at least for the small cases I tested)"", 'comment_created': datetime.datetime(2023, 7, 5, 16, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1255850173, 'comment_body': 'I am not sure I follow, sorry, can you post the full code for producing those two patterns so I can play around a bit? Is the problem that you only add the dofs in one ""direction"" when looping over the cells?', 'comment_created': datetime.datetime(2023, 7, 7, 13, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1255867254, 'comment_body': 'Yes, the problem is that the code added dofs in one direction, so if one cell has more fields than its neighbor they will be coupled in one direction only. This was mitigated by:\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/bb16acbee3f77d283a5864788dc54cdf75c4b863/src/Dofs/sparsity_pattern.jl#L110-L122\r\n\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/bb16acbee3f77d283a5864788dc54cdf75c4b863/src/Dofs/sparsity_pattern.jl#L161-L164\r\n\r\nIn the last commits, so we add once in each direction.\r\nFor the full code IIRC:\r\n```julia\r\ngrid = generate_grid(Quadrilateral, (2, 1))\r\ntopology = ExclusiveTopology(grid)\r\n\r\ndh = DofHandler(grid)\r\nsdh1 = SubDofHandler(dh, Set(1))\r\nadd!(sdh1, :u, DiscontinuousLagrange{RefQuadrilateral,1}()^2)\r\nadd!(sdh1, :y, DiscontinuousLagrange{RefQuadrilateral,1}())\r\nadd!(sdh1, :p, Lagrange{RefQuadrilateral,1}())\r\nsdh2 = SubDofHandler(dh, Set(2))\r\nadd!(sdh2, :u, DiscontinuousLagrange{RefQuadrilateral,1}()^2)\r\nclose!(dh)\r\n\r\ncreate_sparsity_pattern(dh; topology = topology, elements_coupling = trues(3,3))\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 13, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1255886115, 'comment_body': 'Okay, so right now we add in both directions for every cell then?', 'comment_created': datetime.datetime(2023, 7, 7, 14, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1255896872, 'comment_body': 'indeed', 'comment_created': datetime.datetime(2023, 7, 7, 14, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': '3b74b2ea0e102e3d4b1a1851f98af147284f7d4d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453ed62221fb3a84e33e89fd51c09e40e9f3c32b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '842480592d4458c72e88c46a0d7e172582768ccf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '941d1b73ed3d0dabaf8ec9eca22715c9dbb8e5b6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '945c87af4c0add91910a3af5eb3751e8f2bf2ff2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd98ba702826734231ea48d8af42cdeaa9969120c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d26fbc79dbe35bcb87ac4b109e1990f7d01f0f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddba70c060c9cb9a28b501b70a02903cc3d116a7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac20866a6e446a8c881f85cab8d9d3fab9d1ce20', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae11a0135dab23177ace39ce3d17b8701b91e151', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '788317ac9357f053d0914cb886669c8d893ec99d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da9c44b1ba4daadcf0d76ce0eea94da3cc19084e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c76b6fd1893e257e1654c0fcc5a25d9785bef8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dfd6b2fdcab1fd1653c2c8c0ba582f0fc609679', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '072c6f760e2f142c26cd88fe50749b2c6ffa43d7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37618289867ff7fb8a87e95b0b5f2020cf835fe6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be7fac62dcb6545864108b907beca77037a388b8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de25a472f476dc4906aae37083697ba356c78aa', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd953555c3923bcb74d721d5e6d1c17bd77e1146', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c0baa25f0417cee091f59bfbdbf06e1da563cb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695fa16b7932b765834e8e81ca68147653a2270d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb8ff3f63610d274dcffd098cdda2d759d6293ae', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '779d3959b1f48c8f9bc627b811b2e7d03c7e817d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f64cb23d96285a5445d6375e5c8e0c97fe600ca7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76ff5ab07136490f283b0775c61e36f498b2db78', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c421f30987166959f6b0c46febd3ac2b6e1165c2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd75e9cc1f21882ec71e503014aa40376d7e866d7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cbd306cdd6b4e485bde34ac2fcf28aeba208c45', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db3cba843fd617693dff35081642b6818eb5990c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9bf93b79997364e7765c2190d2f9c668ae750bd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '462abca52f244257fd670c2745efe634fea5f8d4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0962158f86bc44845c31a2a5b5f80b637263b730', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '671493ad17a6f679af05db4b4680817844259e2d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a3c409c6243d32fb23e9bfb23fc1165be6d6861', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a44ba2d7ac0b46c0cf59fac9127f252ae97f9d0c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc790e646b997a9318eb911f1a0d4b09e396330', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7b880d317336ac1e6c75851c52725e3a2a72835', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db675e0a1a5d14fb3db26690dd81790e5a53ce13', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbf319c58b132148f827406f8f4a0093f8ff3664', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c766b01837134aefa59675998646e9e122e9ece', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4bf5720af04c0ddf26b1c8eed7ed3ce5087320f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe184fcb1bc0eeed10f70bcba1e78242b55f891', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a5db3db909375b5e3c384746557581d8abd33d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eda8d7b41bcb0efbf6f3dd4994f432ab8885d82', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bb299a7369d1fdd762f469e9dfdac4a74a018d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1501115797599d73d2ebb89c60d79fda0ee8f58', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b65a4691afc6141d226ec27cea1b2df41b9391fb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d1c6c4fd02e51188e691ef2d992e6cd4095e35b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24ebc14f520d4fef44296788490f28b313475927', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ef8323ff96fe31787e6e1c0ab89c0c9bbf3ac1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e86c90491d9e1a9473e9805657beb400d2febab', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b27e646ea7b98f454e5eb7759c98822924ccbadb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '153947633f7a98d08a0e641dc4b31cdbae4ccb49', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b719411c8b4e90c020a8c617e339356d4796a663', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd0e71570993ee91c3adaa4ab97569f21a476e1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a7425e992335a51887ff92a7b04f2e845090ef', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e340122aa12f5224e57a09e3a7f3c3d537f9d46', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9649beadd27c60692cdfb283bd5a881cd3ada54f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1bd454da8b6ff15eadfe03f00ba6abfb0c56bc3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa9d642627d448b99be77a850476760b0564991', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28d907a5c7773bb7c47aa019b02e6144bccc4686', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d87f9f09e22841889b7f97fcf69f71b4ddb7e47', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb16acbee3f77d283a5864788dc54cdf75c4b863', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e4a07a8b8b8845d07270f5f0e2a8c648f94e50a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '073e29de49c60082e3d37b04de3d04aa4368190a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d8018e96909f98d0902d5e3a935d70b97ec303e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1130709880da9c644df3c5b485003d953ec3e511', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f93c311bb3f35a3d1bd1fe45f1605d783879b0a4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aaada19bbf8b0b9f34b79561718d9000d6cde3f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a72dbb940765e125cf5aaa146418ba1dfef909b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536249d37d3d8db557d01411401b111f6ce7a9bc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1403534950,`InterfaceCache` & `InterfaceIterator`,"Used to be in #743 , now its own PR.

Tasks: 
- [x] `InterfaceCache`
- [x] `InterfaceIterator`
- [ ] docs
- [x] tests",True,747,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/747,https://github.com/Ferrite-FEM/Ferrite.jl/pull/747,closed,153,18,4,62,5,26,2,0,"[{'name': 'feature'}, {'name': 'gsoc23'}]",2023-06-22 13:33:14+00:00,2023-07-19 15:36:53+00:00,2340219.0,"27 days, 2:03:39","[{'comment_id': 1260391600, 'comment_body': 'What do you think these should be like? \r\n+ reminder missing docs.', 'comment_created': datetime.datetime(2023, 7, 11, 23, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1260392425, 'comment_body': 'Ref #759', 'comment_created': datetime.datetime(2023, 7, 11, 23, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1260396349, 'comment_body': 'The set here is [Tuple([FaceIndex(cell_a, face_a), FaceIndex(cell_b, face_b)])...].\r\nI think user can obtain it using faceset + topology.face_face_neighbor. and it\'s probably more consistent with how `FaceCache` uses `Set{FaceIndex}`. If you\'re ok with this approach I can document it.\r\nNote that it does not check if the user passes ""bad"" faceindex (not neighbors?). the check happens when reiniting interfacevalues IIRC', 'comment_created': datetime.datetime(2023, 7, 11, 23, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1260397210, 'comment_body': 'This should work with #743 ', 'comment_created': datetime.datetime(2023, 7, 11, 23, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1260981619, 'comment_body': 'How does this differ from faceskeleton?', 'comment_created': datetime.datetime(2023, 7, 12, 10, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1261001807, 'comment_body': 'I think we should cache the union of the dofs here, it will be expensive to do the `vcat` inside `interfacedofs(...)`:\r\n```suggestion\r\nstruct InterfaceCache{FC<:FaceCache}\r\n    face_a::FC\r\n    face_b::FC\r\n    dofs::Vector{Int}\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 11, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261005059, 'comment_body': 'Perhaps the way to use this would be through `getnodes(ic.a)` and `getnodes(ic.b)` instead?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261006004, 'comment_body': '```suggestion\r\n    return InterfaceCache(face_a, face_b, Int[])\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 11, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261008485, 'comment_body': '```suggestion\r\n    reinit!(cache.face_b, face_b)\r\n    resize!(cache.dofs, length(face_a.dofs) + length(face_b.dofs))\r\n    for (i, d) in pairs(face_a.dofs)\r\n        cache.dofs[i] = d\r\n    end\r\n    for (i, d) in pairs(face_b.dofs)\r\n        cache.dofs[i + length(face_a.dofs)] = d\r\n    end\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 11, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261009423, 'comment_body': 'Maybe remove in favor of `getnodes(ic.a)` and `getnodes(ic.b)`?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261010045, 'comment_body': 'Same thing here; `get_cell_coordinates(ic.a)` and `get_cell_coordinates(ic.b)`?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261010411, 'comment_body': 'and here (`cellid(ic.a)` and `cellid(ic.b)`)?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261010560, 'comment_body': '```suggestion\r\ninterfacedofs(ic::InterfaceCache) = ic.dofs\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 11, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261011270, 'comment_body': 'What is the indended use for this?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261013589, 'comment_body': 'With the other suggestions, perhaps call these\r\n```suggestion\r\n    a::FC\r\n    b::FC\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 7, 12, 11, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261019469, 'comment_body': ""Perhaps the set functionality doesn't need to be here and we loop over all of them? You can always skip elements inside the loop:\r\n```julia\r\nfor ic in InterfaceIterator(...)\r\n    if some_condition(ic)\r\n        continue\r\n    end\r\n    # do stuff\r\nend\r\n```"", 'comment_created': datetime.datetime(2023, 7, 12, 11, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261123182, 'comment_body': 'Can be used for \r\n```julia\r\nfunction_(value|gradient|...)(iv::InterfaceValues, qp::Int, ue::Vector{Float64}, dof_range_a::UnitRange, dof_range_b::UnitRange)\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 7, 12, 12, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1261138448, 'comment_body': ""It's face skeleton - boundary faces\r\nWas thinking maybe we can buffer this while constructing face skeleton if it's more efficient."", 'comment_created': datetime.datetime(2023, 7, 12, 12, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1261138916, 'comment_body': 'Hmm, but the dof ranges there would be dof ranges for the fields within each ""interface dofrange"", i.e. to select the u-dofs if you have both u and p.', 'comment_created': datetime.datetime(2023, 7, 12, 12, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1261189529, 'comment_body': 'Btw, should set be changed to a vector/Array as its size is already known and the elements are unique? It may have better performance IIUC', 'comment_created': datetime.datetime(2023, 7, 12, 13, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1261459612, 'comment_body': ""Doing \r\n```julia\r\njulia> grid = generate_grid(Hexahedron,(100,100,100))\r\nGrid{3, Hexahedron, Float64} with 1000000 Hexahedron cells and 1030301 nodes\r\n\r\njulia> using BenchmarkTools\r\n\r\njulia> topology = ExclusiveTopology(grid);\r\n\r\njulia> @benchmark InterfaceIterator(grid, topology)\r\n```\r\nUsing set:\r\n```julia\r\njulia> @benchmark InterfaceIterator(grid, topology)\r\nBenchmarkTools.Trial: 9 samples with 1 evaluation.\r\n Range (min … max):  502.982 ms … 706.988 ms  ┊ GC (min … max): 0.00% … 25.69%\r\n Time  (median):     598.487 ms               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   597.327 ms ±  56.248 ms  ┊ GC (mean ± σ):  3.38% ±  8.56%\r\n\r\n  ▁               ▁     █     ▁▁  ▁       ▁                   ▁  \r\n  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁█▁▁▁▁▁██▁▁█▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁\r\n  503 ms           Histogram: frequency by time          707 ms <\r\n\r\n Memory estimate: 354.64 MiB, allocs estimate: 21.\r\n ```\r\n Using Vector:\r\n ```julia\r\n julia> @benchmark InterfaceIterator(grid, topology)\r\nBenchmarkTools.Trial: 40 samples with 1 evaluation.\r\n Range (min … max):  108.250 ms … 277.395 ms  ┊ GC (min … max): 0.00% … 55.66%\r\n Time  (median):     120.271 ms               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   126.711 ms ±  25.340 ms  ┊ GC (mean ± σ):  3.05% ±  8.80%\r\n\r\n     ▃█                                                          \r\n  ▃▁▃██▇▄▃▃▄▃▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃ ▁\r\n  108 ms           Histogram: frequency by time          277 ms <\r\n\r\n Memory estimate: 90.64 MiB, allocs estimate: 14.\r\n```\r\n I think it can be even better if we store a topology reference in `InerfaceIterator` and skip boundary faces when iterating so we (probably?) don't allocate. What do you think?"", 'comment_created': datetime.datetime(2023, 7, 12, 16, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1262264963, 'comment_body': '```suggestion\r\n    InterfaceCache(grid::Grid)\r\n    InterfaceCache(dh::AbstractDofHandler)\r\n\r\nCreate a cache object with pre-allocated memory for the nodes, coordinates, and dofs of an\r\ninterface. The cache is updated for a new cell by calling `reinit!(cache, face_a, face_b)` where\r\n`face_a::FaceIndex` and `face_b::FaceIndex` are the two interface faces.\r\n\r\n**Struct fields of `InterfaceCache`**\r\n - `ic.a :: FaceCache`: face cache for the first face of the interface\r\n - `ic.b :: FaceCache`: face cache for the second face of the interface\r\n - `ic.dofs :: Vector{Int}`: global dof ids for the interface (union of `ic.a.dofs` and `ic.b.dofs`)\r\n\r\n**Methods with `InterfaceCache`**\r\n - `reinit!(cache::InterfaceCache, face_a::FaceIndex, face_b::FaceIndex)`: reinitialize the cache for a new interface\r\n - `interfacedofs(ic)`: get the global dof ids of the interface\r\n \r\nSee also [`InterfaceIterator`](@ref).\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 9, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1262266920, 'comment_body': '```suggestion\r\n    InterfaceIterator(grid::Grid, [topology::ExclusiveTopology])\r\n    InterfaceIterator(dh::AbstractDofHandler, [topology::ExclusiveTopology])\r\n    \r\nCreate an `InterfaceIterator` to conveniently iterate over all the interfaces in a\r\ngrid. The elements of the iterator are [`InterfaceCache`](@ref)s which are properly\r\n`reinit!`ialized. See [`InterfaceCache`](@ref) for more details.\r\nLooping over an `InterfaceIterator`, i.e.:\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 9, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1266411940, 'comment_body': ""Doesn't seem included in this PR\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 7, 18, 8, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1266816473, 'comment_body': ""I wonder if this can be done lazily. There doesn't seem to be a need to materialize the set here, right? Just loop over all of them and skip the ones which doesn't have a neighbor"", 'comment_created': datetime.datetime(2023, 7, 18, 13, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1267573318, 'comment_body': 'Like this?\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/7fe9140555b73137afbdd7188b808d1c468d98df/src/iterators.jl#L341-L371', 'comment_created': datetime.datetime(2023, 7, 19, 5, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': '000eab44a28bed4aa7fe05299ad1d9527414aef0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d1c0e03e3bba0b23472cd815ecd665220fdf6e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5568746ce59c6f3c1d9edd122b7ed0520d1f2dc8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa236b37798bc524edd2e937d3f4c6055e8c3c8b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4754f2effe2e52844980111dc0f537a0363a211', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69b2cd434b36b89f23d468da381302da2488fe1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edfa09c75f4403d7c115a018a3b5ee584f9a9658', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06dc9e215ffee88e5964976bdf02ef5225c24d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4889e2f29f9f4ba50ad1e5067576ddf0b9a45ae', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3afb9623e4bf75117f24ad8c994bd0bb6f0ff2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60573db45ab4cca4c4b065603b4fb252d7816e7b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e81b66fdc94b0770aee7ea9f76e92efa10fc7cd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0065423731d996b60fb6866e5840e56d39daf8c2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a530f760a1029a349f24768d8571357f7fb222', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a842a3acb5dab755929b1e852b152bd995dd52', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e03b2a0dd1f6a3efb60a9a87ea5af26abdc1a3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b1f495e87c94432dd7a8f09113fd6c150b496e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09fa6bd448dda4a439f23bc20c74a065ad5bd255', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bb40ffec967b606e017ebd7100daf50f865f40', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '698874a887cbdcd58ea1438178ebb08bff4543f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e75325ece719b5c554f767a2907d0f03f75c31', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e3429f43fb6c6b07291acf7806ce9b66b6e73a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb5ddf52f49552d94d555d220e87274bdf85874', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bf804536287df1eefc35039ac774dae69e23b8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d59a7500b6e25efde25df120ae588865cb068e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c60a0b6d8b27457da99c56e6cc4819ca74e7f19', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de83a50e78fe878218f0508bc92319836cb09582', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfce1b1c084592eb9e082ec795cabfefdb89139', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10cf989c45306a54372eec3608a247f471112c0f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b86e289d4256d296b85d24490b8a702cd6fbcae3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34d72de0d68e288600d54482cd1e6567e15a6e98', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c03c787cb7d25bb8915e56197e41f2d98e95f360', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6324a83d26c5fdc1901f119ba3e7c7fd3fd496', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f6a397b719795475992e0365a5b4046d1b2c39', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef539491f7a0b51c4864cca8d72d963a7c01823b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd221888ba92450981ef21e9c31aa27e20f929523', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce68077060c9c56c5ab7c18b3409d5616b850cf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beae06b47829f8e8e5eb9b739832ab3a9126e7b3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ff108b8a419b8ed9facb887f84477e27df968f0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ce3ca98ade249db6a252b4c9919af71de154337', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df52eaae4ab309bdf2e1187937151a6933cf01a7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '655e19415e85d4d9b7fafc28f49eadafd04d3f0d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec49edcd1d76be7c1a8e9582c02929aca120437f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '633e74b550b87caec2890d81c2209c9cb0430458', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ddde212ff6c7a9648b92b4b1925e4dccc9795e5', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e907e81ad0e960a3dbcb135e90a0f8198829cb81', 'committer_username': 'termi-official', 'committer_name': 'Dennis Ogiermann', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 13, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f313630b0699266a1f47284c55fc17151fec7980', 'committer_username': 'termi-official', 'committer_name': 'Dennis Ogiermann', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 13, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157222bdc53dba9a59123b96aa306d5aff532ce7', 'committer_username': 'lijas', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2013, 6, 12, 13, 34, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b9ffcfa510b774d9ad831cfb4a78964e22b5a6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaa80d1e0a95150b8f1482ebd5c11ca46b09df0', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5f1e4d2965f17160f9699adfe701fce20bd813', 'committer_username': 'termi-official', 'committer_name': 'Dennis Ogiermann', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 13, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca2a4a5673d9b6db7ff161888e24e9b4abc09d2b', 'committer_username': 'termi-official', 'committer_name': 'Dennis Ogiermann', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 13, 12, 45, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cec9ad2f63a847ecc8fbaa885ea985ee3ea2fd9', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c35006214148399f476901507e026ceb5208e0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07727d92edff1b090ad03824941bf991ada185e4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00be76ad04bcb938ccf2f574b8b0c82c9f314000', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '164141b4ba31de99eec61cc63dbf86d9209e4acc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5c6a9a6c1b8b082d00b992a9ea30787819f18a0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e285174e1895417892be1a2459c6035a7aea2fe', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76e429a62186b907ee0f9f23bdcc9f9b76fc2413', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b155e8c0f35c6fcbd7a035e6fbbb2dec522f6fad', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe9140555b73137afbdd7188b808d1c468d98df', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1413335271,Make benchmarks work with master branch,"Relates to #722
Main changes are:

- `(Cell/Face)(Scalar/Vector)Values` -> `(Cell/Face)Values` 
- Remove `spatial_dim` from interpolations
- Using `FaceQuadratureRule` for `FaceValues`
- `(Cell/Face)Values{dim,T,refshape}` -> `(Cell/Face)Values{<: Ferrite.InterpolationByDim{dim}}`
- FieldHandler -> SubDofHandler",True,751,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/751,https://github.com/Ferrite-FEM/Ferrite.jl/pull/751,closed,37,38,4,4,3,15,2,0,"[{'name': 'bugfix'}, {'name': 'gsoc23'}]",2023-06-29 13:22:46+00:00,2023-07-04 13:33:43+00:00,432657.0,"5 days, 0:10:57","[{'comment_id': 1246634707, 'comment_body': 'Can you open an issue after we merge this with a small description of the issue here? Because I think this currently only tests Lagrange order 1 on Quad and Hex (which seems like a weird restriction)', 'comment_created': datetime.datetime(2023, 6, 29, 13, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1246638286, 'comment_body': 'I think it tests Serendipity order >=2 (but currently 2 because of `for order in 1:2`)on Quad and Hex, the idea is that these are the two Serendipity implemented and the only order implemented is 2', 'comment_created': datetime.datetime(2023, 6, 29, 13, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1246750411, 'comment_body': 'Oh, right, not sure how I missed this. :D ', 'comment_created': datetime.datetime(2023, 6, 29, 15, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1251157513, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 17, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1251161090, 'comment_body': '`Ferrite.value` is deprecated', 'comment_created': datetime.datetime(2023, 7, 3, 17, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1251161824, 'comment_body': 'We can eliminate this hack with the new interface (because the reshape is now part of the cell definition).', 'comment_created': datetime.datetime(2023, 7, 3, 18, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1251396755, 'comment_body': ""I was thinking we can do `geo_type.super.parameters[1]`, use `getcells`, or dispatch `getrefshape` for cell types\r\nDid `geo_type.super.parameters[1]` for now not to use unnecessary calls or add new functionality if it's only used here, what do you think?"", 'comment_created': datetime.datetime(2023, 7, 4, 2, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1251847923, 'comment_body': 'Why is this duplicated?', 'comment_created': datetime.datetime(2023, 7, 4, 10, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251852887, 'comment_body': 'I would add a helper method for this, `getrefshape(::Type{T}) where {refshape, T <: AbstractCell{refshape}} = refshape`.', 'comment_created': datetime.datetime(2023, 7, 4, 10, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251853137, 'comment_body': 'Use the helper here.', 'comment_created': datetime.datetime(2023, 7, 4, 10, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251853189, 'comment_body': 'Use the helper here.', 'comment_created': datetime.datetime(2023, 7, 4, 10, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251854850, 'comment_body': '```suggestion\r\nfunction _generalized_ritz_galerkin_assemble_local_matrix(grid::Ferrite.AbstractGrid, cellvalues::CellValues, f_shape, f_test, op)\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 10, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251901165, 'comment_body': '```suggestion\r\nfunction _generalized_ritz_galerkin_assemble_local_matrix(grid::Ferrite.AbstractGrid, facevalues::FaceValues, f_shape, f_test, op)\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 11, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251903034, 'comment_body': '```suggestion\r\nfunction _generalized_petrov_galerkin_assemble_local_matrix(grid::Ferrite.AbstractGrid, facevalues_shape::FaceValues{<: Ferrite.InterpolationByDim{dim}}, f_shape, facevalues_test::FaceValues, f_test, op)\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 11, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1251919052, 'comment_body': ""Ah sorry, didn't notice it."", 'comment_created': datetime.datetime(2023, 7, 4, 11, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': 'd45787ed4a68468a7063e4b14d63facf83ec5504', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcf0166258e8d1ef4ca39b949c781085bf6ee830', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b008438aaac0281352cf22f32619f2875e604bb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e52957bac59029ae10e187516705cd2033b0dbc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1397258858,`InterfaceValues` for DG interface integration,"Tasks:

- [x] `InterfaceValues`
- [x] syncing/transforming quadrature points
- [x] docs
- [x] tests


##  After merge

* [x] open issue to discuss mixed grid support for `InterfaceValues`
* [ ] check subdomain support and possibly open issue
* [ ] open issue about the investigation of mortaring with the new infrastructure",True,743,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/743,https://github.com/Ferrite-FEM/Ferrite.jl/pull/743,closed,1190,45,18,158,18,157,2,0,"[{'name': 'feature'}, {'name': 'gsoc23'}]",2023-06-18 19:53:03+00:00,2023-12-03 02:39:38+00:00,14453195.0,"167 days, 6:46:35","[{'comment_id': 1233861170, 'comment_body': ""Just noticed this one (haven't looked at the rest of the code), but why is this one doubled? Presumably the idea is that both facevalues share a quadrature rule?"", 'comment_created': datetime.datetime(2023, 6, 19, 10, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1233863190, 'comment_body': ""I fixed it locally but I don't want to push not to rerun CI 😄 I was doubling nbasefunctions and did this by mistake"", 'comment_created': datetime.datetime(2023, 6, 19, 10, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234893913, 'comment_body': 'Although this case is more complicated, you could potentially re-use some of the re-use from `CellCache` as done in #495 ', 'comment_created': datetime.datetime(2023, 6, 20, 8, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1234901375, 'comment_body': 'Sure, thanks!', 'comment_created': datetime.datetime(2023, 6, 20, 8, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234912925, 'comment_body': 'So if I revert to `InterfaceCache`/`InterfaceIterator` should I revert this also or let `FaceValues` be initialized by `InterfaceCache`?\r\n@KnutAM ', 'comment_created': datetime.datetime(2023, 6, 20, 8, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234913063, 'comment_body': ""If it's only for interfaces then we may want to exclude the boundary faces from within the iterator?\r\n```julia\r\nif set === nothing\r\n  set = findall(face -> !isempty(topology.face_neighbor[face[1],face[2]]),topology.face_skeleton)\r\nend\r\n```"", 'comment_created': datetime.datetime(2023, 6, 20, 8, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234948481, 'comment_body': 'As I understand, only the second method would be needed. If we want a nice way to iterate over single faces, we could do something like in #495 (and in combination with the current PR, the iterator interface would have even more code reuse). \r\n', 'comment_created': datetime.datetime(2023, 6, 20, 8, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1239755299, 'comment_body': 'These would be moved to `InterfaceCache` in the other PR.', 'comment_created': datetime.datetime(2023, 6, 23, 12, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239762078, 'comment_body': ""This one is the same as in `copy` test for `FaceValues` but doesn't work. * Pointers are different, values are the same*"", 'comment_created': datetime.datetime(2023, 6, 23, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239762343, 'comment_body': ""This isn't used for now."", 'comment_created': datetime.datetime(2023, 6, 23, 12, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239792838, 'comment_body': 'Maybe this is also a good oppurtunity to merge the different orientation interfaces.', 'comment_created': datetime.datetime(2023, 6, 23, 13, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1239803476, 'comment_body': ""I'm not sure yet how to use this information to sync quadrature points, however, they're currently synced by matching spatial coordinates"", 'comment_created': datetime.datetime(2023, 6, 23, 13, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239821318, 'comment_body': 'Note that this method can fail (I literally debugged a similar an issue yesterday).\r\n\r\nFor each face you can find 2 affine transformations (fully in reference space). Element 1 -> Face and Face -> Element 2 (as well as the ""inverse"" mappings). This way the quadrature point on the face of element 1 can be transferred to element 2 by applying both transformations. If noone made touchy-touchy to the face and node definitions recently then you can derive the 3D version from this code https://github.com/Ferrite-FEM/FerriteViz.jl/blob/c5b812eb31786525dd5d2ef3779f39fd9550492a/src/utils.jl#L552-L574 , which is exactly the transformation from face to element I talked about.\r\n\r\nEdit: Note that this is just a part of what you have to to, because it does not deal with the mismatch in relative orientation of the face and the element\'s local face.', 'comment_created': datetime.datetime(2023, 6, 23, 13, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1239850698, 'comment_body': ""You're talking about matching coordinates, right?\r\nI'm using the 3D coordinates in \r\nhttps://github.com/AbdAlazezAhmed/Ferrite.jl/blob/c28f0b2ebc213caf2c8b7a30845ccdb11cc7ffd7/src/FEValues/interface_values.jl#L149-L156\r\nto get the quadrature point index and use it if we're evaluating using the neighbor facevalues"", 'comment_created': datetime.datetime(2023, 6, 23, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239853628, 'comment_body': 'Yes. And if you go from element (e.g. 3D) to the face (e.g. 2D) and again to the element (e.g. 3D again), then you still have 3D coordinates.', 'comment_created': datetime.datetime(2023, 6, 23, 13, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1241317626, 'comment_body': ""If this passes I assume the transformation is working * I see it failed for 1.6, will check it. It passed locally 1.8*. How do you suggest using it? I was thinking of mutating the neighbor's `FaceValues` `qr.points` and recalculating `fv.M` when reinitializing the interface.\r\nEdit : It fails 1.6 because of swapping in array"", 'comment_created': datetime.datetime(2023, 6, 25, 23, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1242280499, 'comment_body': ""Turns out it's because not all faces are reinited (only interfaces) there are NaNs which breaks ==\r\nThis test is already covered in facevalues anyways."", 'comment_created': datetime.datetime(2023, 6, 26, 14, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1243438892, 'comment_body': 'As @fredrikekre and @termi-official  pointed out, [some use the definition with normals ](https://www.researchgate.net/publication/211746421_Unified_Analysis_of_Discontinuous_Galerkin_Methods_for_Elliptic_Problems)and [some use (here - there) definition](https://onlinelibrary.wiley.com/doi/pdf/10.1002/nme.1667). This implements both and defaults to using normals.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1243693619, 'comment_body': 'Docs incomplete: Explain what `here` is. We might also find a more descriptive variable name for this.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243695084, 'comment_body': 'Docs incomplete: Clarify what is the difference between `coords` and `ncoords`, as well as `f` and `nf`.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243698275, 'comment_body': 'Is the implementation missing?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243703071, 'comment_body': 'Maybe separate out the docstring.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243705145, 'comment_body': 'Why do we need `dof_range` here? Also, note the possible name collision with the function.\r\n\r\nDocstring for `here`', 'comment_created': datetime.datetime(2023, 6, 27, 13, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243705927, 'comment_body': 'style\r\n```suggestion\r\nfunction function_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector, dof_range = eachindex(u); here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243706852, 'comment_body': 'I think we might want to revisit this logic here.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243707491, 'comment_body': 'style\r\n```suggestion\r\nfunction function_symmetric_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector{<:Vec}; here::Bool = true)\r\nbegin\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243708876, 'comment_body': '```suggestion\r\nfunction function_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector{<:Vec}; here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243710142, 'comment_body': 'style\r\n```suggestion\r\nfunction function_value(iv::InterfaceValues, q_point::Int, u::AbstractVector, dof_range = eachindex(u); here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243711348, 'comment_body': 'style\r\n```suggestion\r\nfunction function_symmetric_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector, dof_range = eachindex(u); here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243711638, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243712162, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243717495, 'comment_body': 'Can you elaborate on the design rationale?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243719617, 'comment_body': 'Is this really true? It seems like the default is the default interpolation of the respective geometry.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243725991, 'comment_body': '```suggestion\r\nReturn the normal at the quadrature point `qp` on the interface. \r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243728104, 'comment_body': 'Probably I should dig here: Why do you differentiate between shape functions and ""nodal"" functions? What exactly is the latter?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243733065, 'comment_body': 'As discussed in the file `common_values.jl` we should specify the variable name `here` and add docs.\r\n\r\nWe should also just use the term `face` instead of `facet` for codim 1 entities to stay consistent with the remaining docs.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243738808, 'comment_body': 'Why should we forbid this? We can have continuous interpolations but might want to evaluate the jump in the gradients without computing the full gradient field.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243741424, 'comment_body': 'I think this is fine here, because the functionality is specific to ""interface stuff"".', 'comment_created': datetime.datetime(2023, 6, 27, 13, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243744295, 'comment_body': 'While I fully understand the rationale I am not sure what the performance implications are, because the function now has different return values depending on the input parameters. Fredrik might can give you more information on this.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243746521, 'comment_body': 'If this is a problem, then lets use the ""problematic"" definition without normal dotting and leave the responsibility to the user to do the right thing for their formulation.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243748384, 'comment_body': ':new_moon_with_face: ', 'comment_created': datetime.datetime(2023, 6, 27, 13, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243769799, 'comment_body': 'Can we add test coverage for `Ferrite.faces(::Type{AbstractRefShape})` to check if it is consistent with `Ferrite.faces(::AbstractCell)` ~~and the linear faces of the geometric interpolation~~ (latter is probably a bit difficult)?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243781727, 'comment_body': 'This one is really missing a doc string, because it is not obvious what happens here (partially because it is different from the `SurfaceOrientationInfo` struct above). I guess this describes how to transform the face f1 into f2 on the conforming interface described by both faces?\r\n\r\nWhy `AbstractArray` for a transformation?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243785137, 'comment_body': 'Any reason why this should be vector of vectors instead of a matrix or tensor?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243786722, 'comment_body': 'We should be able to provide an optimized constructor by also providing a topology.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243822184, 'comment_body': ""Well, I thought if it's deprecated there why not deprecate it here 😂"", 'comment_created': datetime.datetime(2023, 6, 27, 14, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245099060, 'comment_body': 'If I understand correctly, `u` is passed as the dof from both elements on the interface, so this part makes sure if we pass `dof_range` it does not contain dof from the other element, and in case no `dof_range` is passed it takes the first/second half depending on which element we use.\r\nI see this may be problematic in case of continuous interpolations, is this what you meant?', 'comment_created': datetime.datetime(2023, 6, 28, 11, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245101536, 'comment_body': ""I think it's `function_*` stuff, where we have the function value at the nodes"", 'comment_created': datetime.datetime(2023, 6, 28, 11, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245170600, 'comment_body': 'You mean e.g. `function_value`?', 'comment_created': datetime.datetime(2023, 6, 28, 12, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245224830, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2023, 6, 28, 13, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245242578, 'comment_body': '`Nodal` usually refers to e.g. nodal interpolation functions like for example `Lagrange`, but `function_value` can also evaluate e.g. `Nedelec` interpolations, which are not nodal (but integral), because the basis function is associated to an edge or face. For the integration and quadrature points it is not so common to use the term node (although they are technically also nodes).', 'comment_created': datetime.datetime(2023, 6, 28, 13, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245346153, 'comment_body': ""I'm not sure how we'd use topology here, `InterfaceOrientationInfo` will be calculated inside `InterfaceIterator` which provides `this_face::FaceIndex, other_face::FaceIndex` from topology, I mean we only need these two from topology and if we pass topology we'd still need to pass `this_face::FaceIndex` unless we're buffering it for all interfaces If I understand correctly. "", 'comment_created': datetime.datetime(2023, 6, 28, 14, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245371474, 'comment_body': 'Ah sorry, I misread here. You are right.', 'comment_created': datetime.datetime(2023, 6, 28, 15, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245386904, 'comment_body': 'Yes, this is on example. I had no time to do a full audit of the code, so I might misunderstand something fundamental here, but you introduce the input argument `dof_range` which defaults to `eachindex(u)`. Now these lines here exactly check for `dof_range == eachindex(u)`, which raises for me the question why `dof_range` has been introduced as an input argument in the first place. Can you elaborate a bit on the design here?', 'comment_created': datetime.datetime(2023, 6, 28, 15, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245410218, 'comment_body': 'I think we are missing test coverage for mixed elements, e.g. meshes with triangles and quadrilaterals.', 'comment_created': datetime.datetime(2023, 6, 28, 15, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245435551, 'comment_body': ""Doing simple testing with `@Benchmark`:\r\n```julia\r\njulia> @benchmark shape_value_jump(iv, 1, 1, true)\r\nBenchmarkTools.Trial: 10000 samples with 600 evaluations.\r\n Range (min … max):  199.667 ns …  3.141 μs  ┊ GC (min … max): 0.00% … 91.83%\r\n Time  (median):     207.167 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   214.168 ns ± 94.643 ns  ┊ GC (mean ± σ):  1.47% ±  3.16%\r\n\r\n  ▅█▂▁▄▅▇▂▂▄▂          ▁▂▂▁ ▁▁▁▁                               ▂\r\n  ████████████▇██▇▅▇▄▆██████████▇▆▆▅▅▅▆▄▆▆▆▆▅▅▁▅▆▆▆▅▅▁▆▅▄▃▅▅▃▅ █\r\n  200 ns        Histogram: log(frequency) by time       303 ns <\r\n\r\n Memory estimate: 96 bytes, allocs estimate: 4.\r\n \r\n julia> @benchmark shape_value_jump(iv, 1, 1, false)\r\nBenchmarkTools.Trial: 10000 samples with 870 evaluations.\r\n Range (min … max):  136.092 ns …  1.361 μs  ┊ GC (min … max): 0.00% … 0.00%\r\n Time  (median):     142.874 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   146.104 ns ± 30.703 ns  ┊ GC (mean ± σ):  0.39% ± 2.07%\r\n\r\n  ▃█▆▄▂▇▆▄▁▁ ▁▂▂▃▄▂▁▁▂▃                                        ▂\r\n  ██████████████████████▇▇▇▇▅▆▆▅▆▃▅▃▅▄▄▄▄▄▅▄▄▄▃▃▄▄▃▄▄▄▄▃▃▄▄▄▄▃ █\r\n  136 ns        Histogram: log(frequency) by time       215 ns <\r\n\r\n Memory estimate: 32 bytes, allocs estimate: 2.\r\n```\r\n\r\nWhich isn't far from that of `FaceVakues` (in terms of allocation, 2~3 times slower in terms of time? I mean it does operations not just accessing tensor)?\r\n\r\n```julia\r\njulia> @benchmark shape_value(iv.face_values_a, 1, 1)\r\nBenchmarkTools.Trial: 10000 samples with 980 evaluations.\r\n Range (min … max):  59.184 ns …   3.115 μs  ┊ GC (min … max): 0.00% … 97.14%\r\n Time  (median):     62.245 ns               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   74.055 ns ± 104.818 ns  ┊ GC (mean ± σ):  5.41% ±  3.97%\r\n\r\n  █▇▆▅▁     ▁▂                                                 ▁\r\n  ██████▇▇▆▆████▆▅▆▅▄▅▅▅▄▄▃▄▆▅▅▂▅▃▄▄▄▄▄▃▃▃▄▂▄▄▂▃▂▃▄▅▆▇▅▇▇▆▄▄▅▆ █\r\n  59.2 ns       Histogram: log(frequency) by time       231 ns <\r\n\r\n Memory estimate: 80 bytes, allocs estimate: 2.\r\n```\r\n"", 'comment_created': datetime.datetime(2023, 6, 28, 15, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245904594, 'comment_body': ""I'm not sure why it is there, I added it as it was there for `FaceValues` implementation."", 'comment_created': datetime.datetime(2023, 6, 28, 23, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1248863425, 'comment_body': 'If I understand correctly,  face->face transformation is predetermined, so we can make a function that maps quadrature point indices instead of transforming coordinates or store the transformation matrices and lookup the one we need.', 'comment_created': datetime.datetime(2023, 7, 1, 14, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1248863470, 'comment_body': ""There's probably a better way to do this"", 'comment_created': datetime.datetime(2023, 7, 1, 14, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1248872942, 'comment_body': 'updated benchmarks:\r\n\r\n```julia\r\njulia> @benchmark shape_value(facevalues1, 1, 1)\r\nBenchmarkTools.Trial: 10000 samples with 995 evaluations.\r\n Range (min … max):  26.734 ns …  1.063 μs  ┊ GC (min … max): 0.00% … 95.63%\r\n Time  (median):     27.236 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   29.875 ns ± 18.182 ns  ┊ GC (mean ± σ):  1.00% ±  1.65%\r\n\r\n  ▇█▇▄              ▂▁    ▄▄▃  ▃▆▅▄                     ▂▂    ▂\r\n  ████▇▆▄▁▁▁▆▅▆▆█▇▄▄██▅▃▄▇███▇▆██████▇▇▆▇▇▆▆▅▆▆▆▅▆▇▆▆▆▇████▇▅ █\r\n  26.7 ns      Histogram: log(frequency) by time      39.5 ns <\r\n\r\n Memory estimate: 16 bytes, allocs estimate: 1.\r\n\r\njulia> @benchmark shape_value_average(iv, 1, 1)\r\nBenchmarkTools.Trial: 10000 samples with 993 evaluations.\r\n Range (min … max):  30.312 ns …  1.178 μs  ┊ GC (min … max): 0.00% … 95.08%\r\n Time  (median):     30.715 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   33.991 ns ± 19.996 ns  ┊ GC (mean ± σ):  0.92% ±  1.60%\r\n\r\n  █▅         ▄▄▁▆▃         ▂▂                                 ▂\r\n  ███▇▁▄▃▁███████████▇▇▇▆█▇██▇▆▅▅▇▆▆▆▆▅▆▅▄▄▄▄▄▅▅▆▄▄▅▄▄▃▃▄▅▁▁▃ █\r\n  30.3 ns      Histogram: log(frequency) by time      57.4 ns <\r\n\r\n Memory estimate: 16 bytes, allocs estimate: 1.\r\n \r\njulia> @benchmark shape_value_jump(iv, 1, 1, true)\r\nBenchmarkTools.Trial: 10000 samples with 993 evaluations.\r\n Range (min … max):  35.347 ns …  4.546 μs  ┊ GC (min … max): 0.00% … 95.60%\r\n Time  (median):     38.167 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   62.274 ns ± 88.570 ns  ┊ GC (mean ± σ):  2.21% ±  2.36%\r\n\r\n  █▅▃▄▄▂                      ▁▁▁▁▁                           ▁\r\n  ███████▆▆▆▆▆▆▅▅▆▅▆▅▆▆▅▆▆▅▇▇█████████▇███▇▇▇▇█▇▆▇▆▅▆▅▅▅▅▃▄▄▄ █\r\n  35.3 ns      Histogram: log(frequency) by time       253 ns <\r\n\r\n Memory estimate: 32 bytes, allocs estimate: 1.\r\n\r\njulia> @benchmark shape_value_jump(iv, 1, 1, false)\r\nBenchmarkTools.Trial: 10000 samples with 993 evaluations.\r\n Range (min … max):  34.038 ns …  1.072 μs  ┊ GC (min … max): 0.00% … 94.32%\r\n Time  (median):     35.146 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   38.028 ns ± 18.710 ns  ┊ GC (mean ± σ):  0.79% ±  1.64%\r\n\r\n  ▇██▅▄▂    ▁▂▅▆▄▄▄▄▅▃▁   ▂▁▁▁ ▁▁▁                            ▂\r\n  ██████▅▆▅▇████████████▇▇████████▇▄▇▁▆▅▄▄▅▃▄▄▅▅▆▅▄▁▆▅▅▄▄▃▅▅▆ █\r\n  34 ns        Histogram: log(frequency) by time        60 ns <\r\n\r\n Memory estimate: 16 bytes, allocs estimate: 1.\r\n\r\n ```', 'comment_created': datetime.datetime(2023, 7, 1, 15, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252835987, 'comment_body': '```suggestion\r\nstruct InterfaceValues{FVA, FVB, ...} <: AbstractValues\r\n    face_values_a::FVA\r\n    face_values_b::FVB\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252837905, 'comment_body': 'Would the weight not be the same anyway? Why is it useful to specify which side in this case?', 'comment_created': datetime.datetime(2023, 7, 5, 9, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252840156, 'comment_body': ""Probably this could be it's own docstring for `function_value(::InterfaceValues)`."", 'comment_created': datetime.datetime(2023, 7, 5, 9, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252841055, 'comment_body': 'Needs to be adjusted if you change the parametrization above.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252852231, 'comment_body': 'Would it make sense to not collect all values in `u`, but to have two of them? That would make dof_range usage just like in the standard case\r\n```\r\nic = InterfaceCache(...)\r\n\r\n# x is the solution vector\r\nxe_a = x[ic.dofs_a]\r\nxe_b = x[ic.dofs_b]\r\n\r\nu_dofs = dof_range(dh, :u) # Assuming single subdofhandler\r\n\r\n# Alternative 1\r\nfunction_value(iv, q_point, u_a, u_dofs; use_element_a = true)\r\n# Alternative 2\r\nfunction_value(iv.a, q_point, u_a, u_dofs)\r\n```\r\n\r\nBut for jumps I suppose it then has to be\r\n```\r\nfunction_jump(iv, q_point, xe_a, xe_b, range)\r\nfunction_jump(iv, q_point, xe_a, xe_b, range_a, range_b)\r\n```\r\nnot too bad?', 'comment_created': datetime.datetime(2023, 7, 5, 9, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252855485, 'comment_body': 'I am a bit confused why this is needed, an  in particular it would be nice not to have this.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252858859, 'comment_body': 'I think we should settle on one single definition for the jump, document it, and show how one can compute the other version manually using `function_value_here` and `function_value_there`.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252862870, 'comment_body': 'In particular, is it not possible to compute the mappings with just the quadrature rule? Assuming the rule is ""symmetric"". Is the problem that the relative rotation isn\'t known? Then perhaps `reinit!(iv::InterfaceValues, ic::InterfaceCache)` can do it? That has the node IDs so should be able to compute this.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252960833, 'comment_body': 'I think detj can be different ', 'comment_created': datetime.datetime(2023, 7, 5, 11, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252964289, 'comment_body': 'These would be moved to interface cache in the next PR', 'comment_created': datetime.datetime(2023, 7, 5, 11, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252974415, 'comment_body': 'Ah I see. Perhaps that should be merged first then?', 'comment_created': datetime.datetime(2023, 7, 5, 11, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1253047607, 'comment_body': 'If you have\r\n```\r\n+-----+---+\r\n|     |   |\r\n+-----+---+\r\n```\r\nthen detJ differs between the elements already.', 'comment_created': datetime.datetime(2023, 7, 5, 12, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1253150508, 'comment_body': 'Does that imply that incompatible/discontinuous geometric meshes are allowed (in addition to discontinuous fields)? If so, how does that work? I thought the quadrature points have to be in the same physical location to calculate the jump (at least in the initial configuration if considering finite strains). ', 'comment_created': datetime.datetime(2023, 7, 5, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1253232852, 'comment_body': ""If I understand correctly, I think it can work if we disable the nodes check here:\r\n\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/d82f177fe86d0998f5d32fb9c300222d3cbe4e91/src/Grid/grid.jl#L1658\r\n\r\nthe quadrature points don't have the same physical location (but are the same type?), like \r\n```\r\n+-----+    +---+\r\n|     |    |   |\r\n+-----+    +---+\r\n```\r\nso we have the same quadrature rule for the faces but they are not at the same location."", 'comment_created': datetime.datetime(2023, 7, 5, 14, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1253276914, 'comment_body': ""Yes, that case could make sense! But how about \r\n```\r\n+-----++---+\r\n|     ||   |\r\n+-----+|   |\r\n|     ||   |\r\n+-----++---+\r\n```\r\n(I.e. non-matching faces, sorry for bad explanation before). I think this would be problematic, or?\r\n\r\nIn both of your examples above, if I don't misunderstand the illustrations; the value returned by `getdetJdV` would be the same for both faces (as they have the same area), even if the volume of the cells are different (so `getdetJdV` of the cellvalues would be different)?"", 'comment_created': datetime.datetime(2023, 7, 5, 15, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1253307667, 'comment_body': ""Ah, got it. It currently doesn't support this case (we assume each face may have one neighbor only or none)."", 'comment_created': datetime.datetime(2023, 7, 5, 15, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1253377387, 'comment_body': 'Technically possible, but I think mapping quadrature point indices is a bit wearisome, because you have to do it for every quadrature rule (since we do not have a convention on how to index the points)', 'comment_created': datetime.datetime(2023, 7, 5, 16, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1253412036, 'comment_body': 'Correction: Fredrik is right, we use the weight of the face mapping and not the determinant of the cell mapping.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1253414316, 'comment_body': 'It should be possible to handle the case\r\n```\r\n+-----++---+\r\n|     ||   |\r\n+-----+|   |\r\n|     ||   |\r\n+-----++---+\r\n```\r\nby introducing sub-faces or by other mechanisms. But we leave this handling to subsequent PRs. We need more time from our side (Maxi+me) for an efficient forest mesh implementation.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254337427, 'comment_body': 'Can you elaborate on this design why we need this specific grid type and the full grid? ', 'comment_created': datetime.datetime(2023, 7, 6, 12, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254343053, 'comment_body': ""These functions are called from within `reinit!` and they are the only functions which access the grid field of `InterfaceValues`, right? Can't we just pass the two elements into these routines instead of carrying the full grid?"", 'comment_created': datetime.datetime(2023, 7, 6, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254353892, 'comment_body': 'Well, this one is still inconsistent :/ @koehlerson @fredrikekre since we have this inconsistency in the codebase I might have to ask whether in 1D the vertex is a face or not?\r\n\r\nAlso, interface.\r\n```suggestion\r\n            neighbors = dim > 1 ? getneighborhood(...) : ...\r\n```', 'comment_created': datetime.datetime(2023, 7, 6, 12, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254361597, 'comment_body': 'Type stability, maybe I can change it like FVA/FVB', 'comment_created': datetime.datetime(2023, 7, 6, 12, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1254363289, 'comment_body': 'I was thinking about doing so when moving fields to `InterfaceChache`', 'comment_created': datetime.datetime(2023, 7, 6, 12, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1254367797, 'comment_body': 'Actually this might harm type stability in case of mixed grids (and if including the grid, not having the flexibility in the grid type might harm extensibility)', 'comment_created': datetime.datetime(2023, 7, 6, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1256180114, 'comment_body': 'Without any experience on the subject (So take this with a bucket of salt): \r\nWould a general definition be to use the dyadic product for the jump, $[f] = f_a \\otimes n_a + f_b \\otimes n_b$, instead of the dot product, `here-there`, or `there-here`?\r\n```\r\nfunction foo_jump(iv, q_point, xe_a, xe_b, range_a, range_b)\r\n    fa = foo(iv.a, q_point, xe_a, range_a)\r\n    na = getnormal(iv.a, q_point)\r\n    fb = foo(iv.b, q_point, xe_b, range_b)\r\n    nb = getnormal(iv.b, q_point) # Or nb = -na\r\n    return fa ⊗ na + fb ⊗ nb\r\nend\r\n```\r\nVector functions: This retains the tangential jump for vector functions (as opposed to the dot definition in the [ref](https://www.researchgate.net/publication/211746421_Unified_Analysis_of_Discontinuous_Galerkin_Methods_for_Elliptic_Problems)). The signed normal jump is `- n ⋅ foo_jump() ⋅ n` where `n` is `na` or `nb` (`na=-nb` following the same arguments as for the quadrature weights)\r\n\r\nScalar functions: Vector jump as in [ref](https://www.researchgate.net/publication/211746421_Unified_Analysis_of_Discontinuous_Galerkin_Methods_for_Elliptic_Problems) is `(foo_jump() ⋅ n)*n`. But here I guess often the absolute value of the jump suffices, in which case the dyadic implementation would be inefficient (but it would be a 1-liner for users to do that efficiently as Fredrik writes).', 'comment_created': datetime.datetime(2023, 7, 7, 17, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1257143318, 'comment_body': 'But continuing thinking out loud, I guess having the jump as, `ub-ua`, and `getnormal(iv, q_point)` giving one normal (probably `na` in this case) would be as general and more performant!', 'comment_created': datetime.datetime(2023, 7, 8, 7, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1257512134, 'comment_body': 'Not so sure. Where does the assumption come from that the normals have to align for all points in time? I think this breaks down on moving domains.', 'comment_created': datetime.datetime(2023, 7, 9, 16, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1257539508, 'comment_body': ""In the Lagrangian description, I think that should be valid since the geometric nodes are matching for `InterfaceValues` AFAIU. \r\n\r\nFor Eulerian descriptions, even the same `getdetJdV` is not true (since the faces can change area due to the deformation). And currently, I think an Eulerian description is difficult in Ferrite, for example, the derivatives of, e.g., `dV` and shape functions, wrt. cell coordinates are not available*. Furthermore, in the case that normals don't align and the jump is calculated as `ua*na + ub*nb`, if `ua=ub`, but `na!=-nb`, the jump would be nonzero which doesn't make sense to me. Hence in any case a single normal should be used IMO, where one could argue that e.g. `(na-nb)/|na-nb|` would be better if `na!=-nb`, but in the current version of Ferrite I think it always will be. (A similar approach would be required for `getdetJdV`)\r\n\r\n*Probably, this should be supported. (Might be technically possible already, with ForwardDiff and some custom initialization of CellValues containing Dual numbers, but probably not very easy nor convenient). "", 'comment_created': datetime.datetime(2023, 7, 9, 20, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1258211165, 'comment_body': 'Definitely a good point and I agree that detJdV should be different - this raises further confusion regarding what ""face integral"" means in this context, because the faces do not match anymore.\r\n\r\nA bit off-topic, but regarding an Eulerian description we should be able to ""just add the displacements to the nodes"", so it should not be that difficult. But yes we are missing some convenience functions here.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1258214297, 'comment_body': 'Maybe a compromise is to provide the common definitions with dot and dyadic product along some detailed explanation in the docs (maybe with a guide on on how to implementent custom jumps). What do you think?', 'comment_created': datetime.datetime(2023, 7, 10, 12, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1258299453, 'comment_body': 'I would vote for a *single* definition for use in the convenience. \r\nMy suggestion would be the one I suggested [above](https://github.com/Ferrite-FEM/Ferrite.jl/pull/743#discussion_r1257143318) and note that it assumes matching faces. \r\n\r\nAs you say, it should be possible to obtain the function values, normals, etc. for each part individually. And that should, as you say, be documented; perhaps even with alternative ways to define the jump if needed!\r\n\r\n> A bit off-topic, but regarding an Eulerian description we should be able to ""just add the displacements to the nodes"", so it should not be that difficult. But yes we are missing some convenience functions here.\r\n\r\nPut an issue for discussion/future reminder: https://github.com/Ferrite-FEM/Ferrite.jl/issues/761', 'comment_created': datetime.datetime(2023, 7, 10, 13, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1258364522, 'comment_body': 'The permutation can be computed in the constructor though. I think that would be much cheaper compared to i) updating the quadrature points and ii) re-compute the shape values and gradients in every reinit.', 'comment_created': datetime.datetime(2023, 7, 10, 14, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1263665904, 'comment_body': ""I just had another stupid idea. Why don't we include the transformed quadrature nodes in this struct?"", 'comment_created': datetime.datetime(2023, 7, 14, 12, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1266452470, 'comment_body': 'You would still need to permute then, right? Or do you wanna store the transformed values for every rotation and every face combination?', 'comment_created': datetime.datetime(2023, 7, 18, 8, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1266504950, 'comment_body': 'The idea is similar to what we need to do for the correction in the cell values for e.g. Nedelec elements, i.e. that we store some static elementary transformations and then compute for the current face the transformed value when we reinit. But we can also store all permutations and just query them.', 'comment_created': datetime.datetime(2023, 7, 18, 9, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314079571, 'comment_body': 'Is this here correct? The functon is already in the boundary condition docs page. It also feels like `update!` might clash with names from other packages, so we might not want to use this name anyway. Maybe we can be more specific? Really not sure here.', 'comment_created': datetime.datetime(2023, 9, 3, 3, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314080772, 'comment_body': '`ND` and `(N-1)D` might be confusing to read. Maybe we can just write it out to N dimensional and N-1 dimensional. Not sure what a good way is.', 'comment_created': datetime.datetime(2023, 9, 3, 3, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081204, 'comment_body': '""It defaults to ..."" or ""The default value is...""?', 'comment_created': datetime.datetime(2023, 9, 3, 3, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081456, 'comment_body': 'I think you can eliminate the `\\\\` by using `@raw`', 'comment_created': datetime.datetime(2023, 9, 3, 3, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081539, 'comment_body': 'So, this is your reference triangle and not the actual reference triangle in Ferrite, right?', 'comment_created': datetime.datetime(2023, 9, 3, 3, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081766, 'comment_body': 'Oopsie?', 'comment_created': datetime.datetime(2023, 9, 3, 3, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314113309, 'comment_body': 'Could we use a mutable struct here?\r\n```suggestion\r\nmutable struct InterfaceTransformation\r\n    flipped::Bool\r\n    shift_index::Int\r\n    lowest_node_shift_index::Int\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 9, 3, 5, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1314278914, 'comment_body': 'My bad, the text for this one should\'ve been ""Transforming back to triangle B"" not reference triangle.\r\nThe reference triangle is the same as Ferrite\'s one, which we transform to temporarily when flipping.', 'comment_created': datetime.datetime(2023, 9, 3, 15, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1314278956, 'comment_body': ""Didn't notice that, thanks!"", 'comment_created': datetime.datetime(2023, 9, 3, 15, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1315075861, 'comment_body': 'Outdated (?)', 'comment_created': datetime.datetime(2023, 9, 4, 15, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315076758, 'comment_body': 'Where is this used? Does it make sense to define it? Mapping here is quite different', 'comment_created': datetime.datetime(2023, 9, 4, 15, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315077420, 'comment_body': ""I think I prefer\r\n```suggestion\r\n    function_value(iv::InterfaceValues, q_point::Int, u::AbstractVector; here::Bool)\r\n```\r\ni.e. `here` instead of `use_element_a`, and also to not use a default value but require the user to always ask for the side explicitly. (Same for the other functions but won't leave comments there)."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315078813, 'comment_body': ""```suggestion\r\nTransform quadrature point from cell's coordinates to the face's reference coordinates, decreasing the number of dimensions by one.\r\nThis is the inverse of `face_to_element_transformation`.\r\n```"", 'comment_created': datetime.datetime(2023, 9, 4, 15, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315079897, 'comment_body': 'Is it possible to implement this one by passing just the node IDs of the two cells instead of the grid? The node ids are also available in the interface cache.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315080444, 'comment_body': 'I suggest you make the transformation struct immutable and create a new one every time:\r\n```suggestion\r\n    interface_transformation = compute_interface_transformation(grid, face_a, face_b)\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 15, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315080659, 'comment_body': '```suggestion\r\n    transform_interface_points!(quad_points_b, iv, quad_points_a, grid, face_a, face_b, interface_transformation)\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 15, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315081144, 'comment_body': 'Seem easier to use a loop instead of creating the temporary svectors? Then you can also remove the new functions `shape_gradients_and_values` etc.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315081831, 'comment_body': 'Use multiple dispatch instead of the ifs?', 'comment_created': datetime.datetime(2023, 9, 4, 15, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1328338252, 'comment_body': 'Can the two refshapes be type parameters here instead and remove the `nfacenodes` one?', 'comment_created': datetime.datetime(2023, 9, 18, 7, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1329417453, 'comment_body': 'Not sure where these belong', 'comment_created': datetime.datetime(2023, 9, 19, 0, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335148246, 'comment_body': 'This part is outdated, right? IIUC vector valued problems use `Vec` not scalars and `(Vector/Scalar)Values)` are deprecated since #708 ', 'comment_created': datetime.datetime(2023, 9, 24, 8, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335158194, 'comment_body': ""I think it is still possible to allow `Vector{Vec}`, but it was suggested to be removed in https://github.com/Ferrite-FEM/Ferrite.jl/pull/698 (but didn't happen, should it @fredrikekre ?). The standard way, however, is that `u` is a `Vector` of scalars for both scalar and vector function interpolations."", 'comment_created': datetime.datetime(2023, 9, 24, 10, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1335160475, 'comment_body': 'Thanks for the clarification!\r\nI thought it was similar to `shapeValues` such that `u` is a vector of  `Vec` if we use vectorized interpolation.', 'comment_created': datetime.datetime(2023, 9, 24, 10, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335164893, 'comment_body': '@KnutAM \r\n> > Good point. I guess we can do\r\n> > ```\r\n> > function_(value|gradient|...)(iv::InterfaceValues, qp::Int, ue::Vector{Float64}, dof_range::UnitRange, dof_range::UnitRange)\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > then and let the user handle the offset. It is easy to catch the mistake of not ofsetting in many cases I think, so should be reasonably safe.\r\n> \r\n> Has there been any new discussion on this topic, also following [#743 (comment)](https://github.com/Ferrite-FEM/Ferrite.jl/pull/743#issuecomment-1629260683) (at least to me, it looks like the current implementation is different)?\r\n> \r\n> For being able to use automatic differentiation, I think a single dof-vector, `ue`, input would be most practical.\r\n\r\nIIRC @fredrikekre  noted that we might sometimes have to provide two different dof ranges, so going with two `u` s would make more sense, right?\r\nI think the other options are\r\n- a single `u` and no dof ranges -> first half of `u` is here and the other half is `there` (This can be broken for mixed elements)\r\n- a single `u` and two dof ranges\r\n\r\n(Leaving this as a code comment so we can reply to it)', 'comment_created': datetime.datetime(2023, 9, 24, 11, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335175566, 'comment_body': 'For single-field problems (or when giving only the dofs corresponding to a single field), the interpolation information should be enough to know how many dofs belong to here and there, even if they are different, right?\r\n\r\nFor multi-field problems (analogous to the current dof range approach), then two dof-ranges are required. And the main challenge here, is that the user needs to offset the ""there"" dof-range? (Unless the number of celldofs for ""here"" is provided in the `reinit!`, which should be feasible since it should be available in the cache). ', 'comment_created': datetime.datetime(2023, 9, 24, 13, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1341975385, 'comment_body': 'I think we should remove it, and therefore not add it to InterfaceValues.', 'comment_created': datetime.datetime(2023, 9, 30, 15, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1341976475, 'comment_body': 'The AD argument is good. I suppose there should be some method of `dof_range` that returns two, and the second one with an offset.', 'comment_created': datetime.datetime(2023, 9, 30, 15, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1356761962, 'comment_body': 'If we are shuffling around the shape values on the ""there""-side, does this not mean that we have to shuffle the ""interfacedof"" vector on the there side aswell? (i.e. `interfacedofs = [cellhere_dofs, cellthere_dofs]` would need to be reordered aswell for the assembly in the the siffness matrix).\r\nWould it not be better to reorder the quad_points_b such that they match quad_points_a instead, and keep the order of the shape-functions fixed?\r\n\r\nI might be wrong though...', 'comment_created': datetime.datetime(2023, 10, 12, 12, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lijas', 'type': 'User'}, {'comment_id': 1356765240, 'comment_body': 'wait, maybe that is what you are doing? :smile: ', 'comment_created': datetime.datetime(2023, 10, 12, 12, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lijas', 'type': 'User'}, {'comment_id': 1356800647, 'comment_body': 'There is no reordering of the shape functions, just re-evaluation on new quadrature points.', 'comment_created': datetime.datetime(2023, 10, 12, 13, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1356808986, 'comment_body': ""Yeah, it's just transforming the quadrature points to match coordinates, shape functions order should remain the same (1:nbasefunc in the `there` interpolation)"", 'comment_created': datetime.datetime(2023, 10, 12, 13, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1356841320, 'comment_body': 'I propose we can later in separate PRs do such optimizations via specialized dispatches of special cases if we want, but let us for now take a solution which works in more general scenarios.', 'comment_created': datetime.datetime(2023, 10, 12, 13, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363705812, 'comment_body': ""Can we extract the orientation stuff into data structures and/or functions? This might be handy for merging the different internal orientation interfaces in a followup PR. Also I think for 2D we can come up with a simpler scheme. \r\n\r\nAs another note: For the extension to higher dimensions than 3 we might not have enough flexibility yet (and you don't need to address this, just to motivate why we might want to keep the logic here modular and extensible)."", 'comment_created': datetime.datetime(2023, 10, 18, 11, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363712185, 'comment_body': 'We really should not do it like this. Can we just handle the cases via (inlined) dispatches, and put the throw into the generic dispatch?', 'comment_created': datetime.datetime(2023, 10, 18, 11, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363715901, 'comment_body': '```suggestion\r\nfunction transform_interface_points!(dst::Vector{Vec{3, Float64}}, points::Vector{Vec{3, Float64}}, interface_transformation::InterfaceTransformation{RefShapeA, RefShapeB}) where {RefShapeA <: AbstractRefShape{3}, RefShapeB <: AbstractRefShape{3}}\r\n```\r\nMaybe?', 'comment_created': datetime.datetime(2023, 10, 18, 11, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363716591, 'comment_body': '```suggestion\r\nfunction get_transformation_matrix(interface_transformation::InterfaceTransformation{RefShapeA}) where RefShapeA <: AbstractRefShape{3}\r\n```', 'comment_created': datetime.datetime(2023, 10, 18, 11, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363718235, 'comment_body': 'I think the docstring needs more work for the other devs understand what exactly is constructed here.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363724279, 'comment_body': 'If we want to expose this to the user, then I would vote for also including a how to, possibly in a followup PR.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363726168, 'comment_body': 'Also, maybe something like this? Not sure.\r\n```suggestion\r\nfunction InterfaceTransformation(cell_a::AbstractCell{RefShapeA}, cell_b::AbstractCell{RefShapeB}, face_a::Int, face_b::Int) where {RefShapeA, RefShapeB}\r\n    getdim(cell_a) == 1 && return error(""1D elements don\'t use transformations for interfaces."")\r\n\r\n    nodes_a = faces(cell_a)[face_a]\r\n    nodes_b = faces(cell_b)[face_b]\r\n\r\n    min_idx_a = argmin(nodes_a)\r\n    min_idx_b = argmin(nodes_b)\r\n\r\n    shift_index = min_idx_b - min_idx_a\r\n    flipped = getdim(cell_a) == 2 ? shift_index != 0 : nodes_a[min_idx_a != 1 ? min_idx_a - 1 : end] != nodes_b[min_idx_b != 1 ? min_idx_b - 1 : end]\r\n\r\n    return InterfaceTransformation{RefShapeA, RefShapeB}(flipped, shift_index, 1 - min_idx_b, face_a, face_b)\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 10, 18, 11, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363735711, 'comment_body': 'Can we add test cases to cover these directly? I thought about testing the invariant that the spatial coordinate of a point on the face is always the same as the one for same point on the element.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363738478, 'comment_body': 'Maybe 2 dispatches here?\r\n\r\n```\r\nfunction_symmetric_gradient(fe_v::AbstractValues, q_point::Int, u::AbstractVector)\r\nfunction function_symmetric_gradient(fe_v::AbstractValues, q_point::Int, u::AbstractVector, dof_range)\r\n```\r\n\r\nThis will eliminate the redundant check.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363747072, 'comment_body': 'Debris?', 'comment_created': datetime.datetime(2023, 10, 18, 12, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363821161, 'comment_body': 'Yes. I think on moving domains things can get a bit nastier. But I also do not know how to deal with these.', 'comment_created': datetime.datetime(2023, 10, 18, 12, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363822619, 'comment_body': 'Debris?', 'comment_created': datetime.datetime(2023, 10, 18, 12, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363825596, 'comment_body': 'Maybe we should wrap this into a namespace to avoid possible future collisions.', 'comment_created': datetime.datetime(2023, 10, 18, 12, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367634189, 'comment_body': 'Like in \r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/ce1886d9e36058052f5f79cc7bbf3586eb21869d/src/Grid/grid.jl#L870-L891 ?\r\nThis should be able to replace the other two orientation info structs in #829 ', 'comment_created': datetime.datetime(2023, 10, 21, 3, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367634342, 'comment_body': 'Like\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/ce1886d9e36058052f5f79cc7bbf3586eb21869d/src/FEValues/interface_values.jl#L423-L463\r\n?', 'comment_created': datetime.datetime(2023, 10, 21, 3, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367634576, 'comment_body': 'This might break for 4D tho since we can have both 3D and 2D interfaces with 4 nodes', 'comment_created': datetime.datetime(2023, 10, 21, 3, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367634635, 'comment_body': ""Unless we can guarantee that the interface won't *hourglass *"", 'comment_created': datetime.datetime(2023, 10, 21, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367635836, 'comment_body': ""They're tested in\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/ce1886d9e36058052f5f79cc7bbf3586eb21869d/test/test_interpolations.jl#L54-L70\r\nI'm not sure if using spatial coordinates test will be helpful since IIUC it uses the cell corrdinates for both `CellValues` and `FaceValues`. Also, quadrature points already use these functions. Or you mean something else?"", 'comment_created': datetime.datetime(2023, 10, 21, 3, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367636495, 'comment_body': ""I don't think this would work since `reference_faces` is used internally\r\nMaybe change the refshape name to something like `DummyRefShapy`?"", 'comment_created': datetime.datetime(2023, 10, 21, 3, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367690017, 'comment_body': 'I see. But maybe something like\r\n```julia\r\n function get_transformation_matrix(interface_transformation::InterfaceOrientationInfo{RefHexahedron})\r\n     face_a = interface_transformation.face_a \r\n     facenodes = reference_faces(RefHexahedron)[face_a] \r\n     _get_quad_transformation_matrix(facenodes, interface_transformation)\r\n end \r\n```\r\ncould work? Or can we construct type table methods to get the face refshape and dispatch the inner _get_transformation_matrix on this type?', 'comment_created': datetime.datetime(2023, 10, 21, 8, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367690753, 'comment_body': 'That should be fine. :) I just missed this somehow', 'comment_created': datetime.datetime(2023, 10, 21, 8, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367690974, 'comment_body': 'The module should work, but this is also fine. :) Maybe `TestRefDodecahedronDummy` or so, not sure what is suitable', 'comment_created': datetime.datetime(2023, 10, 21, 8, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367691320, 'comment_body': 'Indeed. But let us focus in this PR now on getting it merged, i.e. just resolving the open issues without touching more of the existing code base, to avoid feature creep. ', 'comment_created': datetime.datetime(2023, 10, 21, 8, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367692085, 'comment_body': ""Yea, getting the face shape makes more sense but I'm not sure if it'd be useful somewhere else\r\nI assume it'll have the same performance tho as it'll be determined on runtime"", 'comment_created': datetime.datetime(2023, 10, 21, 8, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367692184, 'comment_body': 'The issue is with cells with different faces\r\n', 'comment_created': datetime.datetime(2023, 10, 21, 8, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367693414, 'comment_body': 'Yea, let us keep this then for a separate pr (maybe in the heat example?) when we start benchmarking where we land performance-wise :)', 'comment_created': datetime.datetime(2023, 10, 21, 9, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1385203043, 'comment_body': 'Okay let us leave mixed grid support for a future PR.', 'comment_created': datetime.datetime(2023, 11, 7, 16, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1385237456, 'comment_body': 'What should we do about this? Since there are concurring definitions for the jump, maybe we should not provide a default jump in the framework but in the corresponding examples?', 'comment_created': datetime.datetime(2023, 11, 7, 16, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1385316294, 'comment_body': ""I don't know and honestly I don't think that there is any truly good solution to it for d=1,d=2 and d=3. I do think there are nice definitions for d=2, d=3 but as soon as you include 1D or vice verca it becomes quite fast artificially named or defined, but these are just my two cents . So I personally don't mind if its vertex or face neighborhood as long as its stated/defined somewhere"", 'comment_created': datetime.datetime(2023, 11, 7, 17, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'koehlerson', 'type': 'User'}]","[{'commit_sha': '000eab44a28bed4aa7fe05299ad1d9527414aef0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d1c0e03e3bba0b23472cd815ecd665220fdf6e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5568746ce59c6f3c1d9edd122b7ed0520d1f2dc8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa236b37798bc524edd2e937d3f4c6055e8c3c8b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4754f2effe2e52844980111dc0f537a0363a211', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69b2cd434b36b89f23d468da381302da2488fe1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edfa09c75f4403d7c115a018a3b5ee584f9a9658', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06dc9e215ffee88e5964976bdf02ef5225c24d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4889e2f29f9f4ba50ad1e5067576ddf0b9a45ae', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3afb9623e4bf75117f24ad8c994bd0bb6f0ff2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60573db45ab4cca4c4b065603b4fb252d7816e7b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e81b66fdc94b0770aee7ea9f76e92efa10fc7cd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0065423731d996b60fb6866e5840e56d39daf8c2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a530f760a1029a349f24768d8571357f7fb222', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a842a3acb5dab755929b1e852b152bd995dd52', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e03b2a0dd1f6a3efb60a9a87ea5af26abdc1a3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b1f495e87c94432dd7a8f09113fd6c150b496e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09fa6bd448dda4a439f23bc20c74a065ad5bd255', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bb40ffec967b606e017ebd7100daf50f865f40', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '698874a887cbdcd58ea1438178ebb08bff4543f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e75325ece719b5c554f767a2907d0f03f75c31', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e3429f43fb6c6b07291acf7806ce9b66b6e73a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb5ddf52f49552d94d555d220e87274bdf85874', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bf804536287df1eefc35039ac774dae69e23b8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d59a7500b6e25efde25df120ae588865cb068e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c60a0b6d8b27457da99c56e6cc4819ca74e7f19', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de83a50e78fe878218f0508bc92319836cb09582', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfce1b1c084592eb9e082ec795cabfefdb89139', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10cf989c45306a54372eec3608a247f471112c0f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b86e289d4256d296b85d24490b8a702cd6fbcae3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34d72de0d68e288600d54482cd1e6567e15a6e98', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c03c787cb7d25bb8915e56197e41f2d98e95f360', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6324a83d26c5fdc1901f119ba3e7c7fd3fd496', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f6a397b719795475992e0365a5b4046d1b2c39', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef539491f7a0b51c4864cca8d72d963a7c01823b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd221888ba92450981ef21e9c31aa27e20f929523', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b18c3ddf3a410c5b70bfd99193f5e535d9c2b18', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c302fcad32a021be049659375a5530b7b6b98532', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f6cb092b5166eb764b27f6b95383547a456606', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1193c42cbb0d359171090a68945241468e673118', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08c4af05e5f2e60fc51309c5e9d51e03e9dcb110', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '851fe05b7f16e56d55fd46994be3ca1adbbd6ddd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b10ece4fdf173f6deff2d87674bba87f648ae826', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dadcdac8343a42746f1f1d64499a924b1a4115d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b432c917c469dc6f1ababcac21c9974e2c616b08', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c28f0b2ebc213caf2c8b7a30845ccdb11cc7ffd7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db877bfa9fbc61814d4b5b97f4359702591718d9', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff06028b92cffa85db86a2fc812737cbcaa58cf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df162712f2c569f5d9e6a9e3df98d1e86b2e6ba', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '232b2a83d16e5b5210f5710e0fc5cc90e0aa47d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd32ca77afa269eb943fcf8fa38f7cee98695c4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7732a1113c3f4febe0542db4e23b5b4b390c74f5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '874b4926035d50b39b1850cd74c903e272c25e02', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34b0356d234ae0d7cecedcc60f3780343012937', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de61c903fb51def2c647d36e41f97c3a92cb95e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d24cc08580a6650d25c26b968b7b39cab928f3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687a3e21a63058884986940928e92e71f2babe5e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbfd5b4a554be5c202b594bec3e7a00ab8ea7a4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c78c61197bbed07ccb7c39c1fbfc58c2733b30b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c222cfe613d251d6d7d7f9d93d8f01ecc32a4b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb394d8a117bffe2d461bb11ee9a83bd56b57786', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56763b765a1473e89aa0387d9ad3ff5f1a9f0f37', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd82f177fe86d0998f5d32fb9c300222d3cbe4e91', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7940cf06bd6377e66eb6b36d9cb17343e0a8a03', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050ac5e365c78ccac20fe4c604ab46e2e79e7cc5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60bf5491d55753bafc56e8d6418122a778db5942', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a7a194a0b655741e6b2605bb8bac0821f59c8fd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600fae68e088a4f6744e05c2ab76b718e8ba9b4c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d158137c1fe57e9f626ac1d4c5d70f91fae21d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe478653b4e393effe6766131e45a308a84d17a6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1ce481f76d66b4458002e2e7f5fb47c5695769e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02cc036aaa393ab0ce3c3644f717a113db23364e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee7163e44831634a6610320a5da2802f58ea75c4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2cc740b059528e848bb58c80b35c22f60603fd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6baad5aad40d76df4bf44070f8f50162902590', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0453aedecbbdcd7de5bef95554bc93126eedfeba', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '823847fc39f48e29577b7102ecc88772bd1829ef', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65585151bbbc21a425724dd6d9b7bd6fa3cf0db5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae8c7dec53a0819ac13ffe71f27ec3b68a9e895', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb369a836867e66199c907249a154d25e8303102', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750c2bf0e8ce5702f1eb0936194efaaf19911cad', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed92be2cb420ed5cad65acb25005e37abdeda24a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae501b3d4c528b4c0c38ab0b951ea50b1712345', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb041e69219a5299dc441caf3eca47f866c6d46', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c4411678ca4b9786b067e58ce0b449a11779d1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60c1cb8e32afe4d3c6bcd2a912815096b8a04d8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e35e644618aca6aebbcfeecdd087230ce35b12', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d0258011843112e5bae99b278ddb784dc7c29b6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96af08810f63e0ba310ad4290c4ad631f7a6427a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca53d0987efeb6303159d1ee4a5f1fcb4a703129', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d16d31b7654f4f7cff54214f9e56e8d51e3613', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1a24dc01b1db29ae6a792b1492acd7a5762792', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5153fde45dedc5db9a3f63b72b11a69ecb18b950', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b583b442b040a33b60a17e23847eb88974ba4a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6781338c1a3dd93590860606933c2b15af06edd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63bba44e6e7c040b0de694fc306f2eb56d49fd3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae753090de18f6eee044f14c45de2c5724c2c03b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f191c05e1b3483421b44cf0ad1ecaeed15877b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bad45f4258a67534a837334164afc80d3a841ab1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ccf6a49c0fa3e6fb89d075cea36b0ed4ac2717', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42573e75bdf277cc68a987cf995b7485eded6eb2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b74203140af60386d1b897068e1bb8dc1af5348', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852fcaa2250d25c959b9069a2c10bc6c410ea120', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5603afdebafe96faa87b0c07b53953b933095f54', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8258ea2a1ad927a4e96aa9dd1554991f0844a4b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd057454d605b99919b697211a691649d96cbc1e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c785e1253500dac4cf93401709161af012b229b1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42fbde462facc4977446d876b012b133afce779', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1981c818d7e62e4985af7f7bff47bc31f34988b4', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed7f14da2edfed3d0c2bf47aa32126ddd1368203', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f117dd7785e51bf82028f3a458ca8bf7de9e0b7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675f0ab53e0729165d41c028c3c3e0d75734cfc9', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6bed37971b31b3eba2d8667f5ba300876462e8', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b081c36d85bf9b4055569358458e6f5d2d59be6', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b228667cba287089430f784c7b9b1c5962c543', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e87fb5a54538ded198e74770e5e32304a5cf260e', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426470260bfcfa9f50ea165934179e63ceae7c51', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d36bdc9b8222c196a49b28d79c36a9c7825767', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dc6117d0a97d7faf8f335177a5cddd18a1da0f4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de79e40b4bfdf99df434dae7d7292df74130e39a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '933fe7882558f1693c9237b56d7d2f85d5b10da1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5437bb6dabb7e97fb5641ec55d0a1310c9bbfa', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59cccd06737ad52aeb50f3e3db6028356ac4364d', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b93937cc430cca9645c3b1b9ebe032f89223fb06', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9010f86685bd71342d27b61dbbb3cf86b9d50c2b', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cec25a4f6baef01708c512763c020c70a0e9af5d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '159b4a1b03f7c0c62253efb84b2dfa0b6eba5a15', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11d0a9ae592cacd7536858aa044f48704e6d1c97', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4f6ed947f4943999766dfc962e9ca1af146f50a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bed6b53083421fa205b0be4efec4943b020a292a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec55515c6745683714d3e66747036078005339e8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1048d49fc78235f7a20705ed27d2b1c4dd33a04d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f966e8400096e04fa2135fa43f7f4862c05e6c3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '347e7963fe20362ce6177cb3252b930b097fce53', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fafc549684b1a6a4f0782c4514b8af6f4c44f3f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7d31f968d6b569599e4abeb0827d6131c952311', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ac92f5164332884d5bf45e006e33d6fdbef7ca', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e21c0fbf3d70129af020a11b6aebe2e1ac00a5a2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '754eb757d4d9de49a473e057e421b734f751827a', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32799be3ae88bf40b4b570d9f31bfc2be59a06ea', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a24ab17cc9bf6ffac5c44d69f3a2df86ebdd75', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ce37c9817bd309343baae525ff55cc6056d12d', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76584355e6d79cf7b8b85e8dcfecc9a9ff35948', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c7f3664ee067b51aa4a4c1243459a698e29d74b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eb46805fb9b4538bed49fe8b84e68eef4439349', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cee960a5890bfa574f49dca7a340e3fb71121eb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d631c0579acbb8797f7b73eaa372a748ba85148', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cc5e30fc8d1e51cd1978af4ec91fe5942028f7c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2532e58dd244a76a46fbb524214bba61bec016c3', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7cd8490bb13e4acab5e48c4d37bd613cc76ea70', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e4499766ab630c368e3b6d06ec389793076fda', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e1f7c55c5fe7685c05733e2cd4dac801877cd02', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccb5242e69ad01e6afadf800e52286627928bcd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1886d9e36058052f5f79cc7bbf3586eb21869d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a32cf67a4e6b98aab1cd28424def18cce4bb52', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d61ac41a03b4472d9018069df4c59a6ca7025ea', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7de299388a662b9ec89d2f8d29307960c023736', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e665d637128f4ab52f726e033e78dd7cc052b3e', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1455258807,Implement FaceQuadratureRule for RefPrism and RefPyramid ,"Closes #772 
Changes the transformations used in `create_face_quad_rule` to use the ones in FerriteViz as they're beneficial for optimizing #743 and IIUC make more sense in general as they respect the normals directions.
Also, the transformation is separated into its own functions such that they can be reused as in #743.
Edit: test coverage should improve with interface test, because it covers face->cell transformations ",True,779,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/779,https://github.com/Ferrite-FEM/Ferrite.jl/pull/779,closed,321,123,9,30,3,51,1,0,[{'name': 'feature'}],2023-07-30 20:21:04+00:00,2023-08-29 09:51:53+00:00,2554249.0,"29 days, 13:30:49","[{'comment_id': 1279297710, 'comment_body': '1) Should this ""new"" function have the same function name when it returns the local node indices? \r\n2) Is it possible to use this function to create the existing `faces(::AbstractCell)` functions? Seems bad to duplicate the numbering if it can be avoided without performance losses...', 'comment_created': datetime.datetime(2023, 7, 31, 13, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279299620, 'comment_body': 'Perhaps a short note for each if/how the intervals are shifted? (And remove the old code)', 'comment_created': datetime.datetime(2023, 7, 31, 13, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279301683, 'comment_body': '1) Perhaps use regular comments, `#` above each specialization to avoid getting all these as docstrings. The general descriptions on the top should suffice IMO.\r\n2) Is it necessary to support `Vector` as input? Do we use that?\r\n', 'comment_created': datetime.datetime(2023, 7, 31, 13, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279302811, 'comment_body': 'Re-enable?', 'comment_created': datetime.datetime(2023, 7, 31, 13, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279303748, 'comment_body': 'Perhaps a ""harder"" test would be a linear combination of coordinates on the face, to avoid just checking exactly the reference coordinates?', 'comment_created': datetime.datetime(2023, 7, 31, 13, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279316641, 'comment_body': 'Thanks for the review! I think the name makes sense for the input, however, `reference_faces` might be better  given the input is a reference shape. What do you think?', 'comment_created': datetime.datetime(2023, 7, 31, 13, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1279316956, 'comment_body': 'I need to stop forgetting commented stuff :""D', 'comment_created': datetime.datetime(2023, 7, 31, 13, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1279319403, 'comment_body': ""The `Vector` was used in #743 IIRC, I'll check if it can be removed (and probably it can, I think I changed its calls in #743 but didn't remove `Vector`)"", 'comment_created': datetime.datetime(2023, 7, 31, 13, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1279424654, 'comment_body': 'Personally, I find a separate name easier, and `reference_faces` sounds good to me. ', 'comment_created': datetime.datetime(2023, 7, 31, 14, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1279766952, 'comment_body': 'The copy test fails because of NaNs IIUC\r\n```julia\r\n    detJdV = fill(T(NaN), max_n_qpoints, n_faces)\r\n```\r\nHow about changing the default to zeros?\r\n', 'comment_created': datetime.datetime(2023, 7, 31, 19, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1279845810, 'comment_body': 'btw it looks like these throws are redundant because there are outer checks IIUC. Should I remove them or add tests for them anyways? (IDK if user would access face weighted normals directly through this function instead of using facevalues)', 'comment_created': datetime.datetime(2023, 7, 31, 20, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280229132, 'comment_body': ""The reason for filling with NaN's is to catch cases when it wasn't reinit!:ed. (For example if the user forgot)\r\n\r\nAbove that test case, the fv is reinited, right?\r\nSo it should not be filled with NaN, and also not the copied version"", 'comment_created': datetime.datetime(2023, 8, 1, 7, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280233861, 'comment_body': ""If you can show that there is a significant performance benefit by removing the error (could be), then that would be fine, but should probably be called `_unsafe_weighted_normal` or something (I don't think we do this at other places in Ferrite at the moment, although `shape_value(::Interpolation, ...)` could be a candidate, xref #766 )\r\n\r\nBut I would leave that for a separate PR "", 'comment_created': datetime.datetime(2023, 8, 1, 7, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280244115, 'comment_body': 'The thing is IIUC for pyramids and prisms not all faces has the same number of quadrature points. which makes some entries in the matrix NaNs even after init for the faces with nquadpoints <max_n_qpoints', 'comment_created': datetime.datetime(2023, 8, 1, 7, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280253826, 'comment_body': ""Aha, I'm not sure what to do here.\r\n\r\nOne option would be to fill only those entries with zero on construction to make them behave equally, but let's ask @fredrikekre on this one..."", 'comment_created': datetime.datetime(2023, 8, 1, 8, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280258674, 'comment_body': '~Or fill them with zeros on reinit~ doing that on construction sounds more efficient', 'comment_created': datetime.datetime(2023, 8, 1, 8, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280290202, 'comment_body': 'I don\'t see performance benefit (or maybe I should use something other than `@benchmark` to benchmark operations that take about 1ns :""D)\r\n\r\nMaybe I can add some tests for these error paths then to improve test coverage.', 'comment_created': datetime.datetime(2023, 8, 1, 8, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280499417, 'comment_body': ""Yes, it is hard to benchmark due to const propagation I can imagine. But let's leave that for a separate issue. "", 'comment_created': datetime.datetime(2023, 8, 1, 11, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280506860, 'comment_body': 'I think these methods belong in face_integrals.jl where the craete_face_quad_rule is', 'comment_created': datetime.datetime(2023, 8, 1, 11, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1280511085, 'comment_body': 'Thanks for the review!\r\nWill move them and push after CI finishes (making sure no older version break, had some issues with 1.6 before :""D)', 'comment_created': datetime.datetime(2023, 8, 1, 11, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1280519545, 'comment_body': 'A third option could be to just change the test to allow, add a function in the tests along the lines of \r\n```julia\r\ncheck_equal_or_nan(a::Number, b::Number) = a==b || (isnan(a) && isnan(b))\r\ncheck_equal_or_nan(a::Vector, b::Vector) = all(check_equal_or_nan, a, b)\r\n```\r\nThis would (1) do the proper testing and (2) give out NaN if one by mistake (somehow) tries to access the uninitialized values. ', 'comment_created': datetime.datetime(2023, 8, 1, 11, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1280585577, 'comment_body': ""I'll push a commit for better errors/coverage after it passes locally, hopefully this fully covers the PR"", 'comment_created': datetime.datetime(2023, 8, 1, 12, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286441358, 'comment_body': 'Can we do this without interpolation somehow? This kind of stuff breaks GPU compilation.', 'comment_created': datetime.datetime(2023, 8, 7, 22, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286442420, 'comment_body': 'I like the idea! Can we come up with a better name for the routine maybe?', 'comment_created': datetime.datetime(2023, 8, 7, 22, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286443016, 'comment_body': 'Can you give a reference to oriented face in the manual? Users might not be familiar with the concept.', 'comment_created': datetime.datetime(2023, 8, 7, 22, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286443595, 'comment_body': 'Is there a performance hit to this operation? If so, how severe and can we optimize it?', 'comment_created': datetime.datetime(2023, 8, 7, 22, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286444206, 'comment_body': 'What is the problem here?\r\n', 'comment_created': datetime.datetime(2023, 8, 7, 22, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286444627, 'comment_body': 'Good catch! ', 'comment_created': datetime.datetime(2023, 8, 7, 22, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286760486, 'comment_body': 'Thanks!\r\nWill think about a better one.', 'comment_created': datetime.datetime(2023, 8, 8, 8, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286760661, 'comment_body': ""Does throwing break GPU stuff or having a variable in the error?\r\nI noticed unsafe stuff in #766 if that's what you mean. Also, @KnutAM suggested something like `_unsafe_weighted_normal` if it has performance benefits but I couldn't measure the benefit :smile: "", 'comment_created': datetime.datetime(2023, 8, 8, 8, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286762955, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2023, 8, 8, 8, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286765148, 'comment_body': ""Knowing what the input face was isn't super useful, so perhaps it can be removed. Or you can keep it as is until  this actually runs on GPU."", 'comment_created': datetime.datetime(2023, 8, 8, 8, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1286766069, 'comment_body': ""It's that the copy test fails for matrices with NaN entries, and for cells with faces that have different number of dofs/quadpoints we get NaN entries for the extra entries for the faces with ndofs/nqp < max ndofs/nqp"", 'comment_created': datetime.datetime(2023, 8, 8, 8, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286769920, 'comment_body': ""I don't think there's much of a performance hit\r\nThe PR:\r\n```julia\r\njulia> @benchmark Ferrite.faces($cell)\r\nBenchmarkTools.Trial: 10000 samples with 1000 evaluations.\r\n Range (min … max):  2.945 ns … 31.522 ns  ┊ GC (min … max): 0.00% … 0.00%\r\n Time  (median):     2.956 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   2.994 ns ±  0.791 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\r\n\r\n         ▁  ▂ ▂  ▃ ▃  ▅ ▆  █ █  ▇ ▇  ▇ ▇  ▄ ▁                 \r\n  ▂▁▃▁▁▅▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁█▁█▁▁▇▁▇▁▁▆▁▆▁▁▅▁▂ ▄\r\n  2.94 ns        Histogram: frequency by time        2.97 ns <\r\n\r\n Memory estimate: 0 bytes, allocs estimate: 0.\r\n ```\r\n Master:\r\n ```julia\r\n julia> @benchmark Ferrite.faces($cell)\r\nBenchmarkTools.Trial: 10000 samples with 1000 evaluations.\r\n Range (min … max):  2.949 ns … 30.682 ns  ┊ GC (min … max): 0.00% … 0.00%\r\n Time  (median):     3.024 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   3.187 ns ±  1.418 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\r\n\r\n   █▇                                                         \r\n  ▅██▆▆▄▄▄▃▃▆▄▃▇▇▄▄▄▃▃▂▂▂▂▃▃▃▃▃▂▂▂▂▂▂▂▂▂▃▂▁▁▂▁▂▂▁▁▁▁▁▁▁▁▁▂▂▃ ▃\r\n  2.95 ns        Histogram: frequency by time        3.69 ns <\r\n\r\n Memory estimate: 0 bytes, allocs estimate: 0.\r\n ```"", 'comment_created': datetime.datetime(2023, 8, 8, 8, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286933315, 'comment_body': 'We should be able to fix this by introducing some ""matrix""-like struct with varying row/col size. I.e. something like\r\n```julia\r\nstruct VaryingMatrix{TOV, TDV}\r\n   offsets::TIV\r\n   data::TDV\r\nend\r\n```\r\nwhere the access with two indices first looks up the offset in the offset vector and the second index computes the actual element in the data vector via data[offset_index[i]+j], where the offsets start at 0. We should then start using this all over the codebase. Does this make sense? cc @fredrikekre separate PR maybe?', 'comment_created': datetime.datetime(2023, 8, 8, 10, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1286975168, 'comment_body': ""I was thinking of using a vector of matrices with each matrix having its own rows/cols instead of a 3-D array `Array{T, 3}` but I'm not sure what the performance impact would be due to changing memory layout"", 'comment_created': datetime.datetime(2023, 8, 8, 11, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1286995731, 'comment_body': 'Yea, we should try to keep the memory continuous here, because there is potentially quite a big performance hit, depending on the system.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1290950524, 'comment_body': 'This is only applicable for prism and pyramid I think?\r\n```suggestion\r\nfunction create_face_quad_rule(cell_T::Type{RefShape}, quad_faces::Vector{Int}, w_quad::Vector{T}, p_quad::Vector{Vec{N, T}}, tri_faces::Vector{Int}, w_tri::Vector{T}, p_tri::Vector{Vec{N, T}}) where {N, T, RefShape <: Union{RefPrism, RefPyramic}}\r\n```', 'comment_created': datetime.datetime(2023, 8, 11, 6, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1290957830, 'comment_body': ""I don't see where this is used in this PR?"", 'comment_created': datetime.datetime(2023, 8, 11, 6, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1291303148, 'comment_body': ""I checked it. It's not used directly but it's used to get `nfaces` for reference shapes which is used in `create_face_quad_rule`. It'll be used in the other PR in a more direct way, but I think it's necessary here too"", 'comment_created': datetime.datetime(2023, 8, 11, 12, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1291597705, 'comment_body': 'Sorry, I got this backwards. Reading the docstring I think it should be rather `face_to_element_transformation`.', 'comment_created': datetime.datetime(2023, 8, 11, 17, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1291603505, 'comment_body': ""Nah It's my bad I missed it :D\r\nWill rename once back to branch"", 'comment_created': datetime.datetime(2023, 8, 11, 17, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1302714876, 'comment_body': ""```suggestion\r\nTransform quadrature point from face's reference (N-1)D coordinates to ND coordinates on the cell's face.\r\n```"", 'comment_created': datetime.datetime(2023, 8, 23, 9, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1302715121, 'comment_body': '```suggestion\r\nCompute the vector normal to the face weighted by the area ratio between the face and the reference face.\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 9, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1302715728, 'comment_body': '```suggestion\r\nThis is computed by taking the cross product of the Jacobian components that align to the face local axis.\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 9, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303254712, 'comment_body': '```suggestion\r\nfunction create_face_quad_rule(::Type{RefShape}, w::Vector{T}, p::Vector{Vec{N, T}}) where {N, T, RefShape <: AbstractRefShape}\r\n    n_points = length(w)\r\n    face_quad_rule = QuadratureRule{RefShape, T, getdim(AbstractCell{RefShape})}[]\r\n    for face in 1:nfaces(RefShape)\r\n        new_points = [face_to_element_transformation(N != 0 ? p[i] : Vec(zero(T)), RefShape, face) for i in 1:n_points] # ξ = 1-t-s, η = s, ζ = 0\r\n```\r\nI think the compiler prefer this pattern.\r\n\r\nAlso, the comment at the end of the line seems outdated?', 'comment_created': datetime.datetime(2023, 8, 23, 16, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303256437, 'comment_body': '```suggestion\r\nfunction create_face_quad_rule(::Type{RefShape}, quad_faces::Vector{Int}, w_quad::Vector{T}, p_quad::Vector{Vec{N, T}}, tri_faces::Vector{Int}, w_tri::Vector{T}, p_tri::Vector{Vec{N, T}}) where {N, T, RefShape <: Union{RefPrism, RefPyramid}}\r\n    n_points_quad = length(w_quad)\r\n    n_points_tri = length(w_tri)\r\n    face_quad_rule = Array{QuadratureRule{RefShape, T, getdim(AbstractCell{RefShape})}}(undef, nfaces(RefShape))\r\n    for face in quad_faces\r\n        new_points = [face_to_element_transformation(N != 0 ? p_quad[i] : Vec(zero(T)), RefShape, face) for i in 1:n_points_quad]\r\n        face_quad_rule[face] = QuadratureRule{RefShape, T}(w_quad, new_points)\r\n    end\r\n    for face in tri_faces\r\n        new_points = [face_to_element_transformation(N != 0 ? p_tri[i] : T[], RefShape, face) for i in 1:n_points_tri]\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 16, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303266253, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 16, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303340643, 'comment_body': 'You mean\r\n```julia\r\n# For cells with mixed faces\r\n```\r\n?\r\nI think it still works because the method underneath is for prisms and pyramids', 'comment_created': datetime.datetime(2023, 8, 23, 17, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1303407766, 'comment_body': 'I meant `ξ = 1-t-s, η = s, ζ = 0`', 'comment_created': datetime.datetime(2023, 8, 23, 18, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1303418999, 'comment_body': ""Ah, you're right, my bad."", 'comment_created': datetime.datetime(2023, 8, 23, 18, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': '0af8b542caa4bf0d3010643040e5647026354ddc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5002c715285849278d950f400a7670a4ea612c37', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264eda2884483f79cd573518c5713f412d217cd6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5a40c636dc637377cbc51873460f972c1d8450a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0343907481e886da979273a9cc8053e2a79ecca8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40bda7f75d99998e89dff417630cd0f30df107f3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '049e62a4234d256fe528c1d614d8b48aba268c88', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9644a6950966f9aa8027c2578ae27593b068b12', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d34744d5060baeb5ecc51c53653ab2dbc12d68', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc396ca8405b7e00a9560c653412f3dc33e1cee5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df49e1df56f30aee0e56bbeeb2ac848c3be0438', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b10ce509d15a107825eb4ac785ffeab0ab859a9', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3970bf955d51e7c5b643b9faccdd037b406fa446', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f89faa4e52ff37c579a456acbf174e77c533ffa', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f72b9081232517f3b76f2309b2ed5d664cfc5e9c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f495ba0830f679d565b2b973b8be37826e3d339', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1474d602448ae237bae5288d6b148bd72664cddc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f7fd540a2bf4b4ea209a543eac5ce37c17d0ba', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd502de2c922fe989db7ce3a78b7f74dfef94cb9b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb9fb9c68889656aef98bf5fcb3fe4e0fe5424d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230c174341d139f100347fd4a36a5e98fe7d363d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '748cec9641dbb9e762e74be1025bbc2d62247296', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f427529d3f0a6dfe10e8a2150cfb62e37564a66e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b896373235e78a8bc7fefdf02bbbadc69aceb8f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e04524974e99f4ff6eb4b80a8b1d3344593959c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b244def78b6530c3559e0fe0671225bfdbfc5e6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce7cc4fded0200318b740e257bf06afe15baa02', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '809cb8dd4cc8d052de0221f62f4b9d48a23857ec', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4be789bc786fd085fb356cb63b1259fc8a4f2378', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73650a3a95918dc7cd90d5d955e182daf23d037e', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1397258858,`InterfaceValues` for DG interface integration,"Tasks:

- [x] `InterfaceValues`
- [x] syncing/transforming quadrature points
- [x] docs
- [x] tests


##  After merge

* [x] open issue to discuss mixed grid support for `InterfaceValues`
* [ ] check subdomain support and possibly open issue
* [ ] open issue about the investigation of mortaring with the new infrastructure",True,743,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/743,https://github.com/Ferrite-FEM/Ferrite.jl/pull/743,closed,1190,45,18,158,18,157,2,0,"[{'name': 'feature'}, {'name': 'gsoc23'}]",2023-06-18 19:53:03+00:00,2023-12-03 02:39:38+00:00,14453195.0,"167 days, 6:46:35","[{'comment_id': 1233861170, 'comment_body': ""Just noticed this one (haven't looked at the rest of the code), but why is this one doubled? Presumably the idea is that both facevalues share a quadrature rule?"", 'comment_created': datetime.datetime(2023, 6, 19, 10, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1233863190, 'comment_body': ""I fixed it locally but I don't want to push not to rerun CI 😄 I was doubling nbasefunctions and did this by mistake"", 'comment_created': datetime.datetime(2023, 6, 19, 10, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234893913, 'comment_body': 'Although this case is more complicated, you could potentially re-use some of the re-use from `CellCache` as done in #495 ', 'comment_created': datetime.datetime(2023, 6, 20, 8, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1234901375, 'comment_body': 'Sure, thanks!', 'comment_created': datetime.datetime(2023, 6, 20, 8, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234912925, 'comment_body': 'So if I revert to `InterfaceCache`/`InterfaceIterator` should I revert this also or let `FaceValues` be initialized by `InterfaceCache`?\r\n@KnutAM ', 'comment_created': datetime.datetime(2023, 6, 20, 8, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234913063, 'comment_body': ""If it's only for interfaces then we may want to exclude the boundary faces from within the iterator?\r\n```julia\r\nif set === nothing\r\n  set = findall(face -> !isempty(topology.face_neighbor[face[1],face[2]]),topology.face_skeleton)\r\nend\r\n```"", 'comment_created': datetime.datetime(2023, 6, 20, 8, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1234948481, 'comment_body': 'As I understand, only the second method would be needed. If we want a nice way to iterate over single faces, we could do something like in #495 (and in combination with the current PR, the iterator interface would have even more code reuse). \r\n', 'comment_created': datetime.datetime(2023, 6, 20, 8, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1239755299, 'comment_body': 'These would be moved to `InterfaceCache` in the other PR.', 'comment_created': datetime.datetime(2023, 6, 23, 12, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239762078, 'comment_body': ""This one is the same as in `copy` test for `FaceValues` but doesn't work. * Pointers are different, values are the same*"", 'comment_created': datetime.datetime(2023, 6, 23, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239762343, 'comment_body': ""This isn't used for now."", 'comment_created': datetime.datetime(2023, 6, 23, 12, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239792838, 'comment_body': 'Maybe this is also a good oppurtunity to merge the different orientation interfaces.', 'comment_created': datetime.datetime(2023, 6, 23, 13, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1239803476, 'comment_body': ""I'm not sure yet how to use this information to sync quadrature points, however, they're currently synced by matching spatial coordinates"", 'comment_created': datetime.datetime(2023, 6, 23, 13, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239821318, 'comment_body': 'Note that this method can fail (I literally debugged a similar an issue yesterday).\r\n\r\nFor each face you can find 2 affine transformations (fully in reference space). Element 1 -> Face and Face -> Element 2 (as well as the ""inverse"" mappings). This way the quadrature point on the face of element 1 can be transferred to element 2 by applying both transformations. If noone made touchy-touchy to the face and node definitions recently then you can derive the 3D version from this code https://github.com/Ferrite-FEM/FerriteViz.jl/blob/c5b812eb31786525dd5d2ef3779f39fd9550492a/src/utils.jl#L552-L574 , which is exactly the transformation from face to element I talked about.\r\n\r\nEdit: Note that this is just a part of what you have to to, because it does not deal with the mismatch in relative orientation of the face and the element\'s local face.', 'comment_created': datetime.datetime(2023, 6, 23, 13, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1239850698, 'comment_body': ""You're talking about matching coordinates, right?\r\nI'm using the 3D coordinates in \r\nhttps://github.com/AbdAlazezAhmed/Ferrite.jl/blob/c28f0b2ebc213caf2c8b7a30845ccdb11cc7ffd7/src/FEValues/interface_values.jl#L149-L156\r\nto get the quadrature point index and use it if we're evaluating using the neighbor facevalues"", 'comment_created': datetime.datetime(2023, 6, 23, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1239853628, 'comment_body': 'Yes. And if you go from element (e.g. 3D) to the face (e.g. 2D) and again to the element (e.g. 3D again), then you still have 3D coordinates.', 'comment_created': datetime.datetime(2023, 6, 23, 13, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1241317626, 'comment_body': ""If this passes I assume the transformation is working * I see it failed for 1.6, will check it. It passed locally 1.8*. How do you suggest using it? I was thinking of mutating the neighbor's `FaceValues` `qr.points` and recalculating `fv.M` when reinitializing the interface.\r\nEdit : It fails 1.6 because of swapping in array"", 'comment_created': datetime.datetime(2023, 6, 25, 23, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1242280499, 'comment_body': ""Turns out it's because not all faces are reinited (only interfaces) there are NaNs which breaks ==\r\nThis test is already covered in facevalues anyways."", 'comment_created': datetime.datetime(2023, 6, 26, 14, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1243438892, 'comment_body': 'As @fredrikekre and @termi-official  pointed out, [some use the definition with normals ](https://www.researchgate.net/publication/211746421_Unified_Analysis_of_Discontinuous_Galerkin_Methods_for_Elliptic_Problems)and [some use (here - there) definition](https://onlinelibrary.wiley.com/doi/pdf/10.1002/nme.1667). This implements both and defaults to using normals.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1243693619, 'comment_body': 'Docs incomplete: Explain what `here` is. We might also find a more descriptive variable name for this.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243695084, 'comment_body': 'Docs incomplete: Clarify what is the difference between `coords` and `ncoords`, as well as `f` and `nf`.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243698275, 'comment_body': 'Is the implementation missing?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243703071, 'comment_body': 'Maybe separate out the docstring.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243705145, 'comment_body': 'Why do we need `dof_range` here? Also, note the possible name collision with the function.\r\n\r\nDocstring for `here`', 'comment_created': datetime.datetime(2023, 6, 27, 13, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243705927, 'comment_body': 'style\r\n```suggestion\r\nfunction function_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector, dof_range = eachindex(u); here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243706852, 'comment_body': 'I think we might want to revisit this logic here.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243707491, 'comment_body': 'style\r\n```suggestion\r\nfunction function_symmetric_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector{<:Vec}; here::Bool = true)\r\nbegin\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243708876, 'comment_body': '```suggestion\r\nfunction function_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector{<:Vec}; here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243710142, 'comment_body': 'style\r\n```suggestion\r\nfunction function_value(iv::InterfaceValues, q_point::Int, u::AbstractVector, dof_range = eachindex(u); here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243711348, 'comment_body': 'style\r\n```suggestion\r\nfunction function_symmetric_gradient(iv::InterfaceValues, q_point::Int, u::AbstractVector, dof_range = eachindex(u); here::Bool = true)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243711638, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243712162, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243717495, 'comment_body': 'Can you elaborate on the design rationale?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243719617, 'comment_body': 'Is this really true? It seems like the default is the default interpolation of the respective geometry.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243725991, 'comment_body': '```suggestion\r\nReturn the normal at the quadrature point `qp` on the interface. \r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 13, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243728104, 'comment_body': 'Probably I should dig here: Why do you differentiate between shape functions and ""nodal"" functions? What exactly is the latter?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243733065, 'comment_body': 'As discussed in the file `common_values.jl` we should specify the variable name `here` and add docs.\r\n\r\nWe should also just use the term `face` instead of `facet` for codim 1 entities to stay consistent with the remaining docs.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243738808, 'comment_body': 'Why should we forbid this? We can have continuous interpolations but might want to evaluate the jump in the gradients without computing the full gradient field.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243741424, 'comment_body': 'I think this is fine here, because the functionality is specific to ""interface stuff"".', 'comment_created': datetime.datetime(2023, 6, 27, 13, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243744295, 'comment_body': 'While I fully understand the rationale I am not sure what the performance implications are, because the function now has different return values depending on the input parameters. Fredrik might can give you more information on this.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243746521, 'comment_body': 'If this is a problem, then lets use the ""problematic"" definition without normal dotting and leave the responsibility to the user to do the right thing for their formulation.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243748384, 'comment_body': ':new_moon_with_face: ', 'comment_created': datetime.datetime(2023, 6, 27, 13, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243769799, 'comment_body': 'Can we add test coverage for `Ferrite.faces(::Type{AbstractRefShape})` to check if it is consistent with `Ferrite.faces(::AbstractCell)` ~~and the linear faces of the geometric interpolation~~ (latter is probably a bit difficult)?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243781727, 'comment_body': 'This one is really missing a doc string, because it is not obvious what happens here (partially because it is different from the `SurfaceOrientationInfo` struct above). I guess this describes how to transform the face f1 into f2 on the conforming interface described by both faces?\r\n\r\nWhy `AbstractArray` for a transformation?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243785137, 'comment_body': 'Any reason why this should be vector of vectors instead of a matrix or tensor?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243786722, 'comment_body': 'We should be able to provide an optimized constructor by also providing a topology.', 'comment_created': datetime.datetime(2023, 6, 27, 13, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1243822184, 'comment_body': ""Well, I thought if it's deprecated there why not deprecate it here 😂"", 'comment_created': datetime.datetime(2023, 6, 27, 14, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245099060, 'comment_body': 'If I understand correctly, `u` is passed as the dof from both elements on the interface, so this part makes sure if we pass `dof_range` it does not contain dof from the other element, and in case no `dof_range` is passed it takes the first/second half depending on which element we use.\r\nI see this may be problematic in case of continuous interpolations, is this what you meant?', 'comment_created': datetime.datetime(2023, 6, 28, 11, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245101536, 'comment_body': ""I think it's `function_*` stuff, where we have the function value at the nodes"", 'comment_created': datetime.datetime(2023, 6, 28, 11, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245170600, 'comment_body': 'You mean e.g. `function_value`?', 'comment_created': datetime.datetime(2023, 6, 28, 12, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245224830, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2023, 6, 28, 13, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245242578, 'comment_body': '`Nodal` usually refers to e.g. nodal interpolation functions like for example `Lagrange`, but `function_value` can also evaluate e.g. `Nedelec` interpolations, which are not nodal (but integral), because the basis function is associated to an edge or face. For the integration and quadrature points it is not so common to use the term node (although they are technically also nodes).', 'comment_created': datetime.datetime(2023, 6, 28, 13, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245346153, 'comment_body': ""I'm not sure how we'd use topology here, `InterfaceOrientationInfo` will be calculated inside `InterfaceIterator` which provides `this_face::FaceIndex, other_face::FaceIndex` from topology, I mean we only need these two from topology and if we pass topology we'd still need to pass `this_face::FaceIndex` unless we're buffering it for all interfaces If I understand correctly. "", 'comment_created': datetime.datetime(2023, 6, 28, 14, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245371474, 'comment_body': 'Ah sorry, I misread here. You are right.', 'comment_created': datetime.datetime(2023, 6, 28, 15, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245386904, 'comment_body': 'Yes, this is on example. I had no time to do a full audit of the code, so I might misunderstand something fundamental here, but you introduce the input argument `dof_range` which defaults to `eachindex(u)`. Now these lines here exactly check for `dof_range == eachindex(u)`, which raises for me the question why `dof_range` has been introduced as an input argument in the first place. Can you elaborate a bit on the design here?', 'comment_created': datetime.datetime(2023, 6, 28, 15, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245410218, 'comment_body': 'I think we are missing test coverage for mixed elements, e.g. meshes with triangles and quadrilaterals.', 'comment_created': datetime.datetime(2023, 6, 28, 15, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1245435551, 'comment_body': ""Doing simple testing with `@Benchmark`:\r\n```julia\r\njulia> @benchmark shape_value_jump(iv, 1, 1, true)\r\nBenchmarkTools.Trial: 10000 samples with 600 evaluations.\r\n Range (min … max):  199.667 ns …  3.141 μs  ┊ GC (min … max): 0.00% … 91.83%\r\n Time  (median):     207.167 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   214.168 ns ± 94.643 ns  ┊ GC (mean ± σ):  1.47% ±  3.16%\r\n\r\n  ▅█▂▁▄▅▇▂▂▄▂          ▁▂▂▁ ▁▁▁▁                               ▂\r\n  ████████████▇██▇▅▇▄▆██████████▇▆▆▅▅▅▆▄▆▆▆▆▅▅▁▅▆▆▆▅▅▁▆▅▄▃▅▅▃▅ █\r\n  200 ns        Histogram: log(frequency) by time       303 ns <\r\n\r\n Memory estimate: 96 bytes, allocs estimate: 4.\r\n \r\n julia> @benchmark shape_value_jump(iv, 1, 1, false)\r\nBenchmarkTools.Trial: 10000 samples with 870 evaluations.\r\n Range (min … max):  136.092 ns …  1.361 μs  ┊ GC (min … max): 0.00% … 0.00%\r\n Time  (median):     142.874 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   146.104 ns ± 30.703 ns  ┊ GC (mean ± σ):  0.39% ± 2.07%\r\n\r\n  ▃█▆▄▂▇▆▄▁▁ ▁▂▂▃▄▂▁▁▂▃                                        ▂\r\n  ██████████████████████▇▇▇▇▅▆▆▅▆▃▅▃▅▄▄▄▄▄▅▄▄▄▃▃▄▄▃▄▄▄▄▃▃▄▄▄▄▃ █\r\n  136 ns        Histogram: log(frequency) by time       215 ns <\r\n\r\n Memory estimate: 32 bytes, allocs estimate: 2.\r\n```\r\n\r\nWhich isn't far from that of `FaceVakues` (in terms of allocation, 2~3 times slower in terms of time? I mean it does operations not just accessing tensor)?\r\n\r\n```julia\r\njulia> @benchmark shape_value(iv.face_values_a, 1, 1)\r\nBenchmarkTools.Trial: 10000 samples with 980 evaluations.\r\n Range (min … max):  59.184 ns …   3.115 μs  ┊ GC (min … max): 0.00% … 97.14%\r\n Time  (median):     62.245 ns               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   74.055 ns ± 104.818 ns  ┊ GC (mean ± σ):  5.41% ±  3.97%\r\n\r\n  █▇▆▅▁     ▁▂                                                 ▁\r\n  ██████▇▇▆▆████▆▅▆▅▄▅▅▅▄▄▃▄▆▅▅▂▅▃▄▄▄▄▄▃▃▃▄▂▄▄▂▃▂▃▄▅▆▇▅▇▇▆▄▄▅▆ █\r\n  59.2 ns       Histogram: log(frequency) by time       231 ns <\r\n\r\n Memory estimate: 80 bytes, allocs estimate: 2.\r\n```\r\n"", 'comment_created': datetime.datetime(2023, 6, 28, 15, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1245904594, 'comment_body': ""I'm not sure why it is there, I added it as it was there for `FaceValues` implementation."", 'comment_created': datetime.datetime(2023, 6, 28, 23, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1248863425, 'comment_body': 'If I understand correctly,  face->face transformation is predetermined, so we can make a function that maps quadrature point indices instead of transforming coordinates or store the transformation matrices and lookup the one we need.', 'comment_created': datetime.datetime(2023, 7, 1, 14, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1248863470, 'comment_body': ""There's probably a better way to do this"", 'comment_created': datetime.datetime(2023, 7, 1, 14, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1248872942, 'comment_body': 'updated benchmarks:\r\n\r\n```julia\r\njulia> @benchmark shape_value(facevalues1, 1, 1)\r\nBenchmarkTools.Trial: 10000 samples with 995 evaluations.\r\n Range (min … max):  26.734 ns …  1.063 μs  ┊ GC (min … max): 0.00% … 95.63%\r\n Time  (median):     27.236 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   29.875 ns ± 18.182 ns  ┊ GC (mean ± σ):  1.00% ±  1.65%\r\n\r\n  ▇█▇▄              ▂▁    ▄▄▃  ▃▆▅▄                     ▂▂    ▂\r\n  ████▇▆▄▁▁▁▆▅▆▆█▇▄▄██▅▃▄▇███▇▆██████▇▇▆▇▇▆▆▅▆▆▆▅▆▇▆▆▆▇████▇▅ █\r\n  26.7 ns      Histogram: log(frequency) by time      39.5 ns <\r\n\r\n Memory estimate: 16 bytes, allocs estimate: 1.\r\n\r\njulia> @benchmark shape_value_average(iv, 1, 1)\r\nBenchmarkTools.Trial: 10000 samples with 993 evaluations.\r\n Range (min … max):  30.312 ns …  1.178 μs  ┊ GC (min … max): 0.00% … 95.08%\r\n Time  (median):     30.715 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   33.991 ns ± 19.996 ns  ┊ GC (mean ± σ):  0.92% ±  1.60%\r\n\r\n  █▅         ▄▄▁▆▃         ▂▂                                 ▂\r\n  ███▇▁▄▃▁███████████▇▇▇▆█▇██▇▆▅▅▇▆▆▆▆▅▆▅▄▄▄▄▄▅▅▆▄▄▅▄▄▃▃▄▅▁▁▃ █\r\n  30.3 ns      Histogram: log(frequency) by time      57.4 ns <\r\n\r\n Memory estimate: 16 bytes, allocs estimate: 1.\r\n \r\njulia> @benchmark shape_value_jump(iv, 1, 1, true)\r\nBenchmarkTools.Trial: 10000 samples with 993 evaluations.\r\n Range (min … max):  35.347 ns …  4.546 μs  ┊ GC (min … max): 0.00% … 95.60%\r\n Time  (median):     38.167 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   62.274 ns ± 88.570 ns  ┊ GC (mean ± σ):  2.21% ±  2.36%\r\n\r\n  █▅▃▄▄▂                      ▁▁▁▁▁                           ▁\r\n  ███████▆▆▆▆▆▆▅▅▆▅▆▅▆▆▅▆▆▅▇▇█████████▇███▇▇▇▇█▇▆▇▆▅▆▅▅▅▅▃▄▄▄ █\r\n  35.3 ns      Histogram: log(frequency) by time       253 ns <\r\n\r\n Memory estimate: 32 bytes, allocs estimate: 1.\r\n\r\njulia> @benchmark shape_value_jump(iv, 1, 1, false)\r\nBenchmarkTools.Trial: 10000 samples with 993 evaluations.\r\n Range (min … max):  34.038 ns …  1.072 μs  ┊ GC (min … max): 0.00% … 94.32%\r\n Time  (median):     35.146 ns              ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   38.028 ns ± 18.710 ns  ┊ GC (mean ± σ):  0.79% ±  1.64%\r\n\r\n  ▇██▅▄▂    ▁▂▅▆▄▄▄▄▅▃▁   ▂▁▁▁ ▁▁▁                            ▂\r\n  ██████▅▆▅▇████████████▇▇████████▇▄▇▁▆▅▄▄▅▃▄▄▅▅▆▅▄▁▆▅▅▄▄▃▅▅▆ █\r\n  34 ns        Histogram: log(frequency) by time        60 ns <\r\n\r\n Memory estimate: 16 bytes, allocs estimate: 1.\r\n\r\n ```', 'comment_created': datetime.datetime(2023, 7, 1, 15, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252835987, 'comment_body': '```suggestion\r\nstruct InterfaceValues{FVA, FVB, ...} <: AbstractValues\r\n    face_values_a::FVA\r\n    face_values_b::FVB\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 9, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252837905, 'comment_body': 'Would the weight not be the same anyway? Why is it useful to specify which side in this case?', 'comment_created': datetime.datetime(2023, 7, 5, 9, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252840156, 'comment_body': ""Probably this could be it's own docstring for `function_value(::InterfaceValues)`."", 'comment_created': datetime.datetime(2023, 7, 5, 9, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252841055, 'comment_body': 'Needs to be adjusted if you change the parametrization above.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252852231, 'comment_body': 'Would it make sense to not collect all values in `u`, but to have two of them? That would make dof_range usage just like in the standard case\r\n```\r\nic = InterfaceCache(...)\r\n\r\n# x is the solution vector\r\nxe_a = x[ic.dofs_a]\r\nxe_b = x[ic.dofs_b]\r\n\r\nu_dofs = dof_range(dh, :u) # Assuming single subdofhandler\r\n\r\n# Alternative 1\r\nfunction_value(iv, q_point, u_a, u_dofs; use_element_a = true)\r\n# Alternative 2\r\nfunction_value(iv.a, q_point, u_a, u_dofs)\r\n```\r\n\r\nBut for jumps I suppose it then has to be\r\n```\r\nfunction_jump(iv, q_point, xe_a, xe_b, range)\r\nfunction_jump(iv, q_point, xe_a, xe_b, range_a, range_b)\r\n```\r\nnot too bad?', 'comment_created': datetime.datetime(2023, 7, 5, 9, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252855485, 'comment_body': 'I am a bit confused why this is needed, an  in particular it would be nice not to have this.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252858859, 'comment_body': 'I think we should settle on one single definition for the jump, document it, and show how one can compute the other version manually using `function_value_here` and `function_value_there`.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252862870, 'comment_body': 'In particular, is it not possible to compute the mappings with just the quadrature rule? Assuming the rule is ""symmetric"". Is the problem that the relative rotation isn\'t known? Then perhaps `reinit!(iv::InterfaceValues, ic::InterfaceCache)` can do it? That has the node IDs so should be able to compute this.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1252960833, 'comment_body': 'I think detj can be different ', 'comment_created': datetime.datetime(2023, 7, 5, 11, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252964289, 'comment_body': 'These would be moved to interface cache in the next PR', 'comment_created': datetime.datetime(2023, 7, 5, 11, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1252974415, 'comment_body': 'Ah I see. Perhaps that should be merged first then?', 'comment_created': datetime.datetime(2023, 7, 5, 11, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1253047607, 'comment_body': 'If you have\r\n```\r\n+-----+---+\r\n|     |   |\r\n+-----+---+\r\n```\r\nthen detJ differs between the elements already.', 'comment_created': datetime.datetime(2023, 7, 5, 12, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1253150508, 'comment_body': 'Does that imply that incompatible/discontinuous geometric meshes are allowed (in addition to discontinuous fields)? If so, how does that work? I thought the quadrature points have to be in the same physical location to calculate the jump (at least in the initial configuration if considering finite strains). ', 'comment_created': datetime.datetime(2023, 7, 5, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1253232852, 'comment_body': ""If I understand correctly, I think it can work if we disable the nodes check here:\r\n\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/d82f177fe86d0998f5d32fb9c300222d3cbe4e91/src/Grid/grid.jl#L1658\r\n\r\nthe quadrature points don't have the same physical location (but are the same type?), like \r\n```\r\n+-----+    +---+\r\n|     |    |   |\r\n+-----+    +---+\r\n```\r\nso we have the same quadrature rule for the faces but they are not at the same location."", 'comment_created': datetime.datetime(2023, 7, 5, 14, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1253276914, 'comment_body': ""Yes, that case could make sense! But how about \r\n```\r\n+-----++---+\r\n|     ||   |\r\n+-----+|   |\r\n|     ||   |\r\n+-----++---+\r\n```\r\n(I.e. non-matching faces, sorry for bad explanation before). I think this would be problematic, or?\r\n\r\nIn both of your examples above, if I don't misunderstand the illustrations; the value returned by `getdetJdV` would be the same for both faces (as they have the same area), even if the volume of the cells are different (so `getdetJdV` of the cellvalues would be different)?"", 'comment_created': datetime.datetime(2023, 7, 5, 15, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1253307667, 'comment_body': ""Ah, got it. It currently doesn't support this case (we assume each face may have one neighbor only or none)."", 'comment_created': datetime.datetime(2023, 7, 5, 15, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1253377387, 'comment_body': 'Technically possible, but I think mapping quadrature point indices is a bit wearisome, because you have to do it for every quadrature rule (since we do not have a convention on how to index the points)', 'comment_created': datetime.datetime(2023, 7, 5, 16, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1253412036, 'comment_body': 'Correction: Fredrik is right, we use the weight of the face mapping and not the determinant of the cell mapping.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1253414316, 'comment_body': 'It should be possible to handle the case\r\n```\r\n+-----++---+\r\n|     ||   |\r\n+-----+|   |\r\n|     ||   |\r\n+-----++---+\r\n```\r\nby introducing sub-faces or by other mechanisms. But we leave this handling to subsequent PRs. We need more time from our side (Maxi+me) for an efficient forest mesh implementation.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254337427, 'comment_body': 'Can you elaborate on this design why we need this specific grid type and the full grid? ', 'comment_created': datetime.datetime(2023, 7, 6, 12, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254343053, 'comment_body': ""These functions are called from within `reinit!` and they are the only functions which access the grid field of `InterfaceValues`, right? Can't we just pass the two elements into these routines instead of carrying the full grid?"", 'comment_created': datetime.datetime(2023, 7, 6, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254353892, 'comment_body': 'Well, this one is still inconsistent :/ @koehlerson @fredrikekre since we have this inconsistency in the codebase I might have to ask whether in 1D the vertex is a face or not?\r\n\r\nAlso, interface.\r\n```suggestion\r\n            neighbors = dim > 1 ? getneighborhood(...) : ...\r\n```', 'comment_created': datetime.datetime(2023, 7, 6, 12, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1254361597, 'comment_body': 'Type stability, maybe I can change it like FVA/FVB', 'comment_created': datetime.datetime(2023, 7, 6, 12, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1254363289, 'comment_body': 'I was thinking about doing so when moving fields to `InterfaceChache`', 'comment_created': datetime.datetime(2023, 7, 6, 12, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1254367797, 'comment_body': 'Actually this might harm type stability in case of mixed grids (and if including the grid, not having the flexibility in the grid type might harm extensibility)', 'comment_created': datetime.datetime(2023, 7, 6, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1256180114, 'comment_body': 'Without any experience on the subject (So take this with a bucket of salt): \r\nWould a general definition be to use the dyadic product for the jump, $[f] = f_a \\otimes n_a + f_b \\otimes n_b$, instead of the dot product, `here-there`, or `there-here`?\r\n```\r\nfunction foo_jump(iv, q_point, xe_a, xe_b, range_a, range_b)\r\n    fa = foo(iv.a, q_point, xe_a, range_a)\r\n    na = getnormal(iv.a, q_point)\r\n    fb = foo(iv.b, q_point, xe_b, range_b)\r\n    nb = getnormal(iv.b, q_point) # Or nb = -na\r\n    return fa ⊗ na + fb ⊗ nb\r\nend\r\n```\r\nVector functions: This retains the tangential jump for vector functions (as opposed to the dot definition in the [ref](https://www.researchgate.net/publication/211746421_Unified_Analysis_of_Discontinuous_Galerkin_Methods_for_Elliptic_Problems)). The signed normal jump is `- n ⋅ foo_jump() ⋅ n` where `n` is `na` or `nb` (`na=-nb` following the same arguments as for the quadrature weights)\r\n\r\nScalar functions: Vector jump as in [ref](https://www.researchgate.net/publication/211746421_Unified_Analysis_of_Discontinuous_Galerkin_Methods_for_Elliptic_Problems) is `(foo_jump() ⋅ n)*n`. But here I guess often the absolute value of the jump suffices, in which case the dyadic implementation would be inefficient (but it would be a 1-liner for users to do that efficiently as Fredrik writes).', 'comment_created': datetime.datetime(2023, 7, 7, 17, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1257143318, 'comment_body': 'But continuing thinking out loud, I guess having the jump as, `ub-ua`, and `getnormal(iv, q_point)` giving one normal (probably `na` in this case) would be as general and more performant!', 'comment_created': datetime.datetime(2023, 7, 8, 7, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1257512134, 'comment_body': 'Not so sure. Where does the assumption come from that the normals have to align for all points in time? I think this breaks down on moving domains.', 'comment_created': datetime.datetime(2023, 7, 9, 16, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1257539508, 'comment_body': ""In the Lagrangian description, I think that should be valid since the geometric nodes are matching for `InterfaceValues` AFAIU. \r\n\r\nFor Eulerian descriptions, even the same `getdetJdV` is not true (since the faces can change area due to the deformation). And currently, I think an Eulerian description is difficult in Ferrite, for example, the derivatives of, e.g., `dV` and shape functions, wrt. cell coordinates are not available*. Furthermore, in the case that normals don't align and the jump is calculated as `ua*na + ub*nb`, if `ua=ub`, but `na!=-nb`, the jump would be nonzero which doesn't make sense to me. Hence in any case a single normal should be used IMO, where one could argue that e.g. `(na-nb)/|na-nb|` would be better if `na!=-nb`, but in the current version of Ferrite I think it always will be. (A similar approach would be required for `getdetJdV`)\r\n\r\n*Probably, this should be supported. (Might be technically possible already, with ForwardDiff and some custom initialization of CellValues containing Dual numbers, but probably not very easy nor convenient). "", 'comment_created': datetime.datetime(2023, 7, 9, 20, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1258211165, 'comment_body': 'Definitely a good point and I agree that detJdV should be different - this raises further confusion regarding what ""face integral"" means in this context, because the faces do not match anymore.\r\n\r\nA bit off-topic, but regarding an Eulerian description we should be able to ""just add the displacements to the nodes"", so it should not be that difficult. But yes we are missing some convenience functions here.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1258214297, 'comment_body': 'Maybe a compromise is to provide the common definitions with dot and dyadic product along some detailed explanation in the docs (maybe with a guide on on how to implementent custom jumps). What do you think?', 'comment_created': datetime.datetime(2023, 7, 10, 12, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1258299453, 'comment_body': 'I would vote for a *single* definition for use in the convenience. \r\nMy suggestion would be the one I suggested [above](https://github.com/Ferrite-FEM/Ferrite.jl/pull/743#discussion_r1257143318) and note that it assumes matching faces. \r\n\r\nAs you say, it should be possible to obtain the function values, normals, etc. for each part individually. And that should, as you say, be documented; perhaps even with alternative ways to define the jump if needed!\r\n\r\n> A bit off-topic, but regarding an Eulerian description we should be able to ""just add the displacements to the nodes"", so it should not be that difficult. But yes we are missing some convenience functions here.\r\n\r\nPut an issue for discussion/future reminder: https://github.com/Ferrite-FEM/Ferrite.jl/issues/761', 'comment_created': datetime.datetime(2023, 7, 10, 13, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1258364522, 'comment_body': 'The permutation can be computed in the constructor though. I think that would be much cheaper compared to i) updating the quadrature points and ii) re-compute the shape values and gradients in every reinit.', 'comment_created': datetime.datetime(2023, 7, 10, 14, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1263665904, 'comment_body': ""I just had another stupid idea. Why don't we include the transformed quadrature nodes in this struct?"", 'comment_created': datetime.datetime(2023, 7, 14, 12, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1266452470, 'comment_body': 'You would still need to permute then, right? Or do you wanna store the transformed values for every rotation and every face combination?', 'comment_created': datetime.datetime(2023, 7, 18, 8, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1266504950, 'comment_body': 'The idea is similar to what we need to do for the correction in the cell values for e.g. Nedelec elements, i.e. that we store some static elementary transformations and then compute for the current face the transformed value when we reinit. But we can also store all permutations and just query them.', 'comment_created': datetime.datetime(2023, 7, 18, 9, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314079571, 'comment_body': 'Is this here correct? The functon is already in the boundary condition docs page. It also feels like `update!` might clash with names from other packages, so we might not want to use this name anyway. Maybe we can be more specific? Really not sure here.', 'comment_created': datetime.datetime(2023, 9, 3, 3, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314080772, 'comment_body': '`ND` and `(N-1)D` might be confusing to read. Maybe we can just write it out to N dimensional and N-1 dimensional. Not sure what a good way is.', 'comment_created': datetime.datetime(2023, 9, 3, 3, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081204, 'comment_body': '""It defaults to ..."" or ""The default value is...""?', 'comment_created': datetime.datetime(2023, 9, 3, 3, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081456, 'comment_body': 'I think you can eliminate the `\\\\` by using `@raw`', 'comment_created': datetime.datetime(2023, 9, 3, 3, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081539, 'comment_body': 'So, this is your reference triangle and not the actual reference triangle in Ferrite, right?', 'comment_created': datetime.datetime(2023, 9, 3, 3, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314081766, 'comment_body': 'Oopsie?', 'comment_created': datetime.datetime(2023, 9, 3, 3, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1314113309, 'comment_body': 'Could we use a mutable struct here?\r\n```suggestion\r\nmutable struct InterfaceTransformation\r\n    flipped::Bool\r\n    shift_index::Int\r\n    lowest_node_shift_index::Int\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 9, 3, 5, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1314278914, 'comment_body': 'My bad, the text for this one should\'ve been ""Transforming back to triangle B"" not reference triangle.\r\nThe reference triangle is the same as Ferrite\'s one, which we transform to temporarily when flipping.', 'comment_created': datetime.datetime(2023, 9, 3, 15, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1314278956, 'comment_body': ""Didn't notice that, thanks!"", 'comment_created': datetime.datetime(2023, 9, 3, 15, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1315075861, 'comment_body': 'Outdated (?)', 'comment_created': datetime.datetime(2023, 9, 4, 15, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315076758, 'comment_body': 'Where is this used? Does it make sense to define it? Mapping here is quite different', 'comment_created': datetime.datetime(2023, 9, 4, 15, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315077420, 'comment_body': ""I think I prefer\r\n```suggestion\r\n    function_value(iv::InterfaceValues, q_point::Int, u::AbstractVector; here::Bool)\r\n```\r\ni.e. `here` instead of `use_element_a`, and also to not use a default value but require the user to always ask for the side explicitly. (Same for the other functions but won't leave comments there)."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315078813, 'comment_body': ""```suggestion\r\nTransform quadrature point from cell's coordinates to the face's reference coordinates, decreasing the number of dimensions by one.\r\nThis is the inverse of `face_to_element_transformation`.\r\n```"", 'comment_created': datetime.datetime(2023, 9, 4, 15, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315079897, 'comment_body': 'Is it possible to implement this one by passing just the node IDs of the two cells instead of the grid? The node ids are also available in the interface cache.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315080444, 'comment_body': 'I suggest you make the transformation struct immutable and create a new one every time:\r\n```suggestion\r\n    interface_transformation = compute_interface_transformation(grid, face_a, face_b)\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 15, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315080659, 'comment_body': '```suggestion\r\n    transform_interface_points!(quad_points_b, iv, quad_points_a, grid, face_a, face_b, interface_transformation)\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 15, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315081144, 'comment_body': 'Seem easier to use a loop instead of creating the temporary svectors? Then you can also remove the new functions `shape_gradients_and_values` etc.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1315081831, 'comment_body': 'Use multiple dispatch instead of the ifs?', 'comment_created': datetime.datetime(2023, 9, 4, 15, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1328338252, 'comment_body': 'Can the two refshapes be type parameters here instead and remove the `nfacenodes` one?', 'comment_created': datetime.datetime(2023, 9, 18, 7, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1329417453, 'comment_body': 'Not sure where these belong', 'comment_created': datetime.datetime(2023, 9, 19, 0, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335148246, 'comment_body': 'This part is outdated, right? IIUC vector valued problems use `Vec` not scalars and `(Vector/Scalar)Values)` are deprecated since #708 ', 'comment_created': datetime.datetime(2023, 9, 24, 8, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335158194, 'comment_body': ""I think it is still possible to allow `Vector{Vec}`, but it was suggested to be removed in https://github.com/Ferrite-FEM/Ferrite.jl/pull/698 (but didn't happen, should it @fredrikekre ?). The standard way, however, is that `u` is a `Vector` of scalars for both scalar and vector function interpolations."", 'comment_created': datetime.datetime(2023, 9, 24, 10, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1335160475, 'comment_body': 'Thanks for the clarification!\r\nI thought it was similar to `shapeValues` such that `u` is a vector of  `Vec` if we use vectorized interpolation.', 'comment_created': datetime.datetime(2023, 9, 24, 10, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335164893, 'comment_body': '@KnutAM \r\n> > Good point. I guess we can do\r\n> > ```\r\n> > function_(value|gradient|...)(iv::InterfaceValues, qp::Int, ue::Vector{Float64}, dof_range::UnitRange, dof_range::UnitRange)\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > then and let the user handle the offset. It is easy to catch the mistake of not ofsetting in many cases I think, so should be reasonably safe.\r\n> \r\n> Has there been any new discussion on this topic, also following [#743 (comment)](https://github.com/Ferrite-FEM/Ferrite.jl/pull/743#issuecomment-1629260683) (at least to me, it looks like the current implementation is different)?\r\n> \r\n> For being able to use automatic differentiation, I think a single dof-vector, `ue`, input would be most practical.\r\n\r\nIIRC @fredrikekre  noted that we might sometimes have to provide two different dof ranges, so going with two `u` s would make more sense, right?\r\nI think the other options are\r\n- a single `u` and no dof ranges -> first half of `u` is here and the other half is `there` (This can be broken for mixed elements)\r\n- a single `u` and two dof ranges\r\n\r\n(Leaving this as a code comment so we can reply to it)', 'comment_created': datetime.datetime(2023, 9, 24, 11, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1335175566, 'comment_body': 'For single-field problems (or when giving only the dofs corresponding to a single field), the interpolation information should be enough to know how many dofs belong to here and there, even if they are different, right?\r\n\r\nFor multi-field problems (analogous to the current dof range approach), then two dof-ranges are required. And the main challenge here, is that the user needs to offset the ""there"" dof-range? (Unless the number of celldofs for ""here"" is provided in the `reinit!`, which should be feasible since it should be available in the cache). ', 'comment_created': datetime.datetime(2023, 9, 24, 13, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1341975385, 'comment_body': 'I think we should remove it, and therefore not add it to InterfaceValues.', 'comment_created': datetime.datetime(2023, 9, 30, 15, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1341976475, 'comment_body': 'The AD argument is good. I suppose there should be some method of `dof_range` that returns two, and the second one with an offset.', 'comment_created': datetime.datetime(2023, 9, 30, 15, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1356761962, 'comment_body': 'If we are shuffling around the shape values on the ""there""-side, does this not mean that we have to shuffle the ""interfacedof"" vector on the there side aswell? (i.e. `interfacedofs = [cellhere_dofs, cellthere_dofs]` would need to be reordered aswell for the assembly in the the siffness matrix).\r\nWould it not be better to reorder the quad_points_b such that they match quad_points_a instead, and keep the order of the shape-functions fixed?\r\n\r\nI might be wrong though...', 'comment_created': datetime.datetime(2023, 10, 12, 12, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lijas', 'type': 'User'}, {'comment_id': 1356765240, 'comment_body': 'wait, maybe that is what you are doing? :smile: ', 'comment_created': datetime.datetime(2023, 10, 12, 12, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lijas', 'type': 'User'}, {'comment_id': 1356800647, 'comment_body': 'There is no reordering of the shape functions, just re-evaluation on new quadrature points.', 'comment_created': datetime.datetime(2023, 10, 12, 13, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fredrikekre', 'type': 'User'}, {'comment_id': 1356808986, 'comment_body': ""Yeah, it's just transforming the quadrature points to match coordinates, shape functions order should remain the same (1:nbasefunc in the `there` interpolation)"", 'comment_created': datetime.datetime(2023, 10, 12, 13, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1356841320, 'comment_body': 'I propose we can later in separate PRs do such optimizations via specialized dispatches of special cases if we want, but let us for now take a solution which works in more general scenarios.', 'comment_created': datetime.datetime(2023, 10, 12, 13, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363705812, 'comment_body': ""Can we extract the orientation stuff into data structures and/or functions? This might be handy for merging the different internal orientation interfaces in a followup PR. Also I think for 2D we can come up with a simpler scheme. \r\n\r\nAs another note: For the extension to higher dimensions than 3 we might not have enough flexibility yet (and you don't need to address this, just to motivate why we might want to keep the logic here modular and extensible)."", 'comment_created': datetime.datetime(2023, 10, 18, 11, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363712185, 'comment_body': 'We really should not do it like this. Can we just handle the cases via (inlined) dispatches, and put the throw into the generic dispatch?', 'comment_created': datetime.datetime(2023, 10, 18, 11, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363715901, 'comment_body': '```suggestion\r\nfunction transform_interface_points!(dst::Vector{Vec{3, Float64}}, points::Vector{Vec{3, Float64}}, interface_transformation::InterfaceTransformation{RefShapeA, RefShapeB}) where {RefShapeA <: AbstractRefShape{3}, RefShapeB <: AbstractRefShape{3}}\r\n```\r\nMaybe?', 'comment_created': datetime.datetime(2023, 10, 18, 11, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363716591, 'comment_body': '```suggestion\r\nfunction get_transformation_matrix(interface_transformation::InterfaceTransformation{RefShapeA}) where RefShapeA <: AbstractRefShape{3}\r\n```', 'comment_created': datetime.datetime(2023, 10, 18, 11, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363718235, 'comment_body': 'I think the docstring needs more work for the other devs understand what exactly is constructed here.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363724279, 'comment_body': 'If we want to expose this to the user, then I would vote for also including a how to, possibly in a followup PR.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363726168, 'comment_body': 'Also, maybe something like this? Not sure.\r\n```suggestion\r\nfunction InterfaceTransformation(cell_a::AbstractCell{RefShapeA}, cell_b::AbstractCell{RefShapeB}, face_a::Int, face_b::Int) where {RefShapeA, RefShapeB}\r\n    getdim(cell_a) == 1 && return error(""1D elements don\'t use transformations for interfaces."")\r\n\r\n    nodes_a = faces(cell_a)[face_a]\r\n    nodes_b = faces(cell_b)[face_b]\r\n\r\n    min_idx_a = argmin(nodes_a)\r\n    min_idx_b = argmin(nodes_b)\r\n\r\n    shift_index = min_idx_b - min_idx_a\r\n    flipped = getdim(cell_a) == 2 ? shift_index != 0 : nodes_a[min_idx_a != 1 ? min_idx_a - 1 : end] != nodes_b[min_idx_b != 1 ? min_idx_b - 1 : end]\r\n\r\n    return InterfaceTransformation{RefShapeA, RefShapeB}(flipped, shift_index, 1 - min_idx_b, face_a, face_b)\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 10, 18, 11, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363735711, 'comment_body': 'Can we add test cases to cover these directly? I thought about testing the invariant that the spatial coordinate of a point on the face is always the same as the one for same point on the element.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363738478, 'comment_body': 'Maybe 2 dispatches here?\r\n\r\n```\r\nfunction_symmetric_gradient(fe_v::AbstractValues, q_point::Int, u::AbstractVector)\r\nfunction function_symmetric_gradient(fe_v::AbstractValues, q_point::Int, u::AbstractVector, dof_range)\r\n```\r\n\r\nThis will eliminate the redundant check.', 'comment_created': datetime.datetime(2023, 10, 18, 11, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363747072, 'comment_body': 'Debris?', 'comment_created': datetime.datetime(2023, 10, 18, 12, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363821161, 'comment_body': 'Yes. I think on moving domains things can get a bit nastier. But I also do not know how to deal with these.', 'comment_created': datetime.datetime(2023, 10, 18, 12, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363822619, 'comment_body': 'Debris?', 'comment_created': datetime.datetime(2023, 10, 18, 12, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1363825596, 'comment_body': 'Maybe we should wrap this into a namespace to avoid possible future collisions.', 'comment_created': datetime.datetime(2023, 10, 18, 12, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367634189, 'comment_body': 'Like in \r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/ce1886d9e36058052f5f79cc7bbf3586eb21869d/src/Grid/grid.jl#L870-L891 ?\r\nThis should be able to replace the other two orientation info structs in #829 ', 'comment_created': datetime.datetime(2023, 10, 21, 3, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367634342, 'comment_body': 'Like\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/ce1886d9e36058052f5f79cc7bbf3586eb21869d/src/FEValues/interface_values.jl#L423-L463\r\n?', 'comment_created': datetime.datetime(2023, 10, 21, 3, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367634576, 'comment_body': 'This might break for 4D tho since we can have both 3D and 2D interfaces with 4 nodes', 'comment_created': datetime.datetime(2023, 10, 21, 3, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367634635, 'comment_body': ""Unless we can guarantee that the interface won't *hourglass *"", 'comment_created': datetime.datetime(2023, 10, 21, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367635836, 'comment_body': ""They're tested in\r\nhttps://github.com/Ferrite-FEM/Ferrite.jl/blob/ce1886d9e36058052f5f79cc7bbf3586eb21869d/test/test_interpolations.jl#L54-L70\r\nI'm not sure if using spatial coordinates test will be helpful since IIUC it uses the cell corrdinates for both `CellValues` and `FaceValues`. Also, quadrature points already use these functions. Or you mean something else?"", 'comment_created': datetime.datetime(2023, 10, 21, 3, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367636495, 'comment_body': ""I don't think this would work since `reference_faces` is used internally\r\nMaybe change the refshape name to something like `DummyRefShapy`?"", 'comment_created': datetime.datetime(2023, 10, 21, 3, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367690017, 'comment_body': 'I see. But maybe something like\r\n```julia\r\n function get_transformation_matrix(interface_transformation::InterfaceOrientationInfo{RefHexahedron})\r\n     face_a = interface_transformation.face_a \r\n     facenodes = reference_faces(RefHexahedron)[face_a] \r\n     _get_quad_transformation_matrix(facenodes, interface_transformation)\r\n end \r\n```\r\ncould work? Or can we construct type table methods to get the face refshape and dispatch the inner _get_transformation_matrix on this type?', 'comment_created': datetime.datetime(2023, 10, 21, 8, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367690753, 'comment_body': 'That should be fine. :) I just missed this somehow', 'comment_created': datetime.datetime(2023, 10, 21, 8, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367690974, 'comment_body': 'The module should work, but this is also fine. :) Maybe `TestRefDodecahedronDummy` or so, not sure what is suitable', 'comment_created': datetime.datetime(2023, 10, 21, 8, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367691320, 'comment_body': 'Indeed. But let us focus in this PR now on getting it merged, i.e. just resolving the open issues without touching more of the existing code base, to avoid feature creep. ', 'comment_created': datetime.datetime(2023, 10, 21, 8, 41, 10, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1367692085, 'comment_body': ""Yea, getting the face shape makes more sense but I'm not sure if it'd be useful somewhere else\r\nI assume it'll have the same performance tho as it'll be determined on runtime"", 'comment_created': datetime.datetime(2023, 10, 21, 8, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367692184, 'comment_body': 'The issue is with cells with different faces\r\n', 'comment_created': datetime.datetime(2023, 10, 21, 8, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1367693414, 'comment_body': 'Yea, let us keep this then for a separate pr (maybe in the heat example?) when we start benchmarking where we land performance-wise :)', 'comment_created': datetime.datetime(2023, 10, 21, 9, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1385203043, 'comment_body': 'Okay let us leave mixed grid support for a future PR.', 'comment_created': datetime.datetime(2023, 11, 7, 16, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1385237456, 'comment_body': 'What should we do about this? Since there are concurring definitions for the jump, maybe we should not provide a default jump in the framework but in the corresponding examples?', 'comment_created': datetime.datetime(2023, 11, 7, 16, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1385316294, 'comment_body': ""I don't know and honestly I don't think that there is any truly good solution to it for d=1,d=2 and d=3. I do think there are nice definitions for d=2, d=3 but as soon as you include 1D or vice verca it becomes quite fast artificially named or defined, but these are just my two cents . So I personally don't mind if its vertex or face neighborhood as long as its stated/defined somewhere"", 'comment_created': datetime.datetime(2023, 11, 7, 17, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'koehlerson', 'type': 'User'}]","[{'commit_sha': '000eab44a28bed4aa7fe05299ad1d9527414aef0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d1c0e03e3bba0b23472cd815ecd665220fdf6e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5568746ce59c6f3c1d9edd122b7ed0520d1f2dc8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa236b37798bc524edd2e937d3f4c6055e8c3c8b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4754f2effe2e52844980111dc0f537a0363a211', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69b2cd434b36b89f23d468da381302da2488fe1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edfa09c75f4403d7c115a018a3b5ee584f9a9658', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06dc9e215ffee88e5964976bdf02ef5225c24d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4889e2f29f9f4ba50ad1e5067576ddf0b9a45ae', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb3afb9623e4bf75117f24ad8c994bd0bb6f0ff2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60573db45ab4cca4c4b065603b4fb252d7816e7b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e81b66fdc94b0770aee7ea9f76e92efa10fc7cd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0065423731d996b60fb6866e5840e56d39daf8c2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a530f760a1029a349f24768d8571357f7fb222', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a842a3acb5dab755929b1e852b152bd995dd52', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e03b2a0dd1f6a3efb60a9a87ea5af26abdc1a3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b1f495e87c94432dd7a8f09113fd6c150b496e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09fa6bd448dda4a439f23bc20c74a065ad5bd255', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bb40ffec967b606e017ebd7100daf50f865f40', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '698874a887cbdcd58ea1438178ebb08bff4543f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e75325ece719b5c554f767a2907d0f03f75c31', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e3429f43fb6c6b07291acf7806ce9b66b6e73a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb5ddf52f49552d94d555d220e87274bdf85874', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bf804536287df1eefc35039ac774dae69e23b8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d59a7500b6e25efde25df120ae588865cb068e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c60a0b6d8b27457da99c56e6cc4819ca74e7f19', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de83a50e78fe878218f0508bc92319836cb09582', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfce1b1c084592eb9e082ec795cabfefdb89139', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10cf989c45306a54372eec3608a247f471112c0f', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b86e289d4256d296b85d24490b8a702cd6fbcae3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34d72de0d68e288600d54482cd1e6567e15a6e98', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c03c787cb7d25bb8915e56197e41f2d98e95f360', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6324a83d26c5fdc1901f119ba3e7c7fd3fd496', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1f6a397b719795475992e0365a5b4046d1b2c39', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef539491f7a0b51c4864cca8d72d963a7c01823b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd221888ba92450981ef21e9c31aa27e20f929523', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b18c3ddf3a410c5b70bfd99193f5e535d9c2b18', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c302fcad32a021be049659375a5530b7b6b98532', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f6cb092b5166eb764b27f6b95383547a456606', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1193c42cbb0d359171090a68945241468e673118', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08c4af05e5f2e60fc51309c5e9d51e03e9dcb110', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '851fe05b7f16e56d55fd46994be3ca1adbbd6ddd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b10ece4fdf173f6deff2d87674bba87f648ae826', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dadcdac8343a42746f1f1d64499a924b1a4115d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b432c917c469dc6f1ababcac21c9974e2c616b08', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c28f0b2ebc213caf2c8b7a30845ccdb11cc7ffd7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db877bfa9fbc61814d4b5b97f4359702591718d9', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aff06028b92cffa85db86a2fc812737cbcaa58cf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df162712f2c569f5d9e6a9e3df98d1e86b2e6ba', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '232b2a83d16e5b5210f5710e0fc5cc90e0aa47d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd32ca77afa269eb943fcf8fa38f7cee98695c4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7732a1113c3f4febe0542db4e23b5b4b390c74f5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '874b4926035d50b39b1850cd74c903e272c25e02', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34b0356d234ae0d7cecedcc60f3780343012937', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de61c903fb51def2c647d36e41f97c3a92cb95e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15d24cc08580a6650d25c26b968b7b39cab928f3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687a3e21a63058884986940928e92e71f2babe5e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acbfd5b4a554be5c202b594bec3e7a00ab8ea7a4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c78c61197bbed07ccb7c39c1fbfc58c2733b30b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c222cfe613d251d6d7d7f9d93d8f01ecc32a4b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb394d8a117bffe2d461bb11ee9a83bd56b57786', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56763b765a1473e89aa0387d9ad3ff5f1a9f0f37', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd82f177fe86d0998f5d32fb9c300222d3cbe4e91', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7940cf06bd6377e66eb6b36d9cb17343e0a8a03', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050ac5e365c78ccac20fe4c604ab46e2e79e7cc5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60bf5491d55753bafc56e8d6418122a778db5942', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a7a194a0b655741e6b2605bb8bac0821f59c8fd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600fae68e088a4f6744e05c2ab76b718e8ba9b4c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38d158137c1fe57e9f626ac1d4c5d70f91fae21d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe478653b4e393effe6766131e45a308a84d17a6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1ce481f76d66b4458002e2e7f5fb47c5695769e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02cc036aaa393ab0ce3c3644f717a113db23364e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee7163e44831634a6610320a5da2802f58ea75c4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2cc740b059528e848bb58c80b35c22f60603fd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6baad5aad40d76df4bf44070f8f50162902590', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0453aedecbbdcd7de5bef95554bc93126eedfeba', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '823847fc39f48e29577b7102ecc88772bd1829ef', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65585151bbbc21a425724dd6d9b7bd6fa3cf0db5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae8c7dec53a0819ac13ffe71f27ec3b68a9e895', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb369a836867e66199c907249a154d25e8303102', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750c2bf0e8ce5702f1eb0936194efaaf19911cad', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed92be2cb420ed5cad65acb25005e37abdeda24a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae501b3d4c528b4c0c38ab0b951ea50b1712345', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb041e69219a5299dc441caf3eca47f866c6d46', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c4411678ca4b9786b067e58ce0b449a11779d1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60c1cb8e32afe4d3c6bcd2a912815096b8a04d8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e35e644618aca6aebbcfeecdd087230ce35b12', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d0258011843112e5bae99b278ddb784dc7c29b6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96af08810f63e0ba310ad4290c4ad631f7a6427a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca53d0987efeb6303159d1ee4a5f1fcb4a703129', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d16d31b7654f4f7cff54214f9e56e8d51e3613', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f1a24dc01b1db29ae6a792b1492acd7a5762792', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5153fde45dedc5db9a3f63b72b11a69ecb18b950', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b583b442b040a33b60a17e23847eb88974ba4a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6781338c1a3dd93590860606933c2b15af06edd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63bba44e6e7c040b0de694fc306f2eb56d49fd3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae753090de18f6eee044f14c45de2c5724c2c03b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f191c05e1b3483421b44cf0ad1ecaeed15877b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bad45f4258a67534a837334164afc80d3a841ab1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ccf6a49c0fa3e6fb89d075cea36b0ed4ac2717', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42573e75bdf277cc68a987cf995b7485eded6eb2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b74203140af60386d1b897068e1bb8dc1af5348', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852fcaa2250d25c959b9069a2c10bc6c410ea120', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5603afdebafe96faa87b0c07b53953b933095f54', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8258ea2a1ad927a4e96aa9dd1554991f0844a4b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd057454d605b99919b697211a691649d96cbc1e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c785e1253500dac4cf93401709161af012b229b1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42fbde462facc4977446d876b012b133afce779', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1981c818d7e62e4985af7f7bff47bc31f34988b4', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed7f14da2edfed3d0c2bf47aa32126ddd1368203', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f117dd7785e51bf82028f3a458ca8bf7de9e0b7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675f0ab53e0729165d41c028c3c3e0d75734cfc9', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a6bed37971b31b3eba2d8667f5ba300876462e8', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b081c36d85bf9b4055569358458e6f5d2d59be6', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b228667cba287089430f784c7b9b1c5962c543', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e87fb5a54538ded198e74770e5e32304a5cf260e', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426470260bfcfa9f50ea165934179e63ceae7c51', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d36bdc9b8222c196a49b28d79c36a9c7825767', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dc6117d0a97d7faf8f335177a5cddd18a1da0f4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de79e40b4bfdf99df434dae7d7292df74130e39a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '933fe7882558f1693c9237b56d7d2f85d5b10da1', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d5437bb6dabb7e97fb5641ec55d0a1310c9bbfa', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59cccd06737ad52aeb50f3e3db6028356ac4364d', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b93937cc430cca9645c3b1b9ebe032f89223fb06', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9010f86685bd71342d27b61dbbb3cf86b9d50c2b', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cec25a4f6baef01708c512763c020c70a0e9af5d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '159b4a1b03f7c0c62253efb84b2dfa0b6eba5a15', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11d0a9ae592cacd7536858aa044f48704e6d1c97', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4f6ed947f4943999766dfc962e9ca1af146f50a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bed6b53083421fa205b0be4efec4943b020a292a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec55515c6745683714d3e66747036078005339e8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1048d49fc78235f7a20705ed27d2b1c4dd33a04d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f966e8400096e04fa2135fa43f7f4862c05e6c3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '347e7963fe20362ce6177cb3252b930b097fce53', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fafc549684b1a6a4f0782c4514b8af6f4c44f3f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7d31f968d6b569599e4abeb0827d6131c952311', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ac92f5164332884d5bf45e006e33d6fdbef7ca', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e21c0fbf3d70129af020a11b6aebe2e1ac00a5a2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '754eb757d4d9de49a473e057e421b734f751827a', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32799be3ae88bf40b4b570d9f31bfc2be59a06ea', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a24ab17cc9bf6ffac5c44d69f3a2df86ebdd75', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ce37c9817bd309343baae525ff55cc6056d12d', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76584355e6d79cf7b8b85e8dcfecc9a9ff35948', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c7f3664ee067b51aa4a4c1243459a698e29d74b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eb46805fb9b4538bed49fe8b84e68eef4439349', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cee960a5890bfa574f49dca7a340e3fb71121eb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d631c0579acbb8797f7b73eaa372a748ba85148', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cc5e30fc8d1e51cd1978af4ec91fe5942028f7c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2532e58dd244a76a46fbb524214bba61bec016c3', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7cd8490bb13e4acab5e48c4d37bd613cc76ea70', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e4499766ab630c368e3b6d06ec389793076fda', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e1f7c55c5fe7685c05733e2cd4dac801877cd02', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccb5242e69ad01e6afadf800e52286627928bcd', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1886d9e36058052f5f79cc7bbf3586eb21869d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a32cf67a4e6b98aab1cd28424def18cce4bb52', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d61ac41a03b4472d9018069df4c59a6ca7025ea', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7de299388a662b9ec89d2f8d29307960c023736', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e665d637128f4ab52f726e033e78dd7cc052b3e', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1472857060,DG heat equation tutorial,"Tested convergence using an edited version of #640 and it seems to converge * currently doing some edits to optimize it and see where the results stagnate. Will leave the script in a resolved comment once finished so it doesn't take much space *
![image](https://github.com/Ferrite-FEM/Ferrite.jl/assets/45468098/8cb7ae83-9221-4986-99f4-6ad8a6728c39)
![image](https://github.com/Ferrite-FEM/Ferrite.jl/assets/45468098/d87beaa8-5d93-4ff9-88d8-c8afd7eb2181)

These plots are in log-log, and N is the number of elements in one of the dimensions (so for quad the number of elements is N^2)",True,787,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/787,https://github.com/Ferrite-FEM/Ferrite.jl/pull/787,closed,401,0,5,37,6,55,1,0,[{'name': 'awaiting review'}],2023-08-12 12:47:57+00:00,2024-01-04 13:30:49+00:00,12530572.0,"145 days, 0:42:52","[{'comment_id': 1295229999, 'comment_body': '~~Are you sure this test is correct?~~ I think I see what you did here. :) Should be fine.', 'comment_created': datetime.datetime(2023, 8, 15, 23, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1295231963, 'comment_body': '~~I also might ask for clarification here. Can you expand the 1D heat problem with 2 elements by hand and check if this implementation is really equivalent?~~', 'comment_created': datetime.datetime(2023, 8, 15, 23, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1392459794, 'comment_body': 'Maybe we should add some acknowledgement here for the GSoC funding', 'comment_created': datetime.datetime(2023, 11, 14, 11, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1417373868, 'comment_body': 'Can we get away with a cleaner solution here? Is this even type stable? Same below.', 'comment_created': datetime.datetime(2023, 12, 6, 13, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1417639526, 'comment_body': 'Can we have two Neumann boundaries for the example, so this term does not vanish?', 'comment_created': datetime.datetime(2023, 12, 6, 16, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1417640080, 'comment_body': 'I think this one is outdated', 'comment_created': datetime.datetime(2023, 12, 6, 16, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1418537090, 'comment_body': '`Ferrite.function_interpolation(::FaceValues)` should help here to make the access cleaner (but probably ""nicer"" to extract this information outside the loop)', 'comment_created': datetime.datetime(2023, 12, 7, 8, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1427419780, 'comment_body': 'Is it considered a unit square?', 'comment_created': datetime.datetime(2023, 12, 15, 0, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1427859290, 'comment_body': 'Actually not. :D ', 'comment_created': datetime.datetime(2023, 12, 15, 11, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1435555465, 'comment_body': 'Would it make sense to (1) link to the basic example here and (2) point out the differences?', 'comment_created': datetime.datetime(2023, 12, 23, 10, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435556930, 'comment_body': 'It took me some time to spot the difference in the subscript between u and n. To me, using capital N for Neumann, and capital D for Dirichlet would make it more visible and easy to read. Secondly, perhaps the information in the table below can be put in directly in the equations?\r\n\r\nFor example\r\n```\r\n\\textbf{x} \\in \\partial \\Omega_D^+ = \\lbrace\\textbf{x} : x_1 = 1.0\\rbrace\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435557214, 'comment_body': '```suggestion\r\n# \\nabla u(\\textbf{x}) \\cdot \\boldsymbol{n} = 1 \\quad \\textbf{x} \\in \\partial \\Omega_n^+, \\\\\r\n# \\nabla u(\\textbf{x}) \\cdot \\boldsymbol{n} = -1 \\quad \\textbf{x} \\in \\partial \\Omega_n^-,\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435557476, 'comment_body': '```suggestion\r\n#  \\{u\\} = \\frac{1}{2}(u^+ + u^-),\\quad \\llbracket u\\rrbracket  = u^+ \\boldsymbol{n}^+ + u^- \\boldsymbol{n}^-\\\\\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435557872, 'comment_body': 'I would like vector-valued quantities in boldface in this derivation to be consistent. \r\n\r\nAlso, in this derivation, Gamma is used for the internal/element boundary, while Gamma^0 is used below. Is this intentional, or should this be made the same? ', 'comment_created': datetime.datetime(2023, 12, 23, 10, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435561164, 'comment_body': '```suggestion\r\n#     Integrating by parts and applying divergence theorem,\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435561348, 'comment_body': '```suggestion\r\nqr = QuadratureRule{RefQuadrilateral}(2);\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435561414, 'comment_body': '```suggestion\r\nK = create_sparsity_pattern(dh, topology = topology, cross_coupling = trues(1,1));\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435562886, 'comment_body': 'Since this is an advanced example, perhaps it suffices to have something like \r\n```suggestion\r\n# ### Boundary conditions\r\n# The Dirichlet boundary conditions are treated \r\n# as usual by a `ConstraintHandler`.\r\nch = ConstraintHandler(dh)\r\nadd!(ch, Dirichlet(:u, getfaceset(grid, ""right""), (x, t) -> 1.0))\r\nadd!(ch, Dirichlet(:u, getfaceset(grid, ""left""), (x, t) -> -1.0))\r\nclose!(ch);\r\n\r\n# Furthermore, we define $\\partial \\Omega_n$ as the `union` of the face sets with Neumann boundary conditions for later use\r\n∂Ωₙ = union(\r\n    getfaceset(grid, ""top""),\r\n    getfaceset(grid, ""bottom""),\r\n);\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435562951, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435563903, 'comment_body': 'Perhaps this suffices instead of explaining what is used from each object below? And if needed, only explain for the interface values. (The list below of what is used is missing the integration weight)\r\n```suggestion\r\n# * `assemble_element!` to compute the contributions ``K_e`` and ``f_e`` of volume integrals over an element using `cellvalues`.\r\n# * `assemble_interface!` to compute the contribution ``K_i`` of surface integrals over an interface using `interfacevalues`.\r\n# * `assemble_boundary!` to compute the contribution ``f_e`` of surface integrals over a boundary face using `facevalues`.\r\n```', 'comment_created': datetime.datetime(2023, 12, 23, 10, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1435564281, 'comment_body': 'Is this needed here? \r\nIt follows the basic heat equation notation anyways. \r\nBut on that note, perhaps even add a remark in the beginning that readers are expected to be familiar with the heat equation tutorial before reading this one?', 'comment_created': datetime.datetime(2023, 12, 23, 10, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437569137, 'comment_body': ""I think with the additions in the bullet list above, these parts aren't required here. If desired, a few notes on `InterfaceValues` could be nice to keep, but the main info could come from referring to their docstring. \r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 12, 28, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437574854, 'comment_body': 'With the boundary condition `n cdot nabla u = n[2]` (although not explicitly stated, only via the conditional in the equation), I found it a bit hard to ""see through"" the implementation here. Could something like the following be easier to read?\r\n(Was the comment a left-over from the internal boundary contribution?)\r\n```suggestion\r\n            δu = shape_value(fv, q_point, i)\r\n            boundary_flux = normal[2]\r\n            fe[i] = boundary_flux * δu * ∂Ω\r\n```', 'comment_created': datetime.datetime(2023, 12, 28, 11, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437576085, 'comment_body': '```suggestion\r\n# #### Local assembly\r\n```', 'comment_created': datetime.datetime(2023, 12, 28, 11, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437577398, 'comment_body': ""As above, I don't think more than a short note is required in this advanced tutorial. \r\n```suggestion\r\n# We define the function `assemble_global` to loop over all elements and internal faces (interfaces), as well as the external faces involved in Neumann boundary conditions. \r\n```"", 'comment_created': datetime.datetime(2023, 12, 28, 11, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437578286, 'comment_body': 'It would be good to test: Update the result to what you get so that any changes resulting in different results are detected. ', 'comment_created': datetime.datetime(2023, 12, 28, 11, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1437579658, 'comment_body': '```suggestion\r\n# The solution of the system is independent of the discontinuous discretization, and after assembling the application of constraints, linear solve, and exporting is done as usual.\r\n\r\nK, f = assemble_global(cellvalues, facevalues, interfacevalues, K, dh, h);\r\napply!(K, f, ch)\r\nu = K \\ f;\r\nvtk_grid(""dg_heat_equation"", dh) do vtk\r\n    vtk_point_data(vtk, dh, u)\r\nend\r\n```', 'comment_created': datetime.datetime(2023, 12, 28, 11, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1438955844, 'comment_body': ""Yeah it's intentional, the derivation assumed homogeneous dbc so the face integral isn't split into boundary and interface terms\nIn the derivation the integral is over Gamma while in the example it's split into an integral over Gamma_0 and another one over Omega_N"", 'comment_created': datetime.datetime(2024, 1, 1, 3, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1439026669, 'comment_body': '```suggestion\r\n#     Defining $\\boldsymbol{\\sigma}$ as the gradient of the temperature field the equation can be expressed as\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439028021, 'comment_body': ""Shouldn't there be a minus before the volume integral on the right-hand side?\r\nHaven't checked the derivations wrt. uhat though..."", 'comment_created': datetime.datetime(2024, 1, 1, 13, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439028045, 'comment_body': ""```suggestion\r\n#     Where $\\boldsymbol{n}$ is the outwards pointing normal, and $\\Gamma$ is the union of the elements' boundaries.\r\n```\r\nWould it also be possible to define uhat and sigma hat here instead of later?"", 'comment_created': datetime.datetime(2024, 1, 1, 13, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439030160, 'comment_body': 'Unless defined above for uhat and sigma hat,\r\n```suggestion\r\n#     where $\\Gamma^0 : \\Gamma \\setminus \\partial \\Omega$, with the jumps and averages results in\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439030408, 'comment_body': '```suggestion\r\n#     Integrating $ \\int_\\Omega \\nabla u \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega $ by parts and applying divergence theorem\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439030813, 'comment_body': '```suggestion\r\n# Since $\\partial \\Omega$ is constrained with both Dirichlet and Neumann boundary conditions the term $\\int_{\\partial \\Omega} \\nabla u \\cdot \\boldsymbol{n} \\delta u \\,\\mathrm{d} \\partial \\Omega$ can be expressed as an integral over $\\partial \\Omega_N$, where $\\partial \\Omega_N$ is the boundaries with only prescribed Neumann boundary condition,\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439031367, 'comment_body': 'Would it make sense to rather do this after defining the interpolations, and then also calculate `μ` outside `assemble_global`, passing `μ` instead of `h`? That would avoid using the internal functions as `order` and `dim` are available / can be defined. ', 'comment_created': datetime.datetime(2024, 1, 1, 13, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439032804, 'comment_body': 'IMO the u in the jump should not be bold-faced as this is still a scalar, even if the jump becomes a vector. \r\n```suggestion\r\n#  \\{u\\} = \\frac{1}{2}(u^+ + u^-),\\quad \\llbracket u\\rrbracket  = u^+ \\boldsymbol{n}^+ + u^- \\boldsymbol{n}^-\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 13, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439033708, 'comment_body': 'Sorry, my writing from last time was a bit unclear. What do you think about moving it around like this?\r\n```suggestion\r\nK, f = assemble_global(cellvalues, facevalues, interfacevalues, K, dh, h);\r\n#md nothing # hide\r\n\r\n# ### Solution of the system\r\n# The solution of the system is independent of the discontinuous discretization and the application of constraints, linear solve, and exporting is done as usual.\r\n\r\n```', 'comment_created': datetime.datetime(2024, 1, 1, 14, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439115011, 'comment_body': 'I think this does not matter in practice, but technically it should be the face diameter, right? In the referenced paper they seem to use $h_e$ for the face $e$ and $h_K$ for the element size, where only $h_e$ appears in their bilinear form (above eq. 2.3).\r\n\r\n```suggestion\r\n# We calculate the characteristic size $h$ as the maximum face diameter.\r\n```\r\n\r\nI also want to note that, I am not sure if my statement regarding *maximum diameter* is correct or if it should be the minimum diameter (from a theoretical point of view). Does not matter for the case in the example at least.\r\n\r\nFurthermore, this computation also just works for structured grids. We should either add a note on this, or we just compute $h$ on the fly during the interface assembly for each face.', 'comment_created': datetime.datetime(2024, 1, 2, 1, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1439116747, 'comment_body': '```suggestion\r\ntopology = ExclusiveTopology(grid);\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 1, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1439117189, 'comment_body': '@KnutAM can you please clarify on your notation proposal on this example here?', 'comment_created': datetime.datetime(2024, 1, 2, 1, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1439117316, 'comment_body': 'xref https://github.com/Ferrite-FEM/Ferrite.jl/pull/787#discussion_r1439117189', 'comment_created': datetime.datetime(2024, 1, 2, 1, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1439276941, 'comment_body': ""I would write this like \r\n```\r\n\\int_\\Omega [\\nabla u] \\cdot [\\nabla \\delta u] \\,\\mathrm{d}\\Omega - \\int_{\\Gamma^0} \\llbracket u\\rrbracket  \\cdot \\{\\nabla \\delta u\\} + \\llbracket \\delta u\\rrbracket  \\cdot \\{\\nabla u\\}  \\,\\mathrm{d}\\Gamma^0 + \\int_{\\Gamma^0} \\frac{\\eta}{h} \\llbracket u\\rrbracket \\cdot \\llbracket \\delta u\\rrbracket   \\,\\mathrm{d}\\Gamma^0 = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_{\\partial \\Omega_N} ([\\nabla u] \\cdot \\boldsymbol{n}) \\delta u \\,\\mathrm{d} \\partial \\Omega_N\r\n```\r\nto be very explicit about where the nabla-operator is acting (also removed a few bold faces that I don't think should be there - technically I even use `\\boldsymbol{\\nabla}` everywhere, but I don't think that is necessary since nabla is always the gradient operator). "", 'comment_created': datetime.datetime(2024, 1, 2, 9, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439457769, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega = -\\int_\\Omega u (\\nabla \\cdot \\boldsymbol{\\tau}) \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\hat{u} \\boldsymbol{\\tau} \\cdot \\boldsymbol{n} \\,\\mathrm{d}\\Gamma,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439461759, 'comment_body': '```suggestion\r\n#      \\int_\\Gamma q \\boldsymbol{\\phi} \\cdot \\boldsymbol{n} \\,\\mathrm{d}\\Gamma = \\int_\\Gamma \\llbracket q\\rrbracket  \\cdot \\{\\boldsymbol{\\phi}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{q\\} \\llbracket \\boldsymbol{\\phi}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\r\n```\r\nDo I understand correctly that the jump of the vector-valued field phi is defined as $[[\\boldsymbol{\\phi}]] := \\boldsymbol{\\phi}^- \\cdot \\boldsymbol{n}^- + \\boldsymbol{\\phi}^+ \\cdot \\boldsymbol{n}^+$, in that case this should be defined. ', 'comment_created': datetime.datetime(2024, 1, 2, 13, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439464951, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega = -\\int_\\Omega u (\\nabla \\cdot \\boldsymbol{\\tau}) \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\hat{u}\\rrbracket  \\cdot \\{\\boldsymbol{\\tau}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\hat{u}\\} \\llbracket \\boldsymbol{\\tau}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\\\\\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\hat{\\boldsymbol{\\sigma}}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\delta u\\} \\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439467221, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega = \\int_\\Omega \\nabla u \\cdot \\boldsymbol{\\tau} \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\hat{u} - u\\rrbracket  \\cdot \\{\\boldsymbol{\\tau}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\hat{u} - u\\} \\llbracket \\boldsymbol{\\tau}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\\\\\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\hat{\\boldsymbol{\\sigma}}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\delta u\\} \\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439469203, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega = \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\hat{u} - u\\rrbracket  \\cdot \\{\\nabla \\delta u\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\hat{u} - u\\} \\llbracket \\nabla \\delta u\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\\\\\r\n#      \\int_\\Omega \\boldsymbol{\\sigma} \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\hat{\\boldsymbol{\\sigma}}\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\delta u\\} \\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  \\,\\mathrm{d}\\Gamma^0,\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439471449, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega + \\int_\\Gamma \\llbracket \\hat{u} - u\\rrbracket  \\cdot \\{\\nabla \\delta u\\} \\,\\mathrm{d}\\Gamma + \\int_{\\Gamma^0} \\{\\hat{u} - u\\} \\llbracket \\nabla \\delta u\\rrbracket  \\,\\mathrm{d}\\Gamma^0 - \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\hat{\\boldsymbol{\\sigma}}\\} \\,\\mathrm{d}\\Gamma - \\int_{\\Gamma^0} \\{\\delta u\\} \\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  \\,\\mathrm{d}\\Gamma^0 = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439473713, 'comment_body': '```suggestion\r\n#     and $\\hat{u} = 0$ on $\\partial \\Omega$. Such choice results in $\\{\\hat{\\boldsymbol{\\sigma}}\\} = \\{\\nabla u\\} - \\alpha(\\llbracket u\\rrbracket)$, $\\llbracket \\hat{u}\\rrbracket  = 0$, $\\{\\hat{u}\\} = \\{u\\}$, $\\llbracket \\hat{\\boldsymbol{\\sigma}}\\rrbracket  = 0$ and the equation becomes\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 13, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439475170, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega - \\int_\\Gamma \\llbracket u\\rrbracket  \\cdot \\{\\nabla \\delta u\\}  \\,\\mathrm{d}\\Gamma - \\int_\\Gamma \\llbracket \\delta u\\rrbracket  \\cdot \\{\\nabla u\\} - \\llbracket \\delta u\\rrbracket  \\cdot \\alpha(\\llbracket u\\rrbracket)  \\,\\mathrm{d}\\Gamma = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 14, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439476171, 'comment_body': '```suggestion\r\n#      \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega - \\int_\\Gamma \\llbracket u \\rrbracket \\cdot \\{\\nabla \\delta u\\} + \\llbracket \\delta u \\rrbracket  \\cdot \\{\\nabla u\\}  \\,\\mathrm{d}\\Gamma + \\int_\\Gamma \\frac{\\eta}{h} \\llbracket u\\rrbracket  \\cdot \\llbracket \\delta u\\rrbracket   \\,\\mathrm{d}\\Gamma = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 14, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439477548, 'comment_body': '```suggestion\r\n#  \\int_\\Omega \\nabla u \\cdot \\nabla \\delta u \\,\\mathrm{d}\\Omega - \\int_{\\Gamma^0} \\llbracket u\\rrbracket  \\cdot \\{\\nabla \\delta u\\} + \\llbracket \\delta u\\rrbracket  \\cdot \\{\\nabla u\\}  \\,\\mathrm{d}\\Gamma^0 + \\int_{\\Gamma^0} \\frac{\\eta}{h} \\llbracket u\\rrbracket \\cdot \\llbracket \\delta u\\rrbracket   \\,\\mathrm{d}\\Gamma^0 = \\int_\\Omega \\delta u \\,\\mathrm{d}\\Omega + \\int_{\\partial \\Omega_N} (\\nabla u \\cdot \\boldsymbol{n}) \\delta u \\,\\mathrm{d} \\partial \\Omega_N,\\\\\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 14, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1439478145, 'comment_body': '```suggestion\r\nend;\r\n```', 'comment_created': datetime.datetime(2024, 1, 2, 14, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1441382369, 'comment_body': 'I\'m not sure if this is related, I added it since it was the place I read the ""independent of h"" part, but I think it\'s about Nitsche\'s method. Remove it?\r\nEdit: I mean the reference', 'comment_created': datetime.datetime(2024, 1, 4, 6, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1441466148, 'comment_body': 'You can leave it as is, this is fine. You can interpret part of the penalty as a weak enforcement of a dirichlet condition and Nitsche has basically shown that that you have these 2 parameters.', 'comment_created': datetime.datetime(2024, 1, 4, 8, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}]","[{'commit_sha': 'c11561e6327632bd3ba5602db855430f3a46027e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3484b5fc1fe45a200570281f9d925c858721252e', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc98741728c8f4e65516c8347df12012e0bc7225', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6929dd317d8066d73b83854d2291f2afce79e6da', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484985469cfe0fc0a9df02ac22a8105c44ca11cc', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a31c4a1a165f1ce68c15f9d01a13a30837b950bf', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2cec4999d6e7788edd2bb194540fe68021f0670', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cb7ddadf6ec89d39078814d8f2e26431804200c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd72a21404ff11bdadac0f103e4d78733418ed9a3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9484e3129d3b47d0ee2e0cade4229ca0a9d0543b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12170404c437a631ab28b21c843eaed90eeebb38', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '739220f034f4cf4d01de169048e2fb751750c779', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df4a0a8dcad2009be6f41718cbd682d6625acba3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ad1d4dc15bf7997ea00d07f27f34ea6ae57ea3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bad8566c0739ebe8cb84fc10a2153415c4c1d80', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158558f3b8265f601963ed7dae8dbf25e143e4b3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5491f02fdf390253ea63c0565c87a82f90dc4542', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07dd3001a519cfa419836341238a774e57237d6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ba6d6a28b0ef4fefb02973a204f4668fdf45af5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d243c41c31b413a7c75e20a9ad70f172af8d6d3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '488fb6c48368f9d93a755d6f2cc6d49da91eb0e3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e6d8c902c2ea1b41db49cc5fd01500acc7cb861', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4953765827fcccbaceab2459fb400928b7305eb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a78da2b9fa09861d013aad72a14b6ea61c9b3eaa', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6edbedf0122beb3a3987f03a5609ce14df842075', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29d316e8fc28aa89c3202524e20924edf441cfb3', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a60d09546e85359494ee1c62243065fbbaecce6', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '442f948724e1b63628de9b6e065bdd4823004556', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ae0a78d8d8cd704ea1f4b5a713c10adb8d5f366', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d79725db4c72b1d1ed00d81175e4178bcd253ca', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48433ad1b40a5c88916324d573adfda3722f212b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '295ce7e63ab50588e734e4d64d13900da1ed9759', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97b4e05855a190a1178c5a510e7300ce77e29e9', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd6eb32b7063bc9cb79e7f5c0a5e02e7e20df45', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd1d4c96752a2f4c9218f7b304bff3a0ce2c168', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2c33061783f1d02446a091b061a87f74178483', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42daa5900a4ac867bbb92af41c3fc7084b2bad66', 'committer_username': 'fredrikekre', 'committer_name': 'Fredrik Ekre', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 28, 19, 44, 49, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1475219376,Arbitrary order Lagrange interpolations for hypercubes (with arbitrary basis) and triangle (equidistant basis only),"For #626 
Some comments:
- using Vandermonde inverse resulted in worse floating point errors during Dirac-delta tests
- Tested order 10 with heat equation example, seems to work (haven't checked convergence tho but seems ok from paraview)

Note: I also edited the existing Tri345 to be arbitrary but it doesn't have the arbitrary basis/points thing",False,790,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/790,https://github.com/Ferrite-FEM/Ferrite.jl/pull/790,open,658,117,7,20,5,10,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc23'}]",2023-08-14 22:54:28+00:00,,0.0,,"[{'comment_id': 1299177807, 'comment_body': 'I just realized that using GL points should result in `dirichlet_facedof_indices` being empty IIUC. This makes this function need to either check for faces on boundary or have predetermined options for the points (equidistant, GL, Radau) instead of passing the points in the constructor.\r\nI think having predetermined options would be easier and more consistent (as we guarantee the ordering), what do you think?', 'comment_created': datetime.datetime(2023, 8, 19, 11, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1299270837, 'comment_body': 'I would suggest that we just throw an error for now when trying to extract the Dirichlet dofs for all L2 elements which are not based on ""symmetric"" nodes, when the basis functions of the interior nodes are non-zero on the boundary (and for modal basis functions). If we want to work further on strong enforcement of the Dirichlet condition we have to think a bit how to do it correctly.', 'comment_created': datetime.datetime(2023, 8, 19, 21, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299271866, 'comment_body': '@fredrikekre should we separate the fixed order implementation which we have from the arbitrary order infrastructure?', 'comment_created': datetime.datetime(2023, 8, 19, 21, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299272246, 'comment_body': 'I think it is worth to investigate a code generator here in the future (e.g. to just generate the elements from the Ciarlet definition). So, no need to invest too much time here if it is not absurdely slow. :)', 'comment_created': datetime.datetime(2023, 8, 19, 21, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299273070, 'comment_body': 'Can we add doc strings for these, so users know about the functionality?\r\n\r\nAlso, how can users discover this feature? Maybe we should add some hint in the Lagrange doc string and a tip one of the examples? Not sure if it is worth to copy paste the full heat example here. In the future we can think about adding a Lagrangian formulation of some advection problem.', 'comment_created': datetime.datetime(2023, 8, 19, 22, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299273169, 'comment_body': 'Can you elaborate?', 'comment_created': datetime.datetime(2023, 8, 19, 22, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1299299722, 'comment_body': 'Passing `Val(order)` might be a quick and easy remedy', 'comment_created': datetime.datetime(2023, 8, 20, 4, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'KnutAM', 'type': 'User'}, {'comment_id': 1299418078, 'comment_body': 'The first line refers to the numbering convention used (copied from fixed order one)\nThe second one refers to the permutation that maps from the generated (-1:1)^n coordinates to the ones following the convention (such as {-1,...,1} ->{-1,1,...} in 1D)', 'comment_created': datetime.datetime(2023, 8, 20, 18, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1306389218, 'comment_body': 'I think we should wrap this also into the arbitrary order Lagrange struct.', 'comment_created': datetime.datetime(2023, 8, 26, 9, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1306582937, 'comment_body': ""I think the name is kinda too long 😄. Maybe we can make it a fallback for Lagrange constructor so we don't have to use this long name?"", 'comment_created': datetime.datetime(2023, 8, 27, 1, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}]","[{'commit_sha': '681d93bd4e35b132aa95b10f74911a22c76d10a2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aea12d0c993d589c65e9f000f57aa02518d6feca', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f9dc0699d19255d0520cf6d1e3e2214512372d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdcf12ff41e181cfa82e93db45a9a543e76047aa', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d8fc662dcde107fd1cd705d94bd36ccfc0605c0', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324a732061696dc85bc4e81e8c90ae4f0cbf5a04', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff4347b1f27f2a638b15d6592eabf67828c0250d', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b41a072b76469e57dcf0ea384abe4367a47930a4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f76cb72a57006c14917c8f0997db60aee7bebd1a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a21469a61a5fa608d7410927ea9d277cc677618c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9cbc21db6ce5ccd60a067678207c57be79b73b4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ab1dbf371703530078ce63bdb09d74eb51085f5', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15af785e8ac934097c6e6ee44af76718a18e374a', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cf8d933c117058a2120fbf90ac4ba38b910e4a7', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea1c6776d46ffa4b88399d023b8a059e14365a4', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e6818db410eb2b865bf89592eee1c82cbf6b2f8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08163a4aa162cf17be345100a908da9b46360752', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c14c96abed619df062f6c37987d962e630c9ac', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c24f7acafa2d0c81f57dc48fdb5e448310fe170', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17040e1660dace59c50156dc0b367fa08044f2f2', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52
1424774530,FaceSkeleton Vroom 1,"Makes face skeleton construction faster by using topology information.
Benchmarks:
```julia
julia> using Ferrite

julia> using BenchmarkTools

julia> grid = generate_grid(Hexahedron,(100,100,100))
Grid{3, Hexahedron, Float64} with 1000000 Hexahedron cells and 1030301 nodes

julia> topology = ExclusiveTopology(grid);

julia> @benchmark Ferrite. _faceskeleton(topology, grid)
BenchmarkTools.Trial: 19 samples with 1 evaluation.
 Range (min … max):  221.792 ms … 410.902 ms  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     254.305 ms               ┊ GC (median):    0.00%
 Time  (mean ± σ):   271.663 ms ±  46.478 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▁▁   ██▁█ ▁  █      █▁    ▁   ▁        ▁                    ▁  
  ██▁▁▁████▁█▁▁█▁▁▁▁▁▁██▁▁▁▁█▁▁▁█▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁
  222 ms           Histogram: frequency by time          411 ms <

 Memory estimate: 46.23 MiB, allocs estimate: 2.
 ```
 
 Current implementation:
 ```julia
 julia> using Ferrite

julia> using BenchmarkTools

julia> grid = generate_grid(Hexahedron,(100,100,100))
Grid{3, Hexahedron, Float64} with 1000000 Hexahedron cells and 1030301 nodes

julia> topology = ExclusiveTopology(grid);

julia> @benchmark Ferrite. _faceskeleton(topology, grid)
BenchmarkTools.Trial: 3 samples with 1 evaluation.
 Range (min … max):  1.578 s …    1.932 s  ┊ GC (min … max): 0.00% … 18.59%
 Time  (median):     1.763 s               ┊ GC (median):    0.00%
 Time  (mean ± σ):   1.758 s ± 176.799 ms  ┊ GC (mean ± σ):  6.81% ± 10.74%

  █                             █                          █  
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁
  1.58 s         Histogram: frequency by time         1.93 s <

 Memory estimate: 652.91 MiB, allocs estimate: 17026973.
 ```
 `grid` argument is kept in case it's needed in the future. The `if-else` thing can be avoided if we consistently define ""faces"" as vertices for 1D case.",True,759,https://api.github.com/repos/Ferrite-FEM/Ferrite.jl/pulls/759,https://github.com/Ferrite-FEM/Ferrite.jl/pull/759,closed,89,24,2,7,4,3,2,0,"[{'name': 'enhancement'}, {'name': 'gsoc23'}]",2023-07-07 14:32:35+00:00,2023-12-06 18:39:24+00:00,13147609.0,"152 days, 4:06:49","[{'comment_id': 1259342048, 'comment_body': 'I think we can be more explicit here. Either we directly use the grid dimension or check for the specific cell dimension. For the former case we still should give the user a warning or an error when we run into the case that a cell with dimension 1 is found when building the topology for a grid of dimension > 1.', 'comment_created': datetime.datetime(2023, 7, 11, 7, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'termi-official', 'type': 'User'}, {'comment_id': 1260013225, 'comment_body': 'New banchmarks:\r\n```julia\r\njulia> @benchmark Ferrite. _faceskeleton(topology, grid)\r\nBenchmarkTools.Trial: 26 samples with 1 evaluation.\r\n Range (min … max):  182.499 ms … 208.627 ms  ┊ GC (min … max): 0.00% … 0.00%\r\n Time  (median):     193.976 ms               ┊ GC (median):    0.00%\r\n Time  (mean ± σ):   192.880 ms ±   5.542 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\r\n\r\n                             █                                   \r\n  ▅▁▁▁▁▁▅█▅▁▁▅▁▁▅▁▅▁▁▁▁▁▅▁█▅▅█▁▅█▁▁▅▅▁▅▁▁▁▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▅ ▁\r\n  182 ms           Histogram: frequency by time          209 ms <\r\n\r\n Memory estimate: 46.23 MiB, allocs estimate: 2.\r\n ```', 'comment_created': datetime.datetime(2023, 7, 11, 16, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'AbdAlazezAhmed', 'type': 'User'}, {'comment_id': 1417793921, 'comment_body': 'just cosmetics\r\n```suggestion\r\n        i += 1\r\n```', 'comment_created': datetime.datetime(2023, 12, 6, 18, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'koehlerson', 'type': 'User'}]","[{'commit_sha': '2de4c6929539636cc236cff78693a143f1c718d8', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b76c7d117ae53bec3e5497ea33abe022781dc46b', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3540d4478bfd7342a82637ea058ac242c4ed41c', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5974c229eada02aa4b5174482bf49b90d6f5d703', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8381d4229bdcf7122aea22d5c2c8375e1ba82912', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49bc732563bc5b8ea2dfa02111688424f9064b43', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '439978bc6f914b6c87bad53e3e53c4745bad3ebb', 'committer_username': 'AbdAlazezAhmed', 'committer_name': 'AbdulazizAhmed', 'committer_email': 'abdulaziz.hemid00@eng-st.cu.edu.eg', 'commit_date': datetime.datetime(2018, 11, 29, 19, 27, 42, tzinfo=datetime.timezone.utc)}]",AbdulazizAhmed,45468098,abdulaziz.hemid00@eng-st.cu.edu.eg,User,,17,,149,52

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
41787768,Ferrite.jl,Ferrite-FEM/Ferrite.jl,Julia,86,337,14,32,868,134,123,46,"[{'id': 1632989505, 'number': 856, 'closed': datetime.datetime(2023, 12, 7, 11, 1, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 6, 17, 51, 46, tzinfo=datetime.timezone.utc), 'time_taken': 61778.0, 'time_delta': '17:09:38', 'additions': 20, 'deletions': 1, 'state': 'closed'}, {'id': 1632986275, 'number': 855, 'closed': datetime.datetime(2023, 12, 7, 9, 27, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 6, 17, 49, 20, tzinfo=datetime.timezone.utc), 'time_taken': 56307.0, 'time_delta': '15:38:27', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1562120467, 'number': 829, 'closed': None, 'created': datetime.datetime(2023, 10, 18, 8, 17, 8, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 122, 'deletions': 89, 'state': 'open'}, {'id': 1475219376, 'number': 790, 'closed': None, 'created': datetime.datetime(2023, 8, 14, 22, 54, 28, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 658, 'deletions': 117, 'state': 'open'}, {'id': 1472857060, 'number': 787, 'closed': datetime.datetime(2024, 1, 4, 13, 30, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 12, 12, 47, 57, tzinfo=datetime.timezone.utc), 'time_taken': 12530572.0, 'time_delta': '145 days, 0:42:52', 'additions': 401, 'deletions': 0, 'state': 'closed'}, {'id': 1455258807, 'number': 779, 'closed': datetime.datetime(2023, 8, 29, 9, 51, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 30, 20, 21, 4, tzinfo=datetime.timezone.utc), 'time_taken': 2554249.0, 'time_delta': '29 days, 13:30:49', 'additions': 321, 'deletions': 123, 'state': 'closed'}, {'id': 1424774530, 'number': 759, 'closed': datetime.datetime(2023, 12, 6, 18, 39, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 7, 14, 32, 35, tzinfo=datetime.timezone.utc), 'time_taken': 13147609.0, 'time_delta': '152 days, 4:06:49', 'additions': 89, 'deletions': 24, 'state': 'closed'}, {'id': 1413335271, 'number': 751, 'closed': datetime.datetime(2023, 7, 4, 13, 33, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 29, 13, 22, 46, tzinfo=datetime.timezone.utc), 'time_taken': 432657.0, 'time_delta': '5 days, 0:10:57', 'additions': 37, 'deletions': 38, 'state': 'closed'}, {'id': 1403534950, 'number': 747, 'closed': datetime.datetime(2023, 7, 19, 15, 36, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 13, 33, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2340219.0, 'time_delta': '27 days, 2:03:39', 'additions': 153, 'deletions': 18, 'state': 'closed'}, {'id': 1397258858, 'number': 743, 'closed': datetime.datetime(2023, 12, 3, 2, 39, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 19, 53, 3, tzinfo=datetime.timezone.utc), 'time_taken': 14453195.0, 'time_delta': '167 days, 6:46:35', 'additions': 1190, 'deletions': 45, 'state': 'closed'}, {'id': 1365601425, 'number': 730, 'closed': datetime.datetime(2023, 5, 26, 14, 47, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 26, 2, 25, 58, tzinfo=datetime.timezone.utc), 'time_taken': 44498.0, 'time_delta': '12:21:38', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 1363644955, 'number': 729, 'closed': datetime.datetime(2023, 6, 20, 22, 4, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 24, 19, 4, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2343575.0, 'time_delta': '27 days, 2:59:35', 'additions': 140, 'deletions': 28, 'state': 'closed'}, {'id': 1351359953, 'number': 710, 'closed': datetime.datetime(2023, 7, 25, 7, 56, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 15, 19, 48, 53, tzinfo=datetime.timezone.utc), 'time_taken': 6091642.0, 'time_delta': '70 days, 12:07:22', 'additions': 354, 'deletions': 111, 'state': 'closed'}, {'id': 1286926889, 'number': 633, 'closed': datetime.datetime(2023, 3, 23, 8, 14, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 23, 7, 23, 31, tzinfo=datetime.timezone.utc), 'time_taken': 3033.0, 'time_delta': '0:50:33', 'additions': 3, 'deletions': 4, 'state': 'closed'}, {'id': 1254276778, 'number': 606, 'closed': datetime.datetime(2023, 5, 3, 15, 36, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 25, 18, 27, 10, tzinfo=datetime.timezone.utc), 'time_taken': 5778577.0, 'time_delta': '66 days, 21:09:37', 'additions': 642, 'deletions': 1, 'state': 'closed'}]"
