pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
663434485,feat: initial structure+first approach,"<!--   Thank you for your contribution. Before you submit the pull request:
1. Follow our contribution guidelines
2. Test your changes and attach their results to the pull request.
3. Update the relevant documentation.
-->
This PR will:

- setup dependencies 
- add eslint rules
- implements `getRelations` API for default syntax

default Syntax:
```
metrics => {
    ServerMap(n-servers) => {
              <Url+protocol> => ChannelMap(n-channels) => {
                 <channelName> => { sub: [] , pub: [] }
               },
               ....
    }, ...
}
```

Output Example:
<img width=""479"" alt=""Screenshot 2021-06-07 at 4 08 28 PM"" src=""https://user-images.githubusercontent.com/53009722/121002983-9ac68000-c7aa-11eb-91d1-f336fefc8a58.png"">

",True,3,https://api.github.com/repos/asyncapi-archived-repos/cupid/pulls/3,https://github.com/asyncapi-archived-repos/cupid/pull/3,closed,5785,0,8,13,6,44,1,0,[{'name': 'released'}],2021-06-07 10:33:57+00:00,2021-06-08 08:19:22+00:00,78325.0,21:45:25,"[{'comment_id': 646480435, 'comment_body': ""You don't have any `build` as it is pure JS and not TS 🙂 "", 'comment_created': datetime.datetime(2021, 6, 7, 10, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonaslagoni', 'type': 'User'}, {'comment_id': 646482567, 'comment_body': 'I would add some function JSDoc here to explain what it does 🙂 ', 'comment_created': datetime.datetime(2021, 6, 7, 10, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jonaslagoni', 'type': 'User'}, {'comment_id': 646482653, 'comment_body': 'I would add some function JSDoc here to explain what it does 🙂 ', 'comment_created': datetime.datetime(2021, 6, 7, 10, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jonaslagoni', 'type': 'User'}, {'comment_id': 646487129, 'comment_body': 'Instead of needing comments to explain the structure, I would suggest having separate classes that imply the structure instead.', 'comment_created': datetime.datetime(2021, 6, 7, 11, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jonaslagoni', 'type': 'User'}, {'comment_id': 646494249, 'comment_body': ""As I see you probably use the `template-for-generator-templates` templates, am I right? 😄 You should copy content from `.gitignore` to this file :) It's a good pattern, because you will be able to have in the future `coverage` etc folders and eslint will lint these folders, what is not needed."", 'comment_created': datetime.datetime(2021, 6, 7, 11, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646495401, 'comment_body': '```suggestion\r\n  ""description"": ""A library that focuses on finding and analyzing the relationships between AsyncAPI Documents too later output consolidated information about the system architecture. Output format should be customizable and available in different formats like uml, mermaid.js and other."",\r\n```', 'comment_created': datetime.datetime(2021, 6, 7, 11, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646498556, 'comment_body': 'As Jonas mentioned, you don\'t use TS so you should add placeholder for it:\r\n\r\n ```suggestion\r\n    ""generate:assets"": ""echo \\""Nothing to generate\\"""",\r\n```', 'comment_created': datetime.datetime(2021, 6, 7, 11, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646498675, 'comment_body': ""As Jonas mentioned, you don't use TS:\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 6, 7, 11, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646500400, 'comment_body': ""You can use simple `map` function. \r\n\r\n```suggestion\r\nreturn new Promise.all(asyncApiDocs.map(async doc => parser.parse(doc.json())));\r\n```\r\n\r\n`Promise.all` returns the single `Promise` (and when is fullfiled array of data) and also handles the rejection for each promise inside input array, so you don't need to handle them in you side :) As you can see code is much simpler to read."", 'comment_created': datetime.datetime(2021, 6, 7, 11, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646501588, 'comment_body': ""I think that we should go with approach when second argument is a object with options like:\r\n\r\n```suggestion\r\nconst defaultOptions = {\r\n  syntax: 'default',\r\n}\r\n\r\nasync function getRelations(asyncApiDocs, { syntax } = defaultOptions) {\r\n```\r\n\r\nIt's good when will we expand the options :)"", 'comment_created': datetime.datetime(2021, 6, 7, 11, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646502470, 'comment_body': 'When you need as argument an array, you should use the `Array.isArray` function', 'comment_created': datetime.datetime(2021, 6, 7, 11, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646502687, 'comment_body': ""You should throw error here, that given syntax isn't supported. "", 'comment_created': datetime.datetime(2021, 6, 7, 11, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646503378, 'comment_body': 'If you need only values you can use `.values()` function \r\n\r\n```suggestion\r\n      for (const credentials of Object.values(servers)) {\r\n```', 'comment_created': datetime.datetime(2021, 6, 7, 11, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646504725, 'comment_body': ""I think that if you don't find given relation in `metrics` Map you should set new relation here, not at the end of function. It's much clearer to read and it's a good pattern not to set every this same item to Map with corresponding key.\r\n\r\n```suggestion\r\n          relation = new Map();\r\n          metrics.set(slug,relation);\r\n```"", 'comment_created': datetime.datetime(2021, 6, 7, 11, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646505521, 'comment_body': 'This same situation as above. Set `application` to `relation` here:\r\n\r\n```suggestion\r\n              application = {\r\n                sub: [],\r\n                pub: [],\r\n              };\r\n              relation.set(channelName, application);\r\n```', 'comment_created': datetime.datetime(2021, 6, 7, 11, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646505646, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 7, 11, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646505737, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 7, 11, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646517096, 'comment_body': 'Yeah, Lukasz asked to have the initial setup from `template-for-generator-templates`\r\n\r\n\r\n> You should copy content from `.gitignore` to this file\r\n\r\nSure, thanks for pointing that out.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 7, 11, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 646523989, 'comment_body': 'Totally agree, never thought like that :)', 'comment_created': datetime.datetime(2021, 6, 7, 12, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 646529003, 'comment_body': ""You don't need these 3 files. They are only needed in some templates\r\n\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2021, 6, 7, 12, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646543883, 'comment_body': ""I had it like `for (const [serverName, credentials] of Object.entries(servers)) ` and was thinking to add `serverName` in         ``const slug = `${credentials.url()},${credentials.protocol()}`` so as to make it more unique. Like what if two servers named 'production' and 'development' have the same url and protocol, in that case, slug would remain same and services would double up in the sub, pub Array.\r\nBut due to lint issue, removed that for now :)\r\n\r\nSo do we have to make slug more unique having the names of servers concatenated too like:\r\nslug = `serverName,${credentials.url()},${credentials.protocol()}`"", 'comment_created': datetime.datetime(2021, 6, 7, 12, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 646547746, 'comment_body': ""But `serverName` is only a name for server, it's something like metadata for server, it can be named in different way in other spec, so as you wrote you can end with double items in map for this same server. I think that we should operate only on url and protocol. From your comment I also find some problems, because someone can describe server's url with parameters like `server/{parameter}` and define for this parameter some enum values. Not now, but in the next weeks (maybe at the end of gsoc) we should check if this server is exactly this same as in another spec with given possible enum. I hope that you understand :)"", 'comment_created': datetime.datetime(2021, 6, 7, 12, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646583527, 'comment_body': ""Thanks! You cleared my doubt here, I was reassigning the same item to Map at the end of the function as I thought that change in `application` won't change the original application in Map 😞 "", 'comment_created': datetime.datetime(2021, 6, 7, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 646592281, 'comment_body': 'Really sorry for this one', 'comment_created': datetime.datetime(2021, 6, 7, 13, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 646697881, 'comment_body': ""> I think that we should operate only on url and protocol\r\n> someone can describe server's url with parameters like `server/{parameter}` and define for this parameter some enum values.\r\n\r\nYeah! you're right. I just checked out the specs and saw that we could have it like this(`server/{parameter}`) too.\r\n\r\n```\r\nservers:\r\n- url: '{username}.gigantic-server.com:{port}/{basePath}'\r\n  description: The production API server\r\n  protocol: secure-mqtt\r\n  variables:\r\n    username:\r\n      # note! no enum here means it is an open value\r\n      default: demo\r\n      description: This value is assigned by the service provider, in this example `gigantic-server.com`\r\n    port:\r\n      enum:\r\n        - '8883'\r\n        - '8884'\r\n      default: '8883'\r\n    basePath:\r\n      # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`\r\n      default: v2\r\n```\r\nThis might be a big concern coz like here, we have to configure the flow to support this case too, also need to iterate with multiple `ports: 8883, 8884`. I will keep this in mind, and would definitely fix it in the next weeks. For now, I think we can move forward. What do you suggest? 🤔 \r\n\r\nShall I create an issue now only regarding this?\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 7, 15, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 646714233, 'comment_body': 'Yep, you should create issue for that to not forget about it :)', 'comment_created': datetime.datetime(2021, 6, 7, 15, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646715629, 'comment_body': 'No sorry, really, I am happy that I could help :) ', 'comment_created': datetime.datetime(2021, 6, 7, 15, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646717935, 'comment_body': 'You operate on objects, which are references by default in JS, so your code was good, but better is set only once and then only operate on ref, not set this same value to corresponding key nth times.', 'comment_created': datetime.datetime(2021, 6, 7, 15, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 646720781, 'comment_body': 'Please make here `try ... catch` for error handling :)', 'comment_created': datetime.datetime(2021, 6, 7, 15, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 647130032, 'comment_body': ""@jonaslagoni you mean like we have models for asyncApi document in parser-js, right?\r\n\r\nThis is really a good idea which could help us to extend the scope of this lib. Would love to implement it, but this isn't in the scope of the timeline. I would try to build lib as fast as possible so that I could implement these functionalities too at the end. "", 'comment_created': datetime.datetime(2021, 6, 8, 5, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 647130234, 'comment_body': 'Sure\r\n', 'comment_created': datetime.datetime(2021, 6, 8, 5, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 647138768, 'comment_body': 'one more lesson learned today :)', 'comment_created': datetime.datetime(2021, 6, 8, 6, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 647145368, 'comment_body': 'Oops! missed this, will fix.', 'comment_created': datetime.datetime(2021, 6, 8, 6, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 647169816, 'comment_body': '```suggestion\r\n * Validates and analyzes a list of AsyncAPI documents and get applications described by those files\r\n * \r\n * @param {Array} asyncApiDocs An array of asyncApiDocuments\r\n * @param {Object} options for getting a relations\r\n * @returns {Promise<DiscoveredRelations>} Relations between documents\r\n```\r\n\r\nBetter would be describe second argument as options, not as single syntax, and also better is write AsyncAPI as `AsyncAPI` not `asyncApi` etc :)', 'comment_created': datetime.datetime(2021, 6, 8, 7, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 647169925, 'comment_body': ""> But `serverName` is only a name for server, it's something like metadata for server, it can be named in different way in other spec, so as you wrote you can end with double items in map for this same server\r\n\r\n@magicmatatjahu Yeah, `serverName` could be anything but won't it be a bug if we end up doubling up items for the same server?\r\n\r\nAlso, normally user won't have same protocol and url for different defined servers within the same file but I was just considering every possible case. "", 'comment_created': datetime.datetime(2021, 6, 8, 7, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 647171691, 'comment_body': '```suggestion\r\n * Validate and parse given array of AsyncAPI documents. \r\n *\r\n * @param {Array} asyncApiDocs unparsed AsyncAPI documents\r\n * @returns {Array} parsed AsyncAPI documents\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 7, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 647180778, 'comment_body': '> Also, normally user won\'t have same protocol and url for different defined servers within the same file but I was just considering every possible case.\r\n\r\nI don\'t think so as you. Different servers should be defined one time in spec.\r\n\r\n> Yeah, serverName could be anything but won\'t it be a bug if we end up doubling up items for the same server?\r\n\r\nIt\'s true that it won\'t be a ""normal"" bug but for me it will be a ""logical"" bug. You operate on the servers of the given spec. In one spec you can describe one server with this same url and protocol but with (eg) `server1` name, in the second you can describe this same server with url and protocol but with `server2` name. When you will use `serverName` for the `relation` key you can end up with doubled values in the relations Map, with different pub/sub items. \r\n\r\n```yaml\r\n# one spec\r\nservers:\r\n  server1:\r\n    url: someUrl\r\n    protocol: kafka\r\nchannels:\r\n  someChannel: ...\r\n\r\n# second spec\r\nservers:\r\n  server2:\r\n    url: someUrl\r\n    protocol: kafka\r\nchannels:\r\n  someAnotherChannel: ...\r\n``` \r\n\r\nWhen you will use the `serverName` you will have two relations, for `server1` and `server2` and `server1` will have only channels related to spec with `server1`, and `someAnotherChannel` channel will be related only to `server2` when this is the same server , but you should end with one relation with two channels inside :)', 'comment_created': datetime.datetime(2021, 6, 8, 7, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 647189276, 'comment_body': 'You can create issue for that and we can discuss about it in the new issue :)', 'comment_created': datetime.datetime(2021, 6, 8, 7, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 647196669, 'comment_body': 'I think you misunderstood me here. What you described is totally clear to me.\r\n\r\nBut, I was talking about a case like this one.\r\n\r\n```yaml\r\n#one spec\r\n  servers: \r\n    production:\r\n        url: mqtt://localhost:1883\r\n        protocol: mqtt\r\n    development:\r\n        url: mqtt://localhost:1883\r\n        protocol: mqtt\r\n  channels:\r\n  someAnotherChannel: ...\r\n```\r\nIf this is the case then we would iterate 2 times(for production and development) having the same slug and then double up the applications described for this AsyncAPI document.', 'comment_created': datetime.datetime(2021, 6, 8, 7, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 647198787, 'comment_body': ""Aaa ok, sorry :) But there you have also this same problem, because you will have doubled servers and you won't be able to connect in easy way this app with another app in another spec. I think that we should go first with only url and protocol and then think about serverName. You can create issue for that :)"", 'comment_created': datetime.datetime(2021, 6, 8, 7, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 647201256, 'comment_body': ""Ahh sorry... I think about `serverName` again and again...  Of course, you're right, in current logic you will have doubled pub/sub in your app, but I don't think so that it should be hard to fix, but not now :) You can create issue for that and handle it in the next PRs."", 'comment_created': datetime.datetime(2021, 6, 8, 7, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 647202860, 'comment_body': '```suggestion\r\n    ""bump:version"": ""npm --no-git-tag-version --allow-same-version version $VERSION"",\r\n    ""release"": ""semantic-release""\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 7, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jonaslagoni', 'type': 'User'}, {'comment_id': 647205481, 'comment_body': '```suggestion\r\n  },\r\n  ""publishConfig"": {\r\n    ""access"": ""public""\r\n  },\r\n  ""release"": {\r\n    ""branches"": [\r\n      ""master""\r\n    ],\r\n    ""plugins"": [\r\n        [\r\n          ""@semantic-release/commit-analyzer"",\r\n            {\r\n              ""preset"": ""conventionalcommits""\r\n            }\r\n        ],\r\n        [\r\n          ""@semantic-release/release-notes-generator"",\r\n          {\r\n            ""preset"": ""conventionalcommits""\r\n          }\r\n        ],\r\n        ""@semantic-release/npm"",\r\n        ""@semantic-release/github""\r\n    ]\r\n  }\r\n```', 'comment_created': datetime.datetime(2021, 6, 8, 7, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jonaslagoni', 'type': 'User'}, {'comment_id': 647226575, 'comment_body': 'Yeah, it could be a potential bug coz user should never have define the spec having two servers with same url and protocol in the first place. Would open an issue for the same 👍🏽 ', 'comment_created': datetime.datetime(2021, 6, 8, 8, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}]","[{'commit_sha': '955ce81b6d59365c476af2a46cb0c578a6d80ce2', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb43a6a3082ba4a37d5f16cac237cc2e3f700d1e', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb2b6b4d6a024f9715dd9402b98f3a33f90dfd0', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f0988b84a202a338ab729636d36b0608a73f3c', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd508b8845f66b746528f1b2c01fb79b9ed1b50d8', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a3dbc71a3398c8d57d91be0400acac9cea7f0f', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1269597fa48f28455555da9b855574633595189', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5a82b75aecc8529a0558b2bedbf0488c31ee76', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92860f999a5f713d030f1f0e0db8a0dc42838070', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6268618756dd7acc64226415b8c26f3fc354eb50', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21adc5909153cf63079b8df43b4821b96b27de97', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951c291f24966b2f746513741add225885e86e0b', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7dddeaf7e39368b5a94bb30aa9de55a5a341c59', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}]",Arjun Garg,53009722,,User,,66,,13,18
665013152,chore: implement function to generate mermaid class diagram,"This PR: 

implements functionality to generate mermaid class diagram from default syntax
For review, could test on [flight service](https://github.com/amadeus4dev/amadeus-async-flight-status)",True,7,https://api.github.com/repos/asyncapi-archived-repos/cupid/pulls/7,https://github.com/asyncapi-archived-repos/cupid/pull/7,closed,50,0,2,8,4,21,1,0,[{'name': 'released'}],2021-06-08 15:16:13+00:00,2021-06-09 12:10:14+00:00,75241.0,20:54:01,"[{'comment_id': 648115121, 'comment_body': 'You can use here the `switch` statement for better maintanance :)\r\n\r\n... but I think that better will be split the functions for changing default output to another by separate functions. What do I mean?\r\n\r\nAt the moment user can use `getRelations` function and pass options which format he/she needs, but we can change this behaviour and always return default syntax and then export from package the `getMermaidDiagram` function, so usage of package will look like:\r\n\r\n```js\r\nconst output = getRelations(...asyncAPIDocs);\r\nconst mermaid = getMermaidDiagram(output);\r\n```\r\n\r\nWe can make in as the followup, but better will be making the issue to discuss it (we can wait for Łukasz). What do you think of this approach? Of course we can stay with current logic at the moment :)', 'comment_created': datetime.datetime(2021, 6, 9, 9, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648118844, 'comment_body': ""You can use here destruction of array syntax, as server after split will be of array type, you can write this line as:\r\n\r\n```js\r\nconst [url, protocol] = server.split(',');\r\n```"", 'comment_created': datetime.datetime(2021, 6, 9, 9, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648119654, 'comment_body': 'Make it simple :)\r\n\r\n```suggestion\r\n  return `classDiagram${mermaidSyntax}`;\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 9, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648120455, 'comment_body': 'I think that we should change the name of `syntax` to `output`, there and in the other places. What do you think? 🤔 ', 'comment_created': datetime.datetime(2021, 6, 9, 9, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648122342, 'comment_body': ""You can use here `.replace(/\\s/g,'')` to remove all white chars"", 'comment_created': datetime.datetime(2021, 6, 9, 9, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648122446, 'comment_body': ""You can use here `.replace(/\\s/g,'')` to remove all white chars"", 'comment_created': datetime.datetime(2021, 6, 9, 9, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648143685, 'comment_body': '> You can use here the `switch` statement for better maintanance :)\r\n\r\nI had it in my mind but thought that I would change it after we start adding more custom syntax :)\r\n\r\n> I think that better will be split the functions for changing default output to another by separate functions\r\n\r\nYeah, we could have that. When we will support class models for our metrics we could have APIs which could add a subscriber or publisher to the channel to see what happens with the system if one of the puzzles is removed/added.\r\n\r\n```javascript\r\nconst output = getRelations(...asyncAPIDocs);\r\noutput.subscribe(<channelName>,<server>,<serviceName>);\r\nconst mermaid = getMermaidDiagram(output);\r\n```\r\n\r\n> but better will be making the issue to discuss it (we can wait for Łukasz). What do you think of this approach? Of course we can stay with current logic at the moment :)\r\n\r\nSure, will open it up :)', 'comment_created': datetime.datetime(2021, 6, 9, 9, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 648144098, 'comment_body': 'Sure, this way is much better.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 648145467, 'comment_body': 'Ok, so we can stay with the current solution and wait for Łukasz :) ', 'comment_created': datetime.datetime(2021, 6, 9, 9, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648145885, 'comment_body': 'I think the output we are providing should be like `default output` and the formats we are supporting should be like `mermaid syntax`, `plantUML syntax` etc...', 'comment_created': datetime.datetime(2021, 6, 9, 9, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 648148209, 'comment_body': 'Of course, I agree, but I mean that we should not write about output as `syntax`, or we should change it to `output syntax`, `default output syntax` etc so as not to be misleading.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648149139, 'comment_body': '> Maybe you should start writing tests\r\n\r\nYeah, this would be the next thing\r\n\r\n> You can use `jest` testing framework. You can see how to configure it for example [here](https://github.com/asyncapi/modelina/blob/master/jest.config.js)\r\n\r\nCan we use `mocha` testing framework?', 'comment_created': datetime.datetime(2021, 6, 9, 9, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 648150059, 'comment_body': 'If you want it, feel free :) ', 'comment_created': datetime.datetime(2021, 6, 9, 9, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648151457, 'comment_body': 'Agree, `default output syntax` would be good 👍🏽 ', 'comment_created': datetime.datetime(2021, 6, 9, 9, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 648201901, 'comment_body': '`metadata` is for future metadata? If yes, add comment for it.', 'comment_created': datetime.datetime(2021, 6, 9, 11, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648201982, 'comment_body': '`metadata` is for future metadata? If yes, add comment for it.', 'comment_created': datetime.datetime(2021, 6, 9, 11, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648202034, 'comment_body': '`metadata` is for future metadata? If yes, add comment for it.', 'comment_created': datetime.datetime(2021, 6, 9, 11, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648221037, 'comment_body': 'We can change it to:\r\n\r\n```suggestion\r\n        mermaidSyntax+= `\\nclass ${channelName} { \\n metadata \\n}\\n`; // TODO: add metadata\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 11, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648221160, 'comment_body': '```suggestion\r\n        mermaidSyntax+= `\\nclass ${channelName} { \\n metadata \\n}\\n`; // TODO: add metadata\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 11, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648221377, 'comment_body': '```suggestion\r\n          mermaidSyntax+=`\\nclass ${service} {\\n metadata \\n}`; // TODO: add metadata\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 11, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 648221569, 'comment_body': '```suggestion\r\n          mermaidSyntax+=`\\nclass ${service} {\\n metadata \\n}`; // TODO: add metadata\r\n```', 'comment_created': datetime.datetime(2021, 6, 9, 11, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}]","[{'commit_sha': '75674d18db8e5cfdc89e1e501f1455a09b4cc95e', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b05375110cc8ef76e24a553a0479384677e226', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d7a8ed21c0ef4aad7ad630eddb2df9ded84358f', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8324515285380e86b5fdf4b043feb42b58324ca5', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c404aa3b8fa8d0b9c31a375f2f94233ac8f283dd', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9914e243e7aec310b4b9a026866e6d9e3c52035', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c59f5c390d34f7467d2d436cf2d474eb4a542dd', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b15511c1e0a7f1148e21f1b8283d694534af47', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}]",Arjun Garg,53009722,,User,,66,,13,18
668016624,chore: add metadata to default output syntax,"This PR aims to add metadata to default output syntax.
",True,10,https://api.github.com/repos/asyncapi-archived-repos/cupid/pulls/10,https://github.com/asyncapi-archived-repos/cupid/pull/10,closed,11,5,1,4,18,7,1,0,[{'name': 'released'}],2021-06-11 11:07:28+00:00,2021-06-15 16:59:53+00:00,366745.0,"4 days, 5:52:25","[{'comment_id': 649916954, 'comment_body': ""Duplicated items in sub/pub will be only in case, when someone call two specs with this same title. Statements `application.pub.has(title)` should be false in 99% cases... Hmmm 🤔 Maybe we should throw the error if you have existing item, or use `id` of spec to identity app rather than `title` -> https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#A2SIdString \r\n\r\nAlso `channel._json` is good, but better will be pass normal model from parser-js:\r\n\r\n```suggestion\r\n            if (channel.hasPublish() && !application.pub.has(title)) {\r\n              application.pub.set(title,channel);\r\n```\r\n\r\nThen you and user can use metadata with corresponding model's functions or make `channel.json()` to retrieve model's json. It's better :)"", 'comment_created': datetime.datetime(2021, 6, 11, 11, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 649917086, 'comment_body': '```suggestion\r\n              application.sub.set(title,channel);\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 11, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 649940953, 'comment_body': ""Yeah! that 1% could be when we would have the case we discussed earlier:\r\nhttps://github.com/asyncapi/app-relations-discovery/pull/3#discussion_r647196669\r\n\r\n> Hmmm 🤔 Maybe we should throw the error if you have existing item, or use `id` of spec to identity app rather than `title` ->\r\n\r\nBut after solving the case I just linked if there's a possibility of it then we should use your approach. After all, why to have these corner cases left untouched, we should throw an error :)"", 'comment_created': datetime.datetime(2021, 6, 11, 12, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 649950781, 'comment_body': ""> Yeah! that 1% could be when we would have the case we discussed earlier: #3 (comment)\r\n\r\nI think that's the different case, because in `#3 (comment)` you had problem with serverName, but there is a problem with spec/app name.\r\n\r\nSo let's throw error at the moment :)"", 'comment_created': datetime.datetime(2021, 6, 11, 12, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 649953155, 'comment_body': ""Ahh.. and again I thought about `serverName` 😅 You're right about:\r\n\r\n> Yeah! that 1% could be when we would have the case we discussed earlier: #3 (comment)\r\n\r\nBut lets throw error anyway :)"", 'comment_created': datetime.datetime(2021, 6, 11, 12, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 651749415, 'comment_body': ""one-line if here looks terrible 😅 It's hard to see that `application.pub.set(title,channel);` is outside the if. Please, write the body of if in the `{}`\r\n\r\n```suggestion\r\n              if (application.pub.has(title)) {\r\n                throw new Error(`${title} is already publishing to ${channel}`);\r\n              }\r\n              application.pub.set(title,channel);\r\n```"", 'comment_created': datetime.datetime(2021, 6, 15, 12, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 651749790, 'comment_body': '```suggestion\r\n              if (application.sub.has(title)) {\r\n                throw new Error(`${title} is already subscribed to ${channel}`);\r\n              }\r\n              application.sub.set(title,channel);\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 12, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}]","[{'commit_sha': '87981860537a6b7d99837a96662a773aca8725a7', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbaea18d68d5a735724b0e3a5ca559a04c442edf', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7abab9638c0f901ea7a10b1fcf3570b58fe1600c', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38a0414497d286fd84a402837a5892854c1705a3', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}]",Arjun Garg,53009722,,User,,66,,13,18
671251201,feat: pivot mermaid output from classDiagram to flowchart,"This PR brings changes to generate mermaid flowchart syntax rather than mermaid class Diagrams syntax.
Reference: https://github.com/asyncapi/app-relations-discovery/pull/10#issuecomment-861259951

Have a look at mermaid flowchart [here](https://mermaid-js.github.io/mermaid-live-editor/edit/#eyJjb2RlIjoiZ3JhcGggVERcbiBzZXJ2ZXIxWyhtcXR0Oi8vbG9jYWxob3N0OjE4ODMpXVxuRmxpZ2h0U3Vic2NyaWJlclNlcnZpY2VbRmxpZ2h0IFN1YnNjcmliZXIgU2VydmljZV1cbnNlcnZlcjEgLS0gZmxpZ2h0L3F1ZXVlIC0tPiBGbGlnaHRTdWJzY3JpYmVyU2VydmljZVxuRmxpZ2h0Tm90aWZpZXJTZXJ2aWNlW0ZsaWdodCBOb3RpZmllciBTZXJ2aWNlXVxuRmxpZ2h0Tm90aWZpZXJTZXJ2aWNlIC0tIGZsaWdodC9xdWV1ZSAtLT4gc2VydmVyMVxuRmxpZ2h0TW9uaXRvclNlcnZpY2VbRmxpZ2h0IE1vbml0b3IgU2VydmljZV1cbkZsaWdodE1vbml0b3JTZXJ2aWNlIC0tIGZsaWdodC9xdWV1ZSAtLT4gc2VydmVyMVxuc2VydmVyMSAtLSBmbGlnaHQvdXBkYXRlIC0tPiBGbGlnaHRNb25pdG9yU2VydmljZVxuRmxpZ2h0Tm90aWZpZXJTZXJ2aWNlIC0tIGZsaWdodC91cGRhdGUgLS0-IHNlcnZlcjFcbiBzZXJ2ZXIyWyhrYWZrYTovL2xvY2FsaG9zdDoxODgzKV1cbnNlcnZlcjIgLS0gZmxpZ2h0L3VwZGF0ZSAtLT4gRmxpZ2h0TW9uaXRvclNlcnZpY2VcbkZsaWdodE1vbml0b3JTZXJ2aWNlIC0tIGZsaWdodC9xdWV1ZSAtLT4gc2VydmVyMlxuIiwibWVybWFpZCI6IntcbiAgXCJ0aGVtZVwiOiBcImRlZmF1bHRcIlxufSIsInVwZGF0ZUVkaXRvciI6dHJ1ZSwiYXV0b1N5bmMiOnRydWUsInVwZGF0ZURpYWdyYW0iOnRydWV9).",True,11,https://api.github.com/repos/asyncapi-archived-repos/cupid/pulls/11,https://github.com/asyncapi-archived-repos/cupid/pull/11,closed,72,51,4,5,14,0,1,0,[{'name': 'released'}],2021-06-16 09:21:16+00:00,2021-06-16 14:13:34+00:00,17538.0,4:52:18,[],"[{'commit_sha': 'c22fae30990fe4bc471e177ba8dd27b607a5e101', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97434bb68e2fd0205893b6f0fa32a852a1891328', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '023412c9f8c014b8670860a25abf70cd27e8bfed', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '073f976848fc64a7271a0c25e95d69781179393d', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e08e423e0f75aa95bcc6876891eacad1beabbc', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}]",Arjun Garg,53009722,,User,,66,,13,18
671563191,feat: support plantUML classDiagram syntax,"This PR implements function to generate relations in plantUML classDiagram syntax.

Have a look at the plantUML classDiagram for flightService example [here](https://www.planttext.com/api/plantuml/png/V91B3e8m48RtFKKlG0XnGxem91ftkk44fGmmIQ4mdRfHJ-R28ta54MI1CUvcCj__o3plZyop9Wwj5OniGUwizXwyZEP9xb7Nf5iXpBHwe3DG8YzIo41MoNPWLd5idT6sSPvLagQRyTYJOsVSXn0tSR1ODtnq7RAZVBH10pAAhjl5KrKJ4OU-r0nYIPgGMNnoZ1N2eluIp4mU2cy82_YRCGG8FoFM_TPu1btvVjGB003__mC0).",True,13,https://api.github.com/repos/asyncapi-archived-repos/cupid/pulls/13,https://github.com/asyncapi-archived-repos/cupid/pull/13,closed,46,5,3,6,6,12,1,0,[{'name': 'released'}],2021-06-16 14:53:24+00:00,2021-06-17 07:53:45+00:00,61221.0,17:00:21,"[{'comment_id': 652778568, 'comment_body': 'time for switch?\r\n\r\nalso what if I provide syntax `whatever`? some error?\r\n\r\nwould also be good to extend jsdoc with available options so I see them in IDE without checking out docs', 'comment_created': datetime.datetime(2021, 6, 16, 15, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 652787662, 'comment_body': '> time for switch?\r\n\r\nWill change to switch in this PR and split functions for different diagrams in next one.\r\n\r\n> also what if I provide syntax `whatever`? some error?\r\n\r\nYes, this ⬇️ \r\nhttps://github.com/asyncapi/app-relations-discovery/blob/8798db4b63c26a629f1454708544635d1abfae9d/lib/appRelationsDiscovery.js#L20\r\n\r\n\r\n\r\n> would also be good to extend jsdoc with available options so I see them in IDE without checking out docs\r\n\r\nsure', 'comment_created': datetime.datetime(2021, 6, 16, 15, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 652810519, 'comment_body': ""I can't see what this is for. Did you have a classic for loop before?"", 'comment_created': datetime.datetime(2021, 6, 16, 15, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 652817643, 'comment_body': 'Since the first iteration is by the no. of different servers, in classDiagram we are using `server${i}` to match the relations and updating `i` by 1 after each iteration coz it would be a different server.', 'comment_created': datetime.datetime(2021, 6, 16, 15, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 652860607, 'comment_body': '> would also be good to extend jsdoc with available options so I see them in IDE without checking out docs\r\n\r\nMaybe we should switch to TS? :trollface: ', 'comment_created': datetime.datetime(2021, 6, 16, 16, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 652863675, 'comment_body': ""```suggestion\r\n * @param {Object} [options]\r\n * @param {('default'|'mermaid'|'plantUML')} [options.syntax] syntax in which the relation will be generated.\r\n```\r\n\r\n😏 "", 'comment_created': datetime.datetime(2021, 6, 16, 16, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 652869275, 'comment_body': 'well, am new with js docs 😅 ', 'comment_created': datetime.datetime(2021, 6, 16, 16, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 652869621, 'comment_body': ""`i` is needed, because `Map.prototype.forEach` hasn't in callback's arguments the index. \r\n\r\n@arjungarg07  We can use the name of server, but as we discussed in previous PRs this won't be good, because the names of the servers between docs may change."", 'comment_created': datetime.datetime(2021, 6, 16, 16, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 652870472, 'comment_body': 'No worries :) I also, I always googled for this shit called JSDoc :trollface: We can switch to TS in next PRs.', 'comment_created': datetime.datetime(2021, 6, 16, 16, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 652878463, 'comment_body': ""never worked in TS, let's learn something new then 😉 "", 'comment_created': datetime.datetime(2021, 6, 16, 16, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 653270815, 'comment_body': 'TS 🤦🏼 ', 'comment_created': datetime.datetime(2021, 6, 17, 6, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 653271238, 'comment_body': ""o shit, I'm blind 😄 sorry"", 'comment_created': datetime.datetime(2021, 6, 17, 6, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}]","[{'commit_sha': '37c30979488bba8f49c71e1e5c8dde9475348fe5', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82243715119bfa587d4483d2e4ecd0519acee59', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e16a1abdd1033f910db9a136011a837295c830', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b4315a853aa3700c1300f6fe85672645eb10c2', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc43c6ec290ccf40b9298521da98d15c405c6d11', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a8e7b71cd63fe460e557ce28923ab0148a5e11f', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}]",Arjun Garg,53009722,,User,,66,,13,18
677907062,feat: change output channel to pure json and add unit tests ,This PR aims to add unit tests to the library.,True,20,https://api.github.com/repos/asyncapi-archived-repos/cupid/pulls/20,https://github.com/asyncapi-archived-repos/cupid/pull/20,closed,1775,5,16,22,9,20,1,0,[{'name': 'released'}],2021-06-25 13:16:42+00:00,2021-07-07 12:18:29+00:00,1033307.0,"11 days, 23:01:47","[{'comment_id': 658762800, 'comment_body': 'yo, have a look at my comment from here about coverage reports https://github.com/asyncapi/java-spring-cloud-stream-template/pull/124#issuecomment-868371800\r\n\r\nso please remove it and as a followup you can do coveralls. ', 'comment_created': datetime.datetime(2021, 6, 25, 13, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 658767895, 'comment_body': 'you are not really checking if it returns a map of relations but just if returns object.\r\nyou should have a real map here in the test and check the output against this ""manually"" prepared map\r\n\r\n ', 'comment_created': datetime.datetime(2021, 6, 25, 13, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 658781283, 'comment_body': 'I think that `.json()` function is better than normal `_json`. We shouldn\'t use the ""private"" properties from parser.', 'comment_created': datetime.datetime(2021, 6, 25, 13, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 658786036, 'comment_body': ""Ok. There is a bug :D In `asyncApiDocs` value you must provide the parsed AsyncAPI documents - only parsed docs has `._json` property or `.json()` function, so it's unnecessary to parse document again. You should check if document is parsed and then return document or validate it, something like:\r\n\r\n```suggestion\r\n  return Promise.all(asyncApiDocs.map(async doc => {\r\n    if (doc && doc['x-parser-spec-parsed'] === true) {\r\n      return doc;\r\n    }\r\n    return parser.parse(doc));\r\n  });\r\n```\r\n\r\nSorry... I accepted your first commit with bug...\r\n\r\n"", 'comment_created': datetime.datetime(2021, 6, 25, 13, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 658788223, 'comment_body': ""Because we have bug in `validate` function you should push only documents (as string) to the `docs` array:\r\n\r\n```suggestion\r\n    const document_path = path.join('./examples/flightService', file);\r\n    const asyncApiDoc = fs.readFileSync(path.resolve(__dirname, document_path),'utf8');\r\n    docs.push(asyncApiDoc);\r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 14, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 658788508, 'comment_body': ""And then this functions shouldn't be `async` but `sync`."", 'comment_created': datetime.datetime(2021, 6, 25, 14, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 658789333, 'comment_body': '`x-parser-spec-parsed` is a extension which indicates that object is a parsed AsyncAPI doc. ', 'comment_created': datetime.datetime(2021, 6, 25, 14, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 658808537, 'comment_body': 'Yeah, initially I made it `sync` but then thought of passing the `parsed` docs so had to make it `async`', 'comment_created': datetime.datetime(2021, 6, 25, 14, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 658811134, 'comment_body': 'Yeah, there was an error generated on running the tests. So this is just an initial setup.', 'comment_created': datetime.datetime(2021, 6, 25, 14, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 658813122, 'comment_body': 'side feeling :) I think we definitely should wrap this extension in a function in a parser. Something for the future, to not access props like that', 'comment_created': datetime.datetime(2021, 6, 25, 14, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 658813989, 'comment_body': '> Initially, I had .json() but on running the tests, this error keeps generating that .json() is not a function.\r\n\r\nBecause you probably operated on string, not on parsed doc :) ', 'comment_created': datetime.datetime(2021, 6, 25, 14, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 663988336, 'comment_body': '```suggestion\r\n      uses: coverallsapp/github-action@v1.1.2\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 14, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 664001601, 'comment_body': '```suggestion\r\n    ""test:lib"": ""nyc --reporter=lcov --reporter=html --reporter=text --no-clean mocha --recursive"",\r\n```\r\n\r\n- do not silet coverage\r\n- generate html\r\n- generate text at the end of test run\r\n- generate lcov.info file that is required by coveralls', 'comment_created': datetime.datetime(2021, 7, 5, 15, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 664002778, 'comment_body': 'I love you do not forget to attribute work done by Alvaro', 'comment_created': datetime.datetime(2021, 7, 5, 15, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 664003599, 'comment_body': 'why not just using `Object.fromEntries(map)`?', 'comment_created': datetime.datetime(2021, 7, 5, 15, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 664005424, 'comment_body': 'maybe put it in a `before` hook?\r\n\r\nhttps://mochajs.org/#hooks', 'comment_created': datetime.datetime(2021, 7, 5, 15, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 664029041, 'comment_body': ""is it needed to convert map to plain object and then stringify to do the assertion?\r\nI think it would be easier to operate directly on map output, for example:\r\n```\r\nexpect(output.get('mqtt://localhost:1883,mqtt')).to.not.be.undefined;\r\n```\r\n\r\nhave a look at 2 possible ways to do these tests without any transformation of maps to object and string\r\n```\r\ndescribe('appRelationDiscovery', function() {\r\n  let correctSlug;\r\n  let slugOutput;\r\n  let output;\r\n\r\n  before(async function() {\r\n    const flightServiceDocs = getAsyncApiExamples();\r\n    output = await getRelations(flightServiceDocs);\r\n    correctSlug = 'mqtt://localhost:1883,mqtt';\r\n    slugOutput = output.get(correctSlug);\r\n  });\r\n\r\n  it('should return correct slug', function() {\r\n    const outputIterator = output.keys();\r\n\r\n    expect(slugOutput).to.not.be.undefined;\r\n    //or\r\n    expect(outputIterator.next().value).to.equal(correctSlug);\r\n  });\r\n\r\n  it('should return correct channels', function() {\r\n    const correctChannelUpdate = 'flight/update';\r\n    const correctChannelQueue = 'flight/queue';\r\n    const channelsIterator = slugOutput.keys();\r\n\r\n    expect(slugOutput.get(correctChannelUpdate)).to.not.be.undefined;\r\n    expect(slugOutput.get(correctChannelQueue)).to.not.be.undefined;\r\n    //or\r\n    expect(channelsIterator.next().value).to.equal(correctChannelUpdate);\r\n    expect(channelsIterator.next().value).to.equal(correctChannelQueue);\r\n  });\r\n});\r\n```\r\n\r\nwhat do you think"", 'comment_created': datetime.datetime(2021, 7, 5, 16, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 664032249, 'comment_body': 'Because default map output is a nested map and we need to convert the nested map into objects too.', 'comment_created': datetime.datetime(2021, 7, 5, 16, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 664045780, 'comment_body': 'never thought like this way tbh, and I think this would be the more correct approach :)', 'comment_created': datetime.datetime(2021, 7, 5, 16, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 665125596, 'comment_body': ""no these tests look cleaner, you just need to get rid of these iterators that I should never suggest to you. Example:\r\n\r\n```\r\n  it('should return correct publisher data for flight/update channel', async function() {\r\n    const updateChannelOutput = slugOutput.get(correctChannelUpdate);\r\n    const correctPubOperation = 'Flight Notifier Service';\r\n    expect(updateChannelOutput.pub).to.have.key(correctPubOperation);\r\n    expect(updateChannelOutput.pub.get(correctPubOperation)).to.deep.equal(flightUpdatePubData.get(correctPubOperation));\r\n  });\r\n```\r\n\r\ntbh, even ` expect(updateChannelOutput.pub).to.have.key(correctPubOperation);` is probably not needed because the 2nd `expect` already indirectly validates it, cause if key would not be there the 2nd expect fails anyway"", 'comment_created': datetime.datetime(2021, 7, 7, 7, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}]","[{'commit_sha': 'b165617b801c7de6c189086afbd5b4fb05f08dcd', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33cfa1ff73ff9d6737b5e0400a83686d6e927e01', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe155c344e5aa82bc80173000644260728b0c2aa', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a6e4aac38c9f46b44300148d056cd2d623c15d', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b5a1b21c9a33781d564b7c87b588704aa7e27b5', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '500162460f595c0fd2dbf428d1a42cc82b15d098', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5daaa758d2dcc618cc271ca1269f1de75bc2981', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9505289ebf6e6f00ea79dbc1108a01772acfc32e', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b21b949feb822fea44c352ac7cd83fa7c5c40f7', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b40b38d6844fcb368f3b1ab101e26f9583e35f', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32501ec331c1b4fee27588c8122dd96583ff5aca', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaee3c2057a8f61b978d8d50ae0e4c309b752427', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04a3e704f0ce902266c0c4e1df8ff53ad8552092', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0de3c2968b9c71efdfe23b4b2b6fbb4bce7a7ab', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bcf981f738f2bd48519e582226911e28ced78e1', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3233b144e433f5726d861c4a946a1d552fef356', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ca3686f2305cbffeb3d73c1ad5e5508fd1dcbe4', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae32ec1495e4fafe4599e16d8e2f4e4960825170', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d9320efacaefa0b0ac72474bd5144639698316', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04d52dddf11b3285bc27c9e28ba5516800fbf448', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '846d8aa9d4cef69a9464fb1aed1eac42b6b6a831', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fd5f5974b6a9fe7c1f39554c5bb5e7daf2df449', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}]",Arjun Garg,53009722,,User,,66,,13,18
690467474,feat: add support for reactFlow,"This PR implements function to generate an array for reactFlow support.

Output Diagram for flight Service.
<img width=""632"" alt=""Screenshot 2021-07-16 at 6 43 36 PM"" src=""https://user-images.githubusercontent.com/53009722/125953557-df569489-7174-4703-bb36-89a23d7d95d5.png"">

for PlantUML
<img width=""414"" alt=""Screenshot 2021-07-16 at 6 44 47 PM"" src=""https://user-images.githubusercontent.com/53009722/125953729-8457e7b6-0474-42c6-a9d8-a8815c495961.png"">
",True,24,https://api.github.com/repos/asyncapi-archived-repos/cupid/pulls/24,https://github.com/asyncapi-archived-repos/cupid/pull/24,closed,63,3,4,7,10,7,1,0,[{'name': 'released'}],2021-07-15 07:28:13+00:00,2021-07-22 11:05:10+00:00,617817.0,"7 days, 3:36:57","[{'comment_id': 670317928, 'comment_body': 'Please, be consistent with spaces between items in array :)', 'comment_created': datetime.datetime(2021, 7, 15, 9, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 670319667, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 10, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 670324734, 'comment_body': 'You have duplicated this code blocks two times, so you can move it to the separate function and make configuralne type of operation, for subscribe and publish :)', 'comment_created': datetime.datetime(2021, 7, 15, 10, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 670325011, 'comment_body': '```suggestion\r\n  const nodes = [];\r\n```\r\n\r\nWill be better name :)', 'comment_created': datetime.datetime(2021, 7, 15, 10, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 670326694, 'comment_body': 'We can stay with `animated: true` but I think that we should make it configurable, so user should have possibility to  pass related config object to the given metrics. Could you create issue for that?', 'comment_created': datetime.datetime(2021, 7, 15, 10, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 670328537, 'comment_body': ""You don't push anything to the `visitedServices`. Is code broken, do you missed about something in implementation? :)"", 'comment_created': datetime.datetime(2021, 7, 15, 10, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'magicmatatjahu', 'type': 'User'}, {'comment_id': 671236453, 'comment_body': 'aah, I missed it, sorry.', 'comment_created': datetime.datetime(2021, 7, 16, 13, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}]","[{'commit_sha': 'fc10a7b1ebaf4906ce0ba4c259d4fc89d40c055c', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519df2d2144683d470ff1d10e82fbbe544265475', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ae890ae9ca24418e65d1e1fb9983c48112b22fe', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67971da0c152bda31d3665cebbe6c83312b4df4d', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '168904e4982a95ac1477cb51c9e6b591c4474d7f', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd1a887ac4c3aa3f7fc00e3d6132a8878a29e8bf', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c876bd69bbcee0b3a7ffaf3c159af73a76229a3', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}]",Arjun Garg,53009722,,User,,66,,13,18
712736696,docs: update Readme and add script to generate API docs,"This PR updates Readme and add more information regarding:

- example usage of the library
- every single diagram syntax and example output screen shot
- steps that user needs to perform to get a final diagram rendered for react flow
- explanation of technical details of how the relations are discovered.
- what is in the default output map, what info is available

Also, added script to generate API docs instead of manual maintainance
**Related issue(s)**
#29 ",True,32,https://api.github.com/repos/asyncapi-archived-repos/cupid/pulls/32,https://github.com/asyncapi-archived-repos/cupid/pull/32,closed,1428,20,9,14,7,23,1,0,[{'name': 'released'}],2021-08-14 07:26:16+00:00,2021-08-18 15:49:31+00:00,375795.0,"4 days, 8:23:15","[{'comment_id': 690987541, 'comment_body': 'you need to update this script to run docs script, so nobody has to manually do it on a pr but automated workflows handle it', 'comment_created': datetime.datetime(2021, 8, 18, 7, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690988040, 'comment_body': 'what about package lock file?', 'comment_created': datetime.datetime(2021, 8, 18, 7, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690988713, 'comment_body': 'automate toc generation too https://github.com/asyncapi/generator/blob/master/package.json#L26', 'comment_created': datetime.datetime(2021, 8, 18, 7, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690989282, 'comment_body': 'I think we can already remove it', 'comment_created': datetime.datetime(2021, 8, 18, 7, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690990158, 'comment_body': '```suggestion\r\nAn official library that focuses on finding and analyzing the relationships between AsyncAPI files to later output consolidated information about the system architecture. Output format would be customizable and available in different formats like PlantUML, mermaid.js, ReactFlow.\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 7, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690990696, 'comment_body': '```suggestion\r\n## Install\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 7, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690991643, 'comment_body': 'merge this section with develop section at the end of the readme', 'comment_created': datetime.datetime(2021, 8, 18, 7, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690992481, 'comment_body': 'generate this file and attach to this Pr, then link from API readme section instead of putting API there', 'comment_created': datetime.datetime(2021, 8, 18, 7, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690996570, 'comment_body': ""```suggestion\r\n\r\nThis library takes AsyncAPI files as an array input for which the user wants to discover the relations between them. It then validates and parses the given array of AsyncAPI files and generates the output in desired passed syntax.\r\n```\r\n\r\nwell we need to get rid of parser here 😅 not sure how it got here as I'm making sure it is not in the other libraries. Follow up though. Basically this library should be use in environment where someone already has access to parsed and validated documents, no need to add this responsibility to this package"", 'comment_created': datetime.datetime(2021, 8, 18, 7, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690996963, 'comment_body': 'eventually, this section should just link to API.md file', 'comment_created': datetime.datetime(2021, 8, 18, 7, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690999013, 'comment_body': ""I think editor supports you to put all data encoded in the url so you can already provide a direct link here. Also, don't call it `Link` section but just mention below code snippet with syntac"", 'comment_created': datetime.datetime(2021, 8, 18, 8, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 690999517, 'comment_body': 'please mention below code snippen, no Link section. Also check if there is the same possibility as with Mermaid (encoding)', 'comment_created': datetime.datetime(2021, 8, 18, 8, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691000473, 'comment_body': 'how the map looks like? please expand', 'comment_created': datetime.datetime(2021, 8, 18, 8, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691048332, 'comment_body': 'I liked the idea of not adding the responsibility to this package but we use parser-js to validate the given documents first so if we assume that the user will provide validated documents, we can remove the dependency, will follow up on this one.', 'comment_created': datetime.datetime(2021, 8, 18, 9, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}, {'comment_id': 691068368, 'comment_body': '```suggestion\r\n<!-- toc is generated with GitHub Actions do not remove toc markers -->\r\n\r\n<!-- toc -->\r\n\r\n- [Overview](#overview)\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691068631, 'comment_body': '```suggestion\r\n- [Contributing](#contributing)\r\n\r\n<!-- tocstop -->\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691069321, 'comment_body': '```suggestion\r\n**[View in online editor](https://mermaid-js.github.io/mermaid-live-editor/edit#eyJjb2RlIjoiZ3JhcGggVERcbiBzZXJ2ZXIxWyhtcXR0Oi8vbG9jYWxob3N0OjE4ODMpXVxuRmxpZ2h0TW9uaXRvclNlcnZpY2VbRmxpZ2h0IE1vbml0b3IgU2VydmljZV1cbkZsaWdodE1vbml0b3JTZXJ2aWNlIC0tIGZsaWdodC91cGRhdGUgLS0-IHNlcnZlcjFcbkZsaWdodE5vdGlmaWVyU2VydmljZVtGbGlnaHQgTm90aWZpZXIgU2VydmljZV1cbnNlcnZlcjEgLS0gZmxpZ2h0L3VwZGF0ZSAtLT4gRmxpZ2h0Tm90aWZpZXJTZXJ2aWNlXG5GbGlnaHRTdWJzY3JpYmVyU2VydmljZVtGbGlnaHQgU3Vic2NyaWJlciBTZXJ2aWNlXVxuRmxpZ2h0U3Vic2NyaWJlclNlcnZpY2UgLS0gZmxpZ2h0L3F1ZXVlIC0tPiBzZXJ2ZXIxXG5zZXJ2ZXIxIC0tIGZsaWdodC9xdWV1ZSAtLT4gRmxpZ2h0TW9uaXRvclNlcnZpY2UiLCJtZXJtYWlkIjoie1xuICBcInRoZW1lXCI6IFwiZGVmYXVsdFwiXG59IiwidXBkYXRlRWRpdG9yIjp0cnVlLCJhdXRvU3luYyI6dHJ1ZSwidXBkYXRlRGlhZ3JhbSI6dHJ1ZX0)**\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691069607, 'comment_body': '```suggestion\r\n**[View in online editor](https://www.planttext.com/?text=VP3D3e8m3CVlVOgz02742zd1a6YywOKd6AF0aa6Xwxoexou1EM2CjpRz_JzIA88ObjXx42SUrScR432eP9tKsPcMJGzWbpKWtv4pzL2W8dkj-ab4fwadQtn7GNIMvuVvE389MVeGy8ABTsqdLngS49UpZREeakHvt3nrin1f76iZ25lIWgpY6ubh76xgBy7AbB4Abbs5VpEcYF5dnBxV7YzmgET7lG40)**\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 9, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691070010, 'comment_body': 'specify in jsdoc that it is an array of strings', 'comment_created': datetime.datetime(2021, 8, 18, 9, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691070476, 'comment_body': 'toc generation should be done here too', 'comment_created': datetime.datetime(2021, 8, 18, 9, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691178052, 'comment_body': ""```suggestion\r\nIn the process, for every different server, it assigns a slug having the server's URL and protocol and then maps channels with the same server. Following, it maps the service information with the channel's name as per if the service is subscribing/publishing to a given channel. In the sub/pub Map of default output syntax, it provides service name and the metadata of the service including but not limited to `description`, `payload`, `headers`, `bindings`, `extensions`.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 18, 12, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691181433, 'comment_body': ""```suggestion\r\n * @param {String[]} asyncApiDocs An array of stringified AsyncAPI documents\r\n```\r\n\r\nthis is what I meant, I'm not 100% sure on the jsdoc syntax, you will have to check how it generates into API.md"", 'comment_created': datetime.datetime(2021, 8, 18, 12, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'derberg', 'type': 'User'}, {'comment_id': 691196053, 'comment_body': 'Updated manually.', 'comment_created': datetime.datetime(2021, 8, 18, 12, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'arjungarg07', 'type': 'User'}]","[{'commit_sha': 'd625d52bbad84a4750695ed49642d72ba65f3585', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c56559e7704661cff419e82a9cd0d0f5066dbc4', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ba265f161d13fe4652919bb40dc138601be9d5', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7485e49126c156bd63f800ce50a91c515f9a7a3', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4b5c634d2dfc3ba766bc89547df77005df8a09', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '201f1fa8c5f5c5f0c2bb5354dc9c4f6af5603d9b', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d719b31e56d383e28e6349c835f760624ef911', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd28c5ca7612fe9c72762f668e94f676810bf8174', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2af955be484dd2653eb5f4dbae080d4ad9279f63', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdb9128014bc2465fdb45cdc8e142c17e4114668', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13b10564e74ec05a5145dc8caf83d2cceb7c4632', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75617fb54b29b9976578d42d38616c9b4a4051b2', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccb775e3fb23a68fd4debfc7aef2325d1dd0ce15', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15bb9f9554aca874206e67e7c32ea0f73dd1bb50', 'committer_username': 'arjungarg07', 'committer_name': 'Arjun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 17, 14, 25, 16, tzinfo=datetime.timezone.utc)}]",Arjun Garg,53009722,,User,,66,,13,18

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
371313679,cupid,asyncapi-archived-repos/cupid,JavaScript,16,50,9,7,152,10,26,7,"[{'id': 869729207, 'number': 106, 'closed': datetime.datetime(2022, 3, 2, 16, 51, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 16, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2210.0, 'time_delta': '0:36:50', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 845900156, 'number': 103, 'closed': datetime.datetime(2022, 5, 12, 18, 28, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 10, 19, 29, 31, tzinfo=datetime.timezone.utc), 'time_taken': 7858741.0, 'time_delta': '90 days, 22:59:01', 'additions': 42, 'deletions': 9, 'state': 'closed'}, {'id': 785783143, 'number': 78, 'closed': datetime.datetime(2021, 11, 22, 12, 40, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 22, 8, 28, 59, tzinfo=datetime.timezone.utc), 'time_taken': 15106.0, 'time_delta': '4:11:46', 'additions': 39, 'deletions': 24, 'state': 'closed'}, {'id': 717513245, 'number': 33, 'closed': datetime.datetime(2021, 8, 26, 11, 44, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 23, 5, 30, 8, tzinfo=datetime.timezone.utc), 'time_taken': 281667.0, 'time_delta': '3 days, 6:14:27', 'additions': 34, 'deletions': 29, 'state': 'closed'}, {'id': 712736696, 'number': 32, 'closed': datetime.datetime(2021, 8, 18, 15, 49, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 7, 26, 16, tzinfo=datetime.timezone.utc), 'time_taken': 375795.0, 'time_delta': '4 days, 8:23:15', 'additions': 1428, 'deletions': 20, 'state': 'closed'}, {'id': 690467474, 'number': 24, 'closed': datetime.datetime(2021, 7, 22, 11, 5, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 7, 28, 13, tzinfo=datetime.timezone.utc), 'time_taken': 617817.0, 'time_delta': '7 days, 3:36:57', 'additions': 63, 'deletions': 3, 'state': 'closed'}, {'id': 677907062, 'number': 20, 'closed': datetime.datetime(2021, 7, 7, 12, 18, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 13, 16, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1033307.0, 'time_delta': '11 days, 23:01:47', 'additions': 1775, 'deletions': 5, 'state': 'closed'}, {'id': 671563191, 'number': 13, 'closed': datetime.datetime(2021, 6, 17, 7, 53, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 14, 53, 24, tzinfo=datetime.timezone.utc), 'time_taken': 61221.0, 'time_delta': '17:00:21', 'additions': 46, 'deletions': 5, 'state': 'closed'}, {'id': 671251201, 'number': 11, 'closed': datetime.datetime(2021, 6, 16, 14, 13, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 9, 21, 16, tzinfo=datetime.timezone.utc), 'time_taken': 17538.0, 'time_delta': '4:52:18', 'additions': 72, 'deletions': 51, 'state': 'closed'}, {'id': 668016624, 'number': 10, 'closed': datetime.datetime(2021, 6, 15, 16, 59, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 11, 7, 28, tzinfo=datetime.timezone.utc), 'time_taken': 366745.0, 'time_delta': '4 days, 5:52:25', 'additions': 11, 'deletions': 5, 'state': 'closed'}, {'id': 665013152, 'number': 7, 'closed': datetime.datetime(2021, 6, 9, 12, 10, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 15, 16, 13, tzinfo=datetime.timezone.utc), 'time_taken': 75241.0, 'time_delta': '20:54:01', 'additions': 50, 'deletions': 0, 'state': 'closed'}, {'id': 663434485, 'number': 3, 'closed': datetime.datetime(2021, 6, 8, 8, 19, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 10, 33, 57, tzinfo=datetime.timezone.utc), 'time_taken': 78325.0, 'time_delta': '21:45:25', 'additions': 5785, 'deletions': 0, 'state': 'closed'}]"
