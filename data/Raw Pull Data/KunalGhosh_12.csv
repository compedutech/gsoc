pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1015241149,Implementing linear conjugate gradients ,"This is a draft implementation of the linear conjugate gradients algorithm.
It is designed to be output the same as `gpytorch.util.linear_cg` and can be tested to give the same results using the code snippet below.

Let's first generate the data:
```python
import torch 
import gpytorch
import numpy as np

# Test PSD Matrix

N = 10
rank = 5
np.random.seed(1234) # nans with seed 1234
K = np.random.randn(N, N)
K = K @ K.T + N * np.eye(N)
K_torch = torch.from_numpy(K)
print(np.diag(K))

y = np.random.randn(N, 1)
y_torch = torch.from_numpy(y)
```

Now we get the output from GPyTorch
```python
result, tridiag = gpytorch.utils.linear_cg(K_torch, y_torch, n_tridiag=1)
```

And also from our implementation:
```python
import pymc_experimental as pymx
result_pmx, tridiag_pmx = pymx.utils.linear_cg(K, y, n_tridiag=1)
```

Check the outputs
```python
assert np.allclose(result, result_pmx) is True, ""BUG: result doesn't match gpytorch values""
assert np.allclose(tridiag tridiag_pmx) is True, ""BUG: tridiagonal values don't match gpytorch values""
```",True,62,https://api.github.com/repos/pymc-devs/pymc-experimental/pulls/62,https://github.com/pymc-devs/pymc-experimental/pull/62,closed,277,0,2,12,5,12,0,0,[],2022-08-02 15:07:15+00:00,2022-10-01 09:26:54+00:00,5163579.0,"59 days, 18:19:39","[{'comment_id': 936307080, 'comment_body': 'Just a heads up, I noticed this check fail yesterday. Was passing when I ran it on Colab, looking into it.', 'comment_created': datetime.datetime(2022, 8, 3, 7, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kunalghosh', 'type': 'User'}, {'comment_id': 936539429, 'comment_body': 'Fixed it should have been `if not np.allclose(...)`', 'comment_created': datetime.datetime(2022, 8, 3, 11, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kunalghosh', 'type': 'User'}, {'comment_id': 939569921, 'comment_body': ""Since there are only two parameters here, could you pass `eval_cg_tolerance` and `cg_tolerance` as args to `linear_cg`?  I think it would simplify things a little bit, since you wouldn't need this class. "", 'comment_created': datetime.datetime(2022, 8, 6, 19, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 939570016, 'comment_body': ""This is just a small nitpick, but you could combine this, so you don't need to create the `linear_cg_retvals`.  "", 'comment_created': datetime.datetime(2022, 8, 6, 19, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 939570057, 'comment_body': 'This block looks repeated, I think they both could be moved out side the if/else?', 'comment_created': datetime.datetime(2022, 8, 6, 19, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 939570421, 'comment_body': 'This function returns two different types, depending on inputs.  This can make downstream code more complicated, since it will have to know how to handle both cases.  Is it possible to refactor this into two functions, one for the tridaigonal case and one not?    ', 'comment_created': datetime.datetime(2022, 8, 6, 20, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 943381329, 'comment_body': 'This class is just a place holder, I would ideally put these two values in some sort of default settings file or class used by PyMC. I moved the constants to be global variables and kept the logic same as in GPyTorch.', 'comment_created': datetime.datetime(2022, 8, 11, 11, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kunalghosh', 'type': 'User'}, {'comment_id': 943381604, 'comment_body': 'Fixed in the latest commit', 'comment_created': datetime.datetime(2022, 8, 11, 11, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kunalghosh', 'type': 'User'}, {'comment_id': 943384230, 'comment_body': 'Would it make sense to return `None` as the second argument when `n_tridiag` is False ? ', 'comment_created': datetime.datetime(2022, 8, 11, 11, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kunalghosh', 'type': 'User'}, {'comment_id': 944787697, 'comment_body': ""There's no need to follow GPyTorch's particular way of doing things -- in PyMC there aren't any global variables or settings files, that I'm aware of.  It's important to be consistent with these sort of things across the codebase."", 'comment_created': datetime.datetime(2022, 8, 12, 19, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 944790739, 'comment_body': ""Checking the type vs checking the number of outputs isn't effectively very different.  If it doesn't make sense to split this, I think it makes sense to leave this as is and be mindful of this later, maybe return to it once we see how it fits in. "", 'comment_created': datetime.datetime(2022, 8, 12, 19, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 981515356, 'comment_body': 'I now return identity matrices if n_tridiag = 0. This ensures downstream computations based on tridiagonal matrices are not affected (Eigen values of identity matrices are all one and log of that would be zero, so the log determinant terms would be zero) see. equation S7 (https://arxiv.org/pdf/1809.11165.pdf)\r\n\r\nThe identity matrices assume n_tridiag = 1 to ensure dimensions are consistent for downstream computations.', 'comment_created': datetime.datetime(2022, 9, 27, 17, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kunalghosh', 'type': 'User'}]","[{'commit_sha': '3fd065e98db60a847784c36a1e6b6dd9ce4d1f32', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1cf869f6a06d00eb1b61527503ba12874bcf625', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ed2d5ec67b6a944ba8382978275a526566b5f0', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '609ddb80851feca1e967f3abaf79f531b1c0a040', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca0fa7b4155531bc4d67ad8eed1417bb4bf9fc45', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc8b50bb40bdb777d0b6407dda239dd8c2253e1e', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f24c2a4ec2954e2d1ce380f50fda850424c3aeb', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fbe96797d930194c0d70d3aa0a5c8333c27fc0e', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49af481faaeee154e4b7d2d9e1e2a2155ccf00d9', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6826339928f77e8fc2b8df37d76c61555560ecff', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61924cf2746d752cdcce2745a64bc11eac47f53e', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e41aa69a3cce8bbe46ffb12d406656adc94fa2d7', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}]",Kunal Ghosh,157300,,User,,54,,10,39
1015265387,Initial commit of pivoted Cholesky algorithm from GPyTorch,"**What is this PR about?**

Fast exact Gaussian processes ([Gardner et.al 2018](https://proceedings.neurips.cc/paper/2018/file/27e8e17134dd7083b050476733207ea1-Paper.pdf)) works on a `modified batch conjugate gradient descent` algorithm which needs a function to return the preconditioning matrix, given a kernel. This PR implements the function to compute the preconditioning matrix.

This produces the same results as `gpytorch.pivoted_cholesky()`

Test kernel matrices can be generated using the following code which generates random positive semi-definite matrices

```python
import torch 
import gpytorch
import numpy as np

# Test PSD Matrix

N = 10
rank = 5
np.random.seed(1234) # nans with seed 1234
K = np.random.randn(N, N)
K = K @ K.T + N * np.eye(N)
K_torch = torch.from_numpy(K)
```

Now passing the same kernel matrix to the two functions will yield the same output.

```python
import pymc_experimental as pymx

L_gpt = gpytorch.pivoted_cholesky(K_torch, rank=rank, error_tol=1e-3)
L_np, _  = pymx.utils.pivoted_cholesky(K, max_iter=rank, error_tol=1e-3)
assert np.allclose(L_gpt, L_np.T) == True, ""BUG: The two cholesky decompositions are not same !""
```",True,63,https://api.github.com/repos/pymc-devs/pymc-experimental/pulls/63,https://github.com/pymc-devs/pymc-experimental/pull/63,closed,92,0,3,24,4,10,0,0,[],2022-08-02 15:28:52+00:00,2022-10-24 23:13:27+00:00,7199075.0,"83 days, 7:44:35","[{'comment_id': 939570590, 'comment_body': 'I think It\'d be best to make `torch` and `gpytorch` optional imports.  \r\n\r\n```python\r\ntry:\r\n    import torch\r\n    import gpytorch\r\nexcept ImportError as e:\r\n    raise ImportError(""message"")\r\n```\r\nThat way they don\'t need to be dependencies for someone who wan\'ts to use `pymc_experimental` for something else.', 'comment_created': datetime.datetime(2022, 8, 6, 20, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 939572724, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2022, 8, 6, 20, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 947557724, 'comment_body': ""I've looked into the apply_permutation function, I think it is better to avoid the dependency and implement the same function here"", 'comment_created': datetime.datetime(2022, 8, 17, 7, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 981528362, 'comment_body': '@ferrine Yes, I plan to use the `gpytorch.utils.permutation apply_permutation` temporarily and implement the `apply_permutation` function once I have GP inference working on the GPU.\r\n\r\nI have now added the try...catch checks. Is it ok if I check-in this ? I have created a n issue for the same https://github.com/pymc-devs/pymc-experimental/issues/85', 'comment_created': datetime.datetime(2022, 9, 27, 17, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kunalghosh', 'type': 'User'}, {'comment_id': 982366226, 'comment_body': 'Why you comment the test?', 'comment_created': datetime.datetime(2022, 9, 28, 12, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 982368601, 'comment_body': 'instead of a print use `raise ImportError(...)` ', 'comment_created': datetime.datetime(2022, 9, 28, 12, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 982372544, 'comment_body': 'me being annoying: `np.inf`', 'comment_created': datetime.datetime(2022, 9, 28, 12, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 985065274, 'comment_body': ""100% agree @ferrine, longer term that'll have to implemented here, but this PRs more at the proof-of-concept level so lot's of time to go back over those details later.  With the `try...except` it shouldn't get in anyones way."", 'comment_created': datetime.datetime(2022, 10, 1, 7, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 985065588, 'comment_body': 'definitely, also consider `raise ImportError(...) from e` https://stackoverflow.com/questions/24752395/python-raise-from-usage', 'comment_created': datetime.datetime(2022, 10, 1, 7, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 996684915, 'comment_body': 'This was triggering the import of `GPyTorch` and `Torch` which would cause the tests to fail. I thought it would be best to comment out the tests until I remove the dependency of my code on GPyTorch and Torch.', 'comment_created': datetime.datetime(2022, 10, 17, 7, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kunalghosh', 'type': 'User'}]","[{'commit_sha': '3fd065e98db60a847784c36a1e6b6dd9ce4d1f32', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1cf869f6a06d00eb1b61527503ba12874bcf625', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '680afa6c5811f2834c76783dd60ac25ff6358013', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c42bb358a8f0c11e0a5084cc90eea4192a1f3bb9', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ed2d5ec67b6a944ba8382978275a526566b5f0', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9290e1f57195975d270d0cc3321f3c6d83bbe1fb', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '021a3e7e02baf9d40838e8427409f2a873515b2e', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbe525bef9fb82e45755f69538505f974dc149ab', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ed06f3a5c604e15941ab5beb90842eb6a711f77', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d5e052402fec143772688e3991a1070420669bc', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd957c81717f9f44c0eabcd685da0086b471d674', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b48555f256330d5e60d7325fd42a479d1a174b', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3a13f5d325420249401f028b6b7edd9ee2a6064', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a12943baefa0467f357a816dcc45e856bee23db', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03b7bf7396f48bb41e51e5cb83509dc6163fba25', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90094276849b388e9353e5eec1e2dd8c5317d23c', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '852d95cd9b22d117816eee72fa910e1cc82bdf2d', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d1fb4e0cace825aaee5c225bbc5b057dafcc311', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aba7b0706d8fc31b6cc0ca205a0f877d4775b37', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b8a13291a54c725142017fbde34d233baea2af6', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '685b99dbc8a38d3df0d180dd4bc1659abb189230', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3676a51d14999f6578b24edb4b7dbf375d0a619d', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a9a8c06df225ccea0bd8ce82e6edea68ad2ce52', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96229a87868ca41827789ee6310ab6461b2a1d3d', 'committer_username': 'kunalghosh', 'committer_name': 'Kunal Ghosh', 'committer_email': None, 'commit_date': datetime.datetime(2009, 11, 24, 0, 32, 13, tzinfo=datetime.timezone.utc)}]",Kunal Ghosh,157300,,User,,54,,10,39

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
434677093,pymc-experimental,pymc-devs/pymc-experimental,Jupyter Notebook,47,74,16,25,252,78,25,28,"[{'id': 1015265387, 'number': 63, 'closed': datetime.datetime(2022, 10, 24, 23, 13, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 15, 28, 52, tzinfo=datetime.timezone.utc), 'time_taken': 7199075.0, 'time_delta': '83 days, 7:44:35', 'additions': 92, 'deletions': 0, 'state': 'closed'}, {'id': 1015241149, 'number': 62, 'closed': datetime.datetime(2022, 10, 1, 9, 26, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 15, 7, 15, tzinfo=datetime.timezone.utc), 'time_taken': 5163579.0, 'time_delta': '59 days, 18:19:39', 'additions': 277, 'deletions': 0, 'state': 'closed'}]"
