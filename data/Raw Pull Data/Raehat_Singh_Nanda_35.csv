pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1376491129,Implement a simple graph with coroutine information represented as nodes,Merge branch to original repository,True,3,https://api.github.com/repos/nikita-nazarov/coroutine-stacks/pulls/3,https://github.com/nikita-nazarov/coroutine-stacks/pull/3,closed,198,7,4,1,0,0,0,0,[],2023-06-03 00:37:37+00:00,2023-06-03 00:38:00+00:00,23.0,0:00:23,[],"[{'commit_sha': '63f441a20c21fa59073768232fc1bf33799f510b', 'committer_username': 'raehat', 'committer_name': 'RS NANDA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 12, 8, 5, 43, tzinfo=datetime.timezone.utc)}]",RS NANDA,77321971,,User,,68,,2,13
1377287471,Simple graph,Develop simple graph using Jgraph for coroutine stacks,True,4,https://api.github.com/repos/nikita-nazarov/coroutine-stacks/pulls/4,https://github.com/nikita-nazarov/coroutine-stacks/pull/4,closed,292,23,5,1,1,132,0,0,[],2023-06-03 20:03:15+00:00,2023-06-21 13:07:30+00:00,1530255.0,"17 days, 17:04:15","[{'comment_id': 1219748384, 'comment_body': 'Please, remove this blank line', 'comment_created': datetime.datetime(2023, 6, 6, 14, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219758234, 'comment_body': ""This comment is about `suspendContext as SuspendContextImpl`. If there is a place in your program where an exception can occur, you have think of what will happen if it occurs and add appropriate fallbacks. In this particular example if the type cast doesn't succeed, a user will not see any graph and the red marker in the botoom right corner of the IDE will report about the exception. It will be better to do a safe type cast and show an  error message if it didn't succeed:\r\n```\r\nval suspendContextImpl = suspendContext as? SuspendContextImpl ?: run {\r\n   // Set the info text to something like 'Coroutine Stacks could not be built'\r\n   return\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 6, 6, 14, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219761471, 'comment_body': 'Usually when you name a variable like `somethingToSomething`, it is implied that this variable stores a map, so it would be better to name it like `dispatcherToCoroutineDataList`.', 'comment_created': datetime.datetime(2023, 6, 6, 14, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219764726, 'comment_body': 'Usually variables like i, j, k are used when you iterate over numbers, and when you iterate over custom types it is better to use a more meaningful name, like `info`.', 'comment_created': datetime.datetime(2023, 6, 6, 14, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219768602, 'comment_body': '`i.descriptor.dispatcher!!` is unsafe. It is better to handle null values this way\r\n```\r\nval dispatcher = info.descriptor.dispatcher ?: continue\r\n```\r\nI think it is appropriate to skip the coroutine if it is somehow not assigned to any dispatcher.', 'comment_created': datetime.datetime(2023, 6, 6, 14, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219780460, 'comment_body': ""Let's rewrite the body of the loop like this:\r\n```\r\n    for (info in coroutineInfoDataList) {\r\n            val dispatcher = info.descriptor.dispatcher ?: continue\r\n            dispatcherToCoroutineDataListMap.computeIfAbsent(dispatcher) { mutableListOf() }.add(info)\r\n            dispatchers.add(dispatcher)\r\n   }\r\n```"", 'comment_created': datetime.datetime(2023, 6, 6, 14, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219784389, 'comment_body': 'This type cast is a little confusing, it would be better to only use it where it is needed:\r\n```\r\n val dispatcherDropdownMenu = ComboBox(dispatcherList.toTypedArray())\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 14, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219788945, 'comment_body': ""It is good practice not to encode the type of a variable in it's name, it used to be a thing in the previous century when type hints didn't exis. Let's rename this variable to `dispatcherToCoroutineStacksTree`"", 'comment_created': datetime.datetime(2023, 6, 6, 14, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219789694, 'comment_body': ""Let's rename `i` to `dispatcher`"", 'comment_created': datetime.datetime(2023, 6, 6, 14, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219791320, 'comment_body': 'Some imports are unused, you can fix them with the `Optimise imports` action.', 'comment_created': datetime.datetime(2023, 6, 6, 14, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219794301, 'comment_body': 'I think this variable is not needed, we can just run:\r\n```\r\n generateParallelStackTree(tree, rootValue, 0)\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 14, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219800994, 'comment_body': ""Let's add that message to the bundle"", 'comment_created': datetime.datetime(2023, 6, 6, 14, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219801366, 'comment_body': '`coroutineStacksWindowHeader`?', 'comment_created': datetime.datetime(2023, 6, 6, 14, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219802207, 'comment_body': 'A whitespace is missing before the brace, and do we actually need this listener now? Looks like it is currently doing nothing.\r\n', 'comment_created': datetime.datetime(2023, 6, 6, 14, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219806080, 'comment_body': 'It would be great to extract the ui fetching logic to another function!', 'comment_created': datetime.datetime(2023, 6, 6, 14, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219808894, 'comment_body': ""Let's add a check on emptyness of `dispatcherList`"", 'comment_created': datetime.datetime(2023, 6, 6, 14, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219815427, 'comment_body': ""Let's make `coroutineGrpaph` a non nullable value. We can declare it like: `val coroutineGraph = Box.createVerticalBox()`. And when we need to clean it we can just call `coroutineGraph.removeAll()`"", 'comment_created': datetime.datetime(2023, 6, 6, 15, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219818905, 'comment_body': ""If the tree is null, the `buildParallelStackWindow` function does nothing, so let's wrap it like this:\r\n```\r\nval tree = mapOfParallelStackTree[dispatchersList[0]] ?: return\r\n```"", 'comment_created': datetime.datetime(2023, 6, 6, 15, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219824867, 'comment_body': ""Usually it is called height. And let's make it an extension function `TreeNode<T>.getHeight(): Int`. And let's get rid of nullability here by performing the null check on call sites. So it will look like `tree?.getHeight() ?: 0`."", 'comment_created': datetime.datetime(2023, 6, 6, 15, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219826935, 'comment_body': ""The tree is unbalanced here, so we can get a stack overflow. Let's remove the recursion and do a simple iteration."", 'comment_created': datetime.datetime(2023, 6, 6, 15, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219828168, 'comment_body': '`buildCoroutineStacksView`?', 'comment_created': datetime.datetime(2023, 6, 6, 15, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219828861, 'comment_body': ""`coroutineStacksView`? Technically it's not a window."", 'comment_created': datetime.datetime(2023, 6, 6, 15, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219830509, 'comment_body': ""Let's get rid of nullability here"", 'comment_created': datetime.datetime(2023, 6, 6, 15, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219833483, 'comment_body': ""Let's extract these magic constants to the companion object"", 'comment_created': datetime.datetime(2023, 6, 6, 15, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219834345, 'comment_body': ""Let's extract this magic constant to the companion object"", 'comment_created': datetime.datetime(2023, 6, 6, 15, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219837040, 'comment_body': ""`CoroutineStacksPanel` can be ommited here, and let's get rid of the nullability!"", 'comment_created': datetime.datetime(2023, 6, 6, 15, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219839753, 'comment_body': 'Please, move the parenthesis and the bracket on a new line', 'comment_created': datetime.datetime(2023, 6, 6, 15, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219841396, 'comment_body': ""The tree is unbalanced and we can get a stack overflow here, let's replace the recursion with simple iteration."", 'comment_created': datetime.datetime(2023, 6, 6, 15, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219842034, 'comment_body': 'Please, move the parenthesis and the bracket on a new line', 'comment_created': datetime.datetime(2023, 6, 6, 15, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219900541, 'comment_body': '`stackFrames`?', 'comment_created': datetime.datetime(2023, 6, 6, 15, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219903395, 'comment_body': ""Let's extract this magic constant to the companion object"", 'comment_created': datetime.datetime(2023, 6, 6, 15, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219904171, 'comment_body': ""Let's extract this magic constant to the companion object"", 'comment_created': datetime.datetime(2023, 6, 6, 15, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219908013, 'comment_body': ""Let's not do strict type casting here"", 'comment_created': datetime.datetime(2023, 6, 6, 15, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219909795, 'comment_body': 'Maybe we can make this class anonymous? Since it only overrides one method and is used only in one place, it looks reasonable.', 'comment_created': datetime.datetime(2023, 6, 6, 15, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219912503, 'comment_body': '`stackTrace`? And it would be better to have non null strings in this list. ', 'comment_created': datetime.datetime(2023, 6, 6, 15, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219912867, 'comment_body': '`CoroutineStacksNode`?', 'comment_created': datetime.datetime(2023, 6, 6, 15, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219914584, 'comment_body': 'Do we really need this method if the `children` variable is public? We can just call `node.children.add()`', 'comment_created': datetime.datetime(2023, 6, 6, 15, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219918592, 'comment_body': 'Please, move the parenthesis and the bracket on a new line', 'comment_created': datetime.datetime(2023, 6, 6, 16, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219921441, 'comment_body': 'Let\'s move this string to a bundle. You can do it like this:\r\nIn the .properties file\r\n```\r\nnumber.of.coroutines={0} Coroutines\r\n```\r\nAnd then use it this way:\r\n```\r\nBundle.message(""number.of.coroutines"", value.additionalData.size);\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 6, 16, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219922614, 'comment_body': 'CoroutineStacksPanel can be ommited here', 'comment_created': datetime.datetime(2023, 6, 6, 16, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219923797, 'comment_body': 'The !! is unnecessary here', 'comment_created': datetime.datetime(2023, 6, 6, 16, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219924573, 'comment_body': '`for (data in rootValue.additionalData)` ?', 'comment_created': datetime.datetime(2023, 6, 6, 16, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219925516, 'comment_body': '`dataToStackFrame`?', 'comment_created': datetime.datetime(2023, 6, 6, 16, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219934935, 'comment_body': '`rootValue` is already not null at this point', 'comment_created': datetime.datetime(2023, 6, 6, 16, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219935062, 'comment_body': '`rootValue` is already not null at this point', 'comment_created': datetime.datetime(2023, 6, 6, 16, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219937158, 'comment_body': ""Let's perform this check here:\r\n```\r\nif (rootValue == null) {\r\n  return\r\n }\r\n```"", 'comment_created': datetime.datetime(2023, 6, 6, 16, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219939258, 'comment_body': 'Here we can just write `rootValue.stackTrace.isEmpty()`', 'comment_created': datetime.datetime(2023, 6, 6, 16, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219946617, 'comment_body': 'Can you please tell why do we need this?', 'comment_created': datetime.datetime(2023, 6, 6, 16, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1219947510, 'comment_body': 'This line is very hard to read, could you please split the call chain to make it more readable?', 'comment_created': datetime.datetime(2023, 6, 6, 16, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224548240, 'comment_body': '```suggestion\r\n        val coroutineInfoCache = CoroutineDebugProbesProxy(suspendContextImpl).dumpCoroutines()\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 16, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224549468, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224549602, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224549896, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224550724, 'comment_body': '```suggestion\r\n    }\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224550890, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224551209, 'comment_body': '```suggestion\r\n            coroutineStacksView.add(i)\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224551302, 'comment_body': '```suggestion\r\n            coroutineStacksView.add(Box.createVerticalStrut(Constants.boxVerticalStruct))\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224551978, 'comment_body': '```suggestion\r\n        val dispatchersList = dispatchers.toTypedArray()\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224552807, 'comment_body': 'We can just fold the parameters to be on one line here:\r\n```\r\nprivate fun addCoroutineInfoBox(value: CoroutineStacksNode, box: Box)\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224552910, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224553373, 'comment_body': '`stackFrames.add(stackTrace)`', 'comment_created': datetime.datetime(2023, 6, 9, 17, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224553954, 'comment_body': '`node: CoroutineStacksNode`?', 'comment_created': datetime.datetime(2023, 6, 9, 17, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224554265, 'comment_body': '`for (stackTrace in node.stackTrace)`', 'comment_created': datetime.datetime(2023, 6, 9, 17, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224555396, 'comment_body': 'Please, move the declaration of this variable to the top part of the class before methods are declared', 'comment_created': datetime.datetime(2023, 6, 9, 17, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224555700, 'comment_body': '`cellRenderer` is always not null', 'comment_created': datetime.datetime(2023, 6, 9, 17, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224556749, 'comment_body': '```suggestion\r\n        val border = BorderFactory.createLineBorder(JBColor.BLACK, Constants.borderWidth)\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224556854, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224557027, 'comment_body': '```suggestion\r\n        private val ITEM_BORDER = BorderFactory.createMatteBorder(0, 0, 1, 0, JBColor.GRAY)\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224557300, 'comment_body': 'We can omit `CoroutineStacksPanel` here', 'comment_created': datetime.datetime(2023, 6, 9, 17, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224557916, 'comment_body': 'This block should be moved one tabulation backwards', 'comment_created': datetime.datetime(2023, 6, 9, 17, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224558657, 'comment_body': ""This block of code is still very cryptic, let's extract `gropBy` and `map` calls to different variables"", 'comment_created': datetime.datetime(2023, 6, 9, 17, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224558969, 'comment_body': '```suggestion\r\n                    rootValue.stackTrace.add(dataToStackFrame[i[0]]!!)\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224559652, 'comment_body': '```suggestion\r\n                } else if (groupedPositions.size > 1) {\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1224578149, 'comment_body': '```suggestion\r\n    private val coroutineGraph = Box.createVerticalBox()\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1228446635, 'comment_body': ""Let's delete the blank lines in the start and in the end of the loop.\r\n```\r\n for (dispatcher in dispatchers) {\r\n            val tree = Tree<CoroutineStacksNode>()\r\n            val rootValue =\r\n                dispatcherToCoroutineDataList[dispatcher]?.let { CoroutineStacksNode(stackTrace = mutableListOf(), additionalData = it) }\r\n            if (rootValue != null) {\r\n                tree.insert(rootValue)\r\n            }\r\n\r\n            generateParallelStackTree(tree, rootValue, 0)\r\n\r\n            printTree(tree.root, 0)\r\n\r\n            dispatcherToCoroutineStacksTree[dispatcher] = tree\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 6, 13, 17, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1228447735, 'comment_body': '`for (row in rows.reversed())`', 'comment_created': datetime.datetime(2023, 6, 13, 17, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1228449268, 'comment_body': 'The `for` loop under this condition has a wrong padding', 'comment_created': datetime.datetime(2023, 6, 13, 17, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1228453615, 'comment_body': 'We can fold it like this:\r\n```\r\nval groupedPositions = groupedByValue.map { (_, list) ->\r\n    list.map { it.key }\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 13, 17, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1233793102, 'comment_body': '`stack.isNotEmpty()`', 'comment_created': datetime.datetime(2023, 6, 19, 9, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1233793526, 'comment_body': 'We need a blank line before declaring a new class', 'comment_created': datetime.datetime(2023, 6, 19, 9, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1233797339, 'comment_body': 'Instead of having a nullable root here, we could just require passing it to the constructor:\r\n```\r\nclass Tree<T>(val root: TreeNode<T>)\r\n```', 'comment_created': datetime.datetime(2023, 6, 19, 9, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1233797870, 'comment_body': '`stack.isNotEmpty()`', 'comment_created': datetime.datetime(2023, 6, 19, 9, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1233798626, 'comment_body': 'This brace has a wrong padding', 'comment_created': datetime.datetime(2023, 6, 19, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1233799080, 'comment_body': 'We need a blank line here', 'comment_created': datetime.datetime(2023, 6, 19, 9, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}]","[{'commit_sha': '99f1889f46031e3b014bb8c12cc4418a88479e09', 'committer_username': 'raehat', 'committer_name': 'RS NANDA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 12, 8, 5, 43, tzinfo=datetime.timezone.utc)}]",RS NANDA,77321971,,User,,68,,2,13
1397983208,Add components for rendering forest with edges,Closes #6 ,True,5,https://api.github.com/repos/nikita-nazarov/coroutine-stacks/pulls/5,https://github.com/nikita-nazarov/coroutine-stacks/pull/5,closed,381,1,3,1,0,0,0,1,[],2023-06-19 10:41:39+00:00,2023-07-19 13:05:43+00:00,2600644.0,"30 days, 2:24:04",[],"[{'commit_sha': '23cc83d5ae130ef65f0ad5cc435f01edbf467cec', 'committer_username': 'nikita-nazarov', 'committer_name': 'Nikita Nazarov ', 'committer_email': 'nekit-000000@mail.ru', 'commit_date': datetime.datetime(2017, 2, 12, 12, 26, 58, tzinfo=datetime.timezone.utc)}]",Nikita Nazarov ,25721619,nekit-000000@mail.ru,User,,15,,1,7
1406791295,Simple graph with new algorithm,"Add capability to resolve to a source file when clicking on a frame
Add highlighting of stack trace where a user has stopped on a breakpoint ",True,9,https://api.github.com/repos/nikita-nazarov/coroutine-stacks/pulls/9,https://github.com/nikita-nazarov/coroutine-stacks/pull/9,closed,552,438,10,2,6,104,0,1,[],2023-06-25 18:19:15+00:00,2023-07-21 09:41:33+00:00,2215338.0,"25 days, 15:22:18","[{'comment_id': 1242720937, 'comment_body': 'This variable is introduced a little too early, it is better to introduce it closer to use site', 'comment_created': datetime.datetime(2023, 6, 26, 20, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1242723319, 'comment_body': 'Maybe we should rename this variable now, since it contains not only the graph but also other UI elements. Maybe `panelContent` will do?', 'comment_created': datetime.datetime(2023, 6, 26, 20, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1242724609, 'comment_body': 'You can change the type to the interface type here: `positionManager: PositionManager`', 'comment_created': datetime.datetime(2023, 6, 26, 20, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1242724852, 'comment_body': 'Discussed it in person: `updateUI()`', 'comment_created': datetime.datetime(2023, 6, 26, 20, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1242725241, 'comment_body': '`positionManager: PositionManager`', 'comment_created': datetime.datetime(2023, 6, 26, 20, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1242730041, 'comment_body': 'Would be great to add a clarifying comment on what this number means to not forget this in the future', 'comment_created': datetime.datetime(2023, 6, 26, 20, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1242736033, 'comment_body': ""Let's extract this loop to a function, say `buildStackFrameGraph`"", 'comment_created': datetime.datetime(2023, 6, 26, 20, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1242830800, 'comment_body': 'This comment is a little superfluous and can be deleted', 'comment_created': datetime.datetime(2023, 6, 26, 21, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1243448781, 'comment_body': ""Let's create a separate class to handle coroutine stacks UI, say `class CoroutineTrace : JBList<String>`, and handle  \r\nall customisation there"", 'comment_created': datetime.datetime(2023, 6, 27, 9, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1243449528, 'comment_body': 'Triple equals will be a little faster here `separatorOrLocation === separator`', 'comment_created': datetime.datetime(2023, 6, 27, 9, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1243484927, 'comment_body': 'Occasionally when you click on stack frames you will get this exception:\r\n```\r\njava.lang.Throwable: Assertion failed: Should be invoked in manager thread, use DebuggerManagerThreadImpl.getInstance(..).invoke...\r\n\tat com.intellij.openapi.diagnostic.Logger.assertTrue(Logger.java:258)\r\n\tat com.intellij.debugger.engine.DebuggerManagerThreadImpl.assertIsManagerThread(DebuggerManagerThreadImpl.java:55)\r\n\tat com.intellij.debugger.engine.DebugProcessImpl.getVirtualMachineProxy(DebugProcessImpl.java:821)\r\n\tat org.jetbrains.kotlin.idea.debugger.core.DebuggerUtil.visibleVariables(debuggerUtil.kt:124)\r\n\tat org.jetbrains.kotlin.idea.debugger.core.DebuggerUtil.isInsideInlineArgument(debuggerUtil.kt:70)\r\n\tat org.jetbrains.kotlin.idea.debugger.KotlinPositionManager.getLambdaOrFunStartingOrEndingOnLineIfInside(KotlinPositionManager.kt:292)\r\n\tat org.jetbrains.kotlin.idea.debugger.KotlinPositionManager.getSourcePosition(KotlinPositionManager.kt:150)\r\n\tat com.intellij.debugger.engine.CompoundPositionManager.lambda$getSourcePosition$2(CompoundPositionManager.java:109)\r\n\tat com.intellij.debugger.engine.CompoundPositionManager.lambda$iterate$0(CompoundPositionManager.java:84)\r\n\tat com.intellij.debugger.impl.DebuggerUtilsImpl.suppressExceptions(DebuggerUtilsImpl.java:248)\r\n\tat com.intellij.debugger.engine.CompoundPositionManager.iterate(CompoundPositionManager.java:84)\r\n\tat com.intellij.debugger.engine.CompoundPositionManager.lambda$getSourcePosition$3(CompoundPositionManager.java:108)\r\n\tat com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(NonBlockingReadActionImpl.java:746)\r\n\tat com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call(NonBlockingReadActionImpl.java:778)\r\n\tat com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(NonBlockingReadActionImpl.java:573)\r\n\tat com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$3(NonBlockingReadActionImpl.java:537)\r\n\tat com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(ApplicationImpl.java:1102)\r\n\tat com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(ProgressIndicatorUtils.java:72)\r\n\tat com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(ProgressIndicatorUtilService.java:63)\r\n\tat com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(ProgressIndicatorUtils.java:129)\r\n\tat com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(ProgressIndicatorUtils.java:110)\r\n\tat com.intellij.openapi.progress.ProgressManager.lambda$runProcess$1(ProgressManager.java:70)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(CoreProgressManager.java:186)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(CoreProgressManager.java:604)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:679)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(CoreProgressManager.java:635)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:603)\r\n\tat com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:60)\r\n\tat com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:173)\r\n\tat com.intellij.openapi.progress.ProgressManager.runProcess(ProgressManager.java:70)\r\n\tat com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(ProgressIndicatorUtils.java:107)\r\n\tat com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(ProgressIndicatorUtils.java:72)\r\n\tat com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation(NonBlockingReadActionImpl.java:537)\r\n\tat com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.executeSynchronously(NonBlockingReadActionImpl.java:464)\r\n\tat com.intellij.openapi.application.impl.NonBlockingReadActionImpl.executeSynchronously(NonBlockingReadActionImpl.java:218)\r\n\tat com.intellij.debugger.engine.CompoundPositionManager.getSourcePosition(CompoundPositionManager.java:117)\r\n\tat com.nikitanazarov.coroutinestacks.CoroutineStacksPanel$performPositionTask$1.doInBackground(CoroutineStacksPanel.kt:74)\r\n\tat com.nikitanazarov.coroutinestacks.CoroutineStacksPanel$performPositionTask$1.doInBackground(CoroutineStacksPanel.kt:72)\r\n\tat java.desktop/javax.swing.SwingWorker$1.call(SwingWorker.java:304)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.desktop/javax.swing.SwingWorker.run(SwingWorker.java:343)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\r\n\tat java.base/java.lang.Thread.run(Thread.java:833)\r\n```\r\nIt happens because we should only use position manager in the debugger thread, so instead of running a SwingWorker we should do:\r\n```\r\nsuspendContextImpl.debugProcess.managerThread.invoke(object : DebuggerCommandImpl() {\r\n            override fun action() {\r\n                val sourcePosition = positionManager.getSourcePosition(location)\r\n                sourcePosition?.navigate(true)\r\n            }\r\n        })\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 27, 10, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1243488333, 'comment_body': ""Let's extract this loop to a function as well"", 'comment_created': datetime.datetime(2023, 6, 27, 10, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1243488698, 'comment_body': ""Let's extract ui fetching to a separate function"", 'comment_created': datetime.datetime(2023, 6, 27, 10, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1243508356, 'comment_body': 'I added capability to not add trailing separators to the tree-list, so you can delete this block of code once you rebase on the `forest-layout` branch', 'comment_created': datetime.datetime(2023, 6, 27, 10, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248199498, 'comment_body': '`var num: Int, // Represents how many coroutines have this frame in their stack trace`', 'comment_created': datetime.datetime(2023, 6, 30, 19, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248203851, 'comment_body': ""Let's rewrite the function body like this:\r\n```\r\n            val renderer = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)\r\n            if (renderer !is JComponent) {\r\n                return renderer\r\n            }\r\n\r\n            with(renderer) {\r\n                val listSize = list.model.size\r\n                if (index == 0) {\r\n                    toolTipText = coroutinesActive\r\n                    font = renderer.font.deriveFont(Font.BOLD)\r\n                } else if (index < listSize) {\r\n                    toolTipText = value.toString()\r\n                }\r\n                border = if (index < listSize - 1) itemBorder else null\r\n            }\r\n\r\n            return renderer\r\n\r\n```"", 'comment_created': datetime.datetime(2023, 6, 30, 19, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248206761, 'comment_body': '`val currentProcess = (currentSession.debugProcess as? JavaDebugProcess)?.debuggerSession?.process`', 'comment_created': datetime.datetime(2023, 6, 30, 19, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248207753, 'comment_body': '`private fun createPanelBuilderListener()`', 'comment_created': datetime.datetime(2023, 6, 30, 19, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248210799, 'comment_body': '`JBColor`', 'comment_created': datetime.datetime(2023, 6, 30, 19, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248210858, 'comment_body': '`JBColor`', 'comment_created': datetime.datetime(2023, 6, 30, 19, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248214956, 'comment_body': 'Lets rewrite the block this way:\r\n```\r\n                    val currentList = e.source as? JBList<*> ?: return@addListSelectionListener\r\n                    if (previousListSelection != currentList) {\r\n                        previousListSelection?.clearSelection()\r\n                    }\r\n                    previousListSelection = currentList\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 30, 19, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248215074, 'comment_body': '`var previousListSelection: JBList<*>? = null`', 'comment_created': datetime.datetime(2023, 6, 30, 19, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248215999, 'comment_body': '` val list = e?.source as? JBList<*> ?: return`', 'comment_created': datetime.datetime(2023, 6, 30, 19, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248216849, 'comment_body': '```\r\nval index = list.locationToIndex(e.point).takeIf { it > 0 } ?: return\r\nval location = locationMatrixWithSeparators[i][index - 1] ?: return\r\n```', 'comment_created': datetime.datetime(2023, 6, 30, 19, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248217303, 'comment_body': ""Let's extract the UI creation logic to a separate class as we've discussed recently!"", 'comment_created': datetime.datetime(2023, 6, 30, 19, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248217890, 'comment_body': 'What if locationData is empty?', 'comment_created': datetime.datetime(2023, 6, 30, 19, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248218386, 'comment_body': 'If you rebase on the fresh version of the `forest-layout` branch, you can delete this block', 'comment_created': datetime.datetime(2023, 6, 30, 19, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248219838, 'comment_body': '`val lastRunningStackFrame = buildStackFrameGraph(coroutineDataList, rootValue)`', 'comment_created': datetime.datetime(2023, 6, 30, 19, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248221838, 'comment_body': ""```\r\ncomponentData.add(Separator())\r\nreturn@forEachIndexed\r\n```\r\n\r\nAnd you won't need the `else` block"", 'comment_created': datetime.datetime(2023, 6, 30, 19, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248982859, 'comment_body': 'Speaking about this function, it is very hard to read it. We have 3 stages in the forest building algorithm:\r\n1. Stack frame graph building\r\n2. Creating a forest of coroutine traces\r\n3. Creating UI\r\n\r\nHowever, I can\'t see these stages while reading this function, which makes it extremely hard to understand and maintain. I made a sketch of how it should ideally look like:\r\n```\r\n    data class CoroutineTrace(val locations: MutableList<Location>, val header: String, val hoverContent: String)\r\n    \r\n    private fun SuspendContextImpl.buildCoroutineStackForest(\r\n        rootValue: Node,\r\n        coroutineDataList: MutableList<CoroutineInfoData>,\r\n    ): JBScrollPane {\r\n        val lastRunningStackFrame = buildStackFrameGraph(coroutineDataList, rootValue)\r\n        val coroutineTraces = createCoroutineTraces(rootValue)\r\n        return createCoroutineTraceForest(coroutineTraces, lastRunningStackFrame)\r\n    }\r\n\r\n    private fun SuspendContextImpl.createCoroutineTraceForest(traces: List<CoroutineTrace?>, lastRunningStackFrame: String): JBScrollPane {\r\n        val componentData: MutableList<Component> = mutableListOf()\r\n        var previousListSelection: JBList<*>? = null\r\n        traces.forEach { trace ->\r\n            if (trace == null) {\r\n                componentData.add(Separator())\r\n                return@forEach\r\n            }\r\n            val vertex = createCoroutineTraceUI(trace, lastRunningStackFrame)\r\n            vertex.addListSelectionListener { e ->\r\n                val currentList = e.source as? JBList<*> ?: return@addListSelectionListener\r\n                if (previousListSelection != currentList) {\r\n                    previousListSelection?.clearSelection()\r\n                }\r\n                previousListSelection = currentList\r\n            }\r\n            componentData.add(vertex)\r\n        }\r\n\r\n        val forest = ContainerWithEdges()\r\n        componentData.forEach { forest.add(it) }\r\n        forest.layout = ForestLayout()\r\n        return JBScrollPane(forest)\r\n    }\r\n\r\n    private fun createCoroutineTraces(rootValue: Node): List<CoroutineTrace?> {\r\n        val stack = Stack<Pair<Node, Int>>()\r\n        val parentStack = Stack<Node>()\r\n\r\n        stack.push(Pair(rootValue, 0))\r\n        val locationsFollowedBySeparators = mutableListOf<Location?>()\r\n\r\n        var currentTrace: CoroutineTrace? = null\r\n        val coroutineTraces = mutableListOf<CoroutineTrace?>()\r\n        while (stack.isNotEmpty()) {\r\n            val (currentNode, level) = stack.pop()\r\n            val parent = if (parentStack.isNotEmpty()) parentStack.pop() else null\r\n\r\n            if (parent != null) {\r\n                if (parent.num != currentNode.num) {\r\n                    currentTrace = CoroutineTrace(\r\n                        mutableListOf(currentNode.stackFrameLocation),\r\n                        ""${currentNode.num} Coroutines ACTIVE"",\r\n                        currentNode.coroutinesActive\r\n                    )\r\n                    coroutineTraces.add(currentTrace)\r\n                } else {\r\n                    currentTrace?.locations?.add(currentNode.stackFrameLocation)\r\n                }\r\n            }\r\n\r\n            currentNode.children.values.reversed().forEachIndexed { index, child ->\r\n                if (index != currentNode.children.values.size - 1) {\r\n                    locationsFollowedBySeparators.add(child.stackFrameLocation)\r\n                    coroutineTraces.add(null)\r\n                }\r\n                stack.push(child to (level + 1))\r\n                parentStack.push(currentNode)\r\n            }\r\n        }\r\n\r\n        return coroutineTraces\r\n    }\r\n\r\n    private fun SuspendContextImpl.createCoroutineTraceUI(trace: CoroutineTrace, lastRunningStackFrame: String): JBList<String> {\r\n        val vertex = JBList<String>()\r\n        val data = mutableListOf<String>()\r\n        data.add(trace.header)\r\n        data.addAll(trace.locations.map { it.toString() })\r\n        vertex.setListData(data.toTypedArray())\r\n        val lastStackFrame = data[trace.locations.size]\r\n        vertex.border = if (lastRunningStackFrame == lastStackFrame) {\r\n            BorderFactory.createLineBorder(JBColor.GRAY)\r\n        } else {\r\n            BorderFactory.createLineBorder(JBColor.BLACK)\r\n        }\r\n        vertex.cellRenderer = CustomCellRenderer(trace.hoverContent)\r\n        vertex.addMouseListener(object : MouseAdapter() {\r\n            override fun mouseClicked(e: MouseEvent?) {\r\n                val list = e?.source as? JBList<*> ?: return\r\n                val index = list.locationToIndex(e.point).takeIf { it > 0 } ?: return\r\n                val location = trace.locations[index - 1]\r\n                debugProcess.managerThread.invoke(object : DebuggerCommandImpl() {\r\n                    override fun action() {\r\n                        val positionManager = debugProcess.positionManager\r\n                        val sourcePosition = positionManager.getSourcePosition(location)\r\n                        sourcePosition?.navigate(true)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        return vertex\r\n    }\r\n\r\n```\r\n\r\nSo now the `buildCoroutineStackForest` function looks like this:\r\n```\r\nprivate fun SuspendContextImpl.buildCoroutineStackForest(\r\n        rootValue: Node,\r\n        coroutineDataList: MutableList<CoroutineInfoData>,\r\n    ): JBScrollPane {\r\n        val lastRunningStackFrame = buildStackFrameGraph(coroutineDataList, rootValue)\r\n        val coroutineTraces = createCoroutineTraces(rootValue)\r\n        return createCoroutineTraceForest(coroutineTraces, lastRunningStackFrame)\r\n    }\r\n```\r\nIt is just 3 lines long, but we can clearly see what is going on.', 'comment_created': datetime.datetime(2023, 7, 1, 21, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248983035, 'comment_body': ""You don't need this parameter here, as it is always an empty string"", 'comment_created': datetime.datetime(2023, 7, 1, 21, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1248983053, 'comment_body': '`var lastRunningStackFrame = """"`', 'comment_created': datetime.datetime(2023, 7, 1, 21, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256490527, 'comment_body': 'Use `JBUI.Borders.emptyLeft(padding)` instead', 'comment_created': datetime.datetime(2023, 7, 7, 21, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256491719, 'comment_body': '`JBUI.insets(insets.top, insets.left, insets.bottom, insets.right)`', 'comment_created': datetime.datetime(2023, 7, 7, 21, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256492702, 'comment_body': ""Let's extract it to `Constants.kt`"", 'comment_created': datetime.datetime(2023, 7, 7, 21, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256496879, 'comment_body': '```\r\nval g2d = g as? Graphics2D ?: return\r\nval arc = 2 * cornerRadius\r\ng2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)\r\ng2d.color = color\r\ng2d.drawRoundRect(x, y, width - 1, height - 1, arc, arc)\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 21, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256502552, 'comment_body': '```\r\nprivate fun CoroutineInfoData.render(): String =\r\n    ""${descriptor.name}${descriptor.id} ${descriptor.state}\\n""\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 21, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256506109, 'comment_body': 'We can inline `createVertexAndData` function here:\r\n```\r\nval vertex = JBList<String>()\r\nval data = mutableListOf<String>()\r\ndata.add(trace.header)\r\ndata.addAll(trace.locations.map { it.toString() })\r\nvertex.setListData(data.toTypedArray())\r\nvertex.border = if (lastRunningStackFrame == trace.locations.firstOrNull()?.toString()) {\r\n    createRoundedBorder(JBColor.BLUE)\r\n} else {\r\n    createRoundedBorder(JBColor.BLACK)\r\n}\r\n\r\nvertex.cellRenderer = CustomCellRenderer(trace.hoverContent, averagePreferredWidth)\r\nvertex.addMouseListener(object : MouseAdapter() {\r\n    override fun mouseClicked(e: MouseEvent?) {\r\n        val list = e?.source as? JBList<*> ?: return\r\n        val index = list.locationToIndex(e.point).takeIf { it > 0 } ?: return\r\n        val location = trace.locations[index - 1]\r\n        debugProcess.managerThread.invoke(object : DebuggerCommandImpl() {\r\n            override fun action() {\r\n                val positionManager = debugProcess.positionManager\r\n                val sourcePosition = positionManager.getSourcePosition(location)\r\n                sourcePosition?.navigate(true)\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nreturn vertex\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 21, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256550189, 'comment_body': ""Creating all stack traces just to calculate the average width is very expensive, let's calculate necessary components such as sum of widths and vertices number while we are creating vertices from coroutine traces "", 'comment_created': datetime.datetime(2023, 7, 7, 22, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256551420, 'comment_body': 'Maybe instead of `hoverContent` we can call it `coroutinesActiveLabel`?', 'comment_created': datetime.datetime(2023, 7, 7, 22, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256552450, 'comment_body': '`coroutinesActiveLabel`', 'comment_created': datetime.datetime(2023, 7, 7, 22, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256552600, 'comment_body': '`coroutinesActiveLabel`', 'comment_created': datetime.datetime(2023, 7, 7, 22, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256556568, 'comment_body': ""Let's extract all coroutine trace forest building logic to a separate file:\r\n```\r\ndata class CoroutineTrace ...\r\n\r\ndata class Node ...\r\n\r\nobject CoroutineTraceForestBuilder {\r\n    fun buildCoroutineStackForest ...\r\n    private fun buildStackFrameGraph ...\r\n    private fun createCoroutineTraces ...\r\n}\r\n\r\n```"", 'comment_created': datetime.datetime(2023, 7, 7, 22, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256558437, 'comment_body': 'It would be better extract the coroutine trace UI to a separate class and handle all customisation there:\r\n\r\n```\r\nclass CoroutineFramesList : JBList<String> {\r\n ...\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 22, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256564195, 'comment_body': '`as? String`', 'comment_created': datetime.datetime(2023, 7, 7, 22, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1256564283, 'comment_body': '`as? String`', 'comment_created': datetime.datetime(2023, 7, 7, 22, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260340740, 'comment_body': 'This comment is still pending', 'comment_created': datetime.datetime(2023, 7, 11, 22, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260340819, 'comment_body': 'This comment is still pending', 'comment_created': datetime.datetime(2023, 7, 11, 22, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260341225, 'comment_body': 'I think it would be better to rewrite this class like:\r\n```\r\nprivate class CoroutineFramesList(\r\n    suspendContext: SuspendContextImpl,\r\n    trace: CoroutineTrace,\r\n    lastRunningStackFrame: String\r\n) : JBList<String>() {\r\n    init {\r\n        val debugProcess = suspendContext.debugProcess\r\n        val activeExecutionStack = suspendContext.activeExecutionStack\r\n\r\n        val data = mutableListOf<String>()\r\n        data.add(trace.header)\r\n        data.addAll(trace.stackFrameItems.map { it.toString() })\r\n        setListData(data.toTypedArray())\r\n        val lastStackFrame = data.getOrNull(1)\r\n\r\n        border = if (lastRunningStackFrame == lastStackFrame) {\r\n            createRoundedBorder(JBColor.BLUE)\r\n        } else {\r\n            createRoundedBorder(JBColor.BLACK)\r\n        }\r\n\r\n        cellRenderer = CoroutineStacksPanel.CustomCellRenderer(trace.coroutinesActiveLabel)\r\n        addMouseListener(object : MouseAdapter() {\r\n            override fun mouseClicked(e: MouseEvent?) {\r\n                val list = e?.source as? JBList<*> ?: return\r\n                val index = list.locationToIndex(e.point).takeIf { it > 0 } ?: return\r\n                val stackFrameItem = trace.stackFrameItems[index - 1]\r\n\r\n                stackFrameItem?.let { frameItem ->\r\n                    val frame = frameItem.createFrame(debugProcess)\r\n\r\n                    if (activeExecutionStack != null && frame != null) {\r\n                        suspendContext.setCurrentStackFrame(activeExecutionStack, frame)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 22, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260341801, 'comment_body': ""And also let's move it to a separate file! Together with `createRoundedBorder` and  `CustomCellRenderer`"", 'comment_created': datetime.datetime(2023, 7, 11, 22, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260342533, 'comment_body': ""This line is too long, let's move the declarations to separate lines"", 'comment_created': datetime.datetime(2023, 7, 11, 22, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260343725, 'comment_body': ""Let's put this function in the bottom of the file, since it is private anyway and doesn't expose any interesting api, and is used only for internal implementation of this file"", 'comment_created': datetime.datetime(2023, 7, 11, 22, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260344486, 'comment_body': ""Let's do it like this:\r\n```\r\nif (traces.isEmpty()) {\r\n  return null\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 7, 11, 22, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260344873, 'comment_body': '`    val vertexData = mutableListOf<JBList<String>?>()`', 'comment_created': datetime.datetime(2023, 7, 11, 22, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260345159, 'comment_body': '`    val componentData = mutableListOf<Component>()`', 'comment_created': datetime.datetime(2023, 7, 11, 22, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260345530, 'comment_body': 'what if `traceNotNullCount` is zero?', 'comment_created': datetime.datetime(2023, 7, 11, 22, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260346288, 'comment_body': 'This can only happen if the `traces` list is ill-formed and only contains nulls, but we have to check for this situation anyway for our code to be safe', 'comment_created': datetime.datetime(2023, 7, 11, 22, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260349081, 'comment_body': ""Let's move this line to the constructor of `ContainerWithEdges`.  After that we will be able to write:\r\n```\r\nval forest =  ContainerWithEdges(componentData).apply {\r\n      layout = ForestLayout()\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 7, 11, 22, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260349491, 'comment_body': 'Also try using the DraggablePanel from the fresh version of the `forest-layout` branch!', 'comment_created': datetime.datetime(2023, 7, 11, 22, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260351035, 'comment_body': ""Let's add a coment `// Copied from org.jetbrains.kotlin.idea.debugger.coroutine.view.CoroutineSelectedNodeListener#setCurrentStackFrame`"", 'comment_created': datetime.datetime(2023, 7, 11, 22, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260352323, 'comment_body': 'Lets add a blank line before return', 'comment_created': datetime.datetime(2023, 7, 11, 22, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260353149, 'comment_body': 'It looks like you forgot to add the message to the bundle', 'comment_created': datetime.datetime(2023, 7, 11, 22, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260353617, 'comment_body': '`as? JavaDebugProcess`', 'comment_created': datetime.datetime(2023, 7, 11, 22, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260354421, 'comment_body': '`val panelBuilderListener = object : DebugProcessListener ...`', 'comment_created': datetime.datetime(2023, 7, 11, 22, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260355207, 'comment_body': 'We need to wrap the stack forest building logic in the debugger thread, and the UI building logic in the UI thread', 'comment_created': datetime.datetime(2023, 7, 11, 22, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1260358897, 'comment_body': ""Let's omit the `Active` word. We also need to add proper ending for examples like: 1 Coroutine, 2 Coroutine**s**"", 'comment_created': datetime.datetime(2023, 7, 11, 22, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261240107, 'comment_body': ""Let's move this file to the `ui` package"", 'comment_created': datetime.datetime(2023, 7, 12, 14, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261243321, 'comment_body': ""This class is only used in one place, so let's make it an anonymous object instead"", 'comment_created': datetime.datetime(2023, 7, 12, 14, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261244251, 'comment_body': ""The padding is always equal to 3, se let's remove this argument"", 'comment_created': datetime.datetime(2023, 7, 12, 14, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261244841, 'comment_body': 'these 3 variables clearly belong to a companion object in the CoroutineFramesListClass', 'comment_created': datetime.datetime(2023, 7, 12, 14, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261247208, 'comment_body': '`No stack traces are available for display`', 'comment_created': datetime.datetime(2023, 7, 12, 14, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261249905, 'comment_body': '```\r\nval coroutineStackHeader = if (currentNode.num > 1) {\r\n ...\r\n} else {\r\n ...\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 14, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261258806, 'comment_body': ""What if current session is not null, but the `javaDebugProcess` variable is null, or `currentProcess` is null? This way we will hide the `No java debug process is currently running` message, when we actually shouldn't have done this. This situation can happen if, for example, a user starts a python debugging session in a Java project."", 'comment_created': datetime.datetime(2023, 7, 12, 14, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261261324, 'comment_body': '`coroutineStacksPanelHeader`', 'comment_created': datetime.datetime(2023, 7, 12, 14, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261263990, 'comment_body': 'I think here it will look better to use plain `if` instead of the elvis operator:\r\n```\r\nif (coroutineStackForest == null) {\r\n...\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 14, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1261266467, 'comment_body': '`val coroutineFrameItemLists = CoroutineFrameBuilder.build(coroutineData, this) ?: return@forEach`', 'comment_created': datetime.datetime(2023, 7, 12, 14, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262274082, 'comment_body': ""Let's remove this class and introduce corresponding constants closer to their use site. I will add more comments on that in this review."", 'comment_created': datetime.datetime(2023, 7, 13, 9, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262275166, 'comment_body': '```\r\nprivate val panelBuilderListener = object : DebugProcessListener { ...\r\n```\r\nAnd it should be declared in top of the class.', 'comment_created': datetime.datetime(2023, 7, 13, 9, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262275945, 'comment_body': '`if (coroutineStackForest == null) {`', 'comment_created': datetime.datetime(2023, 7, 13, 9, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262277524, 'comment_body': 'The Constants.leftPaddingForBorder value can be inlined here.', 'comment_created': datetime.datetime(2023, 7, 13, 9, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262279507, 'comment_body': ""These variables are not needed, you can inline their values on the use sites. And let's move Constants.cornerRadius and Constants.borderThickness to CoroutineFramesList"", 'comment_created': datetime.datetime(2023, 7, 13, 9, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262281626, 'comment_body': ""Let's create a constant in a companion object of this class. \r\n```\r\nval comboBoxSize = Dimension(150, 25)\r\n```\r\nAnd let's remove Constnants.comboBoxHeight and width"", 'comment_created': datetime.datetime(2023, 7, 13, 9, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262285080, 'comment_body': ""Let's move this function out of the class body, as it doesn't use any class fields or methods"", 'comment_created': datetime.datetime(2023, 7, 13, 9, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262286782, 'comment_body': '`val stackFrameItem = trace.stackFrameItems[index - 1] ?: return`', 'comment_created': datetime.datetime(2023, 7, 13, 9, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262288252, 'comment_body': 'Why you have marked this conversation as resolved while it is not resolved? This line contains a bug. The `javax.swing.JComboBox#getSelectedItem` function is marked as `@Nullable`, which means it can return null. So if selectedItem is null, strong casting it to String will throw an exception!', 'comment_created': datetime.datetime(2023, 7, 13, 9, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262290815, 'comment_body': 'This code block has incorrect indentation', 'comment_created': datetime.datetime(2023, 7, 13, 9, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262293663, 'comment_body': ""Let's extract `suspendContext.activeExecutionStack` to a variable"", 'comment_created': datetime.datetime(2023, 7, 13, 9, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262295832, 'comment_body': 'So if executionStack is null, looks like you still launched a UI thread just to check this condition, while we could have checked it on the call site.', 'comment_created': datetime.datetime(2023, 7, 13, 9, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262296476, 'comment_body': ""Let's make executionStack non nullable and check if it is null on the call site."", 'comment_created': datetime.datetime(2023, 7, 13, 9, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262300101, 'comment_body': ""Let's place parameters the same way they are placed in Node"", 'comment_created': datetime.datetime(2023, 7, 13, 9, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262306475, 'comment_body': ""Actually we don't need this function, we can replace it with plain anonymous object like this:\r\n```\r\nval borderColor = if (...) BLUE else GRAY\r\nborder = object : LineBorder(...) { ... } // Use borderColor here\r\n```"", 'comment_created': datetime.datetime(2023, 7, 13, 9, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1262308437, 'comment_body': ""Let's move this class to the ui package"", 'comment_created': datetime.datetime(2023, 7, 13, 9, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1267268181, 'comment_body': ""Let's just add an empty string if we accidentally get a null. Throwing exceptions from a constructor is a very bad pattern!"", 'comment_created': datetime.datetime(2023, 7, 18, 20, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1267271272, 'comment_body': 'If `data.stackTrace` is empty we will get an exception here. It is better to use firstOrNull().', 'comment_created': datetime.datetime(2023, 7, 18, 20, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1267271877, 'comment_body': ""Let's move the companion object to the top of the class."", 'comment_created': datetime.datetime(2023, 7, 18, 20, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1267272093, 'comment_body': ""Let's name these constants with capital letters."", 'comment_created': datetime.datetime(2023, 7, 18, 20, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1267272561, 'comment_body': ""Let's name the last two constants with capital letters like CORNER_RADIUS"", 'comment_created': datetime.datetime(2023, 7, 18, 20, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1268037959, 'comment_body': ""Since we have a separate class for dispatcher drop down menu, let's add this to companion object in this class:\r\n```\r\ncompanion object {\r\n   val dispatcherSelectionMenuSize = Dimension(200, 25)\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 7, 19, 12, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1268040206, 'comment_body': 'It is a little weird to have a map with nullable keys, can we just make it Map<String, List<CoroutineInfoData>>?', 'comment_created': datetime.datetime(2023, 7, 19, 12, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1268040905, 'comment_body': 'Extra space after DispatcherDropdownMenu', 'comment_created': datetime.datetime(2023, 7, 19, 13, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1268043857, 'comment_body': 'To not visit null items we can use mapNotNull', 'comment_created': datetime.datetime(2023, 7, 19, 13, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1269146138, 'comment_body': '```\r\n        data.addAll(trace.stackFrameItems.mapNotNull { \r\n            it ?: return@mapNotNull null\r\n            renderer.render(it.location).simpleString()\r\n        })\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1269158753, 'comment_body': ""```\r\n        val dispatcherToCoroutineDataList = mutableMapOf<String, MutableList<CoroutineInfoData>>()\r\n        for (data in coroutineInfoDataList) {\r\n            data.descriptor.dispatcher?.let {\r\n                dispatcherToCoroutineDataList.getOrPut(it) { mutableListOf() }.add(data)\r\n            }\r\n        }\r\n\r\n```\r\nThis way we won't have an empty key in our map and just skip coroutines which have a dispatcher equal to null"", 'comment_created': datetime.datetime(2023, 7, 20, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1269163544, 'comment_body': 'The warning here says ""There is more than one label with such a name in this scope""', 'comment_created': datetime.datetime(2023, 7, 20, 8, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}]","[{'commit_sha': '911ef3ba2ea4afe8fe5873917bb207edee0b12ad', 'committer_username': 'raehat', 'committer_name': 'RS NANDA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 12, 8, 5, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efd2f0407181124dfa9cdaf5f83c169f94431e3a', 'committer_username': 'raehat', 'committer_name': 'RS NANDA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 12, 8, 5, 43, tzinfo=datetime.timezone.utc)}]",RS NANDA,77321971,,User,,68,,2,13
1445433364,Add library frame filter,"StackFrames can be either library frames or non library frames. Add Library Frame filtering feature in Coroutine Stacks Panel, when user clicks on the filter button, all the library frames should be removed from Coroutine Stacks.",True,14,https://api.github.com/repos/nikita-nazarov/coroutine-stacks/pulls/14,https://github.com/nikita-nazarov/coroutine-stacks/pull/14,closed,102,77,5,1,1,12,0,0,[],2023-07-22 22:13:50+00:00,2023-07-25 09:27:04+00:00,213194.0,"2 days, 11:13:14","[{'comment_id': 1271964894, 'comment_body': ""That's a nice way to store contents like this, when you have a large system, where other components need to be aware of the state of each other. But since our plugin is small, let's move this constant to CoroutineStacksPanel"", 'comment_created': datetime.datetime(2023, 7, 24, 9, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1271967285, 'comment_body': '```\r\nreturn JBScrollPane(forest).apply {\r\n   verticalScrollBar.value = verticalScrollBar.maximum\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 9, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1271967926, 'comment_body': ""Let's make `areLibraryFramesAllowed` an argument of this function."", 'comment_created': datetime.datetime(2023, 7, 24, 9, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1271979173, 'comment_body': 'Please, avoid strong type casting and use `as?` instead', 'comment_created': datetime.datetime(2023, 7, 24, 9, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1271979251, 'comment_body': ""Let's create a separate function for this:\r\n```\r\nfun CoroutineStackFrameItem.isLibraryFrame(): Boolean { ...\r\n```"", 'comment_created': datetime.datetime(2023, 7, 24, 9, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1271981560, 'comment_body': 'Now we have only one usage of the `render` function, so we can remove it and inline its body here', 'comment_created': datetime.datetime(2023, 7, 24, 9, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1272082428, 'comment_body': '```\r\nif (areLibraryFramesAllowed || !stackFrame.isLibraryFrame(debugProcess))\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 10, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1272082678, 'comment_body': ""Let's make it `stackFrame.isLibraryFrame(debugProcess)`"", 'comment_created': datetime.datetime(2023, 7, 24, 10, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1272083852, 'comment_body': '```\r\nwith(coroutineData.descriptor) { ""$name$id $state\\n"" }\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 10, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1272084866, 'comment_body': '`return !jvmStackFrameInfoProvider.isInlibraryContent`', 'comment_created': datetime.datetime(2023, 7, 24, 10, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1272424934, 'comment_body': 'You can delete this comment', 'comment_created': datetime.datetime(2023, 7, 24, 15, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1272425437, 'comment_body': 'If you are using || then also use `!` instead of `not`', 'comment_created': datetime.datetime(2023, 7, 24, 15, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}]","[{'commit_sha': '86a77a108bb0bad31222c52e819a0bea3b60436c', 'committer_username': 'raehat', 'committer_name': 'RS NANDA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 12, 8, 5, 43, tzinfo=datetime.timezone.utc)}]",RS NANDA,77321971,,User,,68,,2,13
1451162803,Add zooming capability and coroutine capture button,"Two new features are added. 
- Capability to zoom into Coroutine Stacks Panel
- A button which captures coroutine dump when clicked",True,17,https://api.github.com/repos/nikita-nazarov/coroutine-stacks/pulls/17,https://github.com/nikita-nazarov/coroutine-stacks/pull/17,closed,181,31,4,1,1,32,0,1,[],2023-07-27 00:58:42+00:00,2023-08-14 16:45:14+00:00,1611992.0,"18 days, 15:46:32","[{'comment_id': 1276012477, 'comment_body': '`private fun <E> JBList<E>.zoom(zoomLevel: Float)`', 'comment_created': datetime.datetime(2023, 7, 27, 9, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276017246, 'comment_body': 'Why is it 20 here and not initialCellHeight?', 'comment_created': datetime.datetime(2023, 7, 27, 9, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276021844, 'comment_body': ""Let's remove one blank line above and one blank line below this declaration"", 'comment_created': datetime.datetime(2023, 7, 27, 9, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276022708, 'comment_body': '`CaptureDumpButton`', 'comment_created': datetime.datetime(2023, 7, 27, 9, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276023302, 'comment_body': 'It will be fine to just add the contents of this function inside `addActionListener`', 'comment_created': datetime.datetime(2023, 7, 27, 9, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276025573, 'comment_body': ""Let's add the `// Copied from ...` comment"", 'comment_created': datetime.datetime(2023, 7, 27, 9, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276026575, 'comment_body': 'The brackets `()` here are extra', 'comment_created': datetime.datetime(2023, 7, 27, 9, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276026646, 'comment_body': 'The brackets `()` here are extra', 'comment_created': datetime.datetime(2023, 7, 27, 9, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276028750, 'comment_body': ""Let's inline the contents of this function to the constructor!"", 'comment_created': datetime.datetime(2023, 7, 27, 9, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276029026, 'comment_body': ""Let's inline the contents of this function as well"", 'comment_created': datetime.datetime(2023, 7, 27, 9, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276032313, 'comment_body': ""Let's extract all magic constants related to zooming to the companion object of CoroutineStacksPanel."", 'comment_created': datetime.datetime(2023, 7, 27, 9, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276032882, 'comment_body': ""Let's inline the contents of this function to the constructor"", 'comment_created': datetime.datetime(2023, 7, 27, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276033022, 'comment_body': ""Let's inline the contents of this function to the constructor as well"", 'comment_created': datetime.datetime(2023, 7, 27, 9, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276033180, 'comment_body': ""Let's inline the contents of this function to the constructor"", 'comment_created': datetime.datetime(2023, 7, 27, 9, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276033299, 'comment_body': ""Let's inline the contents of this function to the constructor as well"", 'comment_created': datetime.datetime(2023, 7, 27, 9, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276035744, 'comment_body': 'We can move this function out of the class body', 'comment_created': datetime.datetime(2023, 7, 27, 9, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276037798, 'comment_body': 'is `fixedCellWidth` missing? Anyway, why this piece of code should be different then the `adjustToZoomLevel` function?', 'comment_created': datetime.datetime(2023, 7, 27, 9, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276039667, 'comment_body': '`replaceContentsWithLabel`', 'comment_created': datetime.datetime(2023, 7, 27, 9, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276040687, 'comment_body': ""That's some neat Kotlin!\r\n"", 'comment_created': datetime.datetime(2023, 7, 27, 9, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276053657, 'comment_body': 'How did you come up with these numbers? Unfortunately if the internals of JBList will change some day, the code that depends on this numbers will not work correctly. Instead, we should fetch initial sizes once we build the coroutine stacks panel for the first time!', 'comment_created': datetime.datetime(2023, 7, 27, 10, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1276053988, 'comment_body': '```\r\n    get() = !isOpaque\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 10, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1290128469, 'comment_body': ""You can initialise these variables inside the `forEach` loop and you won't have to use the `!!` operator.\r\nLike:\r\n```\r\nvar averagePreferredCellHeight: Int? = null\r\nvar fontSize: Int? = null\r\n...\r\ntraces.forEach { trace ->\r\n...\r\naveragePreferredCellHeight = ...\r\nfontSize = ...\r\n...\r\n}\r\n\r\nif (averagePreferredCellHeight == null || fontSize == null) {\r\n  return\r\n}\r\n```"", 'comment_created': datetime.datetime(2023, 8, 10, 13, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1290130553, 'comment_body': ""warning: Const property name 'maximumZoomLevel' should not contain lowercase letters "", 'comment_created': datetime.datetime(2023, 8, 10, 13, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1290130769, 'comment_body': 'same warning here', 'comment_created': datetime.datetime(2023, 8, 10, 13, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1290130870, 'comment_body': 'and here', 'comment_created': datetime.datetime(2023, 8, 10, 13, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1290133569, 'comment_body': ""You don't need braces here"", 'comment_created': datetime.datetime(2023, 8, 10, 13, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1290135230, 'comment_body': ""Let's inline this variable"", 'comment_created': datetime.datetime(2023, 8, 10, 13, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1290137293, 'comment_body': '`areLibraryFramesAllowed = !areLibraryFramesAllowed`\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 13, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1290139878, 'comment_body': '```\r\n    private fun <E> JBList<E>.zoom(scaleFactor: Float) {\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 13, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1290140672, 'comment_body': ""Let's inline this function"", 'comment_created': datetime.datetime(2023, 8, 10, 13, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1291126762, 'comment_body': 'This variable is not needed', 'comment_created': datetime.datetime(2023, 8, 11, 9, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}, {'comment_id': 1291127676, 'comment_body': ""Let's delete this variable and inline its value"", 'comment_created': datetime.datetime(2023, 8, 11, 9, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nikita-nazarov', 'type': 'User'}]","[{'commit_sha': 'cf991dd9a46efab0262c3e986554c217b4dd6d43', 'committer_username': 'raehat', 'committer_name': 'RS NANDA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 12, 8, 5, 43, tzinfo=datetime.timezone.utc)}]",RS NANDA,77321971,,User,,68,,2,13
1490167852,Fix new issues,"Fix issues #18 #20 #21 #23
Refactor testing module",True,24,https://api.github.com/repos/nikita-nazarov/coroutine-stacks/pulls/24,https://github.com/nikita-nazarov/coroutine-stacks/pull/24,closed,167,93,6,1,1,0,0,1,[],2023-08-25 18:42:52+00:00,2023-09-06 11:08:16+00:00,1009524.0,"11 days, 16:25:24",[],"[{'commit_sha': '4c49baad14abd686efb691be7bec1c3c2f008c14', 'committer_username': 'raehat', 'committer_name': 'RS NANDA', 'committer_email': None, 'commit_date': datetime.datetime(2021, 1, 12, 8, 5, 43, tzinfo=datetime.timezone.utc)}]",RS NANDA,77321971,,User,,68,,2,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
646174993,coroutine-stacks,nikita-nazarov/coroutine-stacks,Kotlin,3,6,1,2,37,1,2,0,"[{'id': 1490167852, 'number': 24, 'closed': datetime.datetime(2023, 9, 6, 11, 8, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 25, 18, 42, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1009524.0, 'time_delta': '11 days, 16:25:24', 'additions': 167, 'deletions': 93, 'state': 'closed'}, {'id': 1451162803, 'number': 17, 'closed': datetime.datetime(2023, 8, 14, 16, 45, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 0, 58, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1611992.0, 'time_delta': '18 days, 15:46:32', 'additions': 181, 'deletions': 31, 'state': 'closed'}, {'id': 1445433364, 'number': 14, 'closed': datetime.datetime(2023, 7, 25, 9, 27, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 22, 22, 13, 50, tzinfo=datetime.timezone.utc), 'time_taken': 213194.0, 'time_delta': '2 days, 11:13:14', 'additions': 102, 'deletions': 77, 'state': 'closed'}, {'id': 1406791295, 'number': 9, 'closed': datetime.datetime(2023, 7, 21, 9, 41, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 25, 18, 19, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2215338.0, 'time_delta': '25 days, 15:22:18', 'additions': 552, 'deletions': 438, 'state': 'closed'}, {'id': 1377287471, 'number': 4, 'closed': datetime.datetime(2023, 6, 21, 13, 7, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 20, 3, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1530255.0, 'time_delta': '17 days, 17:04:15', 'additions': 292, 'deletions': 23, 'state': 'closed'}, {'id': 1376491129, 'number': 3, 'closed': datetime.datetime(2023, 6, 3, 0, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 0, 37, 37, tzinfo=datetime.timezone.utc), 'time_taken': 23.0, 'time_delta': '0:00:23', 'additions': 198, 'deletions': 7, 'state': 'closed'}]"
