pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
379239312,[JENKINS-49757] Add flag to avoid redundant fetch in GitSCM checkout,"## [JENKINS-49757](https://issues.jenkins-ci.org/browse/JENKINS-49757) and [JENKINS-56404](https://issues.jenkins-ci.org/browse/JENKINS-56404)

## Background

After adding a new behavior of honoring refspec on initial clone, the git-plugin faced an issue of a redundant fetch after the initial git-clone operation (which is actually a git init + git fetch) operation.
For reference: https://github.com/jenkinsci/git-plugin/blob/996a83057e4efc49eb452e80c411f4078dddd77a/src/main/java/hudson/plugins/git/GitSCM.java#L1107-L1131

Some users complained time + resources wastage in fetching large repositories with considerable history. While these issues can be solved with a shallow clone or using a reference repository, the major downside of calling the _second fetch_ in the circumstances of _first-time cloning_ a repository (if git.hasRepo()) is when the user chooses ""honor refspec on initial clone"". This would make both fetch calls have the same refspec and basically render the second fetch useless.

Also, there have been some doubts as to why does the git-plugin checkout() assume to fetch all branches in the initial cloning process. The reason is this [issue](https://github.com/jenkinsci/git-plugin/blob/996a83057e4efc49eb452e80c411f4078dddd77a/src/main/java/hudson/plugins/git/GitSCM.java#L1107-L1131). Apparently the Gerrit plugin assumes the git-plugin fetches all the branches during the initial clone and changing the behavior of git-plugin was breaking their use-case.

Hence, the option was shifted to CloneOption and users can choose ""Honor refspec on initial clone"" to save data and use a narrow refspec.

## Solution

Added a boolean flag to avoid the second git-fetch after git init + fetch step. All changes have been made in *GitSCM.java*

To confirm that no repository information is lost in avoiding the second fetch call, I have written two automated tests: 

- testAvoidRedundantFetchWithoutHonorRefSpec(): In this test case, we have not honored refspec on initial clone, that means the case:

First Fetch | Second Fetch | Safe to Skip Second Fetch?
-- | -- | --
Wide | Narrow | Yes

Since we are fetching all branches during the first clone, it would be _safe_ to avoid the second fetch call.

- testAvoidRedundantFetchWithHonorRefSpec(): In this test case, we have honored refspec on initial clone, that means the case is: 

First Fetch | Second Fetch | Safe to Skip Second Fetch?
-- | -- | --
Any | Same as first | Yes

Both refspec will be same, hence the second fetch call can be avoided.

",False,845,https://api.github.com/repos/jenkinsci/git-plugin/pulls/845,https://github.com/jenkinsci/git-plugin/pull/845,closed,135,0,2,11,9,10,1,0,[{'name': 'enhancement'}],2020-02-24 21:25:53+00:00,2020-07-02 03:40:39+00:00,11081686.0,"128 days, 6:14:46","[{'comment_id': 383726024, 'comment_body': 'Instead of using the getLogs() logic, I have taken the liberty to copy-paste the methodology used in [testCommitMessageIsPrintedToLogs()](https://github.com/jenkinsci/git-plugin/blob/23158ea1289900a4bfda8f3275eb9ff97d4346a5/src/test/java/hudson/plugins/git/GitSCMTest.java#L2722-L2738) \r\n\r\nI was able to retrieve the build logs from the freestyle project and count the number of ""git-fetch"" args in the log.', 'comment_created': datetime.datetime(2020, 2, 25, 8, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 433121884, 'comment_body': 'Beware of using `==`. Is this intentional? Or do you actually means\r\n```suggestion\r\n            if (remoteRepository.equals(repos.get(0)) && redundantFetchCheck){\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 6, 1, 9, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 433123949, 'comment_body': 'Redundant check.\r\n```suggestion\r\n        // Before the flag check, countFetches was ""2"" because git fetch was called twice\r\n        // After the fix, git fetch is called exactly once\r\n        assertThat(countFetches, is(1));\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 9, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 433125960, 'comment_body': 'do you expect the result might be SUCCESS or UNSTABLE? My expectation would be\r\n```suggestion\r\n        assertThat(build.getResult(), is(Result.SUCCESS);\r\n```\r\n\r\nAlso, notice how to use the parameter in assertThat: first parameter what you want to check and second parameter what value you expect.\r\n\r\n(it might be missing the import)', 'comment_created': datetime.datetime(2020, 6, 1, 9, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 433128155, 'comment_body': 'Ditto\r\n```suggestion\r\n        assertNotNull(childFile);\r\n        // assert that no data is lost by avoidance of second fetch\r\n        assertThat(childFile.readToString(), not(containsString(""master"")));\r\n        assertThat(""foo branch was not fetched"", childFile.readToString(), containsString(""foo""));\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 1, 9, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 433128649, 'comment_body': 'Why should it be null? I might be misunderstanding the test, but I\'d expect\r\n```suggestion\r\n        assertNotNull(childFile);\r\n        // assert that no data is lost by avoidance of second fetch\r\n        assertThat(""master branch was not fetched"", childFile.readToString(), containsString(""master""));\r\n        assertThat(""foo branch was not fetched"", childFile.readToString(), containsString(""foo""));\r\n```\r\nThis way we can be 100% sure that `childField` exists and there is no data loss. With the null check, it\'s possible that the block code under `childFile` is never executed, so you cannot be totally sure of what you\'re testing.\r\n\r\n(it might be missing the assertNotNull import, beware)', 'comment_created': datetime.datetime(2020, 6, 1, 9, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 433129267, 'comment_body': 'Ditto\r\n```suggestion\r\n        assertThat(build.getResult(), is(Result.SUCCESS);\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 9, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 433298973, 'comment_body': ""My bad, I'm comparing two strings, I should use `equals`. Thanks."", 'comment_created': datetime.datetime(2020, 6, 1, 15, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 433390442, 'comment_body': 'This is more of a descriptive statement than a check, what is meant to be shown is that after the fix, the number of fetches are reduced from ""2"" to ""1"".', 'comment_created': datetime.datetime(2020, 6, 1, 17, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 436407668, 'comment_body': ""I just checked the method returning childFile, it can never return a null value. It wanted to check for an empty file, I'll create the relevant check, thanks!"", 'comment_created': datetime.datetime(2020, 6, 7, 22, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}]","[{'commit_sha': '8d58567eb417b1c18c62198f5bfe65d7c7bb85be', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23158ea1289900a4bfda8f3275eb9ff97d4346a5', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b25935af127bc4a46a502063688d9294e7097aa', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d94f2eacc6bda300e5f440ffb58abc48e867556', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cfb5396d4d749ceb2b3a9350fa61043f416afb9', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6ac2ed29f615610f9b6e2f6a69c21324e9be011', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaded93a2f00fa0e25b89882ca16b911a577643a', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ead1ea5ec8f9f0765d83972f93229d269959d1', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ced0e00c18f7d12b4b8d6f6e47ac0e57dc726c', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995d803f9e587e101c4a228ce2ffa2a632dc7853', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae036cce9ae67126ef564b3a63f1239648f9dabd', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
424779200,Add JMH module: micro-benchmark tests for git-fetch,"## Performance micro-benchmarking with JMH on git fetch

Java Micro-benchmarking Harness is a java harness which provides a fairly easy way to run benchmarks and after its integration in the Role Strategy Plugin, it is easier to write them for Jenkins plugins.

- Creation of a test environment: Used FolderForBenchmark to create local git repositories for the lifetime of benchmark test.
- Git operations for evaluation: git fetch
- Added an addition step in JenkinsFile to enable benchmarks on Jenkins CI
",True,553,https://api.github.com/repos/jenkinsci/git-client-plugin/pulls/553,https://github.com/jenkinsci/git-client-plugin/pull/553,closed,442,0,5,5,0,1,1,0,[{'name': 'test'}],2020-05-28 22:56:28+00:00,2020-05-29 10:48:25+00:00,42717.0,11:51:57,"[{'comment_id': 432189536, 'comment_body': ""I had forgotten that Jenkinsfile changes are ignored for anyone that is not a committer to the repository.  It is a safety measure to prevent dangerous changes to the Jenkinsfile.\r\n\r\nI'm evaluating the change in my CI infrastructure at home.  Will let you know how it looks in about 45 minutes."", 'comment_created': datetime.datetime(2020, 5, 29, 0, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}]","[{'commit_sha': 'a66d58b4087847a4679aacf1d14582885c2ccdad', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99bc9ae484569ad7a69ff146705e2ae29e9b968b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebea567f8817c9c7d7093f741b5e5245bff31fce', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b93605b465da747960385042c0d70db80b50476', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f97075e9b263536b4ec0a8bd0a816e3d07e2446', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
453131031,[GSoC-2020] Git Repository Size Estimation,"## GitToolChooser

**Description**: This class aims to add the functionality of recommending a git implementation on the basis of the size of a repository which has a strong correlation to the performance of git fetch (from Performance Benchmarks).

We have two heuristics to calculate the size of a git repository:
- Using cached .git dir to estimate the size of a repository
- Providing an extension point which upon implementation can use APIs exposed by git service providers like Github, GitLab etc to fetch `size` of repo.

**How are we doing this?**
- The class can instantiate using a constructor which checks if cache exists and calculates the size if it does. Else, it checks if we have an implementation(s) for the extension point provided by the class.
- Currently, the GitToolChooser is planning to be supported by the Github branch source plugin, Gitlab branch source plugin and the Gitea branch source plugin.

**Assumptions**: 
- We believe that the implementers of the extension point have the user credentials in order to query size of a repository on the basis of its URL.
- We are instantiating `GitToolChooser` using an instance of `AbstractGitSCMSource`just as the `GitSCMTelescope` does. 
- This scope of usage of this API is not limited to the AbstractGitSCMSource, it can be used in other places provided we have the repository url.

**Architecture Diagram**
<img width=""829"" alt=""Screenshot 2020-07-29 at 1 47 41 AM"" src=""https://user-images.githubusercontent.com/31189405/88717186-c4039200-d13d-11ea-9321-98b4b7266156.png"">


## Checklist

- [x] I have read the [CONTRIBUTING](https://github.com/jenkinsci/git-plugin/blob/master/CONTRIBUTING.adoc) doc
- [ ] I have referenced the Jira issue related to my changes in one or more commit messages
- [x] I have added tests that verify my changes
- [x] Unit tests pass locally with my changes
- [x] I have added documentation as necessary
- [ ] No Javadoc warnings were introduced with my changes
- [ ] No spotbugs warnings were introduced with my changes
- [ ] Documentation in README has been updated as necessary
- [ ] Online help has been added and reviewed for any new or modified fields
- [ ] I have interactively tested my changes
- [ ] Any dependent changes have been merged and published in upstream modules (like git-client-plugin)

## Types of changes

- [ ] Dependency or infrastructure update
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Further comments

To avoid issues with the existing functionality of the plugin, we have used the exact same logic to resolve git tool before making a recommendation as is provided by `GitUtils.resolveGitTool`.",True,931,https://api.github.com/repos/jenkinsci/git-plugin/pulls/931,https://github.com/jenkinsci/git-plugin/pull/931,closed,813,32,13,60,17,93,1,0,[{'name': 'enhancement'}],2020-07-20 07:03:29+00:00,2020-08-25 02:19:58+00:00,3093389.0,"35 days, 19:16:29","[{'comment_id': 457867534, 'comment_body': '`getSizeFromAPI` does not return the **size** as one would expect from its name. \r\n\r\nNaming is definitely one of the toughest part of development :P . imo, it should be something like: `setSizeFromCache` and `setSizeFromAPI`, also it will maintain consistency among these two methods.', 'comment_created': datetime.datetime(2020, 7, 21, 6, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 457867951, 'comment_body': 'Define the scale (Bytes, KB, MB, etc.) in comment, else it can be confusing 😅 ', 'comment_created': datetime.datetime(2020, 7, 21, 6, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 457948974, 'comment_body': 'Good point, while writing the tests it has deemed to me that it might be cleaner to use a non-primitive data type instead of a primitive data type. \r\n\r\nThe API might return varying sizes, we need to take that case into account as well.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 457956100, 'comment_body': 'Thanks for pointing this out, I have changed it.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 458642618, 'comment_body': 'this is a very simple case and hence quite readable, but it\'s a good idea to start using the methods that allow you to have more readable tests:\r\n- You could use assertTrue(tool.equas(""NONE"")\r\n- You could use\r\n```suggestion\r\n        assertThat(tool, is(""NONE""));\r\n```\r\nwhich is even much clearer: you expect that tool is ""NONE"". You can even read what you expect', 'comment_created': datetime.datetime(2020, 7, 22, 8, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458645227, 'comment_body': 'That\'s an example of what I meant above: **Super-readable**. check that repoSizeExtimagor contains a String ""git""', 'comment_created': datetime.datetime(2020, 7, 22, 9, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458651458, 'comment_body': 'The name is still a bit confusing: `GitRepoSizeEstimator` but it only offers the Git Tool to use, nothing about Size', 'comment_created': datetime.datetime(2020, 7, 22, 9, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458657745, 'comment_body': 'The extension should not be available if Jenkins instance is null, so the `get()` method will do the job for you.\r\n```suggestion\r\n            return Jenkins.get().getExtensionList(RepositorySizeAPI.class);\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 9, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458658971, 'comment_body': 'what are you trying to get here? `r` is never null and all will return a non-null object. it might be empty, but not null.\r\nthen, this is always returning the first extension in the list, whatever the size of this and whatever the extensions in Jenkins.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458660358, 'comment_body': 'Just to give you more context: Any class extending RepositorySizeApi and with the `@Extension` annotation, will be loaded when Jenkins is launched (or when the plugin is installed) and it will be available.\r\n`Jenkins.get().getExtensionList(RepositorySizeAPI.class)` will look for any class that matches that criteria and returning them in a list.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458661516, 'comment_body': 'Please, add a javadoc for the constant and say the unit. Bytes? KB? Number of branch? Number of tags? That number might mean whatever', 'comment_created': datetime.datetime(2020, 7, 22, 9, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458664087, 'comment_body': 'Wondering if it should return the GitTool object. @MarkEWaite what do you think?', 'comment_created': datetime.datetime(2020, 7, 22, 9, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458669991, 'comment_body': ""That concerns me. You're mixing the Extension and the Estimator. I think you should decouple them doing something like:\r\n- using the URL there is a mechanism to detect the correct Extension\r\n- Retrieve that concrete extension\r\n- Invoke a method of the Extension retrieving the size\r\n- Store the retrieved value in the field\r\n\r\nRight now, your code:\r\n- From the Estimator it is executing a method in the Extension\r\n- From the Extension it is updating a field in the Estimator\r\nThere is a cycle, a circular dependency between the two classes"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458671679, 'comment_body': ""Not a blocker, just a matter of taste. Let's try to avoid branches in the code\r\n```suggestion\r\n        boolean useCache = false;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458672199, 'comment_body': 'Since useCache is initialized above, here we can avoid a branch\r\n```suggestion\r\n            if (client.hasGitRepo()) {\r\n                useCache = true;\r\n                sizeOfRepo = FileUtils.sizeOfDirectory(cacheDir);\r\n                sizeOfRepo = (sizeOfRepo/1000); // Conversion from Bytes to Kilo Bytes\r\n            }\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 9, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458672358, 'comment_body': 'ditto\r\n```suggestion\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 9, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458674910, 'comment_body': ""I don't mean to change the name, but offer the size data as well"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458676554, 'comment_body': 'This was concerning me too. Was not sure whether it has to be raised or not. Need separation of concern here.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 458854841, 'comment_body': 'To clarify what was commented in the meeting\r\n```suggestion\r\n        public abstract Long getSizeOfRepository(String remote);\r\n        \r\n        public abstract boolean acceptsRemote(String remote);\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 14, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458857459, 'comment_body': 'And here you have to filter to those which matches the accept method\r\n```suggestion\r\n        for (RepositorySizeAPI r: Objects.requireNonNull(RepositorySizeAPI.all().stream().filter(r -> r.acceptsRemote(repoUrl)))) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 14, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459264804, 'comment_body': ""We don't know how the implementer plugins will accept the remote/url. If there are more than one that match the url, what should we do? Take the first? return a false? My suggestion (and it's only a suggestion and I'm open to discuss:\r\n```suggestion\r\n        if (acceptedRepository.size() > 0) {\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 7, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459265695, 'comment_body': 'nit\r\n```suggestion\r\n            return 500;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459265810, 'comment_body': 'nit\r\n```suggestion\r\n            return 1000;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459266056, 'comment_body': '```suggestion\r\n    @TestExtension\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459266202, 'comment_body': '```suggestion\r\n    @TestExtension\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459266412, 'comment_body': 'My assumption was that the class should only provide the right recommendation for git implementation. To create a more coherent name, I suggest `GitToolAdvisor` or maybe something a bit less dramatic.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459266847, 'comment_body': ""Do you think we should also return size? While writing the class I couldn't imagine the benefit of providing the size of the repository."", 'comment_created': datetime.datetime(2020, 7, 23, 7, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459267487, 'comment_body': 'I understand, you and @MarkEWaite have made this clear often in PR submissions, please bear with me as I slowly grasp its importance.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459269173, 'comment_body': 'The reason for returning a `String` is this portion of code in AbstractGitSCMSource:\r\n```\r\nGitTool tool = resolveGitTool(context.gitTool(), listener);\r\n            if (tool != null) {\r\n                git.using(tool.getGitExe());\r\n            }\r\n            GitClient client = git.getClient();\r\n```\r\nWe create a git client using the `git.using(tool.getGitExe())`. If we instantiate a GitRepoSizeEstimator just before it, it can provided a `String recommendedGitExe` to `git.using()` to create the client with the optimal implementation.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459293411, 'comment_body': ""it's weird and confusing to have a `GitRepoSizeEstimator` class that is estimating something that is never returned and instead it's returning the tool to use. Something we can change in the last minute"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459294690, 'comment_body': 'Recovering the comment missing after the last commit:\r\nI was wondering if we just return the GitTool. What do you think @MarkEWaite ?', 'comment_created': datetime.datetime(2020, 7, 23, 8, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459296321, 'comment_body': 'Maybe, this filter might be done in a method of the Extension, so here we have something like\r\n```suggestion\r\n        List<RepositorySizeAPI> acceptedRepository = RepositorySizeAPI.getValids(repoUrl);\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459297396, 'comment_body': ""We cannot know how the implementer plugins will accept the URL, so we might have more than one. What should we do? Pick up the first one? Consider we cannot know what to do and return false? My suggestion (just a suggestion, I'm happy to open discussion) would be to pick the first one up\r\n```suggestion\r\n        if (acceptedRepository.size() > 0) {\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459298271, 'comment_body': ""If a variable should have a default value, you should initialized in first place, so it's clearer which value would return in such case\r\n```suggestion\r\n        implementation = determineSwitchOnSize(sizeOfRepo);\r\n        useCache = setSizeFromCache(source);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459298614, 'comment_body': 'Not needed if you initialize above\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459299512, 'comment_body': 'Second if might be not needed\r\n```suggestion\r\n        } else {\r\n            useAPI = setSizeFromAPI(source.getRemote());\r\n            if (useAPI) {\r\n                implementation = determineSwitchOnSize(sizeOfRepo);\r\n            }\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459302876, 'comment_body': 'if you initialize the implementation at the beginning, you will see that there are duplicated code, which cam be extracted to a common method, improving the maintainability of the code\r\n```suggestion\r\n    public GitRepoSizeEstimator(String remoteName) {\r\n\r\n        implementation = ""DEFAULT"";\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459303441, 'comment_body': 'Then this part of the code would be more or less like\r\n```suggestion\r\n        boolean useAPI = setSizeFromAPI(remoteName);\r\n\r\n        if (useAPI) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        }\r\n```\r\n\r\nand you probably can extract this piece of code from both constructors since they are quite similar', 'comment_created': datetime.datetime(2020, 7, 23, 8, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459306144, 'comment_body': 'what if instead 1000, you return 100000 and add another test for gitlab which should return ""jgit""? that way you would be testing all the possibilities. When writing tests, always bare in mind all the possible returned values or you run the risk that a regression in your code will be never caught', 'comment_created': datetime.datetime(2020, 7, 23, 8, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459342896, 'comment_body': 'I agree, `GitToolSuggestion`? A `GitToolSuggestion.getGitTool()` seems like a good way to tell that the developer that we wish to suggest a better approach in terms of git implementation.\r\n\r\nWhatever everyone agrees upon is fine by me.', 'comment_created': datetime.datetime(2020, 7, 23, 10, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459371167, 'comment_body': ""I'm really bad at naming methods and classes, so I will let others suggest something. for me it's fine if the class refers an actual behaviour"", 'comment_created': datetime.datetime(2020, 7, 23, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459389999, 'comment_body': 'Valid point. Currently the code chooses to avoid the whole situation by returning `false`. What if, instead of asking for a size of type long, we ask for a non-primitive custom class which encapsulates details like \r\n- size type (in KiBs, in MiBs), \r\n- from which provider (for ex: Github or GitLab)', 'comment_created': datetime.datetime(2020, 7, 23, 11, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459390510, 'comment_body': 'I have coded something like this in a different branch, I can raise a separate PR for you and others to review.', 'comment_created': datetime.datetime(2020, 7, 23, 11, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459390971, 'comment_body': ""Agreed, I'm more test cases to cover as many possible test case scenarios."", 'comment_created': datetime.datetime(2020, 7, 23, 11, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459404414, 'comment_body': 'you will still have the same question to answer: what will you return if more than one implementer extensions are marked as valid? The first one or null? Or do you will try one by one until one retrieves a valid object? those are the design question you have to try to answer', 'comment_created': datetime.datetime(2020, 7, 23, 12, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459678696, 'comment_body': 'After searching for an answer for sometime, I\'ve come up with certain ideas: \r\n- **Accept a singleton instance**: Assume that it is not possible to have two extension instances of the same type, i.e, if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it. If we find out that more than one does, we **reject all instances**. \r\n\r\nAdvantage: The extension point contract is simple at this moment, from git plugin\'s point of view, we can\'t assume to know what classes will implement it, so we ask them a simple question: Do you want to implement it? Yes or no. \r\nIf we add another rule on the contract, a method which returns the type of provider implementing the extension point, it adds a little bit of complexity.\r\n\r\nDisadvantage: We miss out on the correct instance which provides the size for our estimation.\r\n\r\n- **Add another method on the contract**: Ask for the provider\'s name, say a method like `public abstract String returnProviderName()` which returns strings like ""Github"" or ""Gitlab"" which we can then use to filter out more than one instance.', 'comment_created': datetime.datetime(2020, 7, 23, 19, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459891921, 'comment_body': 'I\'ll try to answer bit by bit, but starting from the end:\r\n\r\n> Add another method on the contract: Ask for the provider\'s name, say a method like public abstract String returnProviderName() which returns strings like ""Github"" or ""Gitlab"" which we can then use to filter out more than one instance.\r\n\r\nI don\'t think that\'s a good idea because you would need a mechanism to distinguish the ""provider"" in the git-plugin itself and as Mark stated very well, it\'s better to leave that responsibility to the implementer. See what I mean:\r\n- Let\'s suppose we add the `distinguishWhenUnclear` method.\r\n- If implementer plugins have a really good `accept` method, so your URL is only accepted by 1 plugin, then your `distinguish` method is not actually needed.\r\n- If implementer plugins have vague `accept` method, so more than one is accepting the URL, you have to distinguish between them. Then why do you need them to implement the `accept` method?\r\n\r\nIf we see the provider name is useful we can add it, but not for filtering purposes.\r\n\r\n> Accept a singleton instance: Assume that it is not possible to have two extension instances of the same type, i.e, if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it. If we find out that more than one does, we reject all instances.\r\n\r\nThat\'s a valid solution of course. We can return a singleton object or a list filter in the Estimator class. Both solutions are equally valid and will lead to the same end. What I wanted to do was to make you think is about what behaviour we want when more than one Extension objects are accepting and why. You\'ve given me the answer with:\r\n> If we find out that more than one does, we reject all instances.\r\n\r\nfor the `what`, and\r\n\r\n> Assume that it is not possible to have two extension instances of the same type, i.e, if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it\r\n\r\nfor the why. Now my opinion/suggestion\r\n_I agree with `if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it`, but just an error in a pattern can make your implementation return a false positive. We can assume that an Extension that has returned a false positive will return an error when it tries to get the size using an API that is not valid for it, so if we return the full list of Extensions, it\'s enough if we accept the first one that is able to give us a number and not an error. This way we can distinguish between implementations and the probability of getting a false number is actually low. In other words: it\'s a less aggressive approach_\r\nBut that\'s *my opinion/suggestion* and it does not mean that it makes sense or it\'s the best approach. I\'d like your thoughts about that and also I\'d like other mentors\'s opinions here, @MarkEWaite @justinharringa @omkar-dsd', 'comment_created': datetime.datetime(2020, 7, 24, 7, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459966400, 'comment_body': '> I don\'t think that\'s a good idea because you would need a mechanism to distinguish the ""provider"" in the git-plugin itself and as Mark stated very well, it\'s better to leave that responsibility to the implementer. See what I mean:\r\n\r\nUnderstood, it might only increase complexity within the git plugin which is not be necessary.\r\n\r\n@fcojfernandez That seems like a neat approach to me, assume that if there is a false positive, there is a very low chance that numerical size returned by it would be non-zero. \r\nIf I\'ve understood you correctly, if we have multiple implementations in the extension list, we check the size and only accept the non-zero size instance. \r\n\r\nThis leads me to ask another question to you, what if some plugin implements our method of `getSizeFromRepository()` and does so incorrectly? Do we expect an exception thrown from the that erroneous method? I wouldn\'t assume that because our method definition doesn\'t throw any exception.\r\nShould we expect a `size = 0` if things go wrong from the implementers side?', 'comment_created': datetime.datetime(2020, 7, 24, 10, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 460012124, 'comment_body': ""A repo might be empty, so 0 might or not be a wrong value per se, but I don't think it's a use case we should care (actually unlikely).\r\nApart from that, adding a safe check just in case any exception that happens is not properly handled by the implementer plugin is just free. It's possible that the implementer is not checking the final endpoint, for example. IMO, better safe than sorry, and if the Extension throws an exception or return 0, then you can discarded the value in both situation.\r\n\r\nregarding my comment\r\n> a safe check just in case any exception that happens is not properly handled by the implementer plugin\r\n\r\nWhen you delegate the responsibility, it's always a good idea to have a check. Keep that always in mind because even when you want the exception to be thrown, you can catch it, process it and re-throw it"", 'comment_created': datetime.datetime(2020, 7, 24, 12, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 460086978, 'comment_body': 'Yeah, you could perhaps have an abstract method which defaults to KB to use for any necessary conversions. Perhaps a different PR for something like that if we have time?', 'comment_created': datetime.datetime(2020, 7, 24, 14, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 460658497, 'comment_body': '@justinharringa Great suggestion, I have a seperate PR for this specification.', 'comment_created': datetime.datetime(2020, 7, 27, 5, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 460704280, 'comment_body': '```suggestion\r\n            useAPI = setSizeFromAPI(source.getRemote());\r\n            if (useAPI) {\r\n                implementation = determineSwitchOnSize(sizeOfRepo);\r\n            }\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 7, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 461818807, 'comment_body': ""I don't seem to understand the reason to call `setSizeFromAPI` if `useCache` is already true, wouldn't doing this change make us add a redundant call in certain cases?"", 'comment_created': datetime.datetime(2020, 7, 28, 19, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 462085027, 'comment_body': 'From my comment above\r\n```suggestion\r\n    public GitToolChooser(String remoteName) {\r\n        implementation = ""NONE"";\r\n        useAPI();\r\n        determineGitTool(implementation);\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 7, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 462089131, 'comment_body': 'will try to explain better my outdated comment, because it was so clear in my mind that probably I lack an explanation for you. Let\'s go step by step:\r\n1. `useCache` and `useAPI` are initialized to `false`\r\n1. Check `setSizeFromCache`\r\n   1. if `true`, then use `determineSwitchOnSize` and `useAPI` will be always `false`\r\n   1. If `false` then use `setSizeFromAPI` and `useAPI` is updated\r\n1. The only way that `determineSwitchOnSize` can be executed is if `useAPI` is false and `setSizeFromAPI` returns `true`, so\r\n```suggestion\r\n    public GitToolChooser(@NonNull AbstractGitSCMSource source) throws IOException, InterruptedException {\r\n        boolean useCache;\r\n        boolean useAPI = false;\r\n\r\n        implementation = determineSwitchOnSize(sizeOfRepo);\r\n        useCache = setSizeFromCache(source);\r\n\r\n        if (useCache) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        } else {\r\n            useAPI = setSizeFromAPI(source.getRemote());\r\n            if (useAPI) {\r\n                implementation = determineSwitchOnSize(sizeOfRepo);\r\n            }\r\n        }\r\n        determineGitTool(implementation);\r\n    }\r\n```\r\nAs I said on another outdated comment you can find duplicated code between the two of the constructors:\r\n```\r\n        boolean useAPI = setSizeFromAPI(remoteName);\r\n        if (useAPI) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        }\r\n``` \r\nso then:\r\n```suggestion\r\n    public GitToolChooser(@NonNull AbstractGitSCMSource source) throws IOException, InterruptedException {\r\n        implementation = ""NONE"";\r\n        if (setSizeFromCache(source)) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        } else {\r\n            useAPI()\r\n        }\r\n    }\r\n```\r\n\r\nwhere the new `useAPI()` method would be\r\n```\r\n    private useAPI() {\r\n        if (setSizeFromAPI(remoteName)) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        }\r\n    }\r\n```\r\nThis suggestion is not changing your logic, which is correct, it\'s trying to optimize the code preventing the duplicity.', 'comment_created': datetime.datetime(2020, 7, 29, 7, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 463314396, 'comment_body': '@fcojfernandez Thanks for explaining the duplication so clearly, in my mind, I am always thinking about readability of the code and in that process I added duplicate code. I have tried to fix in the subsequent commits, please review them whenever you get the time!', 'comment_created': datetime.datetime(2020, 7, 30, 22, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 467579993, 'comment_body': 'I think it would be better to define the names of Implementations as constants rather than hard coding them. Can be reused at other places too. @fcojfernandez I am not sure where it can be best placed, can you suggest?', 'comment_created': datetime.datetime(2020, 8, 9, 12, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 467581199, 'comment_body': 'I like the way each case has been described properly 👍 ', 'comment_created': datetime.datetime(2020, 8, 9, 13, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 468401735, 'comment_body': 'Great point! Because of this implementation: https://github.com/jenkinsci/git-plugin/blob/e21bf121ee2ff4129676d097c88e2205b9b4ff6f/src/main/java/hudson/plugins/git/util/GitUtils.java#L59-L83\r\n\r\nWe should bare in mind:\r\n- https://github.com/jenkinsci/git-client-plugin/blob/3a2230e6c3819d6110aebf888aa58d9cced77fab/src/main/java/org/jenkinsci/plugins/gitclient/JGitTool.java#L52-L55 is the correct constant for jgit\r\n- What about JGit with Apache? https://github.com/jenkinsci/git-client-plugin/blob/3a2230e6c3819d6110aebf888aa58d9cced77fab/src/main/java/org/jenkinsci/plugins/gitclient/JGitApacheTool.java#L41-L44\r\n- The constant ""git"" might be a problem. By default the installation name is ""Default"", but any other installation might have any name, such as ""my-git"" or ""nothing-to-do-with-this-tool"". Because of https://github.com/jenkinsci/git-plugin/blob/e21bf121ee2ff4129676d097c88e2205b9b4ff6f/src/main/java/hudson/plugins/git/util/GitUtils.java#L63-L69 then no ""git"" implementation will be found and the Default will be returned. If we change the Default name to ""other-default"", then we will get no installation. Do we care for those cases?', 'comment_created': datetime.datetime(2020, 8, 11, 8, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 469297641, 'comment_body': 'Where does this logic come from? Is that something just for this?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469298135, 'comment_body': 'Should this be typed or be an `enum`?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469299020, 'comment_body': 'Is this decoupled from `implementation`? Should it be?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469328328, 'comment_body': ""I am not able to understand this `url`. In the earlier tests `remote` was directly being used. \r\n\r\n1. How does `url` differ from `remote` when the GitToolChooser is expecting `remoteName`?\r\n2. What is this format of `url` being used? I don't see it as a proper url pattern.\r\n\r\nAm I missing something? Please help me understand this style. @rishabhBudhouliya "", 'comment_created': datetime.datetime(2020, 8, 12, 15, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 469361398, 'comment_body': 'Should this perhaps actually be a `GitTool` type? Still looking through but that seems to have the information you need.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469362621, 'comment_body': 'If you were to switch to returning a `GitTool` you could use the NullObject pattern where you have a ""null"" `GitTool` that\'s set up for this class.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469364167, 'comment_body': 'Was there a reason you left out `//`? Could perhaps make this a constant (but not a huge deal).\r\n```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469364307, 'comment_body': '```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469365135, 'comment_body': 'Interesting... will look but was wondering if `ToolProperty` is something that could demonstrate capabilities of a `GitTool`?', 'comment_created': datetime.datetime(2020, 8, 12, 15, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469365469, 'comment_body': 'Nitpicky lol\r\n```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469365715, 'comment_body': 'stop it Justin! 😆 \r\n```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469367482, 'comment_body': 'Also, do you need to do anything differently if folks are using `git@github.com` forms?', 'comment_created': datetime.datetime(2020, 8, 12, 15, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469579951, 'comment_body': 'That is a valid suggestion, however I am not sure if adding the GitTool class will over-complicate the current design or make it neater. \r\n\r\nReturning strings instead of a concrete class seems okay till we return `NONE`. Returning NONE means that we will have to add a check before feeding the value to git client initialiser.', 'comment_created': datetime.datetime(2020, 8, 12, 22, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469582515, 'comment_body': '`getCacheEntry` is a static method in `AbstractGitSCMSource`, I have removed it from this class and borrowed it directly.', 'comment_created': datetime.datetime(2020, 8, 12, 22, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469584565, 'comment_body': '@omkar-dsd Apologies, I forgot to remove these placeholder urls. I have replaced them with the appropriate remote name.\r\n\r\nFurthermore, the remote name/urls do not matter much as the validation logic written within the `TestExtension` is pretty naive, it only checks if the remote url contains the word ""github"".', 'comment_created': datetime.datetime(2020, 8, 12, 22, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469585382, 'comment_body': '@justinharringa Apologies, I mistakenly left out these placeholder urls, I have replaced them with the appropriate remote name, however, the remote name(urls) do not significantly test anything as the validation logic written for the extension point within the test class is naive, it only checks the presence of the word ""github""', 'comment_created': datetime.datetime(2020, 8, 12, 22, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469585716, 'comment_body': ""Will have to look at how ToolProperty is used, I haven't checked that either. Thanks for raising this concern!"", 'comment_created': datetime.datetime(2020, 8, 12, 22, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469585865, 'comment_body': '@justinharringa haha, sorry for wasting your time on my mistakes!', 'comment_created': datetime.datetime(2020, 8, 12, 22, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469586618, 'comment_body': ""Great question, I didn't include GitTool because of the fear of adding more complexity, keeping a path of git executable as a string seems to work fine so far but obviously we have some issues with it and I need to test using GitTool class as an option."", 'comment_created': datetime.datetime(2020, 8, 12, 22, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469677674, 'comment_body': 'No time wasted my friend!', 'comment_created': datetime.datetime(2020, 8, 13, 3, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469677800, 'comment_body': 'May not bear any fruit. Just a thought 😃', 'comment_created': datetime.datetime(2020, 8, 13, 3, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469678052, 'comment_body': ""Don't you have to check regardless?"", 'comment_created': datetime.datetime(2020, 8, 13, 3, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 470182231, 'comment_body': ""Well functionally, we are not affected by it. I maybe wrong but I don't seem to recall if we have discussed the possibility of using a GitTool object instead of a String object as the returned object."", 'comment_created': datetime.datetime(2020, 8, 13, 19, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 470375203, 'comment_body': 'Already has a higher value on the master branch.  Should merge the master branch to get the latest values.\r\n```suggestion\r\n    <version>4.6</version>\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470375659, 'comment_body': 'Trivial additional text to silence javadoc warnings\r\n```suggestion\r\n     * @throws IOException on error\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470375772, 'comment_body': '```suggestion\r\n     * @throws InterruptedException when interrupted\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470376445, 'comment_body': ""```suggestion\r\n     * @param remoteName the repository url\r\n     * @param projectContext the context where repository size is being estimated\r\n     * @param credentialsId credential used to access the repository or null if no credential is required\r\n     * @param gitExe name of the git tool ('git', 'jgit', 'jgitapache') to be used as the default tool\r\n```"", 'comment_created': datetime.datetime(2020, 8, 14, 2, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470379141, 'comment_body': 'Since the test has an option to be called without credentials, shouldn\'t the test without credentials skip passing credentials?\r\n```suggestion\r\n        WorkflowJob p = jenkins.jenkins.createProject(WorkflowJob.class, ""p"");\r\n        String creds = noCredentials ? """" : ""credentialsId: \'github\', "";\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470379676, 'comment_body': 'Use the credentials that were conditionally defined earlier.\r\n```suggestion\r\n                        + ""      userRemoteConfigs: [["" + creds + ""url: $/"" + sampleRepo + ""/$]]]\\n""\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 471234977, 'comment_body': ""Thanks for noticing, I've done it."", 'comment_created': datetime.datetime(2020, 8, 17, 5, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 471238838, 'comment_body': ""Since these credentials are used to validate a REST connection from the extension points and the `TestExtension` extensions do not perform an actual validation, I didn't add this. But rightly pointed out, this is should be added. \r\n\r\nI was wondering if I should improve the implemented extension tests with at least adding a scan on passed credentials to simulate that validation part of validating a passed down remote url. "", 'comment_created': datetime.datetime(2020, 8, 17, 5, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 475839821, 'comment_body': 'Prefer to retain sentence per line formatting in the README file so that reviews can be sentence oriented.\r\n```suggestion\r\n  If checked, the plugin will disable a feature which recommends a git implementation on the basis of the size of a repository.\r\n  This switch may be used in case of a bug in the performance improvement feature.\r\n  If you enable this setting, please report a git plugin issue that describes why you needed to enable it.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 475840143, 'comment_body': 'Needs to require the git client plugin version that fixes the null pointer exception in `UnsupportedCommand`.\r\n```suggestion\r\n      <version>3.4.2</version>\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}]","[{'commit_sha': 'f477da8a05e025c37259e70b974842522049026f', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e217116acba96637dde6e9a59bf7467387418b13', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a879a881d8d7eb8e34dafac2c8cd0f38eed4ae4', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008a126dd79ef1f4529ad7806edf4d08c342cabf', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a82f0bc049d4d3c3290aa6b55b001f3725f8ed', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14548cf2774d21853e889f245cbc7863de067b98', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '766d5f024188a5200f6cbaa13b611defd27d29af', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fbdf85cbb98a46594ead14b4d6d09584102cc6e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5703a0c576d3879dd3c22307c4c886846b292ae9', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58ca8e79cfdf92b436af5e7419b9d9f77b6f1311', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2caebec18c48c2153f154c3022a8ea1204a351', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d4433d399f73328a2b8f1acd5add3650219755', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c91f2114597b819c7e164a0bcec2f75d792926bf', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3747e65a243cea06d012e1d2f8328e293069dc7a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90aa2c5be58f4f504657dcf85312c2abc2f1c54b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00c7c335e9fe07b5f42506d9fd7c8e730629f0e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7e25dd45364b8b02b5e854021c0a81e13258f11', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d6d5ff9ca92dc6579fac53b5d906500497820a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af7628656c71c6bdc0e078288945901b167b2a1b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6b2d581167fa68b745b6244e14fc56e49e1ea4b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab924c00a0b268111a4d6fcec780e512f4cf0e2e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05abccc210d124e2568b7da36b6e8409c532da04', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d25b4ff832e65983d09b54bc6e991f3bc28b9ec', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7408df2f6ae7af1a2dff2d5299e07a33dc8fd5d7', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2fc5838f69a9eae1687c208bb9d37276d46f917', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dfacf73ea73f94edbedd83fc09336a03ac15659', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b26e1b0f981287bbb538338bf9169be7498d9198', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9de6cb445d5af3a98246fdd3e56fb4d408e416', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97d6bf56bafff1b0c558929f073b6afe0158ed63', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5506dbf8241dacacfa57bf6d52efd391bf840c02', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b14791c7109ebe411d4b3c7a7fe52a0c932af09', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27afd3d0e51924f5034f541bd1ec0a8223e96bfd', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f74c4919c4dee9d81b6a06918d3e91693161520', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69bac3c38a31e9d13d7e5c9ca694fee6f0a60de1', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b12cb92592ca4296939012c60b0d3d4a5880cd', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb4adc0a75badb05b88a2227754133ed8c1827e2', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c79f6bc278d2ba4630eece2456965be1cbe82a2', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9cfcb27e1df8f4b547b60ca03af5a1b9ae0c0c8', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2622eef52e655ad46c92b2e336f853061b3422', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '589ce146dc335ff3bc6c1da651243063923fc383', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f83cffa6b9b9b8344f71faa1dcb69f862ed1fe47', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3484e78cf29ef851a56d77918978498431a21732', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b26071d8560c40050f205ad9bb2c84b5556af7a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b2cb16edd8a7370f7c12f127cbf6be23431030', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8926adc1e676813a61b9905ad6dd543f5e7a2d', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71dba8e3c93fcb62dcd1a518d341f070e20fa880', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2060ad6e23bb14fd6035c843b6390b92cccba5', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '119c84cce323bccb75e0eb134526d501ee12b5c4', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '990b7b9381a7c27fd3079a32bd2dcf69f285f043', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd680ec3151422dfd9dcc8429b2a4d79dd1ef8bb9', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa286e0417dc75f7f4fd4293dc687f6f31806a8', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55d3cb3e05cec15f48c6d4d24f8a05401fcb986', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f9245cc24f00c01f1411cc0ff6b7f1854ad2a9c', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5157fa5f46f991861bb438ed8bafd06afa41ec75', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e679e7543bbf73b56826e9341090d96cba0d375', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e67a6a6732fee18016e94097c4a694e68d56bc', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd057d23b4b423cdc8d2bbbdc2eff3cabb3b1c6b5', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5bff959985f5990eb54ae20338ffd6cb55bbe31', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be916821bf02b8df70ec4984a8bb89dd5ae51e88', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612f55428b7eb9b1ccffe0e96bc3a8b16b28f265', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
387966504,[GSoC-2020] Add JMH module: micro-benchmark tests for git-fetch,"### Micro-benchmarking strategy with JMH on git fetch

**_This pull request is an addition to the submitted [proposal](https://docs.google.com/document/d/1vy9tkFbhl5KX7QcjH3QbzFzbKEONw6gaLZSmNXgB06Y/edit?usp=sharing), section 3.1.3) My Benchmarking Strategy with JMH on git fetch_**

Java Micro-benchmarking Harness is a java harness which provides a fairly easy way to run benchmarks and after its integration in the [Role Strategy Plugin](https://github.com/jenkinsci/role-strategy-plugin), it is easier to write them for Jenkins plugins.

1. Creation of a test environment: Used FolderForBenchmark to create local git repositories for the lifetime of benchmark test.
2. Git operations for evaluation: git fetch
3. Results: 

**Results from the GitClientFetchVanillaBenchmark**

<img width=""632"" alt=""Screenshot 2020-03-14 at 1 55 11 AM"" src=""https://user-images.githubusercontent.com/31189405/76656997-d918c380-6596-11ea-80c7-c16bc4b245ba.png"">

**Results from the GitClientFetchBenchmark**

<img width=""634"" alt=""Screenshot 2020-03-14 at 1 56 02 AM"" src=""https://user-images.githubusercontent.com/31189405/76657047-f77ebf00-6596-11ea-9a42-4a6a5da41cea.png"">

### Observation

1. From vanilla benchmark

repo size (MiB) | git (ms/op) | jgit (ms/op) | diff in perf (ms)|
| :--- | :---         |     :---:      |          ---: |
| 0.034 | 214.55   | 972.12     |  +**757.57**   |
| 4.58 | 1341.60     | 2410.22       | +**1068.62**     |
| 93.64 | 10,313.57    | 24,213.84   | +**13,900.27**    |
| 324.26 | 97,149.34    | 290,453.4  | +**193,304.06**    |

2. From JMH benchmark (GitClientFetchBenchmark)

repo size (MiB) | git (ms/op) | jgit (ms/op) | diff in perf (ms)|
| :--- | :---         |     :---:      |          ---: |
| 0.034 | 95   | 5    |  -**90**   |
| 4.58 | 89    | 8   | -**81**     |
| 93.64 | 164   | 12,656   | +**12,492**    |
| 324.26 | 36,826  | 107,203 | +**70,377**    | 

From both of these tables, it can be said that: 
- The JMH framework is supposed to *isolate* the benchmark tests and provide reduced execution time than the vanilla benchmark. This behavior is confirmed with our results.
- From vanilla benchmark tests, it appears that **git** performs better in all cases than **jgit**. 
- JMH benchmark also shows a similar trend, but with two clear differences: 
      1. It appears that ""JGit"" is performing better than ""git"" for two cases, this seems suspicious, and we 
          have tested this further in the next table 
      2. The performance differences are lower in magnitude (as compared to the vanilla test)

The same JMH benchmark was performed with a different benchmark mode, called the **Single Shot Mode** which involves running a benchmark test without warming up the JVM (a cold start). 

<img width=""365"" alt=""Screenshot 2020-03-19 at 5 40 12 PM"" src=""https://user-images.githubusercontent.com/31189405/77066178-b2301680-6a08-11ea-9734-f50464734bd9.png"">

Results from this chart confirm my suspicion, ""jgit"" performs better than ""git"" **only** in a sufficiently warmed up JVM under the condition that the repository size is **< 5 MiB**.   

All of this information is presented in the proposal as well.",False,521,https://api.github.com/repos/jenkinsci/git-client-plugin/pulls/521,https://github.com/jenkinsci/git-client-plugin/pull/521,closed,698,13,7,14,2,0,1,0,[{'name': 'test'}],2020-03-13 20:29:16+00:00,2020-09-02 12:59:02+00:00,14920186.0,"172 days, 16:29:46",[],"[{'commit_sha': 'b79e6b58568d92a03d11126c1203dd4e6bbaa59c', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad5d8a85e957b3cf7f1a2cbfc545da1b2c0eff00', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfee4055c5b49b9d36cc84bfe4343e8388c13398', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f35bb282ae859b091025494340c2cbb273e7caa', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '021301e701b4732bc53d13b8385a743fa1d5b85d', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ef91857d583a9385a27e89801dd61a0744e56d', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7308fd3dbe8a6d82e8a19e53c88143c807d42efd', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46606c1b7bb07b7a6c1db64635735a867989dbe6', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372cf4393d535ead6fd5c2d1d2468fa2764e7588', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20138b407415c17b799bec49d94cca2ec2fd84b8', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00d6d87241da1daea2bf552705fd70f449229be4', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '554b42e38b8b889d965dbc2a59d21e98bd5c4306', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271dcc555a55965ea836b766ce63872e7b838d10', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e36a47ee7b6eb66ea5136e22f24a2696db1b532', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
424779200,Add JMH module: micro-benchmark tests for git-fetch,"## Performance micro-benchmarking with JMH on git fetch

Java Micro-benchmarking Harness is a java harness which provides a fairly easy way to run benchmarks and after its integration in the Role Strategy Plugin, it is easier to write them for Jenkins plugins.

- Creation of a test environment: Used FolderForBenchmark to create local git repositories for the lifetime of benchmark test.
- Git operations for evaluation: git fetch
- Added an addition step in JenkinsFile to enable benchmarks on Jenkins CI
",True,553,https://api.github.com/repos/jenkinsci/git-client-plugin/pulls/553,https://github.com/jenkinsci/git-client-plugin/pull/553,closed,442,0,5,5,0,1,1,0,[{'name': 'test'}],2020-05-28 22:56:28+00:00,2020-05-29 10:48:25+00:00,42717.0,11:51:57,"[{'comment_id': 432189536, 'comment_body': ""I had forgotten that Jenkinsfile changes are ignored for anyone that is not a committer to the repository.  It is a safety measure to prevent dangerous changes to the Jenkinsfile.\r\n\r\nI'm evaluating the change in my CI infrastructure at home.  Will let you know how it looks in about 45 minutes."", 'comment_created': datetime.datetime(2020, 5, 29, 0, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}]","[{'commit_sha': 'a66d58b4087847a4679aacf1d14582885c2ccdad', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99bc9ae484569ad7a69ff146705e2ae29e9b968b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebea567f8817c9c7d7093f741b5e5245bff31fce', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b93605b465da747960385042c0d70db80b50476', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f97075e9b263536b4ec0a8bd0a816e3d07e2446', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
426862434,Fix abnormally long duration of git fetch benchmark,"The static state class provided by JMH supplements the overhead costs of running a benchmark which are not added in the benchmarking process.

Earlier, the scope of setup() and teardown() methods was set to `Level.Iteration` which means that for each invocation of a benchmark, we create a git client, clone the upstream repository and then test git fetch. This is _certainly_ not ideal. The cost of running a benchmark becomes too high as we are cloning each repository using network for each iteration of a benchmark (5 times is default by JMH) x 2 (fork = 2, all benchmarks are run twice in a separate JVM). 

Now, the state class has been divided into two parts: 

1) ClientState: This static state class provides a git client with a fresh initialized local repository. To keep this local repository clean for each invocation of git fetch benchmark, we have setup its scope to `Level.Iteration`. 

2) CloneRepoState: This static class provides the local copy of a cloned upstream repository. The setup and teardown methods for this class only run once during the execution of a benchmark class. This makes sure that we are not creating a local copy with each benchmark iteration. 

## This change has reduced the duration time of git fetch benchmark to 02:12:36 on my linux instance.

",True,556,https://api.github.com/repos/jenkinsci/git-client-plugin/pulls/556,https://github.com/jenkinsci/git-client-plugin/pull/556,closed,63,45,3,3,0,1,1,0,[{'name': 'test'}],2020-06-02 22:30:22+00:00,2020-06-05 12:52:47+00:00,224545.0,"2 days, 14:22:25","[{'comment_id': 435900456, 'comment_body': 'Since the file is no longer a json file, it should not be named with the `json` suffix.\r\n```suggestion\r\n                .output(""jmh-report.txt"");\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 12, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}]","[{'commit_sha': '1055e93418fe9ed719b808866b5ea9c1eeaf1a00', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c95bd0cbcaddbe090e71eff1020862018c5c872b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c865366750cc5030d7a8737c419b80fc130a1c34', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
432341379,[JENKINS-49757] Remove redundant fetch,"## [Pull Request-845](https://github.com/jenkinsci/git-plugin/pull/845)

The concern of removing the second fetch call is a possible repository data loss or
misconfiguration in terms of the extra behaviors applied during checkout.

If the second fetch call is ignored, CleanBeforeCheckout option will also be ignored
as it doesn't implement the decorateCloneCommand which is used by the git fetch call.
To ensure that it is not ignored, decorateCloneCommand has been implemented for this
particular extension. The unit test GitSCMTest#testCleanBeforeCheckout doesn't fail
after the removal of second fetch call now.

## Checklist

- [x] I have read the [CONTRIBUTING](https://github.com/jenkinsci/git-plugin/blob/master/CONTRIBUTING.adoc) doc
- [x] I have referenced the Jira issue related to my changes in one or more commit messages
- [x] I have added tests that verify my changes
- [x] Unit tests pass locally with my changes
- [x] I have added documentation as necessary
- [x] No Javadoc warnings were introduced with my changes
- [x] No spotbugs warnings were introduced with my changes
- [x] I have interactively tested my changes
- [x] Any dependent changes have been merged and published in upstream modules (like git-client-plugin)

## Types of changes

- [x] Breaking change (fix or feature that would cause existing functionality to not work as expected)
",True,904,https://api.github.com/repos/jenkinsci/git-plugin/pulls/904,https://github.com/jenkinsci/git-plugin/pull/904,closed,272,25,3,36,17,16,1,0,[{'name': 'enhancement'}],2020-06-10 09:52:02+00:00,2020-07-02 03:41:21+00:00,1878559.0,"21 days, 17:49:19","[{'comment_id': 444817110, 'comment_body': ""If only one of the elements does not contain `refs/heads` then you are marking that is not a defaultRefspec. Could you explain what is your intention here when there is more than one element? Sorry but it's a bit unclear for me"", 'comment_created': datetime.datetime(2020, 6, 24, 11, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 444817465, 'comment_body': 'For clarity and consistency with other foreach loops\r\n```suggestion\r\n            for (RefSpec ref : initialFetchRefSpecs) {\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 11, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 444818639, 'comment_body': 'Not used\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 11, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 444818741, 'comment_body': 'Not used\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 11, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 444840036, 'comment_body': 'If honor refspec for initial clone is disabled, the first clone is going to fetch all the branches and references related to them. All of those refspecs contain ""refs/heads/xx"" in the <src>:<dst> format of refspec.\r\n\r\nMy assumption is that the given refspec contains """"refs/heads"" this pattern, there is no need to call the second fetch in any case. \r\n\r\nIn the case of a narrow refspec which contains any references other than of branches, we will allow the second fetch call to take place, i.e, we will not avoid the redundant fetch call. \r\nFor an example, if honorRefSpec == false and refspec = `""+refs/heads/master:refs/remotes/origin/master +refs/pull/553/head:refs/remotes/origin/pull/553""`, we can safely assume that this is not the default refspec because we have a ""refs/pull"" here. \r\nIn the case of finding multiple refspecs, if any refspec is other than the default format pattern, the code assumes that it is worth fetching with the second fetch call because it may have been missed by the first/initial clone.', 'comment_created': datetime.datetime(2020, 6, 24, 11, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 444872168, 'comment_body': 'Thanks @fcojfernandez !', 'comment_created': datetime.datetime(2020, 6, 24, 12, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 446017343, 'comment_body': ""if `initialFetchRefSpecs` is null, then you're removing the second fetch. At this moment, I cannot think about a situation when it will be null, but ..."", 'comment_created': datetime.datetime(2020, 6, 26, 7, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 446021930, 'comment_body': 'This if clause didn\'t help me to see clearer what you meant. While having a ""!"" in an `if` clause is perfectly fine, the ""!"" in the `if-else` might cause confusion. I would have expected \r\n```\r\nif something is true\r\n   sentence1\r\nelse\r\n   sentence2\r\n```\r\nwhile this piece of code is\r\n```\r\nif something is not false\r\n   sentence2\r\nelse\r\n   sentence1\r\n```\r\nMy personal preference is to have the first approach in terms of readability. But it\'s just a matter of personal taste, so take this advice as it is, just an advice.', 'comment_created': datetime.datetime(2020, 6, 26, 7, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 446601143, 'comment_body': 'I added a test that passed in a null refspec but the UserRemoteConfig constructor converts nulls to empty strings.  I think that is unreachable code due to the UserRemoteConfig use of `fixEmpty()`.', 'comment_created': datetime.datetime(2020, 6, 28, 5, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 446640805, 'comment_body': ""While writing the code, I was thinking how would I proceed with writing a unit test for the same. The solution I had in my mind was to actually clone a remote the git client repository and fetch a pull request reference. \r\n\r\nI didn't imagine to update the reference to point to a pull request. Thanks for showing me!"", 'comment_created': datetime.datetime(2020, 6, 28, 11, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 446642652, 'comment_body': 'According to my assumptions, the need to add the null check was to check for empty refspecs, as Mark as correctly pointed out, the `fixEmpty()` converts any empty refspec into a null refspec.\r\n\r\nIf the UserRemoteConfig was not fixing empty refspecs, the logic presented by me would gladly pass `empty` refspecs as a narrow refspec and will not avoid the second fetch. But since it is there, it should not be a concern for us.', 'comment_created': datetime.datetime(2020, 6, 28, 12, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 446645667, 'comment_body': 'This is a great suggestion @fcojfernandez. I have added this in c2e097d.\r\n', 'comment_created': datetime.datetime(2020, 6, 28, 12, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 446647337, 'comment_body': 'I fail to understand, why would need a shallow clone to improve coverage when we already have a full normal clone?', 'comment_created': datetime.datetime(2020, 6, 28, 12, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 446672537, 'comment_body': 'Good question.  One [branch](https://github.com/jenkinsci/git-plugin/blob/c2e097dac1aa4128b0fdc77e79afe321dba76d35/src/main/java/hudson/plugins/git/GitSCM.java#L1175) was not being reached when a cloneOption extension is detected but does not have honor refspec enabled.', 'comment_created': datetime.datetime(2020, 6, 28, 16, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 446672703, 'comment_body': ""👍 I hadn't discovered the technique until just recently myself.  Plenty to learn for all of us."", 'comment_created': datetime.datetime(2020, 6, 28, 16, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 446773265, 'comment_body': ""Okay. I didn't consider other CloneOptions. If honor refspec is false, with avoiding the second fetch, we will also avoid other clone options like Shallow Clone, Disable tags, Reference a repo and timeout. \r\n\r\nThe good news is that the first fetch is capable to execute all of these options if we miss the second fetch. It should not make any difference to the user's expectation on git repository information after the checkout."", 'comment_created': datetime.datetime(2020, 6, 29, 5, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}]","[{'commit_sha': '8d58567eb417b1c18c62198f5bfe65d7c7bb85be', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23158ea1289900a4bfda8f3275eb9ff97d4346a5', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b25935af127bc4a46a502063688d9294e7097aa', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cf858e24222b703ffec8497627ac114bd85fc38', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11a87d4a9255d220ef4e43c8e3c8ffbc0699d437', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d94f2eacc6bda300e5f440ffb58abc48e867556', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cfb5396d4d749ceb2b3a9350fa61043f416afb9', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6ac2ed29f615610f9b6e2f6a69c21324e9be011', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaded93a2f00fa0e25b89882ca16b911a577643a', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ead1ea5ec8f9f0765d83972f93229d269959d1', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ced0e00c18f7d12b4b8d6f6e47ac0e57dc726c', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995d803f9e587e101c4a228ce2ffa2a632dc7853', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae036cce9ae67126ef564b3a63f1239648f9dabd', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82ffbbf2ca4438ce0cabe8b046e75b2f15b07fa3', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bc0059142a1c227b5bee9b9ddbdc623fc0f0df1', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57ab0d010eb309232114840ca7daa47cfc3f4975', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05daa5ef3b06dca73901595d0a759e4f5925abe0', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a1e226bdc6d310540098789b675abf09395ded', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e3e7dd3056ea51cee3e03f30212c257a437746', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb1b7801a6fbb698c7468397d106c3d975a6943', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4c47cb77cae845e228c57738dfab6b700c0b925', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8d1bca5eabfb59ebe1dd4d97f4adcc51ec2269a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b54faebac9bb53f470b1eaff3f920e72fd3fcef7', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79cf0105f073597037fde95b480969c5951134ab', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a38f1e21c22da6db04cb39f3afcbd39269497a00', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be3697c4aaa40d76854023107d701d3686fab9b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15e2f52b8c1ce828ba7abf521c922337af86fb3d', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795701753c787a5c05a089a0093af42379422f9a', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2fecc8aa934adc4c73bb760b9820e552b545119', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7685db9f483e70e3c88b09de20e8ba2caba0f25', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '162325309cbee1abbe4fd87ef725b17de3ee9b60', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09726f13532666a34eec8d87083c0f0bfb6febde', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7b7ec63ed5d8749cf45fce10927bb93f7fe65a0', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7b77e642d2d4e7522b34f59d1c153a490c9fec0', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534818aa6a3b9b9f7753e093c0c7297e149c1be0', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2e097dac1aa4128b0fdc77e79afe321dba76d35', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
443733940,"Add an ""opt-out"" global switch to retain second fetch","## [PR-904](https://github.com/jenkinsci/git-plugin/pull/904) Fix redundant fetch

With the latest fix on redundant fetch issue [JENKINS-49757], the
second fetch in the checkout step is avoided for cases where the
second fetch is not adding any new repository information to the
existing git repository.

Enabling this switch will allow the user to preserve the second
fetch and remedy any compatibility issues.

## Checklist

_Put an `x` in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. This is simply a reminder of what we are going to look for before merging your code. If a checkbox or line does not apply to this pull request, delete it. We prefer all checkboxes to be checked before a pull request is merged_

- [x] I have read the [CONTRIBUTING](https://github.com/jenkinsci/git-plugin/blob/master/CONTRIBUTING.adoc) doc
- [x] I have referenced the Jira issue related to my changes in one or more commit messages
- [x] I have added tests that verify my changes
- [x] Unit tests pass locally with my changes
- [x] I have added documentation as necessary
- [x] No Javadoc warnings were introduced with my changes
- [x] No spotbugs warnings were introduced with my changes
- [x] I have interactively tested my changes

## Types of changes

- [x] New feature (non-breaking change which adds functionality)
",True,927,https://api.github.com/repos/jenkinsci/git-plugin/pulls/927,https://github.com/jenkinsci/git-plugin/pull/927,closed,67,4,4,11,2,6,1,0,[{'name': 'enhancement'}],2020-07-02 20:44:39+00:00,2020-07-04 14:43:48+00:00,151149.0,"1 day, 17:59:09","[{'comment_id': 449264743, 'comment_body': 'This branch was originally created to add performance improvement global switch. This switch has been used to add ""opt out"" feature for retaining second fetch during the checkout step.', 'comment_created': datetime.datetime(2020, 7, 2, 21, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 449264950, 'comment_body': 'This has been changed to `allowSecondFetch` in the subsequent commits.', 'comment_created': datetime.datetime(2020, 7, 2, 21, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 449317725, 'comment_body': '```suggestion\r\n  If checked the checkout step will not avoid the second fetch.\r\n  Git plugin versions prior to git plugin 4.4 would perform two fetch operations for each repository checkout.\r\n  Git plugin 4.4 removes the redundant fetch operation.\r\n  Enabling this option will restore the redundant fetch operation.\r\n  This setting is only needed if there is a bug in the redundant fetch removal logic.\r\n  If you enable this setting, please report a git plugin issue that describes why you needed to enable it.\r\n```', 'comment_created': datetime.datetime(2020, 7, 3, 0, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 449318247, 'comment_body': 'We have a large number of ""hidden"" pull requests that risk being much more difficult to evaluate if we make changes that are pure white space changes.\r\n\r\nWould you be willing to undo this whitespace change?', 'comment_created': datetime.datetime(2020, 7, 3, 0, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 449318858, 'comment_body': 'There are methods in Jenkins that use introspection to identify the getters and setters.  The asymmetry between the name of the getter and the setter in this case will probably confuse anything that uses introspection (like configuration as code and JobDSL)\r\n\r\nSince the UI uses `allowSecondFetch`, I think you might consider using `allowSecondFetch` to replace `redundantFetchAllowed`.\r\n\r\n```suggestion\r\n        public void setRedundantFetchAllowed(boolean allowSecondFetch) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 3, 0, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 449398444, 'comment_body': 'Apologies for adding it, I am not sure how this happened.', 'comment_created': datetime.datetime(2020, 7, 3, 6, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}]","[{'commit_sha': 'f4fe7b09e262bef6ac943db9bac34954eb4dd1d3', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2259d9a4dde3fd910373bcf158b4a7a9f7a5cf16', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2168cd4daee8753224a89090f0fea32219d73b5', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3912a4a5ae710ebb10f80abfccf8c116dc38fed', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '533fd5d33cdf45c2df4b7b9ef54372de7a1eac4c', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a01665ec0d9c98dc5a0490a741c450b2e1d7010b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cbd0e0dc3059c9ea7ca881698d6a641ceb9a8b2', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10adb04e1165cc247c2f420a2388c29a6d2f37d4', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed6bbb53729b670a489bb42b265264365e17341c', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e06c68346ae3ec93f0b34077cc8c8edd6862c9af', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63c4ebd0ee6b37e3cb56dd400ecabc99d98a11e9', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
453131031,[GSoC-2020] Git Repository Size Estimation,"## GitToolChooser

**Description**: This class aims to add the functionality of recommending a git implementation on the basis of the size of a repository which has a strong correlation to the performance of git fetch (from Performance Benchmarks).

We have two heuristics to calculate the size of a git repository:
- Using cached .git dir to estimate the size of a repository
- Providing an extension point which upon implementation can use APIs exposed by git service providers like Github, GitLab etc to fetch `size` of repo.

**How are we doing this?**
- The class can instantiate using a constructor which checks if cache exists and calculates the size if it does. Else, it checks if we have an implementation(s) for the extension point provided by the class.
- Currently, the GitToolChooser is planning to be supported by the Github branch source plugin, Gitlab branch source plugin and the Gitea branch source plugin.

**Assumptions**: 
- We believe that the implementers of the extension point have the user credentials in order to query size of a repository on the basis of its URL.
- We are instantiating `GitToolChooser` using an instance of `AbstractGitSCMSource`just as the `GitSCMTelescope` does. 
- This scope of usage of this API is not limited to the AbstractGitSCMSource, it can be used in other places provided we have the repository url.

**Architecture Diagram**
<img width=""829"" alt=""Screenshot 2020-07-29 at 1 47 41 AM"" src=""https://user-images.githubusercontent.com/31189405/88717186-c4039200-d13d-11ea-9321-98b4b7266156.png"">


## Checklist

- [x] I have read the [CONTRIBUTING](https://github.com/jenkinsci/git-plugin/blob/master/CONTRIBUTING.adoc) doc
- [ ] I have referenced the Jira issue related to my changes in one or more commit messages
- [x] I have added tests that verify my changes
- [x] Unit tests pass locally with my changes
- [x] I have added documentation as necessary
- [ ] No Javadoc warnings were introduced with my changes
- [ ] No spotbugs warnings were introduced with my changes
- [ ] Documentation in README has been updated as necessary
- [ ] Online help has been added and reviewed for any new or modified fields
- [ ] I have interactively tested my changes
- [ ] Any dependent changes have been merged and published in upstream modules (like git-client-plugin)

## Types of changes

- [ ] Dependency or infrastructure update
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Further comments

To avoid issues with the existing functionality of the plugin, we have used the exact same logic to resolve git tool before making a recommendation as is provided by `GitUtils.resolveGitTool`.",True,931,https://api.github.com/repos/jenkinsci/git-plugin/pulls/931,https://github.com/jenkinsci/git-plugin/pull/931,closed,813,32,13,60,17,93,1,0,[{'name': 'enhancement'}],2020-07-20 07:03:29+00:00,2020-08-25 02:19:58+00:00,3093389.0,"35 days, 19:16:29","[{'comment_id': 457867534, 'comment_body': '`getSizeFromAPI` does not return the **size** as one would expect from its name. \r\n\r\nNaming is definitely one of the toughest part of development :P . imo, it should be something like: `setSizeFromCache` and `setSizeFromAPI`, also it will maintain consistency among these two methods.', 'comment_created': datetime.datetime(2020, 7, 21, 6, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 457867951, 'comment_body': 'Define the scale (Bytes, KB, MB, etc.) in comment, else it can be confusing 😅 ', 'comment_created': datetime.datetime(2020, 7, 21, 6, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 457948974, 'comment_body': 'Good point, while writing the tests it has deemed to me that it might be cleaner to use a non-primitive data type instead of a primitive data type. \r\n\r\nThe API might return varying sizes, we need to take that case into account as well.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 457956100, 'comment_body': 'Thanks for pointing this out, I have changed it.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 458642618, 'comment_body': 'this is a very simple case and hence quite readable, but it\'s a good idea to start using the methods that allow you to have more readable tests:\r\n- You could use assertTrue(tool.equas(""NONE"")\r\n- You could use\r\n```suggestion\r\n        assertThat(tool, is(""NONE""));\r\n```\r\nwhich is even much clearer: you expect that tool is ""NONE"". You can even read what you expect', 'comment_created': datetime.datetime(2020, 7, 22, 8, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458645227, 'comment_body': 'That\'s an example of what I meant above: **Super-readable**. check that repoSizeExtimagor contains a String ""git""', 'comment_created': datetime.datetime(2020, 7, 22, 9, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458651458, 'comment_body': 'The name is still a bit confusing: `GitRepoSizeEstimator` but it only offers the Git Tool to use, nothing about Size', 'comment_created': datetime.datetime(2020, 7, 22, 9, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458657745, 'comment_body': 'The extension should not be available if Jenkins instance is null, so the `get()` method will do the job for you.\r\n```suggestion\r\n            return Jenkins.get().getExtensionList(RepositorySizeAPI.class);\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 9, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458658971, 'comment_body': 'what are you trying to get here? `r` is never null and all will return a non-null object. it might be empty, but not null.\r\nthen, this is always returning the first extension in the list, whatever the size of this and whatever the extensions in Jenkins.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458660358, 'comment_body': 'Just to give you more context: Any class extending RepositorySizeApi and with the `@Extension` annotation, will be loaded when Jenkins is launched (or when the plugin is installed) and it will be available.\r\n`Jenkins.get().getExtensionList(RepositorySizeAPI.class)` will look for any class that matches that criteria and returning them in a list.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458661516, 'comment_body': 'Please, add a javadoc for the constant and say the unit. Bytes? KB? Number of branch? Number of tags? That number might mean whatever', 'comment_created': datetime.datetime(2020, 7, 22, 9, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458664087, 'comment_body': 'Wondering if it should return the GitTool object. @MarkEWaite what do you think?', 'comment_created': datetime.datetime(2020, 7, 22, 9, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458669991, 'comment_body': ""That concerns me. You're mixing the Extension and the Estimator. I think you should decouple them doing something like:\r\n- using the URL there is a mechanism to detect the correct Extension\r\n- Retrieve that concrete extension\r\n- Invoke a method of the Extension retrieving the size\r\n- Store the retrieved value in the field\r\n\r\nRight now, your code:\r\n- From the Estimator it is executing a method in the Extension\r\n- From the Extension it is updating a field in the Estimator\r\nThere is a cycle, a circular dependency between the two classes"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458671679, 'comment_body': ""Not a blocker, just a matter of taste. Let's try to avoid branches in the code\r\n```suggestion\r\n        boolean useCache = false;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458672199, 'comment_body': 'Since useCache is initialized above, here we can avoid a branch\r\n```suggestion\r\n            if (client.hasGitRepo()) {\r\n                useCache = true;\r\n                sizeOfRepo = FileUtils.sizeOfDirectory(cacheDir);\r\n                sizeOfRepo = (sizeOfRepo/1000); // Conversion from Bytes to Kilo Bytes\r\n            }\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 9, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458672358, 'comment_body': 'ditto\r\n```suggestion\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 9, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458674910, 'comment_body': ""I don't mean to change the name, but offer the size data as well"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458676554, 'comment_body': 'This was concerning me too. Was not sure whether it has to be raised or not. Need separation of concern here.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 458854841, 'comment_body': 'To clarify what was commented in the meeting\r\n```suggestion\r\n        public abstract Long getSizeOfRepository(String remote);\r\n        \r\n        public abstract boolean acceptsRemote(String remote);\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 14, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458857459, 'comment_body': 'And here you have to filter to those which matches the accept method\r\n```suggestion\r\n        for (RepositorySizeAPI r: Objects.requireNonNull(RepositorySizeAPI.all().stream().filter(r -> r.acceptsRemote(repoUrl)))) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 14, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459264804, 'comment_body': ""We don't know how the implementer plugins will accept the remote/url. If there are more than one that match the url, what should we do? Take the first? return a false? My suggestion (and it's only a suggestion and I'm open to discuss:\r\n```suggestion\r\n        if (acceptedRepository.size() > 0) {\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 7, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459265695, 'comment_body': 'nit\r\n```suggestion\r\n            return 500;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459265810, 'comment_body': 'nit\r\n```suggestion\r\n            return 1000;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459266056, 'comment_body': '```suggestion\r\n    @TestExtension\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459266202, 'comment_body': '```suggestion\r\n    @TestExtension\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459266412, 'comment_body': 'My assumption was that the class should only provide the right recommendation for git implementation. To create a more coherent name, I suggest `GitToolAdvisor` or maybe something a bit less dramatic.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459266847, 'comment_body': ""Do you think we should also return size? While writing the class I couldn't imagine the benefit of providing the size of the repository."", 'comment_created': datetime.datetime(2020, 7, 23, 7, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459267487, 'comment_body': 'I understand, you and @MarkEWaite have made this clear often in PR submissions, please bear with me as I slowly grasp its importance.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459269173, 'comment_body': 'The reason for returning a `String` is this portion of code in AbstractGitSCMSource:\r\n```\r\nGitTool tool = resolveGitTool(context.gitTool(), listener);\r\n            if (tool != null) {\r\n                git.using(tool.getGitExe());\r\n            }\r\n            GitClient client = git.getClient();\r\n```\r\nWe create a git client using the `git.using(tool.getGitExe())`. If we instantiate a GitRepoSizeEstimator just before it, it can provided a `String recommendedGitExe` to `git.using()` to create the client with the optimal implementation.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459293411, 'comment_body': ""it's weird and confusing to have a `GitRepoSizeEstimator` class that is estimating something that is never returned and instead it's returning the tool to use. Something we can change in the last minute"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459294690, 'comment_body': 'Recovering the comment missing after the last commit:\r\nI was wondering if we just return the GitTool. What do you think @MarkEWaite ?', 'comment_created': datetime.datetime(2020, 7, 23, 8, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459296321, 'comment_body': 'Maybe, this filter might be done in a method of the Extension, so here we have something like\r\n```suggestion\r\n        List<RepositorySizeAPI> acceptedRepository = RepositorySizeAPI.getValids(repoUrl);\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459297396, 'comment_body': ""We cannot know how the implementer plugins will accept the URL, so we might have more than one. What should we do? Pick up the first one? Consider we cannot know what to do and return false? My suggestion (just a suggestion, I'm happy to open discussion) would be to pick the first one up\r\n```suggestion\r\n        if (acceptedRepository.size() > 0) {\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459298271, 'comment_body': ""If a variable should have a default value, you should initialized in first place, so it's clearer which value would return in such case\r\n```suggestion\r\n        implementation = determineSwitchOnSize(sizeOfRepo);\r\n        useCache = setSizeFromCache(source);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459298614, 'comment_body': 'Not needed if you initialize above\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459299512, 'comment_body': 'Second if might be not needed\r\n```suggestion\r\n        } else {\r\n            useAPI = setSizeFromAPI(source.getRemote());\r\n            if (useAPI) {\r\n                implementation = determineSwitchOnSize(sizeOfRepo);\r\n            }\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459302876, 'comment_body': 'if you initialize the implementation at the beginning, you will see that there are duplicated code, which cam be extracted to a common method, improving the maintainability of the code\r\n```suggestion\r\n    public GitRepoSizeEstimator(String remoteName) {\r\n\r\n        implementation = ""DEFAULT"";\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459303441, 'comment_body': 'Then this part of the code would be more or less like\r\n```suggestion\r\n        boolean useAPI = setSizeFromAPI(remoteName);\r\n\r\n        if (useAPI) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        }\r\n```\r\n\r\nand you probably can extract this piece of code from both constructors since they are quite similar', 'comment_created': datetime.datetime(2020, 7, 23, 8, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459306144, 'comment_body': 'what if instead 1000, you return 100000 and add another test for gitlab which should return ""jgit""? that way you would be testing all the possibilities. When writing tests, always bare in mind all the possible returned values or you run the risk that a regression in your code will be never caught', 'comment_created': datetime.datetime(2020, 7, 23, 8, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459342896, 'comment_body': 'I agree, `GitToolSuggestion`? A `GitToolSuggestion.getGitTool()` seems like a good way to tell that the developer that we wish to suggest a better approach in terms of git implementation.\r\n\r\nWhatever everyone agrees upon is fine by me.', 'comment_created': datetime.datetime(2020, 7, 23, 10, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459371167, 'comment_body': ""I'm really bad at naming methods and classes, so I will let others suggest something. for me it's fine if the class refers an actual behaviour"", 'comment_created': datetime.datetime(2020, 7, 23, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459389999, 'comment_body': 'Valid point. Currently the code chooses to avoid the whole situation by returning `false`. What if, instead of asking for a size of type long, we ask for a non-primitive custom class which encapsulates details like \r\n- size type (in KiBs, in MiBs), \r\n- from which provider (for ex: Github or GitLab)', 'comment_created': datetime.datetime(2020, 7, 23, 11, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459390510, 'comment_body': 'I have coded something like this in a different branch, I can raise a separate PR for you and others to review.', 'comment_created': datetime.datetime(2020, 7, 23, 11, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459390971, 'comment_body': ""Agreed, I'm more test cases to cover as many possible test case scenarios."", 'comment_created': datetime.datetime(2020, 7, 23, 11, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459404414, 'comment_body': 'you will still have the same question to answer: what will you return if more than one implementer extensions are marked as valid? The first one or null? Or do you will try one by one until one retrieves a valid object? those are the design question you have to try to answer', 'comment_created': datetime.datetime(2020, 7, 23, 12, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459678696, 'comment_body': 'After searching for an answer for sometime, I\'ve come up with certain ideas: \r\n- **Accept a singleton instance**: Assume that it is not possible to have two extension instances of the same type, i.e, if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it. If we find out that more than one does, we **reject all instances**. \r\n\r\nAdvantage: The extension point contract is simple at this moment, from git plugin\'s point of view, we can\'t assume to know what classes will implement it, so we ask them a simple question: Do you want to implement it? Yes or no. \r\nIf we add another rule on the contract, a method which returns the type of provider implementing the extension point, it adds a little bit of complexity.\r\n\r\nDisadvantage: We miss out on the correct instance which provides the size for our estimation.\r\n\r\n- **Add another method on the contract**: Ask for the provider\'s name, say a method like `public abstract String returnProviderName()` which returns strings like ""Github"" or ""Gitlab"" which we can then use to filter out more than one instance.', 'comment_created': datetime.datetime(2020, 7, 23, 19, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459891921, 'comment_body': 'I\'ll try to answer bit by bit, but starting from the end:\r\n\r\n> Add another method on the contract: Ask for the provider\'s name, say a method like public abstract String returnProviderName() which returns strings like ""Github"" or ""Gitlab"" which we can then use to filter out more than one instance.\r\n\r\nI don\'t think that\'s a good idea because you would need a mechanism to distinguish the ""provider"" in the git-plugin itself and as Mark stated very well, it\'s better to leave that responsibility to the implementer. See what I mean:\r\n- Let\'s suppose we add the `distinguishWhenUnclear` method.\r\n- If implementer plugins have a really good `accept` method, so your URL is only accepted by 1 plugin, then your `distinguish` method is not actually needed.\r\n- If implementer plugins have vague `accept` method, so more than one is accepting the URL, you have to distinguish between them. Then why do you need them to implement the `accept` method?\r\n\r\nIf we see the provider name is useful we can add it, but not for filtering purposes.\r\n\r\n> Accept a singleton instance: Assume that it is not possible to have two extension instances of the same type, i.e, if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it. If we find out that more than one does, we reject all instances.\r\n\r\nThat\'s a valid solution of course. We can return a singleton object or a list filter in the Estimator class. Both solutions are equally valid and will lead to the same end. What I wanted to do was to make you think is about what behaviour we want when more than one Extension objects are accepting and why. You\'ve given me the answer with:\r\n> If we find out that more than one does, we reject all instances.\r\n\r\nfor the `what`, and\r\n\r\n> Assume that it is not possible to have two extension instances of the same type, i.e, if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it\r\n\r\nfor the why. Now my opinion/suggestion\r\n_I agree with `if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it`, but just an error in a pattern can make your implementation return a false positive. We can assume that an Extension that has returned a false positive will return an error when it tries to get the size using an API that is not valid for it, so if we return the full list of Extensions, it\'s enough if we accept the first one that is able to give us a number and not an error. This way we can distinguish between implementations and the probability of getting a false number is actually low. In other words: it\'s a less aggressive approach_\r\nBut that\'s *my opinion/suggestion* and it does not mean that it makes sense or it\'s the best approach. I\'d like your thoughts about that and also I\'d like other mentors\'s opinions here, @MarkEWaite @justinharringa @omkar-dsd', 'comment_created': datetime.datetime(2020, 7, 24, 7, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459966400, 'comment_body': '> I don\'t think that\'s a good idea because you would need a mechanism to distinguish the ""provider"" in the git-plugin itself and as Mark stated very well, it\'s better to leave that responsibility to the implementer. See what I mean:\r\n\r\nUnderstood, it might only increase complexity within the git plugin which is not be necessary.\r\n\r\n@fcojfernandez That seems like a neat approach to me, assume that if there is a false positive, there is a very low chance that numerical size returned by it would be non-zero. \r\nIf I\'ve understood you correctly, if we have multiple implementations in the extension list, we check the size and only accept the non-zero size instance. \r\n\r\nThis leads me to ask another question to you, what if some plugin implements our method of `getSizeFromRepository()` and does so incorrectly? Do we expect an exception thrown from the that erroneous method? I wouldn\'t assume that because our method definition doesn\'t throw any exception.\r\nShould we expect a `size = 0` if things go wrong from the implementers side?', 'comment_created': datetime.datetime(2020, 7, 24, 10, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 460012124, 'comment_body': ""A repo might be empty, so 0 might or not be a wrong value per se, but I don't think it's a use case we should care (actually unlikely).\r\nApart from that, adding a safe check just in case any exception that happens is not properly handled by the implementer plugin is just free. It's possible that the implementer is not checking the final endpoint, for example. IMO, better safe than sorry, and if the Extension throws an exception or return 0, then you can discarded the value in both situation.\r\n\r\nregarding my comment\r\n> a safe check just in case any exception that happens is not properly handled by the implementer plugin\r\n\r\nWhen you delegate the responsibility, it's always a good idea to have a check. Keep that always in mind because even when you want the exception to be thrown, you can catch it, process it and re-throw it"", 'comment_created': datetime.datetime(2020, 7, 24, 12, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 460086978, 'comment_body': 'Yeah, you could perhaps have an abstract method which defaults to KB to use for any necessary conversions. Perhaps a different PR for something like that if we have time?', 'comment_created': datetime.datetime(2020, 7, 24, 14, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 460658497, 'comment_body': '@justinharringa Great suggestion, I have a seperate PR for this specification.', 'comment_created': datetime.datetime(2020, 7, 27, 5, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 460704280, 'comment_body': '```suggestion\r\n            useAPI = setSizeFromAPI(source.getRemote());\r\n            if (useAPI) {\r\n                implementation = determineSwitchOnSize(sizeOfRepo);\r\n            }\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 7, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 461818807, 'comment_body': ""I don't seem to understand the reason to call `setSizeFromAPI` if `useCache` is already true, wouldn't doing this change make us add a redundant call in certain cases?"", 'comment_created': datetime.datetime(2020, 7, 28, 19, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 462085027, 'comment_body': 'From my comment above\r\n```suggestion\r\n    public GitToolChooser(String remoteName) {\r\n        implementation = ""NONE"";\r\n        useAPI();\r\n        determineGitTool(implementation);\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 7, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 462089131, 'comment_body': 'will try to explain better my outdated comment, because it was so clear in my mind that probably I lack an explanation for you. Let\'s go step by step:\r\n1. `useCache` and `useAPI` are initialized to `false`\r\n1. Check `setSizeFromCache`\r\n   1. if `true`, then use `determineSwitchOnSize` and `useAPI` will be always `false`\r\n   1. If `false` then use `setSizeFromAPI` and `useAPI` is updated\r\n1. The only way that `determineSwitchOnSize` can be executed is if `useAPI` is false and `setSizeFromAPI` returns `true`, so\r\n```suggestion\r\n    public GitToolChooser(@NonNull AbstractGitSCMSource source) throws IOException, InterruptedException {\r\n        boolean useCache;\r\n        boolean useAPI = false;\r\n\r\n        implementation = determineSwitchOnSize(sizeOfRepo);\r\n        useCache = setSizeFromCache(source);\r\n\r\n        if (useCache) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        } else {\r\n            useAPI = setSizeFromAPI(source.getRemote());\r\n            if (useAPI) {\r\n                implementation = determineSwitchOnSize(sizeOfRepo);\r\n            }\r\n        }\r\n        determineGitTool(implementation);\r\n    }\r\n```\r\nAs I said on another outdated comment you can find duplicated code between the two of the constructors:\r\n```\r\n        boolean useAPI = setSizeFromAPI(remoteName);\r\n        if (useAPI) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        }\r\n``` \r\nso then:\r\n```suggestion\r\n    public GitToolChooser(@NonNull AbstractGitSCMSource source) throws IOException, InterruptedException {\r\n        implementation = ""NONE"";\r\n        if (setSizeFromCache(source)) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        } else {\r\n            useAPI()\r\n        }\r\n    }\r\n```\r\n\r\nwhere the new `useAPI()` method would be\r\n```\r\n    private useAPI() {\r\n        if (setSizeFromAPI(remoteName)) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        }\r\n    }\r\n```\r\nThis suggestion is not changing your logic, which is correct, it\'s trying to optimize the code preventing the duplicity.', 'comment_created': datetime.datetime(2020, 7, 29, 7, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 463314396, 'comment_body': '@fcojfernandez Thanks for explaining the duplication so clearly, in my mind, I am always thinking about readability of the code and in that process I added duplicate code. I have tried to fix in the subsequent commits, please review them whenever you get the time!', 'comment_created': datetime.datetime(2020, 7, 30, 22, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 467579993, 'comment_body': 'I think it would be better to define the names of Implementations as constants rather than hard coding them. Can be reused at other places too. @fcojfernandez I am not sure where it can be best placed, can you suggest?', 'comment_created': datetime.datetime(2020, 8, 9, 12, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 467581199, 'comment_body': 'I like the way each case has been described properly 👍 ', 'comment_created': datetime.datetime(2020, 8, 9, 13, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 468401735, 'comment_body': 'Great point! Because of this implementation: https://github.com/jenkinsci/git-plugin/blob/e21bf121ee2ff4129676d097c88e2205b9b4ff6f/src/main/java/hudson/plugins/git/util/GitUtils.java#L59-L83\r\n\r\nWe should bare in mind:\r\n- https://github.com/jenkinsci/git-client-plugin/blob/3a2230e6c3819d6110aebf888aa58d9cced77fab/src/main/java/org/jenkinsci/plugins/gitclient/JGitTool.java#L52-L55 is the correct constant for jgit\r\n- What about JGit with Apache? https://github.com/jenkinsci/git-client-plugin/blob/3a2230e6c3819d6110aebf888aa58d9cced77fab/src/main/java/org/jenkinsci/plugins/gitclient/JGitApacheTool.java#L41-L44\r\n- The constant ""git"" might be a problem. By default the installation name is ""Default"", but any other installation might have any name, such as ""my-git"" or ""nothing-to-do-with-this-tool"". Because of https://github.com/jenkinsci/git-plugin/blob/e21bf121ee2ff4129676d097c88e2205b9b4ff6f/src/main/java/hudson/plugins/git/util/GitUtils.java#L63-L69 then no ""git"" implementation will be found and the Default will be returned. If we change the Default name to ""other-default"", then we will get no installation. Do we care for those cases?', 'comment_created': datetime.datetime(2020, 8, 11, 8, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 469297641, 'comment_body': 'Where does this logic come from? Is that something just for this?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469298135, 'comment_body': 'Should this be typed or be an `enum`?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469299020, 'comment_body': 'Is this decoupled from `implementation`? Should it be?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469328328, 'comment_body': ""I am not able to understand this `url`. In the earlier tests `remote` was directly being used. \r\n\r\n1. How does `url` differ from `remote` when the GitToolChooser is expecting `remoteName`?\r\n2. What is this format of `url` being used? I don't see it as a proper url pattern.\r\n\r\nAm I missing something? Please help me understand this style. @rishabhBudhouliya "", 'comment_created': datetime.datetime(2020, 8, 12, 15, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 469361398, 'comment_body': 'Should this perhaps actually be a `GitTool` type? Still looking through but that seems to have the information you need.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469362621, 'comment_body': 'If you were to switch to returning a `GitTool` you could use the NullObject pattern where you have a ""null"" `GitTool` that\'s set up for this class.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469364167, 'comment_body': 'Was there a reason you left out `//`? Could perhaps make this a constant (but not a huge deal).\r\n```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469364307, 'comment_body': '```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469365135, 'comment_body': 'Interesting... will look but was wondering if `ToolProperty` is something that could demonstrate capabilities of a `GitTool`?', 'comment_created': datetime.datetime(2020, 8, 12, 15, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469365469, 'comment_body': 'Nitpicky lol\r\n```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469365715, 'comment_body': 'stop it Justin! 😆 \r\n```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469367482, 'comment_body': 'Also, do you need to do anything differently if folks are using `git@github.com` forms?', 'comment_created': datetime.datetime(2020, 8, 12, 15, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469579951, 'comment_body': 'That is a valid suggestion, however I am not sure if adding the GitTool class will over-complicate the current design or make it neater. \r\n\r\nReturning strings instead of a concrete class seems okay till we return `NONE`. Returning NONE means that we will have to add a check before feeding the value to git client initialiser.', 'comment_created': datetime.datetime(2020, 8, 12, 22, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469582515, 'comment_body': '`getCacheEntry` is a static method in `AbstractGitSCMSource`, I have removed it from this class and borrowed it directly.', 'comment_created': datetime.datetime(2020, 8, 12, 22, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469584565, 'comment_body': '@omkar-dsd Apologies, I forgot to remove these placeholder urls. I have replaced them with the appropriate remote name.\r\n\r\nFurthermore, the remote name/urls do not matter much as the validation logic written within the `TestExtension` is pretty naive, it only checks if the remote url contains the word ""github"".', 'comment_created': datetime.datetime(2020, 8, 12, 22, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469585382, 'comment_body': '@justinharringa Apologies, I mistakenly left out these placeholder urls, I have replaced them with the appropriate remote name, however, the remote name(urls) do not significantly test anything as the validation logic written for the extension point within the test class is naive, it only checks the presence of the word ""github""', 'comment_created': datetime.datetime(2020, 8, 12, 22, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469585716, 'comment_body': ""Will have to look at how ToolProperty is used, I haven't checked that either. Thanks for raising this concern!"", 'comment_created': datetime.datetime(2020, 8, 12, 22, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469585865, 'comment_body': '@justinharringa haha, sorry for wasting your time on my mistakes!', 'comment_created': datetime.datetime(2020, 8, 12, 22, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469586618, 'comment_body': ""Great question, I didn't include GitTool because of the fear of adding more complexity, keeping a path of git executable as a string seems to work fine so far but obviously we have some issues with it and I need to test using GitTool class as an option."", 'comment_created': datetime.datetime(2020, 8, 12, 22, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469677674, 'comment_body': 'No time wasted my friend!', 'comment_created': datetime.datetime(2020, 8, 13, 3, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469677800, 'comment_body': 'May not bear any fruit. Just a thought 😃', 'comment_created': datetime.datetime(2020, 8, 13, 3, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469678052, 'comment_body': ""Don't you have to check regardless?"", 'comment_created': datetime.datetime(2020, 8, 13, 3, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 470182231, 'comment_body': ""Well functionally, we are not affected by it. I maybe wrong but I don't seem to recall if we have discussed the possibility of using a GitTool object instead of a String object as the returned object."", 'comment_created': datetime.datetime(2020, 8, 13, 19, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 470375203, 'comment_body': 'Already has a higher value on the master branch.  Should merge the master branch to get the latest values.\r\n```suggestion\r\n    <version>4.6</version>\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470375659, 'comment_body': 'Trivial additional text to silence javadoc warnings\r\n```suggestion\r\n     * @throws IOException on error\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470375772, 'comment_body': '```suggestion\r\n     * @throws InterruptedException when interrupted\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470376445, 'comment_body': ""```suggestion\r\n     * @param remoteName the repository url\r\n     * @param projectContext the context where repository size is being estimated\r\n     * @param credentialsId credential used to access the repository or null if no credential is required\r\n     * @param gitExe name of the git tool ('git', 'jgit', 'jgitapache') to be used as the default tool\r\n```"", 'comment_created': datetime.datetime(2020, 8, 14, 2, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470379141, 'comment_body': 'Since the test has an option to be called without credentials, shouldn\'t the test without credentials skip passing credentials?\r\n```suggestion\r\n        WorkflowJob p = jenkins.jenkins.createProject(WorkflowJob.class, ""p"");\r\n        String creds = noCredentials ? """" : ""credentialsId: \'github\', "";\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470379676, 'comment_body': 'Use the credentials that were conditionally defined earlier.\r\n```suggestion\r\n                        + ""      userRemoteConfigs: [["" + creds + ""url: $/"" + sampleRepo + ""/$]]]\\n""\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 471234977, 'comment_body': ""Thanks for noticing, I've done it."", 'comment_created': datetime.datetime(2020, 8, 17, 5, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 471238838, 'comment_body': ""Since these credentials are used to validate a REST connection from the extension points and the `TestExtension` extensions do not perform an actual validation, I didn't add this. But rightly pointed out, this is should be added. \r\n\r\nI was wondering if I should improve the implemented extension tests with at least adding a scan on passed credentials to simulate that validation part of validating a passed down remote url. "", 'comment_created': datetime.datetime(2020, 8, 17, 5, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 475839821, 'comment_body': 'Prefer to retain sentence per line formatting in the README file so that reviews can be sentence oriented.\r\n```suggestion\r\n  If checked, the plugin will disable a feature which recommends a git implementation on the basis of the size of a repository.\r\n  This switch may be used in case of a bug in the performance improvement feature.\r\n  If you enable this setting, please report a git plugin issue that describes why you needed to enable it.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 475840143, 'comment_body': 'Needs to require the git client plugin version that fixes the null pointer exception in `UnsupportedCommand`.\r\n```suggestion\r\n      <version>3.4.2</version>\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}]","[{'commit_sha': 'f477da8a05e025c37259e70b974842522049026f', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e217116acba96637dde6e9a59bf7467387418b13', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a879a881d8d7eb8e34dafac2c8cd0f38eed4ae4', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008a126dd79ef1f4529ad7806edf4d08c342cabf', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a82f0bc049d4d3c3290aa6b55b001f3725f8ed', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14548cf2774d21853e889f245cbc7863de067b98', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '766d5f024188a5200f6cbaa13b611defd27d29af', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fbdf85cbb98a46594ead14b4d6d09584102cc6e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5703a0c576d3879dd3c22307c4c886846b292ae9', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58ca8e79cfdf92b436af5e7419b9d9f77b6f1311', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2caebec18c48c2153f154c3022a8ea1204a351', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d4433d399f73328a2b8f1acd5add3650219755', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c91f2114597b819c7e164a0bcec2f75d792926bf', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3747e65a243cea06d012e1d2f8328e293069dc7a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90aa2c5be58f4f504657dcf85312c2abc2f1c54b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00c7c335e9fe07b5f42506d9fd7c8e730629f0e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7e25dd45364b8b02b5e854021c0a81e13258f11', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d6d5ff9ca92dc6579fac53b5d906500497820a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af7628656c71c6bdc0e078288945901b167b2a1b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6b2d581167fa68b745b6244e14fc56e49e1ea4b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab924c00a0b268111a4d6fcec780e512f4cf0e2e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05abccc210d124e2568b7da36b6e8409c532da04', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d25b4ff832e65983d09b54bc6e991f3bc28b9ec', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7408df2f6ae7af1a2dff2d5299e07a33dc8fd5d7', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2fc5838f69a9eae1687c208bb9d37276d46f917', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dfacf73ea73f94edbedd83fc09336a03ac15659', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b26e1b0f981287bbb538338bf9169be7498d9198', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9de6cb445d5af3a98246fdd3e56fb4d408e416', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97d6bf56bafff1b0c558929f073b6afe0158ed63', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5506dbf8241dacacfa57bf6d52efd391bf840c02', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b14791c7109ebe411d4b3c7a7fe52a0c932af09', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27afd3d0e51924f5034f541bd1ec0a8223e96bfd', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f74c4919c4dee9d81b6a06918d3e91693161520', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69bac3c38a31e9d13d7e5c9ca694fee6f0a60de1', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b12cb92592ca4296939012c60b0d3d4a5880cd', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb4adc0a75badb05b88a2227754133ed8c1827e2', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c79f6bc278d2ba4630eece2456965be1cbe82a2', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9cfcb27e1df8f4b547b60ca03af5a1b9ae0c0c8', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2622eef52e655ad46c92b2e336f853061b3422', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '589ce146dc335ff3bc6c1da651243063923fc383', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f83cffa6b9b9b8344f71faa1dcb69f862ed1fe47', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3484e78cf29ef851a56d77918978498431a21732', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b26071d8560c40050f205ad9bb2c84b5556af7a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b2cb16edd8a7370f7c12f127cbf6be23431030', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8926adc1e676813a61b9905ad6dd543f5e7a2d', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71dba8e3c93fcb62dcd1a518d341f070e20fa880', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2060ad6e23bb14fd6035c843b6390b92cccba5', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '119c84cce323bccb75e0eb134526d501ee12b5c4', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '990b7b9381a7c27fd3079a32bd2dcf69f285f043', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd680ec3151422dfd9dcc8429b2a4d79dd1ef8bb9', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa286e0417dc75f7f4fd4293dc687f6f31806a8', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55d3cb3e05cec15f48c6d4d24f8a05401fcb986', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f9245cc24f00c01f1411cc0ff6b7f1854ad2a9c', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5157fa5f46f991861bb438ed8bafd06afa41ec75', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e679e7543bbf73b56826e9341090d96cba0d375', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e67a6a6732fee18016e94097c4a694e68d56bc', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd057d23b4b423cdc8d2bbbdc2eff3cabb3b1c6b5', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5bff959985f5990eb54ae20338ffd6cb55bbe31', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be916821bf02b8df70ec4984a8bb89dd5ae51e88', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612f55428b7eb9b1ccffe0e96bc3a8b16b28f265', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
453131031,[GSoC-2020] Git Repository Size Estimation,"## GitToolChooser

**Description**: This class aims to add the functionality of recommending a git implementation on the basis of the size of a repository which has a strong correlation to the performance of git fetch (from Performance Benchmarks).

We have two heuristics to calculate the size of a git repository:
- Using cached .git dir to estimate the size of a repository
- Providing an extension point which upon implementation can use APIs exposed by git service providers like Github, GitLab etc to fetch `size` of repo.

**How are we doing this?**
- The class can instantiate using a constructor which checks if cache exists and calculates the size if it does. Else, it checks if we have an implementation(s) for the extension point provided by the class.
- Currently, the GitToolChooser is planning to be supported by the Github branch source plugin, Gitlab branch source plugin and the Gitea branch source plugin.

**Assumptions**: 
- We believe that the implementers of the extension point have the user credentials in order to query size of a repository on the basis of its URL.
- We are instantiating `GitToolChooser` using an instance of `AbstractGitSCMSource`just as the `GitSCMTelescope` does. 
- This scope of usage of this API is not limited to the AbstractGitSCMSource, it can be used in other places provided we have the repository url.

**Architecture Diagram**
<img width=""829"" alt=""Screenshot 2020-07-29 at 1 47 41 AM"" src=""https://user-images.githubusercontent.com/31189405/88717186-c4039200-d13d-11ea-9321-98b4b7266156.png"">


## Checklist

- [x] I have read the [CONTRIBUTING](https://github.com/jenkinsci/git-plugin/blob/master/CONTRIBUTING.adoc) doc
- [ ] I have referenced the Jira issue related to my changes in one or more commit messages
- [x] I have added tests that verify my changes
- [x] Unit tests pass locally with my changes
- [x] I have added documentation as necessary
- [ ] No Javadoc warnings were introduced with my changes
- [ ] No spotbugs warnings were introduced with my changes
- [ ] Documentation in README has been updated as necessary
- [ ] Online help has been added and reviewed for any new or modified fields
- [ ] I have interactively tested my changes
- [ ] Any dependent changes have been merged and published in upstream modules (like git-client-plugin)

## Types of changes

- [ ] Dependency or infrastructure update
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Further comments

To avoid issues with the existing functionality of the plugin, we have used the exact same logic to resolve git tool before making a recommendation as is provided by `GitUtils.resolveGitTool`.",True,931,https://api.github.com/repos/jenkinsci/git-plugin/pulls/931,https://github.com/jenkinsci/git-plugin/pull/931,closed,813,32,13,60,17,93,1,0,[{'name': 'enhancement'}],2020-07-20 07:03:29+00:00,2020-08-25 02:19:58+00:00,3093389.0,"35 days, 19:16:29","[{'comment_id': 457867534, 'comment_body': '`getSizeFromAPI` does not return the **size** as one would expect from its name. \r\n\r\nNaming is definitely one of the toughest part of development :P . imo, it should be something like: `setSizeFromCache` and `setSizeFromAPI`, also it will maintain consistency among these two methods.', 'comment_created': datetime.datetime(2020, 7, 21, 6, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 457867951, 'comment_body': 'Define the scale (Bytes, KB, MB, etc.) in comment, else it can be confusing 😅 ', 'comment_created': datetime.datetime(2020, 7, 21, 6, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 457948974, 'comment_body': 'Good point, while writing the tests it has deemed to me that it might be cleaner to use a non-primitive data type instead of a primitive data type. \r\n\r\nThe API might return varying sizes, we need to take that case into account as well.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 457956100, 'comment_body': 'Thanks for pointing this out, I have changed it.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 458642618, 'comment_body': 'this is a very simple case and hence quite readable, but it\'s a good idea to start using the methods that allow you to have more readable tests:\r\n- You could use assertTrue(tool.equas(""NONE"")\r\n- You could use\r\n```suggestion\r\n        assertThat(tool, is(""NONE""));\r\n```\r\nwhich is even much clearer: you expect that tool is ""NONE"". You can even read what you expect', 'comment_created': datetime.datetime(2020, 7, 22, 8, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458645227, 'comment_body': 'That\'s an example of what I meant above: **Super-readable**. check that repoSizeExtimagor contains a String ""git""', 'comment_created': datetime.datetime(2020, 7, 22, 9, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458651458, 'comment_body': 'The name is still a bit confusing: `GitRepoSizeEstimator` but it only offers the Git Tool to use, nothing about Size', 'comment_created': datetime.datetime(2020, 7, 22, 9, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458657745, 'comment_body': 'The extension should not be available if Jenkins instance is null, so the `get()` method will do the job for you.\r\n```suggestion\r\n            return Jenkins.get().getExtensionList(RepositorySizeAPI.class);\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 9, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458658971, 'comment_body': 'what are you trying to get here? `r` is never null and all will return a non-null object. it might be empty, but not null.\r\nthen, this is always returning the first extension in the list, whatever the size of this and whatever the extensions in Jenkins.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458660358, 'comment_body': 'Just to give you more context: Any class extending RepositorySizeApi and with the `@Extension` annotation, will be loaded when Jenkins is launched (or when the plugin is installed) and it will be available.\r\n`Jenkins.get().getExtensionList(RepositorySizeAPI.class)` will look for any class that matches that criteria and returning them in a list.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458661516, 'comment_body': 'Please, add a javadoc for the constant and say the unit. Bytes? KB? Number of branch? Number of tags? That number might mean whatever', 'comment_created': datetime.datetime(2020, 7, 22, 9, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458664087, 'comment_body': 'Wondering if it should return the GitTool object. @MarkEWaite what do you think?', 'comment_created': datetime.datetime(2020, 7, 22, 9, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458669991, 'comment_body': ""That concerns me. You're mixing the Extension and the Estimator. I think you should decouple them doing something like:\r\n- using the URL there is a mechanism to detect the correct Extension\r\n- Retrieve that concrete extension\r\n- Invoke a method of the Extension retrieving the size\r\n- Store the retrieved value in the field\r\n\r\nRight now, your code:\r\n- From the Estimator it is executing a method in the Extension\r\n- From the Extension it is updating a field in the Estimator\r\nThere is a cycle, a circular dependency between the two classes"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458671679, 'comment_body': ""Not a blocker, just a matter of taste. Let's try to avoid branches in the code\r\n```suggestion\r\n        boolean useCache = false;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458672199, 'comment_body': 'Since useCache is initialized above, here we can avoid a branch\r\n```suggestion\r\n            if (client.hasGitRepo()) {\r\n                useCache = true;\r\n                sizeOfRepo = FileUtils.sizeOfDirectory(cacheDir);\r\n                sizeOfRepo = (sizeOfRepo/1000); // Conversion from Bytes to Kilo Bytes\r\n            }\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 9, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458672358, 'comment_body': 'ditto\r\n```suggestion\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 9, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458674910, 'comment_body': ""I don't mean to change the name, but offer the size data as well"", 'comment_created': datetime.datetime(2020, 7, 22, 9, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458676554, 'comment_body': 'This was concerning me too. Was not sure whether it has to be raised or not. Need separation of concern here.', 'comment_created': datetime.datetime(2020, 7, 22, 9, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 458854841, 'comment_body': 'To clarify what was commented in the meeting\r\n```suggestion\r\n        public abstract Long getSizeOfRepository(String remote);\r\n        \r\n        public abstract boolean acceptsRemote(String remote);\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 14, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 458857459, 'comment_body': 'And here you have to filter to those which matches the accept method\r\n```suggestion\r\n        for (RepositorySizeAPI r: Objects.requireNonNull(RepositorySizeAPI.all().stream().filter(r -> r.acceptsRemote(repoUrl)))) {\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 14, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459264804, 'comment_body': ""We don't know how the implementer plugins will accept the remote/url. If there are more than one that match the url, what should we do? Take the first? return a false? My suggestion (and it's only a suggestion and I'm open to discuss:\r\n```suggestion\r\n        if (acceptedRepository.size() > 0) {\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 7, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459265695, 'comment_body': 'nit\r\n```suggestion\r\n            return 500;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459265810, 'comment_body': 'nit\r\n```suggestion\r\n            return 1000;\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459266056, 'comment_body': '```suggestion\r\n    @TestExtension\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459266202, 'comment_body': '```suggestion\r\n    @TestExtension\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 7, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459266412, 'comment_body': 'My assumption was that the class should only provide the right recommendation for git implementation. To create a more coherent name, I suggest `GitToolAdvisor` or maybe something a bit less dramatic.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459266847, 'comment_body': ""Do you think we should also return size? While writing the class I couldn't imagine the benefit of providing the size of the repository."", 'comment_created': datetime.datetime(2020, 7, 23, 7, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459267487, 'comment_body': 'I understand, you and @MarkEWaite have made this clear often in PR submissions, please bear with me as I slowly grasp its importance.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459269173, 'comment_body': 'The reason for returning a `String` is this portion of code in AbstractGitSCMSource:\r\n```\r\nGitTool tool = resolveGitTool(context.gitTool(), listener);\r\n            if (tool != null) {\r\n                git.using(tool.getGitExe());\r\n            }\r\n            GitClient client = git.getClient();\r\n```\r\nWe create a git client using the `git.using(tool.getGitExe())`. If we instantiate a GitRepoSizeEstimator just before it, it can provided a `String recommendedGitExe` to `git.using()` to create the client with the optimal implementation.', 'comment_created': datetime.datetime(2020, 7, 23, 7, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459293411, 'comment_body': ""it's weird and confusing to have a `GitRepoSizeEstimator` class that is estimating something that is never returned and instead it's returning the tool to use. Something we can change in the last minute"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459294690, 'comment_body': 'Recovering the comment missing after the last commit:\r\nI was wondering if we just return the GitTool. What do you think @MarkEWaite ?', 'comment_created': datetime.datetime(2020, 7, 23, 8, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459296321, 'comment_body': 'Maybe, this filter might be done in a method of the Extension, so here we have something like\r\n```suggestion\r\n        List<RepositorySizeAPI> acceptedRepository = RepositorySizeAPI.getValids(repoUrl);\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459297396, 'comment_body': ""We cannot know how the implementer plugins will accept the URL, so we might have more than one. What should we do? Pick up the first one? Consider we cannot know what to do and return false? My suggestion (just a suggestion, I'm happy to open discussion) would be to pick the first one up\r\n```suggestion\r\n        if (acceptedRepository.size() > 0) {\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459298271, 'comment_body': ""If a variable should have a default value, you should initialized in first place, so it's clearer which value would return in such case\r\n```suggestion\r\n        implementation = determineSwitchOnSize(sizeOfRepo);\r\n        useCache = setSizeFromCache(source);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 23, 8, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459298614, 'comment_body': 'Not needed if you initialize above\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459299512, 'comment_body': 'Second if might be not needed\r\n```suggestion\r\n        } else {\r\n            useAPI = setSizeFromAPI(source.getRemote());\r\n            if (useAPI) {\r\n                implementation = determineSwitchOnSize(sizeOfRepo);\r\n            }\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459302876, 'comment_body': 'if you initialize the implementation at the beginning, you will see that there are duplicated code, which cam be extracted to a common method, improving the maintainability of the code\r\n```suggestion\r\n    public GitRepoSizeEstimator(String remoteName) {\r\n\r\n        implementation = ""DEFAULT"";\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 8, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459303441, 'comment_body': 'Then this part of the code would be more or less like\r\n```suggestion\r\n        boolean useAPI = setSizeFromAPI(remoteName);\r\n\r\n        if (useAPI) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        }\r\n```\r\n\r\nand you probably can extract this piece of code from both constructors since they are quite similar', 'comment_created': datetime.datetime(2020, 7, 23, 8, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459306144, 'comment_body': 'what if instead 1000, you return 100000 and add another test for gitlab which should return ""jgit""? that way you would be testing all the possibilities. When writing tests, always bare in mind all the possible returned values or you run the risk that a regression in your code will be never caught', 'comment_created': datetime.datetime(2020, 7, 23, 8, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459342896, 'comment_body': 'I agree, `GitToolSuggestion`? A `GitToolSuggestion.getGitTool()` seems like a good way to tell that the developer that we wish to suggest a better approach in terms of git implementation.\r\n\r\nWhatever everyone agrees upon is fine by me.', 'comment_created': datetime.datetime(2020, 7, 23, 10, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459371167, 'comment_body': ""I'm really bad at naming methods and classes, so I will let others suggest something. for me it's fine if the class refers an actual behaviour"", 'comment_created': datetime.datetime(2020, 7, 23, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459389999, 'comment_body': 'Valid point. Currently the code chooses to avoid the whole situation by returning `false`. What if, instead of asking for a size of type long, we ask for a non-primitive custom class which encapsulates details like \r\n- size type (in KiBs, in MiBs), \r\n- from which provider (for ex: Github or GitLab)', 'comment_created': datetime.datetime(2020, 7, 23, 11, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459390510, 'comment_body': 'I have coded something like this in a different branch, I can raise a separate PR for you and others to review.', 'comment_created': datetime.datetime(2020, 7, 23, 11, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459390971, 'comment_body': ""Agreed, I'm more test cases to cover as many possible test case scenarios."", 'comment_created': datetime.datetime(2020, 7, 23, 11, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459404414, 'comment_body': 'you will still have the same question to answer: what will you return if more than one implementer extensions are marked as valid? The first one or null? Or do you will try one by one until one retrieves a valid object? those are the design question you have to try to answer', 'comment_created': datetime.datetime(2020, 7, 23, 12, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459678696, 'comment_body': 'After searching for an answer for sometime, I\'ve come up with certain ideas: \r\n- **Accept a singleton instance**: Assume that it is not possible to have two extension instances of the same type, i.e, if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it. If we find out that more than one does, we **reject all instances**. \r\n\r\nAdvantage: The extension point contract is simple at this moment, from git plugin\'s point of view, we can\'t assume to know what classes will implement it, so we ask them a simple question: Do you want to implement it? Yes or no. \r\nIf we add another rule on the contract, a method which returns the type of provider implementing the extension point, it adds a little bit of complexity.\r\n\r\nDisadvantage: We miss out on the correct instance which provides the size for our estimation.\r\n\r\n- **Add another method on the contract**: Ask for the provider\'s name, say a method like `public abstract String returnProviderName()` which returns strings like ""Github"" or ""Gitlab"" which we can then use to filter out more than one instance.', 'comment_created': datetime.datetime(2020, 7, 23, 19, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 459891921, 'comment_body': 'I\'ll try to answer bit by bit, but starting from the end:\r\n\r\n> Add another method on the contract: Ask for the provider\'s name, say a method like public abstract String returnProviderName() which returns strings like ""Github"" or ""Gitlab"" which we can then use to filter out more than one instance.\r\n\r\nI don\'t think that\'s a good idea because you would need a mechanism to distinguish the ""provider"" in the git-plugin itself and as Mark stated very well, it\'s better to leave that responsibility to the implementer. See what I mean:\r\n- Let\'s suppose we add the `distinguishWhenUnclear` method.\r\n- If implementer plugins have a really good `accept` method, so your URL is only accepted by 1 plugin, then your `distinguish` method is not actually needed.\r\n- If implementer plugins have vague `accept` method, so more than one is accepting the URL, you have to distinguish between them. Then why do you need them to implement the `accept` method?\r\n\r\nIf we see the provider name is useful we can add it, but not for filtering purposes.\r\n\r\n> Accept a singleton instance: Assume that it is not possible to have two extension instances of the same type, i.e, if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it. If we find out that more than one does, we reject all instances.\r\n\r\nThat\'s a valid solution of course. We can return a singleton object or a list filter in the Estimator class. Both solutions are equally valid and will lead to the same end. What I wanted to do was to make you think is about what behaviour we want when more than one Extension objects are accepting and why. You\'ve given me the answer with:\r\n> If we find out that more than one does, we reject all instances.\r\n\r\nfor the `what`, and\r\n\r\n> Assume that it is not possible to have two extension instances of the same type, i.e, if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it\r\n\r\nfor the why. Now my opinion/suggestion\r\n_I agree with `if the URL is from Github provider, assume that only Github Branch Source Plugin is going to implement it. It doesn\'t make sense to me that any other plugin would want to implement it`, but just an error in a pattern can make your implementation return a false positive. We can assume that an Extension that has returned a false positive will return an error when it tries to get the size using an API that is not valid for it, so if we return the full list of Extensions, it\'s enough if we accept the first one that is able to give us a number and not an error. This way we can distinguish between implementations and the probability of getting a false number is actually low. In other words: it\'s a less aggressive approach_\r\nBut that\'s *my opinion/suggestion* and it does not mean that it makes sense or it\'s the best approach. I\'d like your thoughts about that and also I\'d like other mentors\'s opinions here, @MarkEWaite @justinharringa @omkar-dsd', 'comment_created': datetime.datetime(2020, 7, 24, 7, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 459966400, 'comment_body': '> I don\'t think that\'s a good idea because you would need a mechanism to distinguish the ""provider"" in the git-plugin itself and as Mark stated very well, it\'s better to leave that responsibility to the implementer. See what I mean:\r\n\r\nUnderstood, it might only increase complexity within the git plugin which is not be necessary.\r\n\r\n@fcojfernandez That seems like a neat approach to me, assume that if there is a false positive, there is a very low chance that numerical size returned by it would be non-zero. \r\nIf I\'ve understood you correctly, if we have multiple implementations in the extension list, we check the size and only accept the non-zero size instance. \r\n\r\nThis leads me to ask another question to you, what if some plugin implements our method of `getSizeFromRepository()` and does so incorrectly? Do we expect an exception thrown from the that erroneous method? I wouldn\'t assume that because our method definition doesn\'t throw any exception.\r\nShould we expect a `size = 0` if things go wrong from the implementers side?', 'comment_created': datetime.datetime(2020, 7, 24, 10, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 460012124, 'comment_body': ""A repo might be empty, so 0 might or not be a wrong value per se, but I don't think it's a use case we should care (actually unlikely).\r\nApart from that, adding a safe check just in case any exception that happens is not properly handled by the implementer plugin is just free. It's possible that the implementer is not checking the final endpoint, for example. IMO, better safe than sorry, and if the Extension throws an exception or return 0, then you can discarded the value in both situation.\r\n\r\nregarding my comment\r\n> a safe check just in case any exception that happens is not properly handled by the implementer plugin\r\n\r\nWhen you delegate the responsibility, it's always a good idea to have a check. Keep that always in mind because even when you want the exception to be thrown, you can catch it, process it and re-throw it"", 'comment_created': datetime.datetime(2020, 7, 24, 12, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 460086978, 'comment_body': 'Yeah, you could perhaps have an abstract method which defaults to KB to use for any necessary conversions. Perhaps a different PR for something like that if we have time?', 'comment_created': datetime.datetime(2020, 7, 24, 14, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 460658497, 'comment_body': '@justinharringa Great suggestion, I have a seperate PR for this specification.', 'comment_created': datetime.datetime(2020, 7, 27, 5, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 460704280, 'comment_body': '```suggestion\r\n            useAPI = setSizeFromAPI(source.getRemote());\r\n            if (useAPI) {\r\n                implementation = determineSwitchOnSize(sizeOfRepo);\r\n            }\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 7, 27, 7, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 461818807, 'comment_body': ""I don't seem to understand the reason to call `setSizeFromAPI` if `useCache` is already true, wouldn't doing this change make us add a redundant call in certain cases?"", 'comment_created': datetime.datetime(2020, 7, 28, 19, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 462085027, 'comment_body': 'From my comment above\r\n```suggestion\r\n    public GitToolChooser(String remoteName) {\r\n        implementation = ""NONE"";\r\n        useAPI();\r\n        determineGitTool(implementation);\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 7, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 462089131, 'comment_body': 'will try to explain better my outdated comment, because it was so clear in my mind that probably I lack an explanation for you. Let\'s go step by step:\r\n1. `useCache` and `useAPI` are initialized to `false`\r\n1. Check `setSizeFromCache`\r\n   1. if `true`, then use `determineSwitchOnSize` and `useAPI` will be always `false`\r\n   1. If `false` then use `setSizeFromAPI` and `useAPI` is updated\r\n1. The only way that `determineSwitchOnSize` can be executed is if `useAPI` is false and `setSizeFromAPI` returns `true`, so\r\n```suggestion\r\n    public GitToolChooser(@NonNull AbstractGitSCMSource source) throws IOException, InterruptedException {\r\n        boolean useCache;\r\n        boolean useAPI = false;\r\n\r\n        implementation = determineSwitchOnSize(sizeOfRepo);\r\n        useCache = setSizeFromCache(source);\r\n\r\n        if (useCache) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        } else {\r\n            useAPI = setSizeFromAPI(source.getRemote());\r\n            if (useAPI) {\r\n                implementation = determineSwitchOnSize(sizeOfRepo);\r\n            }\r\n        }\r\n        determineGitTool(implementation);\r\n    }\r\n```\r\nAs I said on another outdated comment you can find duplicated code between the two of the constructors:\r\n```\r\n        boolean useAPI = setSizeFromAPI(remoteName);\r\n        if (useAPI) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        }\r\n``` \r\nso then:\r\n```suggestion\r\n    public GitToolChooser(@NonNull AbstractGitSCMSource source) throws IOException, InterruptedException {\r\n        implementation = ""NONE"";\r\n        if (setSizeFromCache(source)) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        } else {\r\n            useAPI()\r\n        }\r\n    }\r\n```\r\n\r\nwhere the new `useAPI()` method would be\r\n```\r\n    private useAPI() {\r\n        if (setSizeFromAPI(remoteName)) {\r\n            implementation = determineSwitchOnSize(sizeOfRepo);\r\n        }\r\n    }\r\n```\r\nThis suggestion is not changing your logic, which is correct, it\'s trying to optimize the code preventing the duplicity.', 'comment_created': datetime.datetime(2020, 7, 29, 7, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 463314396, 'comment_body': '@fcojfernandez Thanks for explaining the duplication so clearly, in my mind, I am always thinking about readability of the code and in that process I added duplicate code. I have tried to fix in the subsequent commits, please review them whenever you get the time!', 'comment_created': datetime.datetime(2020, 7, 30, 22, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 467579993, 'comment_body': 'I think it would be better to define the names of Implementations as constants rather than hard coding them. Can be reused at other places too. @fcojfernandez I am not sure where it can be best placed, can you suggest?', 'comment_created': datetime.datetime(2020, 8, 9, 12, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 467581199, 'comment_body': 'I like the way each case has been described properly 👍 ', 'comment_created': datetime.datetime(2020, 8, 9, 13, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 468401735, 'comment_body': 'Great point! Because of this implementation: https://github.com/jenkinsci/git-plugin/blob/e21bf121ee2ff4129676d097c88e2205b9b4ff6f/src/main/java/hudson/plugins/git/util/GitUtils.java#L59-L83\r\n\r\nWe should bare in mind:\r\n- https://github.com/jenkinsci/git-client-plugin/blob/3a2230e6c3819d6110aebf888aa58d9cced77fab/src/main/java/org/jenkinsci/plugins/gitclient/JGitTool.java#L52-L55 is the correct constant for jgit\r\n- What about JGit with Apache? https://github.com/jenkinsci/git-client-plugin/blob/3a2230e6c3819d6110aebf888aa58d9cced77fab/src/main/java/org/jenkinsci/plugins/gitclient/JGitApacheTool.java#L41-L44\r\n- The constant ""git"" might be a problem. By default the installation name is ""Default"", but any other installation might have any name, such as ""my-git"" or ""nothing-to-do-with-this-tool"". Because of https://github.com/jenkinsci/git-plugin/blob/e21bf121ee2ff4129676d097c88e2205b9b4ff6f/src/main/java/hudson/plugins/git/util/GitUtils.java#L63-L69 then no ""git"" implementation will be found and the Default will be returned. If we change the Default name to ""other-default"", then we will get no installation. Do we care for those cases?', 'comment_created': datetime.datetime(2020, 8, 11, 8, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'fcojfernandez', 'type': 'User'}, {'comment_id': 469297641, 'comment_body': 'Where does this logic come from? Is that something just for this?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469298135, 'comment_body': 'Should this be typed or be an `enum`?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469299020, 'comment_body': 'Is this decoupled from `implementation`? Should it be?', 'comment_created': datetime.datetime(2020, 8, 12, 14, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469328328, 'comment_body': ""I am not able to understand this `url`. In the earlier tests `remote` was directly being used. \r\n\r\n1. How does `url` differ from `remote` when the GitToolChooser is expecting `remoteName`?\r\n2. What is this format of `url` being used? I don't see it as a proper url pattern.\r\n\r\nAm I missing something? Please help me understand this style. @rishabhBudhouliya "", 'comment_created': datetime.datetime(2020, 8, 12, 15, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'omkar-dsd', 'type': 'User'}, {'comment_id': 469361398, 'comment_body': 'Should this perhaps actually be a `GitTool` type? Still looking through but that seems to have the information you need.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469362621, 'comment_body': 'If you were to switch to returning a `GitTool` you could use the NullObject pattern where you have a ""null"" `GitTool` that\'s set up for this class.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469364167, 'comment_body': 'Was there a reason you left out `//`? Could perhaps make this a constant (but not a huge deal).\r\n```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469364307, 'comment_body': '```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469365135, 'comment_body': 'Interesting... will look but was wondering if `ToolProperty` is something that could demonstrate capabilities of a `GitTool`?', 'comment_created': datetime.datetime(2020, 8, 12, 15, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469365469, 'comment_body': 'Nitpicky lol\r\n```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469365715, 'comment_body': 'stop it Justin! 😆 \r\n```suggestion\r\n        String url = ""https://github.com"";\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 15, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469367482, 'comment_body': 'Also, do you need to do anything differently if folks are using `git@github.com` forms?', 'comment_created': datetime.datetime(2020, 8, 12, 15, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469579951, 'comment_body': 'That is a valid suggestion, however I am not sure if adding the GitTool class will over-complicate the current design or make it neater. \r\n\r\nReturning strings instead of a concrete class seems okay till we return `NONE`. Returning NONE means that we will have to add a check before feeding the value to git client initialiser.', 'comment_created': datetime.datetime(2020, 8, 12, 22, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469582515, 'comment_body': '`getCacheEntry` is a static method in `AbstractGitSCMSource`, I have removed it from this class and borrowed it directly.', 'comment_created': datetime.datetime(2020, 8, 12, 22, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469584565, 'comment_body': '@omkar-dsd Apologies, I forgot to remove these placeholder urls. I have replaced them with the appropriate remote name.\r\n\r\nFurthermore, the remote name/urls do not matter much as the validation logic written within the `TestExtension` is pretty naive, it only checks if the remote url contains the word ""github"".', 'comment_created': datetime.datetime(2020, 8, 12, 22, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469585382, 'comment_body': '@justinharringa Apologies, I mistakenly left out these placeholder urls, I have replaced them with the appropriate remote name, however, the remote name(urls) do not significantly test anything as the validation logic written for the extension point within the test class is naive, it only checks the presence of the word ""github""', 'comment_created': datetime.datetime(2020, 8, 12, 22, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469585716, 'comment_body': ""Will have to look at how ToolProperty is used, I haven't checked that either. Thanks for raising this concern!"", 'comment_created': datetime.datetime(2020, 8, 12, 22, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469585865, 'comment_body': '@justinharringa haha, sorry for wasting your time on my mistakes!', 'comment_created': datetime.datetime(2020, 8, 12, 22, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469586618, 'comment_body': ""Great question, I didn't include GitTool because of the fear of adding more complexity, keeping a path of git executable as a string seems to work fine so far but obviously we have some issues with it and I need to test using GitTool class as an option."", 'comment_created': datetime.datetime(2020, 8, 12, 22, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 469677674, 'comment_body': 'No time wasted my friend!', 'comment_created': datetime.datetime(2020, 8, 13, 3, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469677800, 'comment_body': 'May not bear any fruit. Just a thought 😃', 'comment_created': datetime.datetime(2020, 8, 13, 3, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 469678052, 'comment_body': ""Don't you have to check regardless?"", 'comment_created': datetime.datetime(2020, 8, 13, 3, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'justinharringa', 'type': 'User'}, {'comment_id': 470182231, 'comment_body': ""Well functionally, we are not affected by it. I maybe wrong but I don't seem to recall if we have discussed the possibility of using a GitTool object instead of a String object as the returned object."", 'comment_created': datetime.datetime(2020, 8, 13, 19, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 470375203, 'comment_body': 'Already has a higher value on the master branch.  Should merge the master branch to get the latest values.\r\n```suggestion\r\n    <version>4.6</version>\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470375659, 'comment_body': 'Trivial additional text to silence javadoc warnings\r\n```suggestion\r\n     * @throws IOException on error\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470375772, 'comment_body': '```suggestion\r\n     * @throws InterruptedException when interrupted\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470376445, 'comment_body': ""```suggestion\r\n     * @param remoteName the repository url\r\n     * @param projectContext the context where repository size is being estimated\r\n     * @param credentialsId credential used to access the repository or null if no credential is required\r\n     * @param gitExe name of the git tool ('git', 'jgit', 'jgitapache') to be used as the default tool\r\n```"", 'comment_created': datetime.datetime(2020, 8, 14, 2, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470379141, 'comment_body': 'Since the test has an option to be called without credentials, shouldn\'t the test without credentials skip passing credentials?\r\n```suggestion\r\n        WorkflowJob p = jenkins.jenkins.createProject(WorkflowJob.class, ""p"");\r\n        String creds = noCredentials ? """" : ""credentialsId: \'github\', "";\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 470379676, 'comment_body': 'Use the credentials that were conditionally defined earlier.\r\n```suggestion\r\n                        + ""      userRemoteConfigs: [["" + creds + ""url: $/"" + sampleRepo + ""/$]]]\\n""\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 2, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 471234977, 'comment_body': ""Thanks for noticing, I've done it."", 'comment_created': datetime.datetime(2020, 8, 17, 5, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 471238838, 'comment_body': ""Since these credentials are used to validate a REST connection from the extension points and the `TestExtension` extensions do not perform an actual validation, I didn't add this. But rightly pointed out, this is should be added. \r\n\r\nI was wondering if I should improve the implemented extension tests with at least adding a scan on passed credentials to simulate that validation part of validating a passed down remote url. "", 'comment_created': datetime.datetime(2020, 8, 17, 5, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}, {'comment_id': 475839821, 'comment_body': 'Prefer to retain sentence per line formatting in the README file so that reviews can be sentence oriented.\r\n```suggestion\r\n  If checked, the plugin will disable a feature which recommends a git implementation on the basis of the size of a repository.\r\n  This switch may be used in case of a bug in the performance improvement feature.\r\n  If you enable this setting, please report a git plugin issue that describes why you needed to enable it.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 475840143, 'comment_body': 'Needs to require the git client plugin version that fixes the null pointer exception in `UnsupportedCommand`.\r\n```suggestion\r\n      <version>3.4.2</version>\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}]","[{'commit_sha': 'f477da8a05e025c37259e70b974842522049026f', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e217116acba96637dde6e9a59bf7467387418b13', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a879a881d8d7eb8e34dafac2c8cd0f38eed4ae4', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '008a126dd79ef1f4529ad7806edf4d08c342cabf', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a82f0bc049d4d3c3290aa6b55b001f3725f8ed', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14548cf2774d21853e889f245cbc7863de067b98', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '766d5f024188a5200f6cbaa13b611defd27d29af', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fbdf85cbb98a46594ead14b4d6d09584102cc6e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5703a0c576d3879dd3c22307c4c886846b292ae9', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58ca8e79cfdf92b436af5e7419b9d9f77b6f1311', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2caebec18c48c2153f154c3022a8ea1204a351', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d4433d399f73328a2b8f1acd5add3650219755', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c91f2114597b819c7e164a0bcec2f75d792926bf', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3747e65a243cea06d012e1d2f8328e293069dc7a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90aa2c5be58f4f504657dcf85312c2abc2f1c54b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00c7c335e9fe07b5f42506d9fd7c8e730629f0e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7e25dd45364b8b02b5e854021c0a81e13258f11', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d6d5ff9ca92dc6579fac53b5d906500497820a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af7628656c71c6bdc0e078288945901b167b2a1b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6b2d581167fa68b745b6244e14fc56e49e1ea4b', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab924c00a0b268111a4d6fcec780e512f4cf0e2e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05abccc210d124e2568b7da36b6e8409c532da04', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d25b4ff832e65983d09b54bc6e991f3bc28b9ec', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7408df2f6ae7af1a2dff2d5299e07a33dc8fd5d7', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2fc5838f69a9eae1687c208bb9d37276d46f917', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dfacf73ea73f94edbedd83fc09336a03ac15659', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b26e1b0f981287bbb538338bf9169be7498d9198', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9de6cb445d5af3a98246fdd3e56fb4d408e416', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97d6bf56bafff1b0c558929f073b6afe0158ed63', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5506dbf8241dacacfa57bf6d52efd391bf840c02', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b14791c7109ebe411d4b3c7a7fe52a0c932af09', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27afd3d0e51924f5034f541bd1ec0a8223e96bfd', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f74c4919c4dee9d81b6a06918d3e91693161520', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69bac3c38a31e9d13d7e5c9ca694fee6f0a60de1', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b12cb92592ca4296939012c60b0d3d4a5880cd', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb4adc0a75badb05b88a2227754133ed8c1827e2', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c79f6bc278d2ba4630eece2456965be1cbe82a2', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9cfcb27e1df8f4b547b60ca03af5a1b9ae0c0c8', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2622eef52e655ad46c92b2e336f853061b3422', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '589ce146dc335ff3bc6c1da651243063923fc383', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f83cffa6b9b9b8344f71faa1dcb69f862ed1fe47', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3484e78cf29ef851a56d77918978498431a21732', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b26071d8560c40050f205ad9bb2c84b5556af7a', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b2cb16edd8a7370f7c12f127cbf6be23431030', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8926adc1e676813a61b9905ad6dd543f5e7a2d', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71dba8e3c93fcb62dcd1a518d341f070e20fa880', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2060ad6e23bb14fd6035c843b6390b92cccba5', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '119c84cce323bccb75e0eb134526d501ee12b5c4', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '990b7b9381a7c27fd3079a32bd2dcf69f285f043', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd680ec3151422dfd9dcc8429b2a4d79dd1ef8bb9', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa286e0417dc75f7f4fd4293dc687f6f31806a8', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55d3cb3e05cec15f48c6d4d24f8a05401fcb986', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f9245cc24f00c01f1411cc0ff6b7f1854ad2a9c', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5157fa5f46f991861bb438ed8bafd06afa41ec75', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e679e7543bbf73b56826e9341090d96cba0d375', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e67a6a6732fee18016e94097c4a694e68d56bc', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd057d23b4b423cdc8d2bbbdc2eff3cabb3b1c6b5', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5bff959985f5990eb54ae20338ffd6cb55bbe31', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be916821bf02b8df70ec4984a8bb89dd5ae51e88', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612f55428b7eb9b1ccffe0e96bc3a8b16b28f265', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
463013519,Add a new command: UnsupportedCommand to communicate compatibility of JGit,"This command serves as a way to communicate to the git plugin which git features
are not supported by JGit.

- The reason for not implementing it as a GitCommand implementation is to separate
the need of a `JGitAPIImpl` or `CliGitAPIImpl` to check if a certain additional behaviour
of git is supported or not.
- This class can be instantiated with no need of any information, it can be decorated by a
GitSCMExtension to fill in the features which are not supported.

## How to use it in the Git Plugin? 

- Step 1: Define a function within the GitSCMExtension to be implemented by extensions which are not supported by JGit.
ex: ```public void determineSupportForJGit(GitSCM scm, UnsupportedCommand unsupportedCommand) {
    }```
- Step 2: Let's take GitLFSPull as an example, implement a function called: 
```@Override
    public void determineSupportForJGit(GitSCM scm, UnsupportedCommand cmd) {
        List<RemoteConfig> repos = scm.getRepositories();
        cmd.lfsRemote(repos.get(0).getName()); 
}
```
- Step 3: Use the collected information to determine if JGit can be supported or not using the UnsupportedCommand only.


## Checklist

- [x] I have read the [CONTRIBUTING](https://github.com/jenkinsci/git-client-plugin/blob/master/CONTRIBUTING.adoc) doc
- [x] I have added tests that verify my changes
- [x] Unit tests pass locally with my changes
- [x] I have added documentation as necessary
- [x] No Javadoc warnings were introduced with my changes
- [x] No spotbugs warnings were introduced with my changes
- [x] I have interactively tested my changes

## Types of changes

What types of changes does your code introduce? _Put an `x` in the boxes that apply_

- [x] New feature (non-breaking change which adds functionality)

",True,594,https://api.github.com/repos/jenkinsci/git-client-plugin/pulls/594,https://github.com/jenkinsci/git-client-plugin/pull/594,closed,441,0,2,3,2,0,1,0,[{'name': 'enhancement'}],2020-08-04 21:16:34+00:00,2020-08-07 15:15:01+00:00,237507.0,"2 days, 17:58:27",[],"[{'commit_sha': '6aeb8aaf5426ba144d0414244b86ad2b26857d35', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '737aabcddb83300c1f6875632c990280ec93609b', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40151af35b6285b4a146ef1af9fed0f8deb12da4', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9
472041557,Convert threads from int to Integer in UnsupportedCommand API,"Since the SubmoduleOption has an option of number of threads declared as an `Integer threads`, the `UnsupportedCommand` should expect the same and not the primitive type which could potentially lead to some NPE issues.

## Checklist

- [x] I have read the [CONTRIBUTING](https://github.com/jenkinsci/git-client-plugin/blob/master/CONTRIBUTING.adoc) doc
- [ ] I have referenced the Jira issue related to my changes in one or more commit messages
- [x] I have added tests that verify my changes
- [x] Unit tests pass locally with my changes
- [x] I have added documentation as necessary
- [x] No Javadoc warnings were introduced with my changes
- [x] No spotbugs warnings were introduced with my changes
- [ ] I have interactively tested my changes

## Types of changes

- [x] Bug fix (non-breaking change which fixes an issue)
",True,601,https://api.github.com/repos/jenkinsci/git-client-plugin/pulls/601,https://github.com/jenkinsci/git-client-plugin/pull/601,closed,8,2,2,2,0,2,1,0,[{'name': 'bug'}],2020-08-22 21:28:26+00:00,2020-08-22 22:36:50+00:00,4104.0,1:08:24,"[{'comment_id': 475140256, 'comment_body': 'Does this also need a null pointer check?\r\n```suggestion\r\n        if (threads != 0) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 21, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'MarkEWaite', 'type': 'User'}, {'comment_id': 475140665, 'comment_body': ""Even if we put a check on the null, we'd like to do nothing with the var and return the command itself. I believe in this case it would not make any difference if we catch it or not."", 'comment_created': datetime.datetime(2020, 8, 22, 21, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rishabhBudhouliya', 'type': 'User'}]","[{'commit_sha': '0d9da0403f29439c2405d0052050d45d8671281e', 'committer_username': 'rishabhBudhouliya', 'committer_name': 'Rishabh Budhouliya', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 20, 18, 6, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bc5880fb8fd1d037c35f8bf7b10524771402d8c', 'committer_username': 'MarkEWaite', 'committer_name': 'Mark Waite', 'committer_email': 'mark.earl.waite@gmail.com', 'commit_date': datetime.datetime(2009, 11, 22, 14, 30, 23, tzinfo=datetime.timezone.utc)}]",Rishabh Budhouliya,31189405,,User,,16,,0,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
612587,git-plugin,jenkinsci/git-plugin,Java,1056,667,124,324,5296,19,12,19,"[{'id': 494470313, 'number': 973, 'closed': datetime.datetime(2020, 9, 30, 14, 34, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 29, 0, 24, 57, tzinfo=datetime.timezone.utc), 'time_taken': 137393.0, 'time_delta': '1 day, 14:09:53', 'additions': 24, 'deletions': 7, 'state': 'closed'}, {'id': 492555295, 'number': 967, 'closed': datetime.datetime(2020, 9, 25, 1, 48, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 24, 16, 13, 36, tzinfo=datetime.timezone.utc), 'time_taken': 34486.0, 'time_delta': '9:34:46', 'additions': 55, 'deletions': 14, 'state': 'closed'}, {'id': 490137778, 'number': 963, 'closed': datetime.datetime(2020, 9, 26, 18, 52, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 21, 8, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 468574.0, 'time_delta': '5 days, 10:09:34', 'additions': 96, 'deletions': 4, 'state': 'closed'}, {'id': 488826139, 'number': 958, 'closed': datetime.datetime(2020, 9, 18, 16, 29, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 17, 17, 35, 5, tzinfo=datetime.timezone.utc), 'time_taken': 82466.0, 'time_delta': '22:54:26', 'additions': 295, 'deletions': 17, 'state': 'closed'}, {'id': 479311667, 'number': 949, 'closed': datetime.datetime(2020, 9, 12, 1, 59, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 5, 37, 8, tzinfo=datetime.timezone.utc), 'time_taken': 678121.0, 'time_delta': '7 days, 20:22:01', 'additions': 243, 'deletions': 70, 'state': 'closed'}, {'id': 463153201, 'number': 937, 'closed': datetime.datetime(2020, 8, 19, 22, 0, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 5, 26, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1269258.0, 'time_delta': '14 days, 16:34:18', 'additions': 1403, 'deletions': 0, 'state': 'closed'}, {'id': 459286712, 'number': 934, 'closed': datetime.datetime(2020, 7, 30, 17, 19, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 15, 11, 40, tzinfo=datetime.timezone.utc), 'time_taken': 7661.0, 'time_delta': '2:07:41', 'additions': 1, 'deletions': 13, 'state': 'closed'}, {'id': 453131031, 'number': 931, 'closed': datetime.datetime(2020, 8, 25, 2, 19, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 7, 3, 29, tzinfo=datetime.timezone.utc), 'time_taken': 3093389.0, 'time_delta': '35 days, 19:16:29', 'additions': 813, 'deletions': 32, 'state': 'closed'}, {'id': 443733940, 'number': 927, 'closed': datetime.datetime(2020, 7, 4, 14, 43, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 20, 44, 39, tzinfo=datetime.timezone.utc), 'time_taken': 151149.0, 'time_delta': '1 day, 17:59:09', 'additions': 67, 'deletions': 4, 'state': 'closed'}, {'id': 432341379, 'number': 904, 'closed': datetime.datetime(2020, 7, 2, 3, 41, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 9, 52, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1878559.0, 'time_delta': '21 days, 17:49:19', 'additions': 272, 'deletions': 25, 'state': 'closed'}, {'id': 390917127, 'number': 856, 'closed': datetime.datetime(2020, 9, 27, 15, 44, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 19, 10, 23, 36, tzinfo=datetime.timezone.utc), 'time_taken': 16608046.0, 'time_delta': '192 days, 5:20:46', 'additions': 83, 'deletions': 8, 'state': 'closed'}, {'id': 384683615, 'number': 852, 'closed': datetime.datetime(2020, 3, 9, 20, 20, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 7, 55, 48, tzinfo=datetime.timezone.utc), 'time_taken': 303909.0, 'time_delta': '3 days, 12:25:09', 'additions': 44, 'deletions': 1, 'state': 'closed'}, {'id': 384519510, 'number': 851, 'closed': datetime.datetime(2020, 3, 9, 20, 21, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 21, 53, 11, tzinfo=datetime.timezone.utc), 'time_taken': 340087.0, 'time_delta': '3 days, 22:28:07', 'additions': 51, 'deletions': 1, 'state': 'closed'}, {'id': 379239312, 'number': 845, 'closed': datetime.datetime(2020, 7, 2, 3, 40, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 24, 21, 25, 53, tzinfo=datetime.timezone.utc), 'time_taken': 11081686.0, 'time_delta': '128 days, 6:14:46', 'additions': 135, 'deletions': 0, 'state': 'closed'}, {'id': 377362915, 'number': 841, 'closed': datetime.datetime(2020, 3, 1, 12, 35, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 19, 19, 51, 7, tzinfo=datetime.timezone.utc), 'time_taken': 924281.0, 'time_delta': '10 days, 16:44:41', 'additions': 209, 'deletions': 31, 'state': 'closed'}, {'id': 369277615, 'number': 830, 'closed': datetime.datetime(2020, 12, 10, 4, 24, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 30, 20, 42, 8, tzinfo=datetime.timezone.utc), 'time_taken': 27157340.0, 'time_delta': '314 days, 7:42:20', 'additions': 92, 'deletions': 1, 'state': 'closed'}, {'id': 367218668, 'number': 826, 'closed': datetime.datetime(2020, 1, 27, 12, 46, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 26, 13, 39, 57, tzinfo=datetime.timezone.utc), 'time_taken': 83205.0, 'time_delta': '23:06:45', 'additions': 148, 'deletions': 0, 'state': 'closed'}, {'id': 366013738, 'number': 821, 'closed': datetime.datetime(2020, 1, 22, 20, 41, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 22, 19, 2, 42, tzinfo=datetime.timezone.utc), 'time_taken': 5902.0, 'time_delta': '1:38:22', 'additions': 56, 'deletions': 0, 'state': 'closed'}, {'id': 365482374, 'number': 820, 'closed': datetime.datetime(2020, 1, 22, 18, 54, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 21, 19, 55, 43, tzinfo=datetime.timezone.utc), 'time_taken': 82724.0, 'time_delta': '22:58:44', 'additions': 58, 'deletions': 2, 'state': 'closed'}]"
8263652,git-client-plugin,jenkinsci/git-client-plugin,Java,385,139,115,131,3596,9,12,9,"[{'id': 758392358, 'number': 760, 'closed': datetime.datetime(2021, 10, 16, 9, 1, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 14, 14, 11, 33, tzinfo=datetime.timezone.utc), 'time_taken': 154203.0, 'time_delta': '1 day, 18:50:03', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 490139266, 'number': 615, 'closed': datetime.datetime(2020, 9, 22, 4, 48, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 21, 8, 45, 45, tzinfo=datetime.timezone.utc), 'time_taken': 72145.0, 'time_delta': '20:02:25', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 472041557, 'number': 601, 'closed': datetime.datetime(2020, 8, 22, 22, 36, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 21, 28, 26, tzinfo=datetime.timezone.utc), 'time_taken': 4104.0, 'time_delta': '1:08:24', 'additions': 8, 'deletions': 2, 'state': 'closed'}, {'id': 463013519, 'number': 594, 'closed': datetime.datetime(2020, 8, 7, 15, 15, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 21, 16, 34, tzinfo=datetime.timezone.utc), 'time_taken': 237507.0, 'time_delta': '2 days, 17:58:27', 'additions': 441, 'deletions': 0, 'state': 'closed'}, {'id': 437911911, 'number': 574, 'closed': datetime.datetime(2020, 7, 15, 1, 18, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 12, 33, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1946669.0, 'time_delta': '22 days, 12:44:29', 'additions': 225, 'deletions': 0, 'state': 'closed'}, {'id': 432808388, 'number': 560, 'closed': datetime.datetime(2020, 6, 11, 13, 4, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 2, 57, 46, tzinfo=datetime.timezone.utc), 'time_taken': 36433.0, 'time_delta': '10:07:13', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 426862434, 'number': 556, 'closed': datetime.datetime(2020, 6, 5, 12, 52, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 22, 30, 22, tzinfo=datetime.timezone.utc), 'time_taken': 224545.0, 'time_delta': '2 days, 14:22:25', 'additions': 63, 'deletions': 45, 'state': 'closed'}, {'id': 425463421, 'number': 555, 'closed': datetime.datetime(2020, 6, 1, 0, 21, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 30, 13, 4, 25, tzinfo=datetime.timezone.utc), 'time_taken': 127029.0, 'time_delta': '1 day, 11:17:09', 'additions': 218, 'deletions': 148, 'state': 'closed'}, {'id': 424779200, 'number': 553, 'closed': datetime.datetime(2020, 5, 29, 10, 48, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 22, 56, 28, tzinfo=datetime.timezone.utc), 'time_taken': 42717.0, 'time_delta': '11:51:57', 'additions': 442, 'deletions': 0, 'state': 'closed'}, {'id': 401561832, 'number': 537, 'closed': datetime.datetime(2020, 9, 27, 16, 8, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 9, 17, 50, 35, tzinfo=datetime.timezone.utc), 'time_taken': 14768283.0, 'time_delta': '170 days, 22:18:03', 'additions': 109, 'deletions': 0, 'state': 'closed'}, {'id': 390919095, 'number': 523, 'closed': datetime.datetime(2020, 4, 3, 17, 6, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 19, 10, 27, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1319946.0, 'time_delta': '15 days, 6:39:06', 'additions': 108, 'deletions': 0, 'state': 'closed'}, {'id': 387966504, 'number': 521, 'closed': datetime.datetime(2020, 9, 2, 12, 59, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 20, 29, 16, tzinfo=datetime.timezone.utc), 'time_taken': 14920186.0, 'time_delta': '172 days, 16:29:46', 'additions': 698, 'deletions': 13, 'state': 'closed'}, {'id': 375373523, 'number': 507, 'closed': datetime.datetime(2020, 3, 19, 12, 14, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 14, 12, 50, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2935463.0, 'time_delta': '33 days, 23:24:23', 'additions': 1263, 'deletions': 612, 'state': 'closed'}, {'id': 371635414, 'number': 502, 'closed': datetime.datetime(2020, 2, 8, 18, 1, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 5, 23, 25, 7, tzinfo=datetime.timezone.utc), 'time_taken': 239806.0, 'time_delta': '2 days, 18:36:46', 'additions': 254, 'deletions': 209, 'state': 'closed'}]"
