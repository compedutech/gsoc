pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
467279683,Adding the `pub add` command,"`pub add [--dev] <package>[:^<constraint>] ...`

This pull request uses `package:yaml_edit` to add the ability to add git, hosted, path, and sdk packages to `pubspec.yaml`. In the case of hosted dependencies, we allow the user to add a version constraint. After the dependencies are resolved, a new entry will be added in `pubspec.yaml`.

If no constraints are provided, (e.g. `pub add foo`), we'll do a resolution to find the latest version of foo that is compatible with the other dependencies in your pubspec.yaml, and then that as the lower-bound in a ^x.y.z constraint.

Example: ""pub add retry"" might give you ""retry: ^3.0.1"", if version 3.0.1 of retry is the latest version compatible with your other dependencies.",True,2618,https://api.github.com/repos/dart-lang/pub/pulls/2618,https://github.com/dart-lang/pub/pull/2618,closed,2417,1,18,46,5,82,1,0,[{'name': 'cla: yes'}],2020-08-13 09:56:43+00:00,2020-08-26 16:26:13+00:00,1146570.0,"13 days, 6:29:30","[{'comment_id': 469860244, 'comment_body': 'Do we need to do acquireDependencies if `--dry-run` was passed?', 'comment_created': datetime.datetime(2020, 8, 13, 10, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469860824, 'comment_body': '```suggestion\r\n  /// Creates a new in-memory [Pubspec] by adding [package] to the \r\n  /// dependencies of [original].\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 10, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469861643, 'comment_body': ""```suggestion\r\n  /// ```\r\n```\r\nI don't think that is bash code."", 'comment_created': datetime.datetime(2020, 8, 13, 10, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469883320, 'comment_body': ""hm, I was thinking that this would be in line with what `pub get` does with the `dry-run` flag at the moment, showing what packages will be changed if this new package will be added.\r\n\r\nI did mess up the implementation here though - I should probably be having two paths, with the dry run one not updating the actual pubspec and instead calling `acquireDependencies` from a new entrypoint. \r\n\r\nLet me know what your thoughts are on dry-run and I'll make the changes accordingly!"", 'comment_created': datetime.datetime(2020, 8, 13, 11, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 469884473, 'comment_body': 'I first thought it would be enough to show the changes made to your pubspec, but you are right - other packages might change their locked version.', 'comment_created': datetime.datetime(2020, 8, 13, 11, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469886569, 'comment_body': 'Somehow it would seem nicer to me if `isDevelopment` was passed as a parameter to `_updatePubspec`, that makes it easier to understand in isolation.', 'comment_created': datetime.datetime(2020, 8, 13, 11, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469886875, 'comment_body': 'perhaps rename to `isDev`.', 'comment_created': datetime.datetime(2020, 8, 13, 11, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469905350, 'comment_body': 'Remove commented out code', 'comment_created': datetime.datetime(2020, 8, 13, 12, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469906199, 'comment_body': ""Please leave comment revealing what format the `_contents` should be in.. I almost expect that this YAML :)\r\n\r\nBut documenting how it'll be compared it certainly nice."", 'comment_created': datetime.datetime(2020, 8, 13, 12, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469907725, 'comment_body': 'Could we just return a `Descriptor`, given that `PubspecDescriptor` is an instance of `Descriptor`?\r\n', 'comment_created': datetime.datetime(2020, 8, 13, 12, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469908110, 'comment_body': ""Is this actually a `PubspecDescriptor` ? isn't it more like a `YamlFileDecriptor`? It'll work for any YAML file won't it?"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469910680, 'comment_body': ""Shouldn't we just use `package:yaml` to parse? Is there any need to use `YamlEditor` here?"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469911442, 'comment_body': '```suggestion\r\n  test(""adds an SDK dependency\'s dependencies"", () async {\r\n```\r\n\r\nAnd same changes to other test cases :)\r\n\r\nI assume these are more less copied from some `pub get` tests.', 'comment_created': datetime.datetime(2020, 8, 13, 12, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469913324, 'comment_body': ""I think we need to forbid version constraint when specifying `--sdk <sdk>`.\r\n\r\nWhen a package is installed from the SDK, it is versioned through the `environment.<sdk>` constraint in `pubspec.yaml`.\r\nIe. it's versioned through the SDK constraint your package/app has.\r\n\r\nSo specifying a version constraint on a package that whose source is `sdk` never makes sense.\r\nI think we need to special case this to exit with an error message in `pub add`."", 'comment_created': datetime.datetime(2020, 8, 13, 12, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469914742, 'comment_body': ""Is this actually a valid thing? Do we have other tests that does this?\r\n\r\nI'm probably not familiar with this aspect of `pub`."", 'comment_created': datetime.datetime(2020, 8, 13, 12, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469918769, 'comment_body': 'Can we add a test case with `^1.2.3` constraint?', 'comment_created': datetime.datetime(2020, 8, 13, 12, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469918916, 'comment_body': 'nit, can we add a few more versions to the 3rd-party pub server?', 'comment_created': datetime.datetime(2020, 8, 13, 12, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469920975, 'comment_body': ""Can we add a test case that `pub add foo:^1.2.3 --git-url ../foo.git` won't work..\r\n\r\nAt-least I expect that one cannot have a version constraint if fetching from `git`, and that we have some special handling in place to ensure that the user gets an error message from `pub add`.\r\n\r\nI haven't tested, but I assume that `dependencies: {'mypkg': {'git': {'url': '../foo.get', 'version': '1.2.3'}}}`  will never work in a `pubspec.yaml`, or at-least that the `version` constraint is ignored (as `pub` generally ignores unrecognized keys). I haven't tests, I'm just guessing that this is the case, we probably should test this too :D"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469922203, 'comment_body': ""In this and all the other test cases where we test that `pubAdd` fails. We should probably have an assertion checking that the `pubspec.yaml` have not changed. Ideally, also that we haven't changed neither `pubspec.lock` or `.packages` or `.dart_tool/package_config.json`."", 'comment_created': datetime.datetime(2020, 8, 13, 12, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469923751, 'comment_body': ""Maybe add a few more versions to the server here..\r\n\r\nIt's worth testing a few cases where:\r\n * There is older versions\r\n * There is multiple major versions\r\n * There is newer prereleases (major version)\r\n * There is newer prereleases (minor version)\r\n\r\nJust cover a little bit more ground for the cases where the default logic picks a good version and version constraint."", 'comment_created': datetime.datetime(2020, 8, 13, 12, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469924659, 'comment_body': ""What about testing `pub add foo:<constraint>` in combination with flags like `--git`, `--path` or `--sdk`.\r\nI don't think it makes sense to give a version constraint to `pub add` when the source is not a pub server."", 'comment_created': datetime.datetime(2020, 8, 13, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469933618, 'comment_body': 'Can we make a variant of this, where it picks an older version of `foo` because the latest version is in conflict... so it might pick `0.1.0` of `foo` instead of `1.2.3`.', 'comment_created': datetime.datetime(2020, 8, 13, 13, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469935111, 'comment_body': 'My bad this is for some reason a supported thing:\r\nhttps://dart.dev/tools/pub/dependencies#sdk', 'comment_created': datetime.datetime(2020, 8, 13, 13, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469936715, 'comment_body': ""Nvm, looks like it's a thing... Maybe we should have tests to ensure it works... But that's a different topic."", 'comment_created': datetime.datetime(2020, 8, 13, 13, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469937086, 'comment_body': 'Nvm, version constraints are support even when source only has one version...', 'comment_created': datetime.datetime(2020, 8, 13, 13, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469937368, 'comment_body': 'This is a thing.', 'comment_created': datetime.datetime(2020, 8, 13, 13, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469946028, 'comment_body': ""Let's also try a version constraint that cannot be parsed :D"", 'comment_created': datetime.datetime(2020, 8, 13, 13, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469953259, 'comment_body': 'Also try running `pub get` before running in `pub add` in some test perhaps..', 'comment_created': datetime.datetime(2020, 8, 13, 13, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469955038, 'comment_body': ""Yeah you're right! I'll change it to a `YamlDescriptor`!"", 'comment_created': datetime.datetime(2020, 8, 13, 13, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 469955872, 'comment_body': ""Is this something we're printing in `add.dart` ?\r\n\r\nI think we need to improve this message to explain what is going on.. We probably can't explain why the user got a different version.. but we can say something else perhaps..\r\n\r\n```\r\nfoo resolved to 1.2.2 which does not satisfy constraint 1.2.3, this could be caused by `dependency_overrides`.\r\n```\r\n\r\nAfaik, this is the only reason it can happen, right? or at-least the only we can think of :D"", 'comment_created': datetime.datetime(2020, 8, 13, 13, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469957864, 'comment_body': 'We can improve this message a lot..\r\n\r\nMaybe we advice to call `pub remove foo` before calling `pub add foo`.', 'comment_created': datetime.datetime(2020, 8, 13, 13, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469960016, 'comment_body': 'changed it to use `package:yaml`!', 'comment_created': datetime.datetime(2020, 8, 13, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 469961796, 'comment_body': 'Can we say something like `Add a dependency to pubspec.yaml`', 'comment_created': datetime.datetime(2020, 8, 13, 13, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469975629, 'comment_body': ""Something like  `Use 'pub remove ${package.name} to remove it before adding it to 'dev_dependencies'`"", 'comment_created': datetime.datetime(2020, 8, 13, 14, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469980589, 'comment_body': '```suggestion\r\n        log.message(\'""${package.name}"" was found in `dev_dependencies`. \'\r\n            \'Removing ""${package.name}"" and adding it to `dependencies` instead.\');\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 14, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469983868, 'comment_body': ""```suggestion\r\n          'the latest compatible version available.');\r\n```"", 'comment_created': datetime.datetime(2020, 8, 13, 14, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469984840, 'comment_body': 'We can do better... this is probably due to `dependency_overrides` can we check if `dependency_overrides` is non-empty, and then print this as a possible explanation.\r\n\r\nCertainly we can explain better what happened.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469986144, 'comment_body': 'Will there be conflicts?\r\n\r\nEven if not, we could a resolution in memory, and write `pubspec.yaml` and then touch timestamp on the other files.\r\n\r\nOr we could resolve then write all 3 files in the right order.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 470005455, 'comment_body': 'nit, it might be nice to print which flags are conflicting.\r\n\r\n```dart\r\nfinal _conflictingFlagSets = [\r\n  [\'git-url\', \'git-ref\', \'git-path\'],\r\n  [\'hosted-url\'],\r\n  [\'path\'],\r\n  [\'sdk\'],\r\n];\r\n\r\nfor (final flag in _conflictingFlagSets.expand((s) => s).where(argResult.wasParsed)) {\r\n  final conflictingFlag = _conflictingFlagSets\r\n    .where((s) => !s.contains(flag))\r\n    .expand((s) => s)\r\n    .firstWhere(argResult.wasParsed, orElse: () => null);\r\n  if (conflictingFlag != null) {\r\n    usageException(\'Packages can only have one source, pub add flags ""--$flag"" and ""--$conflictingFlag"" are conflicting.\');\r\n  }\r\n}\r\n```\r\n\r\nBut I\'m sure it can be done smarter than this too :D ', 'comment_created': datetime.datetime(2020, 8, 13, 14, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 470007066, 'comment_body': ""Who catches it if this throws a `FormatException`, I bet we're going to need a test case for this too."", 'comment_created': datetime.datetime(2020, 8, 13, 14, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 470009357, 'comment_body': 'Can these `parseRef` functions throw exceptions? If so who is going to catch them...\r\n\r\nWhat happens if we have a `pub add foo --git-ref` but no `--git-url` or `--git-url """"` or `--git-url !` or some other invalid value?', 'comment_created': datetime.datetime(2020, 8, 13, 14, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 470009970, 'comment_body': ""Having a constraint here is actually allowed, I think, we should probably add tests for this in `pub get` if we don't already.\r\nSame in path dependencies.. it's a bit pointless, but nonetheless allowed."", 'comment_created': datetime.datetime(2020, 8, 13, 14, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 470405663, 'comment_body': 'haha whoops', 'comment_created': datetime.datetime(2020, 8, 14, 4, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 470451886, 'comment_body': ""ah maybe conflicts is not the right word... was thinking about causing `pub run` or other similar commands to have to resolve `pubspec.lock` again. Either way, because we run `acquireDependencies` after updating the `pubspec.yaml`, the timestamps on the other files should resolve correctly. :D\r\n\r\nThe purpose of the comment was more to explain why we don't do something like `acquireDependencies` before writing to the pubspec file!"", 'comment_created': datetime.datetime(2020, 8, 14, 7, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 470455265, 'comment_body': ""haha I'm going to steal this :D"", 'comment_created': datetime.datetime(2020, 8, 14, 7, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 470484542, 'comment_body': 'oh, what will the goal of the test be? If it is to test whether `pub add` performs a no-op in that scenario, I could do something like:\r\n\r\n```dart\r\n    test(\'no-op if the package already exists in the pubspec\', () async {\r\n      await servePackages((builder) => builder.serve(\'foo\', \'1.2.3\'));\r\n\r\n      /// Intentionally give it a version that does not exist in the\r\n      /// server to check that the test does not try to resolve the version,\r\n      /// or a different error will be thrown.\r\n      await d.appDir({\'foo\': \'1.2.2\'}).create();\r\n\r\n      await pubAdd(\r\n          args: [\'foo:1.2.3\'],\r\n          error: contains(\'""foo"" is already in ""dependencies""!\'),\r\n          exitCode: exit_codes.USAGE);\r\n\r\n      await d.dir(appPath, [\r\n        d.nothing(\'.dart_tool/package_config.json\'),\r\n        d.nothing(\'pubspec.lock\'),\r\n        d.nothing(\'.packages\'),\r\n      ]).validate();\r\n    });\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 14, 8, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 470489017, 'comment_body': 'actually, I think in our previous discussions we mentioned that we wanted the `pub add` to override existing version constraints, so ignore the above :O', 'comment_created': datetime.datetime(2020, 8, 14, 8, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 470500655, 'comment_body': ""hm the way we are setting things up, I don't think `parseRef` will throw an exception, because it checks mainly to see if the `git` variable is a String or `Map<String,String>` with the relevant keys, which will always be the case I think...?\r\n\r\nInvalid values for `--git-url` are handled in the `acquireDependencies` function, the same way `pub get` does it at the moment.\r\n\r\nI think what I'll do is to surround the `resolveVersions` call on the in-memory pubspec with a try catch, and on `GitException` I could print out a message asking the user to check the git arguments, and on `SolveFailure` (for path/hosted/sdk) I could print out a message asking the user to generally check the arguments - does this sound good?"", 'comment_created': datetime.datetime(2020, 8, 14, 8, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 470577738, 'comment_body': ""Let's not overwrite in this case... let's instead print a message to go use  `pub upgrade --bump foo`."", 'comment_created': datetime.datetime(2020, 8, 14, 11, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 470578774, 'comment_body': 'there is a case where... we have a dependency on `foo: ^1.2.3` \r\nand the current version is `1.2.3` and the latest available version is `1.2.4`, in this case `pub add foo` should print that we already have a dependency on `foo`, this can be upgraded with `pub upgrade foo`.', 'comment_created': datetime.datetime(2020, 8, 14, 11, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 470579174, 'comment_body': 'This is a usage exception :D', 'comment_created': datetime.datetime(2020, 8, 14, 11, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 470950329, 'comment_body': 'I made a temporary message to use `pub upgrade foo`, with a TODO to revise it later!', 'comment_created': datetime.datetime(2020, 8, 15, 7, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474162690, 'comment_body': ""nit can we add \r\n```suggestion\r\nimport 'dart:io' show Platform;\r\n```"", 'comment_created': datetime.datetime(2020, 8, 20, 17, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474164505, 'comment_body': 'Nice touch!', 'comment_created': datetime.datetime(2020, 8, 20, 17, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474165816, 'comment_body': ""Really, it shouldn't get deleted, does it really?\r\n\r\nThis existing test case doesn't seem to need to do this:\r\nhttps://github.com/dart-lang/pub/blob/93954f33accaa816e6f291916b29c4827a2e465a/test/get/hosted/stay_locked_test.dart#L14-L36\r\n\r\nPerhaps there is something wrong in `pub add`?"", 'comment_created': datetime.datetime(2020, 8, 20, 17, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474168342, 'comment_body': ""Are you sure we shouldn't be using `globalPackageServer.add` instead? Like it's done in:\r\nhttps://github.com/dart-lang/pub/blob/93954f33accaa816e6f291916b29c4827a2e465a/test/get/hosted/unlock_if_new_is_unsatisfied_test.dart#L32-L38"", 'comment_created': datetime.datetime(2020, 8, 20, 17, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474171501, 'comment_body': 'This is the same as adding `foo: any`, and then running `pub upgrade foo` does that really cause `bar` to be upgraded?\r\n', 'comment_created': datetime.datetime(2020, 8, 20, 17, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474175237, 'comment_body': ""Can't we just say something like: `Invalid version constraint: ${e.message}`\r\n\r\nDo we have a test case for this? I don't see any containing this message."", 'comment_created': datetime.datetime(2020, 8, 20, 18, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474175661, 'comment_body': ""```suggestion\r\n        usageException('The `--git-url` is required for git dependencies.');\r\n```"", 'comment_created': datetime.datetime(2020, 8, 20, 18, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474176843, 'comment_body': 'Not sure if this is necessary?\r\n```suggestion\r\n    if (pubspecInformation is Map && constraint != null && constraint != VersionConstraint.any) {\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 20, 18, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474177968, 'comment_body': ""Do we need `isDevelopment` from what I can see you are using `isDev` anyways :D'\r\n\r\nI don't really care either way, if you pass it or use `isDev`. Just as long as we're being consistent."", 'comment_created': datetime.datetime(2020, 8, 20, 18, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474178988, 'comment_body': '```suggestion\r\n            \'Packages can only have one source, `pub add` flags ""--$flag"" and \'\r\n```\r\n\r\nIn general, I think we tend to use ` around CLI commands and flags in messages. We should perhaps look at what other parts of pub is doing, just to be sure we are consistent.', 'comment_created': datetime.datetime(2020, 8, 20, 18, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474179594, 'comment_body': '```suggestion\r\n            \'Use ""pub upgrade ${package.name}"" to upgrade \'\r\n```\r\n\r\nI\'m not a messaging expert, but short and concise is usually better.\r\n\r\nSimilar in other places.. If we can skip `Please` and `if you wish` that might be good.\r\nWe can say `Use ... to ...`', 'comment_created': datetime.datetime(2020, 8, 20, 18, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474181784, 'comment_body': 'Okay, can we update the comment to say: \r\n> Update the `pubspec.yaml` before calling acquireDependencies to ensure that\r\n> the modification timestamp on `pubspec.lock` and `.dart_tool/package_config.json` is\r\n> newer than the `pubspec.yaml`, ensuring that [entrypoint.assertUptoDate] will pass.', 'comment_created': datetime.datetime(2020, 8, 20, 18, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474184606, 'comment_body': ""Don't catch all, when we can catch specific errors.. that way if suddenly it starts throwing something new we have bug which causes a stracktrace. Rather than having a silent bug that we are never going to discover."", 'comment_created': datetime.datetime(2020, 8, 20, 18, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474184662, 'comment_body': ""Shouldn't we be specifying:\r\n```dart\r\n        lockFile: lockFile,\r\n        useLatest: [package.name],\r\n```\r\n\r\nSuch that we don't unlock anything, other than the package being added.\r\n\r\nSo if I have a dependency on `foo` then adding `bar` won't upgrade `foo`, unless upgrading `foo` is required to get some version of `bar`."", 'comment_created': datetime.datetime(2020, 8, 20, 18, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474381031, 'comment_body': 'Modified the message!\r\n\r\nThere was a test `test/common/add_test.dart` at lines 263 - 284 but it tested for `${e.message}` rather than the full error message. Fixed it!', 'comment_created': datetime.datetime(2020, 8, 21, 2, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474382343, 'comment_body': ""strange, I can't seem to trace back where I came to this conclusion. Removed it and the tests are still passing!"", 'comment_created': datetime.datetime(2020, 8, 21, 3, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474383398, 'comment_body': ""ah you're right! was creating a new server without realizing that this `add` function existed - fixed!"", 'comment_created': datetime.datetime(2020, 8, 21, 3, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474384373, 'comment_body': 'Removed the `Please` and `if you wish` from everywhere I could find!', 'comment_created': datetime.datetime(2020, 8, 21, 3, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474384780, 'comment_body': 'Got it!', 'comment_created': datetime.datetime(2020, 8, 21, 3, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474389214, 'comment_body': ""hm I'm open to adding the condition, but because of the way we parsed it above:\r\n```dart\r\nconstraint = splitPackage.length == 2\r\n    ? VersionConstraint.parse(splitPackage[1])\r\n     : null;\r\n```\r\n`constraint` will only take on `VersionConstraint.any` if it is explicitly passed in, so in that case it becomes a question of whether we want to preserve it if explicitly passed in. The one main place I think where it makes a difference is when adding packages hosted on a different pub server (e.g. `pub add foo:any --hosted-url https://pub.foo`), and whether we want it to reflect:\r\n\r\n```\r\nfoo: \r\n  version: any\r\n  hosted: \r\n    name: foo\r\n    url: https://pub.foo\r\n```\r\n\r\nor \r\n\r\n```\r\nfoo: \r\n  version: ^1.2.3\r\n  hosted: \r\n    name: foo\r\n    url: https://pub.foo\r\n```\r\n\r\nIt currently returns the former!"", 'comment_created': datetime.datetime(2020, 8, 21, 3, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474390060, 'comment_body': ""ah I'm passing it as a response to Sigurd's suggestion at https://github.com/dart-lang/pub/pull/2618#discussion_r469886569. Missed a line in the function where I accidentally used `isDev` instead, but it should be fixed now!  "", 'comment_created': datetime.datetime(2020, 8, 21, 3, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474393047, 'comment_body': 'I took a look at the other parts of pub, and it seems to be a tie between double-quotes and backticks for CLI commands, and no quotes for flags, unless it seems to be part of a larger command. \r\n\r\n**CLI commands**\r\n\r\nDouble quotes (non-exhaustive):\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/entrypoint.dart#L530\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/command/deps.dart#L252\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/command/downgrade.dart#L18\r\n\r\nBackticks (non-exhaustive):\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/command/outdated.dart#L535-L548\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/sdk/flutter.dart#L27\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/solver/report.dart#L155\r\n\r\n**Flags**\r\n\r\nNo quotes:\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/global_packages.dart#L632\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/command/downgrade.dart#L43\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/command/get.dart#L43\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/command/global_activate.dart#L57\r\n\r\nBacktick:\r\n1. https://github.com/dart-lang/pub/blob/master/lib/src/validator/null_safety_mixed_mode.dart#L48\r\n\r\nI could create a separate PR to standardize all the CLI commands and flags, just let me know!', 'comment_created': datetime.datetime(2020, 8, 21, 3, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474399845, 'comment_body': ""just ran the following test which passed:\r\n\r\n```dart\r\n    /// The server used to only have the foo v3.2.1 as the latest,\r\n    /// so pub get will create a pubspec.lock to foo 3.2.1\r\n    await servePackages((builder) {\r\n      builder.serve('foo', '3.2.1');\r\n      builder.serve('bar', '1.0.0', deps: {'foo': '^3.2.1'});\r\n    });\r\n\r\n    await d.appDir({'bar': '^1.0.0'}).create();\r\n    await pubGet();\r\n\r\n    globalPackageServer.add((builder) {\r\n      builder.serve('foo', '4.0.0');\r\n      builder.serve('foo', '2.0.0');\r\n      builder.serve('bar', '1.5.0', deps: {'foo': '^4.0.0'});\r\n    });\r\n\r\n    await d.appDir({'bar': '^1.0.0', 'foo': 'any'}).create();\r\n    await d.cacheDir({'bar': '1.0.0', 'foo': '3.2.1'}).validate();\r\n    await d.appPackagesFile({'bar': '1.0.0', 'foo': '3.2.1'}).validate();\r\n\r\n    await pubUpgrade(args: ['foo']);\r\n\r\n    await d.appDir({'foo': 'any', 'bar': '^1.0.0'}).validate();\r\n    await d.cacheDir({'foo': '4.0.0', 'bar': '1.5.0'}).validate();\r\n    await d.appPackagesFile({'foo': '4.0.0', 'bar': '1.5.0'}).validate();\r\n  });\r\n```\r\n\r\nIt seems like `bar` does get upgraded :O"", 'comment_created': datetime.datetime(2020, 8, 21, 4, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474427561, 'comment_body': 'To my understanding, `useLatest` forces the version of `foo` to be the latest, regardless of other constraints! Consider the following tests (tried with both `SolveType.GET` and `SolveType.UPGRADE`, and the lockfile as mentioned):\r\n\r\n1. Dependency override.\r\n```dart\r\n        await servePackages((builder) {\r\n          builder.serve(\'foo\', \'1.2.3\');\r\n          builder.serve(\'foo\', \'1.2.2\');\r\n        });\r\n\r\n        await d.dir(appPath, [\r\n          d.pubspec({\r\n            \'name\': \'myapp\',\r\n            \'dependencies\': {},\r\n            \'dependency_overrides\': {\'foo\': \'1.2.2\'}\r\n          })\r\n        ]).create();\r\n\r\n        await pubAdd(args: [\'foo\']);\r\n\r\n        await d.cacheDir({\'foo\': \'1.2.2\'}).validate();\r\n        await d.appPackagesFile({\'foo\': \'1.2.2\'}).validate();\r\n        await d.dir(appPath, [\r\n          d.pubspec({\r\n            \'name\': \'myapp\',\r\n            \'dependencies\': {\'foo\': \'^1.2.2\'},\r\n            \'dependency_overrides\': {\'foo\': \'1.2.2\'}\r\n          })\r\n        ]).validate();\r\n```\r\n\r\nwhich currently passes, but with the addition of `useLatest`, fails with the message `Because myapp depends on foo <1.2.3-∞ or >1.2.3 but the latest version (1.2.3) is required, version solving failed.`, because it forces `foo` to be `1.2.3` even when `1.2.2` exists.\r\n\r\n2. \r\n\r\n```dart\r\n  test(\r\n      \'empty constraint allows it to choose the latest version not in conflict\',\r\n      () async {\r\n    await servePackages((builder) {\r\n      builder.serve(\'foo\', \'0.1.0\');\r\n      builder.serve(\'foo\', \'1.2.3\', deps: {\'bar\': \'2.0.4\'});\r\n      builder.serve(\'bar\', \'2.0.3\');\r\n      builder.serve(\'bar\', \'2.0.4\');\r\n    });\r\n\r\n    await d.appDir({\'bar\': \'2.0.3\'}).create();\r\n\r\n    await pubAdd(args: [\'foo\']);\r\n\r\n    await d.appDir({\'foo\': \'^0.1.0\', \'bar\': \'2.0.3\'}).validate();\r\n\r\n    await d.cacheDir({\'foo\': \'0.1.0\', \'bar\': \'2.0.3\'}).validate();\r\n    await d.appPackagesFile({\'foo\': \'0.1.0\', \'bar\': \'2.0.3\'}).validate();\r\n  });\r\n```\r\n\r\nwhich currently passes, but with `useLatest` defined, it forces the usage of `foo:1.2.3`, which conflicts with the pubspec and results in an error:\r\n\r\n```bash\r\n[e] SLVR:   fact: foo >=1.2.3 depends on bar 2.0.4\r\n[e] SLVR:   conflict: foo >=1.2.3 depends on bar 2.0.4\r\n[e] SLVR:   ! foo >=1.2.3 is partially satisfied by not foo <1.2.3-∞ or >1.2.3\r\n[e] SLVR:   ! which is caused by ""the latest version of foo (1.2.3) is required""\r\n[e] SLVR:   ! thus: every version of foo requires bar 2.0.4\r\n[e] SLVR:   ! not bar 2.0.4 is satisfied by bar 2.0.3\r\n[e] SLVR:   ! which is caused by ""myapp depends on bar 2.0.3""\r\n[e] SLVR:   ! thus: foo is forbidden\r\n[e] SLVR:   ! foo any is satisfied by foo any\r\n[e] SLVR:   ! which is caused by ""myapp depends on foo any""\r\n[e] SLVR:   ! thus: version solving failed\r\n[e] SLVR: Version solving took 0:00:00.271587 seconds.\r\n[e]     | Tried 1 solutions.\r\n[e] ERR : Because foo >=1.2.3 depends on bar 2.0.4 and the latest version of foo (1.2.3) is required, every version of foo requires bar 2.0.4.\r\n[e]     | So, because myapp depends on both bar 2.0.3 and foo any, version solving failed.\r\n[e] FINE: Exception type: DataException\r\n[e] FINE: package:pub/src/utils.dart 528:35           dataError\r\n[e]     | package:pub/src/command/add.dart 101:7      AddCommand.run\r\n[e]     | ===== asynchronous gap ===========================\r\n[e]     | dart:async                                  Future.catchError\r\n[e]     | package:pub/src/utils.dart 113:52           captureErrors.wrappedCallback\r\n[e]     | package:stack_trace                         Chain.capture\r\n[e]     | package:pub/src/utils.dart 126:11           captureErrors\r\n[e]     | package:pub/src/command_runner.dart 184:13  PubCommandRunner.runCommand\r\n```\r\n\r\nAs such, unless I\'m misunderstanding something about `useLatest`, it doesn\'t seem like it\'s suitable parameter for us to set.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 21, 6, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474428374, 'comment_body': 'Interestingly, I just tried running this test:\r\n\r\n```dart\r\n  test(\'upgrades to the latest version not in conflict\', () async {\r\n    await servePackages((builder) {\r\n      builder.serve(\'foo\', \'1.2.2\');\r\n      builder.serve(\'bar\', \'2.0.3\');\r\n      builder.serve(\'bar\', \'2.0.4\');\r\n    });\r\n\r\n    await d.appDir({\'foo\': \'^1.2.2\', \'bar\': \'2.0.3\'}).create();\r\n\r\n    await pubGet();\r\n\r\n    await d.appDir({\'foo\': \'^1.2.2\', \'bar\': \'2.0.3\'}).validate();\r\n\r\n    await d.cacheDir({\'foo\': \'1.2.2\', \'bar\': \'2.0.3\'}).validate();\r\n    await d.appPackagesFile({\'foo\': \'1.2.2\', \'bar\': \'2.0.3\'}).validate();\r\n\r\n    globalPackageServer.add((builder) {\r\n      builder.serve(\'foo\', \'1.2.3\');\r\n      builder.serve(\'foo\', \'1.2.4\', deps: {\'bar\': \'2.0.4\'});\r\n    });\r\n\r\n    await pubUpgrade(args: [\'foo\']);\r\n  });\r\n```\r\n\r\nand it resulted in an error (i.e. `pub upgrade foo` did not succeed).\r\n\r\n```\r\nProcess `pub upgrade` exited with exitCode 1. Output:\r\n[e] FINE: Pub 0.1.2+3\r\n    MSG : Resolving dependencies...\r\n[e] SLVR: fact: myapp is 0.0.0\r\n[e] SLVR: derived: myapp\r\n[e] SLVR: fact: myapp depends on foo ^1.2.2\r\n[e] SLVR: fact: myapp depends on bar 2.0.3\r\n[e] SLVR:   selecting myapp\r\n[e] SLVR:   derived: bar 2.0.3\r\n[e] SLVR:   derived: foo ^1.2.2\r\n[e] IO  : Get versions from http://localhost:34219/api/packages/foo.\r\n[e] IO  : HTTP GET http://localhost:34219/api/packages/foo\r\n[e]     | Accept: application/vnd.pub.v2+json\r\n[e]     | X-Pub-OS: linux\r\n[e]     | X-Pub-Command: upgrade\r\n[e]     | X-Pub-Session-ID: 00BA9360-670E-4EF1-A632-CBF75873A3E3\r\n[e]     | X-Pub-Environment: test-environment\r\n[e]     | X-Pub-Reason: direct\r\n[e]     | user-agent: Dart pub 0.1.2+3\r\n[e] IO  : HTTP response 200 OK for GET http://localhost:34219/api/packages/foo\r\n[e]     | took 0:00:00.053261\r\n[e]     | transfer-encoding: chunked\r\n[e]     | date: Fri, 21 Aug 2020 06:07:14 GMT\r\n[e]     | x-frame-options: SAMEORIGIN\r\n[e]     | content-type: text/plain; charset=utf-8\r\n[e]     | x-xss-protection: 1; mode=block\r\n[e]     | x-content-type-options: nosniff\r\n[e]     | server: dart:io with Shelf\r\n[e] SLVR:   fact: the latest version of foo (1.2.4) is required\r\n[e] SLVR:   derived: not foo <1.2.4-∞ or >1.2.4\r\n[e] IO  : Get versions from http://localhost:34219/api/packages/bar.\r\n[e] IO  : HTTP GET http://localhost:34219/api/packages/bar\r\n[e]     | Accept: application/vnd.pub.v2+json\r\n[e]     | X-Pub-OS: linux\r\n[e]     | X-Pub-Command: upgrade\r\n[e]     | X-Pub-Session-ID: 00BA9360-670E-4EF1-A632-CBF75873A3E3\r\n[e]     | X-Pub-Environment: test-environment\r\n[e]     | X-Pub-Reason: direct\r\n[e]     | user-agent: Dart pub 0.1.2+3\r\n[e] SLVR:     selecting bar 2.0.3\r\n[e] SLVR:     fact: foo >=1.2.4 depends on bar 2.0.4\r\n[e] SLVR:     conflict: foo >=1.2.4 depends on bar 2.0.4\r\n[e] SLVR:     ! foo >=1.2.4 is partially satisfied by not foo <1.2.4-∞ or >1.2.4\r\n[e] SLVR:     ! which is caused by ""the latest version of foo (1.2.4) is required""\r\n[e] SLVR:     ! thus: every version of foo requires bar 2.0.4\r\n[e] SLVR:     ! foo any is satisfied by foo ^1.2.2\r\n[e] SLVR:     ! which is caused by ""myapp depends on foo ^1.2.2""\r\n[e] SLVR:     ! thus: bar 2.0.4 is required\r\n[e] SLVR:     ! not bar 2.0.4 is satisfied by bar 2.0.3\r\n[e] SLVR:     ! which is caused by ""myapp depends on bar 2.0.3""\r\n[e] SLVR:     ! thus: version solving failed\r\n[e] SLVR: Version solving took 0:00:00.147784 seconds.\r\n[e]     | Tried 1 solutions.\r\n[e] FINE: Resolving dependencies finished (0.167s).\r\n[e] ERR : Because foo >=1.2.4 depends on bar 2.0.4 and the latest version of foo (1.2.4) is required, every version of foo requires bar 2.0.4.\r\n[e]     | So, because myapp depends on both foo ^1.2.2 and bar 2.0.3, version solving failed.\r\n[e] FINE: Exception type: SolveFailure\r\n[e] FINE: package:pub/src/solver/version_solver.dart 312:5   VersionSolver._resolveConflict\r\n[e]     | package:pub/src/solver/version_solver.dart 133:27  VersionSolver._propagate\r\n[e]     | package:pub/src/solver/version_solver.dart 97:11   VersionSolver.solve.<fn>\r\n[e]     | ===== asynchronous gap ===========================\r\n[e]     | dart:async                                         Future.catchError\r\n[e]     | package:pub/src/utils.dart 113:52                  captureErrors.wrappedCallback\r\n[e]     | package:stack_trace                                Chain.capture\r\n[e]     | package:pub/src/utils.dart 126:11                  captureErrors\r\n[e]     | package:pub/src/command_runner.dart 184:13         PubCommandRunner.runCommand\r\n```\r\n\r\nwhereas the following succeeded:\r\n\r\n```dart\r\n  test(\'upgrades to the latest version not in conflict\', () async {\r\n    await servePackages((builder) {\r\n      builder.serve(\'foo\', \'1.2.2\');\r\n      builder.serve(\'bar\', \'2.0.3\');\r\n      builder.serve(\'bar\', \'2.0.4\');\r\n    });\r\n\r\n    await d.appDir({\'foo\': \'^1.2.2\', \'bar\': \'2.0.3\'}).create();\r\n\r\n    await pubGet();\r\n\r\n    await d.appDir({\'foo\': \'^1.2.2\', \'bar\': \'2.0.3\'}).validate();\r\n\r\n    await d.cacheDir({\'foo\': \'1.2.2\', \'bar\': \'2.0.3\'}).validate();\r\n    await d.appPackagesFile({\'foo\': \'1.2.2\', \'bar\': \'2.0.3\'}).validate();\r\n\r\n    globalPackageServer.add((builder) {\r\n      builder.serve(\'foo\', \'1.2.3\');\r\n      builder.serve(\'foo\', \'1.2.4\', deps: {\'bar\': \'2.0.4\'});\r\n    });\r\n\r\n    await pubUpgrade();\r\n\r\n    await d.appDir({\'foo\': \'^1.2.2\', \'bar\': \'2.0.3\'}).validate();\r\n\r\n    await d.cacheDir({\'foo\': \'1.2.3\', \'bar\': \'2.0.3\'}).validate();\r\n    await d.appPackagesFile({\'foo\': \'1.2.3\', \'bar\': \'2.0.3\'}).validate();\r\n  });\r\n```\r\n\r\nis this the intended behavior? I would have expected that if the second test passed that the first test would pass too', 'comment_created': datetime.datetime(2020, 8, 21, 6, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 474584436, 'comment_body': ""Let's not dig into this now, instead trick with some backticks for commands, and flags standing alone maybe don't need any quotation. Ideally we should standardize, but then we should probably find out the right thing to do -- that seem orthogonal and something we could file an issue for and do later."", 'comment_created': datetime.datetime(2020, 8, 21, 9, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474594023, 'comment_body': ""> is this the intended behavior? I would have expected that if the second test passed that the first test would pass too\r\n\r\nMe too :D\r\n\r\nI'm guess `useLatest` has dramatically different semantics from what I thought... I thought it mean discard the lock in `pubspec.lock` for the given package. But clearly doesn't. In the solver it actually has different semantics."", 'comment_created': datetime.datetime(2020, 8, 21, 9, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474644132, 'comment_body': 'Update comment to say: In the case where the user specifies a version constraint this serves to ensure that a resolution exists before we update the `pubspec.yaml`.', 'comment_created': datetime.datetime(2020, 8, 21, 11, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474644671, 'comment_body': 'Okay, I think we happy with current logic..', 'comment_created': datetime.datetime(2020, 8, 21, 11, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474646369, 'comment_body': ""Nit. let's add a version `5.0.0` of foo, that shouldn't change the resolution :D"", 'comment_created': datetime.datetime(2020, 8, 21, 11, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}]","[{'commit_sha': 'e1df039535036a25a7003d63f7b532c5e6083fa0', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '142df547a1e8c39655f84eea81f1174a05780436', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab64868bb7b4d0d17232bf755bc9424ed0a67c2a', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b658efb82f8f381089299282af1fb2c2855e63ac', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4947a403cceebc6f440733781d21e1f5999e8a72', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f4a3e4c9338108228529d2038c8fed2ef30d8f', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d34e8d7fe16ab1af7a027486b37f338c4a0abb', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a8f41a80fd86e2c9da0921f800af19378387e1', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3db5fd3c67f4331f06716c92ebd83d7968e9ff1d', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0fa7dcc11556d50aac73c75e41f04a31cdf0fd', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b1c887ba9206e84d9759b0a6f2ba85ba1d5e92', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '500c3e42f67579e1f2f0e6988165ccae88661b5f', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '960bd878a9cd7c15ab18af91a0592e3adb28075e', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4c68738ab47b1e512c70f38fc08234385e18f56', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2819d27c0611a3b7c777f14915ad6b1596dbd2a9', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4313376fc3a0835f11590a50880451bc824cd978', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590e3878b807e850f3164ad4c7d3cd63fee500a1', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4ba0693ac248d50802830487a13e3f7bbe8a369', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8be1fb96a1cb50c5a9ebb0f6f6c2d39d27ec59f', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5447d03817981b79114ff04dbd03df7e8813b57f', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3df50a15a9d0a90985827c7d5af2be14ef2d574a', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da1fa0022b682ea73ed58110eed17f299b4923ac', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6da410ce35324261d1c1109f1e0920bf949edd', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a61a594d2ada611d3c6dc29c8595abd9ad28ae4', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de275881b66a0af082bd066148c1f855772cca3', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60708a9746f67ecd27362bc1dfaf07c841e49083', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a4dccd2e5fe0a2ef754291ea69454aa21d02f3f', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0b172f47a4e0cf3d7d0b28a2586affe29432122', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9472c6002bb753ae11eaf7a0d25628f872cbfdfb', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5f1a3b61ab382fe46e5a1851a8d84d33681ae16', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14564779bcb71a36abae7006c69c9ed84e310c04', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d9d601f5a9ca695c4a7428e9ab232340fefca4', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b1d6e9826c64ae35426e07ccf941b80f0bcc982', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '622b242fb5067cd824f1b5f798f13dcfb6de6967', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad54168f09c04d30de38d2c46db75b68a1af6656', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89b2913ba8c175813ad89e80582d6aa914ebe93f', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d665108b981064ad251f62e75f85a7281a6761e', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3629cc3dbe97a657b20ae1f389c213bf9f2ffdcd', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85a41ab28152737c5b9c656e2bee733021a73076', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b98f5bb08d46913b35bfd3bd09d5381412d88ff9', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73e935e84bca8037448eeec80315b966fcc595a3', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfb2c82ede899b8f7a300646a6f1690c95c8879e', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e3dd380055163d59697faa7add5409514f10af', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0e6709fd39cd8e291572550b1fa2fc824b0807', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6753ecca8f1a3dcaef1543e4c55e84aa271d684', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fd8ff3f7ee03d0184f39e21c50d7393c4d6833b', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}]",Garett Tok Ern Liang,36098015,,User,,34,,1,8
467382630,Adding a `pub remove` command,"`pub remove <package> ...`

Unlike `pub add`, this command allows you to list multiple packages for removal. ",True,2620,https://api.github.com/repos/dart-lang/pub/pulls/2620,https://github.com/dart-lang/pub/pull/2620,closed,351,2,6,9,0,8,1,0,[{'name': 'cla: yes'}],2020-08-13 13:23:41+00:00,2020-08-27 11:36:35+00:00,1203174.0,"13 days, 22:12:54","[{'comment_id': 474567666, 'comment_body': 'This is the same test as ""prints a warning if package does not exist"", you just check the state of the output and not the warning..\r\n\r\nShould we perhaps collapse these?', 'comment_created': datetime.datetime(2020, 8, 21, 9, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474568617, 'comment_body': ""Can we have other deps like `bar` that isn't removed?\r\n\r\nJust seems like a nice thing to test.."", 'comment_created': datetime.datetime(2020, 8, 21, 9, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474569722, 'comment_body': 'This should probably be the yaml descriptor from the other PR.', 'comment_created': datetime.datetime(2020, 8, 21, 9, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474571448, 'comment_body': 'Let\'s add "" around package name.', 'comment_created': datetime.datetime(2020, 8, 21, 9, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474572524, 'comment_body': 'Let\'s not suggest a spelling error.. if we wanted to be super cool we could compare it to other package names and if something is close to the same name we could write.\r\n""Could not find $package did you mean $otherPackage.', 'comment_created': datetime.datetime(2020, 8, 21, 9, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 474640398, 'comment_body': 'Maybe also say `pubspec.yaml`.', 'comment_created': datetime.datetime(2020, 8, 21, 11, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 477429387, 'comment_body': ""nit: can't we make this a bit more robust by simply doing:\r\n`expect(contents, contains('# comment A'));` and similar for B, C and D,\r\n\r\nThat way we're not relying minor whitespace changes in `package:yaml_edit`, but we are checking that comments are preserved."", 'comment_created': datetime.datetime(2020, 8, 26, 16, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 477449516, 'comment_body': 'hm okay. I initially put it this way because I thought something like:\r\n```\r\n      name: myapp\r\n      dependencies: # comment # comment B\r\n          foo: 1.0.0 # comment C\r\n        # comment D\r\n```\r\n\r\ncould realistically happen but is not what we want, but you have a point. fixing now', 'comment_created': datetime.datetime(2020, 8, 26, 16, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}]","[{'commit_sha': '5bfe84f3d9012e8803893e8207f5ec5a15167d8e', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b49e3266a0c3c411decc613541024ca76ffe52ec', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c99e85eff0f50ece520702e589a2b073f3f5be', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40ab53ecdc0e6e474fd4061efe31fba5d79cd83d', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8d7ea8074d25cca74231885e179374c6b3e6397', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fd2836272b00af463edd98d1c91b1ffb1816634', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b06c50262e09d3eca2190cfa8c159402f771a5f', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f26c70cacf7fa3241c0bef70ae5e234814b19b1b', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3253a704a2d1b891679c28aad630ffb1d05e567a', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}]",Garett Tok Ern Liang,36098015,,User,,34,,1,8
463375906,Fixed license headers,Minor fixes to license headers which had 'd.file' instead of 'file',True,2595,https://api.github.com/repos/dart-lang/pub/pulls/2595,https://github.com/dart-lang/pub/pull/2595,closed,43,43,22,1,0,0,1,0,[{'name': 'cla: yes'}],2020-08-05 13:14:43+00:00,2020-08-06 14:08:45+00:00,89642.0,"1 day, 0:54:02",[],"[{'commit_sha': 'b6cf44c62641b36ddb11b34685d5252a658c6761', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}]",Garett Tok Ern Liang,36098015,,User,,34,,1,8
468282954,"Drop upper bound instead of using ""any"" while resolving in ""pub outdated""","Functions are also moved to a separate file in anticipation for sharing with #2619.

There is a modification to a `pub outdated` test golden file where for the prereleases variation in the test for pub outdated ([here](https://github.com/dart-lang/pub/blob/master/test/outdated/outdated_test.dart#L326:L354)), copied below for convenience:
```dart
test(
      'latest version reported while locked on a prerelease can be a prerelease',
      () async {
    await servePackages((builder) => builder
      ..serve('foo', '0.9.0')
      ..serve('foo', '1.0.0-dev.1')
      ..serve('foo', '1.0.0-dev.2')
      ..serve('bar', '0.9.0')
      ..serve('bar', '1.0.0-dev.1')
      ..serve('bar', '1.0.0-dev.2')
      ..serve('mop', '0.10.0-dev')
      ..serve('mop', '0.10.0')
      ..serve('mop', '1.0.0-dev'));
    await d.dir(appPath, [
      d.pubspec({
        'name': 'app',
        'version': '1.0.1',
        'dependencies': {
          'foo': '1.0.0-dev.1',
          'bar': '^0.9.0',
          'mop': '0.10.0-dev'
        },
      })
    ]).create();

    await pubGet();

    await variations('prereleases');
  });
```

I wanted to check why the corresponding output:

```
Dependencies  Current       Upgradable    Resolvable  Latest       
foo           *1.0.0-dev.1  *1.0.0-dev.1  *0.9.0      1.0.0-dev.2  
mop           *0.10.0-dev   *0.10.0-dev   0.10.0      0.10.0       
```

was correct for its resolvable version - shouldn't it be 1.0.0-dev.2, which is correctly determined in this PR? Let me know if the golden file was in fact correct, and I'll investigate why the behaviour happens.

Closes #2584 ",True,2623,https://api.github.com/repos/dart-lang/pub/pulls/2623,https://github.com/dart-lang/pub/pull/2623,closed,240,88,5,5,0,9,1,0,[{'name': 'cla: yes'}],2020-08-15 09:05:53+00:00,2020-08-21 13:56:44+00:00,535851.0,"6 days, 4:50:51","[{'comment_id': 473947998, 'comment_body': ""```suggestion\r\n  ArgumentError.checkNotNull(original, 'original');\r\n```\r\n\r\nThe string is supposed to be the name of the parameter.\r\n\r\nSimilar in other places."", 'comment_created': datetime.datetime(2020, 8, 20, 12, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 473948891, 'comment_body': ""Can't we just return `Version.none`?"", 'comment_created': datetime.datetime(2020, 8, 20, 12, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 473950334, 'comment_body': '```suggestion\r\nPubspec stripVersionUpperBounds(Pubspec original, {Iterable<String> stripOnly}) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 13, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 473952626, 'comment_body': ""Can't we do `VersionConstraint`? is there any places where it needs to be a `VersionRange`?\r\n```suggestion\r\nVersionConstraint stripUpperBound(VersionConstraint constraint) {\r\n```\r\n\r\nFor testing we can just do `as VersionRange`."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 473953366, 'comment_body': ""This is not what docs say, they say that if specified only those are updated.. I think it's fine to fix the docs and say that if: not specified or empty, then all packages will be upgraded."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 473955038, 'comment_body': ""An `assert(constraint == VersionConstraint.empty, 'unknown constraint type')` might be fair."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 473956236, 'comment_body': "" @sigurdm this is the bug we're fixing."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 473957392, 'comment_body': ""Isn't this a bit more reasonable?\r\n```suggestion\r\n      expect(stripUpperBound(constraint), VersionConstraint.empty);\r\n```"", 'comment_created': datetime.datetime(2020, 8, 20, 13, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 473968977, 'comment_body': 'yeap it should be fine, I got confused with `VersionConstraint.empty`, which does not extend `VersionRange`!', 'comment_created': datetime.datetime(2020, 8, 20, 13, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}]","[{'commit_sha': 'fe1d8c45c178aa3eca89e5e759e244e5b1297287', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fa977a42d46cf76fef09c303f4322645f8b8920', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c351c9dcd2344ef931f44fcc822c6f064f5255c', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21d0bc1d56f9ef51365ed11d24e9dafa36a67d0e', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7665edc91bd551de3c4af7df04657642849cf403', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}]",Garett Tok Ern Liang,36098015,,User,,34,,1,8
467223143,Checks pubspec keys for potential typos,"@jonasfj 

Check potential typos in pubspec keys via the [Sørensen–Dice coefficient](https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient) for two strings. Currently implemented as a validator, which should allow it to run with the lish commands, and can be easily expanded to cover the other commands too!

Fixes: https://github.com/dart-lang/pub/issues/2311
Fixes: https://github.com/dart-lang/pub/issues/1971",True,2616,https://api.github.com/repos/dart-lang/pub/pulls/2616,https://github.com/dart-lang/pub/pull/2616,closed,280,0,5,15,0,28,1,0,[{'name': 'cla: yes'}],2020-08-13 08:10:57+00:00,2020-08-28 10:06:41+00:00,1302944.0,"15 days, 1:55:44","[{'comment_id': 469775980, 'comment_body': 'Can we add an `assert(key != closestKey)` or perhaps add that as a condition in the `if` statement..', 'comment_created': datetime.datetime(2020, 8, 13, 8, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469776111, 'comment_body': '```suggestion\r\n        warnings.add(\'""$key"" is not a key recognizable by pub - \'\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 8, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469776211, 'comment_body': '```suggestion\r\n            \'did you mean ""$closestKey?""\');\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 8, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469776767, 'comment_body': ""Don't we have another warns about `author` and `authors`?"", 'comment_created': datetime.datetime(2020, 8, 13, 8, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469777938, 'comment_body': ""Maybe we should write a tool in `tool/pubspec-field-histogram.dart` that iterates through all pubspecs on pub.dev and makes a histogram counting how frequently top-level keys are used.\r\n\r\nWe shouldn't print typo warnings for deprecated keys, and we kind of want to discover what people are using."", 'comment_created': datetime.datetime(2020, 8, 13, 8, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469779959, 'comment_body': 'Already done :+1: \r\n\r\nname: 14677\r\ndescription: 14677\r\nversion: 14677\r\nhomepage: 14575\r\nenvironment: 13656\r\ndependencies: 12982\r\ndev_dependencies: 11980\r\nflutter: 7328\r\nauthors: 851\r\nauthor: 8455\r\nrepository: 1190\r\nissue_tracker: 521\r\ndocumentation: 520\r\nexecutables: 367\r\ndependency_overrides: 77\r\nscripts: 8\r\nffigen: 1\r\nverified publisher: 4\r\ntargets: 1\r\npublish_to: 58\r\nanalyzer: 12\r\nlicense: 23\r\nlinter: 4\r\nmaintainer: 82\r\ncopyright: 3\r\nemail: 27\r\ndartdoc: 5\r\ncustom: 3\r\ndev_dependecies: 1\r\npublisher: 4\r\npublish: 1\r\nrespsitory: 2\r\nauth: 1\r\n_dependency_overrides: 3\r\nimport_sorter: 1\r\nhomeage: 1\r\nRepository: 1\r\nsdk: 3\r\ndoucumentation: 1\r\nmodule: 8\r\nplugin: 2\r\ngit: 13\r\ndeprecated: 2\r\ndeprecation_message: 2\r\napi: 1\r\nsource: 1\r\nSite: 1\r\ndocs: 1\r\ndev_dependencies_overrides: 1\r\ntransformers: 256\r\nchangelog -x: 1\r\nissues: 2\r\nprotocol: 128\r\nimc_def: 1\r\nrepostory: 2\r\nenvironment_config: 1\r\ntest: 1\r\nstrong-mode: 1\r\nlatest_commit: 1\r\nassets: 2\r\nenable-experiment: 2\r\ndocstring: 3\r\ndartrix: 3\r\ncontributors: 1\r\nreposity: 1\r\nstreams_channel: 1\r\nuploader: 3\r\nCOPYING: 1\r\nLICENSE: 1\r\nUNLICENSE: 1\r\nREADME.MD: 1\r\ngithub: 9\r\nReviewed-by: 1\r\ndependecies: 2\r\n~ pedantic: 1\r\npublishers: 2\r\nflutter_icons: 2\r\nflutter_manifest: 1\r\nauther: 1\r\nautho: 1\r\npubpage: 8\r\noriginauthor: 1\r\noriginhomepage: 1\r\nenv: 1\r\nweb: 9\r\nuses-material-design: 1\r\nflutter_i18n: 2\r\nabout: 1\r\nwebsite: 3\r\nprivate: 1\r\npath: 7\r\nanukeerthi_library: 2\r\nhttp: 1\r\nexcutables: 1\r\ndev_dependency_overrides: 4\r\nrepositiory: 1\r\ndev-dependencies: 2\r\npublish-to: 1\r\nenvirontment: 1\r\nexecutable: 4\r\nchangelogname: 2\r\nghooks: 1\r\nrefit_http: 1\r\njaguar_http: 2\r\ndev_transformers: 1\r\nenviroent: 1\r\nenvironnment: 4\r\ndevDependencies: 2\r\ndev_dependency: 1', 'comment_created': datetime.datetime(2020, 8, 13, 8, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 469781206, 'comment_body': 'Checking for the `author` key was suggested by @sigurdm, since it was a key that was previously recognized, and we are able to detect it and suggest the necessary corrective actions to be taken instead! I could remove it if you want though!', 'comment_created': datetime.datetime(2020, 8, 13, 8, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 469782625, 'comment_body': 'Yes but not avthors', 'comment_created': datetime.datetime(2020, 8, 13, 8, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469783232, 'comment_body': ""```suggestion\r\n        warnings.add('$key is not a key recognized by pub - '\r\n```"", 'comment_created': datetime.datetime(2020, 8, 13, 8, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469783576, 'comment_body': 'if `key == closestKey` then `bestDiceCoefficient = 1.0`, since the two strings should have the same bigrams in that case! ', 'comment_created': datetime.datetime(2020, 8, 13, 8, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 469783606, 'comment_body': '```suggestion\r\n/// Our implementation also works with empty strings and one-character strings.\r\n```\r\n\r\nPerhaps explain what it does with empty and one-character strings.', 'comment_created': datetime.datetime(2020, 8, 13, 8, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469785197, 'comment_body': 'Perhaps there is an argument to be made that we should investigate if this is the best to detect likely typos.\r\nAt-least we should look at what other fuzzy matching applications exists out there.', 'comment_created': datetime.datetime(2020, 8, 13, 8, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 469834533, 'comment_body': 'Added the explanation in - thanks! :)', 'comment_created': datetime.datetime(2020, 8, 13, 9, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 475344260, 'comment_body': 'Just tested with a levenshtein distance implementation, and the results are at: https://gist.github.com/walnutdust/5d0f151025fc986c5606d87fa15d5eb5.\r\n\r\nFrom this it does seem like levenshtein would be the better way to go, and I can code it up once we can confirm this!', 'comment_created': datetime.datetime(2020, 8, 24, 5, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 475681163, 'comment_body': ""I agree this is much better let's go with experiment (2) or (3) from:\r\nhttps://gist.github.com/walnutdust/5d0f151025fc986c5606d87fa15d5eb5"", 'comment_created': datetime.datetime(2020, 8, 24, 15, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 477415034, 'comment_body': ""nit:\r\n```suggestion\r\n  ArgumentError.checkNotNull(s, 's');\r\n  ArgumentError.checkNotNull(t, 't');\r\n```"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 477415684, 'comment_body': 'In this case that might be a bit expensive :D\r\n\r\nnit: having this is probably fine :D', 'comment_created': datetime.datetime(2020, 8, 26, 16, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 477417456, 'comment_body': 'Should we make a quick check:\r\n`if (_validPubspecKeys.contains(key)) { continue; }`\r\n\r\nJust to save some compute time..', 'comment_created': datetime.datetime(2020, 8, 26, 16, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 477417697, 'comment_body': ""I guess we're probably not CPU bound, just seems like a really cheap thing to do :D"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 477419157, 'comment_body': ""Don't we have another thing that warns about `authors` and `author` being deprecated?\r\n\r\nSo now users with `author` key will get 2 warnings... and users with `authoR` will get 2 warnings.\r\nMaybe we just drop this part?"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 477420415, 'comment_body': ""Maybe I suggest that we add at-most 3 typo warnings? So as to not drown all the other warnings?\r\n\r\nWe could even go as far as to say, we only have a warning for the closest typo, and not for more than one.\r\nWDYT?\r\n\r\nI'm mostly concerned we could be drowning all other warnings."", 'comment_created': datetime.datetime(2020, 8, 26, 16, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 478017363, 'comment_body': ""I could remove it, since it's a private function only used in one context and I'm pretty certain the inputs won't ever be null. Let me know!"", 'comment_created': datetime.datetime(2020, 8, 27, 3, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 478023583, 'comment_body': 'sounds good!', 'comment_created': datetime.datetime(2020, 8, 27, 3, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 478026632, 'comment_body': ""I don't think users with `authoR` will get two warnings though, because it's checked with an exact match in `validator/deprecated_fields`, so this should only trigger the typo warning. \r\n\r\nI'm open to both removing this part, or adding a `bestLevenshteinRatio > 0` to ensure that it only picks up typos - let me know!"", 'comment_created': datetime.datetime(2020, 8, 27, 3, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 478042911, 'comment_body': ""hmm because this picks up typos, and we [experimentally validated](https://gist.github.com/walnutdust/5d0f151025fc986c5606d87fa15d5eb5) with real pubspecs that all of the other keys are fine (i.e. no false positives),  it doesn't feel like there will be too many typo warnings.\r\n\r\nI'll do what you suggested and add at most 3 just in case!"", 'comment_created': datetime.datetime(2020, 8, 27, 3, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 478268653, 'comment_body': ""Yeah, let's just remove it here :D"", 'comment_created': datetime.datetime(2020, 8, 27, 9, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 478276977, 'comment_body': ""I propose we drop this part to keep it simple.\r\n\r\nOtherwise, we should make it, an `OR`.\r\n\r\nSo you don't get two warnings.."", 'comment_created': datetime.datetime(2020, 8, 27, 9, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 478277671, 'comment_body': ""I'll drop it then!"", 'comment_created': datetime.datetime(2020, 8, 27, 9, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}]","[{'commit_sha': 'b5bf78ce7c3fa3e8426584a6a4af9ed38f730367', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c75351b02b85695ff8cf017eb720b357124deec', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3483d8f11970c79b82c99d6dcceec77357ffee01', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e239377844a87a0e4e2e962ccb05200b2b02bfb', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb8cba5b760ab11dcd302ccdb958a67d19bbb044', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ea963fb2cf5fe13c7a63b3aa89045b109443655', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fb2ae0f7f91eea7e3f71ac5f68c7456b9130341', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fad6bb1999c040aa9edc34c1abdad180eab126', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd20fb896f9b78e07e865f83e86e9c4373b2572a9', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e49239063ec3169ff398cd14c90e7493d55a877', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e614330446001b21d19de6ff7dcc9553112bab', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a486c509688771f96e61335afe642a10d670755', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc15c7f2ee2db732d9645da8032b0144fe053729', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e9ea8b3dddd61c89899c91d310181549269688c', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdefae8987644d00db8e7601be68601fc7f673f6', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}]",Garett Tok Ern Liang,36098015,,User,,34,,1,8
467274030,Implementation of a `bump` command that bumps the current package version,"Updates the version of the current package in `pubspec.yaml`. By default, it bumps the version up to the nearest stable patch number. Users may pass in the `--major|--minor|--patch`, which bumps the version up to the nearest stable major/minor/patch numbers accordingly. Users may also pass in a version number as an argument, and the version number will be bumped to the argument accordingly.

**Examples**
1. `pub bump` 1.2.3 -> 1.2.4
2. `pub bump` 1.2.3-dev -> 1.2.3
3. `pub bump --major` 1.2.3 -> 2.0.0
4. `pub bump --minor` 1.2.3 -> 1.3.0
5. `pub bump 3.0.0` 1.2.3 -> 3.0.0",False,2617,https://api.github.com/repos/dart-lang/pub/pulls/2617,https://github.com/dart-lang/pub/pull/2617,closed,430,2,8,3,1,6,1,0,[{'name': 'cla: yes'}],2020-08-13 09:45:50+00:00,2022-07-18 10:01:11+00:00,60826521.0,"704 days, 0:15:21","[{'comment_id': 469892532, 'comment_body': ""I wonder if we should do an acquireDependencies here. Otherwise the next `pub run` command will complain that the pubspec.yaml is newer than the pubspec lock.\r\n\r\nGiven that we know the dependencies didn't change, we could also consider rewriting the current `pubspec.lock` (and .packages and .dart_tool/package_config.json) to mark them as uop-to-date.\r\n\r\n@jonasfj opinions?"", 'comment_created': datetime.datetime(2020, 8, 13, 11, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 469903110, 'comment_body': ""> I wonder if we should do an acquireDependencies here. Otherwise the next pub run command will complain that the pubspec.yaml is newer than the pubspec lock.\r\n\r\nWill it? Won't it just do the verification heuristic to verify that `pubspec.lock` is still a resolution that satisfies `pubspec.yaml`.\r\n\r\nMaybe `pub run` will make some noise? I think the assertion checks the timestamps and updates them if there is nothing to be done. And if there is something to be done, then it'll cause a problem. But bumping the version should never causing anything to change (unless you have a cyclic dependency that depends on your specific version of the current package)."", 'comment_created': datetime.datetime(2020, 8, 13, 12, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 471323814, 'comment_body': ""> Won't it just do the verification heuristic to verify that pubspec.lock is still a resolution that satisfies pubspec.yaml.\r\n\r\nAh yes, that should probably be good enough!"", 'comment_created': datetime.datetime(2020, 8, 17, 8, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sigurdm', 'type': 'User'}, {'comment_id': 474672931, 'comment_body': ""```suggestion\r\n  String get invocation => 'pub bump [<version> [--major|--minor|--patch]]';\r\n```"", 'comment_created': datetime.datetime(2020, 8, 21, 12, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}, {'comment_id': 475345130, 'comment_body': ""should this be a `pub bump [version | --major | --minor | --patch]` instead? I'm not sure how `<version>` will interact with the flags"", 'comment_created': datetime.datetime(2020, 8, 24, 5, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'walnutdust', 'type': 'User'}, {'comment_id': 477414560, 'comment_body': 'Exactly, you have right :D', 'comment_created': datetime.datetime(2020, 8, 26, 16, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jonasfj', 'type': 'User'}]","[{'commit_sha': '1e388db9233776082fc99ccbefdb776fd0003cdf', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60544ae85c096f063a1068ab3869751ae7b0315a', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c7b7a1913074b76c82b763bc61a94dee3cdc36b', 'committer_username': 'walnutdust', 'committer_name': 'Garett Tok Ern Liang', 'committer_email': None, 'commit_date': datetime.datetime(2018, 2, 3, 7, 25, 28, tzinfo=datetime.timezone.utc)}]",Garett Tok Ern Liang,36098015,,User,,34,,1,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
35700184,pub,dart-lang/pub,Dart,224,1036,61,117,2716,234,21,12,"[{'id': 513867586, 'number': 2703, 'closed': datetime.datetime(2020, 11, 4, 11, 56, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 2, 7, 47, 40, tzinfo=datetime.timezone.utc), 'time_taken': 187739.0, 'time_delta': '2 days, 4:08:59', 'additions': 19, 'deletions': 16, 'state': 'closed'}, {'id': 476329817, 'number': 2642, 'closed': datetime.datetime(2020, 8, 31, 14, 51, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 14, 19, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1922.0, 'time_delta': '0:32:02', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 476082300, 'number': 2641, 'closed': datetime.datetime(2020, 8, 31, 10, 23, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 6, 26, 50, tzinfo=datetime.timezone.utc), 'time_taken': 14186.0, 'time_delta': '3:56:26', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 476080609, 'number': 2640, 'closed': datetime.datetime(2020, 8, 31, 14, 11, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 6, 23, 41, tzinfo=datetime.timezone.utc), 'time_taken': 28065.0, 'time_delta': '7:47:45', 'additions': 55, 'deletions': 15, 'state': 'closed'}, {'id': 475454086, 'number': 2639, 'closed': datetime.datetime(2020, 8, 31, 12, 56, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 14, 56, 13, tzinfo=datetime.timezone.utc), 'time_taken': 252002.0, 'time_delta': '2 days, 22:00:02', 'additions': 113, 'deletions': 39, 'state': 'closed'}, {'id': 475378034, 'number': 2638, 'closed': datetime.datetime(2020, 8, 31, 9, 53, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 12, 29, 35, tzinfo=datetime.timezone.utc), 'time_taken': 249846.0, 'time_delta': '2 days, 21:24:06', 'additions': 17, 'deletions': 17, 'state': 'closed'}, {'id': 475119448, 'number': 2634, 'closed': datetime.datetime(2020, 12, 1, 18, 38, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 5, 58, 28, tzinfo=datetime.timezone.utc), 'time_taken': 8253586.0, 'time_delta': '95 days, 12:39:46', 'additions': 271, 'deletions': 55, 'state': 'closed'}, {'id': 474741346, 'number': 2633, 'closed': datetime.datetime(2020, 8, 28, 8, 5, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 14, 31, 17, tzinfo=datetime.timezone.utc), 'time_taken': 63249.0, 'time_delta': '17:34:09', 'additions': 2323, 'deletions': 4, 'state': 'closed'}, {'id': 468282954, 'number': 2623, 'closed': datetime.datetime(2020, 8, 21, 13, 56, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 9, 5, 53, tzinfo=datetime.timezone.utc), 'time_taken': 535851.0, 'time_delta': '6 days, 4:50:51', 'additions': 240, 'deletions': 88, 'state': 'closed'}, {'id': 467382630, 'number': 2620, 'closed': datetime.datetime(2020, 8, 27, 11, 36, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 13, 23, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1203174.0, 'time_delta': '13 days, 22:12:54', 'additions': 351, 'deletions': 2, 'state': 'closed'}, {'id': 467284322, 'number': 2619, 'closed': datetime.datetime(2020, 12, 17, 11, 52, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 10, 5, 39, tzinfo=datetime.timezone.utc), 'time_taken': 10892798.0, 'time_delta': '126 days, 1:46:38', 'additions': 695, 'deletions': 67, 'state': 'closed'}, {'id': 467279683, 'number': 2618, 'closed': datetime.datetime(2020, 8, 26, 16, 26, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 9, 56, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1146570.0, 'time_delta': '13 days, 6:29:30', 'additions': 2417, 'deletions': 1, 'state': 'closed'}, {'id': 467274030, 'number': 2617, 'closed': datetime.datetime(2022, 7, 18, 10, 1, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 9, 45, 50, tzinfo=datetime.timezone.utc), 'time_taken': 60826521.0, 'time_delta': '704 days, 0:15:21', 'additions': 430, 'deletions': 2, 'state': 'closed'}, {'id': 467223143, 'number': 2616, 'closed': datetime.datetime(2020, 8, 28, 10, 6, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 8, 10, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1302944.0, 'time_delta': '15 days, 1:55:44', 'additions': 280, 'deletions': 0, 'state': 'closed'}, {'id': 463375906, 'number': 2595, 'closed': datetime.datetime(2020, 8, 6, 14, 8, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 13, 14, 43, tzinfo=datetime.timezone.utc), 'time_taken': 89642.0, 'time_delta': '1 day, 0:54:02', 'additions': 43, 'deletions': 43, 'state': 'closed'}, {'id': 444908159, 'number': 2549, 'closed': datetime.datetime(2020, 8, 11, 5, 26, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 17, 23, 31, tzinfo=datetime.timezone.utc), 'time_taken': 3067385.0, 'time_delta': '35 days, 12:03:05', 'additions': 6752, 'deletions': 1, 'state': 'closed'}]"
