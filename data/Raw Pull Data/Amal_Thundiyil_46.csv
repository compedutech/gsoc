pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
898098409,Make conflicts and diffs consistent,"## Description

- Changed feature's GeoJSON id to be same as JSON path. Example: `dataset:feature:id:U-`
  - This is simpler or atleast less surprising than ids like `U+::123`.
- Added support for `--output` for JSON, text and GeoJSON formats in `kart conflicts`.
  - Added support for writing `kart conflicts` to separate directories according to datasets for GeoJSON output.
- Refactor `kart conflicts` to make use of polymorphism.

## Related links:

- Resolves #135 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,602,https://api.github.com/repos/koordinates/kart/pulls/602,https://github.com/koordinates/kart/pull/602,closed,970,521,16,3,1,14,0,0,[],2022-04-02 16:50:32+00:00,2022-04-04 21:56:30+00:00,191158.0,"2 days, 5:05:58","[{'comment_id': 841326476, 'comment_body': 'I think you need a safer check - make sure the key matches ""something:meta:something"" rather than just making sure it contains the string ""meta""', 'comment_created': datetime.datetime(2022, 4, 4, 2, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 841326613, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2022, 4, 4, 2, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 841332323, 'comment_body': ""This doesn't read quite right.\r\n\r\nIf you and I both try and change the same piece of data, that's one conflict. The change you made and the change I made are different versions - there are two different versions of the data, which makes up the one conflict. Let's write something like this:\r\n\r\ndataset:feature:123:ancestor - the common ancestor version of feature 123\r\ndataset:feature:123:ours - our version of the conflicting change made to feature 123\r\ndataset:feature:123:theirs - their version of the conflicting change made to feature 123"", 'comment_created': datetime.datetime(2022, 4, 4, 2, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 841334141, 'comment_body': ""I've merged this commit to master"", 'comment_created': datetime.datetime(2022, 4, 4, 2, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 841334929, 'comment_body': ""Take this commit out of your pull-request - a PR should really just focus on one thing at a time. Here is an example of why: the windows change you've made isn't enough to fix our windows problem. We do need to use a later version of windows, but we also need to use a later version of Visual Studio, and a couple of other things will need to be changed too to make it all work. Nobody has figured out exactly how to do this yet - if you want to work on it, you can do it in a separate PR. For now, leave it out of this PR."", 'comment_created': datetime.datetime(2022, 4, 4, 3, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 841335080, 'comment_body': 'So, if you rebase or merge with master, this particular diff should disappear.', 'comment_created': datetime.datetime(2022, 4, 4, 3, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 841336228, 'comment_body': ""Keep the default behaviour for output working - if you don't specify output, it should default to stdout."", 'comment_created': datetime.datetime(2022, 4, 4, 3, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 841336921, 'comment_body': 'You\'ve rearranged this expected_geojson a bit but it\'s not obvious to me what\'s changed.\r\nHas anything changed?\r\nIs one of these orders the ""right"" order? I guess it would be good to have it in the order that the code actually prints it... would make the test easier to read...', 'comment_created': datetime.datetime(2022, 4, 4, 3, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 841633524, 'comment_body': 'Sure. Will keep it in mind.', 'comment_created': datetime.datetime(2022, 4, 4, 11, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 841636551, 'comment_body': '> I guess it would be good to have it in the order that the code actually prints it\r\n\r\nRearranged according to this.', 'comment_created': datetime.datetime(2022, 4, 4, 11, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 841647932, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 4, 4, 11, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 842161869, 'comment_body': 'Did anything change?', 'comment_created': datetime.datetime(2022, 4, 4, 21, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 842163117, 'comment_body': 'We should probably also mention that the feature IDs have changed in GEOJSON diff output', 'comment_created': datetime.datetime(2022, 4, 4, 21, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 842267069, 'comment_body': 'Thanks for adding [it](https://github.com/koordinates/kart/commit/e168985271eca136aa12490d89753d177798cccb).', 'comment_created': datetime.datetime(2022, 4, 5, 1, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': 'dd8843791e0a5067c652813992e429d40926dbe0', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7249c5e5daa22faa8772d780bb275334f7333b8b', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f0e369013a05add812fdbf84ec56517dfb1db20', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
881528540,Make schema changes fail gracefully,"## Description
Added logs for conflicts with `geojson` output when parsing `meta-items` which can't be shown as `geojson`. This gives a better error message on using `kart conflicts -ogeojson` for `meta-item` conflicts.

## Related links:
- Fixes #515 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,584,https://api.github.com/repos/koordinates/kart/pulls/584,https://github.com/koordinates/kart/pull/584,closed,33,1,3,1,5,10,0,0,[],2022-03-16 15:54:08+00:00,2022-03-22 20:27:18+00:00,534790.0,"6 days, 4:33:10","[{'comment_id': 830668103, 'comment_body': 'Start a new section:\r\n\r\n## 0.11.2 (UNRELEASED)\r\n\r\n* Bugfix: Better error message on using `kart conflicts -ogeojson` for `meta-item` conflicts. [#515](https://github.com/koordinates/kart/issues/515)\r\n', 'comment_created': datetime.datetime(2022, 3, 20, 20, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 830671832, 'comment_body': 'Thanks for adding a test!', 'comment_created': datetime.datetime(2022, 3, 20, 20, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 830672403, 'comment_body': 'Since converting anything that is not a geographic feature to geojson doesn\'t make sense, these errors could be more to the point eg ""There are meta-item conflicts that cannot be output as geojson."" (""Failed to convert"" makes it seem like we attempted to convert them to geojson, but we don\'t).\r\nThis is a bit too warny right now - it warns about three times per conflict that you have, and each new warning adds no additional information. I would prefer any of the following:\r\n- Warn once per conflict, include the conflict\'s key (but not the version part eg ""ancestor/ours/theirs"")\r\n- Or, Warn once per dataset, include the name of the dataset.\r\n- Or, just warn once if there are dropped meta-items at all.\r\nDoing any of these will make the fix a little bit more complicated. But you can choose whichever one seems easiest or best to you.\r\n\r\nNo need to log the dropped meta items - if the user needs to see them, they can run a command that shows them.', 'comment_created': datetime.datetime(2022, 3, 20, 21, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 830977438, 'comment_body': 'Thanks for the suggestion.', 'comment_created': datetime.datetime(2022, 3, 21, 10, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 831582428, 'comment_body': ""If you have an optional string, prefer to initialise it to None (or if there could be more than one, have an empty collection of strings). Using an empty string is more ambiguous - it might be representing the NULL value, as in, we don't have a string, or it might be a valid value for the string - it depends on the context. So, prefer to use None if you can."", 'comment_created': datetime.datetime(2022, 3, 21, 22, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 831582576, 'comment_body': ""I think your IDE has imported this for you - doesn't look like you are using it"", 'comment_created': datetime.datetime(2022, 3, 21, 22, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 831582966, 'comment_body': ""You'll need to merge or rebase this with your other change now which I've just merged to master for you"", 'comment_created': datetime.datetime(2022, 3, 21, 22, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 831585129, 'comment_body': ""This prints out the last encountered meta-item conflict, regardless of how many there are.\r\nI recommend instead one of the following options: \r\n- print out a single warning (in this case, don't bother to explain what they are at all)\r\n- print out a warning for each dataset with meta-item conflicts (in this case, give the path of the dataset that has a meta-item conflict)\r\n- print out a warning for each meta-item conflict (in this case, print the entire key of the meta-item, but not the version part of it eg ancestor, ours, theirs)"", 'comment_created': datetime.datetime(2022, 3, 21, 22, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 831904402, 'comment_body': 'Sure, will keep this in mind.', 'comment_created': datetime.datetime(2022, 3, 22, 8, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 831911150, 'comment_body': ""> print out a warning for each meta-item conflict (in this case, print the entire key of the meta-item, but not the version part of it eg ancestor, ours, theirs)\r\n\r\nI have made some changes according to this. Let me know if it's what you meant."", 'comment_created': datetime.datetime(2022, 3, 22, 8, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': '91859fc9696a66698028aea5b9975dfc5a8fd394', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
883688984,Minor Improvements to the CLI,"## Description
- Removed the older `upgrade-to-tidy` and `upgrade-to-kart` features which were only relevant to Sno (predecessor of Kart).
- Added support for `--decorate` and `--no-decorate` in `kart log`.
- Fixed minor `pytest` warnings.
- Refactored a conditional to a map (or `dict`) to support more general `args` in `kart log`.

## Related links:
- Fixes #586 
- Fixes #585 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,588,https://api.github.com/repos/koordinates/kart/pulls/588,https://github.com/koordinates/kart/pull/588,closed,304,522,8,4,1,2,0,0,[],2022-03-18 18:16:52+00:00,2022-03-21 22:02:29+00:00,272737.0,"3 days, 3:45:37","[{'comment_id': 830672696, 'comment_body': 'This should be in a new section - ## 0.11.2 (UNRELEASED)', 'comment_created': datetime.datetime(2022, 3, 20, 21, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 830673148, 'comment_body': 'Nice cleanup here', 'comment_created': datetime.datetime(2022, 3, 20, 21, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}]","[{'commit_sha': '3e0670c14dd1913560681f15877cd4489d5edf33', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ee09527ace81f6c1d2b5a1d333588b4e7132e6a', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e58b07b3ddf43dc99ba6d2d2d36a201579e268b', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1009b080e155d0a67b82cc38d776af7df1b6942', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
877560510,Add Sphinx + RTD documentation,"## Description

- Added the Sphinx Documentation making use of existing markdown files.
- Wrote markdown files in reStructuredText file format.
- Few things about the `/docs` directory.
  - All the relevant images and downloads are there in the `docs/_static` folder.
  - All the documentation is in `docs/pages`. It is further split into the `formats` and `references`.
  - All the links are present in the `docs/include/links.rst` (one place for fixing broken links).
- Ran `make py-requirements` to update the python requirements.

## Related links:
- Fixes #220
- You can check the live docs from my fork [here](https://kart-demo.readthedocs.io/en/latest/).

## Checklist:

- [x] Have you reviewed your own change?
- [ ] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,573,https://api.github.com/repos/koordinates/kart/pulls/573,https://github.com/koordinates/kart/pull/573,closed,3813,1289,52,1,4,10,0,0,[],2022-03-11 15:30:28+00:00,2022-03-15 22:07:21+00:00,369413.0,"4 days, 6:36:53","[{'comment_id': 825560491, 'comment_body': '```suggestion\r\nWelcome to the `Kart <kart_website_>`_ documentation. Kart\r\n```', 'comment_created': datetime.datetime(2022, 3, 14, 2, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 825562409, 'comment_body': '```suggestion\r\n* Added support for Sphinx Documentation with Read the Docs for the existing markdown files from the [Github Wiki](https://github.com/koordinates/kart/wiki) and from the `docs` directory. [[#220](https://github.com/koordinates/kart/issues/220)]\r\n```', 'comment_created': datetime.datetime(2022, 3, 14, 3, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 825563080, 'comment_body': ""Need to add this into `HOWTO-RELEASE.md` so the version-number bump doesn't get missed in releases."", 'comment_created': datetime.datetime(2022, 3, 14, 3, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 825564669, 'comment_body': ""I think these belong in a separate file (`requirements/docs.in`) since sphinx is only required to build the docs and isn't required in the final build artifacts. Probably `requirements/dev.in` should include `requirements/docs.in` so devs can easily build docs.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 3, 14, 3, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 825566130, 'comment_body': '```suggestion\r\nWorking Copy Formats\r\n====================\r\n```', 'comment_created': datetime.datetime(2022, 3, 14, 3, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 826439663, 'comment_body': ""this change surprises me - was this change intentional? It might be related to the test failures in CI (not sure)\r\n\r\nHow did you update these .txt files? I think `make py-requirements` is the way we usually do it (although just now I can't see that documented anywhere)"", 'comment_created': datetime.datetime(2022, 3, 14, 22, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 826440694, 'comment_body': 'cc @olsen232, any idea what happened here? Do you think it is responsible for the test fails in CI?', 'comment_created': datetime.datetime(2022, 3, 14, 22, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 826520093, 'comment_body': ""> How did you update these .txt files? I think make py-requirements is the way we usually do it (although just now I can't see that documented anywhere)\r\n\r\nYes, `make py-requirements` was the way I did it too."", 'comment_created': datetime.datetime(2022, 3, 15, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 826835248, 'comment_body': 'I have added `pyodbc==4.0.32`  to `requirements.txt`.', 'comment_created': datetime.datetime(2022, 3, 15, 10, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 827449756, 'comment_body': ""Thanks. I've ticketed the issue at #582"", 'comment_created': datetime.datetime(2022, 3, 15, 21, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}]","[{'commit_sha': '1f8689bed9eb966ee95724c2f642f1c0dcb1617d', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
958908687,Add tab completion for Kart,"## Description

- Supports completion for `refs`, `OutputFormatType`, conflicts and dataset paths.
- To use this PR one needs to setup [shell completion using click](https://click.palletsprojects.com/en/8.1.x/shell-completion/):
```sh
eval ""$(_KART_COMPLETE=<shell_name>_source kart)""
```
For example: to setup click completion for bash:
```sh
eval ""$(_KART_COMPLETE=bash_source kart)""
```
- The existing context in Click's shell complete method creates a different context than what's passed to the commands.  Due to this the `repo` in `ctx.obj` does not exist in the shell complete context. Hence, a new context is created for tab completion in Kart. See [pallets/click#2302 (issue)](https://github.com/pallets/click/issues/2303)

## Related Links
- #643 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?",True,644,https://api.github.com/repos/koordinates/kart/pulls/644,https://github.com/koordinates/kart/pull/644,closed,321,153,21,1,0,5,0,0,[],2022-06-06 10:01:45+00:00,2022-06-16 04:06:37+00:00,842692.0,"9 days, 18:04:52","[{'comment_id': 890701385, 'comment_body': ""I'd suggest matching refs too using itertools.chain\r\n```suggestion\r\n    all_refs = chain(repo.listall_branches(), repo.references)\r\n    return [b for b in all_refs if b.startswith(incomplete)]\r\n```"", 'comment_created': datetime.datetime(2022, 6, 7, 2, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 893063800, 'comment_body': ""I know I suggested this, but ... it looks pretty verbose to show the long variants of the branch names, when the short variants are also included. \r\n\r\nCould we show just the short variant, unless the short variant isn't present or doesn't start with the prefix?\r\n\r\n"", 'comment_created': datetime.datetime(2022, 6, 9, 4, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 893064848, 'comment_body': 'Do other intermediate forms of this also work?\r\neg\r\n`nz_`\r\n`nz_pa_points_topo_150k:feat`\r\n\r\nHow many features does it handle? Does it fall over when there are zillions of them? 😄 ', 'comment_created': datetime.datetime(2022, 6, 9, 4, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 893077091, 'comment_body': ""It's hard to try this out with conflicts (because you first have to create a conflict) but I think the same completer could be applied to `log` for the paths. (e.g. `kart log nz_primary_parcels:feature:8281752` gives you a log of a particular feature)\r\n\r\nUnfortunately those aren't parsed easily since some knowledge of the repo is required to distinguish them from refnames. [code](https://github.com/amal-thundiyil/kart/blob/d5bdf681797e10b1b299f04e4b34c0422492d839/kart/log.py#L372-L373)"", 'comment_created': datetime.datetime(2022, 6, 9, 5, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 895952915, 'comment_body': '> Do other intermediate forms of this also work?\r\n\r\nYes.\r\n\r\n> How many features does it handle? Does it fall over when there are zillions of them? :smile: \r\n\r\nI have tested it only for a couple of conflicts. Not really sure how much it can handle. ', 'comment_created': datetime.datetime(2022, 6, 13, 17, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': '37a3b468875909800c56d06af151eb7f869cb43a', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
963076859,Add `--install-tab-completion` option for installing shell completion,"## Description

The user gets four options to choose from bash, zsh, fish and auto (auto-detects shell using `shellingham`). To activate shell completion run:

```sh
kart config --install-completion auto
```

Replace `auto` with desired shell eg:

```sh
kart config --install-completion zsh
```
Completion will take effect once you restart the terminal

## Related links:

- #643 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,648,https://api.github.com/repos/koordinates/kart/pulls/648,https://github.com/koordinates/kart/pull/648,closed,238,1,10,3,0,9,0,0,[],2022-06-09 15:57:46+00:00,2022-07-04 05:17:27+00:00,2121581.0,"24 days, 13:19:41","[{'comment_id': 897457027, 'comment_body': ""This isn't really an option, but instead it's a subcommand. Sometimes we violate this rule with eg `kart --version` - version isn't really an option either, it's a subcommand - but I think best to avoid this in general, so either add a subcommand eg `kart install-completion` or at least put this option inside a subcommand eg `kart config --install-completion`."", 'comment_created': datetime.datetime(2022, 6, 15, 2, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 897458214, 'comment_body': 'Maybe we should call this ""install-tab-completion"" - for me personally, ""completion"" doesn\'t mean a lot on its own, but tab-completion makes sense.', 'comment_created': datetime.datetime(2022, 6, 15, 2, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 897458519, 'comment_body': 'Install tab-completion...', 'comment_created': datetime.datetime(2022, 6, 15, 2, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 897487344, 'comment_body': 'This looks like mostly the same code as install_bash above. Best practise is to make them both call a helper function that does most of  the work, get rid of the duplicated code', 'comment_created': datetime.datetime(2022, 6, 15, 2, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 897491700, 'comment_body': ""I see there's an install method in click_completion that maybe does something like this and that you don't seem to be calling - but it looks like maybe it's not as good as your one, ie, it doesn't check if it's already installed. Can you confirm?"", 'comment_created': datetime.datetime(2022, 6, 15, 3, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 897592690, 'comment_body': ""Yes, there's code in [click-contrib/click-completion](https://github.com/click-contrib/click-completion/) which does something similar to this (ref [click-completion code](https://github.com/click-contrib/click-completion/blob/a9b705d4f4df4579a96851b2b14b0c59765ef6ce/click_completion/core.py#L319-L381)). I have decided to not use [click-contrib/click-completion](https://github.com/click-contrib/click-completion/) because it seems to predate [Click's shell compeletion](https://click.palletsprojects.com/en/8.1.x/shell-completion/) capabilites. Also maybe worth seeing [click-contrib/click-completion#41 (issue)](https://github.com/click-contrib/click-completion/issues/41)."", 'comment_created': datetime.datetime(2022, 6, 15, 6, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 898442678, 'comment_body': ""This is out of date now that it's called `--install-tab-completion`"", 'comment_created': datetime.datetime(2022, 6, 15, 21, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 899679096, 'comment_body': '@rcoup this looks ok to me but you asked to be in the loop on license changes. 👍 / 👎  ?', 'comment_created': datetime.datetime(2022, 6, 17, 1, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 899915386, 'comment_body': 'Thanks. Yes, all good 👍 ', 'comment_created': datetime.datetime(2022, 6, 17, 8, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rcoup', 'type': 'User'}]","[{'commit_sha': '70c35982a4b72381026293caf3de5cbe414b971a', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65e92c4e92c0a5846c513d961fccf047e69ca40e', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80d593214d200665e81a432f2183536b41f9aeb2', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
974675689,Support tab completion in powershell for kart,"Added tab completion support for Powershell (or `pwsh`). Run the following command to install:
```sh
kart config --install-tab-completion pwsh # (powershell or auto works too)
```

## Related links:
- #643 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,654,https://api.github.com/repos/koordinates/kart/pulls/654,https://github.com/koordinates/kart/pull/654,closed,134,10,7,1,0,2,0,0,[],2022-06-22 07:07:22+00:00,2022-07-04 20:34:25+00:00,1085223.0,"12 days, 13:27:03","[{'comment_id': 911613499, 'comment_body': 'I don\'t think this is a good pattern - text encodings are not designed so that choosing the wrong one will cause the decoding step to fail. In particular, nearly any sequence of bytes can be decoded by windows-1252 - for instance, ""Hello, world"" in Chinese is ""[你好，世界]"" which when encoded using UTF8 is bytes.fromhex(\'e4bda0e5a5bdefbc8ce4b896e7958c\') - and if you decode that using windows-1252, you get ""ä½\\xa0å¥½ï¼Œä¸–ç•Œ""\r\n\r\nI\'m not actually sure what the proper solution is but it\'s probably one of these:\r\n- Use subprocess.run with `text=True`. I think this is equivalent to using subprocess.run with `encoding=locale.getpreferredencoding(False)`\r\n- Use subprocess.run with `encoding=sys.getfilesystemencoding()`\r\nEither of these solutions will just give you `str` objects to deal with so you don\'t have to do the decoding yourself after the subprocess call. \r\n\r\nHowever, when testing this with a file called ""äpfel"" on a windows VM using windows-1252 - I couldn\'t get this to work, running the command ""dir"" listed my file as ""\\x84pfel"" in bytes which as far as I know can\'t be decoded to ""äpfel"" in any encoding, no matter which method we use. Feel free to experiment further or to just pick whatever seems most logical and we\'ll assume that mostly filenames will be ASCII anyway and move on.', 'comment_created': datetime.datetime(2022, 7, 1, 4, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 912780906, 'comment_body': ""check=True means that subprocess.run raises an error if the exit-code is non-zero - either check the return code yourself, or use check=True, but there's no point doing both at once"", 'comment_created': datetime.datetime(2022, 7, 4, 8, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}]","[{'commit_sha': '8e7303a18e7ef8c96acbceae7382a341b51969a1', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
988676045,Add check for `.bash_profile` for MacOS,"## Description

`.bash_profile` seems to ship as a default in some MacOS systems. If the user hasn't sourced the `.bashrc` file in the `.bash_profle` the tab completion scripts my not be activated in the current session. To remedy that we can append to `~/.bash_profile` on Darwin systems instead.

## Related links:
- #643 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?",True,665,https://api.github.com/repos/koordinates/kart/pulls/665,https://github.com/koordinates/kart/pull/665,closed,9,1,2,1,1,2,0,0,[],2022-07-06 11:28:58+00:00,2022-07-11 03:35:14+00:00,403576.0,"4 days, 16:06:16","[{'comment_id': 915249760, 'comment_body': ""Maybe we should be checking what exists - if user has one and not the other, probably it's good to append it to the one they have?"", 'comment_created': datetime.datetime(2022, 7, 6, 20, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 915406273, 'comment_body': ""I'd actually just remove these two lines; the whole tab completion feature is new in this release so we don't need to list all the bugfixes we've applied to it"", 'comment_created': datetime.datetime(2022, 7, 7, 2, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}]","[{'commit_sha': '4909d654a11e9871786b60193985e4b3c0483657', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
986198101,add man-page installation mechanism ,"## Description
Run the following command to build man pages using [click-man](https://github.com/click-contrib/click-man).
```
make man
```
Using [sphinx-click](https://github.com/click-contrib/sphinx-click) to make man pages with `sphinx build` doesn't seem to be ideal as it seems to do a better job rendering HTML than man-style output in comparison to [click-man](https://github.com/click-contrib/click-man). 

## Related links:
- #658 

## Checklist:

- [x] Have you reviewed your own change?
- [ ] Have you included test(s)?
- [ ] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",False,659,https://api.github.com/repos/koordinates/kart/pulls/659,https://github.com/koordinates/kart/pull/659,closed,39,25,6,2,1,4,0,0,[],2022-07-04 09:06:09+00:00,2022-08-19 03:02:36+00:00,3952587.0,"45 days, 17:56:27","[{'comment_id': 912850722, 'comment_body': '@amal-thundiyil where did this come from/what did it get generated by? Need to add source+license info.', 'comment_created': datetime.datetime(2022, 7, 4, 10, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rcoup', 'type': 'User'}, {'comment_id': 912904434, 'comment_body': 'I had made this commit during the pre-proposal phase, so it would be hard to double down on a single source just yet. It would probably be better to exclude [da35aca](https://github.com/koordinates/kart/pull/659/commits/da35aca24bdbf647fbced4aadecf757a0590e5e0) in this PR since it bore more relevance with the sphinx-click integration.', 'comment_created': datetime.datetime(2022, 7, 4, 11, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 913258545, 'comment_body': 'ah, just looked like boilerplate — does it come from sphinx?', 'comment_created': datetime.datetime(2022, 7, 4, 20, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rcoup', 'type': 'User'}, {'comment_id': 913340867, 'comment_body': ""I don't think so. The sphinx boilerplate is smaller."", 'comment_created': datetime.datetime(2022, 7, 5, 2, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': '77cb27b80d554ad22a5d1843e5116625585823ef', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2466be19526176fa312fdc1ecfbc954a02d05589', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1006572254,Add man-style help page renderers for Kart,"## Description

Add man-style pagers instead of click's default help page when calling `--help`. Run `kart init --help` or `kart clone --help`  to see man pages with additional docs sourced from `docs/pages/commands`. The paging methods used are:

- For Windows - `click.echo_via_pager()`
- For POSIX -  `man <path_to_page>`

While experimenting with `click-man`, I also tried using `sphinx-click` for generating man pages but couldn't get much out of it (see [stackoverflow question](https://stackoverflow.com/questions/73104016/is-there-a-programmatic-way-to-get-man-pages-from-sphinx-builder-as-strings)). 

### Design

![Blank diagram (3)](https://user-images.githubusercontent.com/90337323/184100100-fb3adc37-c661-4e55-a213-f241ec53c93e.jpeg)

## Related links:
- #658 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,682,https://api.github.com/repos/koordinates/kart/pulls/682,https://github.com/koordinates/kart/pull/682,closed,666,131,42,10,2,28,0,0,[],2022-07-24 15:51:14+00:00,2022-08-19 03:01:25+00:00,2200211.0,"25 days, 11:10:11","[{'comment_id': 928356010, 'comment_body': 'Use f-strings to get rid of this {0} {1} {2} {3} {4} stuff\r\n\r\nAlso you have\r\n""{1}"" ""1"" \r\nin your format string. Is that a bug? Using f-strings would make it easier to pick up on', 'comment_created': datetime.datetime(2022, 7, 25, 1, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928358475, 'comment_body': 'Guido, benevolent dictator of Python for life, says he prefers to use python\'s built in syntax for this instead of map and lambda. I think it\'s this:\r\nlines = (self.PARAGRAPH_KEYWORD if l == """" else l for l in s.splitlines())', 'comment_created': datetime.datetime(2022, 7, 25, 2, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928361306, 'comment_body': ""In this case (unlike below, sorry) I don't recommend using list comprehensions - they get much harder to read when they nest. Here are some alternatives:\r\n- you could initialise man_page.options as an empty list, and then use a normal for loops to append things to it as you find things that are worth appending\r\n- you could use `filter()`. I think that would look like this:\r\n```\r\nman_page.options = list(filter(p.get_help_record(ctx) for p in ctx.command.params))\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928371315, 'comment_body': ""I think `shutil.which` does this - it might even handle some special cases, but I wouldn't know"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372161, 'comment_body': ""This could do with a bit more explanation -\r\n- why do we need a dummy header, and when/where do we remove it after conversion?\r\nIf it's just needed during conversion, maybe you could do it in the convert_doc_content function, or,\r\nyou could make a variation of that function that adds and removes a dummy headers if needed eg `_convert_doc_content_body`"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372715, 'comment_body': ""I don't think you need to extend `object` any more in python 3 - it just happens anyway"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372786, 'comment_body': 'No need to extend `object`', 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928376315, 'comment_body': 'Maybe add a bit of documentation to the methods that are here so that subclasses can override them', 'comment_created': datetime.datetime(2022, 7, 25, 3, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928379395, 'comment_body': 'Maybe something like this for readability:\r\n```\r\nparts = option.replace(""-"", r""\\-"").split(maxsplit=1)\r\nfirst_part, rest = parts if len(parts) == 2 else (parts[0], """")\r\nlines.append(rf""\\fB{name}\\fP {desc}"")\r\n```\r\nFeel free to give these variables a better name than ""parts"" or ""unpacked"" - I\'m not sure exactly what they are so I don\'t know why the first one should be bold', 'comment_created': datetime.datetime(2022, 7, 25, 3, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928380926, 'comment_body': ""What's going on with the <https:/google.com> here?"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928382647, 'comment_body': ""Maybe add your name to the copyright? I don't actually know what to do here\r\n@rcoup probably knows about licenses"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928383701, 'comment_body': 'Not sure what this is for? Looks like you are appending the empty string to a file', 'comment_created': datetime.datetime(2022, 7, 25, 3, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928384137, 'comment_body': 'Also if you are using pathlib.Path, you can mostly use `write_text` etc instead of open() - a bit simpler to use', 'comment_created': datetime.datetime(2022, 7, 25, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928555170, 'comment_body': ""AFAIK, `write_text` overwrites the file contents. Since we're reading from the docs here to produce the man pages, appending would be better."", 'comment_created': datetime.datetime(2022, 7, 25, 7, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928665752, 'comment_body': '`shutil.which(""groff"")` seems to check the PATH of the Python runtime which may be different from the shell PATH.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928671310, 'comment_body': '> Also you have ""{1}"" ""1"" in your format string. Is that a bug?\r\n\r\nI don\'t think it\'s a bug. Man pages are divided into [sections](https://en.wikipedia.org/wiki/Man_page#Manual_sections). The ""1""  is to show that the command is an executable program or shell command.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 929364341, 'comment_body': ""You don't need `.format()` now"", 'comment_created': datetime.datetime(2022, 7, 25, 22, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929374472, 'comment_body': 'Ok but - what is this for? It looks like you are appending the empty string to a file.\r\nAs a follow up question - if you do actually append some text to this file - what would prevent the file from growing bigger and bigger each time? Do we have to make sure to only run this once, or is the file sometimes recreated from scratch in some way?', 'comment_created': datetime.datetime(2022, 7, 25, 22, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929375166, 'comment_body': 'Do you mean super().format_help? I think this would overflow the stack ', 'comment_created': datetime.datetime(2022, 7, 25, 22, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929382820, 'comment_body': 'Have you seen this give different results to checking os.environ.get(""PATH"")? I didn\'t know that there could be more than one PATH variable in the environment at once. Since you\'re running ""groff"" directly - not via any shell - I would expect shutil.which to do a good job of finding the groff that will be run ', 'comment_created': datetime.datetime(2022, 7, 25, 23, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929444241, 'comment_body': ""if this file is copied from an online source, include the URL in the docstring here (ideally a github blob url with an OID in it so it's clear what exact version it was copied from). No need to adjust the copyright unless you've modified it substantially, in which case perhaps you need to say so here.\r\n\r\nEither way the license for this file remains MIT not GPL. The MIT license actually requires the license text be included in distributed works, so at minimum it should be copied into this docstring I think.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 26, 1, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 929998986, 'comment_body': ""Ah, checked again with a fresh build, works perfectly. Don't know what went wrong before. Thanks."", 'comment_created': datetime.datetime(2022, 7, 26, 13, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 930000520, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2022, 7, 26, 13, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 931618887, 'comment_body': '@rcoup can you double-check this? (license text has now been added to the docstring)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 931637189, 'comment_body': '```suggestion\r\nThis module provides functionality to write a man page from some given\r\ninformation about a CLI application and is modified from click-man.\r\n\r\nhttps://github.com/click-contrib/click-man/tree/3a0684c9d70f94a2abef08fb3f88449dab6aea98\r\n\r\nThe original click-man source is licensed under the MIT License. Changes are\r\nlicensed under the Kart license (GPL).\r\n```\r\n\r\n(repeated for any other files that use non-trivial click-man code)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcoup', 'type': 'User'}, {'comment_id': 947440055, 'comment_body': ""This should never happen since we're depending on `importlib-metadata` in requirements.txt. Maybe move that into requirements.in to make it explicit? With a comment noting it's only needed for python 3.7\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 17, 4, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947443469, 'comment_body': ""I'm wondering what the advantage is of using the entrypoints mechanism here. Why not just \r\n\r\n```suggestion\r\n    from kart import cli\r\n    cli._load_all_commands()\r\n    generate_help_pages(name, input_dir, cli.cli, target_dir=output_dir)\r\n```\r\n\r\nI'd suggest removing the leading underscore from `_load_all_commands` since it's called outside the module."", 'comment_created': datetime.datetime(2022, 8, 17, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947482519, 'comment_body': 'Certainly much better. Thanks :+1:  ', 'comment_created': datetime.datetime(2022, 8, 17, 6, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': '44da72423c784656e3c7f8d13fcadd65c4fc44ec', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bed5e31954924e14ece5d36a89190408a1b53dd', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a1440f20eed3a55a51a21a805d88ab176f57f55', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8dcb19d5b331caffa5cd4168953db28a79f0105', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916e605d4fafd6c4bff28a44d088bae0c25dea8c', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e51c1e2fd4dba665b70462961b10fa04e6f40955', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f319162f8adf97ab09f606f2f05008fb8f8afbe7', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805d9f3eaeca16a2b63c0000014c5545735f8ae', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6e2ac241155a3fdd4496a7a5a164541759fc8e', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a295f3c5f29545cc07e827ac55a5c5e37869bfba', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1007150342,fix: install requirements from `docs.txt` on build,"## Description

Added installation for dependencies from `requirements/docs.txt` as part of the build process.",True,684,https://api.github.com/repos/koordinates/kart/pulls/684,https://github.com/koordinates/kart/pull/684,closed,3,1,1,1,0,0,0,0,[],2022-07-25 11:05:48+00:00,2022-07-26 10:03:18+00:00,82650.0,22:57:30,[],"[{'commit_sha': '229dd391c093be88afbc7ef69a52b5fad6118153', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1006572254,Add man-style help page renderers for Kart,"## Description

Add man-style pagers instead of click's default help page when calling `--help`. Run `kart init --help` or `kart clone --help`  to see man pages with additional docs sourced from `docs/pages/commands`. The paging methods used are:

- For Windows - `click.echo_via_pager()`
- For POSIX -  `man <path_to_page>`

While experimenting with `click-man`, I also tried using `sphinx-click` for generating man pages but couldn't get much out of it (see [stackoverflow question](https://stackoverflow.com/questions/73104016/is-there-a-programmatic-way-to-get-man-pages-from-sphinx-builder-as-strings)). 

### Design

![Blank diagram (3)](https://user-images.githubusercontent.com/90337323/184100100-fb3adc37-c661-4e55-a213-f241ec53c93e.jpeg)

## Related links:
- #658 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,682,https://api.github.com/repos/koordinates/kart/pulls/682,https://github.com/koordinates/kart/pull/682,closed,666,131,42,10,2,28,0,0,[],2022-07-24 15:51:14+00:00,2022-08-19 03:01:25+00:00,2200211.0,"25 days, 11:10:11","[{'comment_id': 928356010, 'comment_body': 'Use f-strings to get rid of this {0} {1} {2} {3} {4} stuff\r\n\r\nAlso you have\r\n""{1}"" ""1"" \r\nin your format string. Is that a bug? Using f-strings would make it easier to pick up on', 'comment_created': datetime.datetime(2022, 7, 25, 1, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928358475, 'comment_body': 'Guido, benevolent dictator of Python for life, says he prefers to use python\'s built in syntax for this instead of map and lambda. I think it\'s this:\r\nlines = (self.PARAGRAPH_KEYWORD if l == """" else l for l in s.splitlines())', 'comment_created': datetime.datetime(2022, 7, 25, 2, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928361306, 'comment_body': ""In this case (unlike below, sorry) I don't recommend using list comprehensions - they get much harder to read when they nest. Here are some alternatives:\r\n- you could initialise man_page.options as an empty list, and then use a normal for loops to append things to it as you find things that are worth appending\r\n- you could use `filter()`. I think that would look like this:\r\n```\r\nman_page.options = list(filter(p.get_help_record(ctx) for p in ctx.command.params))\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928371315, 'comment_body': ""I think `shutil.which` does this - it might even handle some special cases, but I wouldn't know"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372161, 'comment_body': ""This could do with a bit more explanation -\r\n- why do we need a dummy header, and when/where do we remove it after conversion?\r\nIf it's just needed during conversion, maybe you could do it in the convert_doc_content function, or,\r\nyou could make a variation of that function that adds and removes a dummy headers if needed eg `_convert_doc_content_body`"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372715, 'comment_body': ""I don't think you need to extend `object` any more in python 3 - it just happens anyway"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372786, 'comment_body': 'No need to extend `object`', 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928376315, 'comment_body': 'Maybe add a bit of documentation to the methods that are here so that subclasses can override them', 'comment_created': datetime.datetime(2022, 7, 25, 3, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928379395, 'comment_body': 'Maybe something like this for readability:\r\n```\r\nparts = option.replace(""-"", r""\\-"").split(maxsplit=1)\r\nfirst_part, rest = parts if len(parts) == 2 else (parts[0], """")\r\nlines.append(rf""\\fB{name}\\fP {desc}"")\r\n```\r\nFeel free to give these variables a better name than ""parts"" or ""unpacked"" - I\'m not sure exactly what they are so I don\'t know why the first one should be bold', 'comment_created': datetime.datetime(2022, 7, 25, 3, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928380926, 'comment_body': ""What's going on with the <https:/google.com> here?"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928382647, 'comment_body': ""Maybe add your name to the copyright? I don't actually know what to do here\r\n@rcoup probably knows about licenses"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928383701, 'comment_body': 'Not sure what this is for? Looks like you are appending the empty string to a file', 'comment_created': datetime.datetime(2022, 7, 25, 3, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928384137, 'comment_body': 'Also if you are using pathlib.Path, you can mostly use `write_text` etc instead of open() - a bit simpler to use', 'comment_created': datetime.datetime(2022, 7, 25, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928555170, 'comment_body': ""AFAIK, `write_text` overwrites the file contents. Since we're reading from the docs here to produce the man pages, appending would be better."", 'comment_created': datetime.datetime(2022, 7, 25, 7, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928665752, 'comment_body': '`shutil.which(""groff"")` seems to check the PATH of the Python runtime which may be different from the shell PATH.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928671310, 'comment_body': '> Also you have ""{1}"" ""1"" in your format string. Is that a bug?\r\n\r\nI don\'t think it\'s a bug. Man pages are divided into [sections](https://en.wikipedia.org/wiki/Man_page#Manual_sections). The ""1""  is to show that the command is an executable program or shell command.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 929364341, 'comment_body': ""You don't need `.format()` now"", 'comment_created': datetime.datetime(2022, 7, 25, 22, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929374472, 'comment_body': 'Ok but - what is this for? It looks like you are appending the empty string to a file.\r\nAs a follow up question - if you do actually append some text to this file - what would prevent the file from growing bigger and bigger each time? Do we have to make sure to only run this once, or is the file sometimes recreated from scratch in some way?', 'comment_created': datetime.datetime(2022, 7, 25, 22, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929375166, 'comment_body': 'Do you mean super().format_help? I think this would overflow the stack ', 'comment_created': datetime.datetime(2022, 7, 25, 22, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929382820, 'comment_body': 'Have you seen this give different results to checking os.environ.get(""PATH"")? I didn\'t know that there could be more than one PATH variable in the environment at once. Since you\'re running ""groff"" directly - not via any shell - I would expect shutil.which to do a good job of finding the groff that will be run ', 'comment_created': datetime.datetime(2022, 7, 25, 23, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929444241, 'comment_body': ""if this file is copied from an online source, include the URL in the docstring here (ideally a github blob url with an OID in it so it's clear what exact version it was copied from). No need to adjust the copyright unless you've modified it substantially, in which case perhaps you need to say so here.\r\n\r\nEither way the license for this file remains MIT not GPL. The MIT license actually requires the license text be included in distributed works, so at minimum it should be copied into this docstring I think.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 26, 1, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 929998986, 'comment_body': ""Ah, checked again with a fresh build, works perfectly. Don't know what went wrong before. Thanks."", 'comment_created': datetime.datetime(2022, 7, 26, 13, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 930000520, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2022, 7, 26, 13, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 931618887, 'comment_body': '@rcoup can you double-check this? (license text has now been added to the docstring)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 931637189, 'comment_body': '```suggestion\r\nThis module provides functionality to write a man page from some given\r\ninformation about a CLI application and is modified from click-man.\r\n\r\nhttps://github.com/click-contrib/click-man/tree/3a0684c9d70f94a2abef08fb3f88449dab6aea98\r\n\r\nThe original click-man source is licensed under the MIT License. Changes are\r\nlicensed under the Kart license (GPL).\r\n```\r\n\r\n(repeated for any other files that use non-trivial click-man code)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcoup', 'type': 'User'}, {'comment_id': 947440055, 'comment_body': ""This should never happen since we're depending on `importlib-metadata` in requirements.txt. Maybe move that into requirements.in to make it explicit? With a comment noting it's only needed for python 3.7\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 17, 4, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947443469, 'comment_body': ""I'm wondering what the advantage is of using the entrypoints mechanism here. Why not just \r\n\r\n```suggestion\r\n    from kart import cli\r\n    cli._load_all_commands()\r\n    generate_help_pages(name, input_dir, cli.cli, target_dir=output_dir)\r\n```\r\n\r\nI'd suggest removing the leading underscore from `_load_all_commands` since it's called outside the module."", 'comment_created': datetime.datetime(2022, 8, 17, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947482519, 'comment_body': 'Certainly much better. Thanks :+1:  ', 'comment_created': datetime.datetime(2022, 8, 17, 6, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': '44da72423c784656e3c7f8d13fcadd65c4fc44ec', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bed5e31954924e14ece5d36a89190408a1b53dd', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a1440f20eed3a55a51a21a805d88ab176f57f55', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8dcb19d5b331caffa5cd4168953db28a79f0105', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916e605d4fafd6c4bff28a44d088bae0c25dea8c', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e51c1e2fd4dba665b70462961b10fa04e6f40955', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f319162f8adf97ab09f606f2f05008fb8f8afbe7', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805d9f3eaeca16a2b63c0000014c5545735f8ae', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6e2ac241155a3fdd4496a7a5a164541759fc8e', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a295f3c5f29545cc07e827ac55a5c5e37869bfba', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1006572254,Add man-style help page renderers for Kart,"## Description

Add man-style pagers instead of click's default help page when calling `--help`. Run `kart init --help` or `kart clone --help`  to see man pages with additional docs sourced from `docs/pages/commands`. The paging methods used are:

- For Windows - `click.echo_via_pager()`
- For POSIX -  `man <path_to_page>`

While experimenting with `click-man`, I also tried using `sphinx-click` for generating man pages but couldn't get much out of it (see [stackoverflow question](https://stackoverflow.com/questions/73104016/is-there-a-programmatic-way-to-get-man-pages-from-sphinx-builder-as-strings)). 

### Design

![Blank diagram (3)](https://user-images.githubusercontent.com/90337323/184100100-fb3adc37-c661-4e55-a213-f241ec53c93e.jpeg)

## Related links:
- #658 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,682,https://api.github.com/repos/koordinates/kart/pulls/682,https://github.com/koordinates/kart/pull/682,closed,666,131,42,10,2,28,0,0,[],2022-07-24 15:51:14+00:00,2022-08-19 03:01:25+00:00,2200211.0,"25 days, 11:10:11","[{'comment_id': 928356010, 'comment_body': 'Use f-strings to get rid of this {0} {1} {2} {3} {4} stuff\r\n\r\nAlso you have\r\n""{1}"" ""1"" \r\nin your format string. Is that a bug? Using f-strings would make it easier to pick up on', 'comment_created': datetime.datetime(2022, 7, 25, 1, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928358475, 'comment_body': 'Guido, benevolent dictator of Python for life, says he prefers to use python\'s built in syntax for this instead of map and lambda. I think it\'s this:\r\nlines = (self.PARAGRAPH_KEYWORD if l == """" else l for l in s.splitlines())', 'comment_created': datetime.datetime(2022, 7, 25, 2, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928361306, 'comment_body': ""In this case (unlike below, sorry) I don't recommend using list comprehensions - they get much harder to read when they nest. Here are some alternatives:\r\n- you could initialise man_page.options as an empty list, and then use a normal for loops to append things to it as you find things that are worth appending\r\n- you could use `filter()`. I think that would look like this:\r\n```\r\nman_page.options = list(filter(p.get_help_record(ctx) for p in ctx.command.params))\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928371315, 'comment_body': ""I think `shutil.which` does this - it might even handle some special cases, but I wouldn't know"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372161, 'comment_body': ""This could do with a bit more explanation -\r\n- why do we need a dummy header, and when/where do we remove it after conversion?\r\nIf it's just needed during conversion, maybe you could do it in the convert_doc_content function, or,\r\nyou could make a variation of that function that adds and removes a dummy headers if needed eg `_convert_doc_content_body`"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372715, 'comment_body': ""I don't think you need to extend `object` any more in python 3 - it just happens anyway"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372786, 'comment_body': 'No need to extend `object`', 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928376315, 'comment_body': 'Maybe add a bit of documentation to the methods that are here so that subclasses can override them', 'comment_created': datetime.datetime(2022, 7, 25, 3, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928379395, 'comment_body': 'Maybe something like this for readability:\r\n```\r\nparts = option.replace(""-"", r""\\-"").split(maxsplit=1)\r\nfirst_part, rest = parts if len(parts) == 2 else (parts[0], """")\r\nlines.append(rf""\\fB{name}\\fP {desc}"")\r\n```\r\nFeel free to give these variables a better name than ""parts"" or ""unpacked"" - I\'m not sure exactly what they are so I don\'t know why the first one should be bold', 'comment_created': datetime.datetime(2022, 7, 25, 3, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928380926, 'comment_body': ""What's going on with the <https:/google.com> here?"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928382647, 'comment_body': ""Maybe add your name to the copyright? I don't actually know what to do here\r\n@rcoup probably knows about licenses"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928383701, 'comment_body': 'Not sure what this is for? Looks like you are appending the empty string to a file', 'comment_created': datetime.datetime(2022, 7, 25, 3, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928384137, 'comment_body': 'Also if you are using pathlib.Path, you can mostly use `write_text` etc instead of open() - a bit simpler to use', 'comment_created': datetime.datetime(2022, 7, 25, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928555170, 'comment_body': ""AFAIK, `write_text` overwrites the file contents. Since we're reading from the docs here to produce the man pages, appending would be better."", 'comment_created': datetime.datetime(2022, 7, 25, 7, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928665752, 'comment_body': '`shutil.which(""groff"")` seems to check the PATH of the Python runtime which may be different from the shell PATH.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928671310, 'comment_body': '> Also you have ""{1}"" ""1"" in your format string. Is that a bug?\r\n\r\nI don\'t think it\'s a bug. Man pages are divided into [sections](https://en.wikipedia.org/wiki/Man_page#Manual_sections). The ""1""  is to show that the command is an executable program or shell command.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 929364341, 'comment_body': ""You don't need `.format()` now"", 'comment_created': datetime.datetime(2022, 7, 25, 22, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929374472, 'comment_body': 'Ok but - what is this for? It looks like you are appending the empty string to a file.\r\nAs a follow up question - if you do actually append some text to this file - what would prevent the file from growing bigger and bigger each time? Do we have to make sure to only run this once, or is the file sometimes recreated from scratch in some way?', 'comment_created': datetime.datetime(2022, 7, 25, 22, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929375166, 'comment_body': 'Do you mean super().format_help? I think this would overflow the stack ', 'comment_created': datetime.datetime(2022, 7, 25, 22, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929382820, 'comment_body': 'Have you seen this give different results to checking os.environ.get(""PATH"")? I didn\'t know that there could be more than one PATH variable in the environment at once. Since you\'re running ""groff"" directly - not via any shell - I would expect shutil.which to do a good job of finding the groff that will be run ', 'comment_created': datetime.datetime(2022, 7, 25, 23, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929444241, 'comment_body': ""if this file is copied from an online source, include the URL in the docstring here (ideally a github blob url with an OID in it so it's clear what exact version it was copied from). No need to adjust the copyright unless you've modified it substantially, in which case perhaps you need to say so here.\r\n\r\nEither way the license for this file remains MIT not GPL. The MIT license actually requires the license text be included in distributed works, so at minimum it should be copied into this docstring I think.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 26, 1, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 929998986, 'comment_body': ""Ah, checked again with a fresh build, works perfectly. Don't know what went wrong before. Thanks."", 'comment_created': datetime.datetime(2022, 7, 26, 13, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 930000520, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2022, 7, 26, 13, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 931618887, 'comment_body': '@rcoup can you double-check this? (license text has now been added to the docstring)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 931637189, 'comment_body': '```suggestion\r\nThis module provides functionality to write a man page from some given\r\ninformation about a CLI application and is modified from click-man.\r\n\r\nhttps://github.com/click-contrib/click-man/tree/3a0684c9d70f94a2abef08fb3f88449dab6aea98\r\n\r\nThe original click-man source is licensed under the MIT License. Changes are\r\nlicensed under the Kart license (GPL).\r\n```\r\n\r\n(repeated for any other files that use non-trivial click-man code)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcoup', 'type': 'User'}, {'comment_id': 947440055, 'comment_body': ""This should never happen since we're depending on `importlib-metadata` in requirements.txt. Maybe move that into requirements.in to make it explicit? With a comment noting it's only needed for python 3.7\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 17, 4, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947443469, 'comment_body': ""I'm wondering what the advantage is of using the entrypoints mechanism here. Why not just \r\n\r\n```suggestion\r\n    from kart import cli\r\n    cli._load_all_commands()\r\n    generate_help_pages(name, input_dir, cli.cli, target_dir=output_dir)\r\n```\r\n\r\nI'd suggest removing the leading underscore from `_load_all_commands` since it's called outside the module."", 'comment_created': datetime.datetime(2022, 8, 17, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947482519, 'comment_body': 'Certainly much better. Thanks :+1:  ', 'comment_created': datetime.datetime(2022, 8, 17, 6, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': '44da72423c784656e3c7f8d13fcadd65c4fc44ec', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bed5e31954924e14ece5d36a89190408a1b53dd', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a1440f20eed3a55a51a21a805d88ab176f57f55', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8dcb19d5b331caffa5cd4168953db28a79f0105', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916e605d4fafd6c4bff28a44d088bae0c25dea8c', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e51c1e2fd4dba665b70462961b10fa04e6f40955', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f319162f8adf97ab09f606f2f05008fb8f8afbe7', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805d9f3eaeca16a2b63c0000014c5545735f8ae', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6e2ac241155a3fdd4496a7a5a164541759fc8e', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a295f3c5f29545cc07e827ac55a5c5e37869bfba', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1006572254,Add man-style help page renderers for Kart,"## Description

Add man-style pagers instead of click's default help page when calling `--help`. Run `kart init --help` or `kart clone --help`  to see man pages with additional docs sourced from `docs/pages/commands`. The paging methods used are:

- For Windows - `click.echo_via_pager()`
- For POSIX -  `man <path_to_page>`

While experimenting with `click-man`, I also tried using `sphinx-click` for generating man pages but couldn't get much out of it (see [stackoverflow question](https://stackoverflow.com/questions/73104016/is-there-a-programmatic-way-to-get-man-pages-from-sphinx-builder-as-strings)). 

### Design

![Blank diagram (3)](https://user-images.githubusercontent.com/90337323/184100100-fb3adc37-c661-4e55-a213-f241ec53c93e.jpeg)

## Related links:
- #658 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,682,https://api.github.com/repos/koordinates/kart/pulls/682,https://github.com/koordinates/kart/pull/682,closed,666,131,42,10,2,28,0,0,[],2022-07-24 15:51:14+00:00,2022-08-19 03:01:25+00:00,2200211.0,"25 days, 11:10:11","[{'comment_id': 928356010, 'comment_body': 'Use f-strings to get rid of this {0} {1} {2} {3} {4} stuff\r\n\r\nAlso you have\r\n""{1}"" ""1"" \r\nin your format string. Is that a bug? Using f-strings would make it easier to pick up on', 'comment_created': datetime.datetime(2022, 7, 25, 1, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928358475, 'comment_body': 'Guido, benevolent dictator of Python for life, says he prefers to use python\'s built in syntax for this instead of map and lambda. I think it\'s this:\r\nlines = (self.PARAGRAPH_KEYWORD if l == """" else l for l in s.splitlines())', 'comment_created': datetime.datetime(2022, 7, 25, 2, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928361306, 'comment_body': ""In this case (unlike below, sorry) I don't recommend using list comprehensions - they get much harder to read when they nest. Here are some alternatives:\r\n- you could initialise man_page.options as an empty list, and then use a normal for loops to append things to it as you find things that are worth appending\r\n- you could use `filter()`. I think that would look like this:\r\n```\r\nman_page.options = list(filter(p.get_help_record(ctx) for p in ctx.command.params))\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928371315, 'comment_body': ""I think `shutil.which` does this - it might even handle some special cases, but I wouldn't know"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372161, 'comment_body': ""This could do with a bit more explanation -\r\n- why do we need a dummy header, and when/where do we remove it after conversion?\r\nIf it's just needed during conversion, maybe you could do it in the convert_doc_content function, or,\r\nyou could make a variation of that function that adds and removes a dummy headers if needed eg `_convert_doc_content_body`"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372715, 'comment_body': ""I don't think you need to extend `object` any more in python 3 - it just happens anyway"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372786, 'comment_body': 'No need to extend `object`', 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928376315, 'comment_body': 'Maybe add a bit of documentation to the methods that are here so that subclasses can override them', 'comment_created': datetime.datetime(2022, 7, 25, 3, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928379395, 'comment_body': 'Maybe something like this for readability:\r\n```\r\nparts = option.replace(""-"", r""\\-"").split(maxsplit=1)\r\nfirst_part, rest = parts if len(parts) == 2 else (parts[0], """")\r\nlines.append(rf""\\fB{name}\\fP {desc}"")\r\n```\r\nFeel free to give these variables a better name than ""parts"" or ""unpacked"" - I\'m not sure exactly what they are so I don\'t know why the first one should be bold', 'comment_created': datetime.datetime(2022, 7, 25, 3, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928380926, 'comment_body': ""What's going on with the <https:/google.com> here?"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928382647, 'comment_body': ""Maybe add your name to the copyright? I don't actually know what to do here\r\n@rcoup probably knows about licenses"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928383701, 'comment_body': 'Not sure what this is for? Looks like you are appending the empty string to a file', 'comment_created': datetime.datetime(2022, 7, 25, 3, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928384137, 'comment_body': 'Also if you are using pathlib.Path, you can mostly use `write_text` etc instead of open() - a bit simpler to use', 'comment_created': datetime.datetime(2022, 7, 25, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928555170, 'comment_body': ""AFAIK, `write_text` overwrites the file contents. Since we're reading from the docs here to produce the man pages, appending would be better."", 'comment_created': datetime.datetime(2022, 7, 25, 7, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928665752, 'comment_body': '`shutil.which(""groff"")` seems to check the PATH of the Python runtime which may be different from the shell PATH.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928671310, 'comment_body': '> Also you have ""{1}"" ""1"" in your format string. Is that a bug?\r\n\r\nI don\'t think it\'s a bug. Man pages are divided into [sections](https://en.wikipedia.org/wiki/Man_page#Manual_sections). The ""1""  is to show that the command is an executable program or shell command.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 929364341, 'comment_body': ""You don't need `.format()` now"", 'comment_created': datetime.datetime(2022, 7, 25, 22, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929374472, 'comment_body': 'Ok but - what is this for? It looks like you are appending the empty string to a file.\r\nAs a follow up question - if you do actually append some text to this file - what would prevent the file from growing bigger and bigger each time? Do we have to make sure to only run this once, or is the file sometimes recreated from scratch in some way?', 'comment_created': datetime.datetime(2022, 7, 25, 22, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929375166, 'comment_body': 'Do you mean super().format_help? I think this would overflow the stack ', 'comment_created': datetime.datetime(2022, 7, 25, 22, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929382820, 'comment_body': 'Have you seen this give different results to checking os.environ.get(""PATH"")? I didn\'t know that there could be more than one PATH variable in the environment at once. Since you\'re running ""groff"" directly - not via any shell - I would expect shutil.which to do a good job of finding the groff that will be run ', 'comment_created': datetime.datetime(2022, 7, 25, 23, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929444241, 'comment_body': ""if this file is copied from an online source, include the URL in the docstring here (ideally a github blob url with an OID in it so it's clear what exact version it was copied from). No need to adjust the copyright unless you've modified it substantially, in which case perhaps you need to say so here.\r\n\r\nEither way the license for this file remains MIT not GPL. The MIT license actually requires the license text be included in distributed works, so at minimum it should be copied into this docstring I think.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 26, 1, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 929998986, 'comment_body': ""Ah, checked again with a fresh build, works perfectly. Don't know what went wrong before. Thanks."", 'comment_created': datetime.datetime(2022, 7, 26, 13, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 930000520, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2022, 7, 26, 13, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 931618887, 'comment_body': '@rcoup can you double-check this? (license text has now been added to the docstring)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 931637189, 'comment_body': '```suggestion\r\nThis module provides functionality to write a man page from some given\r\ninformation about a CLI application and is modified from click-man.\r\n\r\nhttps://github.com/click-contrib/click-man/tree/3a0684c9d70f94a2abef08fb3f88449dab6aea98\r\n\r\nThe original click-man source is licensed under the MIT License. Changes are\r\nlicensed under the Kart license (GPL).\r\n```\r\n\r\n(repeated for any other files that use non-trivial click-man code)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcoup', 'type': 'User'}, {'comment_id': 947440055, 'comment_body': ""This should never happen since we're depending on `importlib-metadata` in requirements.txt. Maybe move that into requirements.in to make it explicit? With a comment noting it's only needed for python 3.7\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 17, 4, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947443469, 'comment_body': ""I'm wondering what the advantage is of using the entrypoints mechanism here. Why not just \r\n\r\n```suggestion\r\n    from kart import cli\r\n    cli._load_all_commands()\r\n    generate_help_pages(name, input_dir, cli.cli, target_dir=output_dir)\r\n```\r\n\r\nI'd suggest removing the leading underscore from `_load_all_commands` since it's called outside the module."", 'comment_created': datetime.datetime(2022, 8, 17, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947482519, 'comment_body': 'Certainly much better. Thanks :+1:  ', 'comment_created': datetime.datetime(2022, 8, 17, 6, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': '44da72423c784656e3c7f8d13fcadd65c4fc44ec', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bed5e31954924e14ece5d36a89190408a1b53dd', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a1440f20eed3a55a51a21a805d88ab176f57f55', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8dcb19d5b331caffa5cd4168953db28a79f0105', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916e605d4fafd6c4bff28a44d088bae0c25dea8c', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e51c1e2fd4dba665b70462961b10fa04e6f40955', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f319162f8adf97ab09f606f2f05008fb8f8afbe7', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805d9f3eaeca16a2b63c0000014c5545735f8ae', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6e2ac241155a3fdd4496a7a5a164541759fc8e', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a295f3c5f29545cc07e827ac55a5c5e37869bfba', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1008826647,"ci: change ""Date"" to work with user's locale","## Description
The `Date` specified via `time.strftime(""%c"")` seems to be different in POSIX and Windows systems (see [build](https://github.com/koordinates/kart/runs/7523956891#step:14:1167)). 

Previous diff on Windows:
```diff
-  'Date:   Thu Jun 20 15:28:33 2019 +0100',
+  'Date:   6/20/2019 3:28:33 PM +0100',
```",True,685,https://api.github.com/repos/koordinates/kart/pulls/685,https://github.com/koordinates/kart/pull/685,closed,29,19,5,1,3,0,0,0,[],2022-07-26 18:11:54+00:00,2022-07-28 03:12:40+00:00,118846.0,"1 day, 9:00:46",[],"[{'commit_sha': '6db09cd5d7ebfc83d3b22d021043312ae723d2dc', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1006572254,Add man-style help page renderers for Kart,"## Description

Add man-style pagers instead of click's default help page when calling `--help`. Run `kart init --help` or `kart clone --help`  to see man pages with additional docs sourced from `docs/pages/commands`. The paging methods used are:

- For Windows - `click.echo_via_pager()`
- For POSIX -  `man <path_to_page>`

While experimenting with `click-man`, I also tried using `sphinx-click` for generating man pages but couldn't get much out of it (see [stackoverflow question](https://stackoverflow.com/questions/73104016/is-there-a-programmatic-way-to-get-man-pages-from-sphinx-builder-as-strings)). 

### Design

![Blank diagram (3)](https://user-images.githubusercontent.com/90337323/184100100-fb3adc37-c661-4e55-a213-f241ec53c93e.jpeg)

## Related links:
- #658 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,682,https://api.github.com/repos/koordinates/kart/pulls/682,https://github.com/koordinates/kart/pull/682,closed,666,131,42,10,2,28,0,0,[],2022-07-24 15:51:14+00:00,2022-08-19 03:01:25+00:00,2200211.0,"25 days, 11:10:11","[{'comment_id': 928356010, 'comment_body': 'Use f-strings to get rid of this {0} {1} {2} {3} {4} stuff\r\n\r\nAlso you have\r\n""{1}"" ""1"" \r\nin your format string. Is that a bug? Using f-strings would make it easier to pick up on', 'comment_created': datetime.datetime(2022, 7, 25, 1, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928358475, 'comment_body': 'Guido, benevolent dictator of Python for life, says he prefers to use python\'s built in syntax for this instead of map and lambda. I think it\'s this:\r\nlines = (self.PARAGRAPH_KEYWORD if l == """" else l for l in s.splitlines())', 'comment_created': datetime.datetime(2022, 7, 25, 2, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928361306, 'comment_body': ""In this case (unlike below, sorry) I don't recommend using list comprehensions - they get much harder to read when they nest. Here are some alternatives:\r\n- you could initialise man_page.options as an empty list, and then use a normal for loops to append things to it as you find things that are worth appending\r\n- you could use `filter()`. I think that would look like this:\r\n```\r\nman_page.options = list(filter(p.get_help_record(ctx) for p in ctx.command.params))\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928371315, 'comment_body': ""I think `shutil.which` does this - it might even handle some special cases, but I wouldn't know"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372161, 'comment_body': ""This could do with a bit more explanation -\r\n- why do we need a dummy header, and when/where do we remove it after conversion?\r\nIf it's just needed during conversion, maybe you could do it in the convert_doc_content function, or,\r\nyou could make a variation of that function that adds and removes a dummy headers if needed eg `_convert_doc_content_body`"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372715, 'comment_body': ""I don't think you need to extend `object` any more in python 3 - it just happens anyway"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372786, 'comment_body': 'No need to extend `object`', 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928376315, 'comment_body': 'Maybe add a bit of documentation to the methods that are here so that subclasses can override them', 'comment_created': datetime.datetime(2022, 7, 25, 3, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928379395, 'comment_body': 'Maybe something like this for readability:\r\n```\r\nparts = option.replace(""-"", r""\\-"").split(maxsplit=1)\r\nfirst_part, rest = parts if len(parts) == 2 else (parts[0], """")\r\nlines.append(rf""\\fB{name}\\fP {desc}"")\r\n```\r\nFeel free to give these variables a better name than ""parts"" or ""unpacked"" - I\'m not sure exactly what they are so I don\'t know why the first one should be bold', 'comment_created': datetime.datetime(2022, 7, 25, 3, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928380926, 'comment_body': ""What's going on with the <https:/google.com> here?"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928382647, 'comment_body': ""Maybe add your name to the copyright? I don't actually know what to do here\r\n@rcoup probably knows about licenses"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928383701, 'comment_body': 'Not sure what this is for? Looks like you are appending the empty string to a file', 'comment_created': datetime.datetime(2022, 7, 25, 3, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928384137, 'comment_body': 'Also if you are using pathlib.Path, you can mostly use `write_text` etc instead of open() - a bit simpler to use', 'comment_created': datetime.datetime(2022, 7, 25, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928555170, 'comment_body': ""AFAIK, `write_text` overwrites the file contents. Since we're reading from the docs here to produce the man pages, appending would be better."", 'comment_created': datetime.datetime(2022, 7, 25, 7, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928665752, 'comment_body': '`shutil.which(""groff"")` seems to check the PATH of the Python runtime which may be different from the shell PATH.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928671310, 'comment_body': '> Also you have ""{1}"" ""1"" in your format string. Is that a bug?\r\n\r\nI don\'t think it\'s a bug. Man pages are divided into [sections](https://en.wikipedia.org/wiki/Man_page#Manual_sections). The ""1""  is to show that the command is an executable program or shell command.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 929364341, 'comment_body': ""You don't need `.format()` now"", 'comment_created': datetime.datetime(2022, 7, 25, 22, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929374472, 'comment_body': 'Ok but - what is this for? It looks like you are appending the empty string to a file.\r\nAs a follow up question - if you do actually append some text to this file - what would prevent the file from growing bigger and bigger each time? Do we have to make sure to only run this once, or is the file sometimes recreated from scratch in some way?', 'comment_created': datetime.datetime(2022, 7, 25, 22, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929375166, 'comment_body': 'Do you mean super().format_help? I think this would overflow the stack ', 'comment_created': datetime.datetime(2022, 7, 25, 22, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929382820, 'comment_body': 'Have you seen this give different results to checking os.environ.get(""PATH"")? I didn\'t know that there could be more than one PATH variable in the environment at once. Since you\'re running ""groff"" directly - not via any shell - I would expect shutil.which to do a good job of finding the groff that will be run ', 'comment_created': datetime.datetime(2022, 7, 25, 23, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929444241, 'comment_body': ""if this file is copied from an online source, include the URL in the docstring here (ideally a github blob url with an OID in it so it's clear what exact version it was copied from). No need to adjust the copyright unless you've modified it substantially, in which case perhaps you need to say so here.\r\n\r\nEither way the license for this file remains MIT not GPL. The MIT license actually requires the license text be included in distributed works, so at minimum it should be copied into this docstring I think.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 26, 1, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 929998986, 'comment_body': ""Ah, checked again with a fresh build, works perfectly. Don't know what went wrong before. Thanks."", 'comment_created': datetime.datetime(2022, 7, 26, 13, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 930000520, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2022, 7, 26, 13, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 931618887, 'comment_body': '@rcoup can you double-check this? (license text has now been added to the docstring)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 931637189, 'comment_body': '```suggestion\r\nThis module provides functionality to write a man page from some given\r\ninformation about a CLI application and is modified from click-man.\r\n\r\nhttps://github.com/click-contrib/click-man/tree/3a0684c9d70f94a2abef08fb3f88449dab6aea98\r\n\r\nThe original click-man source is licensed under the MIT License. Changes are\r\nlicensed under the Kart license (GPL).\r\n```\r\n\r\n(repeated for any other files that use non-trivial click-man code)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcoup', 'type': 'User'}, {'comment_id': 947440055, 'comment_body': ""This should never happen since we're depending on `importlib-metadata` in requirements.txt. Maybe move that into requirements.in to make it explicit? With a comment noting it's only needed for python 3.7\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 17, 4, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947443469, 'comment_body': ""I'm wondering what the advantage is of using the entrypoints mechanism here. Why not just \r\n\r\n```suggestion\r\n    from kart import cli\r\n    cli._load_all_commands()\r\n    generate_help_pages(name, input_dir, cli.cli, target_dir=output_dir)\r\n```\r\n\r\nI'd suggest removing the leading underscore from `_load_all_commands` since it's called outside the module."", 'comment_created': datetime.datetime(2022, 8, 17, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947482519, 'comment_body': 'Certainly much better. Thanks :+1:  ', 'comment_created': datetime.datetime(2022, 8, 17, 6, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': '44da72423c784656e3c7f8d13fcadd65c4fc44ec', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bed5e31954924e14ece5d36a89190408a1b53dd', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a1440f20eed3a55a51a21a805d88ab176f57f55', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8dcb19d5b331caffa5cd4168953db28a79f0105', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916e605d4fafd6c4bff28a44d088bae0c25dea8c', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e51c1e2fd4dba665b70462961b10fa04e6f40955', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f319162f8adf97ab09f606f2f05008fb8f8afbe7', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805d9f3eaeca16a2b63c0000014c5545735f8ae', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6e2ac241155a3fdd4496a7a5a164541759fc8e', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a295f3c5f29545cc07e827ac55a5c5e37869bfba', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1006572254,Add man-style help page renderers for Kart,"## Description

Add man-style pagers instead of click's default help page when calling `--help`. Run `kart init --help` or `kart clone --help`  to see man pages with additional docs sourced from `docs/pages/commands`. The paging methods used are:

- For Windows - `click.echo_via_pager()`
- For POSIX -  `man <path_to_page>`

While experimenting with `click-man`, I also tried using `sphinx-click` for generating man pages but couldn't get much out of it (see [stackoverflow question](https://stackoverflow.com/questions/73104016/is-there-a-programmatic-way-to-get-man-pages-from-sphinx-builder-as-strings)). 

### Design

![Blank diagram (3)](https://user-images.githubusercontent.com/90337323/184100100-fb3adc37-c661-4e55-a213-f241ec53c93e.jpeg)

## Related links:
- #658 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,682,https://api.github.com/repos/koordinates/kart/pulls/682,https://github.com/koordinates/kart/pull/682,closed,666,131,42,10,2,28,0,0,[],2022-07-24 15:51:14+00:00,2022-08-19 03:01:25+00:00,2200211.0,"25 days, 11:10:11","[{'comment_id': 928356010, 'comment_body': 'Use f-strings to get rid of this {0} {1} {2} {3} {4} stuff\r\n\r\nAlso you have\r\n""{1}"" ""1"" \r\nin your format string. Is that a bug? Using f-strings would make it easier to pick up on', 'comment_created': datetime.datetime(2022, 7, 25, 1, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928358475, 'comment_body': 'Guido, benevolent dictator of Python for life, says he prefers to use python\'s built in syntax for this instead of map and lambda. I think it\'s this:\r\nlines = (self.PARAGRAPH_KEYWORD if l == """" else l for l in s.splitlines())', 'comment_created': datetime.datetime(2022, 7, 25, 2, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928361306, 'comment_body': ""In this case (unlike below, sorry) I don't recommend using list comprehensions - they get much harder to read when they nest. Here are some alternatives:\r\n- you could initialise man_page.options as an empty list, and then use a normal for loops to append things to it as you find things that are worth appending\r\n- you could use `filter()`. I think that would look like this:\r\n```\r\nman_page.options = list(filter(p.get_help_record(ctx) for p in ctx.command.params))\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928371315, 'comment_body': ""I think `shutil.which` does this - it might even handle some special cases, but I wouldn't know"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372161, 'comment_body': ""This could do with a bit more explanation -\r\n- why do we need a dummy header, and when/where do we remove it after conversion?\r\nIf it's just needed during conversion, maybe you could do it in the convert_doc_content function, or,\r\nyou could make a variation of that function that adds and removes a dummy headers if needed eg `_convert_doc_content_body`"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372715, 'comment_body': ""I don't think you need to extend `object` any more in python 3 - it just happens anyway"", 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928372786, 'comment_body': 'No need to extend `object`', 'comment_created': datetime.datetime(2022, 7, 25, 2, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928376315, 'comment_body': 'Maybe add a bit of documentation to the methods that are here so that subclasses can override them', 'comment_created': datetime.datetime(2022, 7, 25, 3, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928379395, 'comment_body': 'Maybe something like this for readability:\r\n```\r\nparts = option.replace(""-"", r""\\-"").split(maxsplit=1)\r\nfirst_part, rest = parts if len(parts) == 2 else (parts[0], """")\r\nlines.append(rf""\\fB{name}\\fP {desc}"")\r\n```\r\nFeel free to give these variables a better name than ""parts"" or ""unpacked"" - I\'m not sure exactly what they are so I don\'t know why the first one should be bold', 'comment_created': datetime.datetime(2022, 7, 25, 3, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928380926, 'comment_body': ""What's going on with the <https:/google.com> here?"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928382647, 'comment_body': ""Maybe add your name to the copyright? I don't actually know what to do here\r\n@rcoup probably knows about licenses"", 'comment_created': datetime.datetime(2022, 7, 25, 3, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928383701, 'comment_body': 'Not sure what this is for? Looks like you are appending the empty string to a file', 'comment_created': datetime.datetime(2022, 7, 25, 3, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928384137, 'comment_body': 'Also if you are using pathlib.Path, you can mostly use `write_text` etc instead of open() - a bit simpler to use', 'comment_created': datetime.datetime(2022, 7, 25, 3, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 928555170, 'comment_body': ""AFAIK, `write_text` overwrites the file contents. Since we're reading from the docs here to produce the man pages, appending would be better."", 'comment_created': datetime.datetime(2022, 7, 25, 7, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928665752, 'comment_body': '`shutil.which(""groff"")` seems to check the PATH of the Python runtime which may be different from the shell PATH.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 928671310, 'comment_body': '> Also you have ""{1}"" ""1"" in your format string. Is that a bug?\r\n\r\nI don\'t think it\'s a bug. Man pages are divided into [sections](https://en.wikipedia.org/wiki/Man_page#Manual_sections). The ""1""  is to show that the command is an executable program or shell command.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 929364341, 'comment_body': ""You don't need `.format()` now"", 'comment_created': datetime.datetime(2022, 7, 25, 22, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929374472, 'comment_body': 'Ok but - what is this for? It looks like you are appending the empty string to a file.\r\nAs a follow up question - if you do actually append some text to this file - what would prevent the file from growing bigger and bigger each time? Do we have to make sure to only run this once, or is the file sometimes recreated from scratch in some way?', 'comment_created': datetime.datetime(2022, 7, 25, 22, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929375166, 'comment_body': 'Do you mean super().format_help? I think this would overflow the stack ', 'comment_created': datetime.datetime(2022, 7, 25, 22, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929382820, 'comment_body': 'Have you seen this give different results to checking os.environ.get(""PATH"")? I didn\'t know that there could be more than one PATH variable in the environment at once. Since you\'re running ""groff"" directly - not via any shell - I would expect shutil.which to do a good job of finding the groff that will be run ', 'comment_created': datetime.datetime(2022, 7, 25, 23, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'olsen232', 'type': 'User'}, {'comment_id': 929444241, 'comment_body': ""if this file is copied from an online source, include the URL in the docstring here (ideally a github blob url with an OID in it so it's clear what exact version it was copied from). No need to adjust the copyright unless you've modified it substantially, in which case perhaps you need to say so here.\r\n\r\nEither way the license for this file remains MIT not GPL. The MIT license actually requires the license text be included in distributed works, so at minimum it should be copied into this docstring I think.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 26, 1, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 929998986, 'comment_body': ""Ah, checked again with a fresh build, works perfectly. Don't know what went wrong before. Thanks."", 'comment_created': datetime.datetime(2022, 7, 26, 13, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 930000520, 'comment_body': 'Updated.', 'comment_created': datetime.datetime(2022, 7, 26, 13, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}, {'comment_id': 931618887, 'comment_body': '@rcoup can you double-check this? (license text has now been added to the docstring)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 931637189, 'comment_body': '```suggestion\r\nThis module provides functionality to write a man page from some given\r\ninformation about a CLI application and is modified from click-man.\r\n\r\nhttps://github.com/click-contrib/click-man/tree/3a0684c9d70f94a2abef08fb3f88449dab6aea98\r\n\r\nThe original click-man source is licensed under the MIT License. Changes are\r\nlicensed under the Kart license (GPL).\r\n```\r\n\r\n(repeated for any other files that use non-trivial click-man code)', 'comment_created': datetime.datetime(2022, 7, 27, 22, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'rcoup', 'type': 'User'}, {'comment_id': 947440055, 'comment_body': ""This should never happen since we're depending on `importlib-metadata` in requirements.txt. Maybe move that into requirements.in to make it explicit? With a comment noting it's only needed for python 3.7\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 17, 4, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947443469, 'comment_body': ""I'm wondering what the advantage is of using the entrypoints mechanism here. Why not just \r\n\r\n```suggestion\r\n    from kart import cli\r\n    cli._load_all_commands()\r\n    generate_help_pages(name, input_dir, cli.cli, target_dir=output_dir)\r\n```\r\n\r\nI'd suggest removing the leading underscore from `_load_all_commands` since it's called outside the module."", 'comment_created': datetime.datetime(2022, 8, 17, 4, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'craigds', 'type': 'User'}, {'comment_id': 947482519, 'comment_body': 'Certainly much better. Thanks :+1:  ', 'comment_created': datetime.datetime(2022, 8, 17, 6, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amalthundiyil', 'type': 'User'}]","[{'commit_sha': '44da72423c784656e3c7f8d13fcadd65c4fc44ec', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bed5e31954924e14ece5d36a89190408a1b53dd', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a1440f20eed3a55a51a21a805d88ab176f57f55', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8dcb19d5b331caffa5cd4168953db28a79f0105', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916e605d4fafd6c4bff28a44d088bae0c25dea8c', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e51c1e2fd4dba665b70462961b10fa04e6f40955', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f319162f8adf97ab09f606f2f05008fb8f8afbe7', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805d9f3eaeca16a2b63c0000014c5545735f8ae', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6e2ac241155a3fdd4496a7a5a164541759fc8e', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a295f3c5f29545cc07e827ac55a5c5e37869bfba', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1023098257,tests: fix Date for commands passed to git,"## Description

`git log` has a different way of parsing `%c` in dates. This PR gets dates from `git show`  and asserts the new date in tests for `kart log` and `kart upgrade`.  

## Related links:

- #685 ",True,694,https://api.github.com/repos/koordinates/kart/pulls/694,https://github.com/koordinates/kart/pull/694,closed,61,17,3,1,0,0,0,0,[],2022-08-10 19:15:23+00:00,2022-08-11 22:24:38+00:00,97755.0,"1 day, 3:09:15",[],"[{'commit_sha': '8efc0cea7bcfcadb8e72e1003825cac765fa7c66', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22
1034449816,fix(config): move `--install-tab-completion` to its own command,"## Description

The problem with the earlier approach is that the `--install-tab-completion` which should be an option is also trying to play the role of a command (also see [koordinates/kart#648 (review)](https://github.com/koordinates/kart/pull/648#discussion_r897457027)). This PR adds a new command instead of adding it as an option in a subcommand. 
```sh
kart install tab-completion # to auto-detect shell and install tab completion
```

## Related links:

- #701 
- #643 

## Checklist:

- [x] Have you reviewed your own change?
- [x] Have you included test(s)?
- [x] Have you updated the [changelog](https://github.com/koordinates/kart/blob/master/CHANGELOG.md)?
",True,703,https://api.github.com/repos/koordinates/kart/pulls/703,https://github.com/koordinates/kart/pull/703,closed,36,30,5,1,3,0,0,0,[],2022-08-23 16:56:35+00:00,2022-08-24 05:19:20+00:00,44565.0,12:22:45,[],"[{'commit_sha': '6deab6e30a71d620ab8f9640dfe01e54586ed888', 'committer_username': 'amalthundiyil', 'committer_name': 'Amal Thundiyil', 'committer_email': 'mail@amalthundiyil.com', 'commit_date': datetime.datetime(2021, 9, 8, 15, 27, 45, tzinfo=datetime.timezone.utc)}]",Amal Thundiyil,90337323,mail@amalthundiyil.com,User,,15,,0,22

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
141995537,kart,koordinates/kart,Python,41,519,27,17,2817,52,16,5,"[{'id': 1034449816, 'number': 703, 'closed': datetime.datetime(2022, 8, 24, 5, 19, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 16, 56, 35, tzinfo=datetime.timezone.utc), 'time_taken': 44565.0, 'time_delta': '12:22:45', 'additions': 36, 'deletions': 30, 'state': 'closed'}, {'id': 1023098257, 'number': 694, 'closed': datetime.datetime(2022, 8, 11, 22, 24, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 19, 15, 23, tzinfo=datetime.timezone.utc), 'time_taken': 97755.0, 'time_delta': '1 day, 3:09:15', 'additions': 61, 'deletions': 17, 'state': 'closed'}, {'id': 1008826647, 'number': 685, 'closed': datetime.datetime(2022, 7, 28, 3, 12, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 18, 11, 54, tzinfo=datetime.timezone.utc), 'time_taken': 118846.0, 'time_delta': '1 day, 9:00:46', 'additions': 29, 'deletions': 19, 'state': 'closed'}, {'id': 1007150342, 'number': 684, 'closed': datetime.datetime(2022, 7, 26, 10, 3, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 11, 5, 48, tzinfo=datetime.timezone.utc), 'time_taken': 82650.0, 'time_delta': '22:57:30', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 1006572254, 'number': 682, 'closed': datetime.datetime(2022, 8, 19, 3, 1, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 24, 15, 51, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2200211.0, 'time_delta': '25 days, 11:10:11', 'additions': 666, 'deletions': 131, 'state': 'closed'}, {'id': 988676045, 'number': 665, 'closed': datetime.datetime(2022, 7, 11, 3, 35, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 11, 28, 58, tzinfo=datetime.timezone.utc), 'time_taken': 403576.0, 'time_delta': '4 days, 16:06:16', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 986198101, 'number': 659, 'closed': datetime.datetime(2022, 8, 19, 3, 2, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 4, 9, 6, 9, tzinfo=datetime.timezone.utc), 'time_taken': 3952587.0, 'time_delta': '45 days, 17:56:27', 'additions': 39, 'deletions': 25, 'state': 'closed'}, {'id': 974675689, 'number': 654, 'closed': datetime.datetime(2022, 7, 4, 20, 34, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 7, 7, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1085223.0, 'time_delta': '12 days, 13:27:03', 'additions': 134, 'deletions': 10, 'state': 'closed'}, {'id': 963076859, 'number': 648, 'closed': datetime.datetime(2022, 7, 4, 5, 17, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 9, 15, 57, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2121581.0, 'time_delta': '24 days, 13:19:41', 'additions': 238, 'deletions': 1, 'state': 'closed'}, {'id': 958908687, 'number': 644, 'closed': datetime.datetime(2022, 6, 16, 4, 6, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 10, 1, 45, tzinfo=datetime.timezone.utc), 'time_taken': 842692.0, 'time_delta': '9 days, 18:04:52', 'additions': 321, 'deletions': 153, 'state': 'closed'}, {'id': 898098409, 'number': 602, 'closed': datetime.datetime(2022, 4, 4, 21, 56, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 2, 16, 50, 32, tzinfo=datetime.timezone.utc), 'time_taken': 191158.0, 'time_delta': '2 days, 5:05:58', 'additions': 970, 'deletions': 521, 'state': 'closed'}, {'id': 883688984, 'number': 588, 'closed': datetime.datetime(2022, 3, 21, 22, 2, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 18, 18, 16, 52, tzinfo=datetime.timezone.utc), 'time_taken': 272737.0, 'time_delta': '3 days, 3:45:37', 'additions': 304, 'deletions': 522, 'state': 'closed'}, {'id': 881528540, 'number': 584, 'closed': datetime.datetime(2022, 3, 22, 20, 27, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 15, 54, 8, tzinfo=datetime.timezone.utc), 'time_taken': 534790.0, 'time_delta': '6 days, 4:33:10', 'additions': 33, 'deletions': 1, 'state': 'closed'}, {'id': 877560510, 'number': 573, 'closed': datetime.datetime(2022, 3, 15, 22, 7, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 11, 15, 30, 28, tzinfo=datetime.timezone.utc), 'time_taken': 369413.0, 'time_delta': '4 days, 6:36:53', 'additions': 3813, 'deletions': 1289, 'state': 'closed'}]"
