pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1349372674,[#64] Retrieving Server's Information,,True,65,https://api.github.com/repos/pgexporter/pgexporter/pulls/65,https://github.com/pgexporter/pgexporter/pull/65,closed,41,0,4,1,2,8,1,1,[{'name': 'feature'}],2023-05-13 02:42:30+00:00,2023-05-16 18:42:25+00:00,316795.0,"3 days, 15:59:55","[{'comment_id': 1193785978, 'comment_body': 'I think we can put this SQL directly in the function', 'comment_created': datetime.datetime(2023, 5, 15, 12, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1193786495, 'comment_body': ""I don't think we need a `typedef` for this"", 'comment_created': datetime.datetime(2023, 5, 15, 12, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1193786690, 'comment_body': '`char` should be enough', 'comment_created': datetime.datetime(2023, 5, 15, 12, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1194145519, 'comment_body': '`char`', 'comment_created': datetime.datetime(2023, 5, 15, 17, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1194145811, 'comment_body': ""Shouldn't be needed"", 'comment_created': datetime.datetime(2023, 5, 15, 17, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1195538541, 'comment_body': 'We are not really doing that though...\r\n\r\nThinking about it - lets just keep it as a status code - so `int`, and assign internally in the function', 'comment_created': datetime.datetime(2023, 5, 16, 18, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1195543273, 'comment_body': ""Oh I am really sorry about this. I was travelling back to my place when I made this change and pushed as soon as I got internet, and it was a lapse of judgement on my part.\r\n\r\nYes I am indeed assigning the version internally and the returned value is just 0 if all's ok and 1 if not.\r\n\r\nI'll change it back immediately."", 'comment_created': datetime.datetime(2023, 5, 16, 18, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1195544284, 'comment_body': 'np', 'comment_created': datetime.datetime(2023, 5, 16, 18, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}]","[{'commit_sha': '197e314b4834de8efffb579f7d36bee2eb2d8ac6', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1353584986,[#66] YAML Support for multiple queries,,False,67,https://api.github.com/repos/pgexporter/pgexporter/pulls/67,https://github.com/pgexporter/pgexporter/pull/67,closed,2293,1139,12,1,20,34,1,1,[{'name': 'feature'}],2023-05-17 06:57:10+00:00,2023-06-07 16:31:54+00:00,1848884.0,"21 days, 9:34:44","[{'comment_id': 1196634604, 'comment_body': ""I think `sample.yaml` will be too difficult for most people...\r\n\r\nWe should have explicit files for each version, so it is a standard copy'n'paste into their installation.\r\n\r\nAnd, there will be different metrics for each version -- especially with 16 and all the `pg_statio_*` views..."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196635578, 'comment_body': 'Same issue here - we need `INTERNAL_10_YAML` and so on...', 'comment_created': datetime.datetime(2023, 5, 17, 14, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196636637, 'comment_body': 'Or a way to add additional queries to a setup... that is a discussion', 'comment_created': datetime.datetime(2023, 5, 17, 14, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196645754, 'comment_body': ""Oh no, this `version` at the top is a tentative version for the version of the **YAML file** (kinda like APIs have /api/v1 or /api/v2 if the new version is not backward compatible with the new version).\r\n\r\nThe difference between the previous YAML structure and the new YAML structure made me think of this.\r\n\r\nThis was something I was wondering if it should be added...later I can add support for that version too if needed :)\r\n\r\nAlso yeah I agree on the difficulty part...but it was something I thought would be a fair tradeoff to functionality, as it's just one more layer of sequence from previous structure."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196653476, 'comment_body': 'I meant the file as a whole', 'comment_created': datetime.datetime(2023, 5, 17, 14, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196653888, 'comment_body': ""So what I'm understanding is that you want to keep the previous YAML structure but separate them out into multiple files with the topmost `version` denoting the PostgreSQL version?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196654426, 'comment_body': 'We can change the YAML structure - if really needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196656528, 'comment_body': 'version could be defined top-level as a default, and then overwritten per query. Per query is def needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196658801, 'comment_body': 'Ideally, people want one file that can over all their PostgreSQL installations, and this is where version support is important.', 'comment_created': datetime.datetime(2023, 5, 17, 14, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196659424, 'comment_body': ""Ok, so according to you, if query's version is not provided, the file's default value will be taken?\r\n\r\nAlso, so should I rename the topmost `version` to `default_version`?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196665977, 'comment_body': ""Hmmm yeah, that would make it much more friendly from a user's POV."", 'comment_created': datetime.datetime(2023, 5, 17, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196667353, 'comment_body': ""If you give the green light, I'll go ahead with this then!"", 'comment_created': datetime.datetime(2023, 5, 17, 15, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196673407, 'comment_body': 'I think version is ok for all levels - and its the PostgreSQL version, so not 1.\r\n\r\nStart with postgresql-10.yaml and work your way backwards - how would you create -11 ? How would you create a oursetup.yaml with multiple PostgreSQL versions... And so on', 'comment_created': datetime.datetime(2023, 5, 17, 15, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196692161, 'comment_body': 'So to summarize (to check if I\'m understanding it correctly) would it be something like:\r\n\r\n```yaml\r\nversion: 10\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        version: 14\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\nwhere query `A` has a min. ver. of 14, but `B` has version 10 (as unspecified).\r\n\r\nSame for the other way:\r\n\r\n```yaml\r\nversion: 14\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n        version: 10\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\n(this should, according to my understanding, have the same effect for `A` and `B`).\r\n\r\n----\r\n\r\nFurther you want to have separate files like `postgresql-10.yaml`, `postgresql-11.yaml`, etc. with default **top-most** version as 10, 11, etc. for copy-paste by users and have sample queries in them. Over that a ""custom"" `oursetup.yaml` that is something similar to current `sample.yml` but has a top-most `version` to a PostgreSQL version.\r\n\r\nAm I understanding this correctly?', 'comment_created': datetime.datetime(2023, 5, 17, 15, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196694429, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2023, 5, 17, 15, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217958888, 'comment_body': 'I think we need to get rid of `collector` and `server` here first, as the query needs to run on all servers', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217959411, 'comment_body': 'Send it as a separate pull request', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217961977, 'comment_body': 'Hmm, I think there a discussion around this... What are internal queries that are always run vs. what is user defined.\r\n\r\nI like that we can define `collector` labels, but explore more.', 'comment_created': datetime.datetime(2023, 6, 5, 11, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218243482, 'comment_body': 'Got it. Also, should I remove the collector as well? It says primary as in ""primary metric collector"" (based on the comment left by Donglin)', 'comment_created': datetime.datetime(2023, 6, 5, 15, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218246088, 'comment_body': 'We can probably prefix the collector names of internal queries with something like `pgexporter_*` and raise an error if they use the prefix `pgexporter_` in their collector names. Will that work?', 'comment_created': datetime.datetime(2023, 6, 5, 15, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218468574, 'comment_body': ""Nah, I don't like that -- but I agree, there are reserved collector words"", 'comment_created': datetime.datetime(2023, 6, 5, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218501590, 'comment_body': ""Hmmm, should I consider a prefix? A prefix would also enable us to be more flexible, and have the possibility of adding collectors in future without risking conflicting with user defined collectors. Can be something like a dunder (`__`) as well (as prefix and suffix)\r\n\r\nI can't think of any other than releasing a list of reserved collector words (like language reserved words)"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218507666, 'comment_body': ""Why is this important right now ? We can circle back to it, and make sure that it works for 0.4.\r\n\r\nOnly the internal names are important to document if people aren't supplying a YAML file"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218517143, 'comment_body': ""Hmm understood. I was suggesting special collector names so as to exempt them from the `collector_pass` check function I had added that checks if a collector is enabled or not.\r\n\r\nThat way some queries will always be run, and some dependent on the user. I'll explore a bit more on this topic."", 'comment_created': datetime.datetime(2023, 6, 5, 19, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220033613, 'comment_body': ""I think, if we want some queries to always run, and assuming they're all internal queries, I can expand the yaml-from-file-pointer functionality to take in an argument that is true if the query is always allowed.\r\n\r\nSo then, for those queries I can disable the collector-pass check.\r\n\r\nHow do you feel about this approach to the problem? If you want I can give a following commit with the changes I am talking about"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220038712, 'comment_body': 'The ""General"" metrics should always be included - https://pgexporter.github.io/metrics.html - and they could be different between versions.', 'comment_created': datetime.datetime(2023, 6, 6, 17, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220052597, 'comment_body': ""Yes, you'd mentioned this while I was working on the collector feature, so [general queries are always run](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L568) as there is no collector pass in them"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220059446, 'comment_body': 'I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic', 'comment_created': datetime.datetime(2023, 6, 6, 17, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220059587, 'comment_body': 'Also other metrics that are included in general as well like [server information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L589), [version information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L630), [primary information]( https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L766) and [core information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L841).\r\n\r\nOther than that all of the queries have a collector-pass in them like [this](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L1128)', 'comment_created': datetime.datetime(2023, 6, 6, 17, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220082057, 'comment_body': ""> I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic\r\n\r\nGot it. I'll keep that in mind. I feel this would go weel when I'm creating separate PRs for each version, where I'll address this issue as well as add any other metrics etc. for each version in each. Or do you want me to address this issue here?"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220085193, 'comment_body': 'Separate is best', 'comment_created': datetime.datetime(2023, 6, 6, 17, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220086805, 'comment_body': 'So do I need to make any further changes to this PR?', 'comment_created': datetime.datetime(2023, 6, 6, 18, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220091872, 'comment_body': ""I'll do another pass tomorrow"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220092918, 'comment_body': ""Ok! Looking forward to finishing this and moving on to the suggestions you mentioned. I'm quite curious about them"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': 'f27209d959a5c383b85812fc45965054f44051b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1353584986,[#66] YAML Support for multiple queries,,False,67,https://api.github.com/repos/pgexporter/pgexporter/pulls/67,https://github.com/pgexporter/pgexporter/pull/67,closed,2293,1139,12,1,20,34,1,1,[{'name': 'feature'}],2023-05-17 06:57:10+00:00,2023-06-07 16:31:54+00:00,1848884.0,"21 days, 9:34:44","[{'comment_id': 1196634604, 'comment_body': ""I think `sample.yaml` will be too difficult for most people...\r\n\r\nWe should have explicit files for each version, so it is a standard copy'n'paste into their installation.\r\n\r\nAnd, there will be different metrics for each version -- especially with 16 and all the `pg_statio_*` views..."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196635578, 'comment_body': 'Same issue here - we need `INTERNAL_10_YAML` and so on...', 'comment_created': datetime.datetime(2023, 5, 17, 14, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196636637, 'comment_body': 'Or a way to add additional queries to a setup... that is a discussion', 'comment_created': datetime.datetime(2023, 5, 17, 14, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196645754, 'comment_body': ""Oh no, this `version` at the top is a tentative version for the version of the **YAML file** (kinda like APIs have /api/v1 or /api/v2 if the new version is not backward compatible with the new version).\r\n\r\nThe difference between the previous YAML structure and the new YAML structure made me think of this.\r\n\r\nThis was something I was wondering if it should be added...later I can add support for that version too if needed :)\r\n\r\nAlso yeah I agree on the difficulty part...but it was something I thought would be a fair tradeoff to functionality, as it's just one more layer of sequence from previous structure."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196653476, 'comment_body': 'I meant the file as a whole', 'comment_created': datetime.datetime(2023, 5, 17, 14, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196653888, 'comment_body': ""So what I'm understanding is that you want to keep the previous YAML structure but separate them out into multiple files with the topmost `version` denoting the PostgreSQL version?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196654426, 'comment_body': 'We can change the YAML structure - if really needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196656528, 'comment_body': 'version could be defined top-level as a default, and then overwritten per query. Per query is def needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196658801, 'comment_body': 'Ideally, people want one file that can over all their PostgreSQL installations, and this is where version support is important.', 'comment_created': datetime.datetime(2023, 5, 17, 14, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196659424, 'comment_body': ""Ok, so according to you, if query's version is not provided, the file's default value will be taken?\r\n\r\nAlso, so should I rename the topmost `version` to `default_version`?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196665977, 'comment_body': ""Hmmm yeah, that would make it much more friendly from a user's POV."", 'comment_created': datetime.datetime(2023, 5, 17, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196667353, 'comment_body': ""If you give the green light, I'll go ahead with this then!"", 'comment_created': datetime.datetime(2023, 5, 17, 15, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196673407, 'comment_body': 'I think version is ok for all levels - and its the PostgreSQL version, so not 1.\r\n\r\nStart with postgresql-10.yaml and work your way backwards - how would you create -11 ? How would you create a oursetup.yaml with multiple PostgreSQL versions... And so on', 'comment_created': datetime.datetime(2023, 5, 17, 15, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196692161, 'comment_body': 'So to summarize (to check if I\'m understanding it correctly) would it be something like:\r\n\r\n```yaml\r\nversion: 10\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        version: 14\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\nwhere query `A` has a min. ver. of 14, but `B` has version 10 (as unspecified).\r\n\r\nSame for the other way:\r\n\r\n```yaml\r\nversion: 14\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n        version: 10\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\n(this should, according to my understanding, have the same effect for `A` and `B`).\r\n\r\n----\r\n\r\nFurther you want to have separate files like `postgresql-10.yaml`, `postgresql-11.yaml`, etc. with default **top-most** version as 10, 11, etc. for copy-paste by users and have sample queries in them. Over that a ""custom"" `oursetup.yaml` that is something similar to current `sample.yml` but has a top-most `version` to a PostgreSQL version.\r\n\r\nAm I understanding this correctly?', 'comment_created': datetime.datetime(2023, 5, 17, 15, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196694429, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2023, 5, 17, 15, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217958888, 'comment_body': 'I think we need to get rid of `collector` and `server` here first, as the query needs to run on all servers', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217959411, 'comment_body': 'Send it as a separate pull request', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217961977, 'comment_body': 'Hmm, I think there a discussion around this... What are internal queries that are always run vs. what is user defined.\r\n\r\nI like that we can define `collector` labels, but explore more.', 'comment_created': datetime.datetime(2023, 6, 5, 11, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218243482, 'comment_body': 'Got it. Also, should I remove the collector as well? It says primary as in ""primary metric collector"" (based on the comment left by Donglin)', 'comment_created': datetime.datetime(2023, 6, 5, 15, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218246088, 'comment_body': 'We can probably prefix the collector names of internal queries with something like `pgexporter_*` and raise an error if they use the prefix `pgexporter_` in their collector names. Will that work?', 'comment_created': datetime.datetime(2023, 6, 5, 15, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218468574, 'comment_body': ""Nah, I don't like that -- but I agree, there are reserved collector words"", 'comment_created': datetime.datetime(2023, 6, 5, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218501590, 'comment_body': ""Hmmm, should I consider a prefix? A prefix would also enable us to be more flexible, and have the possibility of adding collectors in future without risking conflicting with user defined collectors. Can be something like a dunder (`__`) as well (as prefix and suffix)\r\n\r\nI can't think of any other than releasing a list of reserved collector words (like language reserved words)"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218507666, 'comment_body': ""Why is this important right now ? We can circle back to it, and make sure that it works for 0.4.\r\n\r\nOnly the internal names are important to document if people aren't supplying a YAML file"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218517143, 'comment_body': ""Hmm understood. I was suggesting special collector names so as to exempt them from the `collector_pass` check function I had added that checks if a collector is enabled or not.\r\n\r\nThat way some queries will always be run, and some dependent on the user. I'll explore a bit more on this topic."", 'comment_created': datetime.datetime(2023, 6, 5, 19, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220033613, 'comment_body': ""I think, if we want some queries to always run, and assuming they're all internal queries, I can expand the yaml-from-file-pointer functionality to take in an argument that is true if the query is always allowed.\r\n\r\nSo then, for those queries I can disable the collector-pass check.\r\n\r\nHow do you feel about this approach to the problem? If you want I can give a following commit with the changes I am talking about"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220038712, 'comment_body': 'The ""General"" metrics should always be included - https://pgexporter.github.io/metrics.html - and they could be different between versions.', 'comment_created': datetime.datetime(2023, 6, 6, 17, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220052597, 'comment_body': ""Yes, you'd mentioned this while I was working on the collector feature, so [general queries are always run](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L568) as there is no collector pass in them"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220059446, 'comment_body': 'I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic', 'comment_created': datetime.datetime(2023, 6, 6, 17, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220059587, 'comment_body': 'Also other metrics that are included in general as well like [server information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L589), [version information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L630), [primary information]( https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L766) and [core information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L841).\r\n\r\nOther than that all of the queries have a collector-pass in them like [this](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L1128)', 'comment_created': datetime.datetime(2023, 6, 6, 17, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220082057, 'comment_body': ""> I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic\r\n\r\nGot it. I'll keep that in mind. I feel this would go weel when I'm creating separate PRs for each version, where I'll address this issue as well as add any other metrics etc. for each version in each. Or do you want me to address this issue here?"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220085193, 'comment_body': 'Separate is best', 'comment_created': datetime.datetime(2023, 6, 6, 17, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220086805, 'comment_body': 'So do I need to make any further changes to this PR?', 'comment_created': datetime.datetime(2023, 6, 6, 18, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220091872, 'comment_body': ""I'll do another pass tomorrow"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220092918, 'comment_body': ""Ok! Looking forward to finishing this and moving on to the suggestions you mentioned. I'm quite curious about them"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': 'f27209d959a5c383b85812fc45965054f44051b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1353584986,[#66] YAML Support for multiple queries,,False,67,https://api.github.com/repos/pgexporter/pgexporter/pulls/67,https://github.com/pgexporter/pgexporter/pull/67,closed,2293,1139,12,1,20,34,1,1,[{'name': 'feature'}],2023-05-17 06:57:10+00:00,2023-06-07 16:31:54+00:00,1848884.0,"21 days, 9:34:44","[{'comment_id': 1196634604, 'comment_body': ""I think `sample.yaml` will be too difficult for most people...\r\n\r\nWe should have explicit files for each version, so it is a standard copy'n'paste into their installation.\r\n\r\nAnd, there will be different metrics for each version -- especially with 16 and all the `pg_statio_*` views..."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196635578, 'comment_body': 'Same issue here - we need `INTERNAL_10_YAML` and so on...', 'comment_created': datetime.datetime(2023, 5, 17, 14, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196636637, 'comment_body': 'Or a way to add additional queries to a setup... that is a discussion', 'comment_created': datetime.datetime(2023, 5, 17, 14, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196645754, 'comment_body': ""Oh no, this `version` at the top is a tentative version for the version of the **YAML file** (kinda like APIs have /api/v1 or /api/v2 if the new version is not backward compatible with the new version).\r\n\r\nThe difference between the previous YAML structure and the new YAML structure made me think of this.\r\n\r\nThis was something I was wondering if it should be added...later I can add support for that version too if needed :)\r\n\r\nAlso yeah I agree on the difficulty part...but it was something I thought would be a fair tradeoff to functionality, as it's just one more layer of sequence from previous structure."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196653476, 'comment_body': 'I meant the file as a whole', 'comment_created': datetime.datetime(2023, 5, 17, 14, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196653888, 'comment_body': ""So what I'm understanding is that you want to keep the previous YAML structure but separate them out into multiple files with the topmost `version` denoting the PostgreSQL version?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196654426, 'comment_body': 'We can change the YAML structure - if really needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196656528, 'comment_body': 'version could be defined top-level as a default, and then overwritten per query. Per query is def needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196658801, 'comment_body': 'Ideally, people want one file that can over all their PostgreSQL installations, and this is where version support is important.', 'comment_created': datetime.datetime(2023, 5, 17, 14, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196659424, 'comment_body': ""Ok, so according to you, if query's version is not provided, the file's default value will be taken?\r\n\r\nAlso, so should I rename the topmost `version` to `default_version`?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196665977, 'comment_body': ""Hmmm yeah, that would make it much more friendly from a user's POV."", 'comment_created': datetime.datetime(2023, 5, 17, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196667353, 'comment_body': ""If you give the green light, I'll go ahead with this then!"", 'comment_created': datetime.datetime(2023, 5, 17, 15, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196673407, 'comment_body': 'I think version is ok for all levels - and its the PostgreSQL version, so not 1.\r\n\r\nStart with postgresql-10.yaml and work your way backwards - how would you create -11 ? How would you create a oursetup.yaml with multiple PostgreSQL versions... And so on', 'comment_created': datetime.datetime(2023, 5, 17, 15, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196692161, 'comment_body': 'So to summarize (to check if I\'m understanding it correctly) would it be something like:\r\n\r\n```yaml\r\nversion: 10\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        version: 14\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\nwhere query `A` has a min. ver. of 14, but `B` has version 10 (as unspecified).\r\n\r\nSame for the other way:\r\n\r\n```yaml\r\nversion: 14\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n        version: 10\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\n(this should, according to my understanding, have the same effect for `A` and `B`).\r\n\r\n----\r\n\r\nFurther you want to have separate files like `postgresql-10.yaml`, `postgresql-11.yaml`, etc. with default **top-most** version as 10, 11, etc. for copy-paste by users and have sample queries in them. Over that a ""custom"" `oursetup.yaml` that is something similar to current `sample.yml` but has a top-most `version` to a PostgreSQL version.\r\n\r\nAm I understanding this correctly?', 'comment_created': datetime.datetime(2023, 5, 17, 15, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196694429, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2023, 5, 17, 15, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217958888, 'comment_body': 'I think we need to get rid of `collector` and `server` here first, as the query needs to run on all servers', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217959411, 'comment_body': 'Send it as a separate pull request', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217961977, 'comment_body': 'Hmm, I think there a discussion around this... What are internal queries that are always run vs. what is user defined.\r\n\r\nI like that we can define `collector` labels, but explore more.', 'comment_created': datetime.datetime(2023, 6, 5, 11, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218243482, 'comment_body': 'Got it. Also, should I remove the collector as well? It says primary as in ""primary metric collector"" (based on the comment left by Donglin)', 'comment_created': datetime.datetime(2023, 6, 5, 15, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218246088, 'comment_body': 'We can probably prefix the collector names of internal queries with something like `pgexporter_*` and raise an error if they use the prefix `pgexporter_` in their collector names. Will that work?', 'comment_created': datetime.datetime(2023, 6, 5, 15, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218468574, 'comment_body': ""Nah, I don't like that -- but I agree, there are reserved collector words"", 'comment_created': datetime.datetime(2023, 6, 5, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218501590, 'comment_body': ""Hmmm, should I consider a prefix? A prefix would also enable us to be more flexible, and have the possibility of adding collectors in future without risking conflicting with user defined collectors. Can be something like a dunder (`__`) as well (as prefix and suffix)\r\n\r\nI can't think of any other than releasing a list of reserved collector words (like language reserved words)"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218507666, 'comment_body': ""Why is this important right now ? We can circle back to it, and make sure that it works for 0.4.\r\n\r\nOnly the internal names are important to document if people aren't supplying a YAML file"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218517143, 'comment_body': ""Hmm understood. I was suggesting special collector names so as to exempt them from the `collector_pass` check function I had added that checks if a collector is enabled or not.\r\n\r\nThat way some queries will always be run, and some dependent on the user. I'll explore a bit more on this topic."", 'comment_created': datetime.datetime(2023, 6, 5, 19, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220033613, 'comment_body': ""I think, if we want some queries to always run, and assuming they're all internal queries, I can expand the yaml-from-file-pointer functionality to take in an argument that is true if the query is always allowed.\r\n\r\nSo then, for those queries I can disable the collector-pass check.\r\n\r\nHow do you feel about this approach to the problem? If you want I can give a following commit with the changes I am talking about"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220038712, 'comment_body': 'The ""General"" metrics should always be included - https://pgexporter.github.io/metrics.html - and they could be different between versions.', 'comment_created': datetime.datetime(2023, 6, 6, 17, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220052597, 'comment_body': ""Yes, you'd mentioned this while I was working on the collector feature, so [general queries are always run](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L568) as there is no collector pass in them"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220059446, 'comment_body': 'I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic', 'comment_created': datetime.datetime(2023, 6, 6, 17, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220059587, 'comment_body': 'Also other metrics that are included in general as well like [server information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L589), [version information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L630), [primary information]( https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L766) and [core information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L841).\r\n\r\nOther than that all of the queries have a collector-pass in them like [this](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L1128)', 'comment_created': datetime.datetime(2023, 6, 6, 17, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220082057, 'comment_body': ""> I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic\r\n\r\nGot it. I'll keep that in mind. I feel this would go weel when I'm creating separate PRs for each version, where I'll address this issue as well as add any other metrics etc. for each version in each. Or do you want me to address this issue here?"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220085193, 'comment_body': 'Separate is best', 'comment_created': datetime.datetime(2023, 6, 6, 17, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220086805, 'comment_body': 'So do I need to make any further changes to this PR?', 'comment_created': datetime.datetime(2023, 6, 6, 18, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220091872, 'comment_body': ""I'll do another pass tomorrow"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220092918, 'comment_body': ""Ok! Looking forward to finishing this and moving on to the suggestions you mentioned. I'm quite curious about them"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': 'f27209d959a5c383b85812fc45965054f44051b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1353584986,[#66] YAML Support for multiple queries,,False,67,https://api.github.com/repos/pgexporter/pgexporter/pulls/67,https://github.com/pgexporter/pgexporter/pull/67,closed,2293,1139,12,1,20,34,1,1,[{'name': 'feature'}],2023-05-17 06:57:10+00:00,2023-06-07 16:31:54+00:00,1848884.0,"21 days, 9:34:44","[{'comment_id': 1196634604, 'comment_body': ""I think `sample.yaml` will be too difficult for most people...\r\n\r\nWe should have explicit files for each version, so it is a standard copy'n'paste into their installation.\r\n\r\nAnd, there will be different metrics for each version -- especially with 16 and all the `pg_statio_*` views..."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196635578, 'comment_body': 'Same issue here - we need `INTERNAL_10_YAML` and so on...', 'comment_created': datetime.datetime(2023, 5, 17, 14, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196636637, 'comment_body': 'Or a way to add additional queries to a setup... that is a discussion', 'comment_created': datetime.datetime(2023, 5, 17, 14, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196645754, 'comment_body': ""Oh no, this `version` at the top is a tentative version for the version of the **YAML file** (kinda like APIs have /api/v1 or /api/v2 if the new version is not backward compatible with the new version).\r\n\r\nThe difference between the previous YAML structure and the new YAML structure made me think of this.\r\n\r\nThis was something I was wondering if it should be added...later I can add support for that version too if needed :)\r\n\r\nAlso yeah I agree on the difficulty part...but it was something I thought would be a fair tradeoff to functionality, as it's just one more layer of sequence from previous structure."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196653476, 'comment_body': 'I meant the file as a whole', 'comment_created': datetime.datetime(2023, 5, 17, 14, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196653888, 'comment_body': ""So what I'm understanding is that you want to keep the previous YAML structure but separate them out into multiple files with the topmost `version` denoting the PostgreSQL version?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196654426, 'comment_body': 'We can change the YAML structure - if really needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196656528, 'comment_body': 'version could be defined top-level as a default, and then overwritten per query. Per query is def needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196658801, 'comment_body': 'Ideally, people want one file that can over all their PostgreSQL installations, and this is where version support is important.', 'comment_created': datetime.datetime(2023, 5, 17, 14, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196659424, 'comment_body': ""Ok, so according to you, if query's version is not provided, the file's default value will be taken?\r\n\r\nAlso, so should I rename the topmost `version` to `default_version`?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196665977, 'comment_body': ""Hmmm yeah, that would make it much more friendly from a user's POV."", 'comment_created': datetime.datetime(2023, 5, 17, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196667353, 'comment_body': ""If you give the green light, I'll go ahead with this then!"", 'comment_created': datetime.datetime(2023, 5, 17, 15, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196673407, 'comment_body': 'I think version is ok for all levels - and its the PostgreSQL version, so not 1.\r\n\r\nStart with postgresql-10.yaml and work your way backwards - how would you create -11 ? How would you create a oursetup.yaml with multiple PostgreSQL versions... And so on', 'comment_created': datetime.datetime(2023, 5, 17, 15, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196692161, 'comment_body': 'So to summarize (to check if I\'m understanding it correctly) would it be something like:\r\n\r\n```yaml\r\nversion: 10\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        version: 14\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\nwhere query `A` has a min. ver. of 14, but `B` has version 10 (as unspecified).\r\n\r\nSame for the other way:\r\n\r\n```yaml\r\nversion: 14\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n        version: 10\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\n(this should, according to my understanding, have the same effect for `A` and `B`).\r\n\r\n----\r\n\r\nFurther you want to have separate files like `postgresql-10.yaml`, `postgresql-11.yaml`, etc. with default **top-most** version as 10, 11, etc. for copy-paste by users and have sample queries in them. Over that a ""custom"" `oursetup.yaml` that is something similar to current `sample.yml` but has a top-most `version` to a PostgreSQL version.\r\n\r\nAm I understanding this correctly?', 'comment_created': datetime.datetime(2023, 5, 17, 15, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196694429, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2023, 5, 17, 15, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217958888, 'comment_body': 'I think we need to get rid of `collector` and `server` here first, as the query needs to run on all servers', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217959411, 'comment_body': 'Send it as a separate pull request', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217961977, 'comment_body': 'Hmm, I think there a discussion around this... What are internal queries that are always run vs. what is user defined.\r\n\r\nI like that we can define `collector` labels, but explore more.', 'comment_created': datetime.datetime(2023, 6, 5, 11, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218243482, 'comment_body': 'Got it. Also, should I remove the collector as well? It says primary as in ""primary metric collector"" (based on the comment left by Donglin)', 'comment_created': datetime.datetime(2023, 6, 5, 15, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218246088, 'comment_body': 'We can probably prefix the collector names of internal queries with something like `pgexporter_*` and raise an error if they use the prefix `pgexporter_` in their collector names. Will that work?', 'comment_created': datetime.datetime(2023, 6, 5, 15, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218468574, 'comment_body': ""Nah, I don't like that -- but I agree, there are reserved collector words"", 'comment_created': datetime.datetime(2023, 6, 5, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218501590, 'comment_body': ""Hmmm, should I consider a prefix? A prefix would also enable us to be more flexible, and have the possibility of adding collectors in future without risking conflicting with user defined collectors. Can be something like a dunder (`__`) as well (as prefix and suffix)\r\n\r\nI can't think of any other than releasing a list of reserved collector words (like language reserved words)"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218507666, 'comment_body': ""Why is this important right now ? We can circle back to it, and make sure that it works for 0.4.\r\n\r\nOnly the internal names are important to document if people aren't supplying a YAML file"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218517143, 'comment_body': ""Hmm understood. I was suggesting special collector names so as to exempt them from the `collector_pass` check function I had added that checks if a collector is enabled or not.\r\n\r\nThat way some queries will always be run, and some dependent on the user. I'll explore a bit more on this topic."", 'comment_created': datetime.datetime(2023, 6, 5, 19, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220033613, 'comment_body': ""I think, if we want some queries to always run, and assuming they're all internal queries, I can expand the yaml-from-file-pointer functionality to take in an argument that is true if the query is always allowed.\r\n\r\nSo then, for those queries I can disable the collector-pass check.\r\n\r\nHow do you feel about this approach to the problem? If you want I can give a following commit with the changes I am talking about"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220038712, 'comment_body': 'The ""General"" metrics should always be included - https://pgexporter.github.io/metrics.html - and they could be different between versions.', 'comment_created': datetime.datetime(2023, 6, 6, 17, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220052597, 'comment_body': ""Yes, you'd mentioned this while I was working on the collector feature, so [general queries are always run](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L568) as there is no collector pass in them"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220059446, 'comment_body': 'I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic', 'comment_created': datetime.datetime(2023, 6, 6, 17, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220059587, 'comment_body': 'Also other metrics that are included in general as well like [server information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L589), [version information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L630), [primary information]( https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L766) and [core information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L841).\r\n\r\nOther than that all of the queries have a collector-pass in them like [this](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L1128)', 'comment_created': datetime.datetime(2023, 6, 6, 17, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220082057, 'comment_body': ""> I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic\r\n\r\nGot it. I'll keep that in mind. I feel this would go weel when I'm creating separate PRs for each version, where I'll address this issue as well as add any other metrics etc. for each version in each. Or do you want me to address this issue here?"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220085193, 'comment_body': 'Separate is best', 'comment_created': datetime.datetime(2023, 6, 6, 17, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220086805, 'comment_body': 'So do I need to make any further changes to this PR?', 'comment_created': datetime.datetime(2023, 6, 6, 18, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220091872, 'comment_body': ""I'll do another pass tomorrow"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220092918, 'comment_body': ""Ok! Looking forward to finishing this and moving on to the suggestions you mentioned. I'm quite curious about them"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': 'f27209d959a5c383b85812fc45965054f44051b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416279680,[#74] PostgreSQL V10 metrics examples,,True,75,https://api.github.com/repos/pgexporter/pgexporter/pulls/75,https://github.com/pgexporter/pgexporter/pull/75,closed,444,46,1,1,6,0,1,1,[{'name': 'feature'}],2023-07-01 17:51:05+00:00,2023-08-04 13:49:16+00:00,2923091.0,"33 days, 19:58:11",[],"[{'commit_sha': 'a3da3901a3a1581bc3877912c572e47dbef603b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416340887,[#76] PostgreSQL V11 metrics examples,,True,77,https://api.github.com/repos/pgexporter/pgexporter/pulls/77,https://github.com/pgexporter/pgexporter/pull/77,closed,703,0,1,1,5,0,1,1,[{'name': 'feature'}],2023-07-01 19:59:30+00:00,2023-08-04 14:12:58+00:00,2916808.0,"33 days, 18:13:28",[],"[{'commit_sha': '40299f9f82221e9a8d221fdffaca9f5bbd8191d4', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416353365,[#78] PostgreSQL V12 metrics examples,,True,79,https://api.github.com/repos/pgexporter/pgexporter/pulls/79,https://github.com/pgexporter/pgexporter/pull/79,closed,809,0,1,1,4,0,1,1,[{'name': 'feature'}],2023-07-01 20:14:15+00:00,2023-08-04 14:18:25+00:00,2916250.0,"33 days, 18:04:10",[],"[{'commit_sha': '8ee6aa3e529da25325ed87d8d9c21e101b90ef70', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416355316,[#80] PostgreSQL V13 metrics examples,,True,81,https://api.github.com/repos/pgexporter/pgexporter/pulls/81,https://github.com/pgexporter/pgexporter/pull/81,closed,880,0,1,1,4,0,1,1,[{'name': 'feature'}],2023-07-01 20:21:01+00:00,2023-08-04 14:20:36+00:00,2915975.0,"33 days, 17:59:35",[],"[{'commit_sha': 'ea69920e927480fe35bb570085fe487a188ae1d1', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416371544,[#82] PostgreSQL V14 metrics examples,,True,83,https://api.github.com/repos/pgexporter/pgexporter/pulls/83,https://github.com/pgexporter/pgexporter/pull/83,closed,1059,0,1,1,4,0,1,1,[{'name': 'feature'}],2023-07-01 20:41:00+00:00,2023-08-04 14:22:15+00:00,2914875.0,"33 days, 17:41:15",[],"[{'commit_sha': '708ef47b8d66280cd1ce90a061016d4bbc9edb61', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416375648,[#84] PostgreSQL V15 metrics examples,,True,85,https://api.github.com/repos/pgexporter/pgexporter/pulls/85,https://github.com/pgexporter/pgexporter/pull/85,closed,1081,0,1,1,4,0,1,1,[{'name': 'feature'}],2023-07-01 20:46:29+00:00,2023-08-04 14:23:51+00:00,2914642.0,"33 days, 17:37:22",[],"[{'commit_sha': '1e8f598541d0b19280e6921814ce63b96972397e', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416385136,[#86] PostgreSQL V16 metrics examples,,True,87,https://api.github.com/repos/pgexporter/pgexporter/pulls/87,https://github.com/pgexporter/pgexporter/pull/87,closed,1223,0,1,1,4,2,1,1,[{'name': 'feature'}],2023-07-01 20:59:14+00:00,2023-08-04 14:25:40+00:00,2913986.0,"33 days, 17:26:26","[{'comment_id': 1272560973, 'comment_body': 'Better to do a comment section that lists all 10, like\r\n\r\n```\r\n#\r\n# PostgreSQL 10\r\n#\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 17, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1282640355, 'comment_body': ""I didn't quite get this, can you please explain this more?\r\n\r\nI've provided alternate versions of queries that are available in lower versions along with the alternative that is supported on the current version.\r\n\r\nAlso, should I make this change in every file?"", 'comment_created': datetime.datetime(2023, 8, 3, 4, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': 'd978951b4342f9773a98792f79ace634fe1517c1', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416628594,[#88] More version specific Internal Metrics,,True,89,https://api.github.com/repos/pgexporter/pgexporter/pulls/89,https://github.com/pgexporter/pgexporter/pull/89,closed,1070,36,1,1,12,0,1,1,[{'name': 'enhancement'}],2023-07-02 07:50:48+00:00,2023-08-07 12:23:28+00:00,3126760.0,"36 days, 4:32:40",[],"[{'commit_sha': '33d044a7c35f5fed73f7e8a12128944d430c9fc8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416279680,[#74] PostgreSQL V10 metrics examples,,True,75,https://api.github.com/repos/pgexporter/pgexporter/pulls/75,https://github.com/pgexporter/pgexporter/pull/75,closed,444,46,1,1,6,0,1,1,[{'name': 'feature'}],2023-07-01 17:51:05+00:00,2023-08-04 13:49:16+00:00,2923091.0,"33 days, 19:58:11",[],"[{'commit_sha': 'a3da3901a3a1581bc3877912c572e47dbef603b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1385951210,[#69] Query's server value should be both,,True,70,https://api.github.com/repos/pgexporter/pgexporter/pulls/70,https://github.com/pgexporter/pgexporter/pull/70,closed,1,1,1,1,1,0,1,1,[{'name': 'bug'}],2023-06-09 10:31:06+00:00,2023-06-09 13:15:33+00:00,9867.0,2:44:27,[],"[{'commit_sha': 'ad04880bf90a28ffbad32ef69e4eb56bb766ba6e', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1353584986,[#66] YAML Support for multiple queries,,False,67,https://api.github.com/repos/pgexporter/pgexporter/pulls/67,https://github.com/pgexporter/pgexporter/pull/67,closed,2293,1139,12,1,20,34,1,1,[{'name': 'feature'}],2023-05-17 06:57:10+00:00,2023-06-07 16:31:54+00:00,1848884.0,"21 days, 9:34:44","[{'comment_id': 1196634604, 'comment_body': ""I think `sample.yaml` will be too difficult for most people...\r\n\r\nWe should have explicit files for each version, so it is a standard copy'n'paste into their installation.\r\n\r\nAnd, there will be different metrics for each version -- especially with 16 and all the `pg_statio_*` views..."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196635578, 'comment_body': 'Same issue here - we need `INTERNAL_10_YAML` and so on...', 'comment_created': datetime.datetime(2023, 5, 17, 14, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196636637, 'comment_body': 'Or a way to add additional queries to a setup... that is a discussion', 'comment_created': datetime.datetime(2023, 5, 17, 14, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196645754, 'comment_body': ""Oh no, this `version` at the top is a tentative version for the version of the **YAML file** (kinda like APIs have /api/v1 or /api/v2 if the new version is not backward compatible with the new version).\r\n\r\nThe difference between the previous YAML structure and the new YAML structure made me think of this.\r\n\r\nThis was something I was wondering if it should be added...later I can add support for that version too if needed :)\r\n\r\nAlso yeah I agree on the difficulty part...but it was something I thought would be a fair tradeoff to functionality, as it's just one more layer of sequence from previous structure."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196653476, 'comment_body': 'I meant the file as a whole', 'comment_created': datetime.datetime(2023, 5, 17, 14, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196653888, 'comment_body': ""So what I'm understanding is that you want to keep the previous YAML structure but separate them out into multiple files with the topmost `version` denoting the PostgreSQL version?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196654426, 'comment_body': 'We can change the YAML structure - if really needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196656528, 'comment_body': 'version could be defined top-level as a default, and then overwritten per query. Per query is def needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196658801, 'comment_body': 'Ideally, people want one file that can over all their PostgreSQL installations, and this is where version support is important.', 'comment_created': datetime.datetime(2023, 5, 17, 14, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196659424, 'comment_body': ""Ok, so according to you, if query's version is not provided, the file's default value will be taken?\r\n\r\nAlso, so should I rename the topmost `version` to `default_version`?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196665977, 'comment_body': ""Hmmm yeah, that would make it much more friendly from a user's POV."", 'comment_created': datetime.datetime(2023, 5, 17, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196667353, 'comment_body': ""If you give the green light, I'll go ahead with this then!"", 'comment_created': datetime.datetime(2023, 5, 17, 15, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196673407, 'comment_body': 'I think version is ok for all levels - and its the PostgreSQL version, so not 1.\r\n\r\nStart with postgresql-10.yaml and work your way backwards - how would you create -11 ? How would you create a oursetup.yaml with multiple PostgreSQL versions... And so on', 'comment_created': datetime.datetime(2023, 5, 17, 15, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196692161, 'comment_body': 'So to summarize (to check if I\'m understanding it correctly) would it be something like:\r\n\r\n```yaml\r\nversion: 10\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        version: 14\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\nwhere query `A` has a min. ver. of 14, but `B` has version 10 (as unspecified).\r\n\r\nSame for the other way:\r\n\r\n```yaml\r\nversion: 14\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n        version: 10\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\n(this should, according to my understanding, have the same effect for `A` and `B`).\r\n\r\n----\r\n\r\nFurther you want to have separate files like `postgresql-10.yaml`, `postgresql-11.yaml`, etc. with default **top-most** version as 10, 11, etc. for copy-paste by users and have sample queries in them. Over that a ""custom"" `oursetup.yaml` that is something similar to current `sample.yml` but has a top-most `version` to a PostgreSQL version.\r\n\r\nAm I understanding this correctly?', 'comment_created': datetime.datetime(2023, 5, 17, 15, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196694429, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2023, 5, 17, 15, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217958888, 'comment_body': 'I think we need to get rid of `collector` and `server` here first, as the query needs to run on all servers', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217959411, 'comment_body': 'Send it as a separate pull request', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217961977, 'comment_body': 'Hmm, I think there a discussion around this... What are internal queries that are always run vs. what is user defined.\r\n\r\nI like that we can define `collector` labels, but explore more.', 'comment_created': datetime.datetime(2023, 6, 5, 11, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218243482, 'comment_body': 'Got it. Also, should I remove the collector as well? It says primary as in ""primary metric collector"" (based on the comment left by Donglin)', 'comment_created': datetime.datetime(2023, 6, 5, 15, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218246088, 'comment_body': 'We can probably prefix the collector names of internal queries with something like `pgexporter_*` and raise an error if they use the prefix `pgexporter_` in their collector names. Will that work?', 'comment_created': datetime.datetime(2023, 6, 5, 15, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218468574, 'comment_body': ""Nah, I don't like that -- but I agree, there are reserved collector words"", 'comment_created': datetime.datetime(2023, 6, 5, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218501590, 'comment_body': ""Hmmm, should I consider a prefix? A prefix would also enable us to be more flexible, and have the possibility of adding collectors in future without risking conflicting with user defined collectors. Can be something like a dunder (`__`) as well (as prefix and suffix)\r\n\r\nI can't think of any other than releasing a list of reserved collector words (like language reserved words)"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218507666, 'comment_body': ""Why is this important right now ? We can circle back to it, and make sure that it works for 0.4.\r\n\r\nOnly the internal names are important to document if people aren't supplying a YAML file"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218517143, 'comment_body': ""Hmm understood. I was suggesting special collector names so as to exempt them from the `collector_pass` check function I had added that checks if a collector is enabled or not.\r\n\r\nThat way some queries will always be run, and some dependent on the user. I'll explore a bit more on this topic."", 'comment_created': datetime.datetime(2023, 6, 5, 19, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220033613, 'comment_body': ""I think, if we want some queries to always run, and assuming they're all internal queries, I can expand the yaml-from-file-pointer functionality to take in an argument that is true if the query is always allowed.\r\n\r\nSo then, for those queries I can disable the collector-pass check.\r\n\r\nHow do you feel about this approach to the problem? If you want I can give a following commit with the changes I am talking about"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220038712, 'comment_body': 'The ""General"" metrics should always be included - https://pgexporter.github.io/metrics.html - and they could be different between versions.', 'comment_created': datetime.datetime(2023, 6, 6, 17, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220052597, 'comment_body': ""Yes, you'd mentioned this while I was working on the collector feature, so [general queries are always run](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L568) as there is no collector pass in them"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220059446, 'comment_body': 'I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic', 'comment_created': datetime.datetime(2023, 6, 6, 17, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220059587, 'comment_body': 'Also other metrics that are included in general as well like [server information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L589), [version information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L630), [primary information]( https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L766) and [core information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L841).\r\n\r\nOther than that all of the queries have a collector-pass in them like [this](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L1128)', 'comment_created': datetime.datetime(2023, 6, 6, 17, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220082057, 'comment_body': ""> I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic\r\n\r\nGot it. I'll keep that in mind. I feel this would go weel when I'm creating separate PRs for each version, where I'll address this issue as well as add any other metrics etc. for each version in each. Or do you want me to address this issue here?"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220085193, 'comment_body': 'Separate is best', 'comment_created': datetime.datetime(2023, 6, 6, 17, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220086805, 'comment_body': 'So do I need to make any further changes to this PR?', 'comment_created': datetime.datetime(2023, 6, 6, 18, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220091872, 'comment_body': ""I'll do another pass tomorrow"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220092918, 'comment_body': ""Ok! Looking forward to finishing this and moving on to the suggestions you mentioned. I'm quite curious about them"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': 'f27209d959a5c383b85812fc45965054f44051b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416279680,[#74] PostgreSQL V10 metrics examples,,True,75,https://api.github.com/repos/pgexporter/pgexporter/pulls/75,https://github.com/pgexporter/pgexporter/pull/75,closed,444,46,1,1,6,0,1,1,[{'name': 'feature'}],2023-07-01 17:51:05+00:00,2023-08-04 13:49:16+00:00,2923091.0,"33 days, 19:58:11",[],"[{'commit_sha': 'a3da3901a3a1581bc3877912c572e47dbef603b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416355316,[#80] PostgreSQL V13 metrics examples,,True,81,https://api.github.com/repos/pgexporter/pgexporter/pulls/81,https://github.com/pgexporter/pgexporter/pull/81,closed,880,0,1,1,4,0,1,1,[{'name': 'feature'}],2023-07-01 20:21:01+00:00,2023-08-04 14:20:36+00:00,2915975.0,"33 days, 17:59:35",[],"[{'commit_sha': 'ea69920e927480fe35bb570085fe487a188ae1d1', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416279680,[#74] PostgreSQL V10 metrics examples,,True,75,https://api.github.com/repos/pgexporter/pgexporter/pulls/75,https://github.com/pgexporter/pgexporter/pull/75,closed,444,46,1,1,6,0,1,1,[{'name': 'feature'}],2023-07-01 17:51:05+00:00,2023-08-04 13:49:16+00:00,2923091.0,"33 days, 19:58:11",[],"[{'commit_sha': 'a3da3901a3a1581bc3877912c572e47dbef603b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416340887,[#76] PostgreSQL V11 metrics examples,,True,77,https://api.github.com/repos/pgexporter/pgexporter/pulls/77,https://github.com/pgexporter/pgexporter/pull/77,closed,703,0,1,1,5,0,1,1,[{'name': 'feature'}],2023-07-01 19:59:30+00:00,2023-08-04 14:12:58+00:00,2916808.0,"33 days, 18:13:28",[],"[{'commit_sha': '40299f9f82221e9a8d221fdffaca9f5bbd8191d4', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416353365,[#78] PostgreSQL V12 metrics examples,,True,79,https://api.github.com/repos/pgexporter/pgexporter/pulls/79,https://github.com/pgexporter/pgexporter/pull/79,closed,809,0,1,1,4,0,1,1,[{'name': 'feature'}],2023-07-01 20:14:15+00:00,2023-08-04 14:18:25+00:00,2916250.0,"33 days, 18:04:10",[],"[{'commit_sha': '8ee6aa3e529da25325ed87d8d9c21e101b90ef70', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416355316,[#80] PostgreSQL V13 metrics examples,,True,81,https://api.github.com/repos/pgexporter/pgexporter/pulls/81,https://github.com/pgexporter/pgexporter/pull/81,closed,880,0,1,1,4,0,1,1,[{'name': 'feature'}],2023-07-01 20:21:01+00:00,2023-08-04 14:20:36+00:00,2915975.0,"33 days, 17:59:35",[],"[{'commit_sha': 'ea69920e927480fe35bb570085fe487a188ae1d1', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416371544,[#82] PostgreSQL V14 metrics examples,,True,83,https://api.github.com/repos/pgexporter/pgexporter/pulls/83,https://github.com/pgexporter/pgexporter/pull/83,closed,1059,0,1,1,4,0,1,1,[{'name': 'feature'}],2023-07-01 20:41:00+00:00,2023-08-04 14:22:15+00:00,2914875.0,"33 days, 17:41:15",[],"[{'commit_sha': '708ef47b8d66280cd1ce90a061016d4bbc9edb61', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416375648,[#84] PostgreSQL V15 metrics examples,,True,85,https://api.github.com/repos/pgexporter/pgexporter/pulls/85,https://github.com/pgexporter/pgexporter/pull/85,closed,1081,0,1,1,4,0,1,1,[{'name': 'feature'}],2023-07-01 20:46:29+00:00,2023-08-04 14:23:51+00:00,2914642.0,"33 days, 17:37:22",[],"[{'commit_sha': '1e8f598541d0b19280e6921814ce63b96972397e', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416385136,[#86] PostgreSQL V16 metrics examples,,True,87,https://api.github.com/repos/pgexporter/pgexporter/pulls/87,https://github.com/pgexporter/pgexporter/pull/87,closed,1223,0,1,1,4,2,1,1,[{'name': 'feature'}],2023-07-01 20:59:14+00:00,2023-08-04 14:25:40+00:00,2913986.0,"33 days, 17:26:26","[{'comment_id': 1272560973, 'comment_body': 'Better to do a comment section that lists all 10, like\r\n\r\n```\r\n#\r\n# PostgreSQL 10\r\n#\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 17, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1282640355, 'comment_body': ""I didn't quite get this, can you please explain this more?\r\n\r\nI've provided alternate versions of queries that are available in lower versions along with the alternative that is supported on the current version.\r\n\r\nAlso, should I make this change in every file?"", 'comment_created': datetime.datetime(2023, 8, 3, 4, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': 'd978951b4342f9773a98792f79ace634fe1517c1', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416628594,[#88] More version specific Internal Metrics,,True,89,https://api.github.com/repos/pgexporter/pgexporter/pulls/89,https://github.com/pgexporter/pgexporter/pull/89,closed,1070,36,1,1,12,0,1,1,[{'name': 'enhancement'}],2023-07-02 07:50:48+00:00,2023-08-07 12:23:28+00:00,3126760.0,"36 days, 4:32:40",[],"[{'commit_sha': '33d044a7c35f5fed73f7e8a12128944d430c9fc8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1416245594,[#72] Some empty queries break output,,True,73,https://api.github.com/repos/pgexporter/pgexporter/pulls/73,https://github.com/pgexporter/pgexporter/pull/73,closed,249,257,4,1,9,3,1,1,[{'name': 'bug'}],2023-07-01 16:49:19+00:00,2023-07-10 19:17:30+00:00,786491.0,"9 days, 2:28:11","[{'comment_id': 1258582307, 'comment_body': '`temp->error` ?\r\n\r\n`{` on wrong line - uncrustify', 'comment_created': datetime.datetime(2023, 7, 10, 16, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1258582517, 'comment_body': 'uncrustify', 'comment_created': datetime.datetime(2023, 7, 10, 16, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1258610230, 'comment_body': ""Yeah I'll use uncrustify and push it, forgot about this sorry!\r\n\r\nAlso, `temp` was sometimes a result of an error, which caused the queries in it to remain empty. Since it is a singly linked list, it was a bit of a problem to free it and reuse it again, and the cause of one of the issues I'd mentioned. Any query that resulted in an error (unsupported, etc.) gets cleaned up later.\r\n\r\nI simply took a note of the return value of executing the query on the server (1 if error, 0 if not) and put it `temp->error`."", 'comment_created': datetime.datetime(2023, 7, 10, 17, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': '182a12da55a21f130bf7478fd9ee8f621d98323e', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1443078171,[#90] Duplicate Server Name,"Warns the user about a name duplication (replication for config is provided in the issue):

![image](https://github.com/pgexporter/pgexporter/assets/74897008/d979c586-96c3-40a7-9806-7cdd7278716e)

It will still run as it did before, but the warning would hopefully encourage users to fix it.",True,91,https://api.github.com/repos/pgexporter/pgexporter/pulls/91,https://github.com/pgexporter/pgexporter/pull/91,closed,11,0,1,1,6,2,1,1,[{'name': 'bug'}],2023-07-20 15:03:26+00:00,2023-07-21 13:57:25+00:00,82439.0,22:53:59,"[{'comment_id': 1270617266, 'comment_body': 'Why -1 ?', 'comment_created': datetime.datetime(2023, 7, 21, 12, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1270647479, 'comment_body': 'So, in `i`th iteration, the `i-1`th server (`srv`) is getting saved ([here](https://github.com/pgexporter/pgexporter/blob/21de355ec68e6da5e8ab6a86ef7ba0d4872a084a/src/libpgexporter/configuration.c#L187) and [here](https://github.com/pgexporter/pgexporter/blob/21de355ec68e6da5e8ab6a86ef7ba0d4872a084a/src/libpgexporter/configuration.c#L179)). So, if I need to compare `srv.name` to check duplication of names, I need to check for `0` to `i-2` including both.', 'comment_created': datetime.datetime(2023, 7, 21, 12, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': '21de355ec68e6da5e8ab6a86ef7ba0d4872a084a', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1444562013,[#92] Last server name in config can be duplicate,,True,93,https://api.github.com/repos/pgexporter/pgexporter/pulls/93,https://github.com/pgexporter/pgexporter/pull/93,closed,20,10,1,1,2,0,1,1,[{'name': 'bug'}],2023-07-21 14:14:22+00:00,2023-07-24 13:04:41+00:00,255019.0,"2 days, 22:50:19",[],"[{'commit_sha': 'c2076d50acd3ed227d8aec3f0949f48d923b9adb', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1463831592,[#94] pgexporter_pg_settings metrics across servers are not grouped properly,"Fixed

![image](https://github.com/pgexporter/pgexporter/assets/74897008/be38f21a-91f7-4d8d-a37f-54bdc1d827a9)
",True,95,https://api.github.com/repos/pgexporter/pgexporter/pulls/95,https://github.com/pgexporter/pgexporter/pull/95,closed,29,18,1,1,4,2,1,1,[{'name': 'bug'}],2023-08-05 14:04:32+00:00,2023-08-09 14:24:21+00:00,346789.0,"4 days, 0:19:49","[{'comment_id': 1285253210, 'comment_body': 'Can you add `{` and `}` so it stands out ?', 'comment_created': datetime.datetime(2023, 8, 6, 19, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1285253227, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2023, 8, 6, 19, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}]","[{'commit_sha': '467f2f941fdefcf1637791b84233423f46b03fcc', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1463946368,[#96] Instructions for use with Grafana,"A great amount of contribution to this from @linzs148 who helped provide the base for this, upon which I made some modifications.",True,97,https://api.github.com/repos/pgexporter/pgexporter/pulls/97,https://github.com/pgexporter/pgexporter/pull/97,closed,127,0,12,1,2,1,1,1,[{'name': 'documentation'}],2023-08-05 20:38:02+00:00,2023-08-09 14:34:13+00:00,323771.0,"3 days, 17:56:11","[{'comment_id': 1285253009, 'comment_body': 'All images should be done locally to this repository', 'comment_created': datetime.datetime(2023, 8, 6, 19, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}]","[{'commit_sha': 'aa0b3017edb3af7fc224c130b8f3fba2587d67e5', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1468855430,[#98] Clang Sanitizer Compiler Options,,True,99,https://api.github.com/repos/pgexporter/pgexporter/pulls/99,https://github.com/pgexporter/pgexporter/pull/99,closed,10,4,2,1,2,0,1,1,[{'name': 'enhancement'}],2023-08-09 15:26:58+00:00,2023-08-09 15:28:22+00:00,84.0,0:01:24,[],"[{'commit_sha': 'e48e9379a2c89f0e7c7bc57d93a42ed3d328517e', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1469124661,[#100] Char to unsigned typecast,,True,101,https://api.github.com/repos/pgexporter/pgexporter/pulls/101,https://github.com/pgexporter/pgexporter/pull/101,closed,25,25,1,1,3,0,1,1,[{'name': 'enhancement'}],2023-08-09 18:43:41+00:00,2023-08-09 18:55:35+00:00,714.0,0:11:54,[],"[{'commit_sha': '64179c06a0210a5fb41cac7f0732018ab955e738', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1476197530,[#102] YAML Memory Leak,,True,103,https://api.github.com/repos/pgexporter/pgexporter/pulls/103,https://github.com/pgexporter/pgexporter/pull/103,closed,48,11,4,1,5,0,1,1,[{'name': 'bug'}],2023-08-15 16:51:59+00:00,2023-08-22 12:52:00+00:00,590401.0,"6 days, 20:00:01",[],"[{'commit_sha': '53918e70a7e0a40066df918d9a1cae9433f0a423', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1486868064,[#104] Code cleanup after GSoC 2023,,True,105,https://api.github.com/repos/pgexporter/pgexporter/pulls/105,https://github.com/pgexporter/pgexporter/pull/105,closed,442,377,24,1,2,0,1,1,[{'name': 'enhancement'}],2023-08-23 18:33:49+00:00,2023-08-23 18:51:12+00:00,1043.0,0:17:23,[],"[{'commit_sha': '5ff7b4866c476698915a119442c7c9a8f2b398f1', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1349372674,[#64] Retrieving Server's Information,,True,65,https://api.github.com/repos/pgexporter/pgexporter/pulls/65,https://github.com/pgexporter/pgexporter/pull/65,closed,41,0,4,1,2,8,1,1,[{'name': 'feature'}],2023-05-13 02:42:30+00:00,2023-05-16 18:42:25+00:00,316795.0,"3 days, 15:59:55","[{'comment_id': 1193785978, 'comment_body': 'I think we can put this SQL directly in the function', 'comment_created': datetime.datetime(2023, 5, 15, 12, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1193786495, 'comment_body': ""I don't think we need a `typedef` for this"", 'comment_created': datetime.datetime(2023, 5, 15, 12, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1193786690, 'comment_body': '`char` should be enough', 'comment_created': datetime.datetime(2023, 5, 15, 12, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1194145519, 'comment_body': '`char`', 'comment_created': datetime.datetime(2023, 5, 15, 17, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1194145811, 'comment_body': ""Shouldn't be needed"", 'comment_created': datetime.datetime(2023, 5, 15, 17, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1195538541, 'comment_body': 'We are not really doing that though...\r\n\r\nThinking about it - lets just keep it as a status code - so `int`, and assign internally in the function', 'comment_created': datetime.datetime(2023, 5, 16, 18, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1195543273, 'comment_body': ""Oh I am really sorry about this. I was travelling back to my place when I made this change and pushed as soon as I got internet, and it was a lapse of judgement on my part.\r\n\r\nYes I am indeed assigning the version internally and the returned value is just 0 if all's ok and 1 if not.\r\n\r\nI'll change it back immediately."", 'comment_created': datetime.datetime(2023, 5, 16, 18, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1195544284, 'comment_body': 'np', 'comment_created': datetime.datetime(2023, 5, 16, 18, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}]","[{'commit_sha': '197e314b4834de8efffb579f7d36bee2eb2d8ac6', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1353584986,[#66] YAML Support for multiple queries,,False,67,https://api.github.com/repos/pgexporter/pgexporter/pulls/67,https://github.com/pgexporter/pgexporter/pull/67,closed,2293,1139,12,1,20,34,1,1,[{'name': 'feature'}],2023-05-17 06:57:10+00:00,2023-06-07 16:31:54+00:00,1848884.0,"21 days, 9:34:44","[{'comment_id': 1196634604, 'comment_body': ""I think `sample.yaml` will be too difficult for most people...\r\n\r\nWe should have explicit files for each version, so it is a standard copy'n'paste into their installation.\r\n\r\nAnd, there will be different metrics for each version -- especially with 16 and all the `pg_statio_*` views..."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196635578, 'comment_body': 'Same issue here - we need `INTERNAL_10_YAML` and so on...', 'comment_created': datetime.datetime(2023, 5, 17, 14, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196636637, 'comment_body': 'Or a way to add additional queries to a setup... that is a discussion', 'comment_created': datetime.datetime(2023, 5, 17, 14, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196645754, 'comment_body': ""Oh no, this `version` at the top is a tentative version for the version of the **YAML file** (kinda like APIs have /api/v1 or /api/v2 if the new version is not backward compatible with the new version).\r\n\r\nThe difference between the previous YAML structure and the new YAML structure made me think of this.\r\n\r\nThis was something I was wondering if it should be added...later I can add support for that version too if needed :)\r\n\r\nAlso yeah I agree on the difficulty part...but it was something I thought would be a fair tradeoff to functionality, as it's just one more layer of sequence from previous structure."", 'comment_created': datetime.datetime(2023, 5, 17, 14, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196653476, 'comment_body': 'I meant the file as a whole', 'comment_created': datetime.datetime(2023, 5, 17, 14, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196653888, 'comment_body': ""So what I'm understanding is that you want to keep the previous YAML structure but separate them out into multiple files with the topmost `version` denoting the PostgreSQL version?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196654426, 'comment_body': 'We can change the YAML structure - if really needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196656528, 'comment_body': 'version could be defined top-level as a default, and then overwritten per query. Per query is def needed', 'comment_created': datetime.datetime(2023, 5, 17, 14, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196658801, 'comment_body': 'Ideally, people want one file that can over all their PostgreSQL installations, and this is where version support is important.', 'comment_created': datetime.datetime(2023, 5, 17, 14, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196659424, 'comment_body': ""Ok, so according to you, if query's version is not provided, the file's default value will be taken?\r\n\r\nAlso, so should I rename the topmost `version` to `default_version`?"", 'comment_created': datetime.datetime(2023, 5, 17, 14, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196665977, 'comment_body': ""Hmmm yeah, that would make it much more friendly from a user's POV."", 'comment_created': datetime.datetime(2023, 5, 17, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196667353, 'comment_body': ""If you give the green light, I'll go ahead with this then!"", 'comment_created': datetime.datetime(2023, 5, 17, 15, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196673407, 'comment_body': 'I think version is ok for all levels - and its the PostgreSQL version, so not 1.\r\n\r\nStart with postgresql-10.yaml and work your way backwards - how would you create -11 ? How would you create a oursetup.yaml with multiple PostgreSQL versions... And so on', 'comment_created': datetime.datetime(2023, 5, 17, 15, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1196692161, 'comment_body': 'So to summarize (to check if I\'m understanding it correctly) would it be something like:\r\n\r\n```yaml\r\nversion: 10\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        version: 14\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\nwhere query `A` has a min. ver. of 14, but `B` has version 10 (as unspecified).\r\n\r\nSame for the other way:\r\n\r\n```yaml\r\nversion: 14\r\nmetrics:\r\n  - queries:\r\n      - query: A\r\n        ...\r\n        columns:\r\n          - name: ...\r\n            type: ...\r\n      - query: B\r\n        ...\r\n        columns:\r\n        version: 10\r\n          - name: ...\r\n            type: ...\r\n```\r\n\r\n(this should, according to my understanding, have the same effect for `A` and `B`).\r\n\r\n----\r\n\r\nFurther you want to have separate files like `postgresql-10.yaml`, `postgresql-11.yaml`, etc. with default **top-most** version as 10, 11, etc. for copy-paste by users and have sample queries in them. Over that a ""custom"" `oursetup.yaml` that is something similar to current `sample.yml` but has a top-most `version` to a PostgreSQL version.\r\n\r\nAm I understanding this correctly?', 'comment_created': datetime.datetime(2023, 5, 17, 15, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1196694429, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2023, 5, 17, 15, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217958888, 'comment_body': 'I think we need to get rid of `collector` and `server` here first, as the query needs to run on all servers', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217959411, 'comment_body': 'Send it as a separate pull request', 'comment_created': datetime.datetime(2023, 6, 5, 11, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1217961977, 'comment_body': 'Hmm, I think there a discussion around this... What are internal queries that are always run vs. what is user defined.\r\n\r\nI like that we can define `collector` labels, but explore more.', 'comment_created': datetime.datetime(2023, 6, 5, 11, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218243482, 'comment_body': 'Got it. Also, should I remove the collector as well? It says primary as in ""primary metric collector"" (based on the comment left by Donglin)', 'comment_created': datetime.datetime(2023, 6, 5, 15, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218246088, 'comment_body': 'We can probably prefix the collector names of internal queries with something like `pgexporter_*` and raise an error if they use the prefix `pgexporter_` in their collector names. Will that work?', 'comment_created': datetime.datetime(2023, 6, 5, 15, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218468574, 'comment_body': ""Nah, I don't like that -- but I agree, there are reserved collector words"", 'comment_created': datetime.datetime(2023, 6, 5, 18, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218501590, 'comment_body': ""Hmmm, should I consider a prefix? A prefix would also enable us to be more flexible, and have the possibility of adding collectors in future without risking conflicting with user defined collectors. Can be something like a dunder (`__`) as well (as prefix and suffix)\r\n\r\nI can't think of any other than releasing a list of reserved collector words (like language reserved words)"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1218507666, 'comment_body': ""Why is this important right now ? We can circle back to it, and make sure that it works for 0.4.\r\n\r\nOnly the internal names are important to document if people aren't supplying a YAML file"", 'comment_created': datetime.datetime(2023, 6, 5, 19, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1218517143, 'comment_body': ""Hmm understood. I was suggesting special collector names so as to exempt them from the `collector_pass` check function I had added that checks if a collector is enabled or not.\r\n\r\nThat way some queries will always be run, and some dependent on the user. I'll explore a bit more on this topic."", 'comment_created': datetime.datetime(2023, 6, 5, 19, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220033613, 'comment_body': ""I think, if we want some queries to always run, and assuming they're all internal queries, I can expand the yaml-from-file-pointer functionality to take in an argument that is true if the query is always allowed.\r\n\r\nSo then, for those queries I can disable the collector-pass check.\r\n\r\nHow do you feel about this approach to the problem? If you want I can give a following commit with the changes I am talking about"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220038712, 'comment_body': 'The ""General"" metrics should always be included - https://pgexporter.github.io/metrics.html - and they could be different between versions.', 'comment_created': datetime.datetime(2023, 6, 6, 17, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220052597, 'comment_body': ""Yes, you'd mentioned this while I was working on the collector feature, so [general queries are always run](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L568) as there is no collector pass in them"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220059446, 'comment_body': 'I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic', 'comment_created': datetime.datetime(2023, 6, 6, 17, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220059587, 'comment_body': 'Also other metrics that are included in general as well like [server information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L589), [version information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L630), [primary information]( https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L766) and [core information](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L841).\r\n\r\nOther than that all of the queries have a collector-pass in them like [this](https://github.com/pgexporter/pgexporter/blob/main/src/libpgexporter/prometheus.c#L1128)', 'comment_created': datetime.datetime(2023, 6, 6, 17, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220082057, 'comment_body': ""> I feel like this a separate dicussion - a user should just be able to specify a list of collectors, and a version - then the rest is automatic\r\n\r\nGot it. I'll keep that in mind. I feel this would go weel when I'm creating separate PRs for each version, where I'll address this issue as well as add any other metrics etc. for each version in each. Or do you want me to address this issue here?"", 'comment_created': datetime.datetime(2023, 6, 6, 17, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220085193, 'comment_body': 'Separate is best', 'comment_created': datetime.datetime(2023, 6, 6, 17, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220086805, 'comment_body': 'So do I need to make any further changes to this PR?', 'comment_created': datetime.datetime(2023, 6, 6, 18, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}, {'comment_id': 1220091872, 'comment_body': ""I'll do another pass tomorrow"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1220092918, 'comment_body': ""Ok! Looking forward to finishing this and moving on to the suggestions you mentioned. I'm quite curious about them"", 'comment_created': datetime.datetime(2023, 6, 6, 18, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'resyfer', 'type': 'User'}]","[{'commit_sha': 'f27209d959a5c383b85812fc45965054f44051b8', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71
1324105929,[#34] Implement metric collectors for pgexporter,Fixes the issue #34 ,True,61,https://api.github.com/repos/pgexporter/pgexporter/pulls/61,https://github.com/pgexporter/pgexporter/pull/61,closed,213,60,9,1,3,2,1,1,[{'name': 'feature'}],2023-04-22 20:18:01+00:00,2023-04-25 07:35:52+00:00,213471.0,"2 days, 11:17:51","[{'comment_id': 1175138354, 'comment_body': 'No', 'comment_created': datetime.datetime(2023, 4, 24, 11, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}, {'comment_id': 1175138476, 'comment_body': 'No', 'comment_created': datetime.datetime(2023, 4, 24, 11, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jesperpedersen', 'type': 'User'}]","[{'commit_sha': 'bb10e64d9531a59d3033e0ba208cfe5730dc7a2d', 'committer_username': 'resyfer', 'committer_name': 'Saurav Pal', 'committer_email': 'resyfer.dev@gmail.com', 'commit_date': datetime.datetime(2020, 11, 23, 7, 33, 39, tzinfo=datetime.timezone.utc)}]",Saurav Pal,74897008,resyfer.dev@gmail.com,User,,59,,43,71

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
406730797,pgexporter,pgexporter/pgexporter,C,10,50,5,7,149,6,6,0,"[{'id': 1751189783, 'number': 130, 'closed': datetime.datetime(2024, 3, 1, 14, 26, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 1, 8, 2, 36, tzinfo=datetime.timezone.utc), 'time_taken': 23060.0, 'time_delta': '6:24:20', 'additions': 217, 'deletions': 0, 'state': 'closed'}, {'id': 1563047240, 'number': 118, 'closed': datetime.datetime(2023, 12, 23, 11, 56, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 18, 16, 34, 50, tzinfo=datetime.timezone.utc), 'time_taken': 5685713.0, 'time_delta': '65 days, 19:21:53', 'additions': 43, 'deletions': 25, 'state': 'closed'}, {'id': 1562291157, 'number': 116, 'closed': datetime.datetime(2023, 12, 19, 9, 47, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 18, 9, 55, 22, tzinfo=datetime.timezone.utc), 'time_taken': 5356341.0, 'time_delta': '61 days, 23:52:21', 'additions': 40, 'deletions': 18, 'state': 'closed'}, {'id': 1557298348, 'number': 114, 'closed': datetime.datetime(2023, 10, 15, 15, 12, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 15, 5, 27, 4, tzinfo=datetime.timezone.utc), 'time_taken': 35120.0, 'time_delta': '9:45:20', 'additions': 36, 'deletions': 21, 'state': 'closed'}, {'id': 1543461543, 'number': 111, 'closed': datetime.datetime(2023, 10, 5, 19, 30, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 5, 11, 23, 21, tzinfo=datetime.timezone.utc), 'time_taken': 29257.0, 'time_delta': '8:07:37', 'additions': 30, 'deletions': 30, 'state': 'closed'}, {'id': 1486868064, 'number': 105, 'closed': datetime.datetime(2023, 8, 23, 18, 51, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 18, 33, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1043.0, 'time_delta': '0:17:23', 'additions': 442, 'deletions': 377, 'state': 'closed'}, {'id': 1476197530, 'number': 103, 'closed': datetime.datetime(2023, 8, 22, 12, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 15, 16, 51, 59, tzinfo=datetime.timezone.utc), 'time_taken': 590401.0, 'time_delta': '6 days, 20:00:01', 'additions': 48, 'deletions': 11, 'state': 'closed'}, {'id': 1469124661, 'number': 101, 'closed': datetime.datetime(2023, 8, 9, 18, 55, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 18, 43, 41, tzinfo=datetime.timezone.utc), 'time_taken': 714.0, 'time_delta': '0:11:54', 'additions': 25, 'deletions': 25, 'state': 'closed'}, {'id': 1468855430, 'number': 99, 'closed': datetime.datetime(2023, 8, 9, 15, 28, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 15, 26, 58, tzinfo=datetime.timezone.utc), 'time_taken': 84.0, 'time_delta': '0:01:24', 'additions': 10, 'deletions': 4, 'state': 'closed'}, {'id': 1463946368, 'number': 97, 'closed': datetime.datetime(2023, 8, 9, 14, 34, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 5, 20, 38, 2, tzinfo=datetime.timezone.utc), 'time_taken': 323771.0, 'time_delta': '3 days, 17:56:11', 'additions': 127, 'deletions': 0, 'state': 'closed'}, {'id': 1463831592, 'number': 95, 'closed': datetime.datetime(2023, 8, 9, 14, 24, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 5, 14, 4, 32, tzinfo=datetime.timezone.utc), 'time_taken': 346789.0, 'time_delta': '4 days, 0:19:49', 'additions': 29, 'deletions': 18, 'state': 'closed'}, {'id': 1444562013, 'number': 93, 'closed': datetime.datetime(2023, 7, 24, 13, 4, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 21, 14, 14, 22, tzinfo=datetime.timezone.utc), 'time_taken': 255019.0, 'time_delta': '2 days, 22:50:19', 'additions': 20, 'deletions': 10, 'state': 'closed'}, {'id': 1443078171, 'number': 91, 'closed': datetime.datetime(2023, 7, 21, 13, 57, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 20, 15, 3, 26, tzinfo=datetime.timezone.utc), 'time_taken': 82439.0, 'time_delta': '22:53:59', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 1416628594, 'number': 89, 'closed': datetime.datetime(2023, 8, 7, 12, 23, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 2, 7, 50, 48, tzinfo=datetime.timezone.utc), 'time_taken': 3126760.0, 'time_delta': '36 days, 4:32:40', 'additions': 1070, 'deletions': 36, 'state': 'closed'}, {'id': 1416385136, 'number': 87, 'closed': datetime.datetime(2023, 8, 4, 14, 25, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 20, 59, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2913986.0, 'time_delta': '33 days, 17:26:26', 'additions': 1223, 'deletions': 0, 'state': 'closed'}, {'id': 1416375648, 'number': 85, 'closed': datetime.datetime(2023, 8, 4, 14, 23, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 20, 46, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2914642.0, 'time_delta': '33 days, 17:37:22', 'additions': 1081, 'deletions': 0, 'state': 'closed'}, {'id': 1416371544, 'number': 83, 'closed': datetime.datetime(2023, 8, 4, 14, 22, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 20, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2914875.0, 'time_delta': '33 days, 17:41:15', 'additions': 1059, 'deletions': 0, 'state': 'closed'}, {'id': 1416355316, 'number': 81, 'closed': datetime.datetime(2023, 8, 4, 14, 20, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 20, 21, 1, tzinfo=datetime.timezone.utc), 'time_taken': 2915975.0, 'time_delta': '33 days, 17:59:35', 'additions': 880, 'deletions': 0, 'state': 'closed'}, {'id': 1416353365, 'number': 79, 'closed': datetime.datetime(2023, 8, 4, 14, 18, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 20, 14, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2916250.0, 'time_delta': '33 days, 18:04:10', 'additions': 809, 'deletions': 0, 'state': 'closed'}, {'id': 1416340887, 'number': 77, 'closed': datetime.datetime(2023, 8, 4, 14, 12, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 19, 59, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2916808.0, 'time_delta': '33 days, 18:13:28', 'additions': 703, 'deletions': 0, 'state': 'closed'}, {'id': 1416279680, 'number': 75, 'closed': datetime.datetime(2023, 8, 4, 13, 49, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 17, 51, 5, tzinfo=datetime.timezone.utc), 'time_taken': 2923091.0, 'time_delta': '33 days, 19:58:11', 'additions': 444, 'deletions': 46, 'state': 'closed'}, {'id': 1416245594, 'number': 73, 'closed': datetime.datetime(2023, 7, 10, 19, 17, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 16, 49, 19, tzinfo=datetime.timezone.utc), 'time_taken': 786491.0, 'time_delta': '9 days, 2:28:11', 'additions': 249, 'deletions': 257, 'state': 'closed'}, {'id': 1385951210, 'number': 70, 'closed': datetime.datetime(2023, 6, 9, 13, 15, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 10, 31, 6, tzinfo=datetime.timezone.utc), 'time_taken': 9867.0, 'time_delta': '2:44:27', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1353584986, 'number': 67, 'closed': datetime.datetime(2023, 6, 7, 16, 31, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 17, 6, 57, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1848884.0, 'time_delta': '21 days, 9:34:44', 'additions': 2293, 'deletions': 1139, 'state': 'closed'}, {'id': 1349372674, 'number': 65, 'closed': datetime.datetime(2023, 5, 16, 18, 42, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 13, 2, 42, 30, tzinfo=datetime.timezone.utc), 'time_taken': 316795.0, 'time_delta': '3 days, 15:59:55', 'additions': 41, 'deletions': 0, 'state': 'closed'}, {'id': 1327376904, 'number': 62, 'closed': datetime.datetime(2023, 5, 3, 14, 28, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 25, 15, 53, 33, tzinfo=datetime.timezone.utc), 'time_taken': 686084.0, 'time_delta': '7 days, 22:34:44', 'additions': 570, 'deletions': 1098, 'state': 'closed'}, {'id': 1324105929, 'number': 61, 'closed': datetime.datetime(2023, 4, 25, 7, 35, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 22, 20, 18, 1, tzinfo=datetime.timezone.utc), 'time_taken': 213471.0, 'time_delta': '2 days, 11:17:51', 'additions': 213, 'deletions': 60, 'state': 'closed'}, {'id': 1304754579, 'number': 60, 'closed': datetime.datetime(2023, 4, 11, 20, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 13, 24, 30, tzinfo=datetime.timezone.utc), 'time_taken': 455970.0, 'time_delta': '5 days, 6:39:30', 'additions': 28, 'deletions': 30, 'state': 'closed'}, {'id': 1295076355, 'number': 59, 'closed': datetime.datetime(2023, 3, 30, 12, 18, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 29, 18, 15, 15, tzinfo=datetime.timezone.utc), 'time_taken': 64966.0, 'time_delta': '18:02:46', 'additions': 20, 'deletions': 10, 'state': 'closed'}, {'id': 1291925348, 'number': 57, 'closed': datetime.datetime(2023, 3, 28, 17, 19, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 27, 20, 1, 37, tzinfo=datetime.timezone.utc), 'time_taken': 76684.0, 'time_delta': '21:18:04', 'additions': 631, 'deletions': 634, 'state': 'closed'}]"
