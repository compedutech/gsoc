pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1512232160,Add DEVELOPING.md and Vagrantfile to improve developing documentation and flow.,"This infrastructure PR contains:

- 1. A new documentation file: `DEVELOPING.md`, which serves to document helpful knowledge, commands and setup instructions for better developing flow. (During my GSoC project I've started documenting helpful guidance I've received from @drrtuy and things that I found out, which helped in my understanding and development and wanted to share.)

- 2. A Vagrantfile which serves to set up a local VM to develop in for developers on non-Linux machines. Currently, the Vagrantfile is configured for ARM-based Macs, but could probably be easily adapted for other systems. More documentation can be found in the `Development Setup with Local Linux VM for ARM-based Mac` part of the `DEVELOPING.md`.",True,2955,https://api.github.com/repos/mariadb-corporation/mariadb-columnstore-engine/pulls/2955,https://github.com/mariadb-corporation/mariadb-columnstore-engine/pull/2955,closed,161,0,2,6,0,0,0,1,[],2023-09-12 14:21:24+00:00,2023-09-20 09:09:45+00:00,672501.0,"7 days, 18:48:21",[],"[{'commit_sha': '4857096e881ce621c176134d954ac1b6e24833ea', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36196581efd191ba70284cc1aa022e5f06bac056', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271afa5f4de95ceb770fe9068faa48d799a1a321', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db29e67723c7c7ee366be3e572636b2d7c289362', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0613dad8aceecb0c3fb18e29224e3fbe7968759f', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee89243975f9d4c52b7f9df591d89e7443bc1a1f', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}]",Theresa Hradilak,34538290,,User,,15,,19,18
1512232160,Add DEVELOPING.md and Vagrantfile to improve developing documentation and flow.,"This infrastructure PR contains:

- 1. A new documentation file: `DEVELOPING.md`, which serves to document helpful knowledge, commands and setup instructions for better developing flow. (During my GSoC project I've started documenting helpful guidance I've received from @drrtuy and things that I found out, which helped in my understanding and development and wanted to share.)

- 2. A Vagrantfile which serves to set up a local VM to develop in for developers on non-Linux machines. Currently, the Vagrantfile is configured for ARM-based Macs, but could probably be easily adapted for other systems. More documentation can be found in the `Development Setup with Local Linux VM for ARM-based Mac` part of the `DEVELOPING.md`.",True,2955,https://api.github.com/repos/mariadb-corporation/mariadb-columnstore-engine/pulls/2955,https://github.com/mariadb-corporation/mariadb-columnstore-engine/pull/2955,closed,161,0,2,6,0,0,0,1,[],2023-09-12 14:21:24+00:00,2023-09-20 09:09:45+00:00,672501.0,"7 days, 18:48:21",[],"[{'commit_sha': '4857096e881ce621c176134d954ac1b6e24833ea', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36196581efd191ba70284cc1aa022e5f06bac056', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271afa5f4de95ceb770fe9068faa48d799a1a321', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db29e67723c7c7ee366be3e572636b2d7c289362', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0613dad8aceecb0c3fb18e29224e3fbe7968759f', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee89243975f9d4c52b7f9df591d89e7443bc1a1f', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}]",Theresa Hradilak,34538290,,User,,15,,19,18
1403521357,Fix MCOL 4632 and 4648 and further issues when casting to [U]BIGINT.,"This PR fixes [MCOL-4632](https://jira.mariadb.org/browse/MCOL-4632) and [MCOL-4648](https://jira.mariadb.org/browse/MCOL-4648) and some other casting issues that I found while investigating both issues.

## Why?
We use `uintX_t` constants to mark NULL values in result rows. E.g. in `storage/columnstore/columnstore/utils/funcexp/funcexp.cpp`  l.394:

```sql
case CalpontSystemCatalog::UBIGINT:
      {
        uint64_t val = expression[i]->getUintVal(row, isNull);

         if (isNull)
          row.setUintField<8>(UBIGINTNULL, expression[i]->outputIndex());
        else
          row.setUintField<8>(val, expression[i]->outputIndex());

        break;
      }
```

If `isNull` gets set by `getUintVal()` we write `UBIGINTNULL` into the result row. If however `val` equals `UBIGINTNULL` (or 2^64 - 2) the output row also gets written with `UBIGINTNULL` and later on wrongly displayed as `NULL` and not with the expected numeric value of 2^64 - 2.

At the core of the issue is that we cannot store the whole range of `[U]BIGINT`s, because we have blocked some values by constant markers. It is not possible to insert values which are assigned constant markers into a `BIGINT` column (this is covered by a `Out of range value for column` error), but it is possible that `CAST` operation results take on the blocked values and are then wrongly/unexpectedly displayed as NULL.

![image](https://github.com/mariadb-corporation/mariadb-columnstore-engine/assets/34538290/e48736f6-d41f-4f2d-8aa9-d0ba1f9749b7)

Besides the issues from casting DECIMAL->BIGINT and DECIMAL->UBIGINT, I've also been able to find the same issue for - - UBIGINT->BIGINT
- TEXT/VARCHAR/etc. -> BIGINT/UBIGINT
- DOUBLE-> BIGINT/UBIGINT. 

(All cases are documented in the `mcol_4632` and `mcol_4648` files in `mysql-test/columnstore/bugfixes`.)

## How?

Main changes are in `func_cast.cpp` where for `Func_cast_signed::getIntVal()` and `Func_cast_unsigned::getUintVal()` I checked and updated every switch case to include a check for unallowed return values which are now encoded as `joblist::MIN_MCS_BIGINT` and `joblist::MAX_MCS_UBIGINT`. 

Update: The previously described approach would have been the preferred way to ensure consistency. (Float values were already handled that way, meaning that one in the current version cannot cast to neither `[U]BIGINTEMPTYROW` nor `[U]BIGINTNULL`. However, as the `EMPTYROW` constant gets displayed as the correct INT value, there are some regression tests expecting to be able to cast to the `EMPTYROW` constant. (And some tests actually expecting a cast to NULL, but we are going to fix these at least.)

Therefore the new approach will be to **allow** casting to `EMPTYROW` constants from all datatypes (including floats) and **disallow** casting to `NULL` constants. All of this again handled in `Func_cast_signed::getIntVal()` and `Func_cast_unsigned::getUintVal()` and the respective casting methods per type.

## Testing?

All cases are tested with regression tests in`mcol_4632` and `mcol_4648` files in `mysql-test/columnstore/bugfixes`.
",True,2874,https://api.github.com/repos/mariadb-corporation/mariadb-columnstore-engine/pulls/2874,https://github.com/mariadb-corporation/mariadb-columnstore-engine/pull/2874,closed,280,94,12,1,0,0,0,0,[],2023-06-22 13:25:06+00:00,2023-08-11 20:23:30+00:00,4345104.0,"50 days, 6:58:24",[],"[{'commit_sha': '48562e41f94f64f90dd2ece06f630ead37016cf7', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}]",Theresa Hradilak,34538290,,User,,15,,19,18
1403521357,Fix MCOL 4632 and 4648 and further issues when casting to [U]BIGINT.,"This PR fixes [MCOL-4632](https://jira.mariadb.org/browse/MCOL-4632) and [MCOL-4648](https://jira.mariadb.org/browse/MCOL-4648) and some other casting issues that I found while investigating both issues.

## Why?
We use `uintX_t` constants to mark NULL values in result rows. E.g. in `storage/columnstore/columnstore/utils/funcexp/funcexp.cpp`  l.394:

```sql
case CalpontSystemCatalog::UBIGINT:
      {
        uint64_t val = expression[i]->getUintVal(row, isNull);

         if (isNull)
          row.setUintField<8>(UBIGINTNULL, expression[i]->outputIndex());
        else
          row.setUintField<8>(val, expression[i]->outputIndex());

        break;
      }
```

If `isNull` gets set by `getUintVal()` we write `UBIGINTNULL` into the result row. If however `val` equals `UBIGINTNULL` (or 2^64 - 2) the output row also gets written with `UBIGINTNULL` and later on wrongly displayed as `NULL` and not with the expected numeric value of 2^64 - 2.

At the core of the issue is that we cannot store the whole range of `[U]BIGINT`s, because we have blocked some values by constant markers. It is not possible to insert values which are assigned constant markers into a `BIGINT` column (this is covered by a `Out of range value for column` error), but it is possible that `CAST` operation results take on the blocked values and are then wrongly/unexpectedly displayed as NULL.

![image](https://github.com/mariadb-corporation/mariadb-columnstore-engine/assets/34538290/e48736f6-d41f-4f2d-8aa9-d0ba1f9749b7)

Besides the issues from casting DECIMAL->BIGINT and DECIMAL->UBIGINT, I've also been able to find the same issue for - - UBIGINT->BIGINT
- TEXT/VARCHAR/etc. -> BIGINT/UBIGINT
- DOUBLE-> BIGINT/UBIGINT. 

(All cases are documented in the `mcol_4632` and `mcol_4648` files in `mysql-test/columnstore/bugfixes`.)

## How?

Main changes are in `func_cast.cpp` where for `Func_cast_signed::getIntVal()` and `Func_cast_unsigned::getUintVal()` I checked and updated every switch case to include a check for unallowed return values which are now encoded as `joblist::MIN_MCS_BIGINT` and `joblist::MAX_MCS_UBIGINT`. 

Update: The previously described approach would have been the preferred way to ensure consistency. (Float values were already handled that way, meaning that one in the current version cannot cast to neither `[U]BIGINTEMPTYROW` nor `[U]BIGINTNULL`. However, as the `EMPTYROW` constant gets displayed as the correct INT value, there are some regression tests expecting to be able to cast to the `EMPTYROW` constant. (And some tests actually expecting a cast to NULL, but we are going to fix these at least.)

Therefore the new approach will be to **allow** casting to `EMPTYROW` constants from all datatypes (including floats) and **disallow** casting to `NULL` constants. All of this again handled in `Func_cast_signed::getIntVal()` and `Func_cast_unsigned::getUintVal()` and the respective casting methods per type.

## Testing?

All cases are tested with regression tests in`mcol_4632` and `mcol_4648` files in `mysql-test/columnstore/bugfixes`.
",True,2874,https://api.github.com/repos/mariadb-corporation/mariadb-columnstore-engine/pulls/2874,https://github.com/mariadb-corporation/mariadb-columnstore-engine/pull/2874,closed,280,94,12,1,0,0,0,0,[],2023-06-22 13:25:06+00:00,2023-08-11 20:23:30+00:00,4345104.0,"50 days, 6:58:24",[],"[{'commit_sha': '48562e41f94f64f90dd2ece06f630ead37016cf7', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}]",Theresa Hradilak,34538290,,User,,15,,19,18
1403531675,Update BUILD.md.,During setup of my GSoC project I update the `BUILD.md` a bit for understandability and would like to merge the changes to improve the experience of future contributors.,True,2875,https://api.github.com/repos/mariadb-corporation/mariadb-columnstore-engine/pulls/2875,https://github.com/mariadb-corporation/mariadb-columnstore-engine/pull/2875,closed,43,34,2,3,0,0,0,0,[],2023-06-22 13:31:35+00:00,2023-06-23 18:06:51+00:00,102916.0,"1 day, 4:35:16",[],"[{'commit_sha': '44633f40ec73b9eb3150063cf88b19414a00b7c7', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ede14c9c063406d2b9045bff5d5df2fb3dc6511', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dba0ba53af9a4165e398f5c8094ace1e4f71004', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}]",Theresa Hradilak,34538290,,User,,15,,19,18
1512232160,Add DEVELOPING.md and Vagrantfile to improve developing documentation and flow.,"This infrastructure PR contains:

- 1. A new documentation file: `DEVELOPING.md`, which serves to document helpful knowledge, commands and setup instructions for better developing flow. (During my GSoC project I've started documenting helpful guidance I've received from @drrtuy and things that I found out, which helped in my understanding and development and wanted to share.)

- 2. A Vagrantfile which serves to set up a local VM to develop in for developers on non-Linux machines. Currently, the Vagrantfile is configured for ARM-based Macs, but could probably be easily adapted for other systems. More documentation can be found in the `Development Setup with Local Linux VM for ARM-based Mac` part of the `DEVELOPING.md`.",True,2955,https://api.github.com/repos/mariadb-corporation/mariadb-columnstore-engine/pulls/2955,https://github.com/mariadb-corporation/mariadb-columnstore-engine/pull/2955,closed,161,0,2,6,0,0,0,1,[],2023-09-12 14:21:24+00:00,2023-09-20 09:09:45+00:00,672501.0,"7 days, 18:48:21",[],"[{'commit_sha': '4857096e881ce621c176134d954ac1b6e24833ea', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36196581efd191ba70284cc1aa022e5f06bac056', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '271afa5f4de95ceb770fe9068faa48d799a1a321', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db29e67723c7c7ee366be3e572636b2d7c289362', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0613dad8aceecb0c3fb18e29224e3fbe7968759f', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee89243975f9d4c52b7f9df591d89e7443bc1a1f', 'committer_username': 'phoeinx', 'committer_name': 'Theresa Hradilak', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 14, 9, 35, 27, tzinfo=datetime.timezone.utc)}]",Theresa Hradilak,34538290,,User,,15,,19,18

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
59521862,mariadb-columnstore-engine,mariadb-corporation/mariadb-columnstore-engine,C++,64,106,37,97,6269,35,274,35,"[{'id': 1543231114, 'number': 2985, 'closed': datetime.datetime(2024, 7, 2, 17, 25, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 5, 9, 15, 46, tzinfo=datetime.timezone.utc), 'time_taken': 23443799.0, 'time_delta': '271 days, 8:09:59', 'additions': 348, 'deletions': 71, 'state': 'closed'}, {'id': 1535926393, 'number': 2978, 'closed': datetime.datetime(2023, 9, 29, 15, 38, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 29, 15, 21, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1033.0, 'time_delta': '0:17:13', 'additions': 11, 'deletions': 4, 'state': 'closed'}, {'id': 1515085140, 'number': 2957, 'closed': datetime.datetime(2024, 7, 31, 12, 49, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 14, 7, 8, 16, tzinfo=datetime.timezone.utc), 'time_taken': 27754850.0, 'time_delta': '321 days, 5:40:50', 'additions': 400, 'deletions': 79, 'state': 'closed'}, {'id': 1512232160, 'number': 2955, 'closed': datetime.datetime(2023, 9, 20, 9, 9, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 12, 14, 21, 24, tzinfo=datetime.timezone.utc), 'time_taken': 672501.0, 'time_delta': '7 days, 18:48:21', 'additions': 161, 'deletions': 0, 'state': 'closed'}, {'id': 1471764628, 'number': 2925, 'closed': datetime.datetime(2023, 8, 11, 12, 56, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 11, 12, 53, 9, tzinfo=datetime.timezone.utc), 'time_taken': 182.0, 'time_delta': '0:03:02', 'additions': 721, 'deletions': 209, 'state': 'closed'}, {'id': 1403531675, 'number': 2875, 'closed': datetime.datetime(2023, 6, 23, 18, 6, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 13, 31, 35, tzinfo=datetime.timezone.utc), 'time_taken': 102916.0, 'time_delta': '1 day, 4:35:16', 'additions': 43, 'deletions': 34, 'state': 'closed'}, {'id': 1403521357, 'number': 2874, 'closed': datetime.datetime(2023, 8, 11, 20, 23, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 13, 25, 6, tzinfo=datetime.timezone.utc), 'time_taken': 4345104.0, 'time_delta': '50 days, 6:58:24', 'additions': 280, 'deletions': 94, 'state': 'closed'}]"
