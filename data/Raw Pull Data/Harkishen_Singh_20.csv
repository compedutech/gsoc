pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
466212507,Adds support for prettifying expressions and preserving comments in PromQL,"<!--
    Don't forget!
    
    - If the PR adds or changes a behaviour or fixes a bug of an exported API it would need a unit/e2e test.
    
    - Where possible use only exported APIs for tests to simplify the review and make it as close as possible to an actual library usage.
    
    - No tests are needed for internal implementation changes.
    
    - Performance improvements would need a benchmark test to prove it.
    
    - All exposed objects should have a comment.
    
    - All comments should start with a capital letter and end with a full stop.
 -->

This pull-request aims at adding support for prettifying PromQL expressions, along with preserving user comments in the PromQL expressions. This is done as my **GSoC 2020** project.

The code is implemented in line with the **design doc** and the **implementation doc** shared in the Prometheus-dev mailing list, the links of which are given below:

**Design doc:** [Link](https://docs.google.com/document/d/1nOBjpuCk4CsrOSm2ZjfVz2EL6gmA_CFGSbHCdY0Royg/edit)

**Implementation doc:** [Link](https://docs.google.com/document/d/1ym4CXceIWyCx5sric9Y-WjiLnJXe3W-tidEEOWpoXhk/edit)

Fixes #21

Implementations:

- [x] Prettifying PromQL expressions
- [x] Preserving comments in PromQL expressions
- [x] Modifying `.String()` in `printer.go` so as to return formatted expressions using prettier
- [x] Integrate Prettier with Promtool to prettify expressions in the rules file

Note:
1. Please refer to `promql/prettier/prettier_test.go` file for better understanding.
2. Using via Promtool: `./promtool prettify rules <path_of_rules_file>`",False,7779,https://api.github.com/repos/prometheus/prometheus/pulls/7779,https://github.com/prometheus/prometheus/pull/7779,closed,2255,267,18,82,21,132,1,0,[{'name': 'stale'}],2020-08-11 16:19:58+00:00,2023-04-26 16:08:15+00:00,85362497.0,"987 days, 23:48:17","[{'comment_id': 468727892, 'comment_body': 'Nothing under promql should know about yaml or rules files.', 'comment_created': datetime.datetime(2020, 8, 11, 16, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 468728135, 'comment_body': 'Promql should not know about files, only expressions.', 'comment_created': datetime.datetime(2020, 8, 11, 16, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 468776675, 'comment_body': 'This is intended to be served via Promtool. Hence, the promtool is the calling function mostly, however we can have an API endpoint as well. This is, in fact, the reason why it is kept as a separate module.', 'comment_created': datetime.datetime(2020, 8, 11, 18, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 468783210, 'comment_body': 'Then promtool is what should be handling any file handling, not PromQL.', 'comment_created': datetime.datetime(2020, 8, 11, 18, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469211756, 'comment_body': ""Made prettier independent of files. Now, it's handled by promtool."", 'comment_created': datetime.datetime(2020, 8, 12, 12, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 469874582, 'comment_body': ""Shouldn't this return a failure?"", 'comment_created': datetime.datetime(2020, 8, 13, 11, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469874795, 'comment_body': '2015?', 'comment_created': datetime.datetime(2020, 8, 13, 11, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469875363, 'comment_body': ""`is` is a bit short of a function name, it looks like it's a Go thingy."", 'comment_created': datetime.datetime(2020, 8, 13, 11, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469875787, 'comment_body': 'This needs updating.', 'comment_created': datetime.datetime(2020, 8, 13, 11, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469876756, 'comment_body': ""If we're hardcoding then these may be better as file-level consts. That'l help avoid deviation by different users over time.\r\n\r\nPresume that everything here is going to end up public, as that is the policy."", 'comment_created': datetime.datetime(2020, 8, 13, 11, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469877553, 'comment_body': ""This doesn't parse"", 'comment_created': datetime.datetime(2020, 8, 13, 11, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469880686, 'comment_body': ""localhost is not a good label name to use in examples, as it's a label value."", 'comment_created': datetime.datetime(2020, 8, 13, 11, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469883300, 'comment_body': ""This is more vertical than it needs to be, wrap so there's more than one matcher per line."", 'comment_created': datetime.datetime(2020, 8, 13, 11, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469883890, 'comment_body': ""There shouldn't be an indent here."", 'comment_created': datetime.datetime(2020, 8, 13, 11, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469884354, 'comment_body': ""This shouldn't be indented either."", 'comment_created': datetime.datetime(2020, 8, 13, 11, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469885800, 'comment_body': ""It'd be too to see how this looks with the full prettier."", 'comment_created': datetime.datetime(2020, 8, 13, 11, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 469968456, 'comment_body': 'Currently, the reason why we are not stopping at that point is, we want to write those files that are perfect to do so and print errors for the ones that cause any error.\r\n\r\nShould we stop the moment we encounter error while writing any file, without caring about the remaining ones? ', 'comment_created': datetime.datetime(2020, 8, 13, 13, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 469968692, 'comment_body': 'I will update it to 2020.', 'comment_created': datetime.datetime(2020, 8, 13, 13, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 469980909, 'comment_body': ""I didn't get the point. Could you please explain?"", 'comment_created': datetime.datetime(2020, 8, 13, 14, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 469981437, 'comment_body': 'Sure. Replacing with `instance`.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 469985333, 'comment_body': 'This is the prettified output. I will add the same as a unit-test.\r\n\r\n`quantile by(instance) (0.9, sum without(job) (min by(job) (go_alloc_bytes)))`', 'comment_created': datetime.datetime(2020, 8, 13, 14, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 469986781, 'comment_body': 'updated to `compareNodeType`. How does that sound?', 'comment_created': datetime.datetime(2020, 8, 13, 14, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 470005907, 'comment_body': 'For I/O errors we should probably stop.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 470006203, 'comment_body': ""Compare implies you're comparing two nodes. isNodeType should do it."", 'comment_created': datetime.datetime(2020, 8, 13, 14, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 470006812, 'comment_body': ""That's very dense semantically, you could easily miss the nonsense aggregation here. I think there shouldn't be more than one aggregation per line."", 'comment_created': datetime.datetime(2020, 8, 13, 14, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 470007061, 'comment_body': 'This sentence makes no sense grammatically.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 470007621, 'comment_body': 'Also this way of writing files is not atomic, so a failure could lead to data loss.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 470010834, 'comment_body': 'Oh yes.', 'comment_created': datetime.datetime(2020, 8, 13, 14, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 470197724, 'comment_body': 'Do you mean, for those vector_selectors that violate column limit, keep their label_matchers on a different line only? \r\nExample: for the current scenario,\r\n\r\n```\r\ninstance_cpu_time_ns{\r\n  app=""lion"", proc=""web"", rev=""34d0f99"", env=""prod"", job=""cluster-manager"", host=""localhost"",\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 19, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 470283737, 'comment_body': 'yeah, avoid having one matcher per line anyway', 'comment_created': datetime.datetime(2020, 8, 13, 22, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 471024357, 'comment_body': 'Addressed. Now, if any aggregate expression has an aggregate expression as an immediate parent, it will be printed on a separate line.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 471024434, 'comment_body': 'Addressed in recent commits.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 471024546, 'comment_body': 'Addressed. Now, all label marchers will be in a single newline (like the mentioned example in the above comment), rather than putting them on new lines each time.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 471024586, 'comment_body': 'Updated the explanation. Please comment on its satisfactoriness.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 471024603, 'comment_body': 'Addressed this as well. Please comment on its satisfactoriness.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 471024647, 'comment_body': 'Addressed this to `isNodeType`. Hence, resolving.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 471024684, 'comment_body': 'Addressed this. Now, this will stop and `return 1` in case of an error.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 471024828, 'comment_body': 'This is kept since while printing in block scalar format, we are adding 2 spaces to give a better look.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 471024933, 'comment_body': 'Also, this has a depth of 1, so `2 spaces` in the AST, keeping things simple.', 'comment_created': datetime.datetime(2020, 8, 15, 19, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 471352667, 'comment_body': 'The writing of the files is still not atomic.', 'comment_created': datetime.datetime(2020, 8, 17, 9, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 471353786, 'comment_body': ""I'm not following at all, there's no need for indenting here. If a caller wants to indent more, that's up to them."", 'comment_created': datetime.datetime(2020, 8, 17, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 471355807, 'comment_body': ""How many spaces to indent should not be configurable, and I'm not sure about the column limit either. Consistency is important for this sort of thing."", 'comment_created': datetime.datetime(2020, 8, 17, 9, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 471356578, 'comment_body': ""Still doesn't parse - that comma shouldn't be there."", 'comment_created': datetime.datetime(2020, 8, 17, 9, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 471361262, 'comment_body': ""We should either not put a limit or column or fix it at 80 as it's pretty standard.\r\n\r\nI agree that this should not be configurable."", 'comment_created': datetime.datetime(2020, 8, 17, 9, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'roidelapluie', 'type': 'User'}, {'comment_id': 471362512, 'comment_body': ""80 is pretty narrow these days. I'd suggest hardcoding to something in the 100-120 range."", 'comment_created': datetime.datetime(2020, 8, 17, 9, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 471384149, 'comment_body': 'Note, that embedding a PromQL query in YAML will add about 10 char widths of indentation.', 'comment_created': datetime.datetime(2020, 8, 17, 10, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'slrtbtfs', 'type': 'User'}, {'comment_id': 475119553, 'comment_body': 'Going with 100 as a constant column limit. I hope that is acceptable to everyone.', 'comment_created': datetime.datetime(2020, 8, 22, 18, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 475123064, 'comment_body': '`return 1` is written right below this line. I think that should be atomic in nature. Please correct me if I am wrong.', 'comment_created': datetime.datetime(2020, 8, 22, 19, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 475123726, 'comment_body': 'I think this is addressed.', 'comment_created': datetime.datetime(2020, 8, 22, 19, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 475223678, 'comment_body': ""> Please correct me if I am wrong.\r\n\r\nAs Brian said, it's still not atomic."", 'comment_created': datetime.datetime(2020, 8, 23, 14, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'slrtbtfs', 'type': 'User'}, {'comment_id': 475476552, 'comment_body': 'Yeah, consider what happens if you run out of disk space half way through writing the file.', 'comment_created': datetime.datetime(2020, 8, 24, 9, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'brian-brazil', 'type': 'User'}, {'comment_id': 477441577, 'comment_body': 'Please resolve if it is satisfactory.', 'comment_created': datetime.datetime(2020, 8, 26, 16, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 477442419, 'comment_body': 'Writing rules file now done using temp file and then renaming it. I have, that addresses our atomic issue.', 'comment_created': datetime.datetime(2020, 8, 26, 16, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 478220324, 'comment_body': 'This should be inside `if parseResult != nil` to avoid panics', 'comment_created': datetime.datetime(2020, 8, 27, 7, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 478221359, 'comment_body': 'You can club all cases in a single line :)', 'comment_created': datetime.datetime(2020, 8, 27, 7, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 478223726, 'comment_body': 'I think you should be able to call `e.SetExprString(input)` directly (and any other places where you are explicitly using `ExprExtensions`)', 'comment_created': datetime.datetime(2020, 8, 27, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 478223902, 'comment_body': 'Wrong location', 'comment_created': datetime.datetime(2020, 8, 27, 7, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 478224973, 'comment_body': ""I don't think we would want to log in the printer, let's remove this"", 'comment_created': datetime.datetime(2020, 8, 27, 7, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 478225812, 'comment_body': 'This code is repeated everywhere. We could have a single function which takes `node.ExprString()` as input and use it.', 'comment_created': datetime.datetime(2020, 8, 27, 7, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 478229852, 'comment_body': 'There is only 1 functionality of `Prettier`, so lets have a single step to get the pretty string.\r\nHave `func Prettify(expression string) (string, error)` and remove `func PromqlPrettier`,', 'comment_created': datetime.datetime(2020, 8, 27, 7, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 478233736, 'comment_body': 'Can you describe what do you mean by sorting here? If it is the re-arrangement of lex items, then we might as well call it `rearrangeItems` (with comments ofcourse).', 'comment_created': datetime.datetime(2020, 8, 27, 8, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 478333398, 'comment_body': 'I had done that at first, but it leads to OOM (as said in chat). Sounds strange but that\'s the reason why its kept outside. But, when I comment out the last two tests (mentioned below) in parse_test.go, it works fine.\r\n\r\n```\r\n{\r\n\t\tinput:  ""test[5d] OFFSET 10s [10m:5s]"",\r\n\t\tfail:   true,\r\n\t\terrMsg: `1:1: parse error: subquery is only allowed on instant vector, got matrix in ""test[5d] OFFSET 10s [10m:5s]""`,\r\n\t},\r\n\t{\r\n\t\tinput:  `(foo + bar{nm=""val""})[5m:][10m:5s]`,\r\n\t\tfail:   true,\r\n\t\terrMsg: `1:1: parse error: subquery is only allowed on instant vector, got matrix in ""(foo + bar{nm=""val""})[5m:][10m:5s]"" instead`,\r\n\t},\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 11, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 478334563, 'comment_body': 'I have tried that way at first. But it turns out to be an error, and hence had to reference them in individual cases.\r\n\r\nThe exact error after putting them on the same case:\r\n\r\n```\r\n./parse.go:184:4: e.ExprExtensions undefined (type Expr has no field or method ExprExtensions)\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 11, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 478340732, 'comment_body': ""Shouldn't we inform the user in case of some error during the prettifying process?"", 'comment_created': datetime.datetime(2020, 8, 27, 11, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 478342312, 'comment_body': 'I had thought of it but keeping this in a single function will lead to the function having a switch-case block like in `setExprStr()`, where each expression will have to be in a different case block. I hope that will be satisfactory.', 'comment_created': datetime.datetime(2020, 8, 27, 11, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 479258762, 'comment_body': 'Oh I did not notice the `nil` check inside `setExprStr`. It should be fine and no panics.\r\n\r\n> Sounds strange\r\n\r\nMaybe something related to `checkAST` which needs to be done before setting? If that is the case, can you add a comment here mentioning that?', 'comment_created': datetime.datetime(2020, 8, 28, 12, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479262961, 'comment_body': 'I meant\r\n```\r\nswitch ... {\r\ncase *AggregateExpr, *BinaryExpr, *Call,\r\n         *SubqueryExpr ... :\r\n    e.SetExprString(input)\r\n}\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 28, 12, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479264765, 'comment_body': ""When called `String()`, I would expect any form of string representation and won't care if it's prettified, as long as the output is deterministic. Also, why would prettifying a valid expression error out?"", 'comment_created': datetime.datetime(2020, 8, 28, 13, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479271538, 'comment_body': '> We could have a single function which takes `node.ExprString()` as input\r\n\r\n^ this\r\n\r\nI mean have a common method like this:\r\n\r\n```\r\nfunc methodName(expr string) string {\r\n\tprettyExpr, err := PromqlPrettier(expr).Prettify()\r\n\tif err != nil {\r\n\t\treturn expr\r\n\t}\r\n\treturn prettyExpr\r\n}\r\n```\r\n\r\nAnd call `return methodName(node.ExprString())` everywhere.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479293537, 'comment_body': 'Can we just iterate over the `n.items` slice?', 'comment_created': datetime.datetime(2020, 8, 28, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479296938, 'comment_body': 'What use case does this separate iterator help in which cannot be done by a normal iteration over the slice?', 'comment_created': datetime.datetime(2020, 8, 28, 13, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479298408, 'comment_body': 'Peek usually means looking at the next item before we iterate forward as far as I understand. This should be `at()`, for the current item. (look at my other comment about `itemsIterator`, this is a general comment)', 'comment_created': datetime.datetime(2020, 8, 28, 13, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479302588, 'comment_body': 'This is not safe from calling `next()` after it has returned `false` once and not safe with integer overflow. You should have a `if it.index >= len(it.itemsSlice)` check at the beginning of the method.\r\n(look at my other comment about `itemsIterator`, this is a general comment)', 'comment_created': datetime.datetime(2020, 8, 28, 13, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479310708, 'comment_body': 'Maybe we could make those const variables a typed variable so that the term `entity` is not confusing.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479319578, 'comment_body': 'This line is redundant in all the `case`. The `return false` at the end is enough.', 'comment_created': datetime.datetime(2020, 8, 28, 14, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479321717, 'comment_body': 'There should not be any error since the only errors possible is from the parser and the AST which are already checked well before entering the `.String()`. So, yes there will not be any errors as returns from any underlying function.', 'comment_created': datetime.datetime(2020, 8, 28, 14, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 479328556, 'comment_body': 'Spurious change', 'comment_created': datetime.datetime(2020, 8, 28, 14, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479328694, 'comment_body': 'Spurious change', 'comment_created': datetime.datetime(2020, 8, 28, 14, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479333258, 'comment_body': '> can you add a comment here mentioning that?\r\n\r\nAs comment in the code?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 479336614, 'comment_body': '> I meant\r\n\r\nYeah, I had done what is suggested but the output is a compilation error (mentioned in the second comment). Extending the `Node` with `ExprExtensions() ExprExtension` might help this but that is not desirable I guess.\r\n\r\n![Screenshot from 2020-08-28 19-47-45](https://user-images.githubusercontent.com/33792202/91578258-8b86ec00-e967-11ea-8444-2be572e860b2.png)\r\n', 'comment_created': datetime.datetime(2020, 8, 28, 14, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 479340412, 'comment_body': 'Nothing special use case as such. Just makes it easier to understand since an Iterator. Should I remove `itemsIterator` and just keep the `for` loop?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 479341000, 'comment_body': 'Yes, we can. In our earlier discussions, we planned to use an iterator to iterate through the items, so this is implemented.', 'comment_created': datetime.datetime(2020, 8, 28, 14, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 479358388, 'comment_body': 'Yes, just a `for` loop. A simple loop is easier to understand than an iterator as iterators can have magic underneath ;)', 'comment_created': datetime.datetime(2020, 8, 28, 14, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 479647446, 'comment_body': 'Done. Please have a look and comment on its satisfactoriness.', 'comment_created': datetime.datetime(2020, 8, 29, 12, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 479647538, 'comment_body': 'As per discussions in chat, this is now resolved.', 'comment_created': datetime.datetime(2020, 8, 29, 13, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 479647580, 'comment_body': 'Addressed this. Hence, resolving.', 'comment_created': datetime.datetime(2020, 8, 29, 13, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 479675256, 'comment_body': 'Addressed. Hence, resolving.', 'comment_created': datetime.datetime(2020, 8, 29, 18, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 482851320, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2020, 9, 3, 9, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482854663, 'comment_body': 'We can assign `parts[3]` here like before and get rid of the `else` case below.', 'comment_created': datetime.datetime(2020, 9, 3, 9, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482873753, 'comment_body': 'Why this change? (same for other places)', 'comment_created': datetime.datetime(2020, 9, 3, 10, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482874377, 'comment_body': '```suggestion\r\nfunc TestPrettyExprEvaluations(t *testing.T) {\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 10, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482874593, 'comment_body': '```suggestion\r\nfunc newPrettyExprTestFromFile(t testutil.T, filename string) (*Test, error) {\r\n```', 'comment_created': datetime.datetime(2020, 9, 3, 10, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482886226, 'comment_body': '```go\r\nif !formatItems {\r\n\tcontinue\r\n}\r\n```\r\nAnd remove the indentation for the remaining code.', 'comment_created': datetime.datetime(2020, 9, 3, 10, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482901094, 'comment_body': ""Let's not panic anywhere here and rather return errors. The user of `Prettify` would not be expecting a panic :)"", 'comment_created': datetime.datetime(2020, 9, 3, 11, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482902006, 'comment_body': 'You should be able to do this in a single line.', 'comment_created': datetime.datetime(2020, 9, 3, 11, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482906429, 'comment_body': ""Let's do this TODO in this PR itself and get rid of the loop. The entire loop can be replaced with 4 lines.\r\n\r\n1. Insert everything before `aggregatorIndex`.\r\n2. Insert from `keywordIndex` to `closingParenIndex`\r\n3. Insert from `aggregatorIndex` to `keywordIndex`\r\n4. Insert everything beyond `closingParenIndex`\r\n\r\nWith comment on each line about what part is it handling. Else the loop currently is difficult to read."", 'comment_created': datetime.datetime(2020, 9, 3, 11, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482912992, 'comment_body': ""Let's use the slice tricks here too."", 'comment_created': datetime.datetime(2020, 9, 3, 11, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 482914551, 'comment_body': 'U remember the lex bug issue, the ""="" is being treated as EQL instead of ASSIGN. That\'s the cause.', 'comment_created': datetime.datetime(2020, 9, 3, 11, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 482971610, 'comment_body': 'But why would the test case change here?', 'comment_created': datetime.datetime(2020, 9, 3, 13, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 484217251, 'comment_body': ""`==` is considered as `EQL` item by the lexer. This is good. But, `=` is also considered as `EQL` when within braces. This is bad. When used in labels, it should result in no spaces in labels like `<label_name>=<label_value>`. Now here comes the issue. This will mean that where ever you encounter EQL, don't leave spaces before and after an EQL. \r\n\r\nNow in case of `up == 1`, up is IDENTIFIER. `==` is `EQL`, so it is printed as if it is the case of a label_matchers. And, `1` is numeric literal, so it has space before itself.\r\n\r\nI hope, this makes sense."", 'comment_created': datetime.datetime(2020, 9, 7, 6, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 484285373, 'comment_body': ""> don't leave spaces before and after an EQL.\r\n\r\nRight, the `after` is missing here. Can we tie the spacing logic to the `EQL`/`ASSIGN` items and not the RHS so that it is same on both sides always? `up== 1` is not pretty :)"", 'comment_created': datetime.datetime(2020, 9, 7, 8, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 484331936, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2020, 9, 7, 10, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 484332003, 'comment_body': 'Done, hence resolving.', 'comment_created': datetime.datetime(2020, 9, 7, 10, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 484371028, 'comment_body': 'If we think it in a way that whenever we encounter EQL, we can check if the value is `=` or `==` and based on the value, it will work perfectly. But then, the person (I can take it if we recognize that as a bug) who solves that issue should make changes here when that issue is fixed.', 'comment_created': datetime.datetime(2020, 9, 7, 11, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 484377678, 'comment_body': ""We can fix that spacing with the bug fix later. What I meant to say is we avoid `And, 1 is numeric literal, so it has space before itself`, which sounds like we look at the number and add a space. Rather, see that it's EQL/ASSIGN and either add spaces on both sides or dont add at all."", 'comment_created': datetime.datetime(2020, 9, 7, 11, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 487877933, 'comment_body': 'These are fixed now. Hence, resolving.', 'comment_created': datetime.datetime(2020, 9, 14, 12, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 489421968, 'comment_body': 'Wrong spot', 'comment_created': datetime.datetime(2020, 9, 16, 13, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 489425379, 'comment_body': ""1. `else` is not require, you can just have the `if`.\r\n2. Please add relevant `( )` brackets else its hard to read. Also, I think you want to check `j == itr+3` before `items[itr+3].Typ == COMMA` to avoid any panics (even if it won't cause panics, it is uncomfortable to read anyway :))."", 'comment_created': datetime.datetime(2020, 9, 16, 13, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 489427358, 'comment_body': 'We can use few slice tricks here too. Append everything before the `rightBraceIndex` to `tmp`, then loop from right to left brace index, then another slice trick to append everything after `leftBraceIndex`.', 'comment_created': datetime.datetime(2020, 9, 16, 13, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 489429698, 'comment_body': '```suggestion\r\n\t\t\t\titems = append(items[:groupingKeywordIndex], items[rightParenIndex+1:]...)\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 13, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 489432143, 'comment_body': 'Because we are appending more later, so it will cause re-allocation anyway. A little extra allocation here is fine. (And start with 0 len so that we can be consistent and use `append` everywhere)\r\n```suggestion\r\n\t\t\ttempItems := make([]Item, 0, len(items))\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 13, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 489434474, 'comment_body': '```suggestion\r\n\t\t\ttempItems = append(tempItems, items[aggregatorIndex+1:keywordIndex]...)\r\n\t\t\ttempItems = append(tempItems, items[closingParenIndex+1:]...)\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 13, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 489436589, 'comment_body': 'For consistency\r\n```suggestion\r\n\t\t\ttempItems = append(tempItems, items[:aggregatorIndex+1]...)\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 13, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 489439676, 'comment_body': 'Does it skip braces in case of `{__name__=""metric_name"",}`?', 'comment_created': datetime.datetime(2020, 9, 16, 13, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 491964974, 'comment_body': 'Yes, it does. I have added a unit test for the exact purpose.', 'comment_created': datetime.datetime(2020, 9, 21, 11, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 500913422, 'comment_body': 'As this is for reducing indentation, you can explicitly mention that here.', 'comment_created': datetime.datetime(2020, 10, 7, 10, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500914464, 'comment_body': '```suggestion\r\nfunc (node *Node) matchesType(typs ...exprs) bool {\r\n```', 'comment_created': datetime.datetime(2020, 10, 7, 10, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500919069, 'comment_body': 'https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels\r\nYou can add unit test for this (not for the function but the overall prettier thing)', 'comment_created': datetime.datetime(2020, 10, 7, 10, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500920318, 'comment_body': '```suggestion\r\nfunc isMetricNameValid(metricName string) bool {\r\n```', 'comment_created': datetime.datetime(2020, 10, 7, 10, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500920664, 'comment_body': ""You can add a comment here saying if metric name is not valid, it could be a regex, so we don't take it out."", 'comment_created': datetime.datetime(2020, 10, 7, 10, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500924411, 'comment_body': 'And you can remove the `if` condition above\r\n```suggestion\r\n\t\tcase COMMENT:\r\n\t\t\texpression += item.Val + ""\\n""\r\n\t\tdefault:\r\n\t\t\texpression += item.Val\r\n```', 'comment_created': datetime.datetime(2020, 10, 7, 11, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500926212, 'comment_body': '```suggestion\r\n// pad returns `iter` times the configured indent.\r\n```', 'comment_created': datetime.datetime(2020, 10, 7, 11, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500928811, 'comment_body': 'We could get rid of this method and use ""\\n"" inlined for easy reading of code. Additionally, `isNewLineApplied` could be a local variable to `prettify` method.', 'comment_created': datetime.datetime(2020, 10, 7, 11, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500929680, 'comment_body': '```suggestion\r\n\t\t\tnodeOfCurrentItem           = nodeInfo.node()\r\n```', 'comment_created': datetime.datetime(2020, 10, 7, 11, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500929923, 'comment_body': '```suggestion\r\n\t\t\tnodeOfCurrItem           = nodeInfo.node()\r\n```', 'comment_created': datetime.datetime(2020, 10, 7, 11, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500930707, 'comment_body': 'We can get rid of this variable and inline `nodeInfo.violatesColumnLimit()` wherever is it used (which is not much)', 'comment_created': datetime.datetime(2020, 10, 7, 11, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500932148, 'comment_body': ""Else it's confusing what variables this comment refers to\r\n```suggestion\r\n\t\t\thasImmediateScalar               bool // For binary expression.\r\n```"", 'comment_created': datetime.datetime(2020, 10, 7, 11, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500933842, 'comment_body': 'As discussed offline we could improve these namings and maybe also add comments the context of each variable.', 'comment_created': datetime.datetime(2020, 10, 7, 11, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 500935628, 'comment_body': 'You can add a `break` in the `if` and get rid of this `else`', 'comment_created': datetime.datetime(2020, 10, 7, 11, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'codesome', 'type': 'User'}, {'comment_id': 507823379, 'comment_body': '```\r\ndefault:\r\n\t\t\texpression += item.Val\r\n```\r\n\r\nhas to be \r\n\r\n```\r\ndefault:\r\n\t\t\texpression += item.Val + "" ""\r\n```\r\nfollowed by trim of space, else things like `a + bool b` will become `a+boolb` which is unparsable.', 'comment_created': datetime.datetime(2020, 10, 19, 14, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 507967773, 'comment_body': 'Not sure but I feel the naming seems self-explanatory. Please correct me if I am wrong.', 'comment_created': datetime.datetime(2020, 10, 19, 18, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}, {'comment_id': 508006564, 'comment_body': 'Seems like the mentioned regex (at the link provided) is not happy with promql_tests. This might be a regression on our promql_tests. The earlier one passed easily, but if I replace with the one given in the link, it gives me an unparsable error. Strange.', 'comment_created': datetime.datetime(2020, 10, 19, 19, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Harkishen-Singh', 'type': 'User'}]","[{'commit_sha': 'ec7752c37c0b4069f120452f4f9aaad08fefda94', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05a4f141d3f79768c25717971c39327fe6d87ce4', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f30e7b19b0a7e5f239bc398ee3047a4b411db1c2', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e97c1569abec4033c64e0fb20a1876ea350013', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e361328fc8aba20ee4338a6275ae561cb0f0eccf', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b91476a802bcdde76d79dfa99328ad563113683', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '313c3e585cf93c47ed47aa26a440813f80bb0e30', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99f2098fc0d300851bb74c42c58995a77a47c460', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05c8f2d4fe3c503f52c615cedb29fb01707503dc', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787f89a29ace06b21b9c838eccf826fffd27c1d6', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '382feb7d9f35273a58ba5a07724e7df5ad7cc1f9', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b4a2b2bfc562cfc309817dfa66ba38673a3c3b', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65c7f3adbfa738cfbdf0051f1af7249944816246', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f308008a5f554329dd8829ebd2a8bd98c24a865', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c2188f995d09f8412648017909e903b6e6a85e', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ed34c526ae7aeae5bbc95968ae5900add0e2d54', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64619bd3fc50043f89725b350648b9adc4f5615b', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b355789eaca993de6d4f31e6558520e7c6e3ebcf', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9387d553cd62d6f6f857e3a99566f6d033e20931', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80c6e5460ce5f4739a78be026cbbf62ce88f392d', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aa91d7fd8e0e7beb5db8d0421036eafebc53f27', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a76431ea2b87b3a072e8002ec0593db4a42bf8ed', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65c9e97a26f8cfb38df04f058b876cf612e34787', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cd688c7e2c6b845f04cc66bf76df2c8900f4be2', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f4ce4477a8ef203ea54767d9f0a007552683d0', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0633706538afdc8862814d5fd2167753fce5917', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f86f50803c2fb06a49862e9a5fdd4e00a2ba8d13', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a49748f0078b60d7f7321f7995bbaf30dff9c46', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae3cdaab77a2e33879544a07344bfed9d2f277d5', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a4dfa718d3be60525eef2996cefdae19ad0bff7', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25f1dd36f4c9bbbd1beb721965272cf15bc4e7d9', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48af2c76cd9a6c1a2dd4221b625e7fda8f3fc260', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc4dc8f7819e4b3926d1bc9ce086e034a82d2423', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00ffd3fb0e1ef1f6dcf9f7a0aaf370d51bbef30f', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c3680db17d370fe40d9a23b94bf50777f016c5b', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b29cce8da68585aa7ccbc2cba88bb516cbbb9b6c', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cc44e05eb8d3db6f0b163a3bff6358d149eed32', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b960b96a05b7f63f279358355c92f10ebb3688a7', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec4e38a2a821034c1f1838dbf6ae57fe76647480', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b6902030ef5626a3a3c6fb62cd7faced6d0815', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '972e0c877a640df9114b2507242f13c54829a5a1', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f29fd75dd5c82e5afda53ecb370ee288b5ba67', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81dbee7fe342c68fee949fabdacb59ea5944a078', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31a09346327c584752f77978fc943194e50ff41e', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11550649af006ed4f5a2a0223c8c4ed13f8f4fe1', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd10dc20d367a4cd6e50e99f054e6ce7d80984a56', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09a448b26f78d6adb5cc6b73659797157ef399a0', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52962f74f1e2f530bc2776d425033b267be524a', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa677cee81eb05f85de9570a339d088330c0f882', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '121f231154058d6f6c8200b5ef1163b0a309f650', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ad31b24af2af4a0f7543aaab162e9fe1eb76bf', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6506f47a249720beee4cfe762bad949a658e8f40', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e7643f279dc1b0ae719d3d4659b2cae1c999c0', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c033fb90786cd152684effda05570fa354ce7e21', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5caeeb2706facc7cde8cc9f2acb5c5c953ab9008', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b339ec4120bdc95cb6786ad71430b9765e5b467e', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f148b1c5fb17a1a0787e219be54a0233c601222', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccb44fc0086d42382745251122a279b9b5828f63', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02e8ed411782cf64603c9a27339afdd27a576fac', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf7b2709b9760002b52f09ecaf93c9436fe47940', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9ad2f7970e8baa6134c0799ddd655d50de3d28b', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27a7d0d7704690b1a3ca72527ec7103f4e80b820', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd1f90e556a5a45c6b8d96c34dfaa86ddbdd2184', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec23269604aae5a3dfb12c7555cfa84163297eb1', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd96523dc080a28d22ca68c0044c5611d315b573f', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c3cf8c6c44f9f7a5e82f0f761626c36825b7f5', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c8500f04d276f414e3b6573c78f988a9cfb60c4', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fe6dfccd22305f39bd77f590ecddf34460feff1', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d34dbe69de37d42e993b585a8ade034d08b8b7', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f1275b232650ff7fca06fefec367b8a956be06d', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b322e10a78a146bfdb5a557f2b4409727786129', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04608d4cc666c113fa9d6e783f648b223a3e55d7', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f726c11aa9d8c5bf867c0256b9e6541881f1edbe', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9939dd75ae1de865a3921a96706bd2fb120b1e05', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2998b3c33b8e1d971a4ee9964ee3fa9662bd91f', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bd2256a60b2972b3abf6640863673a5a20710d5', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '003f351b2dd5ad8e6dcecc825689cab983c1c7f1', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f2594a56544ec98d938c7774ceed74406772ab0', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b6c1527d098b5f1b13678aa86222132fffee63e', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac8be8da50a4223688554601c1b6315dbe21c23d', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b60cff441faa81a179eb5a7c90915c9991018c46', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd677b8de4debd68a4acffc45a6a5e7c8ce52fceb', 'committer_username': 'Harkishen-Singh', 'committer_name': 'Harkishen Singh', 'committer_email': 'harkishensingh@hotmail.com', 'commit_date': datetime.datetime(2017, 11, 18, 21, 26, 33, tzinfo=datetime.timezone.utc)}]",Harkishen Singh,33792202,harkishensingh@hotmail.com,User,,175,,4,110

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
6838921,prometheus,prometheus/prometheus,Go,9005,54444,1126,1090,13468,901,218,225,"[{'id': 1040869626, 'number': 11233, 'closed': None, 'created': datetime.datetime(2022, 8, 30, 11, 41, 55, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 143, 'deletions': 0, 'state': 'open'}, {'id': 901325226, 'number': 10544, 'closed': datetime.datetime(2022, 7, 7, 12, 43, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 6, 10, 25, 51, tzinfo=datetime.timezone.utc), 'time_taken': 7957065.0, 'time_delta': '92 days, 2:17:45', 'additions': 893, 'deletions': 22, 'state': 'closed'}, {'id': 874098687, 'number': 10411, 'closed': datetime.datetime(2024, 1, 16, 11, 37, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 8, 11, 40, 12, tzinfo=datetime.timezone.utc), 'time_taken': 58665461.0, 'time_delta': '678 days, 23:57:41', 'additions': 175, 'deletions': 39, 'state': 'closed'}, {'id': 787822782, 'number': 9855, 'closed': datetime.datetime(2023, 12, 27, 9, 53, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 24, 10, 54, 57, tzinfo=datetime.timezone.utc), 'time_taken': 65919514.0, 'time_delta': '762 days, 22:58:34', 'additions': 123, 'deletions': 117, 'state': 'closed'}, {'id': 769128745, 'number': 9609, 'closed': datetime.datetime(2024, 1, 23, 11, 23, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 29, 10, 50, 34, tzinfo=datetime.timezone.utc), 'time_taken': 70504349.0, 'time_delta': '816 days, 0:32:29', 'additions': 412, 'deletions': 89, 'state': 'closed'}, {'id': 702080029, 'number': 9148, 'closed': None, 'created': datetime.datetime(2021, 8, 3, 8, 43, 7, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 230, 'deletions': 7, 'state': 'open'}, {'id': 687775975, 'number': 9075, 'closed': datetime.datetime(2024, 2, 1, 11, 22, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 11, 57, 3, tzinfo=datetime.timezone.utc), 'time_taken': 80695533.0, 'time_delta': '933 days, 23:25:33', 'additions': 140, 'deletions': 0, 'state': 'closed'}, {'id': 581941237, 'number': 8549, 'closed': datetime.datetime(2023, 9, 5, 11, 17, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 1, 10, 34, 30, tzinfo=datetime.timezone.utc), 'time_taken': 79317795.0, 'time_delta': '918 days, 0:43:15', 'additions': 330, 'deletions': 29, 'state': 'closed'}, {'id': 575635172, 'number': 8516, 'closed': datetime.datetime(2021, 2, 26, 16, 55, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 18, 12, 13, 15, tzinfo=datetime.timezone.utc), 'time_taken': 708113.0, 'time_delta': '8 days, 4:41:53', 'additions': 66, 'deletions': 20, 'state': 'closed'}, {'id': 572012625, 'number': 8477, 'closed': datetime.datetime(2021, 2, 16, 19, 11, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 11, 18, 11, 40, tzinfo=datetime.timezone.utc), 'time_taken': 435613.0, 'time_delta': '5 days, 1:00:13', 'additions': 80, 'deletions': 8, 'state': 'closed'}, {'id': 528999833, 'number': 8237, 'closed': datetime.datetime(2021, 2, 10, 22, 25, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 28, 19, 40, 17, tzinfo=datetime.timezone.utc), 'time_taken': 6403520.0, 'time_delta': '74 days, 2:45:20', 'additions': 70, 'deletions': 6, 'state': 'closed'}, {'id': 508883738, 'number': 8103, 'closed': datetime.datetime(2020, 10, 23, 11, 12, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 23, 10, 50, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1281.0, 'time_delta': '0:21:21', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 505100083, 'number': 8075, 'closed': datetime.datetime(2023, 9, 5, 11, 48, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 16, 21, 0, 38, tzinfo=datetime.timezone.utc), 'time_taken': 91032453.0, 'time_delta': '1053 days, 14:47:33', 'additions': 167, 'deletions': 34, 'state': 'closed'}, {'id': 491791882, 'number': 7969, 'closed': datetime.datetime(2020, 9, 28, 11, 12, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 23, 13, 42, 52, tzinfo=datetime.timezone.utc), 'time_taken': 422981.0, 'time_delta': '4 days, 21:29:41', 'additions': 61, 'deletions': 19, 'state': 'closed'}, {'id': 486350725, 'number': 7939, 'closed': datetime.datetime(2023, 9, 5, 11, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 14, 5, 58, 39, tzinfo=datetime.timezone.utc), 'time_taken': 93851841.0, 'time_delta': '1086 days, 5:57:21', 'additions': 53, 'deletions': 18, 'state': 'closed'}, {'id': 486214334, 'number': 7934, 'closed': datetime.datetime(2020, 9, 24, 18, 44, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 13, 17, 36, 37, tzinfo=datetime.timezone.utc), 'time_taken': 954462.0, 'time_delta': '11 days, 1:07:42', 'additions': 73, 'deletions': 39, 'state': 'closed'}, {'id': 481975725, 'number': 7911, 'closed': datetime.datetime(2020, 9, 9, 10, 10, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 8, 11, 28, 37, tzinfo=datetime.timezone.utc), 'time_taken': 81686.0, 'time_delta': '22:41:26', 'additions': 58, 'deletions': 57, 'state': 'closed'}, {'id': 466212507, 'number': 7779, 'closed': datetime.datetime(2023, 4, 26, 16, 8, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 16, 19, 58, tzinfo=datetime.timezone.utc), 'time_taken': 85362497.0, 'time_delta': '987 days, 23:48:17', 'additions': 2255, 'deletions': 267, 'state': 'closed'}, {'id': 444305108, 'number': 7516, 'closed': datetime.datetime(2022, 3, 21, 9, 18, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 16, 43, 40, tzinfo=datetime.timezone.utc), 'time_taken': 53973271.0, 'time_delta': '624 days, 16:34:31', 'additions': 11, 'deletions': 1, 'state': 'closed'}, {'id': 442237834, 'number': 7491, 'closed': datetime.datetime(2020, 7, 5, 5, 55, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 19, 7, 51, tzinfo=datetime.timezone.utc), 'time_taken': 384472.0, 'time_delta': '4 days, 10:47:52', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 434728426, 'number': 7399, 'closed': datetime.datetime(2020, 6, 21, 15, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 19, 23, 34, tzinfo=datetime.timezone.utc), 'time_taken': 506006.0, 'time_delta': '5 days, 20:33:26', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 409658369, 'number': 7178, 'closed': datetime.datetime(2020, 9, 7, 14, 52, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 27, 18, 6, 10, tzinfo=datetime.timezone.utc), 'time_taken': 11479583.0, 'time_delta': '132 days, 20:46:23', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 405654871, 'number': 7142, 'closed': datetime.datetime(2021, 4, 26, 9, 32, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 19, 12, 16, 32, tzinfo=datetime.timezone.utc), 'time_taken': 32130970.0, 'time_delta': '371 days, 21:16:10', 'additions': 163, 'deletions': 162, 'state': 'closed'}, {'id': 381062168, 'number': 6890, 'closed': datetime.datetime(2022, 3, 21, 9, 20, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 20, 39, 35, tzinfo=datetime.timezone.utc), 'time_taken': 65018483.0, 'time_delta': '752 days, 12:41:23', 'additions': 275, 'deletions': 72, 'state': 'closed'}, {'id': 378338514, 'number': 6856, 'closed': datetime.datetime(2020, 2, 21, 15, 52, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 15, 29, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1431.0, 'time_delta': '0:23:51', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 372758239, 'number': 6794, 'closed': datetime.datetime(2020, 2, 17, 17, 19, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 8, 21, 2, 45, tzinfo=datetime.timezone.utc), 'time_taken': 764191.0, 'time_delta': '8 days, 20:16:31', 'additions': 143, 'deletions': 44, 'state': 'closed'}, {'id': 358150734, 'number': 6533, 'closed': datetime.datetime(2020, 1, 15, 18, 7, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 30, 16, 0, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1390024.0, 'time_delta': '16 days, 2:07:04', 'additions': 11476, 'deletions': 47, 'state': 'closed'}, {'id': 356025793, 'number': 6503, 'closed': datetime.datetime(2020, 1, 27, 9, 27, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 21, 19, 40, 38, tzinfo=datetime.timezone.utc), 'time_taken': 3160026.0, 'time_delta': '36 days, 13:47:06', 'additions': 227, 'deletions': 64, 'state': 'closed'}, {'id': 347110944, 'number': 6394, 'closed': datetime.datetime(2019, 12, 31, 17, 41, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 29, 16, 34, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2768859.0, 'time_delta': '32 days, 1:07:39', 'additions': 251, 'deletions': 37, 'state': 'closed'}, {'id': 338951836, 'number': 6295, 'closed': datetime.datetime(2019, 11, 11, 8, 56, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 9, 7, 11, 53, tzinfo=datetime.timezone.utc), 'time_taken': 179072.0, 'time_delta': '2 days, 1:44:32', 'additions': 41, 'deletions': 0, 'state': 'closed'}, {'id': 327245287, 'number': 6129, 'closed': datetime.datetime(2024, 2, 6, 11, 24, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 11, 15, 7, 8, tzinfo=datetime.timezone.utc), 'time_taken': 136412224.0, 'time_delta': '1578 days, 20:17:04', 'additions': 123, 'deletions': 6, 'state': 'closed'}, {'id': 317639359, 'number': 6026, 'closed': datetime.datetime(2019, 9, 20, 10, 29, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 15, 13, 50, 9, tzinfo=datetime.timezone.utc), 'time_taken': 419979.0, 'time_delta': '4 days, 20:39:39', 'additions': 41, 'deletions': 0, 'state': 'closed'}, {'id': 317637507, 'number': 6025, 'closed': datetime.datetime(2019, 9, 15, 13, 43, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 15, 13, 23, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1224.0, 'time_delta': '0:20:24', 'additions': 9898, 'deletions': 190, 'state': 'closed'}, {'id': 314488827, 'number': 5990, 'closed': datetime.datetime(2020, 8, 18, 11, 57, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 5, 12, 58, 44, tzinfo=datetime.timezone.utc), 'time_taken': 30063550.0, 'time_delta': '347 days, 22:59:10', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 313238205, 'number': 5979, 'closed': datetime.datetime(2019, 9, 6, 10, 46, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 2, 12, 7, 21, tzinfo=datetime.timezone.utc), 'time_taken': 340744.0, 'time_delta': '3 days, 22:39:04', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 313030544, 'number': 5978, 'closed': datetime.datetime(2019, 9, 4, 13, 13, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 1, 12, 39, 51, tzinfo=datetime.timezone.utc), 'time_taken': 261190.0, 'time_delta': '3 days, 0:33:10', 'additions': 75, 'deletions': 55, 'state': 'closed'}, {'id': 308388781, 'number': 5915, 'closed': datetime.datetime(2019, 8, 21, 11, 57, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 8, 18, 19, 44, 20, tzinfo=datetime.timezone.utc), 'time_taken': 231169.0, 'time_delta': '2 days, 16:12:49', 'additions': 12, 'deletions': 8, 'state': 'closed'}]"
