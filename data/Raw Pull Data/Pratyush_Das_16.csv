pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
680743893,Add pass to load definitions of common functions from bc files - starting with cblas_ddot,,True,220,https://api.github.com/repos/EnzymeAD/Enzyme/pulls/220,https://github.com/EnzymeAD/Enzyme/pull/220,closed,332,1,11,1,1,3,0,0,[],2021-06-30 10:43:57+00:00,2021-07-10 16:05:40+00:00,883303.0,"10 days, 5:21:43","[{'comment_id': 661641179, 'comment_body': 'You may want to include the type (say double) somewhere in the file name.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 661641600, 'comment_body': ""I'd run this at the start of optimization, rather than at vectorizer."", 'comment_created': datetime.datetime(2021, 6, 30, 16, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 661645150, 'comment_body': ""This path isn't right (and thus the test doesn't pass)."", 'comment_created': datetime.datetime(2021, 6, 30, 16, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}]","[{'commit_sha': '7313c29685b5222a322ccedfaf55a21c1f1f6c64', 'committer_username': 'reikdas', 'committer_name': 'Pratyush Das', 'committer_email': 'reikdas@gmail.com', 'commit_date': datetime.datetime(2015, 4, 2, 18, 18, 56, tzinfo=datetime.timezone.utc)}]",Pratyush Das,11775615,reikdas@gmail.com,User,,57,,119,63
686189000,Use calls to cblas_daxpy to calculate the derivative of functions with cblas_ddot,,True,226,https://api.github.com/repos/EnzymeAD/Enzyme/pulls/226,https://github.com/EnzymeAD/Enzyme/pull/226,closed,2310,0,22,1,1,24,0,0,[],2021-07-08 17:09:57+00:00,2021-07-29 05:26:22+00:00,1772185.0,"20 days, 12:16:25","[{'comment_id': 666601927, 'comment_body': ""Can you clean up the test a bit? There's no need for all of the m.addr / x, etc (e.g. run mem2reg on it).\r\n\r\nSimilarly I would run -mem2reg -instsimplify -simplifycfg after enzyme to make the gradient easier to read."", 'comment_created': datetime.datetime(2021, 7, 9, 0, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 666603982, 'comment_body': ""Rather than making an allocation here and gep/storing into it, can you initialize to an undef then use an insertvalue?\r\n\r\nSimilarly it may be wise to first determine which values need caching and then only caching those values. For example. in ddot(a, b) you only need to cache a if b is active (since if b is inactive you shouldn't update the shadow of b, since its inactive [and otherwise may get incorrect behavior]). Additionally if a isn't overwritten between the forward and reverse (even if b is active), you don't need to cache it. The (poorly named) variable uncacheable_args_map should contain a map of arguments to whether or not the memory is overwritten.\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 9, 0, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 666604115, 'comment_body': ""I'd also explicitly add a test where one of the inputs isn't active as well."", 'comment_created': datetime.datetime(2021, 7, 9, 0, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 666663969, 'comment_body': 'I might also write this to handle either ddot for doubles or sdot for floats in the same call', 'comment_created': datetime.datetime(2021, 7, 9, 4, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 669878737, 'comment_body': ""> For example. in ddot(a, b) you only need to cache a if b is active (since if b is inactive you shouldn't update the shadow of b, since its inactive [and otherwise may get incorrect behavior]).\r\n\r\nI am trying to understand this - in `ddot(a, b)`, there should never be a situation where either of them is inactive right? Unless you mean that `a` is inactive for `d/d_a ddot(a,b)` (for the cases where adjoint doesn't depend on `a`), and `b` is inactive for `d/d_b ddot(a,b)` (for the cases where adjoint doesn't depend on `b`)."", 'comment_created': datetime.datetime(2021, 7, 14, 19, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'reikdas', 'type': 'User'}, {'comment_id': 669880647, 'comment_body': ""It's possible for one of the two inputs to be inactive.\r\n\r\nFor example consider\r\n\r\n```\r\ndouble sum(double* a) {\r\n  double b[3] = {1, 1, 1};\r\n  return ddot(a, b);\r\n}\r\n```\r\n\r\nHere b is inactive, even though a is active. As such we don't need to cache a since we don't need to (and in fact would be illegal to) compute the derivative of b."", 'comment_created': datetime.datetime(2021, 7, 14, 19, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 675091412, 'comment_body': ""I'm a bit worried about the correctness of the memcpy here. The spec specifies a stride (which so far has been tested wiht only 1). But suppose an stride of 4 were used, we won't copy all the data needed. Arguably in that case we should still allocate the same amount but do something like cache[i] = input[4*i], then in the reverse should use a size of 1 for the cached version (since we're storing at stride of 1)."", 'comment_created': datetime.datetime(2021, 7, 22, 19, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 675092201, 'comment_body': 'I\'d have this be handled in the same code as above with a if funcName == ""cblas_ddot"" || funcName == ""cblas_sdot"". Then when it differs (per type), you can do a check whether it\'s ddot or sdot', 'comment_created': datetime.datetime(2021, 7, 22, 19, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 675092550, 'comment_body': 'I might make a new subfolder called blas in reverse mode for ease.', 'comment_created': datetime.datetime(2021, 7, 22, 19, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677143152, 'comment_body': ""Just to clarify,\r\n\r\nFor a strided implementation where we do something like - \r\n```\r\ng(double *m, double* m1, double *n, double *n1) { // Where m1, n1 are shadow args\r\n  cblas_ddot(3, m, 2, n, 3); // 2 is the stride for m. 3 is the stride for n.\r\n  ....\r\n}\r\n  \r\nint caller() {\r\n  double m[6] = {1, 2, 3, 4, 5, 6};\r\n  double m1[6] = {0, 0, 0, 0, 0, 0};\r\n  double n[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\r\n  double n1[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n  g(m, m1, n, n1);\r\n```\r\nIf cblas_ddot's source code is available, we store the derivatives wrt m in m1[0], m1[2], m1[4]. And the derivatives wrt n in n1[0], n1[3], n1[6].\r\n\r\nIf I understand correctly, in the strided memcpy implementation that you suggest, we would be storing the derivatives wrt m in m1[0], m1[1], m1[2]. And the derivatives wrt n in n1[0], n1[1], n1[2]. Is that okay?\r\n  "", 'comment_created': datetime.datetime(2021, 7, 27, 6, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'reikdas', 'type': 'User'}, {'comment_id': 677152687, 'comment_body': ""So we still want the same end derivative -- but we don't need to cache the values in the same way. So even though here m has a stride of 2, we can condense the cache to have a stride of 1 when we copy into it. This should still produce the same result, so long as we now a stride of 1 when indexing into the cached m for the reverse."", 'comment_created': datetime.datetime(2021, 7, 27, 6, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677592616, 'comment_body': ""This will cause an error, you can't assume that the argument is always a constant int. Moreover, you don't need to cache if it's not overwritten, even if the stride != 1."", 'comment_created': datetime.datetime(2021, 7, 27, 16, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677593341, 'comment_body': ""Change this to getOrInsertMemcpyStrided (since here it shouldn't be doing the differential memcpy, just a strided memcpy)."", 'comment_created': datetime.datetime(2021, 7, 27, 16, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677595442, 'comment_body': ""This should be the actual stride of x, unless it's cached at which point it can be 1."", 'comment_created': datetime.datetime(2021, 7, 27, 16, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677596196, 'comment_body': 'Probably also worth adding readonly to src and writeonly (if sufficient llvm version) to dst.', 'comment_created': datetime.datetime(2021, 7, 27, 16, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677924797, 'comment_body': ""For performance, it's good to avoid a lookup if not necessary. Can you initialize this to nullptr, then if it's not set from the cache, do this lookup?"", 'comment_created': datetime.datetime(2021, 7, 28, 2, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677924992, 'comment_body': 'Why is this assertion here?', 'comment_created': datetime.datetime(2021, 7, 28, 2, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677925118, 'comment_body': 'and here?', 'comment_created': datetime.datetime(2021, 7, 28, 2, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677925469, 'comment_body': ""Don't do a cast to constantint -- it may not be constant"", 'comment_created': datetime.datetime(2021, 7, 28, 2, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677925739, 'comment_body': 'Can you add a test where the stride is an inactive argument to g?', 'comment_created': datetime.datetime(2021, 7, 28, 2, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 677984193, 'comment_body': 'Could you please help me figure out an alternate way to make the name of the function unique for that particular stride number?', 'comment_created': datetime.datetime(2021, 7, 28, 5, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'reikdas', 'type': 'User'}, {'comment_id': 678082441, 'comment_body': 'Would this be an appropriate example? \r\n\r\n```\r\nfloat g(float *restrict m, float *restrict n) {\r\n  int stride = 3;\r\n  float x = cblas_sdot(3, m, 2, n, stride);\r\n  float y = x * x;\r\n  return y;\r\n}\r\n\r\nint main() {\r\n  float m[6] = {1, 2, 3, 101, 102, 103};\r\n  float m1[6] = {0, 0, 0, 0, 0, 0};\r\n  float n[9] = {4, 5, 6, 104, 105, 106, 7, 8, 9};\r\n  float n1[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n  __enzyme_autodiff((void*)g, m, m1, n, n1);\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 8, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'reikdas', 'type': 'User'}, {'comment_id': 678404902, 'comment_body': 'Can you make stride an argument of g, rather than a local variable? Reason being that when mem2reg is run, the stride var is eliminated anyways.', 'comment_created': datetime.datetime(2021, 7, 28, 15, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 678405648, 'comment_body': ""Bumping this. Also its wise to avoid a lookup if it's not used to avoid unnecessary caching."", 'comment_created': datetime.datetime(2021, 7, 28, 15, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}]","[{'commit_sha': 'b4d91aa144a91a53bef5155c00341f5ff51e4f11', 'committer_username': 'reikdas', 'committer_name': 'Pratyush Das', 'committer_email': 'reikdas@gmail.com', 'commit_date': datetime.datetime(2015, 4, 2, 18, 18, 56, tzinfo=datetime.timezone.utc)}]",Pratyush Das,11775615,reikdas@gmail.com,User,,57,,119,63
717373276,Calculate adjoint of cblas_dgemm,,False,308,https://api.github.com/repos/EnzymeAD/Enzyme/pulls/308,https://github.com/EnzymeAD/Enzyme/pull/308,closed,2439,173,22,1,3,13,0,0,[],2021-08-22 20:59:17+00:00,2023-06-23 21:41:08+00:00,57890511.0,"670 days, 0:41:51","[{'comment_id': 721459073, 'comment_body': 'Can this include be eliminated?', 'comment_created': datetime.datetime(2021, 10, 4, 15, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 727428306, 'comment_body': 'You need to wrap call.getArgOperand(7) here and below in a getNewFromOriginal', 'comment_created': datetime.datetime(2021, 10, 12, 19, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 727428747, 'comment_body': 'Here as well', 'comment_created': datetime.datetime(2021, 10, 12, 19, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 727429110, 'comment_body': 'This seems really fragile', 'comment_created': datetime.datetime(2021, 10, 12, 19, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 727430062, 'comment_body': ""Can you instead do `cast<ConstantInt>(call.getArgOperand(0))->getValue() == 'N' ||  cast<ConstantInt>(call.getArgOperand(0))->getValue() == 'n' `or similar"", 'comment_created': datetime.datetime(2021, 10, 12, 19, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 739340986, 'comment_body': 'Minor point, can you remove these allocas?', 'comment_created': datetime.datetime(2021, 10, 29, 15, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 742507824, 'comment_body': 'Can you add asserts that the forward modes are unhandled', 'comment_created': datetime.datetime(2021, 11, 4, 3, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 742508166, 'comment_body': ""Can you compare with a character rather than a raw number? Also usually don't both upper and lowercase work?"", 'comment_created': datetime.datetime(2021, 11, 4, 3, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 742508285, 'comment_body': 'Likewise character for the rest here.', 'comment_created': datetime.datetime(2021, 11, 4, 3, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 742508516, 'comment_body': 'Are we always sure this is an int32? Can we instead use whatever the type of the constantint is (if, for some reason, it is say an int64, etc).', 'comment_created': datetime.datetime(2021, 11, 4, 3, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 742509022, 'comment_body': 'Can you remove the main except for the call to autodiff (and perhaps just have arguments forwarded to the autodiff call)', 'comment_created': datetime.datetime(2021, 11, 4, 3, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 742509344, 'comment_body': ""Why is this zero? Shouldn't we also consider the case where alpha and beta are active?"", 'comment_created': datetime.datetime(2021, 11, 4, 3, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wsmoses', 'type': 'User'}, {'comment_id': 747970770, 'comment_body': 'The first three arguments are enums. I am not sure about chars that we can pass as arguments instead. Do you have an example?\r\n\r\nDo you instead mean passing in the enum names like `CblasRowMajor`, `CblasNoTrans`, etc instead of the number?', 'comment_created': datetime.datetime(2021, 11, 12, 4, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'reikdas', 'type': 'User'}]","[{'commit_sha': 'b1c7d8b1e26a2dded0441ae920aeb36d84e4b5eb', 'committer_username': 'reikdas', 'committer_name': 'Pratyush Das', 'committer_email': 'reikdas@gmail.com', 'commit_date': datetime.datetime(2015, 4, 2, 18, 18, 56, tzinfo=datetime.timezone.utc)}]",Pratyush Das,11775615,reikdas@gmail.com,User,,57,,119,63

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
172835975,Enzyme,EnzymeAD/Enzyme,LLVM,102,1239,31,50,2158,148,159,56,"[{'id': 748355758, 'number': 348, 'closed': datetime.datetime(2022, 7, 31, 5, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 3, 16, 25, 2, tzinfo=datetime.timezone.utc), 'time_taken': 25966558.0, 'time_delta': '300 days, 12:55:58', 'additions': 273, 'deletions': 17, 'state': 'closed'}, {'id': 717373276, 'number': 308, 'closed': datetime.datetime(2023, 6, 23, 21, 41, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 20, 59, 17, tzinfo=datetime.timezone.utc), 'time_taken': 57890511.0, 'time_delta': '670 days, 0:41:51', 'additions': 2439, 'deletions': 173, 'state': 'closed'}, {'id': 686189000, 'number': 226, 'closed': datetime.datetime(2021, 7, 29, 5, 26, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 17, 9, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1772185.0, 'time_delta': '20 days, 12:16:25', 'additions': 2310, 'deletions': 0, 'state': 'closed'}, {'id': 680743893, 'number': 220, 'closed': datetime.datetime(2021, 7, 10, 16, 5, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 10, 43, 57, tzinfo=datetime.timezone.utc), 'time_taken': 883303.0, 'time_delta': '10 days, 5:21:43', 'additions': 332, 'deletions': 1, 'state': 'closed'}]"
