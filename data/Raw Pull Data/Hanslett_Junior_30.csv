pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1401559947,Get all dependencies from the requirements.txt file,"## Summary

This pull request solves this [Issue](https://github.com/PyAr/pyafipws/issues/105). The setup.py file has some other dependencies which setup.py has to be aware of so as to build the project. This PR solves that issue

## Checklist

- [X] Classes, Variables, function and methods logic  ok
- [X] Comments written explaining what the code does
- [X] All python code is PEP8 compliant (run black .)",True,119,https://api.github.com/repos/PyAr/pyafipws/pulls/119,https://github.com/PyAr/pyafipws/pull/119,closed,24,3,2,16,3,4,0,0,[],2023-06-21 12:02:28+00:00,2023-10-06 17:46:33+00:00,9265445.0,"107 days, 5:44:05","[{'comment_id': 1323817551, 'comment_body': 'py2exe should be a development dependency, not really needed for installation and normal operation', 'comment_created': datetime.datetime(2023, 9, 13, 1, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1323818355, 'comment_body': ""pywin32 should be an optional dependency, it is required to use this library from 3rd party languages (python apps don't need it)"", 'comment_created': datetime.datetime(2023, 9, 13, 1, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1326721063, 'comment_body': 'Here it is missing the python 3 conditional, right?\r\n```suggestion\r\n        ""pysimplesoap @ git+https://github.com/pysimplesoap/pysimplesoap.git@py311#pysimplesoap; python_version > \'3\'"",\r\n```', 'comment_created': datetime.datetime(2023, 9, 15, 2, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1339545295, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 9, 28, 5, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}]","[{'commit_sha': '6bb7fe8380f5a12d9abd5c00b0b569dfc20334b1', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a44d25869eaae898c5ae1d2a205497631c079b27', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a882d5b7425dd751fb132bcd15076d6ac28371a5', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c1fd27cb39819961695167f3489c0781eb356f', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f1b31d1eb97c0ca9d272ddd9f98f5cdf5029537', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '318cbbd920ee784c5992c2bc82162b566978d1e0', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d9b9a944d7913182d478ed8292dc15886eda5ab', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8a05a1537b0e6b9ec6934f4bc8a64040dddf54c', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced4d9a8c6cfd1937a52afd7cd3d7dd350365c71', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eea2b85de56c4b405cdb1cc08eac95787a7968f9', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9889658ac1653b119ddb52d7f564f2c2046210', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4f7999e064bc81cce2a755a6e1c22425ed8bb6', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66dd1d5fc798ae0210fe6c4cc0edd7090c30e564', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49dd24652b1534631043ab73c979f61f9fe21980', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec9862edbf6dadf826bede94eb893b1f0c6f5e0', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017345a86e5301237cfb5b76c897d538de5a2428', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1418776638,Update signature,"## Summary

This pull requests aims to improve the work done in [#113](https://github.com/PyAr/pyafipws/pull/113). Updating the cryptography module, fixing the broken tests and libraries

## Checklist

- [x] Classes, Variables, function and methods logic  ok
- [x] Comments written explaining what the code does
- [x] Test coverage with pytest implemented",True,124,https://api.github.com/repos/PyAr/pyafipws/pulls/124,https://github.com/PyAr/pyafipws/pull/124,closed,42,13,2,4,0,0,0,0,[],2023-07-03 23:33:01+00:00,2023-07-05 02:58:22+00:00,98721.0,"1 day, 3:25:21",[],"[{'commit_sha': 'c4498196fe7f2314768950d333ad3e297cca0b02', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd075fdafa18f252a00ebd1ca74ceda0fcf1d4a88', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f80402568fb43de6bd7315abf042ab6011b66ae', 'committer_username': 'reingart', 'committer_name': 'Mariano Reingart', 'committer_email': 'reingart@gmail.com', 'commit_date': datetime.datetime(2011, 9, 10, 21, 13, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '752908fdf55eb8912bf57ae29d8a6dca5e1ecff5', 'committer_username': 'reingart', 'committer_name': 'Mariano Reingart', 'committer_email': 'reingart@gmail.com', 'commit_date': datetime.datetime(2011, 9, 10, 21, 13, 41, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1428967071,New sign tra,"## Summary
This pull request aims to split the sign tra function based on this [comment](https://github.com/PyAr/pyafipws/issues/110#issuecomment-1620976667) from @reingart.
Unit tests will also be added for all the functions to ensure they are properly tested and maintain the standards of the previous general function

## Checklist

- [x] Classes, Variables, function and methods logic ok
- [x] Comments written explaining what the code does",True,125,https://api.github.com/repos/PyAr/pyafipws/pulls/125,https://github.com/PyAr/pyafipws/pull/125,closed,198,135,2,8,5,9,0,0,[],2023-07-11 08:19:29+00:00,2023-08-25 00:45:47+00:00,3860778.0,"44 days, 16:26:18","[{'comment_id': 1263203018, 'comment_body': 'This condition should be removed (and unindent), it already is at top level `sign_tra()` function', 'comment_created': datetime.datetime(2023, 7, 14, 1, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1263205447, 'comment_body': 'This also could be needed in Python 3 if using outdated libraries.\r\nThe condition should be rewritten to check cryptography version < 39', 'comment_created': datetime.datetime(2023, 7, 14, 1, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1263207639, 'comment_body': 'Google docstrings style should be used (first line with a summary, then blank, description and args/returns). Please see:\r\n\r\nhttps://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings', 'comment_created': datetime.datetime(2023, 7, 14, 1, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1287805462, 'comment_body': 'Please change this version checking to use split, or it will fail if cryptography isues a release >=100', 'comment_created': datetime.datetime(2023, 8, 9, 0, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1287811319, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2023, 8, 9, 0, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}, {'comment_id': 1292483196, 'comment_body': 'You could import subprocess and base64 always, please do not put conditions for tests in the main code ', 'comment_created': datetime.datetime(2023, 8, 12, 20, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1292484402, 'comment_body': 'If the last supported version for old logic was 39, this would be `<=` right?', 'comment_created': datetime.datetime(2023, 8, 12, 20, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1292501822, 'comment_body': 'Got it, I will remove that line. I added that line of code as the tests were failing due to subprocess and base64 not imported at run time due to the try and except statement', 'comment_created': datetime.datetime(2023, 8, 12, 21, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}, {'comment_id': 1292526041, 'comment_body': 'oh I modified the code and forgot to add the =\r\nIt has been modified now', 'comment_created': datetime.datetime(2023, 8, 12, 22, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}]","[{'commit_sha': '4f1d7c7a88b09996d43a69fd9fb306c861fc4713', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55918687bf7c2e68103b4e294a0b0c19c09f8051', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f61fd9ef7e54c61c28b2c6058693f0f29320b4e', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29122cf9abf3fe5e723afe24c893d18934e37e61', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9232e83f9801744b511e70592daf91a6fcbb85d0', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fafb3874b0b84a42cc986f0d71771d4c9c63105', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '961c4006789f0f79dd0e248138624d0b2d366b20', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e022f8a3dcba84c5addfffe1aca0591bfff03219', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1435615889,Makefile command update for manual testing,"## Summary
My experience with testing pyafipws from the command line was a bit repetitive. So I decided to use a bunch of useful make commands that will reduce the workload of typing the commands over and over again. This PR solves the issue of repeatedly typing the same commands when running manual tests 

## Checklist

- [x] Classes, Variables, function and methods logic  ok",True,126,https://api.github.com/repos/PyAr/pyafipws/pulls/126,https://github.com/PyAr/pyafipws/pull/126,closed,28,2,1,3,0,3,1,0,[{'name': 'enhancement'}],2023-07-15 01:21:03+00:00,2023-08-23 01:37:48+00:00,3370605.0,"39 days, 0:16:45","[{'comment_id': 1271313644, 'comment_body': ""This one authorizes an electronic invoice, maybe `sample-invoice:` or `try-invoice:` would be a better name \r\nBTW, the cert is never signed, and the access ticket is created in the wsaa module.\r\n\r\nYou should add this targets to .PHONY as they don't generate code files (beside access token and sample json invoice that are temporal data)"", 'comment_created': datetime.datetime(2023, 7, 22, 16, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1271313891, 'comment_body': 'This target obtains an access ticket (create the access ticket request, signs it, and calls the webservice to get the final access ticket)\r\nMaybe it would be better to use a more descriptive name like `try-auth:`\r\n\r\nPlease add comments or echo to document these steps inline.', 'comment_created': datetime.datetime(2023, 7, 22, 16, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1271551267, 'comment_body': ""Yeah, I'll add the targets to .PHONY as well"", 'comment_created': datetime.datetime(2023, 7, 23, 20, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}]","[{'commit_sha': '4c8d8f80e6bed0ba35144f4edc862c0e65115666', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2eb64dbe436a8e1a5c96edf53ef4d724a46b03', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ff2800b9d6dbe5883eb82c320b9e94efd8b0182', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1473309653,Fix 32bit workflow failing in the Github Actions,"## Summary

This PR aims to fix the build failures in the GitHub actions workflow for Windows 32-bit systems
The cause of this build failure was due to Pillow v9.5.0 having its last support for 32-bit systems and in the requirements.txt file, a version higher than v9.5.0 was being installed therefore causing the 32bit workflow to fail


## Checklist
- [x] No lint issues (run flake8)
",True,130,https://api.github.com/repos/PyAr/pyafipws/pulls/130,https://github.com/PyAr/pyafipws/pull/130,closed,2,1,1,3,0,2,0,0,[],2023-08-13 09:45:28+00:00,2023-08-13 18:26:56+00:00,31288.0,8:41:28,"[{'comment_id': 1292835687, 'comment_body': ""```suggestion\r\nPillow<=9.5.0; platform_machine!='x86_64'\r\n```"", 'comment_created': datetime.datetime(2023, 8, 13, 18, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1292835701, 'comment_body': ""```suggestion\r\nPillow>=2.0.0; platform_machine=='x86_64'\r\n```"", 'comment_created': datetime.datetime(2023, 8, 13, 18, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}]","[{'commit_sha': 'bfd17eaef19d34929b165cecb0aadb2c0254a161', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eefc3fcc9ed2fca516c5a60114eefd1a33774c4f', 'committer_username': 'reingart', 'committer_name': 'Mariano Reingart', 'committer_email': 'reingart@gmail.com', 'commit_date': datetime.datetime(2011, 9, 10, 21, 13, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4a3db866cf2e672aa0bf71f393195ecb5f36b0', 'committer_username': 'reingart', 'committer_name': 'Mariano Reingart', 'committer_email': 'reingart@gmail.com', 'commit_date': datetime.datetime(2011, 9, 10, 21, 13, 41, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1473310930,Create pyafipws installers and deploy as releases,"## Summary

This pull request aims to solve issue #109 and provide a GitHub action that will run every time there is a push on the main branch and generate a one-file installer and also make push a release containing the recent one-file installer 

Initially, the workflow did not generate the exe file required, but it can now as it was missing a crucial file(vcredit_x86.exe). This has been tested locally. Currently the workflow deploys the installer as a release artifact

## Checklist

- [x] Classes, Variables, function and methods logic  ok

## Manual test evidence

Evidence of the generated exe file
![image](https://github.com/PyAr/pyafipws/assets/64011386/3747169b-b5ea-45df-850a-0cdccab49627)
",True,131,https://api.github.com/repos/PyAr/pyafipws/pulls/131,https://github.com/PyAr/pyafipws/pull/131,closed,28,3,2,4,0,0,0,0,[],2023-08-13 09:49:29+00:00,2023-08-27 16:28:16+00:00,1233527.0,"14 days, 6:38:47",[],"[{'commit_sha': '99f81572ab18fa6f33ccee2fab19e98f6e466655', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76bb99befa7772952be27f9f64f777ebd975b5fb', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dfe61304ed70891aebdfc7f4998d3883519a06d', 'committer_username': 'reingart', 'committer_name': 'Mariano Reingart', 'committer_email': 'reingart@gmail.com', 'commit_date': datetime.datetime(2011, 9, 10, 21, 13, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90538682af5658ef5d21cd15bb78195e2f7cdb1b', 'committer_username': 'reingart', 'committer_name': 'Mariano Reingart', 'committer_email': 'reingart@gmail.com', 'commit_date': datetime.datetime(2011, 9, 10, 21, 13, 41, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1492395673,Deploy installers to release section,"## Summary
This PR aims to close the issue on #109 and the PR merged #131. This PR adds the functionality of deploying PyAfipWs Installers to the release section, both the 32bit and 64bit versions

## Checklist

- [x] Classes, Variables, function and methods logic  ok

## Manual test evidence

Here is a screenshot from my tested branch on my forked repo of the release 
![image](https://github.com/PyAr/pyafipws/assets/64011386/8abf1064-175b-476b-91d3-369f59b8400d)",True,136,https://api.github.com/repos/PyAr/pyafipws/pulls/136,https://github.com/PyAr/pyafipws/pull/136,closed,12,0,1,1,0,0,0,0,[],2023-08-28 16:50:44+00:00,2023-08-29 00:19:14+00:00,26910.0,7:28:30,[],"[{'commit_sha': 'a7f9b233ecedc1f6741f4cbb6b1b9129821c2cd0', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1523781666,feat: github action deploy yml file,"## Summary
This PR aims to solve the issue #139 and create a GH action that will automatically push a new version to PyPi only when the windows installers and python package Actions have been completed and the main branch has a recent release.

## Checklist
- [x] Reviewers assigned (at least 1 mentor)

## Manual test evidence
PyAfipWs deployed to PyPi Test server

![image](https://github.com/PyAr/pyafipws/assets/64011386/68ee8e2e-9e04-4a07-9e96-34dba58bb7cd)

![image](https://github.com/PyAr/pyafipws/assets/64011386/486a989d-65f8-49c7-8ab0-ff2219b2a4ae)
",True,140,https://api.github.com/repos/PyAr/pyafipws/pulls/140,https://github.com/PyAr/pyafipws/pull/140,closed,45,0,1,2,0,3,0,0,[],2023-09-20 21:31:55+00:00,2023-10-01 02:24:19+00:00,881544.0,"10 days, 4:52:24","[{'comment_id': 1335224936, 'comment_body': ""Here, we'll need a proper test using wsaa / wsfev1\r\nIt could be a single lines running `python -m pyafipws.wsaa` and `python -m pyafipws.wsfev1 --dummy` so it checks that the package is being built/uploaded/installed properly\r\nAlso it should check the installed version, that matches with the one being built\r\nPlease create a new ticket / issue to track this, so we can merge this PR"", 'comment_created': datetime.datetime(2023, 9, 24, 18, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1340706201, 'comment_body': ""This will mean we will need to use some certificates to test it so I'll just add that as well\r\n\r\n"", 'comment_created': datetime.datetime(2023, 9, 28, 22, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}, {'comment_id': 1342042642, 'comment_body': 'Probably it should be a single python version (to not publish the package twice)', 'comment_created': datetime.datetime(2023, 10, 1, 2, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}]","[{'commit_sha': 'b4fec15c2004f0bf0aed7ced171d5efc3266b0bb', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6407f00d9e61ec3dfcdded5bb321b608c43ff78', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1539990556,Comprehensive test for deployed package,"## Summary
This PR aims to provide a way to test the pyafipws package once it has been deployed to PyPi

## Checklist

- [x] Classes, Variables, function and methods logic  ok

## Manual test evidence

(attach command-line examples, execution output & logs, etc.)
",True,141,https://api.github.com/repos/PyAr/pyafipws/pulls/141,https://github.com/PyAr/pyafipws/pull/141,closed,30,4,1,1,0,0,0,0,[],2023-10-03 13:16:01+00:00,2023-10-06 20:31:57+00:00,285356.0,"3 days, 7:15:56",[],"[{'commit_sha': '54470b5683fc2b282a523299eb2b687441826e47', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1510988331,Unit tests for issue #90,"## Summary
This PR aims to close issue #90. The PR contains unit tests for the following files in formatos module
- [X] TXT files
- [x] DBF files
- [x] JSON files
- [x] CSV files
- [X] SQL files
- [x] XML files

## Checklist

- [x] Classes, Variables, function and methods logic  ok
- [x] Comments written explaining what the code does
- [x] All python code is PEP8 compliant (run black .)
- [x] No lint issues (run flake8)
- [x] Test coverage with pytest implemented

## Manual test evidence

(attach command-line examples, execution output & logs, etc.)
",False,137,https://api.github.com/repos/PyAr/pyafipws/pulls/137,https://github.com/PyAr/pyafipws/pull/137,open,673,15,17,8,0,0,0,0,[],2023-09-11 20:45:01+00:00,,0.0,,[],"[{'commit_sha': 'd51a01f2e7e4718bf39183405d2b904510e4ecde', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f996d3a41b275f70ad9f6561ec68ce0eec0dc27', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f2899aa30f9ee6f3d92bd3bf2f24ccf5434c6cc', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1942d4564912b796da8230bf257d2abc63d3634', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11698cc6ec43a38729ba48fabbd703ae259039a2', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c0092de07192e70d83dcd063b0830c32676f0ba', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c3aaa0c3046a5a2322a503a614e5af52fef5c1', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c23db26171305c86f0d47097d612c6d90c5438', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1511098684,adding unit tests for wsfev1 based on issue #107,"## Summary
This PR aims to provide test coverage for some methods in the wsfev1.py file based on issue #107 

## Checklist

- [x] Classes, Variables, function and methods logic  ok
- [x] Comments written explaining what the code does
- [x] All python code is PEP8 compliant (run black .)
- [x] No lint issues (run flake8)
- [x] Test coverage with pytest implemented
- [x] Reviewers assigned (at least 1 mentor)

## Manual test evidence

(attach command-line examples, execution output & logs, etc.)
",True,138,https://api.github.com/repos/PyAr/pyafipws/pulls/138,https://github.com/PyAr/pyafipws/pull/138,closed,55,1,1,2,0,2,0,0,[],2023-09-11 22:21:35+00:00,2023-11-05 23:37:01+00:00,4756526.0,"55 days, 1:15:26","[{'comment_id': 1342043296, 'comment_body': 'This fixture could go inside the test (if it not will be reused), or at least have a more descriptive name.\r\nThis would improve readability (and if possible keep the code near of where it is used, just a personal preference)', 'comment_created': datetime.datetime(2023, 10, 1, 2, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1375179088, 'comment_body': 'Done \r\nI have made the changes as well ', 'comment_created': datetime.datetime(2023, 10, 28, 5, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}]","[{'commit_sha': '171ad52506e0531761563a3555539a8194c6ec61', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a62832684e8af64360d823f596490c8302bbb4a', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1577426074,Bump: pysimplesoap git link -> 1.8.22,"## Summary
This PR aims to upgrade pysimplesoap to a specific version for python3

## Checklist

- [x] Classes, Variables, function and methods logic  ok
- [x] Comments written explaining what the code does
- [x] All python code is PEP8 compliant (run black .)

## Manual test evidence

(attach command-line examples, execution output & logs, etc.)
",True,144,https://api.github.com/repos/PyAr/pyafipws/pulls/144,https://github.com/PyAr/pyafipws/pull/144,closed,3,5,2,3,0,0,0,0,[],2023-10-28 05:33:54+00:00,2023-11-05 23:33:32+00:00,755978.0,"8 days, 17:59:38",[],"[{'commit_sha': 'ed284d304a6c1ec4637e00ae94bead34a53617e2', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8639edba0da0ff6990011264184e55e043bc97c', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f53dcbb5508a6cdd08d9bff7888f3b41f04819b', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1428967071,New sign tra,"## Summary
This pull request aims to split the sign tra function based on this [comment](https://github.com/PyAr/pyafipws/issues/110#issuecomment-1620976667) from @reingart.
Unit tests will also be added for all the functions to ensure they are properly tested and maintain the standards of the previous general function

## Checklist

- [x] Classes, Variables, function and methods logic ok
- [x] Comments written explaining what the code does",True,125,https://api.github.com/repos/PyAr/pyafipws/pulls/125,https://github.com/PyAr/pyafipws/pull/125,closed,198,135,2,8,5,9,0,0,[],2023-07-11 08:19:29+00:00,2023-08-25 00:45:47+00:00,3860778.0,"44 days, 16:26:18","[{'comment_id': 1263203018, 'comment_body': 'This condition should be removed (and unindent), it already is at top level `sign_tra()` function', 'comment_created': datetime.datetime(2023, 7, 14, 1, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1263205447, 'comment_body': 'This also could be needed in Python 3 if using outdated libraries.\r\nThe condition should be rewritten to check cryptography version < 39', 'comment_created': datetime.datetime(2023, 7, 14, 1, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1263207639, 'comment_body': 'Google docstrings style should be used (first line with a summary, then blank, description and args/returns). Please see:\r\n\r\nhttps://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings', 'comment_created': datetime.datetime(2023, 7, 14, 1, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1287805462, 'comment_body': 'Please change this version checking to use split, or it will fail if cryptography isues a release >=100', 'comment_created': datetime.datetime(2023, 8, 9, 0, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1287811319, 'comment_body': 'done\r\n', 'comment_created': datetime.datetime(2023, 8, 9, 0, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}, {'comment_id': 1292483196, 'comment_body': 'You could import subprocess and base64 always, please do not put conditions for tests in the main code ', 'comment_created': datetime.datetime(2023, 8, 12, 20, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1292484402, 'comment_body': 'If the last supported version for old logic was 39, this would be `<=` right?', 'comment_created': datetime.datetime(2023, 8, 12, 20, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1292501822, 'comment_body': 'Got it, I will remove that line. I added that line of code as the tests were failing due to subprocess and base64 not imported at run time due to the try and except statement', 'comment_created': datetime.datetime(2023, 8, 12, 21, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}, {'comment_id': 1292526041, 'comment_body': 'oh I modified the code and forgot to add the =\r\nIt has been modified now', 'comment_created': datetime.datetime(2023, 8, 12, 22, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}]","[{'commit_sha': '4f1d7c7a88b09996d43a69fd9fb306c861fc4713', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55918687bf7c2e68103b4e294a0b0c19c09f8051', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f61fd9ef7e54c61c28b2c6058693f0f29320b4e', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29122cf9abf3fe5e723afe24c893d18934e37e61', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9232e83f9801744b511e70592daf91a6fcbb85d0', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fafb3874b0b84a42cc986f0d71771d4c9c63105', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '961c4006789f0f79dd0e248138624d0b2d366b20', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e022f8a3dcba84c5addfffe1aca0591bfff03219', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1510988331,Unit tests for issue #90,"## Summary
This PR aims to close issue #90. The PR contains unit tests for the following files in formatos module
- [X] TXT files
- [x] DBF files
- [x] JSON files
- [x] CSV files
- [X] SQL files
- [x] XML files

## Checklist

- [x] Classes, Variables, function and methods logic  ok
- [x] Comments written explaining what the code does
- [x] All python code is PEP8 compliant (run black .)
- [x] No lint issues (run flake8)
- [x] Test coverage with pytest implemented

## Manual test evidence

(attach command-line examples, execution output & logs, etc.)
",False,137,https://api.github.com/repos/PyAr/pyafipws/pulls/137,https://github.com/PyAr/pyafipws/pull/137,open,673,15,17,8,0,0,0,0,[],2023-09-11 20:45:01+00:00,,0.0,,[],"[{'commit_sha': 'd51a01f2e7e4718bf39183405d2b904510e4ecde', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f996d3a41b275f70ad9f6561ec68ce0eec0dc27', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f2899aa30f9ee6f3d92bd3bf2f24ccf5434c6cc', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1942d4564912b796da8230bf257d2abc63d3634', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11698cc6ec43a38729ba48fabbd703ae259039a2', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c0092de07192e70d83dcd063b0830c32676f0ba', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c3aaa0c3046a5a2322a503a614e5af52fef5c1', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c23db26171305c86f0d47097d612c6d90c5438', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1401559947,Get all dependencies from the requirements.txt file,"## Summary

This pull request solves this [Issue](https://github.com/PyAr/pyafipws/issues/105). The setup.py file has some other dependencies which setup.py has to be aware of so as to build the project. This PR solves that issue

## Checklist

- [X] Classes, Variables, function and methods logic  ok
- [X] Comments written explaining what the code does
- [X] All python code is PEP8 compliant (run black .)",True,119,https://api.github.com/repos/PyAr/pyafipws/pulls/119,https://github.com/PyAr/pyafipws/pull/119,closed,24,3,2,16,3,4,0,0,[],2023-06-21 12:02:28+00:00,2023-10-06 17:46:33+00:00,9265445.0,"107 days, 5:44:05","[{'comment_id': 1323817551, 'comment_body': 'py2exe should be a development dependency, not really needed for installation and normal operation', 'comment_created': datetime.datetime(2023, 9, 13, 1, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1323818355, 'comment_body': ""pywin32 should be an optional dependency, it is required to use this library from 3rd party languages (python apps don't need it)"", 'comment_created': datetime.datetime(2023, 9, 13, 1, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1326721063, 'comment_body': 'Here it is missing the python 3 conditional, right?\r\n```suggestion\r\n        ""pysimplesoap @ git+https://github.com/pysimplesoap/pysimplesoap.git@py311#pysimplesoap; python_version > \'3\'"",\r\n```', 'comment_created': datetime.datetime(2023, 9, 15, 2, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1339545295, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 9, 28, 5, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}]","[{'commit_sha': '6bb7fe8380f5a12d9abd5c00b0b569dfc20334b1', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a44d25869eaae898c5ae1d2a205497631c079b27', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a882d5b7425dd751fb132bcd15076d6ac28371a5', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c1fd27cb39819961695167f3489c0781eb356f', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f1b31d1eb97c0ca9d272ddd9f98f5cdf5029537', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '318cbbd920ee784c5992c2bc82162b566978d1e0', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d9b9a944d7913182d478ed8292dc15886eda5ab', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8a05a1537b0e6b9ec6934f4bc8a64040dddf54c', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced4d9a8c6cfd1937a52afd7cd3d7dd350365c71', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eea2b85de56c4b405cdb1cc08eac95787a7968f9', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9889658ac1653b119ddb52d7f564f2c2046210', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4f7999e064bc81cce2a755a6e1c22425ed8bb6', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66dd1d5fc798ae0210fe6c4cc0edd7090c30e564', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49dd24652b1534631043ab73c979f61f9fe21980', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec9862edbf6dadf826bede94eb893b1f0c6f5e0', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017345a86e5301237cfb5b76c897d538de5a2428', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14
1401559947,Get all dependencies from the requirements.txt file,"## Summary

This pull request solves this [Issue](https://github.com/PyAr/pyafipws/issues/105). The setup.py file has some other dependencies which setup.py has to be aware of so as to build the project. This PR solves that issue

## Checklist

- [X] Classes, Variables, function and methods logic  ok
- [X] Comments written explaining what the code does
- [X] All python code is PEP8 compliant (run black .)",True,119,https://api.github.com/repos/PyAr/pyafipws/pulls/119,https://github.com/PyAr/pyafipws/pull/119,closed,24,3,2,16,3,4,0,0,[],2023-06-21 12:02:28+00:00,2023-10-06 17:46:33+00:00,9265445.0,"107 days, 5:44:05","[{'comment_id': 1323817551, 'comment_body': 'py2exe should be a development dependency, not really needed for installation and normal operation', 'comment_created': datetime.datetime(2023, 9, 13, 1, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1323818355, 'comment_body': ""pywin32 should be an optional dependency, it is required to use this library from 3rd party languages (python apps don't need it)"", 'comment_created': datetime.datetime(2023, 9, 13, 1, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1326721063, 'comment_body': 'Here it is missing the python 3 conditional, right?\r\n```suggestion\r\n        ""pysimplesoap @ git+https://github.com/pysimplesoap/pysimplesoap.git@py311#pysimplesoap; python_version > \'3\'"",\r\n```', 'comment_created': datetime.datetime(2023, 9, 15, 2, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'reingart', 'type': 'User'}, {'comment_id': 1339545295, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 9, 28, 5, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'HanslettTheDev', 'type': 'User'}]","[{'commit_sha': '6bb7fe8380f5a12d9abd5c00b0b569dfc20334b1', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a44d25869eaae898c5ae1d2a205497631c079b27', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a882d5b7425dd751fb132bcd15076d6ac28371a5', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c1fd27cb39819961695167f3489c0781eb356f', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f1b31d1eb97c0ca9d272ddd9f98f5cdf5029537', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '318cbbd920ee784c5992c2bc82162b566978d1e0', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d9b9a944d7913182d478ed8292dc15886eda5ab', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8a05a1537b0e6b9ec6934f4bc8a64040dddf54c', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced4d9a8c6cfd1937a52afd7cd3d7dd350365c71', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eea2b85de56c4b405cdb1cc08eac95787a7968f9', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9889658ac1653b119ddb52d7f564f2c2046210', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4f7999e064bc81cce2a755a6e1c22425ed8bb6', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66dd1d5fc798ae0210fe6c4cc0edd7090c30e564', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49dd24652b1534631043ab73c979f61f9fe21980', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec9862edbf6dadf826bede94eb893b1f0c6f5e0', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017345a86e5301237cfb5b76c897d538de5a2428', 'committer_username': 'HanslettTheDev', 'committer_name': 'Hanslett', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 20, 10, 44, 52, tzinfo=datetime.timezone.utc)}]",Hanslett,64011386,,User,,32,,15,14

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
169192517,pyafipws,PyAr/pyafipws,Python,14,2,7,23,2982,38,18,19,"[{'id': 1910649686, 'number': 154, 'closed': datetime.datetime(2024, 6, 9, 9, 11, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 9, 9, 8, 26, tzinfo=datetime.timezone.utc), 'time_taken': 171.0, 'time_delta': '0:02:51', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1577426074, 'number': 144, 'closed': datetime.datetime(2023, 11, 5, 23, 33, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 28, 5, 33, 54, tzinfo=datetime.timezone.utc), 'time_taken': 755978.0, 'time_delta': '8 days, 17:59:38', 'additions': 3, 'deletions': 5, 'state': 'closed'}, {'id': 1543089074, 'number': 143, 'closed': datetime.datetime(2023, 10, 6, 20, 30, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 5, 7, 51, 32, tzinfo=datetime.timezone.utc), 'time_taken': 131960.0, 'time_delta': '1 day, 12:39:20', 'additions': 4, 'deletions': 17, 'state': 'closed'}, {'id': 1543043828, 'number': 142, 'closed': None, 'created': datetime.datetime(2023, 10, 5, 7, 27, 45, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 1, 'state': 'open'}, {'id': 1539990556, 'number': 141, 'closed': datetime.datetime(2023, 10, 6, 20, 31, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 3, 13, 16, 1, tzinfo=datetime.timezone.utc), 'time_taken': 285356.0, 'time_delta': '3 days, 7:15:56', 'additions': 30, 'deletions': 4, 'state': 'closed'}, {'id': 1523781666, 'number': 140, 'closed': datetime.datetime(2023, 10, 1, 2, 24, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 20, 21, 31, 55, tzinfo=datetime.timezone.utc), 'time_taken': 881544.0, 'time_delta': '10 days, 4:52:24', 'additions': 45, 'deletions': 0, 'state': 'closed'}, {'id': 1511098684, 'number': 138, 'closed': datetime.datetime(2023, 11, 5, 23, 37, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 11, 22, 21, 35, tzinfo=datetime.timezone.utc), 'time_taken': 4756526.0, 'time_delta': '55 days, 1:15:26', 'additions': 55, 'deletions': 1, 'state': 'closed'}, {'id': 1510988331, 'number': 137, 'closed': None, 'created': datetime.datetime(2023, 9, 11, 20, 45, 1, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 673, 'deletions': 15, 'state': 'open'}, {'id': 1492395673, 'number': 136, 'closed': datetime.datetime(2023, 8, 29, 0, 19, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 16, 50, 44, tzinfo=datetime.timezone.utc), 'time_taken': 26910.0, 'time_delta': '7:28:30', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 1486564265, 'number': 135, 'closed': None, 'created': datetime.datetime(2023, 8, 23, 14, 43, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 5, 'deletions': 2, 'state': 'open'}, {'id': 1486225623, 'number': 134, 'closed': datetime.datetime(2023, 8, 23, 14, 30, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 11, 5, 22, tzinfo=datetime.timezone.utc), 'time_taken': 12302.0, 'time_delta': '3:25:02', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 1473310930, 'number': 131, 'closed': datetime.datetime(2023, 8, 27, 16, 28, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 13, 9, 49, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1233527.0, 'time_delta': '14 days, 6:38:47', 'additions': 28, 'deletions': 3, 'state': 'closed'}, {'id': 1473309653, 'number': 130, 'closed': datetime.datetime(2023, 8, 13, 18, 26, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 13, 9, 45, 28, tzinfo=datetime.timezone.utc), 'time_taken': 31288.0, 'time_delta': '8:41:28', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1468115912, 'number': 129, 'closed': datetime.datetime(2023, 8, 13, 9, 38, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 9, 7, 43, 17, tzinfo=datetime.timezone.utc), 'time_taken': 352484.0, 'time_delta': '4 days, 1:54:44', 'additions': 16, 'deletions': 2, 'state': 'closed'}, {'id': 1437706024, 'number': 127, 'closed': datetime.datetime(2023, 7, 23, 20, 0, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 17, 17, 5, 11, tzinfo=datetime.timezone.utc), 'time_taken': 528905.0, 'time_delta': '6 days, 2:55:05', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1435615889, 'number': 126, 'closed': datetime.datetime(2023, 8, 23, 1, 37, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 1, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3370605.0, 'time_delta': '39 days, 0:16:45', 'additions': 28, 'deletions': 2, 'state': 'closed'}, {'id': 1428967071, 'number': 125, 'closed': datetime.datetime(2023, 8, 25, 0, 45, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 11, 8, 19, 29, tzinfo=datetime.timezone.utc), 'time_taken': 3860778.0, 'time_delta': '44 days, 16:26:18', 'additions': 198, 'deletions': 135, 'state': 'closed'}, {'id': 1418776638, 'number': 124, 'closed': datetime.datetime(2023, 7, 5, 2, 58, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 3, 23, 33, 1, tzinfo=datetime.timezone.utc), 'time_taken': 98721.0, 'time_delta': '1 day, 3:25:21', 'additions': 42, 'deletions': 13, 'state': 'closed'}, {'id': 1418028510, 'number': 123, 'closed': datetime.datetime(2023, 7, 3, 23, 32, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 3, 12, 27, 53, tzinfo=datetime.timezone.utc), 'time_taken': 39873.0, 'time_delta': '11:04:33', 'additions': 48, 'deletions': 34, 'state': 'closed'}, {'id': 1418010412, 'number': 122, 'closed': datetime.datetime(2023, 7, 3, 12, 19, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 3, 12, 16, 53, tzinfo=datetime.timezone.utc), 'time_taken': 166.0, 'time_delta': '0:02:46', 'additions': 48, 'deletions': 34, 'state': 'closed'}, {'id': 1411575732, 'number': 120, 'closed': datetime.datetime(2023, 6, 29, 8, 38, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 12, 38, 54, tzinfo=datetime.timezone.utc), 'time_taken': 71966.0, 'time_delta': '19:59:26', 'additions': 15, 'deletions': 3, 'state': 'closed'}, {'id': 1401559947, 'number': 119, 'closed': datetime.datetime(2023, 10, 6, 17, 46, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 21, 12, 2, 28, tzinfo=datetime.timezone.utc), 'time_taken': 9265445.0, 'time_delta': '107 days, 5:44:05', 'additions': 24, 'deletions': 3, 'state': 'closed'}, {'id': 1401515194, 'number': 118, 'closed': datetime.datetime(2023, 7, 3, 23, 11, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 21, 11, 39, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1078335.0, 'time_delta': '12 days, 11:32:15', 'additions': 48, 'deletions': 34, 'state': 'closed'}, {'id': 1396735954, 'number': 117, 'closed': datetime.datetime(2023, 7, 3, 12, 21, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 17, 11, 15, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1386372.0, 'time_delta': '16 days, 1:06:12', 'additions': 860, 'deletions': 29, 'state': 'closed'}, {'id': 1394900050, 'number': 116, 'closed': datetime.datetime(2023, 6, 17, 10, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 0, 13, 43, tzinfo=datetime.timezone.utc), 'time_taken': 122657.0, 'time_delta': '1 day, 10:04:17', 'additions': 860, 'deletions': 29, 'state': 'closed'}, {'id': 1394894448, 'number': 115, 'closed': datetime.datetime(2023, 6, 16, 0, 12, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 0, 7, 16, tzinfo=datetime.timezone.utc), 'time_taken': 306.0, 'time_delta': '0:05:06', 'additions': 860, 'deletions': 29, 'state': 'closed'}, {'id': 1345657189, 'number': 114, 'closed': datetime.datetime(2023, 6, 15, 23, 24, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 10, 15, 29, 25, tzinfo=datetime.timezone.utc), 'time_taken': 3138889.0, 'time_delta': '36 days, 7:54:49', 'additions': 876, 'deletions': 29, 'state': 'closed'}, {'id': 1291422203, 'number': 112, 'closed': datetime.datetime(2023, 6, 15, 23, 25, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 27, 14, 6, 20, tzinfo=datetime.timezone.utc), 'time_taken': 6945525.0, 'time_delta': '80 days, 9:18:45', 'additions': 30, 'deletions': 1, 'state': 'closed'}]"
