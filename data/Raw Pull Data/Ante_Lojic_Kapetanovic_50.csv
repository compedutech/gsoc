pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
717319181,GSoC 2021: Support of the simulation-based inference with the model fitting toolbox,"This pull request summarizes all the work done during the Google Summer of Code (GSoC) 2021 with International Neuroinformatics Coordinating Facility (INCF) for the project:

# Support of the simulation-based inference with the model fitting toolbox

## Synopsis
Unlike traditional inverse identification tools that rely on gradient and gradient-free methods, simulation-based inference has been established as the powerful alternative approach that yields twofold improvement over such methods. Firstly, it does not only result in a single set of optimal parameters, rather simulation-based inference acts as if the actual statistical inference is performed and provides an estimate of the full posterior distribution over parameters. Secondly, it exploits prior system knowledge sparsely, using only the most important features to identify mechanistic models which are consistent with the measured data. The aim of the project is to support the simulation-based inference in the [`brian2modelfitting`](https://github.com/brian-team/brian2modelfitting) toolbox by linking it to the [`sbi`](https://github.com/mackelab/sbi) [1], PyTorch-based library for simulation-based inference, development of which is coordinated at [the Macke lab](https://www.mackelab.org/).

## Main results
The entire work done during the GSoC is presented in great detail on the blog on my personal webpage, which is available [here](http://adria.fesb.hr/~alojic00/blog/GSoC%20blog.html). This blog post covers everything: from the work done during the [community bonding period](http://adria.fesb.hr/~alojic00/blog/GSoC%20blog.html#3.-First-steps), over [weekly reports](http://adria.fesb.hr/~alojic00/blog/GSoC%20blog.html#4.-Weekly-reports) that outline the work done weekly in great detail, to [my own experience](http://adria.fesb.hr/~alojic00/blog/GSoC%20blog.html#5.-Conclusion) during the entire period of the project.

Summary of the main results (under each major contribution, there is a short code snippet that describes it):
- development of the `Inferencer` class that offers an API very similar to that of the `Fitter` class, but instead of fitting, a neural density estimator is trained under the hood. - PR [#49](https://github.com/brian-team/brian2modelfitting/pull/49)
  This density estimator learns probabilistic mapping between the sampled prior over unknown parameters, and the output data.
  Output data may be either a list of summary features or the time-series of the dynamics of observed state variable(s) in the model. In the case of the latter, the automatic feature extraction is performed where either default or custom embedding network is employed to extract meaningful features from the data traces, thus lowering the overall dimensionality of the output data.
  
  The `Inferencer` class supports all currently available estimation methods in `sbi`:
  - sequential neural posterior estimation (SNPE) [2];
  - sequential neural likelihood estimation (SNLE) [3];
  - sequential neural ratio estimation (SNRE) [4].
  
  So, the only thing that the user has to do is to instantiate the `Inferencer` class with required arguments such as the input and output data, and a few optional ones:
  ```python
  inferencer = Inferencer(dt=dt, model=eqs,
                          input={'I': inp_traces*amp},
                          output={'v': out_traces*mV},
                          features={'v': v_features},
                          method='exponential_euler',
                          threshold='m > 0.5',
                          refractory='m > 0.5',
                          param_init=init_conds)
  ```
  The inference process starts when `infer` method is called:
  ```python
  posterior = inferencer.infer(n_samples=15_000,
                               n_rounds=1,
                               inference_method='SNPE',
                               density_estimator_model='maf',
                               g_Na=[1*uS, 100*uS],
                               g_K=[0.1*uS, 10*uS])
  ```
  Overall idea is to distance the user from the `sbi` package (and the use of the PyTorch library), and achieve an API very similar to the one to which the `brian2modelfitting` users are already accustomed through the `Fitter` class.
- Loading/storing of the training data and the estimated posterior. - PR [#52](https://github.com/brian-team/brian2modelfitting/pull/52)
  ```python
  inferencer.save_summary_statistics('path_to_file.npz')
  ```
  and
  ```python
  theta, x = inferencer.load_summary_statistics('path_to_file.npz')
  ```
- Support for visual analysis of the estimated posterior over free parameters. - PR [#58](https://github.com/brian-team/brian2modelfitting/pull/58)
  ```python
  # pairwise relationship between parameters
  limits = {'g_Na': [1*uS, 100*uS],
            'g_K': [0.1*uS, 10*uS]}
  labels = {'g_Na': r'$\overline{g}_{Na}$',
            'g_K': r'$\overline{g}_{K}$'}
  fig, ax = inferencer.pairplot(limits=limits,
                                labels=labels,
                                ticks=limits,
                                points=ground_truth_params,
                                points_offdiag={'markersize': 5},
                                points_colors=['C3'],
                                figsize=(6, 6));
  
  # traces/spikes visualization
  inf_traces = inferencer.generate_traces()
  fig, ax = plot_traces(t, inp_traces, out_traces, inf_traces=array(inf_traces/mV))
  ```
- Multi-objective optimization support. - PR [#59](https://github.com/brian-team/brian2modelfitting/pull/59)
  ```python
  inferencer = Inferencer(dt=dt, model=eqs,
                          input={'I': inp_traces*amp},
                          output={'v': out_traces*mV, 'm': Na_activation_dynamics},  # 2 state variables are considered...
                          features={'v': v_features, 'm': m_features},  # ... which means that 2 list of summary features should also be considered
                          method='exponential_euler',
                          threshold='m > 0.5',
                          refractory='m > 0.5',
                          param_init=init_conds)
  ```
- Inference by observing spikes either instead or together with the dynamics of different state variables in the model. - PR [#60](https://github.com/brian-team/brian2modelfitting/pull/60)
  ```python
  inferencer = Inferencer(dt=dt, model=eqs,
                          input={'I': inp_traces*amp},
                          output={'v': out_traces*mV, 'spikes': spike_times_list},
                          features={'v': v_features, 'spikes': s_features},
                          method='exponential_euler',
                          threshold='m > 0.5',
                          refractory='m > 0.5',
                          param_init=init_conds)
  ```
- GPU support for the inference process. - PR [#61](https://github.com/brian-team/brian2modelfitting/pull/61)
  ```python
  posterior = inferencer.infer(..., sbi_device='gpu', ...)
  ```
  This feature should be used carefully as discussed in the PR and relevant issues mentioned in the PR.
- Updated documentation with examples and the comprehensive tutorial, currently available [here](https://brian2modelfitting.readthedocs.io/en/sbi_support/).
- Added examples:
  - `IF_sbi.py ` - inference of two unknown parameters of an integrate-and-fire neuron model by observing only spike trains
  - `hh_sbi_simple_interface.py` - inference on real data traces by using a Hodgkin-Huxley model with three unknown parameters with simple interface by using `infer` method in the `Inferencer` class
  - `hh_sbi_flexible_interface.py` - multi-round inference on real data traces by using the Hodgkin-Huxley model with three unknown parameters with flexible interface by using `infer_step` method in the `Inferencer` class manually
  - `hh_sbi_synthetic_traces.py` - automatic feature extraction and inference on synthetic data traces by using the Hodgkin-Huxley model
- Updated tests.

## What's left to do
Even though all the features defined at the very beginning of the project, both through the project proposal, available [here](https://docs.google.com/document/d/1s1GsL4FtKL3iN_kFuQRj81vekGtTUvpVlxwkZIcd4Z8/edit#), and internally between Marcel and me, are done, the test suite for the `Inferencer` class is far from comprehensive and updates and refinement are needed.

## Additional work
Additional development, testing and various examples that are not officially included in the PR are located in the *gsoc_dump_repo* on my personal GitHub account, available [here](https://github.com/antelk/gsoc_dump_repo).

## Progress tracker
During the project (period of 10 weeks), the entire work is accompanied by weekly reports that outline in detail what has been done during the current week, what is planned for the next week and whether there are any obstacles. The reports are available [here](http://adria.fesb.hr/~alojic00/blog/GSoC%20blog.html#4.-Weekly-reports).

For a more concise review, it is sufficient to refer to *Projects* -> *`sbi` integration (GSoC 2021)* in the `brian2modelfitting` GitHub repository, available [here](https://github.com/brian-team/brian2modelfitting/projects/1). Under *Done* section, there are listed all issues and pull requests that resolve those issues, described earlier in the section *Main results*. This PR will be listed under the *In progress* section :slightly_smiling_face: 

## Thanks
Many thanks to @mstimberg for his immense patience and time for my (often silly) questions :bowing_man:

## References
[1] Alvaro Tejero-Cantero, Jan Boelts, Michael Deistler, Jan-Matthis Lueckmann, Conor Durkan, Pedro J Goncalves, David S Greenberg, Jakob H Macke. sbi: A toolkit for simulation-based inference, 2020, Journal of Open Source Software 5:2505, doi:[10.21105/joss.02505](https://doi.org/10.21105/joss.02505).

[2] David S. Greenberg, Marcel Nonnenmacher, Jakob H. Macke. Automatic posterior transformation for likelihood-free inference, 2019, 36th International Conference on Machine Learning, PMLR 97:2404-2414.

[3] George Papamakarios, David C. Sterratt, Iain Murray. Sequential neural likelihood: Fast likelihood-free inference with autoregressive flows, 2019, 22nd International Conference on Artificial Intelligence and Statistics, PMLR 89:837-848. 

[4] Conor Durkan, Iain Murray, George Papamakarios. On contrastive learning for likelihood-free inference, 2020, 37th International Conference on Machine Learning, PMLR 119:2771-2781.

<img src=""https://user-images.githubusercontent.com/17547288/63650185-2d1da100-c748-11e9-9cd8-87caa3ee4716.png"" alt=""gsoc-incf-logo"">",True,64,https://api.github.com/repos/brian-team/brian2modelfitting/pulls/64,https://github.com/brian-team/brian2modelfitting/pull/64,closed,4248,230,40,128,2,0,0,0,[],2021-08-22 14:27:11+00:00,2021-12-21 16:51:30+00:00,10463059.0,"121 days, 2:24:19",[],"[{'commit_sha': 'bb63b997372f5ba0fe93e871cb669e31f5c2eb72', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '76ea512e296bcf886f6349eafaf5b937bca6917d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b05f789f6e3460ada465192cb135d4108e55299b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bf739ae64b9a1c32301a95f3a213f2c5b25942f9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ad3e8caf0fc9fbbf99c2a98a3b4efb24657c0235', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0e9de9e744be7fbdbdb8cdb6b8f685f76ca1e9fa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8f91fd251765c56964dd1853692070bab3e56b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b7afcddee5efc39a3f2c271194989d2ea142178e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fc9a87ff3f1456e3d0f0d98f51209aaf55f1d937', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c72c0d2995f464c27de293f7fa182a69e7f7275e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2346e0124ebe65eb6df37f3856e5f973c675a041', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5d0917d1b7db664f45117b55994160e099c184d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b57b0e235f069a747efd7ac33e9eff2a261f9942', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6550855e06b5776776c466432dd5faa7655a8559', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '620aa2a2390b45f9784488ad458376c2a5f4d5de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '948088f27b8e784aa8607412fcb5ec430f1525e1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8580e42d257747d5d765d13e567cec8cd7c6a252', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd7195439df91bfa3e20419b3c6ac2e9253ff388f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eb1e5124e73b23a057b661ed41e152eb01f95c25', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba37935801e895409d51b134ab9ed241026092a6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '32085fe112d018167aff487c3cc88e5d57abc3d1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5763c475e959cb17b7903e7ebf113ddb840af645', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '49f673e67341e0f7e092b9febcc21ca85af883a2', 'committer_username': 'mstimberg', 'committer_name': 'Marcel Stimberg', 'committer_email': 'marcel.stimberg@sorbonne-universite.fr', 'commit_date': datetime.datetime(2012, 1, 26, 13, 18, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d79aaf602c22d6db8ce8619f87058fcb1a97734', 'committer_username': 'mstimberg', 'committer_name': 'Marcel Stimberg', 'committer_email': 'marcel.stimberg@sorbonne-universite.fr', 'commit_date': datetime.datetime(2012, 1, 26, 13, 18, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb7348accbb82359cb3db98678b061c18d6acb7', 'committer_username': 'mstimberg', 'committer_name': 'Marcel Stimberg', 'committer_email': 'marcel.stimberg@sorbonne-universite.fr', 'commit_date': datetime.datetime(2012, 1, 26, 13, 18, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd21ce5eac20ebd0ac88ac33aea1f50de69bf2b79', 'committer_username': 'mstimberg', 'committer_name': 'Marcel Stimberg', 'committer_email': 'marcel.stimberg@sorbonne-universite.fr', 'commit_date': datetime.datetime(2012, 1, 26, 13, 18, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6916c4ab0885b2396885d4c15f363e31df85ce5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae627e11e0adba0d08d6c4262cae4f86e8040447', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f843194cbec57d176a96e59ce51c8cd13c7f2c47', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f6913c45ef0aee6a2a6f4654cfa15a0d88cd822e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6fa9eeddb39d89a25572492f4ccb5413e96583cb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '97f5307593c0782648b61b13648a5b00e8569c07', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b6a394d820c320bc89d7567c05d15fe81502247e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c250909073856849d90a2fcbdfe971746483ec74', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '88a1a39164d25c63a0668956ad41d35dd952c5a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a1eb97adc1888e3fbc7592b7ae32d4a8b4eb2beb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7ea20988a514cdb9ec68409fd5040900a52dd5af', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '19a3cba9e88de235753d3592b60192cb14d85fbb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'be02ef3bfab8b4cf4996c4fd68e17885f448df86', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '728ad0e9581d854fac4146727611325c80ce588a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '88fc065ced5272cde613c6b062d36db0e8518beb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7461b39798e61d9dd08b7c1a0898962823603a6b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9545887a882183e3283260a3ee0c51748a0a7b95', 'committer_username': 'mstimberg', 'committer_name': 'Marcel Stimberg', 'committer_email': 'marcel.stimberg@sorbonne-universite.fr', 'commit_date': datetime.datetime(2012, 1, 26, 13, 18, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be3209ef9b87387befde74a99eab9d23e3801c90', 'committer_username': 'mstimberg', 'committer_name': 'Marcel Stimberg', 'committer_email': 'marcel.stimberg@sorbonne-universite.fr', 'commit_date': datetime.datetime(2012, 1, 26, 13, 18, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c85ce9786400f92070aec6ad29f88164a20379d6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6ab9a4bcd558891bd19316494c0725f47b0adaa3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd278dc3047c69cd02850fa4f045539fbbc576de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c5eb245ff7c8e7c862b69f9009376f7c5cdf4099', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '70279b606afc6a1e0aaf19b1031ac95d24819378', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0d89a8e3f6cb530c346a4c25c5f8323c15d93d4b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4fb82bec15469f2b6221a477c7c28a63a957573e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3031d73cf9f5d080e2b898e581fca6adc2804ec8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '03140698729567d5acb14bd2a611502ae47a1f7b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e09f17535f7357651519496b79509783712966d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '276200178918732c76937afce0406279f6cb7a6d', 'committer_username': 'akapet00', 'committer_name': 'Ante Kapetanovic', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 8, 22, 2, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '516714396a245c0e02b086a9262554d8d1ec0d0b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '487612e6e8c413f34a22f81d86e295a04ed66c21', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '040407609cd408e03cac261b139eac5f06430522', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6de7ada2ab55d3865271a4ab57c9429e01c83cea', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a4be2b1d72f0b6125993b1b2b43bdab9c82206a0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '291edbdbe5c8aca1d8d9eb1091d76347a1d55441', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a00c63f5b9d27c7d65443b952c76bb4f98a6c13c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7cd1c0a9c8b94752886a32bb6a00edac43b8ab09', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a9d7047190c636b25f22ca5e73f4f7fceacbafee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c3e6c6fac2a012faf38e40066ea6bf001ac65a8a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9f9e29b971078e102abf8da1f66ffae0f549cb33', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a9da86c1e67d9c3c8c4a284589342d3d69071711', 'committer_username': 'mstimberg', 'committer_name': 'Marcel Stimberg', 'committer_email': 'marcel.stimberg@sorbonne-universite.fr', 'commit_date': datetime.datetime(2012, 1, 26, 13, 18, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b6a82a55f6608c84929e94befb9b5d97892bc63', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0465a21b87991b28a619b3cb8d285633efdade6f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '92c6703809741d0e8a3015dc0785024410a1609e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4e8533abc9393cc7ea65d5a62a7962d43193e8f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '385bf88be8294ff66f81c578cae0eb5c84179ccc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba913830150c7da3994c3d9b999d5a9db79467dd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '41b33760f38232074107101a4d9a7c189a5a5b58', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2bf189c566b3242cc0334bb34f56ae5da048caf4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b6432268e204e532c351af78f205930550f488a6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '27370ac953d8bb05ba729c5e450e2fb59c1022de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee73d296f0948e10c9291df5d1f5533044f01a7d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c10397ccde7c18720a4142bec147e184ae1fb635', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '15de949faabae46e8e2e5e500af814d8820a9e68', 'committer_username': 'akapet00', 'committer_name': 'Ante Kapetanovic', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 8, 22, 2, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fe11f717507ad8ebfb8ef2652bf2c83e19a610e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f1215460cad64ea36ef985dd69cbf7abdb8a53ac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5f0651b5de78b65f3f101498a79c7fa8ba78d020', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '90bfad952bac08d7ef0d3b3fafbe163e77dd498a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8510f1d957c3482f6ac754debfc3af70f0d1bf5e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f6ae7aa73dfe210316c472cec901ac3474556f7b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bfb00946200fa48c13b5eaf9a79593468262934b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7d9278eee612981502877fe220e4a13f675736da', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ef99912a853123330b57e8e17aff32cc55c47fe3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b3274fc347a99727af6f7246741001e05398059b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '50f7192fa5960a459e9a5653f591298a30c46016', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f086c7045393e0a639d349ad8cbabfe95954c674', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '01ce180c16f3ca9900b6e6f5fa479053969d4db6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0e936cb17334480d445fe1a6e38f3bda829c1ad8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '50c61971b1ef85f2b3624750a22ccbb08b663666', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bfb13059e88cbb9225902ee2d124e190ad0e0063', 'committer_username': 'akapet00', 'committer_name': 'Ante Kapetanovic', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 8, 22, 2, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cb7886d68a559b3dc8501e52c16998703fa91b3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9c538881667a0b1fbab5a86b80289455c88fe9e2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '598d9a9fc29342ecae1a896ca5f0b2dde1bd7974', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '98666a63386ccbecf1e42f30e79f3bb16aa349de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '590ccb13ab6d369697d266b7a986f258f3bdbb54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a7d168fd36ead46b6f8e5ec21a620f6d3fa72bb0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4eb23f09e4721ce9381a1914c0df068d06e6391e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fafcced33ae18634f212ac14839b8fad9e14ec3c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '55eb009c8e9f45b871212f0919b3234f5eb63503', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '58c9b7273b120ef382278494bba1c870a722dcaf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5aff366f50d798f90af2c166ad15ff8e57c5ffef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ccd8ce69557ad13929d8288c44dc2d3155e4843b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '97163b6d4c8ef59db76f9ebc39006189243e9355', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '160de3ca841bf365fd4c9a9e772b8a0c3d659d79', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a82670b3aa4df3944b2168ad6e6c44e46bf1b845', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f60c27871d9259eb6ef0ca6e6b73292d32a4127c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a4560973b56c0bf899a6e02c724e4e7849ccad95', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b562c8045c0d50bdf366c06870b5bd8aa2d44cc1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7c731069faf3b627b9af5d0ac377161dc9ffa9fb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '15ac38da7401d55edd838d698620ee0785f0d67f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f4857b5583b045b64bff944ba773531b08a42bbc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c79128d6b568fda3f2a34d8f050ba6935ffae7b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b30cb555221dcdb40922467cad82d168514ac196', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fa402990fd7077bfa5a914f2c97dbf5f8281c38a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '570d570a44b49e1ca3da14fd3c6e40b6a798d3b6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1a7e93f6e4c89cb58fc4cdc6247cf2a86f008222', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd57b1c53f13c2ee790edc4b9a930d4e2c0ca5560', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2df6dc299784c972f4a21ff385a16623c78c26a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2bf03d2bb37ac928779641e70e6cbd576ccd1c2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c8776f625bdb057536ccaf7ab7bc023b08550d6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fbf4d2ff3840f3b5d89e7442b4a7c213455ad5c3', 'committer_username': 'akapet00', 'committer_name': 'Ante Kapetanovic', 'committer_email': None, 'commit_date': datetime.datetime(2017, 9, 8, 22, 2, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc3c6b17862c102fea8dbec144e0ef8b0b6b16b9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Ante Kapetanovic,31781651,,User,,26,,6,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
16704593,brian2modelfitting,brian-team/brian2modelfitting,Python,6,14,8,7,539,12,8,3,"[{'id': 717319181, 'number': 64, 'closed': datetime.datetime(2021, 12, 21, 16, 51, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 14, 27, 11, tzinfo=datetime.timezone.utc), 'time_taken': 10463059.0, 'time_delta': '121 days, 2:24:19', 'additions': 4248, 'deletions': 230, 'state': 'closed'}, {'id': 717305756, 'number': 63, 'closed': datetime.datetime(2021, 8, 22, 12, 56, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 12, 55, 51, tzinfo=datetime.timezone.utc), 'time_taken': 10.0, 'time_delta': '0:00:10', 'additions': 358, 'deletions': 2, 'state': 'closed'}, {'id': 712911652, 'number': 61, 'closed': datetime.datetime(2021, 8, 15, 10, 54, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 10, 23, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1848.0, 'time_delta': '0:30:48', 'additions': 72, 'deletions': 27, 'state': 'closed'}, {'id': 711008183, 'number': 60, 'closed': datetime.datetime(2021, 8, 13, 9, 24, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 14, 18, 30, tzinfo=datetime.timezone.utc), 'time_taken': 68771.0, 'time_delta': '19:06:11', 'additions': 324, 'deletions': 129, 'state': 'closed'}, {'id': 705891288, 'number': 59, 'closed': datetime.datetime(2021, 8, 7, 20, 45, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 13, 23, 26, tzinfo=datetime.timezone.utc), 'time_taken': 26545.0, 'time_delta': '7:22:25', 'additions': 203, 'deletions': 182, 'state': 'closed'}, {'id': 693545931, 'number': 58, 'closed': datetime.datetime(2021, 8, 5, 20, 39, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 15, 6, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1402384.0, 'time_delta': '16 days, 5:33:04', 'additions': 434, 'deletions': 124, 'state': 'closed'}, {'id': 679873599, 'number': 52, 'closed': datetime.datetime(2021, 7, 13, 14, 19, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 11, 45, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1218840.0, 'time_delta': '14 days, 2:34:00', 'additions': 565, 'deletions': 134, 'state': 'closed'}, {'id': 673862818, 'number': 49, 'closed': datetime.datetime(2021, 6, 25, 15, 44, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 11, 2, 22, tzinfo=datetime.timezone.utc), 'time_taken': 535313.0, 'time_delta': '6 days, 4:41:53', 'additions': 903, 'deletions': 29, 'state': 'closed'}, {'id': 610762158, 'number': 43, 'closed': None, 'created': datetime.datetime(2021, 4, 7, 15, 23, 37, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 166, 'deletions': 0, 'state': 'open'}]"
