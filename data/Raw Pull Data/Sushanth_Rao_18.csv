pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
602391296,[chunky_png] Added RBS files for Chunky PNG,"# Added RBS file for [Chunky PNG](https://github.com/wvanbergen/chunky_png) gem - v1.4.0

- Created gem directory & corresponding version directory
- Added RBS file in the correctly versioned directory
- Added inline documentation from the source code for each method in the RBS file
- Steepfile has been added in the `_test` directory
- 5 tests added in the `_test` directory
- `test` script added in `_scripts` directory
- `git submodule` pointing to the source code of the gem has been added

* Followed the syntax given in [RBS repo](https://github.com/ruby/rbs/blob/master/docs/syntax.md)
* Followed the guidelines given in [RBS Wiki](https://github.com/ruby/rbs/wiki/Writing-Signatures-Best-Practices)

Signed-off-by: Sushanth Sathesh Rao <rao.sush004@gmail.com>",True,22,https://api.github.com/repos/ruby/gem_rbs_collection/pulls/22,https://github.com/ruby/gem_rbs_collection/pull/22,closed,2255,1,13,6,0,4,0,1,[],2021-03-29 03:37:21+00:00,2021-06-28 02:51:15+00:00,7859634.0,"90 days, 23:13:54","[{'comment_id': 651561695, 'comment_body': '```suggestion\r\n    def each: () { (ChunkyPNG::Point point) -> void } -> void\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 8, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 651563980, 'comment_body': ""I usually use `untyped` for the argument of equality operator, but the specific one is correct in this case. The implementation doesn't check the class of `other` value."", 'comment_created': datetime.datetime(2021, 6, 15, 8, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 655559959, 'comment_body': 'Sir, I updated the return type of the block & changed the type of the parameter, hence resolving the conversation.', 'comment_created': datetime.datetime(2021, 6, 21, 17, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'raosush', 'type': 'User'}, {'comment_id': 655560639, 'comment_body': 'Sir, I update the type of the parameter from `instance` to `untyped`, hence resolving the conversation.', 'comment_created': datetime.datetime(2021, 6, 21, 17, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'raosush', 'type': 'User'}]","[{'commit_sha': '79c8f17604facf6a40dca1fbd4a1ce8529c8a63f', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39c915039c55162c9208429e153c589831d93cfb', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65f8f7af5142ddefb0cf176ce5c8968dea8bfa52', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c0257cf1214731eec336961451315dd8d686c5e', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22166b0bbfcda534dc028abe35e405673efb08ff', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b65fd5bc6c31707182a70d76dbd80fcb151ec7', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47
674742029,[net-http] Add RBS file for Net::HTTP,"# Description
- Added RBS file for Net::HTTP gem
- Added tests for Net::HTTP gem in test/stdlib/Net_test.rb
- Added a snippet in Rakefile to include URI module for validate task

Signed-off-by: Sushanth Sathesh Rao <rao.sush004@gmail.com>",True,686,https://api.github.com/repos/ruby/rbs/pulls/686,https://github.com/ruby/rbs/pull/686,closed,2362,0,3,24,2,28,0,1,[],2021-06-21 17:23:40+00:00,2021-07-04 16:55:29+00:00,1121509.0,"12 days, 23:31:49","[{'comment_id': 658479391, 'comment_body': 'Only one `#library` call is allowed, and it accepts multiple arguments! 💡 \r\n\r\n```suggestion\r\n  library ""net-http"", ""uri""\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 5, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659132272, 'comment_body': 'Thank you sir! 😃 ', 'comment_created': datetime.datetime(2021, 6, 26, 7, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'raosush', 'type': 'User'}, {'comment_id': 659413445, 'comment_body': 'Define the type with two overloads here.\r\n\r\n```rbs\r\n    def self.get_print: (URI::Generic uri, ?Hash[String, untyped] header) -> void\r\n                      | (String host, String path, ?Integer port) -> void\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 1, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659413579, 'comment_body': 'Same with `.get_print` (and there will be many like this.)', 'comment_created': datetime.datetime(2021, 6, 28, 1, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659413818, 'comment_body': 'You can use _optional block_ for methods like this.\r\n\r\n```\r\n  def self.get_response: (......) ?{ (Net::HTTPResponse) -> void } -> Net::HTTPResponse\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 1, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659413931, 'comment_body': '```suggestion\r\n    def self.post_form: (URI::Generic url, Hash[String, untyped] params) -> Net::HTTPResponse\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 1, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659413993, 'comment_body': '```suggestion\r\n    def self.post: (URI::Generic url, String data, ?Hash[String, untyped]? header) -> Net::HTTPResponse\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 1, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659414077, 'comment_body': '```suggestion\r\n    def self.http_default_port: () -> Integer\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 1, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659414219, 'comment_body': '```\r\n    def self.start: (String address, ?Integer? port, ?String | :ENV | nil p_addr, ?Integer? p_port, ?String? p_user, ?String? p_pass, ?Hash[Symbol, untyped] opt) -> Net::HTTP\r\n                  | [T] (String address, ?Integer? port, ?String | :ENV | nil p_addr, ?Integer? p_port, ?String? p_user, ?String? p_pass, ?Hash[Symbol, untyped] opt) { (Net::HTTP) -> T } -> T\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 1, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659414461, 'comment_body': '1. You can give it a better type like `.start`.\r\n2. Using `instance` is not trivial. We recommend using `Net::HTTP` here.\r\n', 'comment_created': datetime.datetime(2021, 6, 28, 1, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659414529, 'comment_body': 'We can remove the definition of `initialize`.', 'comment_created': datetime.datetime(2021, 6, 28, 1, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659414696, 'comment_body': 'We can define the attributes with `attr_accessor`.\r\n\r\n```\r\n  attr_accessor ipaddr: String?\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 1, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659415680, 'comment_body': 'RDoc is missing?\r\n\r\n```\r\n  def start: [T] () { (Net::HTTP) -> T } -> T\r\n           | () -> self\r\n```\r\n\r\nNote that this is a typical use case of using generic methods.\r\n\r\n* It accepts a block, and\r\n* The return value of the method is the value of the block', 'comment_created': datetime.datetime(2021, 6, 28, 1, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659416082, 'comment_body': '```suggestion\r\n    def get: (String path, ?Hash[String, untyped]? initheader, ?bot dest) ?{ (String body_segment) -> void } -> Net::HTTPResponse\r\n```\r\n\r\n1. `path` is a String\r\n2. We can assume that the key of`initheader` is `String`\r\n3. Use `bot` for _deprecated arguments_\r\n4. Use `void` instead of `untyped`\r\n5. Because the return type of block is not used in the return type of the method, we can use _optional block_ here', 'comment_created': datetime.datetime(2021, 6, 28, 1, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659417163, 'comment_body': 'The doc says `<<` is used for writing the result to `dest`. So, we can write it in the type by interface.\r\n\r\n```rbs\r\ninterface _Dest\r\n  def <<: (String) -> void\r\nend\r\n\r\n......\r\n\r\ndef read_body: () -> String\r\n             | (_Dest dest) -> String\r\n             | () { (String) -> void } -> String\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 2, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659884162, 'comment_body': 'Make the return type `untyped`.', 'comment_created': datetime.datetime(2021, 6, 28, 15, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659884699, 'comment_body': '```suggestion\r\n    attr_accessor proxy_address: String?\r\n```\r\n\r\nMake the proxy related attributes optional, and use `attr_accessor`.', 'comment_created': datetime.datetime(2021, 6, 28, 15, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659885245, 'comment_body': '```suggestion\r\n    attr_accessor local_host: String\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 15, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659885786, 'comment_body': 'I think the `host` and `address` attributes are `String`. Any reason?\r\n\r\n```suggestion\r\n    attr_reader address: String\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 15, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659886767, 'comment_body': '```suggestion\r\n    attr_reader self.proxy_address: String?\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 15, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659887023, 'comment_body': '```suggestion\r\n    attr_reader self.proxy_port: Integer?\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 15, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659887113, 'comment_body': '```suggestion\r\n    attr_reader self.proxy_user: String?\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 15, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 659887213, 'comment_body': '```suggestion\r\n    attr_reader self.proxy_pass: String?\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 15, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 660255076, 'comment_body': 'Merge to `attr_accessor proxy_address: String?`.', 'comment_created': datetime.datetime(2021, 6, 29, 3, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 660255402, 'comment_body': '```suggestion\r\n    def get: (String path, ?Hash[String, untyped] initheader, ?bot dest) ?{ (String body_segment) -> void } -> Net::HTTPResponse\r\n```\r\n\r\n1. Can `initheader` be `nil`?\r\n2. Make `dest` non optional.', 'comment_created': datetime.datetime(2021, 6, 29, 3, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 660255946, 'comment_body': 'I prefer using an abstract name, like `key`, but you can keep the name.', 'comment_created': datetime.datetime(2021, 6, 29, 3, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 660257009, 'comment_body': 'Rename the file to `Net_HTTP_test.rb` please.', 'comment_created': datetime.datetime(2021, 6, 29, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 660259026, 'comment_body': '```suggestion\r\n    def fetch: (string_or_symbol key) -> String\r\n             | (string_or_symbol key, untyped) -> untyped\r\n             | (string_or_symbol key) { (String) -> untyped } -> untyped\r\n```\r\n\r\nI tested with some values:\r\n\r\n```\r\nirb(main):034:0> response.fetch(""foo1"") { [] }\r\n=> """"\r\nirb(main):035:0> response.fetch(""foo1"") { [] }\r\n=> """"\r\nirb(main):036:0> response.fetch(""foo1"", [])\r\n=> """"\r\nirb(main):037:0> response.fetch(""foo1"")\r\n/Users/soutaro/.rbenv/versions/3.0.0/lib/ruby/3.0.0/net/http/header.rb:126:in `fetch\': key not found: ""foo1"" (KeyError)\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 3, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': 'd60db4a631e027708d1fd3b93a8642cea5d75436', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8771c852d4e0dea72b4a781d92356a5e54e75503', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a92161a734f3557661a807b8092b52f8e65c495a', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8baab08ed7a61b4be1037c9e4071d20f2c998f6a', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1161a3038f46e2985fb0e9f8ff8d67f477aa61c', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '969cec26ede8fbb567c9badb6d32d7acd96d2e8c', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45b6aa2a62a5ddce6b342f5c73bdcbf0639ae568', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '223a263c6a9898dd27cf87b0617b314ac4a424e5', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47af08c34361235e7f67f54f124167872e813a77', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7b026deb2e1940e80168c0b6a37c8a26f4be051', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c62d64e3d4a330a06b6848a2ec79babbc89e4b', 'committer_username': 'pocke', 'committer_name': 'Masataka Pocke Kuwabara', 'committer_email': 'p.ck.t22@gmail.com', 'commit_date': datetime.datetime(2013, 5, 7, 4, 8, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3c01ec4aeb8b7aa36dc05037f58495cabfad733', 'committer_username': 'jeremyevans', 'committer_name': 'Jeremy Evans', 'committer_email': 'code@jeremyevans.net', 'commit_date': datetime.datetime(2008, 3, 26, 0, 7, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7df8856546c86084a4a8a9da9d98f2da90eff779', 'committer_username': 'jeremyevans', 'committer_name': 'Jeremy Evans', 'committer_email': 'code@jeremyevans.net', 'commit_date': datetime.datetime(2008, 3, 26, 0, 7, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faa3c309c25d15346a0a6a7e2f989b0595b84ed6', 'committer_username': 'jeremyevans', 'committer_name': 'Jeremy Evans', 'committer_email': 'code@jeremyevans.net', 'commit_date': datetime.datetime(2008, 3, 26, 0, 7, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e2bfc35836044254b8cc93a31ddaa46f7f462fa', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb2e4d31287ba58e2575de2fdbf20eecc8249066', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f00bdbca6bb3ada18e47602ef19ad2a4f045d80', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b446ad459cf05be5bc2499177506258df097c708', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a298485d819c6186419a3e706f748c5b9ade4e6', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f20a1f1e8d915a95b83ef0a716b2397515ab5bc8', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bfb4d02989213bb378dec3a311102c8c65cb43c', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3227a381c585b00a78caeb90848d43310fd93118', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00b328f07d0355cb1eec2a68ba3ecbe6c4b13b99', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2264f52023f4df8753223ab630c199351ebada', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47
674722282,[httparty] Add RBS files for HTTParty(0.18.1) gem,"# Description
### Complete RBS write-up of [HTTParty(0.18.1)](https://github.com/jnunemaker/httparty)
- Added RBS files for HTTParty (0.18.1)
- Added test script in _scripts folder to run `rbs validate` & `steep check`
- Added tests & Steepfile in _test folder
- Added git module referencing the source code of the gem

Signed-off-by: Sushanth Sathesh Rao <rao.sush004@gmail.com>",True,31,https://api.github.com/repos/ruby/gem_rbs_collection/pulls/31,https://github.com/ruby/gem_rbs_collection/pull/31,closed,779,0,8,5,3,0,0,1,[],2021-06-21 16:55:18+00:00,2021-07-11 17:27:49+00:00,1729951.0,"20 days, 0:32:31",[],"[{'commit_sha': 'ebd0f926b2772514c675ec7726c49e17a69a7b30', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda22404ea18ad0f5c0bb0584ba56f5013047a00', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d939f696a7ad501610a9a26dda3573c56521943', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e26593051ec30606bc6e74b90b01d7ca6a86bd4f', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c823b2458ff47f4eeec4d36f41665b0d79f7d48d', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47
682031283,"[Sidekiq] Add RBS file for Sidekiq gem, version: 6.2","# Description
- Added RBS file for Sidekiq gem, version: 6.2
- Added a test script inside `_scripts` folder to run `rbs validate` & `steep check`
- Added a few tests in `_test` folder to be run on invoking `steep check`
- Added `git submodule` pointing to gem source code in `_src` directory

Signed-off-by: Sushanth Sathesh Rao <rao.sush004@gmail.com>",True,34,https://api.github.com/repos/ruby/gem_rbs_collection/pulls/34,https://github.com/ruby/gem_rbs_collection/pull/34,closed,1068,1,13,4,2,0,0,0,[],2021-07-01 17:08:53+00:00,2021-07-12 08:43:06+00:00,920053.0,"10 days, 15:34:13",[],"[{'commit_sha': '094e1edf382be6127b1722184fcc454190e1d48f', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28777d03421cfe919a5d45a117a8d976150c2358', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '489ebe4f2e43b0f225604ed0f4d1f5e83e4ab28e', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dec17a8ea96a655b6efe1893c95a6ef580d08c0', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47
683397522,Generate nested declarations,"# Description
- Generate nested declarations while using `rbs prototype runtime`

# Proposal
* **Detailed Proposal can be found here**: https://hackmd.io/@sushanth/SygRrau2_

# Example
![image](https://user-images.githubusercontent.com/57192414/124425768-a8116300-dd86-11eb-9780-3747a3c05037.png)

Fixes: #562

Signed-off-by: Sushanth Sathesh Rao <rao.sush004@gmail.com>",True,700,https://api.github.com/repos/ruby/rbs/pulls/700,https://github.com/ruby/rbs/pull/700,closed,234,128,2,5,3,0,0,1,[],2021-07-05 06:19:38+00:00,2021-07-11 10:09:52+00:00,532214.0,"6 days, 3:50:14",[],"[{'commit_sha': '1222c3cbaa26acced0618b2d8f1259fe0eebc4d0', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a906bbf163e7016805124adb434e5ece5b055b89', 'committer_username': 'soutaro', 'committer_name': 'Soutaro Matsumoto', 'committer_email': 'matsumoto@soutaro.com', 'commit_date': datetime.datetime(2009, 10, 13, 8, 52, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bbb7eb1ff0785641a62540c21886bb9491e9ff7', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c674c3b0217365361fdbf2bb635325ff5dc624', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651c159834c5328cc8f9ba9af23807a5a7e817b6', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47
691569505,[Documentation] Remove documentation about `super`,Removed documentation of `super` from `syntax.md` at [L355](https://github.com/ruby/rbs/blob/master/docs/syntax.md),True,716,https://api.github.com/repos/ruby/rbs/pulls/716,https://github.com/ruby/rbs/pull/716,closed,0,3,1,1,0,0,0,0,[],2021-07-16 15:20:05+00:00,2021-07-17 04:42:54+00:00,48169.0,13:22:49,[],"[{'commit_sha': '9ceca7acb4ddc1f7ea52291b6fd72a0ffb84a061', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47
691874441,[Documentation] Remove documentation about runtime testing,"# Description
Remove documentation about runtime testing at [L130](https://github.com/ruby/gem_rbs_collection/blob/main/README.md)

Linked Issue: #40",True,41,https://api.github.com/repos/ruby/gem_rbs_collection/pulls/41,https://github.com/ruby/gem_rbs_collection/pull/41,closed,0,11,1,1,0,0,0,0,[],2021-07-17 08:13:52+00:00,2021-08-19 02:48:32+00:00,2831680.0,"32 days, 18:34:40",[],"[{'commit_sha': 'cec4f5a61b38b3a260683b5aa9d72ac18fc8b699', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47
691961553,Add Recursiive type alias defnition validation,"# Description
- Implemented validation for recursive type alias
- Added a `RecursiveTypeAliasError` class
- Added signatures for `RecursiveTypeAliasError`
- Added a test to validate the funcitoning of `RecursiveTypeAliasError`

# Example
![image](https://user-images.githubusercontent.com/57192414/126044665-96c6d9aa-f62d-4ffa-b3ff-d52374c20302.png)

Fixes: #687

Signed-off-by: Sushanth Sathesh Rao <rao.sush004@gmail.com>",True,719,https://api.github.com/repos/ruby/rbs/pulls/719,https://github.com/ruby/rbs/pull/719,closed,200,0,9,1,4,7,0,1,[],2021-07-17 17:12:46+00:00,2021-08-05 15:05:22+00:00,1633956.0,"18 days, 21:52:36","[{'comment_id': 676156325, 'comment_body': 'Please include assertions to let us know which `type` declaration is prohibited/allowed.', 'comment_created': datetime.datetime(2021, 7, 25, 14, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 677064599, 'comment_body': ""I don't think building strongly connected components is necessary.\r\nWe can build the transitive closure of dependencies from type name. And test if the left hand side is included in the closure. I believe the definition with transitive closure is more straightforward.\r\n\r\n1. Define _dependent type names_ for given type `T` (`DD(T)`) same as `extract_type_aliases`.\r\n2. Calculate transitive closure of _dependent type names_ (`D(T)`) of one type.\r\n3. Test if the type alias definition `type t = S` includes a circular reference by `D(S) ∋ t`.\r\n\r\nOn the other hand, I'm not very sure if which one is faster."", 'comment_created': datetime.datetime(2021, 7, 27, 2, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 677067021, 'comment_body': 'All of the examples are prohibited ones. 👍 ', 'comment_created': datetime.datetime(2021, 7, 27, 2, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 677067511, 'comment_body': 'Looks better to implement the test in `Validator` class for this case.', 'comment_created': datetime.datetime(2021, 7, 27, 2, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 677067685, 'comment_body': 'Rename to `alias_names`.', 'comment_created': datetime.datetime(2021, 7, 27, 2, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 680312731, 'comment_body': ""I'm not sure if this definition of `#direct_dependency` allows type definitions like:\r\n\r\n```rbs\r\ntype a = Array[a]\r\ntype b = [b, b]\r\ntype c = { foo: c }\r\ntype d = ^(d) -> d\r\n```\r\n\r\n`#direct_dependency` will test if the type is a union, optional, or intersection and then returns the `#direct_dependency`s of the direct child types."", 'comment_created': datetime.datetime(2021, 7, 31, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 680806182, 'comment_body': 'Please write a case analysis using `case-when` here, instead of having `SAFELIST`.', 'comment_created': datetime.datetime(2021, 8, 2, 9, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': '031dac7f819481a220e6e3bab3babf12cfb73142', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47
704909874,Generate included modules with complete name,"# Description
- As @pocke sir mentioned in his [comment](https://github.com/ruby/rbs/issues/729#issuecomment-893261119), it is possible to generate included modules with complete name
- This PR contains a minor change to enable generating RBS with included modules being written out with their namespace

# Example
![image](https://user-images.githubusercontent.com/57192414/128397786-9ec42e42-e2c1-476c-8129-3ba2c2001045.png)
",True,731,https://api.github.com/repos/ruby/rbs/pulls/731,https://github.com/ruby/rbs/pull/731,closed,6,6,2,2,0,0,0,0,[],2021-08-05 17:54:06+00:00,2021-08-06 03:19:07+00:00,33901.0,9:25:01,[],"[{'commit_sha': 'da8f25f01c96f112ff93bc9a07ce65aaf7f5c169', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a586dc5fd62a79758ba4127434db69d277930137', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47
704902639,Generate RBS from JSON Schema,"# Description
- This PR contains changes required to support generation of RBS from JSON schema
- Added `rbs-json-schema` CLI base command for usage
- Created `json-schema` folder with `cli.rb` class & `generator.rb` class which generates RBS

# Example

1. 
![image](https://user-images.githubusercontent.com/57192414/128396188-04e3e1aa-9b2c-4b8b-b159-7a64cd38d44e.png)

2.
![image](https://user-images.githubusercontent.com/57192414/128395970-aa4673ae-e9b6-49e4-af26-d1ccc39a4dc4.png)
![image](https://user-images.githubusercontent.com/57192414/128396064-170d5444-e758-4c9c-8a8e-131aa60de5f0.png)
![image](https://user-images.githubusercontent.com/57192414/128396106-2e0bebe5-31f4-4442-8584-d8b8acf6df54.png)
",True,730,https://api.github.com/repos/ruby/rbs/pulls/730,https://github.com/ruby/rbs/pull/730,closed,717,1,11,5,1,14,0,1,[],2021-08-05 17:41:43+00:00,2021-08-21 17:48:43+00:00,1382820.0,"16 days, 0:07:00","[{'comment_id': 684730587, 'comment_body': 'Please rename the file to `json_schema/generator.rbs`.', 'comment_created': datetime.datetime(2021, 8, 8, 7, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 684730626, 'comment_body': 'Please add a file `json_schema/cli.rbs` and move the definitions there..', 'comment_created': datetime.datetime(2021, 8, 8, 7, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 684730717, 'comment_body': '```suggestion\r\nrequire ""rbs/json_schema/generator""\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 7, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 684731056, 'comment_body': '👍 \r\n\r\nHow about changing the style of the option?\r\n\r\n```suggestion\r\n        opts.on(""--[no-]stringify-keys"", ""Generate record types with string keys"") do |bool|\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 8, 7, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 684731874, 'comment_body': '`exit` from library code is not a good style. Define an error class, like `ValidationError`, and raise it.', 'comment_created': datetime.datetime(2021, 8, 8, 7, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 684740800, 'comment_body': ""I don't know if we really need these regexps. The value of `$ref` is a URI. `URI.parse()` would be better solution."", 'comment_created': datetime.datetime(2021, 8, 8, 8, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 685840001, 'comment_body': 'I don\'t think using `SCHEMA_DEFINITIONS` constant is good.\r\n\r\n* I would simply write a string literal `""definitions""` here\r\n* If you don\'t want to do that, define constants for each string piece for readability. `DEFINITIONS = ""definitions""` ', 'comment_created': datetime.datetime(2021, 8, 10, 9, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 685840729, 'comment_body': ""It's not clear to me why we need this method. Calling the constructor methods directly would be sufficient?"", 'comment_created': datetime.datetime(2021, 8, 10, 9, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 685843230, 'comment_body': 'The problem is that there is no standard for the `definitions` key.\r\n\r\n* https://json-schema.org/understanding-json-schema/structuring.html#ref\r\n* https://json-schema.org/understanding-json-schema/structuring.html#id19\r\n\r\n`$defs` would be more standard key...', 'comment_created': datetime.datetime(2021, 8, 10, 9, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 688547912, 'comment_body': ""I don't think declarating this constant makes much sense. Writing literals directly is better."", 'comment_created': datetime.datetime(2021, 8, 13, 14, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 688548094, 'comment_body': 'No need to declare `TypeName` and `Namespace`.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 688553606, 'comment_body': 'The implementation for `enum` type would be something like the following, without `SCHEMA_DEFINITIONS` constant and `fetch_type` method:\r\n\r\n```rb\r\n        when values = schema[:enum]\r\n          unless values.is_a?(Array)\r\n            raise ValidationError.new(......)\r\n          end\r\n\r\n          types = values.map do |value|\r\n            case value\r\n            when String, Integer\r\n              Types::Literal.new(literal: value, location: nil)\r\n            when nil\r\n              Types::Bases::Nil.new(location: nil)\r\n            else\r\n              raise ......\r\n            end\r\n          end\r\n\r\n          type = Types::Union.new(types: types, location: nil)\r\n```\r\n\r\nI believe this is short and understandable enough.', 'comment_created': datetime.datetime(2021, 8, 13, 14, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 688557363, 'comment_body': 'I think passing file paths or directory paths will work.\r\n\r\n```rb\r\ngenerator = JSONSchema::Generator.new(stringify_keys: true, stdout: stdout, stderr: stderr)\r\n\r\nARGV.each do |arg|\r\n  path = Pathname(arg)\r\n\r\n  case\r\n  when path.file?\r\n    generator.generate(URI.parse(path.to_s))\r\n  when path.directory?\r\n    path.children.each do |child|\r\n      generator.generate(URI.parse(child.to_s))\r\n    end\r\n  end\r\nend\r\n\r\ngenerator.write_output\r\n```', 'comment_created': datetime.datetime(2021, 8, 13, 14, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}, {'comment_id': 688561574, 'comment_body': ""I don't think we should skip generating definitions for other files, but save the declarations included each JSON files in Hash.\r\n\r\n```\r\nattr_reader path_decls: Hash[String,AST::Declarations::Module]\r\n```\r\n\r\nThen we can group the declarations of each JSON file in the output.\r\n\r\n```ruby\r\n# generate_rbs\r\n@path_decls[uri.path].members << decl if !decl.type.nil?\r\n```"", 'comment_created': datetime.datetime(2021, 8, 13, 14, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'soutaro', 'type': 'User'}]","[{'commit_sha': '5b94157af46a159e918e58fc4433a2e517bb4528', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa7ccf0434428591430f0d2a33903a8f9651865', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e00ae2ec5855c3a3643a98a14c0323f57d8ea4be', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a879e0e858ed243044d5a12dba5d54f68fb54dc', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f7e16c6b441d70b7e6d351a6e3db1e7d3e40c8e', 'committer_username': 'raosush', 'committer_name': 'Sushanth Sathesh Rao', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 30, 17, 48, 49, tzinfo=datetime.timezone.utc)}]",Sushanth Sathesh Rao,57192414,,User,,25,,20,47

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
304237658,gem_rbs_collection,ruby/gem_rbs_collection,Ruby,104,251,37,73,1335,12,4,3,"[{'id': 691874441, 'number': 41, 'closed': datetime.datetime(2021, 8, 19, 2, 48, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 8, 13, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2831680.0, 'time_delta': '32 days, 18:34:40', 'additions': 0, 'deletions': 11, 'state': 'closed'}, {'id': 682031283, 'number': 34, 'closed': datetime.datetime(2021, 7, 12, 8, 43, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 17, 8, 53, tzinfo=datetime.timezone.utc), 'time_taken': 920053.0, 'time_delta': '10 days, 15:34:13', 'additions': 1068, 'deletions': 1, 'state': 'closed'}, {'id': 674722282, 'number': 31, 'closed': datetime.datetime(2021, 7, 11, 17, 27, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 16, 55, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1729951.0, 'time_delta': '20 days, 0:32:31', 'additions': 779, 'deletions': 0, 'state': 'closed'}, {'id': 602391296, 'number': 22, 'closed': datetime.datetime(2021, 6, 28, 2, 51, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 3, 37, 21, tzinfo=datetime.timezone.utc), 'time_taken': 7859634.0, 'time_delta': '90 days, 23:13:54', 'additions': 2255, 'deletions': 1, 'state': 'closed'}]"
174796313,rbs,ruby/rbs,Ruby,207,1932,52,124,4879,146,17,47,"[{'id': 1047266011, 'number': 1105, 'closed': None, 'created': datetime.datetime(2022, 9, 6, 9, 0, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 36, 'deletions': 4, 'state': 'open'}, {'id': 978594587, 'number': 1048, 'closed': datetime.datetime(2022, 7, 27, 13, 20, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 24, 18, 14, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2833568.0, 'time_delta': '32 days, 19:06:08', 'additions': 1397, 'deletions': 30, 'state': 'closed'}, {'id': 838285852, 'number': 892, 'closed': datetime.datetime(2022, 2, 7, 7, 44, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 2, 13, 6, 30, tzinfo=datetime.timezone.utc), 'time_taken': 412693.0, 'time_delta': '4 days, 18:38:13', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 838229940, 'number': 891, 'closed': datetime.datetime(2022, 2, 3, 5, 51, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 2, 12, 2, tzinfo=datetime.timezone.utc), 'time_taken': 64182.0, 'time_delta': '17:49:42', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 730695464, 'number': 784, 'closed': datetime.datetime(2021, 9, 16, 15, 58, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 9, 15, 19, 42, tzinfo=datetime.timezone.utc), 'time_taken': 607138.0, 'time_delta': '7 days, 0:38:58', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 704909874, 'number': 731, 'closed': datetime.datetime(2021, 8, 6, 3, 19, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 17, 54, 6, tzinfo=datetime.timezone.utc), 'time_taken': 33901.0, 'time_delta': '9:25:01', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 704902639, 'number': 730, 'closed': datetime.datetime(2021, 8, 21, 17, 48, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 17, 41, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1382820.0, 'time_delta': '16 days, 0:07:00', 'additions': 717, 'deletions': 1, 'state': 'closed'}, {'id': 691961553, 'number': 719, 'closed': datetime.datetime(2021, 8, 5, 15, 5, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 17, 12, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1633956.0, 'time_delta': '18 days, 21:52:36', 'additions': 200, 'deletions': 0, 'state': 'closed'}, {'id': 691569505, 'number': 716, 'closed': datetime.datetime(2021, 7, 17, 4, 42, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 15, 20, 5, tzinfo=datetime.timezone.utc), 'time_taken': 48169.0, 'time_delta': '13:22:49', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 683397522, 'number': 700, 'closed': datetime.datetime(2021, 7, 11, 10, 9, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 6, 19, 38, tzinfo=datetime.timezone.utc), 'time_taken': 532214.0, 'time_delta': '6 days, 3:50:14', 'additions': 234, 'deletions': 128, 'state': 'closed'}, {'id': 674742029, 'number': 686, 'closed': datetime.datetime(2021, 7, 4, 16, 55, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 17, 23, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1121509.0, 'time_delta': '12 days, 23:31:49', 'additions': 2362, 'deletions': 0, 'state': 'closed'}]"
