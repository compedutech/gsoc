pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1354303287,"notifications: Implement the notification aspect of the ""Followed Topic"" feature.","#12309 

Add support for:
- [x] Followed Topic email notifications
- [x] Followed Topic push notifications
- [x] Followed Topic wildcard mention notifications
- [ ] Followed Topic desktop notifications
- [ ] Followed Topic audible notifications
- [x] Add a ""Followed topics"" row to the Personal settings > Notifications panel
<!-- Describe your pull request here.-->


<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [ ] Each commit is a coherent idea.
- [ ] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25640,https://api.github.com/repos/zulip/zulip/pulls/25640,https://github.com/zulip/zulip/pull/25640,closed,835,27,30,6,5,26,5,0,"[{'name': 'size: XL'}, {'name': 'post release'}, {'name': 'integration review'}, {'name': 'buddy review'}, {'name': 'mentor review'}]",2023-05-17 14:34:06+00:00,2023-06-14 01:01:42+00:00,2370456.0,"27 days, 10:27:36","[{'comment_id': 1198198635, 'comment_body': '@alya thoughts on this string? I think it could be just ""... because you are following #{{ stream_name }} > {{topic_name}}."", or ""because you have email notifications enabled for topics you follow.""; I think the latter might be preferable, since it implies pretty clearly that you follow this topic anyway, with the extra length/clutter of spelling out the topic.', 'comment_created': datetime.datetime(2023, 5, 18, 19, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1198201002, 'comment_body': 'We might want to call these e.g. `user_profile_followed_topic_email_notifications`, for future-proofing in case in the future we offer different ""followed topic"" overrides for individual streams...\r\n\r\nBut I think there\'s no reason to do that preemptively, given that these variables names are entirely local to this function and the longer versions would be very cumbersome.\r\n\r\n', 'comment_created': datetime.datetime(2023, 5, 18, 19, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1198207906, 'comment_body': 'So I think in a world where we set `enable_followed_topic_email_notifications` to true by default, this line will defeat the performance benefits of this function, documented in its docstring. \r\n\r\nI think the fix for that problem is that we need to instead include every user who actually follows this topic in who we fetch these data for. \r\n\r\nPossibly a good way to do that would be for `get_recipient_info` to be responsible for this.', 'comment_created': datetime.datetime(2023, 5, 18, 19, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1198607642, 'comment_body': 'Yeah, I like the latter option.', 'comment_created': datetime.datetime(2023, 5, 19, 6, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alya', 'type': 'User'}, {'comment_id': 1199561863, 'comment_body': '> this line will defeat the performance benefits of this function, documented in its docstring.\r\n\r\nAgreed.\r\n\r\n> we need to instead include every user who actually follows this topic in who we fetch these data for.\r\n\r\nMakes sense.\r\nI have [updated the logic](https://github.com/zulip/zulip/pull/25640/files#diff-ede16652fa44f75ae2cba0c3d42ad77b08a815188b6f9068d18034a76adb9822R360).\r\n\r\n> Possibly a good way to do that would be for get_recipient_info to be responsible for this.\r\n\r\nWe can do this, but it will lead to an increase in query count by 1.\r\nLet me know, if the current approach has any downsides, we can change this accordingly.', 'comment_created': datetime.datetime(2023, 5, 20, 5, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1199561917, 'comment_body': 'Updated the string.', 'comment_created': datetime.datetime(2023, 5, 20, 5, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1200222469, 'comment_body': 'This block here basically tries to check that this recipient is long-term-idle and is not supposed to receive notifications for this message. Instead of these 5 `not in` checks here (which may not be correct, since the whole of notifiability logic is nuanced), it would be nice to just pass a `UserMessageNotificationsData` object to this `create_user_message` function, and then directly use its `is_notifiable` method. The benefit is that the logic inside `is_notifiable` is well-tested and we should try to avoid ad-hoc notifiability checks like the above.\r\n\r\nWe already create `UserMessageNotificationsData` object inside `do_send_messages` (which is the only caller of this functions) a bit later. Might be a good idea to (in a prep commit, or in a different PR) do that before `create_user_messages` is called and just pass the objects instead of 5 different parameters like we do currently.\r\n\r\nThis comment is not specific to this PR, but I noticed this now.', 'comment_created': datetime.datetime(2023, 5, 22, 9, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1200232697, 'comment_body': 'It might be a good idea to add comments here as to what these sets indicate in plain English (""IDs of users who have followed the topic the message is being sent to, **AND** have the followed topic notifications setting ON""). A single comment for all of sets which we will have finally makes sense.', 'comment_created': datetime.datetime(2023, 5, 22, 9, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1200238723, 'comment_body': 'Why not end this with `notifications` (instead of `notify`) like the other fields?', 'comment_created': datetime.datetime(2023, 5, 22, 9, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1200246056, 'comment_body': 'We should instead use `do_change_user_setting` here instead of manually changing the DB.\r\n(Not high priority, though also a ping that it would be worthwhile to split this test suite whenever you are free :))', 'comment_created': datetime.datetime(2023, 5, 22, 9, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1200454164, 'comment_body': 'I did this to keep it consistent with the existing:\r\n\r\n```python\r\n    # Stream notifications.\r\n    enable_stream_desktop_notifications = models.BooleanField(default=False)\r\n    enable_stream_email_notifications = models.BooleanField(default=False)\r\n    enable_stream_push_notifications = models.BooleanField(default=False)\r\n    enable_stream_audible_notifications = models.BooleanField(default=False)\r\n    notification_sound = models.CharField(max_length=20, default=""zulip"")\r\n    wildcard_mentions_notify = models.BooleanField(default=True)\r\n```', 'comment_created': datetime.datetime(2023, 5, 22, 12, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1200740526, 'comment_body': ""Yeah, consistent is probably correct. It is a significantly different behavior, since it's whether wildcard mentions are eligible for notifications at all."", 'comment_created': datetime.datetime(2023, 5, 22, 16, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1203068816, 'comment_body': 'I think that\'s definitely a good idea on the ""making the code more obviously correct"" front, but we do need to be very careful in this code path around performance, so I like the idea of doing that in a follow-up PR, probably one where we also do some profiling of the code path for sending a message.\r\n\r\n(This code path is using the `UserMessageLite` object to save a bit of work in Python, so we\'re definitely in a big enough loop, say over 25k users in chat.zulip.org, where constructing an additional complex Python object might be significant).', 'comment_created': datetime.datetime(2023, 5, 23, 22, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1203901626, 'comment_body': 'Makes sense. @prakhar1144 also pointed out in DMs that the sets of user ID set for which we currently create these objects is different from the set needed here, so doing this in a follow-up PR instead of adding more complexity here makes sense :+1: ', 'comment_created': datetime.datetime(2023, 5, 24, 11, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1208002052, 'comment_body': ""> But I think there's no reason to do that preemptively, given that these variables names are entirely local to this function and the longer versions would be very cumbersome.\r\n\r\nDidn't rename in favour of the above statement."", 'comment_created': datetime.datetime(2023, 5, 27, 14, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1208009903, 'comment_body': '**Comment added.** \r\n\r\n(Although it was making complete sense to me via only the variable name.)\r\nAdding a comment to be more clear makes sense. 👍🏻 ', 'comment_created': datetime.datetime(2023, 5, 27, 14, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1208011376, 'comment_body': 'Hm, used `do_change_user_setting`.', 'comment_created': datetime.datetime(2023, 5, 27, 14, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1209118096, 'comment_body': 'Nit: This might be more clearly worded as ""... messages sent to followed topics."" (in other places as well)', 'comment_created': datetime.datetime(2023, 5, 29, 9, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1209153641, 'comment_body': 'Similar to this, I think we should also add a test in the previous commit to verify that the email setting when disabled does not send notifications.', 'comment_created': datetime.datetime(2023, 5, 29, 10, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1214156516, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 6, 2, 9, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1214162955, 'comment_body': 'Organized the new tests in this file in a better way. (While working on the wildcard mention part, I observed the better way in which these new tests can be organized).\r\n\r\n[Newly added tests](https://github.com/zulip/zulip/pull/25640/commits/c2e10004496fbf0dcccf210f4c1ae159f9bfe56e#diff-b7ecab40a23cd87e0acf58e7c8220330787bb4f7bb59e8ba601ae648ffdc968aR763)', 'comment_created': datetime.datetime(2023, 6, 2, 9, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1228823795, 'comment_body': ""I think merging this test with the previous test might make the difference between the test setups clearer? Edit: I'm not sure that's actually the case after seeing the later commits.\r\n\r\n(It would also be good to explicitly set `enable_followed_topic_email_notifications` to `True` at the start of the first test)."", 'comment_created': datetime.datetime(2023, 6, 14, 0, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1228829182, 'comment_body': 'This is an interesting corner case about precedence that we should discuss in #design. (It\'s easy to change, so not a blocker for this PR). I think it\'s possible that in the case where `wildcard_mention_email_notify` was already true, even though the ""followed topic"" case is more fine-grained, it may not be worth calling out that you follow the topic in the description of why you got the email, since you are getting it because of the wildcard mention regardless in your configuration? ', 'comment_created': datetime.datetime(2023, 6, 14, 0, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1228830138, 'comment_body': ""This migration should be dropped in favor of adding the new fields to this existing migration:\r\n`zerver/migrations/0331_scheduledmessagenotificationemail.py`\r\n\r\nAs noted before, this is not actually a database change, it's just a change to Django's Python code understanding of what values are possible, and it's a distraction to treat it as an independent migration."", 'comment_created': datetime.datetime(2023, 6, 14, 0, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1228836437, 'comment_body': 'Pushed this in my revisions to this PR.', 'comment_created': datetime.datetime(2023, 6, 14, 0, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1282238202, 'comment_body': 'Opened #26400 ', 'comment_created': datetime.datetime(2023, 8, 2, 17, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}]","[{'commit_sha': '18e1d42f81f50f12d678ad8b5539b924b9c9d564', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '859e75cf55e6297424a36f5f39fbedc61dff5b60', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b052c8980ecc7bdb2a58ed08c8971079c28177b8', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71b6b70e03518ea148bc2dd1e6424191e17159a6', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e1b4eb3a8272b9afaf21eb183c57e65697004c', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d154ce1553129a6c73c50ac7cbef382a8b50246', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1392296773,topic_popover: Add support to follow a topic from the topic_popover.,"<!-- Describe your pull request here.-->
### First commit
* Rename `muted_topics_ui.js` to `user_topics_ui.js`
---
### Second commit:
- Adds the missing node tests for the case when the visibility policy is UNMUTED. 
---
### Third commit:
*   Fix the live-update bug in the 'SETTINGS / TOPICS' panel. -- [details](https://github.com/zulip/zulip/pull/26016#pullrequestreview-1481765759)
---
### Fourth commit
**Update SETTINGS / TOPICS panel to include followed topics.**
- [x] Add ""Followed"" as the first option in the topic status dropdowns.
- [x] Modify the intro text.
- [x] Replace the ""Learn more."" link with a question mark linking to /help/mute-a-topic on the ""Topic settings"" heading.
---
### Fifth commit
**Follow a topic from the left sidebar three-dot menu.**
- Always show three options at the top of the menu, regardless of whether the stream is muted or unmuted.
- There is no way to reset the topic to ""default"" from this menu -- that can only be done via the Topics settings panel.

**Pending Discussion:**
- Should we highlight the selected option and make it non-clickable? -- [CZO discussion](https://chat.zulip.org/#narrow/stream/101-design/topic/Follow.20Topics/near/1593108)
- Follow Topic icon
---
### Sixth & Seventh commit
Remaining parts of #25640 
- [x] Followed Topic desktop notifications
- [x] Followed Topic audible notifications
---

Fixes: #25918 
Fixes: #25917 

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
<details>
<summary>
<b>SETTINGS/TOPIC panel</b>
</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/54594283-b023-4f26-85d6-0a11eed21967""></img>
</details>
<details>
<summary>
<b>Topic popover</b>
</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/711e9b98-5b94-4c2a-8b41-b3e0ead783c2""></img>
</details>
<hr>
<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26016,https://api.github.com/repos/zulip/zulip/pulls/26016,https://github.com/zulip/zulip/pull/26016,closed,500,49,22,7,16,33,8,0,"[{'name': 'area: left sidebar (misc)'}, {'name': 'area: settings (user)'}, {'name': 'area: topics'}, {'name': 'priority: high'}, {'name': 'size: XL'}, {'name': 'integration review'}, {'name': 'buddy review'}, {'name': 'maintainer review'}]",2023-06-14 12:21:16+00:00,2023-07-18 00:39:17+00:00,2895481.0,"33 days, 12:18:01","[{'comment_id': 1231109391, 'comment_body': 'We should also verify here that for normal topics, `message_is_notifiable == false`', 'comment_created': datetime.datetime(2023, 6, 15, 14, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1232174607, 'comment_body': 'I think this test already covers all the cases where `message_is_notifiable`\xa0should be\xa0`false`.\r\n\r\nFor normal topics (not muted and no visibility policy set), `message_is_notifiable`\xa0will be\xa0`true`,\xa0and should_send desktop/audible notifications will be determined by the respective settings. (This is on line 285)', 'comment_created': datetime.datetime(2023, 6, 16, 12, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1233257386, 'comment_body': ""This file is still called `muted_topics_ui.js`. I think we should change that to `user_topics_ui.js` like we've done for the other related files."", 'comment_created': datetime.datetime(2023, 6, 18, 11, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1240636943, 'comment_body': 'Makes sense. Addressed this in the 7th commit.', 'comment_created': datetime.datetime(2023, 6, 24, 8, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1242272124, 'comment_body': 'I think it would be much easier if we just sent a single bool to the handlebars template from our Javascript code (like `show_followed_in_dropdown` or something) instead of doing this calculation inside the template itself.', 'comment_created': datetime.datetime(2023, 6, 26, 14, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1242290025, 'comment_body': 'While we implement allowing users to FOLLOW a topic from the topic popover, would it better to just send the `visibility_policy` of the topic (as an integer) to the topic popover template? I think the current `topic_muted`/`topic_unmuted` variables are getting kinda confusing. This might make a good prep commit at the start of this PR, what do you think?\r\n\r\nThis will also allow us to not-show the FOLLOW button in the popover if the topic is already followed (the current scheme would require us to add a new variable like `topic_followed` in the template context).', 'comment_created': datetime.datetime(2023, 6, 26, 14, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1242294802, 'comment_body': 'This commit (`user_topics: Add the missing node tests.`) should probably be add the beginning of the PR so that it can be merged independently.', 'comment_created': datetime.datetime(2023, 6, 26, 14, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1242327491, 'comment_body': ""This (as well the above `if` block) deserve a comment stating that it is important that these two blocks corresponding to wildcard mention are present **below** (as they are right now) this block above in the same file:\r\n```js\r\n    // enable_desktop_notifications determines whether we pop up a\r\n    // notification for PMs/mentions/alerts\r\n    if (!user_settings.enable_desktop_notifications) {\r\n        return false;\r\n    }\r\n```\r\n\r\nThis is because the global and per-stream (and I'm assuming the newer per-followed-topic setting as well) wildcard mentions settings are wrappers around the personal-mention setting for the user."", 'comment_created': datetime.datetime(2023, 6, 26, 14, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1242337264, 'comment_body': 'Would it be a good idea to merge this logic into the `stream_data.receives_notifications` function which is called above? Maybe not, but it might be worthwhile to review the places where that function is called and see if there is any scope to centralize the user-topic logic similar to the stream notifications logic.', 'comment_created': datetime.datetime(2023, 6, 26, 14, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1242339327, 'comment_body': 'The same question for the audible notifications part.', 'comment_created': datetime.datetime(2023, 6, 26, 14, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1242340181, 'comment_body': 'Typo: should this be audibly?', 'comment_created': datetime.datetime(2023, 6, 26, 15, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1242341840, 'comment_body': ""This commit (`user_topics: Rename 'muted_topics_ui' to 'user_topics_ui'.`) should also be at the beginning of the PR so that it can be merged independently :)"", 'comment_created': datetime.datetime(2023, 6, 26, 15, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1243189605, 'comment_body': 'I think we will still need the calculation. We will still iterate over `user_topic_visibility_policy_values` and when `description==Followed`; we will check for `show_followed_in_dropdown`.\r\n\r\nAnyways, this is a temporary change; we will remove this calculation when we make the feature available to all the users.', 'comment_created': datetime.datetime(2023, 6, 27, 6, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1243240975, 'comment_body': '> Would it be a good idea to merge this logic into the `stream_data.receives_notifications` function which is called above?\r\n\r\nNo, because it deals with prioritizing the stream-specific setting (if exists) over the global notification setting for a stream.\r\n> if there is any scope to centralize the user-topic logic similar to the stream notifications logic.\r\n\r\nI think it would make more sense to centralize it in a similar way, when we will have global and topic-specific setting kind of thing.\r\n\r\n`stream_data.receives_notifications` has been used at 3 more places (not counting tests); but the intention at all the places is to find:\r\n* is stream_specific and default setting dissimilar\r\n* fetching the stream-specific setting over global\r\n', 'comment_created': datetime.datetime(2023, 6, 27, 7, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1243415143, 'comment_body': 'Comment added.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1243416314, 'comment_body': '**aurally** is also correct; changed it to **audibly** for simplicity.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1243416640, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1243417114, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1244769485, 'comment_body': 'Great, makes sense to have the topic code separate then :+1: ', 'comment_created': datetime.datetime(2023, 6, 28, 6, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244770573, 'comment_body': 'Cool, makes sense!', 'comment_created': datetime.datetime(2023, 6, 28, 6, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1251907631, 'comment_body': 'Since, we have a complete different UI (tabs) now; please have a look at the 5th commit.', 'comment_created': datetime.datetime(2023, 7, 4, 11, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1255827467, 'comment_body': 'Apart from changing the filename, we should also update the function names inside the file :)\r\nFor example `mute_or_unmute_topic` would become `set_topic_visibility_policy` or something.', 'comment_created': datetime.datetime(2023, 7, 7, 13, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1255831264, 'comment_body': 'Similar to https://github.com/zulip/zulip/pull/25828#discussion_r1253066713, the commit message here should include the ID of the incomplete commit earlier.', 'comment_created': datetime.datetime(2023, 7, 7, 13, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1255853053, 'comment_body': ""Is the assumption here that, if the row does not exist, the user must've set the visibility policy from another tab (and so it should be OK to reload the list)? I think that seems correct, but maybe we should comment that."", 'comment_created': datetime.datetime(2023, 7, 7, 13, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1257464714, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 9, 11, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1257465090, 'comment_body': ""Comment added\r\n\r\n```javascript\r\n// If the row doesn't exist, the user must have set the visibility policy\r\n// via another tab. We call 'populate_list' to re-create the panel, hence\r\n// including the new row.\r\n```"", 'comment_created': datetime.datetime(2023, 7, 9, 11, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1257465782, 'comment_body': ""`mute_or_unmute_topic` is related to `message_header` + `recent_topics_table`. Should we rename this here since we will replace the current UI with the proposed tabs UI? We're finally going to remove this function altogether (once the feature is live)\r\n\r\nproposed UI: https://chat.zulip.org/#narrow/stream/101-design/topic/Follow.20Topics.20UI/near/1599171\r\n\r\n---\r\n\r\nAfter discussion in CZO (DM) with @abhijeetbodas2001 ; added a comment in the file:\r\n```javascript\r\n// This function is only called from the message header & recent_topics table\r\n// and will be removed once we migrate to the new UI for selecting visibility policy\r\n// for a topic.\r\nexport function mute_or_unmute_topic($elt, visibility_policy) {\r\n...\r\n}\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 9, 11, 35, 55, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1266022921, 'comment_body': ""This copy probably isn't what we'll want long-term; linking to /help/ documentation seems valuable, and we're also not exactly configuring notifications directly; we're configuring notifications policy for the topic at a somewhat higher level..."", 'comment_created': datetime.datetime(2023, 7, 17, 23, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1266025118, 'comment_body': 'This should be discussed in #design and can be fixed in a follow-up, but playing with this, it feels a bit weird that none of these options are selected for a ""default configuration"" topic.', 'comment_created': datetime.datetime(2023, 7, 18, 0, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1266026558, 'comment_body': 'I think this probably should go in `app_components.css`; we generally put fairly well-defined reusable components there.', 'comment_created': datetime.datetime(2023, 7, 18, 0, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1266031962, 'comment_body': 'I moved this while resolving the merge conflicts.', 'comment_created': datetime.datetime(2023, 7, 18, 0, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1272105521, 'comment_body': '[CZO Discussion](https://chat.zulip.org/#narrow/stream/101-design/topic/Follow.20Topics.20UI/near/1614625)', 'comment_created': datetime.datetime(2023, 7, 24, 10, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1299596567, 'comment_body': '#26486 ', 'comment_created': datetime.datetime(2023, 8, 21, 4, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}]","[{'commit_sha': 'accb661f3fffa6a5a104dcf985d57d3e142169e0', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f69e2a51eb2aa86c14651c4b9e7d154b37b4ae7', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c48dcb4b9dc56c160ae2a7cfcc80cfbc54b9102', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb87439bc3c786e7e4bc4a4c07f409615bf9704', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f438fe7a9be8df4f5f9b099054c8f0ee4cf8276', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6f786186ac586054245415a8fd8fe364336599c', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '705e91d4ad47af4c06440a874b8c3e663362cd39', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1448682510,follow_topics: Add support to follow a topic from the message header and recent topics UI.,"- [x]  Add support to follow a topic from the message header bar. 
- [x] Add support to follow a topic via recent conversations UI.

<!-- Describe your pull request here.-->

Fixes #25915.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

* [All Tooltips screenshots](https://github.com/zulip/zulip/pull/26353#discussion_r1292448407)

  <details><summary>Popover - 1</summary>
  <img src=""https://github.com/zulip/zulip/assets/56781761/80a57adf-ef35-4a6c-8bb1-71af0bc9e79a"">
  </img>
  </details> 

  <details><summary>Popover - 2</summary>
  <img src=""https://github.com/zulip/zulip/assets/56781761/8ecd5706-9395-47b4-a00d-76575980f8c7"">
  </img>
  </details>  

---


<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26353,https://api.github.com/repos/zulip/zulip/pulls/26353,https://github.com/zulip/zulip/pull/26353,closed,282,13,14,3,10,13,2,0,"[{'name': 'size: XL'}, {'name': 'integration review'}]",2023-07-25 15:35:41+00:00,2023-08-17 20:30:24+00:00,2004883.0,"23 days, 4:54:43","[{'comment_id': 1291914410, 'comment_body': ""I don't like adding `development` and `all_visibility_policies` to this object -- those are sorta global properties, and having a copy of them for each recipient group just feels weird.\r\n\r\nMaybe it's hard to fix, and it's not exactly important, but it would be nice if we could have these properties just passed into template rendering."", 'comment_created': datetime.datetime(2023, 8, 12, 0, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1291919059, 'comment_body': 'A few notes. One is that this icon seems to be missing `cursor: pointer`. Next is that I think we want the icon to always show the current state -- for a topic in the default state, I think we want to use a ""normal"" icon, not a ""mute"" icon -- the latter should be reserved for if the topic is actually muted! \r\n\r\nAnd then finally, ""visibility policy"" is not a term intended to be user-facing. I think we want the tooltip to be something like a slightly fancier 2-line thing:\r\n\r\n> You will get default notifications for this topic. (Or maybe in this case we just don\'t have a first line?)\r\n> You have muted this topic.\r\n> You have unmuted this topic.\r\n> You follow this topic.\r\n\r\nWith a second like that\'s something like ""Change notifications for this topic"" as a click action description. I\'m pretty sure we have an existing tooltip with this shape but cannot remember it. @amanagr do you recall?', 'comment_created': datetime.datetime(2023, 8, 12, 0, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1291919107, 'comment_body': 'Hmm, I think this belongs in `message_row.css` or something that contains the recipient elements?', 'comment_created': datetime.datetime(2023, 8, 12, 0, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1291919492, 'comment_body': ""I think an acceptable option would be to add a blank line followed by a comment above those two fields noting they are not specific to this group but that this is the easiest way we've figured out for passing the data to the template rendering."", 'comment_created': datetime.datetime(2023, 8, 12, 0, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1291921695, 'comment_body': ""Just noting that this doesn't have a good way to do error handling -- it's probably OK as I don't think it will come up often enough to matter, but let's add a `// TODO: Figure out a good way to offer feedback if this request fails`."", 'comment_created': datetime.datetime(2023, 8, 12, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1291991881, 'comment_body': 'We use one in `message_inline_image_tooltip`.', 'comment_created': datetime.datetime(2023, 8, 12, 2, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 1292441365, 'comment_body': 'Added comment', 'comment_created': datetime.datetime(2023, 8, 12, 18, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1292448407, 'comment_body': '* icon seems to be missing `cursor: pointer` -- Done\r\n* I think we want the icon to always show the current state\r\n  > Earlier we had planned to NOT show \'default\' in the popover (which was ofcourse confusing). I have updated the behavior as per [our discussion in CZO](https://chat.zulip.org/#narrow/stream/101-design/topic/Follow.20Topics.20UI/near/1624043). \r\n* I think we want the tooltip to be something like a slightly fancier 2-line thing:\r\n  \r\n  <details><summary>Default</summary>\r\n  <img src=""https://github.com/zulip/zulip/assets/56781761/71489eba-bd35-49a4-9f05-10310df7f872"">\r\n  </img>\r\n  </details> \r\n  \r\n  <details><summary>Muted</summary>\r\n  <img src=""https://github.com/zulip/zulip/assets/56781761/9ba3d074-0b35-4ae0-a113-1665b65b966d"">\r\n  </img>\r\n  </details> \r\n  \r\n  <details><summary>Unmuted</summary>\r\n  <img src=""https://github.com/zulip/zulip/assets/56781761/a65948f6-17f5-4092-bd11-15dffc405096"">\r\n  </img>\r\n  </details> \r\n  \r\n  <details><summary>Followed</summary>\r\n  <img src=""https://github.com/zulip/zulip/assets/56781761/40837d58-781b-4637-9ca7-77e2f17ea626"">\r\n  </img>\r\n  </details> ', 'comment_created': datetime.datetime(2023, 8, 12, 19, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1292449976, 'comment_body': 'Should we use ""Click to change the state of this topic"", because these visibility policies affect things other (visually) than notifications. \r\n\r\nWe use the ""state"" term in \'SETTINGS/TOPICS\' panel.', 'comment_created': datetime.datetime(2023, 8, 12, 19, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1292452810, 'comment_body': 'Moved it to `zulip.css`. \r\n\r\n`.recipient_bar_controls`, `.recipient_row_date` etc lies there.', 'comment_created': datetime.datetime(2023, 8, 12, 19, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1292452819, 'comment_body': 'Comment added', 'comment_created': datetime.datetime(2023, 8, 12, 19, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1297706880, 'comment_body': 'OK. We may move them out but they can go together, so this works.', 'comment_created': datetime.datetime(2023, 8, 17, 20, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1297708203, 'comment_body': 'I don\'t think ""state"" feels right -- let\'s discuss this detail in #design; I think this is a workable prototype but we\'ll probably refine it a bit more as we go.', 'comment_created': datetime.datetime(2023, 8, 17, 20, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'bdb5d442a8eb579d8485ee0aab4a6d2526831a2e', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9e148d02084a2044561db99a0497ff9d1267b0d', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0abd4a790f25d2640e34117915dccddac53151c', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1473244225,topic_popover: Add a 'Default' option and Show 'Unmute' option conditionally.,"[CZO Discussion](https://chat.zulip.org/#narrow/stream/101-design/topic/Follow.20Topics.20UI/near/1624043)

The `Unmute` option is available in not-muted streams only when it is the current value.

Add a `Default` option. Available in both muted and not-muted streams. `Default` corresponds to the `INHERIT` visibility policy.

Summary:
* In muted streams:
  * Four options: Mute, Default, Unmute, and Follow.

* In not-muted streams: 
  * Three options: Mute, Default, and Follow.
  * The fourth option, `Unmute` is available only when it is the current value.


<!-- Describe your pull request here.-->

---

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<details><summary>Popover 1</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/8cdac45a-281b-4ee8-ad2b-82cbf5e0d1ea"">
</img>
</details> 

<details><summary>Popover 2</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/2797e584-d6fa-4cf7-b428-5f741a3c8b59"">
</img>
</details> 

---

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26486,https://api.github.com/repos/zulip/zulip/pulls/26486,https://github.com/zulip/zulip/pull/26486,closed,29,7,5,2,5,6,3,0,"[{'name': 'size: M'}, {'name': 'integration review'}, {'name': 'mentor review'}]",2023-08-13 06:07:45+00:00,2023-08-15 17:02:03+00:00,212058.0,"2 days, 10:54:18","[{'comment_id': 1292676075, 'comment_body': 'I have changed the tippy-content from ""Mute topic"" to ""Mute"" because ""Regular topic"" doesn\'t look good ? (if we plan to keep things consistent).\r\n\r\nI think, ""Mute"", ""Unmute"", ""Follow"", ""Regular"" sounds good and its obvious that we are performing action on the topic itself (as it is a topic popover)', 'comment_created': datetime.datetime(2023, 8, 13, 6, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1294179410, 'comment_body': 'That makes sense to me', 'comment_created': datetime.datetime(2023, 8, 15, 4, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1294180198, 'comment_body': 'Maybe we should change the labels in a separate commit though', 'comment_created': datetime.datetime(2023, 8, 15, 4, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1294181348, 'comment_body': 'Maybe we can do this in a single `if` conditional? `if stream_muted or visibility_policy==UNMUTED`.\r\nThat would make is very clear in which cases we can possibly show the UNMUTE button (and also deduplicate the inside HTML)', 'comment_created': datetime.datetime(2023, 8, 15, 4, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1294413260, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 15, 10, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1294413640, 'comment_body': 'Hm, right. Made the changes.', 'comment_created': datetime.datetime(2023, 8, 15, 10, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}]","[{'commit_sha': '511f8b242acac08cb9a99625d6987733608ba25b', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef0d7c5e8be4ffdcb47763c2bef8e217c572c050', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1482268781,follow_topics: Remove the 'development' guard.,"Changes visible on CZO:
* Follow a topic from the left sidebar three-dot menu.
* Follow a topic from the message header.
* Follow a topic from the recent conversations UI.
* A ""Followed Topics"" row in the ""Notification Triggers"" table.
* Followed Topics visible in the 'SETTINGS / TOPICS' panel.

Get notifications for messages in ""Followed Topics"" as per the notification settings in the ""Notification Triggers"" table.

<!-- Describe your pull request here.-->



<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

This should be deployed on chat.zulip.org branch.

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26536,https://api.github.com/repos/zulip/zulip/pulls/26536,https://github.com/zulip/zulip/pull/26536,closed,96,201,13,1,9,0,3,0,"[{'name': 'size: XL'}, {'name': 'mentor review'}, {'name': 'deployed on chat.zulip.org'}]",2023-08-21 06:30:09+00:00,2023-10-22 21:24:22+00:00,5410453.0,"62 days, 14:54:13",[],"[{'commit_sha': '9f7a66dd7b8348dfdc017ec494eb32be009860b2', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1397478478,settings: Add options to automatically follow and/or unmute topics.,"Add option to:
- [x] Automatically Follow topics
- [x] Automatically Unmute topics
- [x] Automatically Follow topics (Frontend)
- [x] Automatically Unmute topics (Frontend)

Note:
* There is an increase in the query count by  5 (max) while sending a message.
  * When we send the first message to a topic, there is an increase in the query count by 5 --  1 for checking if it is the first message in the topic + 1 to check if the topic is already followed + 3 for following the topic.
 
Fixes #25914 

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->
**Demo Video**

[automatic_3.webm](https://github.com/zulip/zulip/assets/56781761/8e368a95-2936-4b26-b807-34b9d9243156)




<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26054,https://api.github.com/repos/zulip/zulip/pulls/26054,https://github.com/zulip/zulip/pull/26054,closed,1945,81,34,4,23,85,4,0,"[{'name': 'area: settings UI'}, {'name': 'size: XL'}, {'name': 'mentor review'}, {'name': 'QA needed'}]",2023-06-19 04:08:23+00:00,2023-10-04 20:04:30+00:00,9302167.0,"107 days, 15:56:07","[{'comment_id': 1233903662, 'comment_body': 'Is this a mistake that the feature level was 188 instead of 189? If so, we should fix that in a separate PR.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233909119, 'comment_body': 'Would `ON_INITIATION` (similar to `ON_PARTICIPATION`) be a better suffix here than `I_START`?\r\n\r\nIn any case we should add comments here on what these values actually mean, since these are new terms in the codebase.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233918318, 'comment_body': 'If a newly subscribed user (`Hamlet`) is posting a message in a private stream without shared history, to a topic `foo`, he will think they are initiating that topic, even if that topic already exists (if other users created it before `Hamlet` was subscribed to the stream). We should handle such cases properly. For example, see this code in `message_edit.py`.\r\n\r\n```python\r\n        accessible_messages_in_topic = UserMessage.objects.filter(\r\n            user_profile=user_profile,\r\n            message__recipient_id=message.recipient_id,\r\n            message__subject__iexact=message.topic_name(),\r\n        ).values_list(""message_id"", flat=True)\r\n```', 'comment_created': datetime.datetime(2023, 6, 19, 11, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233925856, 'comment_body': 'Should we use `access_stream_by_id` here? (Also, below)', 'comment_created': datetime.datetime(2023, 6, 19, 11, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233933455, 'comment_body': 'Is there any way we can avoid this second query to fetch the submessage that we just created? The problem here is that we want to do `select_related`, right?', 'comment_created': datetime.datetime(2023, 6, 19, 11, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233935284, 'comment_body': '""the user participates in"" etc might be better wording here in the docs.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233939049, 'comment_body': 'We should use the `check_muted_topics` and `check_user_topic` checkers here.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233942081, 'comment_body': ""I wonder if this can be done more elegantly by just setting the value to `NEVER` in `ZulipTestCase.set_up()` for all our test users. We could avoid the code repetition here (and also the ad-hoc edits to existing test which you've done below)."", 'comment_created': datetime.datetime(2023, 6, 19, 11, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233945862, 'comment_body': 'We should edit the `stream_topic_target` here to correspond to `New Topic` for the test to be effective.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233950773, 'comment_body': ""Once you've fixed the bug regarding Private streams which I mentioned above, please also add a test for that scenario :)"", 'comment_created': datetime.datetime(2023, 6, 19, 11, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233956845, 'comment_body': 'Might be more convenient to use `/actions/reactions.py/check_add_reaction` than calling the endpoint here.', 'comment_created': datetime.datetime(2023, 6, 19, 12, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233962362, 'comment_body': ""Upto you, but in case it is easier to create separate tests for the `send_message`, `react`, `poll` and `todo` scenarios (instead of keeping track of so many users), that's an option as well. But I don't have a strong opinion."", 'comment_created': datetime.datetime(2023, 6, 19, 12, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1235708760, 'comment_body': 'Fixed in#26014.', 'comment_created': datetime.datetime(2023, 6, 20, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235710425, 'comment_body': ""We should also make sure we add a test that covers this specific case, because it could have security implications, and it's a bit fiddly."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235712418, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235713223, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235713444, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235713741, 'comment_body': '```suggestion\r\n        # Because a user automatically follows the topic they start (by default),\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235714164, 'comment_body': '```suggestion\r\n       # Because a user automatically follows the topic they start (by default),\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235714470, 'comment_body': '```suggestion\r\n        # A user automatically follows the topic they start (by default).\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235714820, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235715077, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1242352683, 'comment_body': 'Yup! https://github.com/zulip/zulip/pull/26054#discussion_r1233950773 :)', 'comment_created': datetime.datetime(2023, 6, 26, 15, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244750707, 'comment_body': '[CZO Discussion](https://chat.zulip.org/#narrow/stream/101-design/topic/automatically.20follow.20topics.20.2325914/near/1600092)', 'comment_created': datetime.datetime(2023, 6, 28, 6, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271432178, 'comment_body': 'Created separate tests', 'comment_created': datetime.datetime(2023, 7, 23, 11, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271432373, 'comment_body': 'Used `check_add_reaction`', 'comment_created': datetime.datetime(2023, 7, 23, 11, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271432451, 'comment_body': 'Hm, right -- Fixed', 'comment_created': datetime.datetime(2023, 7, 23, 11, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271432511, 'comment_body': 'Used `check_muted_topics` and `check_user_topic`', 'comment_created': datetime.datetime(2023, 7, 23, 11, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271433265, 'comment_body': 'Changed to `ON_INITIATION` + Added comments', 'comment_created': datetime.datetime(2023, 7, 23, 11, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271433331, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 23, 11, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271443369, 'comment_body': 'Hm, better -- made the changes', 'comment_created': datetime.datetime(2023, 7, 23, 12, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1300278276, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 21, 15, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1300278612, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 21, 15, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1303156462, 'comment_body': ""We can avoid the query if the policy isn't `ON_PARTICIPATION`, right? Currently we are running this query for all messages.\r\nAn `if-elif` sequence would be better here:\r\n```\r\nif not bot:\r\n    if policy = ON_PARTICIPATION:\r\n        # ...\r\n    elif policy = ON_INITIATION:\r\n        accessible_messages_in_topic = ...\r\n        if len(accessible_messages_in_topic) > 0:\r\n            # ...\r\n```"", 'comment_created': datetime.datetime(2023, 8, 23, 15, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303191919, 'comment_body': 'I think we had decided to set the policy for test users to be `NEVER` in the test database? (Ref https://chat.zulip.org/#narrow/stream/101-design/topic/automatically.20follow.20topics.20.2325914/near/1609293)\r\n\r\nIf not that, lets at least create a test helper like `ZulipTestCase.dont_automatically_follow_topics(user_profile)`, and explain why doing so is needed in the docstring of that method. The current scheme of multiline comments and multi-line `do_change_user_setting` is I feel too verbose.', 'comment_created': datetime.datetime(2023, 8, 23, 15, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303193646, 'comment_body': ""Or better yet, a wrapper/context-manager, which sets the policy to `NEVER` when entering the block, and resets it to initial value when exiting the block. That way we could make sure that we don't accidentally run our tests on wrong data."", 'comment_created': datetime.datetime(2023, 8, 23, 15, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303207849, 'comment_body': 'The comment should say ""... set to `AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION`""', 'comment_created': datetime.datetime(2023, 8, 23, 15, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303210395, 'comment_body': 'We can probably just skip these comments all together. It is pretty clear from the code what were doing. A single comment at the end (near the assertion) should be sufficient to explain the intention of the test (or maybe as a docstring for the test function).', 'comment_created': datetime.datetime(2023, 8, 23, 15, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303211522, 'comment_body': '> The comment should say ""... set to `AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION`""\r\n\r\nAlso in the tests below.', 'comment_created': datetime.datetime(2023, 8, 23, 15, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303221517, 'comment_body': 'For these cases, what is the action? Meaning, when is the policy set to FOLLOWED, on initiation or participation?', 'comment_created': datetime.datetime(2023, 8, 23, 15, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303227291, 'comment_body': 'It would be really nice to extract out all of this `visibility_policy` calculation code into a separate function so as to not increase the reading complexity of the send-message codepath.', 'comment_created': datetime.datetime(2023, 8, 23, 15, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303228656, 'comment_body': 'That way, we can also use early return and avoid some of the later `visibility_policy != UserTopic.VisibilityPolicy.FOLLOWED` checks for other cases.', 'comment_created': datetime.datetime(2023, 8, 23, 15, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303262597, 'comment_body': ""For example,\r\n```python\r\n            if not sender.is_bot and (\r\n                sender.automatically_follow_topics_policy\r\n                == UserProfile.AUTOMATICALLY_FOLLOW_TOPICS_ON_PARTICIPATION\r\n                or sender.automatically_unmute_topics_policy\r\n                == UserProfile.AUTOMATICALLY_UNMUTE_TOPICS_ON_PARTICIPATION\r\n            ):\r\n                # The order here is important. If both of the policies\r\n                # 'automatically_follow_topics_policy' and 'automatically_unmute_topics_policy'\r\n                # has values set to 'AUTOMATICALLY_FOLLOW_TOPICS_ON_PARTICIPATION' and\r\n                # 'AUTOMATICALLY_UNMUTE_TOPICS_ON_PARTICIPATION' respectively, we set the\r\n                # visibility_policy to 'FOLLOWED'.\r\n                if (\r\n                    sender.automatically_follow_topics_policy\r\n                    == UserProfile.AUTOMATICALLY_FOLLOW_TOPICS_ON_PARTICIPATION\r\n                ):\r\n                    visibility_policy = UserTopic.VisibilityPolicy.FOLLOWED\r\n                else:\r\n                    visibility_policy = UserTopic.VisibilityPolicy.UNMUTED\r\n```\r\n\r\nwould be converted to:\r\n\r\n```python\r\nif sender.is_bot:\r\n  return None\r\n\r\n# order is important\r\nif follow_policy == ON_PARTICIPATION:\r\n  return FOLLOWED\r\n\r\nif unmute_policy == ON_PARTICIPATE:\r\n  return UNMUTED\r\n```\r\n\r\n... and so on. Thoughts?"", 'comment_created': datetime.datetime(2023, 8, 23, 16, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303273374, 'comment_body': 'We could extract a second level function from the above proposed function which handles only the ON_PARTICIPATION case, which could be reused in the reactions/submessage codepath.', 'comment_created': datetime.datetime(2023, 8, 23, 16, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1324075866, 'comment_body': 'I have squashed the 2 commits introducing `follow` and `unmute` settings separately. Keeping them separate gives incomplete information, hence the above comment. `if policy = ON_PARTICIPATION:` - this kind of thing is not relevant when we have both settings involved.\r\n\r\nIn short: This comment resulted due to a overly-minimal commit structure. The comment can be ignored.', 'comment_created': datetime.datetime(2023, 9, 13, 7, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1324085369, 'comment_body': ""> I think we had decided to set the policy for test users to be NEVER in the test database? \r\n\r\nYes, I finally did that.\r\n\r\nEarlier, I set the policy in the individual tests themselves because, as [Steve said](https://chat.zulip.org/#narrow/stream/101-design/topic/automatically.20follow.20topics.20.2325914/near/1602472):\r\n> Generally I have found it easier when writing (and reading) tests to just explicitly set up the data in individual tests. The set_up() methods can be kind of tricky for future developers who don't realize right away that there is action-at-a-distance.\r\n\r\nBut I agree that it is too verbose. So [Tim's suggestion](https://chat.zulip.org/#narrow/stream/101-design/topic/automatically.20follow.20topics.20.2325914/near/1609293) would be the better approach here:\r\n>  we can set a defaults during the creation of test users in populate_db, though."", 'comment_created': datetime.datetime(2023, 9, 13, 7, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1324090993, 'comment_body': 'The intent is to have the policy for `aaron` be anything other than `AUTOMATICALLY_FOLLOW_TOPICS_ON_PARTICIPATION`, hence the comment includes `NOT set to`\r\n\r\nI think, as it created a slight confusion here at first glance, we should keep the comments?', 'comment_created': datetime.datetime(2023, 9, 13, 7, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1324093319, 'comment_body': 'Improved comment -- [see lib/message.py](https://github.com/zulip/zulip/pull/26054/files#diff-40c1c91d1032197fa2decf32d350e72180d5861534c2eb99fcc898eb0b12da24R1737)', 'comment_created': datetime.datetime(2023, 9, 13, 7, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1324096799, 'comment_body': 'Created the following functions in `lib/message.py`:\r\n* visibility_policy_for_participation -- second level function\r\n* visibility_policy_for_send_message\r\n* should_change_visibility_policy\r\n\r\nThe code looks much cleaner and readable now.', 'comment_created': datetime.datetime(2023, 9, 13, 7, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1326654214, 'comment_body': 'Yeah I like these interfaces!', 'comment_created': datetime.datetime(2023, 9, 15, 0, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1326654805, 'comment_body': 'I would usually write this using `.get` and just catching the `UserTopic.DoesNotExist` exception to do the `return True` case.', 'comment_created': datetime.datetime(2023, 9, 15, 0, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1326655756, 'comment_body': 'I think it might be worth adding an `if visibility_policy == UserTopic.VisibilityPolicy.UNMUTED: return ...` just after this -- the query for how many messages there are can be expensive, and so we should avoid doing it when not necessary.', 'comment_created': datetime.datetime(2023, 9, 15, 0, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1326656325, 'comment_body': ""This query is probably more expensive than would be ideal -- if there's 800 messages in the topic, we end up asking the database to count them all.\r\n\r\nIn theory all we need is `.exclude(id=message.id).exists()` for the below calculations.\r\n\r\n(But we should still be careful to try to only do this query if its outcome will impact what we do)."", 'comment_created': datetime.datetime(2023, 9, 15, 0, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1327300054, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 9, 15, 13, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1327308707, 'comment_body': ""We're now using `.exclude(id=message.id).exists()`; \r\n\r\nIt will be called only when:\r\n* automatically_follow_topics_policy == AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION\r\n* automatically_unmute_topics_policy == AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION\r\n\r\noverall one db query when either or both of the policy is `ON_INITIATION`.\r\n\r\nand it is necessary to check if it is the topic start when the policy is `ON_INITIATION`\r\n\r\nSo, we can avoid adding `if visibility_policy == UserTopic.VisibilityPolicy.UNMUTED: return ...`"", 'comment_created': datetime.datetime(2023, 9, 15, 13, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1327310236, 'comment_body': 'Yes, using `.exclude(id=message.id).exists()` is far better. Done.', 'comment_created': datetime.datetime(2023, 9, 15, 13, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1327535603, 'comment_body': ""This should be `AUTOMATICALLY_UNMUTE_TOPICS_ON_PARTICIPATION`, right?\r\n\r\nI think we might want to just use a common set of values, and name them e.g. \r\n`CHANGE_USER_TOPIC_ON_INITIATION`, just to avoid the possibility of mixing this up and feeling like that fact might be important -- if they're clearly by intent the same set of values, we don't have that concern."", 'comment_created': datetime.datetime(2023, 9, 15, 16, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1327536423, 'comment_body': 'I think we also want to avoid doing that calculation if we know that the user already has the state that this would trigger. Otherwise, if you send a message to a topic 10 times in a row, we can potentially be doing this query for 9/10 of them for no reason.', 'comment_created': datetime.datetime(2023, 9, 15, 16, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1327539434, 'comment_body': ""Yeah, that's probably OK."", 'comment_created': datetime.datetime(2023, 9, 15, 16, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1327949369, 'comment_body': 'Ah right, `AUTOMATICALLY_UNMUTE_TOPICS_ON_INITIATION`. The tests didn\'t fail because internally they have the same `integer` value.\r\n\r\n@timabbott  Sorry, I\'m unsure about what you meant by:\r\n""use a common set of values, and name them e.g. CHANGE_USER_TOPIC_ON_INITIATION""\r\n', 'comment_created': datetime.datetime(2023, 9, 16, 11, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1328631338, 'comment_body': 'I think things would be much easier in future when we\'ll have a `Topic` or `StreamTopic` table. We can simply use a `is_new_topic = True` variable parallely while creating a new `topic` object in the send message codepath; that would lead to avoiding this unnecessart repetitive query.\r\n\r\nFor now, I\'m not sure what would be the ideal place to store the info ""is_new_topic = False"" after a user finishes sending the first message and reuse during next send message operation.\r\n\r\n>  if we know that the user already has the state that this would trigger.\r\n\r\nThe problem would be for example: If a user has\r\n* follow_policy = on_initiation\r\n* unmute_policy = never\r\n\r\nNow if the user sends a message to an existing topic & they have the no visibility policy set; the db query will occur even if we apply the check ""if we know that the user already has the state that this would trigger. ""', 'comment_created': datetime.datetime(2023, 9, 18, 12, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1328963761, 'comment_body': ""Oh I meant to just rename both `AUTOMATICALLY_UNMUTE_TOPICS_ON_INITIATION` and `AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION` with `CHANGE_USER_TOPIC_ON_INITIATION` -- so we'd just have one set of names for the 1/2/3 values and it'd feel very clear in the code that they're supposed to be parallel."", 'comment_created': datetime.datetime(2023, 9, 18, 16, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1329098994, 'comment_body': '@timabbott \r\nICYMI: we have one more question to discuss!', 'comment_created': datetime.datetime(2023, 9, 18, 17, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1331511928, 'comment_body': 'Alright, this is the modified code in `zerver/models.py` (removes duplication)\r\n\r\n```python\r\n    # The following two settings control which topics to automatically\r\n    # \'follow\' or \'unmute in a muted stream\', respectively.\r\n    # Follow or unmute a topic automatically on:\r\n    # - PARTICIPATION: Send a message, React to a message, Participate in a poll or Edit a TO-DO list.\r\n    # - INITIATION: Send the first message in the topic.\r\n    # - NEVER: Never automatically follow or unmute a topic.\r\n    AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_ON_PARTICIPATION = 1\r\n    AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_ON_INITIATION = 2\r\n    AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_NEVER = 3\r\n    AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_CHOICES = [\r\n        AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_ON_PARTICIPATION,\r\n        AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_ON_INITIATION,\r\n        AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_NEVER,\r\n    ]\r\n    automatically_follow_topics_policy = models.PositiveSmallIntegerField(\r\n        default=AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_NEVER\r\n    )\r\n    automatically_unmute_topics_in_muted_streams_policy = models.PositiveSmallIntegerField(\r\n        default=AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_NEVER\r\n    )\r\n```\r\n\r\nI have made small changes to your suggestion `CHANGE_USER_TOPIC_ON_INITIATION`\r\n* used the term `VISIBILITY_POLICY` instead of `USER_TOPIC`\r\n* prefixed with `AUTOMATICALLY_` for readability.\r\n\r\nwithout the prefix, things like `CHANGE_USER_TOPIC_NEVER` seems to convey that ""never change the visibility policy"" instead of ""never automatically change the visibility policy""', 'comment_created': datetime.datetime(2023, 9, 20, 11, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1334895762, 'comment_body': 'This might be better with the early return pattern.', 'comment_created': datetime.datetime(2023, 9, 23, 0, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334896001, 'comment_body': 'Or maybe better is to extract this whole block as a function we can call; `user_topics.process_topic_participation(user_profile, message)` as the part inside the `if` statement; and then this could be called both here and in the submessage code path?', 'comment_created': datetime.datetime(2023, 9, 23, 0, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334896240, 'comment_body': ""This function doesn't check the `is_bot` case that the reactions code path does; should it? I think maybe bots can't use submessages, but it might be more future-proof to to the exact check we have for reactions here."", 'comment_created': datetime.datetime(2023, 9, 23, 0, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334896753, 'comment_body': 'Regarding a topic table I think we won\'t be able to do an `is_new_topic` check that way for private streams with protected history (since we can\'t leak to the user whether there are previous messages); but those are rare, and in shared history streams, it will be a nice optimization. Just wanted to mention that\'s a corner case that a topics table doesn\'t make any less ugly.\r\n\r\n> Now if the user sends a message to an existing topic & they have the no visibility policy set; the db query will occur even if we apply the check ""if we know that the user already has the state that this would trigger. ""\r\n\r\nI think the fix for this is that we need to pass `current_visibility_policy` to this function, and we can skip fetching existing messages if the user\'s current_visibility_policy for the topic is already at least as visible as what the policy would change it to.\r\n\r\nThis may make the `should_change_visibility_policy` separate abstraction no longer make sense; I\'m not sure. But I think that fixing this will be very significant in the performance impact of this feature, so we should probably do it.', 'comment_created': datetime.datetime(2023, 9, 23, 0, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1337760916, 'comment_body': 'Added a boolean function `set_visibility_policy_possible`.\r\n\r\n```\r\ndef set_visibility_policy_possible(user_profile: UserProfile, message: Message) -> bool:\r\n    """"""If the user can set a visibility policy.""""""\r\n    if not message.is_stream_message():\r\n        return False\r\n\r\n    if user_profile.is_bot:\r\n        return False\r\n\r\n    if user_profile.realm != message.get_realm():\r\n        return False\r\n\r\n    return True\r\n```\r\n\r\nIt is used at all the three places: message_send, reactions, and submessage.', 'comment_created': datetime.datetime(2023, 9, 26, 20, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1337761397, 'comment_body': 'Used `set_visibility_policy_possible` as explained in the above comment.', 'comment_created': datetime.datetime(2023, 9, 26, 20, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1337766088, 'comment_body': 'A better fact that we can use to solve this is:\r\n\r\n""If a topic has a visibility policy set, it can\'t be the case of initiation. We return early, thus saving a DB query.""\r\n\r\nWe now pass `current_visibility_policy` to this function and return None if it can\'t increase visibility.\r\n\r\n`should_change_visibility_policy` is now only used in reactions and submessage codepath.\r\n\r\n---\r\n\r\nThe only case in which we wouldn\'t be able to save the repetitive db query, when:\r\n* current_visibility_policy = INHERIT\r\n* either of the policy is set to initiation, none of them set to participation, the action is participation.\r\n\r\nIn this case the policies gives the hope to increase visbility so we need to check if the action is initiation or not using db query.', 'comment_created': datetime.datetime(2023, 9, 26, 20, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1337823800, 'comment_body': 'OK, works for me!', 'comment_created': datetime.datetime(2023, 9, 26, 21, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1339241464, 'comment_body': 'This works for me!', 'comment_created': datetime.datetime(2023, 9, 27, 21, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1339245080, 'comment_body': ""OK, this is pretty good! This should probably be a follow-up for sanity's sake, but we might want to make sure we have tests for the query counts for adding a reaction / etc., maybe in functions like ` test_automatically_unmute_topic_on_participation_add_reaction`? "", 'comment_created': datetime.datetime(2023, 9, 27, 21, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1339253687, 'comment_body': 'Let\'s add a comment here ""# Now we need to check if the user initiated the topic. We use the user\'s own message access to avoid leaking information in private streams with shared history.""', 'comment_created': datetime.datetime(2023, 9, 27, 21, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1339255792, 'comment_body': 'Reading this check, I realized that I think it is wrong for in the case of a stream with shared history; in that case, \r\nthe initiation check needs to be more like `get_topic_history_for_public_stream` not `get_topic_history_for_stream` -- basically we need a `can_access_stream_history` if/else clause here, and filter on just `Message` if the user has history access.', 'comment_created': datetime.datetime(2023, 9, 27, 21, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1342715028, 'comment_body': ""Updated code:\r\n\r\n```python\r\n    # Now we need to check if the user initiated the topic.\r\n    old_accessible_messages_in_topic: Union[QuerySet[Message], QuerySet[UserMessage]]\r\n    if can_access_stream_history(sender, stream):\r\n        old_accessible_messages_in_topic = messages_for_topic(\r\n            realm_id=sender.realm_id,\r\n            stream_recipient_id=message.recipient_id,\r\n            topic_name=message.topic_name(),\r\n        ).exclude(id=message.id)\r\n    else:\r\n        # We use the user's own message access to avoid leaking information in\r\n        # private streams with protected history.\r\n        old_accessible_messages_in_topic = UserMessage.objects.filter(\r\n            user_profile=sender,\r\n            message__recipient_id=message.recipient_id,\r\n            message__subject__iexact=message.topic_name(),\r\n        ).exclude(message_id=message.id)\r\n```"", 'comment_created': datetime.datetime(2023, 10, 2, 13, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1342715533, 'comment_body': 'Done, see the below review comment.', 'comment_created': datetime.datetime(2023, 10, 2, 13, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1342734530, 'comment_body': ""`visibility_policy_send` doesn't look a perfect name for this. Any better suggestions?"", 'comment_created': datetime.datetime(2023, 10, 2, 14, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1346323726, 'comment_body': ""This is a good bug fix for the production code! (Well, very unlikely case, but nice to have fixed).\r\n\r\nI would have put this in its own commit so it gets more emphasis; I'll try extracting it."", 'comment_created': datetime.datetime(2023, 10, 4, 18, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346324237, 'comment_body': 'Thinking about this a bit more, I think we should add this only if `settings.TEST_SUITE`; going to try doing that change for this commit.', 'comment_created': datetime.datetime(2023, 10, 4, 18, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346325202, 'comment_body': ""This bug fix would have been much better to submit an independent PR for, since it's fixing a regression that's in `main`; the bug in question went out to production last night because I hadn't had a chance to re-review this."", 'comment_created': datetime.datetime(2023, 10, 4, 18, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346349570, 'comment_body': 'Applied this revision so that this logic would only apply in the test suite; it\'s best to avoid changing production outcomes for testing reasons even if it\'s probably not going to come up in practice:\r\n\r\n```diff\r\ndiff --git a/zerver/models.py b/zerver/models.py\r\nindex 55e958d22f..10129cb14d 100644\r\n--- a/zerver/models.py\r\n+++ b/zerver/models.py\r\n@@ -3137,21 +3137,26 @@ class Message(AbstractMessage):\r\n         sending_client = self.sending_client.name.lower()\r\n \r\n         return (\r\n-            sending_client\r\n-            in (\r\n-                ""zulipandroid"",\r\n-                ""zulipios"",\r\n-                ""zulipdesktop"",\r\n-                ""zulipmobile"",\r\n-                ""zulipelectron"",\r\n-                ""zulipterminal"",\r\n-                ""snipe"",\r\n-                ""website"",\r\n-                ""ios"",\r\n-                ""android"",\r\n-                ""test suite"",\r\n+            (\r\n+                sending_client\r\n+                in (\r\n+                    ""zulipandroid"",\r\n+                    ""zulipios"",\r\n+                    ""zulipdesktop"",\r\n+                    ""zulipmobile"",\r\n+                    ""zulipelectron"",\r\n+                    ""zulipterminal"",\r\n+                    ""snipe"",\r\n+                    ""website"",\r\n+                    ""ios"",\r\n+                    ""android"",\r\n+                )\r\n             )\r\n-        ) or (""desktop app"" in sending_client)\r\n+            or (""desktop app"" in sending_client)\r\n+            # Since the vast majority of messages are sent by humans\r\n+            # in Zulip, treat test suite messages as such.\r\n+            or (sending_client == ""test suite"" and settings.TEST_SUITE)\r\n+        )\r\n \r\n     @staticmethod\r\n     def is_status_message(content: str, rendered_content: str) -> bool:\r\n```', 'comment_created': datetime.datetime(2023, 10, 4, 19, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346352395, 'comment_body': ""I don't have a readily available better idea; I think it'll be clear enough from the context. So let's just live with it and we can rethink when next revising that code path."", 'comment_created': datetime.datetime(2023, 10, 4, 19, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346352966, 'comment_body': ""Ended up deciding it's not worth the effort to extract, so just mentioned it in the commit message."", 'comment_created': datetime.datetime(2023, 10, 4, 19, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'e301abdf486c6bbcc03c8eebace1b1086fadb1c9', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600f40a991eba4ddcef3f6a58535abc779fa5a1b', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac14141a3598b741408df9cf4bc0af64f138ce47', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9fcd5b7f848d1eb4fe7bca04c547fa528f8c43a', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1369930744,mention: Implement notification part of @topic mention.,"This carries forward the work in #22855

<!-- Describe your pull request here.-->
* **First Commit**: [Review comment](https://github.com/zulip/zulip/pull/22855#discussion_r962193044)
* **Second & Third Commit**: [Comment](https://github.com/zulip/zulip/pull/22855#issuecomment-1239758013)
* **Fourth Commit**: [Review Comment](https://github.com/zulip/zulip/pull/25828#discussion_r1210158168), [CZO](https://chat.zulip.org/#narrow/stream/3-backend/topic/.40topic.20mention/near/1581610)
* **Fifth Commit**: Adds a 'has_topic_wildcards' instance variable to the 'MentionData' class for the detection of - possible topic wildcards mentions.
* **Sixth Commit**: Fetch users to be notified of @topic mentions.

Note:
Meaning of '**possible** topic wildcards mention': Here, the 'has_topic_wildcards' flag is set to true when there is a possibility of @topic mention. We are not sure yet, as the message rendering takes place at a later stage in the code flow.

Fixes part of #22829



<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25828,https://api.github.com/repos/zulip/zulip/pulls/25828,https://github.com/zulip/zulip/pull/25828,closed,1089,34,25,2,18,110,5,0,"[{'name': 'size: XL'}, {'name': 'integration review'}, {'name': 'buddy review'}, {'name': 'mentor review'}, {'name': 'priority integration review'}]",2023-05-30 07:16:58+00:00,2023-07-17 16:39:25+00:00,4180947.0,"48 days, 9:22:27","[{'comment_id': 1210149932, 'comment_body': ""Would `TypedDict` be a simpler way to do this (especially since we don't intend to add any methods to this dataclass)?"", 'comment_created': datetime.datetime(2023, 5, 30, 11, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1210151514, 'comment_body': 'Same question for `PossibleMentions` as well.', 'comment_created': datetime.datetime(2023, 5, 30, 11, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1210158168, 'comment_body': ""Do we want to rename this to make it clear that this *does not contain* topic wildcards? I don't know if we have a term right now to use for all of -- `all`, `everyone`, `stream` mentions together.\r\n\r\nI think calling this `stream_wildcards` might be a good idea, so as to contrast it wil `topic_wildcards`, and also since `everyone` and `all` are just aliases to mention everyone in the stream."", 'comment_created': datetime.datetime(2023, 5, 30, 11, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1210161016, 'comment_body': 'With ref to the other comment about `stream_wildcards`, `message_has_wildcards` here would become `message_has_stream_wildcards`, which I think reads nicely. What do you think?', 'comment_created': datetime.datetime(2023, 5, 30, 11, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1210185734, 'comment_body': ""Hmm reading the discussion around https://chat.zulip.org/#narrow/stream/3-backend/topic/REQ.20vs.20Pydantic/near/1453847, I'm not really sure. Let's keep this as is."", 'comment_created': datetime.datetime(2023, 5, 30, 12, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1211037708, 'comment_body': ""Agreed; renaming it `stream_wildcards` makes things more clear.\r\n\r\nSo, we should add a refactor commit to rename `wildcards` to `stream_wildcards` internally, keeping the `wildcard_mentioned` flag of `UserMessage` intact.\r\n\r\nWe don't plan to have a separate `UserMessage` flag for `topic_wildcards`.\r\n\r\nI will open a topic on CZO to get more input on this, and then I'll refactor accordingly."", 'comment_created': datetime.datetime(2023, 5, 31, 3, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1211989682, 'comment_body': 'I would be adding the following code block at line 771 of this file in later commits:\r\n\r\n```python\r\n # Test UserMessage row is created while user is deactivated if there is a topic wildcard mention\r\n # i.e. @topic\r\n    assert_stream_message_sent_to_idle_user(\r\n         ""Test @**topic** mention"", possibly_topic_wildcard_mentioned_user_ids={long_term_idle_user.id}\r\n    )\r\n    assert_stream_message_not_sent_to_idle_user(""Test @**bogus** mention"")\r\n\r\n```\r\nNot adding here as `assert_stream_message_sent_to_idle_user` (line 643) tests things other than `len(get_subscriptions_for_send_message())` which will be added in later commits, so tests can be added at that time.', 'comment_created': datetime.datetime(2023, 5, 31, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1212963643, 'comment_body': ""This will make 2 database queries, one to fetch the sender IDs, and one to fetch the reactor IDs.\r\nCan we avoid that and do a single query on the UserProfile table, maybe using Django's `Q` objects?\r\nRef: https://docs.djangoproject.com/en/4.2/topics/db/queries/#complex-lookups-with-q-objects"", 'comment_created': datetime.datetime(2023, 6, 1, 10, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1212967126, 'comment_body': 'A better name for this could be just `topic_participant_user_ids`. The uncertainty here is not regarding the user IDs set which we want, but rather regarding if there was an actual topic mention in the message, correct?', 'comment_created': datetime.datetime(2023, 6, 1, 10, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1212980948, 'comment_body': ""The idea of adding a `stream` to this set's name would be beneficial here also, for another reason.\r\nWith stream wildcard mentions, you only need to check that the recipient has the `wildcard_mentions` notification turned ON.\r\nWith topic wildcard mentions, you additionally have to check that the user has *participated* in the topic.\r\nAdding a `stream` to the set name would help highlight the difference, and make the set calculation logic more clear IMO :)"", 'comment_created': datetime.datetime(2023, 6, 1, 10, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1212987465, 'comment_body': 'It would be better to calculate the set of people who have enabled the setting earlier inside an `possible_wildcard_mention OR possible_topic_wildcard_mention` conditional (and call this set simply as `wildcard_mentions_enabled_user_ids` or something), and avoid the super-confusing possible/possibly naming all-together.', 'comment_created': datetime.datetime(2023, 6, 1, 11, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1212988551, 'comment_body': 'This logic is same as that of the one above, right? We should de-duplicate this and put it under a single `if possible_topic_wildcard_mention` conditional.', 'comment_created': datetime.datetime(2023, 6, 1, 11, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1216056672, 'comment_body': 'I added a prep commit to address this. (Fourth commit)\r\n\r\n[CZO Discussion](https://chat.zulip.org/#narrow/stream/3-backend/topic/.40topic.20mention/near/1581610)', 'comment_created': datetime.datetime(2023, 6, 4, 2, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1216057243, 'comment_body': 'I added a prep commit to address this. (Fourth commit)', 'comment_created': datetime.datetime(2023, 6, 4, 2, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1216080453, 'comment_body': '> This will make 2 database queries, one to fetch the sender IDs...\r\n\r\n`message.sender_id` won\'t cost an extra db query as the `Message` table already has `sender_id` available.\r\n\r\nRef: https://docs.djangoproject.com/en/4.2/ref/models/fields/#database-representation\r\n> Behind the scenes, Django appends ""_id"" to the field name to create its database column name.\r\n---\r\nAlso, since this query is now getting used in a couple of places ([#20977 > zerver/lib/actions.py](https://github.com/zulip/zulip/commit/1a46df40c33104b685c154a99a57d7bd8dc2c6c0#diff-9a1fd3f8a1bd0ccd686ac2d96d265d3d5dce323f6fc191adac2cb88500af6e1cR6456)),\r\n\r\nI\'m planning to do a refactoring in a separate commit to have this query inside a lib function, say, `sent_or_reacted_to_messages_user_ids` and use it everywhere.', 'comment_created': datetime.datetime(2023, 6, 4, 2, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1216085593, 'comment_body': '`topic_participant_user_ids` sounds better. Changed.\r\n\r\n---\r\n\r\n> The uncertainty here is not regarding the user IDs set which we want, but rather regarding if there was an actual topic mention in the message, correct?\r\n\r\nI was looking at it from a different perspective: since we are uncertain about @topic mention, we are uncertain about the user_ids contained in the list to be notified later in the code flow. (Thinking this way is confusing, actually; I agree.)', 'comment_created': datetime.datetime(2023, 6, 4, 2, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1216086998, 'comment_body': 'These changes were included as part of the fourth commit.', 'comment_created': datetime.datetime(2023, 6, 4, 2, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1216089745, 'comment_body': 'Avoided the possible/possibly naming and [re-wrote these conditionals](https://github.com/zulip/zulip/pull/25828/commits/514f0def1ad9640fa3ac6baeb8010b314e7bbb17#diff-d803e860e5ff2068cb51aab642015247be71eb4045444a4dcb82e86486f22a4dR276) in a much simpler and better way.', 'comment_created': datetime.datetime(2023, 6, 4, 2, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1216090159, 'comment_body': 'See the [previous comment](https://github.com/zulip/zulip/pull/25828#discussion_r1216089745).', 'comment_created': datetime.datetime(2023, 6, 4, 2, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1222289016, 'comment_body': 'I think a dataclass is fine for this.', 'comment_created': datetime.datetime(2023, 6, 7, 23, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1222291166, 'comment_body': ""So this migration is a quirk of Django -- this migration file doesn't actually change the database at all; it just exists to tell the Django migration code that the new choice is a possible valid value in case another migration interacts with it. Rather than create a new migration that doesn't actually change the database, we should edit the last migration touching this field to just have the extra choice included."", 'comment_created': datetime.datetime(2023, 6, 7, 23, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1222291612, 'comment_body': ""This string doesn't appear in the UI, right? "", 'comment_created': datetime.datetime(2023, 6, 7, 23, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1222293742, 'comment_body': ""This module needs to support the old format, because there can be events containing a `wildcard_mention_user_ids` field in the Tornado queues at the time the Zulip server is upgraded, and we need those to not break. Usually it's pretty simple -- if a field by that name exists, replace it with a `stream_wildcard_mention_user_ids` field. \r\n\r\nSearch for `TODO/compatibility` in this file for examples of how to do this.\r\n\r\nThere may be a similar issue for the output of `maybe_enqueue_notifications`, too -- we should either avoid changing the format of what is enqueued by that function, or add similar compatibility code."", 'comment_created': datetime.datetime(2023, 6, 8, 0, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1222296879, 'comment_body': ""This should probably be turned into a `zerver.lib.topic` method `participants_for_topic` -- it's a clear enough definition that we may find we want to use it for something else later, and I think it'll help readability. \r\n\r\nWe should also document that function as potentially expensive -- the `Message` part is pretty cheap, but the `Reaction` part may or may not be if there's a lot of messages in the topic. And add a comment here that it's OK to do this potentially expensive thing since we only do it when `@topic` appears in the message body.\r\n\r\n(It's also the sort of thing that could be optimized to a single query if profiling suggested that's useful)."", 'comment_created': datetime.datetime(2023, 6, 8, 0, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1222301844, 'comment_body': ""I feel like this probably should be written using the Python set intersection syntax that probably takes care of doing the loop order starting from the smallest set for us, but if we're doing this loop structure you definitely want the other loop order, because `wildcard_mentions_notify_user_ids` is probably everyone subscribed to the stream, whereas `topic_wildcard_mention_user_ids` is typically going to be the small subset who've participated in this topic.\r\n\r\nI think that means we want `topic_wildcard_mention_user_ids = topic_participant_user_ids.intersection(wildcard_mentions_notify_user_ids)`."", 'comment_created': datetime.datetime(2023, 6, 8, 0, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1222306851, 'comment_body': 'This should be discussed in #design, but I was thinking of something more like ""because @topic was mentioned in #{{ stream_name }} > {{ topic_name }}."" or ""because all participants were mentioned in #{{ stream_name }} > {{ topic_name }}.`', 'comment_created': datetime.datetime(2023, 6, 8, 0, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1222307555, 'comment_body': 'I think actually it makes sense to trigger soft-reactivating topic participants -- the rationale being that generally mentioning a topic is going to reach a small set of users who are probably already active, and anyone who is not already active has a decent change of being reactivated by the mention.', 'comment_created': datetime.datetime(2023, 6, 8, 0, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1223845341, 'comment_body': 'I think we need to change the value stored in the DB as ""wildcard_mentioned"" to ""stream_wildcard_mentioned"" ?', 'comment_created': datetime.datetime(2023, 6, 9, 5, 0, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1224072475, 'comment_body': 'No, not the sender_id. The 2 queries I meant was one on the message table and another on the reactions table (their results will be fetched in Python and then the OR will be calculated).\r\nWe may want to turn that into a single query as Tim mentioned below in https://github.com/zulip/zulip/pull/25828#discussion_r1222296879', 'comment_created': datetime.datetime(2023, 6, 9, 9, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1224078821, 'comment_body': 'The reason for that being databases do a lot of work to optimise how the result of a query set is calculated. So telling the database to do the OR would most probably be faster than doing it in memory in Python.', 'comment_created': datetime.datetime(2023, 6, 9, 9, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1225407204, 'comment_body': 'Makes sense.\r\n\r\nI added a separate commit for this. (Last commit)', 'comment_created': datetime.datetime(2023, 6, 10, 14, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1225408392, 'comment_body': 'I made the changes after [discussion in CZO.](https://chat.zulip.org/#narrow/stream/101-design/topic/notification.20emails/near/1588768)\r\n\r\n> You are receiving this because all topic participants were mentioned in #{{ stream_name }} > {{ topic_name }}.', 'comment_created': datetime.datetime(2023, 6, 10, 14, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1225412751, 'comment_body': '>  this probably should be written using the Python set intersection syntax that probably takes care of doing the loop order starting from the smallest set for us\r\n\r\nYes, verified with [the docs](https://wiki.python.org/moin/TimeComplexity).\r\n\r\n* Average Time Complexity for `intersection` is `O(min(len(setA), len(setB)))`\r\n* Worst Time Complexity is `O(len(setA)*len(setB))` -- I think this would be the case only when accessing element from map is `O(n)`, which is rare.\r\n\r\nIn short, we have,\r\n`topic_wildcard_mention_user_ids` = `topic_participant_user_ids.intersection(wildcard_mentions_notify_user_ids)`.', 'comment_created': datetime.datetime(2023, 6, 10, 15, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1225419987, 'comment_body': 'As suggested in [#25828 (comment)](https://github.com/zulip/zulip/pull/25828#issuecomment-1581675528) -- addressed this in #25978 ', 'comment_created': datetime.datetime(2023, 6, 10, 15, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1225420254, 'comment_body': ""Right, It doesn't appear in the UI."", 'comment_created': datetime.datetime(2023, 6, 10, 15, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1225420725, 'comment_body': 'This has been addressed in `mention: Send notifications for @topic wildcard mentions.` commit.', 'comment_created': datetime.datetime(2023, 6, 10, 15, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1226067941, 'comment_body': ""Yeah, changing existing values in the database sounds correct -- but I believe this migration file just changes the set of values that Django's Python implementation thinks are valid values, without changing existing values in the database at all.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 6, 12, 4, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1228985868, 'comment_body': ""We'll need to do two things here:\r\n1. Edit the possible choices to what we want. Edit 0331_scheduledmessagenotificationemail.py as well. Reasoning: https://chat.zulip.org/#narrow/dm/16839,22341-dm/near/1592884\r\n2. To update the existing values in the DB, create a custom migration. See https://github.com/zulip/zulip/pull/24354/commits/0cfa9c96f58841f531987a9422f118ea6fed594d for an example."", 'comment_created': datetime.datetime(2023, 6, 14, 5, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1228987466, 'comment_body': '@timabbott does that sound right?', 'comment_created': datetime.datetime(2023, 6, 14, 5, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1240792510, 'comment_body': 'This is the updated query:\r\n```python\r\ndef participants_for_topic(recipient_id: int, topic_name: str) -> Set[int]:\r\n    """"""\r\n    Users who either sent or reacted to the messages in the topic.\r\n    The function is expensive for large numbers of messages in the topic.\r\n    """"""\r\n    messages = Message.objects.filter(recipient_id=recipient_id, subject__iexact=topic_name)\r\n    participants = set(\r\n        UserProfile.objects.filter(\r\n            Q(id__in=Subquery(messages.values(""sender_id"")))\r\n            | Q(\r\n                id__in=Subquery(\r\n                    Reaction.objects.filter(message__in=messages).values(""user_profile_id"")\r\n                )\r\n            )\r\n        ).values_list(""id"", flat=True)\r\n    )\r\n    return participants\r\n```', 'comment_created': datetime.datetime(2023, 6, 24, 13, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1240795105, 'comment_body': 'In the 7th commit:\r\n1.[ Edit 0031_scheduledmessagenotificationemail.py](https://github.com/zulip/zulip/pull/25828/commits/8afe80ab44c3833f85eefdc941845980bbf04105#diff-932e136b53606abc4de3a5f5fded9fb351850927c044dc24812c98eab2773843)\r\n2. [Update the existing values in DB](https://github.com/zulip/zulip/pull/25828/commits/8afe80ab44c3833f85eefdc941845980bbf04105#diff-0682951bac2269a86e94d1fbff6ec439749c9c13d033d80ab1fd38f63846c993)', 'comment_created': datetime.datetime(2023, 6, 24, 13, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1240795311, 'comment_body': '[#25828 (Comment)](https://github.com/zulip/zulip/pull/25828#discussion_r1240792510)', 'comment_created': datetime.datetime(2023, 6, 24, 13, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1244102082, 'comment_body': ""This naming is a bit confusing. Maybe it would be better to call this `stream_wildcard_mention_in_followed_topic_user_ids`?\r\nThis is just to avoid the weird `followed_topic_topic_wildcard_mention_user_ids` name later on.\r\n\r\n(Really sorry for asking to rename this again, but I didn't foresee the `topic_topic` thing earlier. Maybe we should bring this up in the CZO topic.)"", 'comment_created': datetime.datetime(2023, 6, 27, 17, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244107240, 'comment_body': ""I think we should also do this migration for the `follow_topic` equivalent. Most probably there won't be any entries in the database with that trigger, but just in case anyone followed a topic through the API or something, we should be safe."", 'comment_created': datetime.datetime(2023, 6, 27, 17, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244129875, 'comment_body': ""These comments should probably also explain why we don't need similar compatibility code for the `followed_topic_...` variables (which is because when this change was made, followed topics weren't available for to users).\r\nThere is still a rare case that someone used the API to follow a topic, which queued an event with that variable. I think it might be better to just add the compatibility code for the `follow_topic_...` variables as well."", 'comment_created': datetime.datetime(2023, 6, 27, 17, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244628754, 'comment_body': 'Re my comment above: `stream_wildcard_mentioned_in_followed_topic` might be a better trigger name here (since we are anyway doing a migration to change the name in the database).', 'comment_created': datetime.datetime(2023, 6, 28, 3, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244632485, 'comment_body': ""Don't we have tests to catch this sort of a bug? If not, we should add a test for this (or update the existing ones to catch such a bug)."", 'comment_created': datetime.datetime(2023, 6, 28, 3, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244641012, 'comment_body': 'These tests for testing the priority can probably be compressed to a single test, which would work like so:\r\nFirst send a single message which contains the following elements: personal mention, small user group mention, big user group mention, stream wildcard mention, and the topic is followed. Then send the message, and check the email text and trigger.\r\n\r\nThen, remove the element from the message which corresponds to the earlier trigger (ie, the highest prioitu). and check that the email text corresponds to the 2nd highest priority trigger.\r\n\r\nThen check the 3rd highest priority trigger, and so on.\r\n\r\nThat way, we have only `n` assertions for `n` possible triggers/email texts, instead of upto `nC2` assertions in the current scheme. This might be good prep work to do in a separate commit at the beginning of the PR.', 'comment_created': datetime.datetime(2023, 6, 28, 4, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244642282, 'comment_body': 'This ""TODO"" will be updated when we decide on the text, right?', 'comment_created': datetime.datetime(2023, 6, 28, 4, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244646527, 'comment_body': 'This would become `topic_wildcard_mention_in_followed_topic_user_ids`, reference my earlier comment.', 'comment_created': datetime.datetime(2023, 6, 28, 4, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244648115, 'comment_body': 'Why do we need round brackets around the `followed_topic_wildcard_mentions_notify_user_ids`?\r\n\r\nThat is, why not `followed_topic_stream_wildcard_mentions_user_ids = followed_topic_wildcard_mentions_notify_user_ids` instead of `followed_topic_stream_wildcard_mentions_user_ids = (followed_topic_wildcard_mentions_notify_user_ids)`', 'comment_created': datetime.datetime(2023, 6, 28, 4, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244648795, 'comment_body': 'Ref the rename comment earlier, `followed_topic_wildcard_mentions_notify_user_ids` would probably remain the same, this is because it is the same set irrespective of stream/topic mention, and is calculated solely based on user settings and user topics.', 'comment_created': datetime.datetime(2023, 6, 28, 4, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244652123, 'comment_body': ""This should use `do_change_user_settings`.\r\n(Maybe it would be nice to change all of this test in a sweep in a prep commit, since this test uses the `.save()` anti-pattern. But if not that, we should at least make sure we don't introduce any new instances of that anti-pattern.)"", 'comment_created': datetime.datetime(2023, 6, 28, 4, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244653666, 'comment_body': 'Did `othello` come here from some earlier tests?', 'comment_created': datetime.datetime(2023, 6, 28, 4, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244655036, 'comment_body': 'Should we also rename tests like these to say `stream_wildcard`? (ie, `test_mention_wildcard` -> `test_mention_stream_wildcard`)', 'comment_created': datetime.datetime(2023, 6, 28, 4, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244655893, 'comment_body': 'This would probably become `test_mention_everyone_stream_wildcard`', 'comment_created': datetime.datetime(2023, 6, 28, 4, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244664089, 'comment_body': ""We renamed this from `wildcard` to `stream_wildcard` in the first commit, and now we're renaming it again.\r\nShould we have kept it as just `wildcard` earlier? (And maybe do `wildcard` -> `wildcard_mentioned` now, if necessary)"", 'comment_created': datetime.datetime(2023, 6, 28, 4, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1245491053, 'comment_body': '[CZO Discussion](https://chat.zulip.org/#narrow/stream/3-backend/topic/.40topic.20mention/near/1600048)', 'comment_created': datetime.datetime(2023, 6, 28, 16, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1245523563, 'comment_body': '[As discussed earlier](https://chat.zulip.org/#narrow/stream/378-api-design/topic/allowed.20visibility.20policies/near/1580224):\r\n>   I don\'t think it\'s necessarily a problem to have the API allow you to follow topics -- it may be useful for testing parts of the feature on [chat.zulip.org](http://chat.zulip.org/) before we\'re ready to turn it on for everyone, and I don\'t think we intend to have intermediate states where it is a security problem that you were allowed to follow a topic.\r\n\r\n> We just don\'t guarantee to users that it\'ll be a good experience to do so.\r\n\r\nSo, should we care about providing a good experience?  Our docs don\'t have ""Follow"" as a visibility policy as of now.', 'comment_created': datetime.datetime(2023, 6, 28, 17, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1245639450, 'comment_body': 'Linters adds it.', 'comment_created': datetime.datetime(2023, 6, 28, 19, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1246858773, 'comment_body': ""* We still have n assertions for n possible triggers\r\n* I think it's better to test by sending separate messages having different elements (personal mention / wildcards), instead of a single message having all those elements. The reason being: it's more practical that a user has a few different missed messages having different elements and the email text priority is decided based on triggers of all those messages. a single message having all those triggers doesn't seems a practical case (although it will also verify the code logic).\r\n* Having separate tests seems more readable to me."", 'comment_created': datetime.datetime(2023, 6, 29, 16, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1246905200, 'comment_body': '`othello` is subscribed to the stream. When we set `possible_stream_wildcard_mention=True`, `othello` is included in the set.', 'comment_created': datetime.datetime(2023, 6, 29, 16, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1246947947, 'comment_body': ""I think it's fine to have `all`, `everyone`, `stream`, `topic` separate. -- The function name clearly tells what it does.\r\n\r\nThe only change I think we should do is to change previous test's name from `test_mention_wildcard`  to `test_mention_all` ?\r\n\r\nIf we follow the pattern `test_mention_everyone_stream_wildcard`; next test will become `test_mention_stream_stream_wildcard` which doesn't look good.\r\n"", 'comment_created': datetime.datetime(2023, 6, 29, 17, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1246948572, 'comment_body': 'See [this comment](https://github.com/zulip/zulip/pull/25828/commits/95169f3a0514cd984ef9c930c57179e454485280#r1246947947).\r\n\r\nI think it would be better to rename it to `test_mention_all` ?', 'comment_created': datetime.datetime(2023, 6, 29, 17, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1246954028, 'comment_body': 'Makes sense. Changes done.', 'comment_created': datetime.datetime(2023, 6, 29, 18, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1246957607, 'comment_body': ""Used `do_change_user_settings` here.\r\n\r\nI'll create a separate PR to follow the suggested pattern. (This PR is already too large :))"", 'comment_created': datetime.datetime(2023, 6, 29, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1246961247, 'comment_body': '[CZO Discussion](https://chat.zulip.org/#narrow/stream/101-design/topic/notification.20emails/near/1598232)', 'comment_created': datetime.datetime(2023, 6, 29, 18, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1246962809, 'comment_body': 'Added migration for `follow_topic` equivalent.', 'comment_created': datetime.datetime(2023, 6, 29, 18, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1247147027, 'comment_body': '**mention_count context variable:**\r\n\r\n`mention_count` is stale variable. Introduced in bc861b4441f129cfb1bb6dc21243d8424fb0dac1 then never got used. -- Removed that in the first commit.\r\n\r\n**Regarding the senders list calculation here:**\r\n\r\n* This is also stale and will be removed.\r\n\r\n* I removed it locally but one test case failed. On investigating i found a couple of bugs which i have [explained in CZO](https://chat.zulip.org/#narrow/stream/9-issues/topic/send.20missed.20message.20emails.20as.20user/near/1601380).\r\n\r\n* Once those bugs are fixed and test updated, we can safely remove this code block.\r\n\r\n* Ideally, this should have been removed in c4d28777ec6bf62cf0e0f9217b3ba09597161afd -- as we no longer use `sender_str` as subject for mentions.', 'comment_created': datetime.datetime(2023, 6, 29, 20, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1247647336, 'comment_body': ""Makes sense. We just need to make sure the server doesn't throw errors because of this (`.get` without a default value, or `.pop` can throw errors if the key isn't present in the dict, so we need to make sure isn't any such code).\r\nUsers not receiving notifications for followed topics is fine, but runtime errors aren't"", 'comment_created': datetime.datetime(2023, 6, 30, 9, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247648151, 'comment_body': 'Ah I see :)', 'comment_created': datetime.datetime(2023, 6, 30, 9, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247649954, 'comment_body': 'Cool!', 'comment_created': datetime.datetime(2023, 6, 30, 9, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247688934, 'comment_body': 'Makes sense. Great to have caught these bugs :)', 'comment_created': datetime.datetime(2023, 6, 30, 9, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247693471, 'comment_body': 'Cool, makes sense to me :)', 'comment_created': datetime.datetime(2023, 6, 30, 10, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247697169, 'comment_body': 'It seems the tests are patterned as `assert(P1>P2)`, `assert(P2>P3)`, ... where `Px` is priority `x`. So `n-1` tests in total :)\r\nMight be helpful to add a comment here explaining the testing pattern, but not a blocker.\r\nAlso, I noticed that we currently have an existing test called `test_wildcard_over_stream_mention_priority`, the name of which is kinda misleading. `test_wildcard_mention_over_stream_message_priority` might be better?', 'comment_created': datetime.datetime(2023, 6, 30, 10, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1248431237, 'comment_body': 'We have default value available.', 'comment_created': datetime.datetime(2023, 7, 1, 3, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1248774084, 'comment_body': '[#25978 (comment)](https://github.com/zulip/zulip/pull/25978#discussion_r1247709379)', 'comment_created': datetime.datetime(2023, 7, 1, 11, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1248774241, 'comment_body': '[#25978 (Comment)](https://github.com/zulip/zulip/pull/25978#discussion_r1247685183)', 'comment_created': datetime.datetime(2023, 7, 1, 11, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1248774410, 'comment_body': '[#25978 (Comment)](https://github.com/zulip/zulip/pull/25978#discussion_r1247685183)', 'comment_created': datetime.datetime(2023, 7, 1, 11, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1251483084, 'comment_body': ""Yeah that's correct."", 'comment_created': datetime.datetime(2023, 7, 4, 4, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1251483906, 'comment_body': ""Yeah that looks great! \r\n\r\nThe further thing we can do is log the actual database query and then do an `EXPLAIN ANALYZE` on that query to make sure it's using good indexes; but I expect it should be."", 'comment_created': datetime.datetime(2023, 7, 4, 4, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253062039, 'comment_body': 'The commit message should probably mention why these comments are unnecessary :)', 'comment_created': datetime.datetime(2023, 7, 5, 12, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1253066713, 'comment_body': 'Would be nice to mention which commit introduced these tests (and did not include the code to follow the topic which it was supposed to), for reference, in the commit message.', 'comment_created': datetime.datetime(2023, 7, 5, 12, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1253068134, 'comment_body': 'FTR, this renaming was done in #25978.', 'comment_created': datetime.datetime(2023, 7, 5, 12, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1253082975, 'comment_body': ""This code looks much cleaner than the first version!\r\n\r\nOne question I have is, should we be doing a deep/shallow copy of the common variables (`wildcard_mentions_notify_user_ids` and `followed_topic_wildcard_mentions_notify_user_ids`)? I don't remember how Python does copying of variables etc, but I do remember than its a bit different than other languages like C++/Java.\r\n\r\nIf not that, we should at least make sure that we have a test simulating a scenario of a message containing both stream and topic mentions, and then verify that our user IDs sets are the same as what we expect."", 'comment_created': datetime.datetime(2023, 7, 5, 13, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1253105466, 'comment_body': 'Oh I see we have a test for that, great! :)', 'comment_created': datetime.datetime(2023, 7, 5, 13, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1253555378, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 5, 19, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1253555709, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 5, 19, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1254682814, 'comment_body': ""Had a discussion around this with Abhijeet on CZO (DM):\r\n\r\nHere it makes a shallow copy. But even if the sets are changed at a later stage, it will not affect the behavior as we are no longer going to reuse the `followed_topic_wildcard_mentions_notify_user_ids` or `wildcard_mentions_notify_user_ids`.\r\n\r\nAnd we already have tests to cover the expected behavior. So, we're good to go."", 'comment_created': datetime.datetime(2023, 7, 6, 16, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1255000042, 'comment_body': 'This `not` is a noop, because that flag will already be there, right? Might be cleaner to not have it.', 'comment_created': datetime.datetime(2023, 7, 6, 22, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1255000400, 'comment_body': 'This first block might be better extracted as a separate variable.', 'comment_created': datetime.datetime(2023, 7, 6, 22, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1255004185, 'comment_body': 'maybe ""mentioned all topic participants:"" would be better -- I don\'t think we need the "" the "" here.', 'comment_created': datetime.datetime(2023, 7, 6, 22, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1255323969, 'comment_body': 'Done.\r\n\r\nAlso removed ""the"" at line 686 in this file.', 'comment_created': datetime.datetime(2023, 7, 7, 6, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1255341120, 'comment_body': 'Suppose a message has both `stream`\xa0and\xa0`topic`\xa0wildcard mentions.\r\n\r\nWe already set the `wildcard_mentioned`\xa0flag for all the\xa0`um_eligible_user_ids` earlier in this function due to the stream wildcard mention. \r\n```python\r\n    base_flags = 0\r\n    if rendering_result.mentions_stream_wildcard:\r\n        base_flags |= UserMessage.flags.wildcard_mentioned\r\n```\r\n\r\nSo using this\xa0`not`, we can skip the following operation in the\xa0if\xa0conditional:\r\n\r\n```python\r\nuser_profile_id in topic_wildcard_mention_user_ids.union(\r\n   topic_wildcard_mention_in_followed_topic_user_ids\r\n)\r\n```\r\n\r\nIn simple words, if the message has both the stream and topic wildcard mention, we can skip the checks related to topic wildcard (using this `not`), as we already have set the `wildcard_mentioned` flag for everyone. There is no need to check and set it again for individual users.', 'comment_created': datetime.datetime(2023, 7, 7, 6, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1255475673, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 7, 8, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1255481496, 'comment_body': 'One improvement I made:\r\n\r\nInstead of performing the union operation within a loop, I extracted that as a separate variable named `all_topic_wildcard_mention_user_ids`', 'comment_created': datetime.datetime(2023, 7, 7, 8, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1257466039, 'comment_body': ""> we can skip the checks related to topic wildcard (using this not)\r\n\r\nThat makes sense, but I'm not sure if this optimization would make that much of a difference, since all the data here is in-memory?"", 'comment_created': datetime.datetime(2023, 7, 9, 11, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1257468346, 'comment_body': ""Hm, right. Earlier the union operation was there in the if statement itself. Since I've extracted it out, we can skip this `not` check.\r\n\r\nEdit: Removed the `not` expression"", 'comment_created': datetime.datetime(2023, 7, 9, 11, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1259796865, 'comment_body': 'Did we decide on having the same strings for the normal and in-followed-topic case?', 'comment_created': datetime.datetime(2023, 7, 11, 14, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1259828715, 'comment_body': ""Would be great if we didn't have any stray trigger strings in this file, as well as in `test_notification_data.py`, although not a blocker :)"", 'comment_created': datetime.datetime(2023, 7, 11, 14, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1259880780, 'comment_body': 'Should we be first deactivating, then testing here? We need to check that message is created while the user is soft-deactivated, correct?', 'comment_created': datetime.datetime(2023, 7, 11, 15, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1259899413, 'comment_body': 'Yes -- [CZO Discussion](https://chat.zulip.org/#narrow/stream/101-design/topic/notification.20emails/near/1603388)\r\n> OK, I think that plan is reasonable and certainly simplest -- we can always change that detail if we find we get feedback that suggests a different model in this rare corner case.', 'comment_created': datetime.datetime(2023, 7, 11, 15, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1259906871, 'comment_body': ""Included in my TODO list. -- stray trigger strings have been used in a lot of places in this file and a few others. I'll change all of them in a separate mini PR."", 'comment_created': datetime.datetime(2023, 7, 11, 15, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1259952594, 'comment_body': 'Ah right!\r\n\r\nFixed this.', 'comment_created': datetime.datetime(2023, 7, 11, 16, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1264456634, 'comment_body': 'Does `topic_wildcard_mention_user_ids` include `topic_wildcard_mention_in_followed_topic_user_ids`? It might be really good to have a comment here making that extremely clear.', 'comment_created': datetime.datetime(2023, 7, 15, 15, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1264456715, 'comment_body': 'These comments should be line wrapped to 80 characters.', 'comment_created': datetime.datetime(2023, 7, 15, 15, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1264518071, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 15, 17, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1264518085, 'comment_body': 'Comment added.', 'comment_created': datetime.datetime(2023, 7, 15, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1272207807, 'comment_body': '#26339 ', 'comment_created': datetime.datetime(2023, 7, 24, 12, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1282459191, 'comment_body': ""> I'll create a separate PR to follow the suggested pattern. (This PR is already too large :))\r\n\r\nOpened #26404 "", 'comment_created': datetime.datetime(2023, 8, 2, 22, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}]","[{'commit_sha': 'b7516aa0cae59624b3d5c9d18fddb3387ee0217b', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b63e20f1dfe6bf517cd0c20e288d24a2fabc2d95', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1387154448,mention: Replace 'wildcards' with 'stream_wildcards'.,"**Summary**

[#25828 (comment)](https://github.com/zulip/zulip/pull/25828#issuecomment-1581675528)
> The 4th commit might be worth extracting to a separate PR to make it easier to verify we're handling https://github.com/zulip/zulip/pull/25828#discussion_r1222293742 correctly; I think the rename is a good change but we want to be really careful, because bugs of that form can require manual intervention to handle in production.

---
This PR replaces the `wildcard` keyword in the codebase with `stream_wildcard` at some places for better readability, as we plan to introduce `topic_wildcards` as a part of the '@topic mention' project.

Currently, **wildcards = [""all"", ""everyone"", ""stream""]** which is an alias to mention everyone in the stream, hence better renamed as **stream_wildcards**.

Eventually, we will have:
* `stream_wildcard` as an alias to mention everyone in the stream.
* `topic_wildcard` as an alias to mention everyone in the topic.
* `wildcard` refers to 'stream_wildcard' and 'topic_wildcard' as a whole.
---
**Questions:**

* [#25828 (comment)](https://github.com/zulip/zulip/pull/25828#discussion_r1222291166) -- Doubt related to django migrations.
---
**Manual Testing**

After addressing this important [review comment](https://github.com/zulip/zulip/pull/25828#discussion_r1222293742).

I did manual testing by adding the translation code (`TODO/compatibility`) in `event_queue.py` and keeping the field in the event sent by `message_send` and `message_edit` codepath as `wildcard_mention_user_ids` (instead of `stream_wildcard_mention_user_ids`).

Used wildcard mentions in messages with no error shown on the console.

With the earlier code (no translation code added), it was indeed giving unexpected results.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

---
<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25978,https://api.github.com/repos/zulip/zulip/pulls/25978,https://github.com/zulip/zulip/pull/25978,closed,742,295,28,7,7,13,3,0,"[{'name': 'size: XL'}, {'name': 'integration review'}, {'name': 'buddy review'}]",2023-06-10 13:39:55+00:00,2023-07-04 05:03:18+00:00,2042603.0,"23 days, 15:23:23","[{'comment_id': 1247635839, 'comment_body': 'Ideally, code here should get the strings from from the `NotificationTriggers` class in `models.py`. Could you do that sweep in a prep commit (I think I missed doing that in c3319a5231)?', 'comment_created': datetime.datetime(2023, 6, 30, 9, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247685183, 'comment_body': 'Ref: https://github.com/zulip/zulip/pull/25828/files#r1246947947\r\nThinking about this again, since the tests for `@everyone`/`@stream`/`@all` are mostly the same, I wonder if we can test all of those in a since test function inside a loop? (This might be good prep work so that later on we have clearly separate tests for stream wildcards and topic wildcards)\r\n```py\r\n    def test_mention_stream(self) -> None:\r\n        user_profile = self.example_user(""othello"")\r\n        msg = Message(sender=user_profile, sending_client=get_client(""test""))\r\n        for mention_string in zerver.lib.mention.py.stream_wildcards:\r\n            content = f""@**{mention_string}** test""\r\n            rendering_result = render_markdown(msg, content)\r\n            self.assertEqual(\r\n                rendering_result.rendered_content,\r\n                f\'<p>@{mention_string} test</p\',\r\n            )\r\n            self.assertTrue(rendering_result.mentions_wildcard)\r\n            self.assertFalse(rendering_result.mentions_topic_wildcard)\r\n            self.assertTrue(rendering_result.mentions_stream_wildcard)\r\n```', 'comment_created': datetime.datetime(2023, 6, 30, 9, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247709379, 'comment_body': 'This test name is confusing. `test_wildcard_mention_over_followed_topic_notif_priority` or something might be better (the current name suggests the test has something to do with mentions in followed topics, because of the `followed_topic_mention` substring).', 'comment_created': datetime.datetime(2023, 6, 30, 10, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247710523, 'comment_body': ""Similar to the previous comment, `test_followed_topic_notif_over_stream_message_notif_priority` might be better. We aren't testing any mentions at all in this test 🙂"", 'comment_created': datetime.datetime(2023, 6, 30, 10, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247716066, 'comment_body': ""Why this comment here? We haven't gotten to actually implementing @topic here, right?"", 'comment_created': datetime.datetime(2023, 6, 30, 10, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1247740311, 'comment_body': 'Or, more concisely,\r\n```py\r\n# TODO/compatibility: `stream_wildcard_mention_email_notify` was called\r\n# `wildcard_mention_email_notify` earlier. Remove this when ...\r\nstream_wildcard_mention_email_notify = internal_data.get(\r\n        ""stream_wildcard_mention_email_notify"", False\r\n    ) or internal_data.get(\r\n        ""wildcard_mention_email_notify"", False\r\n    )\r\n```', 'comment_created': datetime.datetime(2023, 6, 30, 11, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1248793542, 'comment_body': 'I think we should keep it consistent with other existing `TODO/compatibility` codeblocks in this file. Or change all of them in a prep commit ?\r\n\r\nTo me, the current codeblock looks more readable.', 'comment_created': datetime.datetime(2023, 7, 1, 12, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1248794021, 'comment_body': ""Hm, sorry. This isn't needed here. -- Removed."", 'comment_created': datetime.datetime(2023, 7, 1, 12, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1248794173, 'comment_body': 'Renamed it.', 'comment_created': datetime.datetime(2023, 7, 1, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1248794249, 'comment_body': 'Renamed', 'comment_created': datetime.datetime(2023, 7, 1, 12, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1248795693, 'comment_body': 'Added a [prep commit.](https://github.com/zulip/zulip/pull/25828/commits/3e1c48fe2f158ec47c058ce1a8fbe73ee3348659)\r\n\r\nI have kept it after the rename commit to avoid using `wildcard` then again correcting it to `stream_wildcard`. Since we are introducing a new function, it makes more sense to add it with the `stream_wildcard` term.', 'comment_created': datetime.datetime(2023, 7, 1, 12, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1248795984, 'comment_body': 'Added a prep commit. -- first commit.', 'comment_created': datetime.datetime(2023, 7, 1, 12, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1248863311, 'comment_body': 'Hmm right. I was mostly thinking about how to avoid long code, since we need to put this compatibility code in multiple places. But the current version is OK as well.', 'comment_created': datetime.datetime(2023, 7, 1, 14, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}]","[{'commit_sha': 'f3d5f21667a4a4e2023c17b867d6fe89d2a204c5', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cebc3eccc4ef0f6f6210ab43e7e71ddd0a3b017', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'febc58de2c6d542745989155ea7254c452c5b44d', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94ac3429dceb2b4b0467a4f6292ce32da2247ef4', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a2d9cf1fe59b9e44d93b5db2b0179d64a1ac106', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4563ae53c856515f9e5970e393e1e1e0da534b5', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4fa82ea2065703e357f365707ea6215e4c3a966', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1421502665,mention: Fetch users to be notified of @topic mentions.,"[#25828 (comment)](https://github.com/zulip/zulip/pull/25828#pullrequestreview-1514442343)
> I think the group of first 6 commits would be a good prefix to split into a new PR so that it can be merged off. The notifications commit is pretty large and would be easier to review independently :)",True,26195,https://api.github.com/repos/zulip/zulip/pulls/26195,https://github.com/zulip/zulip/pull/26195,closed,358,83,14,7,7,6,3,0,"[{'name': 'size: XL'}, {'name': 'integration review'}, {'name': 'mentor review'}]",2023-07-05 17:39:27+00:00,2023-07-13 18:34:48+00:00,694521.0,"8 days, 0:55:21","[{'comment_id': 1254956150, 'comment_body': ""Most correctly, we only call this when there's syntax that might be an `@topic` mention, without having confirmed the syntax isn't, say, in a code block."", 'comment_created': datetime.datetime(2023, 7, 6, 21, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1254997553, 'comment_body': 'Hmm, can you start an ""api design"" conversation about this `data-user-id` value? I think it\'s possible we want a special value of ""topic"" or some other indication that is the a topic mention; I guess simplest would be to keep the `data-user-id` as `*` but also have a `topic-mention` class on the `user-mention` element. As it is, the only way for clients to determine whether a given mention inside a message was a topic mention is by parsing the text inside, and we definitely don\'t want to use that mechanism, since it\'s not at all robust for future changes to what syntax we use.', 'comment_created': datetime.datetime(2023, 7, 6, 22, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1255490167, 'comment_body': ""Updated comment:\r\n```python\r\n  # A topic participant is anyone who either sent or reacted to messages in the topic.\r\n  # It is expensive to call `participants_for_topic` if the topic has a large number\r\n  # of messages. But it is fine to call it here, as this gets called only if the message\r\n  # has syntax that might be a @topic mention without having confirmed the syntax isn't, say,\r\n  # in a code block.\r\n```"", 'comment_created': datetime.datetime(2023, 7, 7, 8, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1255781647, 'comment_body': '[CZO discussion](https://chat.zulip.org/#narrow/stream/378-api-design/topic/.40topic-mention.20data-user-id/near/1605762)', 'comment_created': datetime.datetime(2023, 7, 7, 12, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1260609202, 'comment_body': ""I'm not sure we want `user-mention` as well in this case; we can discuss here:\r\n\r\nhttps://chat.zulip.org/#narrow/stream/378-api-design/topic/.40topic-mention.20data-user-id.20.2326195/near/1608185"", 'comment_created': datetime.datetime(2023, 7, 12, 5, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1262370918, 'comment_body': 'Removed `user-mention` after discussion in CZO', 'comment_created': datetime.datetime(2023, 7, 13, 10, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}]","[{'commit_sha': '7a90c75f4a57b4d7b357757aef05c07ff125fb82', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3badca536774dbd327b1bc6215276c2dbbea3a0', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f78cd0ae1170b2e8dee396fce10995fb13f89b4', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673128c2ad2ba5e6d5b0a068e7808faedb87862b', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a273daf8890d2b52fab9ba1a753070ce1d82592', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c52f95f2718121aeb3482b8197ead5b664824efd', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bba4befedcc4daff9a834bc19d65295eb9b575e', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1477195864,topic_mentions: Fix the incorrectly set `wildcard_mentioned` flag.,"**First commit:**

message_send: Fix `wildcard_mentioned` flag unset for few participants.

Earlier, the flag was set if the `user_profile_id` exists in `all_topic_wildcard_mention_user_ids`.

`all_topic_wildcard_mention_user_ids` contains the ids of those users who are topic participants **and** have enabled notifications for '@topic' mentions.
    
The earlier approach was incorrect, as it would set the `wildcard_mentioned` flag only for those topic participants who have enabled the notifications for '@topic' mention instead of setting the flag for all the topic participants.

---

**Second commit:**

message_edit: Fix `wildcard_mentioned` flag set for all user-messages.

Earlier, for topic wildcard mentions, the `wildcard_mentioned` flag was set for all the user-messages. (similar to stream wildcard mention).
    
The flag should be set for the topic participants only.

---

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->



<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26506,https://api.github.com/repos/zulip/zulip/pulls/26506,https://github.com/zulip/zulip/pull/26506,closed,97,29,6,2,1,0,1,0,[{'name': 'size: XL'}],2023-08-16 10:06:55+00:00,2023-08-16 18:31:56+00:00,30301.0,8:25:01,[],"[{'commit_sha': '9db6330c83238c19c312e753cef1e8ceb7ad5b8e', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f6b997fb1c23410042374c95f51c3e78c9ed97', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1397478478,settings: Add options to automatically follow and/or unmute topics.,"Add option to:
- [x] Automatically Follow topics
- [x] Automatically Unmute topics
- [x] Automatically Follow topics (Frontend)
- [x] Automatically Unmute topics (Frontend)

Note:
* There is an increase in the query count by  5 (max) while sending a message.
  * When we send the first message to a topic, there is an increase in the query count by 5 --  1 for checking if it is the first message in the topic + 1 to check if the topic is already followed + 3 for following the topic.
 
Fixes #25914 

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->
**Demo Video**

[automatic_3.webm](https://github.com/zulip/zulip/assets/56781761/8e368a95-2936-4b26-b807-34b9d9243156)




<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26054,https://api.github.com/repos/zulip/zulip/pulls/26054,https://github.com/zulip/zulip/pull/26054,closed,1945,81,34,4,23,85,4,0,"[{'name': 'area: settings UI'}, {'name': 'size: XL'}, {'name': 'mentor review'}, {'name': 'QA needed'}]",2023-06-19 04:08:23+00:00,2023-10-04 20:04:30+00:00,9302167.0,"107 days, 15:56:07","[{'comment_id': 1233903662, 'comment_body': 'Is this a mistake that the feature level was 188 instead of 189? If so, we should fix that in a separate PR.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233909119, 'comment_body': 'Would `ON_INITIATION` (similar to `ON_PARTICIPATION`) be a better suffix here than `I_START`?\r\n\r\nIn any case we should add comments here on what these values actually mean, since these are new terms in the codebase.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233918318, 'comment_body': 'If a newly subscribed user (`Hamlet`) is posting a message in a private stream without shared history, to a topic `foo`, he will think they are initiating that topic, even if that topic already exists (if other users created it before `Hamlet` was subscribed to the stream). We should handle such cases properly. For example, see this code in `message_edit.py`.\r\n\r\n```python\r\n        accessible_messages_in_topic = UserMessage.objects.filter(\r\n            user_profile=user_profile,\r\n            message__recipient_id=message.recipient_id,\r\n            message__subject__iexact=message.topic_name(),\r\n        ).values_list(""message_id"", flat=True)\r\n```', 'comment_created': datetime.datetime(2023, 6, 19, 11, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233925856, 'comment_body': 'Should we use `access_stream_by_id` here? (Also, below)', 'comment_created': datetime.datetime(2023, 6, 19, 11, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233933455, 'comment_body': 'Is there any way we can avoid this second query to fetch the submessage that we just created? The problem here is that we want to do `select_related`, right?', 'comment_created': datetime.datetime(2023, 6, 19, 11, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233935284, 'comment_body': '""the user participates in"" etc might be better wording here in the docs.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233939049, 'comment_body': 'We should use the `check_muted_topics` and `check_user_topic` checkers here.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233942081, 'comment_body': ""I wonder if this can be done more elegantly by just setting the value to `NEVER` in `ZulipTestCase.set_up()` for all our test users. We could avoid the code repetition here (and also the ad-hoc edits to existing test which you've done below)."", 'comment_created': datetime.datetime(2023, 6, 19, 11, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233945862, 'comment_body': 'We should edit the `stream_topic_target` here to correspond to `New Topic` for the test to be effective.', 'comment_created': datetime.datetime(2023, 6, 19, 11, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233950773, 'comment_body': ""Once you've fixed the bug regarding Private streams which I mentioned above, please also add a test for that scenario :)"", 'comment_created': datetime.datetime(2023, 6, 19, 11, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233956845, 'comment_body': 'Might be more convenient to use `/actions/reactions.py/check_add_reaction` than calling the endpoint here.', 'comment_created': datetime.datetime(2023, 6, 19, 12, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1233962362, 'comment_body': ""Upto you, but in case it is easier to create separate tests for the `send_message`, `react`, `poll` and `todo` scenarios (instead of keeping track of so many users), that's an option as well. But I don't have a strong opinion."", 'comment_created': datetime.datetime(2023, 6, 19, 12, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1235708760, 'comment_body': 'Fixed in#26014.', 'comment_created': datetime.datetime(2023, 6, 20, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235710425, 'comment_body': ""We should also make sure we add a test that covers this specific case, because it could have security implications, and it's a bit fiddly."", 'comment_created': datetime.datetime(2023, 6, 20, 19, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235712418, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235713223, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235713444, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235713741, 'comment_body': '```suggestion\r\n        # Because a user automatically follows the topic they start (by default),\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235714164, 'comment_body': '```suggestion\r\n       # Because a user automatically follows the topic they start (by default),\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235714470, 'comment_body': '```suggestion\r\n        # A user automatically follows the topic they start (by default).\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235714820, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1235715077, 'comment_body': '```suggestion\r\n        # A user automatically follows a topic they start by default.\r\n```', 'comment_created': datetime.datetime(2023, 6, 20, 19, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1242352683, 'comment_body': 'Yup! https://github.com/zulip/zulip/pull/26054#discussion_r1233950773 :)', 'comment_created': datetime.datetime(2023, 6, 26, 15, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1244750707, 'comment_body': '[CZO Discussion](https://chat.zulip.org/#narrow/stream/101-design/topic/automatically.20follow.20topics.20.2325914/near/1600092)', 'comment_created': datetime.datetime(2023, 6, 28, 6, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271432178, 'comment_body': 'Created separate tests', 'comment_created': datetime.datetime(2023, 7, 23, 11, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271432373, 'comment_body': 'Used `check_add_reaction`', 'comment_created': datetime.datetime(2023, 7, 23, 11, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271432451, 'comment_body': 'Hm, right -- Fixed', 'comment_created': datetime.datetime(2023, 7, 23, 11, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271432511, 'comment_body': 'Used `check_muted_topics` and `check_user_topic`', 'comment_created': datetime.datetime(2023, 7, 23, 11, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271433265, 'comment_body': 'Changed to `ON_INITIATION` + Added comments', 'comment_created': datetime.datetime(2023, 7, 23, 11, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271433331, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 7, 23, 11, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1271443369, 'comment_body': 'Hm, better -- made the changes', 'comment_created': datetime.datetime(2023, 7, 23, 12, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1300278276, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 21, 15, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1300278612, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 21, 15, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1303156462, 'comment_body': ""We can avoid the query if the policy isn't `ON_PARTICIPATION`, right? Currently we are running this query for all messages.\r\nAn `if-elif` sequence would be better here:\r\n```\r\nif not bot:\r\n    if policy = ON_PARTICIPATION:\r\n        # ...\r\n    elif policy = ON_INITIATION:\r\n        accessible_messages_in_topic = ...\r\n        if len(accessible_messages_in_topic) > 0:\r\n            # ...\r\n```"", 'comment_created': datetime.datetime(2023, 8, 23, 15, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303191919, 'comment_body': 'I think we had decided to set the policy for test users to be `NEVER` in the test database? (Ref https://chat.zulip.org/#narrow/stream/101-design/topic/automatically.20follow.20topics.20.2325914/near/1609293)\r\n\r\nIf not that, lets at least create a test helper like `ZulipTestCase.dont_automatically_follow_topics(user_profile)`, and explain why doing so is needed in the docstring of that method. The current scheme of multiline comments and multi-line `do_change_user_setting` is I feel too verbose.', 'comment_created': datetime.datetime(2023, 8, 23, 15, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303193646, 'comment_body': ""Or better yet, a wrapper/context-manager, which sets the policy to `NEVER` when entering the block, and resets it to initial value when exiting the block. That way we could make sure that we don't accidentally run our tests on wrong data."", 'comment_created': datetime.datetime(2023, 8, 23, 15, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303207849, 'comment_body': 'The comment should say ""... set to `AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION`""', 'comment_created': datetime.datetime(2023, 8, 23, 15, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303210395, 'comment_body': 'We can probably just skip these comments all together. It is pretty clear from the code what were doing. A single comment at the end (near the assertion) should be sufficient to explain the intention of the test (or maybe as a docstring for the test function).', 'comment_created': datetime.datetime(2023, 8, 23, 15, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303211522, 'comment_body': '> The comment should say ""... set to `AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION`""\r\n\r\nAlso in the tests below.', 'comment_created': datetime.datetime(2023, 8, 23, 15, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303221517, 'comment_body': 'For these cases, what is the action? Meaning, when is the policy set to FOLLOWED, on initiation or participation?', 'comment_created': datetime.datetime(2023, 8, 23, 15, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303227291, 'comment_body': 'It would be really nice to extract out all of this `visibility_policy` calculation code into a separate function so as to not increase the reading complexity of the send-message codepath.', 'comment_created': datetime.datetime(2023, 8, 23, 15, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303228656, 'comment_body': 'That way, we can also use early return and avoid some of the later `visibility_policy != UserTopic.VisibilityPolicy.FOLLOWED` checks for other cases.', 'comment_created': datetime.datetime(2023, 8, 23, 15, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303262597, 'comment_body': ""For example,\r\n```python\r\n            if not sender.is_bot and (\r\n                sender.automatically_follow_topics_policy\r\n                == UserProfile.AUTOMATICALLY_FOLLOW_TOPICS_ON_PARTICIPATION\r\n                or sender.automatically_unmute_topics_policy\r\n                == UserProfile.AUTOMATICALLY_UNMUTE_TOPICS_ON_PARTICIPATION\r\n            ):\r\n                # The order here is important. If both of the policies\r\n                # 'automatically_follow_topics_policy' and 'automatically_unmute_topics_policy'\r\n                # has values set to 'AUTOMATICALLY_FOLLOW_TOPICS_ON_PARTICIPATION' and\r\n                # 'AUTOMATICALLY_UNMUTE_TOPICS_ON_PARTICIPATION' respectively, we set the\r\n                # visibility_policy to 'FOLLOWED'.\r\n                if (\r\n                    sender.automatically_follow_topics_policy\r\n                    == UserProfile.AUTOMATICALLY_FOLLOW_TOPICS_ON_PARTICIPATION\r\n                ):\r\n                    visibility_policy = UserTopic.VisibilityPolicy.FOLLOWED\r\n                else:\r\n                    visibility_policy = UserTopic.VisibilityPolicy.UNMUTED\r\n```\r\n\r\nwould be converted to:\r\n\r\n```python\r\nif sender.is_bot:\r\n  return None\r\n\r\n# order is important\r\nif follow_policy == ON_PARTICIPATION:\r\n  return FOLLOWED\r\n\r\nif unmute_policy == ON_PARTICIPATE:\r\n  return UNMUTED\r\n```\r\n\r\n... and so on. Thoughts?"", 'comment_created': datetime.datetime(2023, 8, 23, 16, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1303273374, 'comment_body': 'We could extract a second level function from the above proposed function which handles only the ON_PARTICIPATION case, which could be reused in the reactions/submessage codepath.', 'comment_created': datetime.datetime(2023, 8, 23, 16, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1324075866, 'comment_body': 'I have squashed the 2 commits introducing `follow` and `unmute` settings separately. Keeping them separate gives incomplete information, hence the above comment. `if policy = ON_PARTICIPATION:` - this kind of thing is not relevant when we have both settings involved.\r\n\r\nIn short: This comment resulted due to a overly-minimal commit structure. The comment can be ignored.', 'comment_created': datetime.datetime(2023, 9, 13, 7, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1324085369, 'comment_body': ""> I think we had decided to set the policy for test users to be NEVER in the test database? \r\n\r\nYes, I finally did that.\r\n\r\nEarlier, I set the policy in the individual tests themselves because, as [Steve said](https://chat.zulip.org/#narrow/stream/101-design/topic/automatically.20follow.20topics.20.2325914/near/1602472):\r\n> Generally I have found it easier when writing (and reading) tests to just explicitly set up the data in individual tests. The set_up() methods can be kind of tricky for future developers who don't realize right away that there is action-at-a-distance.\r\n\r\nBut I agree that it is too verbose. So [Tim's suggestion](https://chat.zulip.org/#narrow/stream/101-design/topic/automatically.20follow.20topics.20.2325914/near/1609293) would be the better approach here:\r\n>  we can set a defaults during the creation of test users in populate_db, though."", 'comment_created': datetime.datetime(2023, 9, 13, 7, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1324090993, 'comment_body': 'The intent is to have the policy for `aaron` be anything other than `AUTOMATICALLY_FOLLOW_TOPICS_ON_PARTICIPATION`, hence the comment includes `NOT set to`\r\n\r\nI think, as it created a slight confusion here at first glance, we should keep the comments?', 'comment_created': datetime.datetime(2023, 9, 13, 7, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1324093319, 'comment_body': 'Improved comment -- [see lib/message.py](https://github.com/zulip/zulip/pull/26054/files#diff-40c1c91d1032197fa2decf32d350e72180d5861534c2eb99fcc898eb0b12da24R1737)', 'comment_created': datetime.datetime(2023, 9, 13, 7, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1324096799, 'comment_body': 'Created the following functions in `lib/message.py`:\r\n* visibility_policy_for_participation -- second level function\r\n* visibility_policy_for_send_message\r\n* should_change_visibility_policy\r\n\r\nThe code looks much cleaner and readable now.', 'comment_created': datetime.datetime(2023, 9, 13, 7, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1326654214, 'comment_body': 'Yeah I like these interfaces!', 'comment_created': datetime.datetime(2023, 9, 15, 0, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1326654805, 'comment_body': 'I would usually write this using `.get` and just catching the `UserTopic.DoesNotExist` exception to do the `return True` case.', 'comment_created': datetime.datetime(2023, 9, 15, 0, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1326655756, 'comment_body': 'I think it might be worth adding an `if visibility_policy == UserTopic.VisibilityPolicy.UNMUTED: return ...` just after this -- the query for how many messages there are can be expensive, and so we should avoid doing it when not necessary.', 'comment_created': datetime.datetime(2023, 9, 15, 0, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1326656325, 'comment_body': ""This query is probably more expensive than would be ideal -- if there's 800 messages in the topic, we end up asking the database to count them all.\r\n\r\nIn theory all we need is `.exclude(id=message.id).exists()` for the below calculations.\r\n\r\n(But we should still be careful to try to only do this query if its outcome will impact what we do)."", 'comment_created': datetime.datetime(2023, 9, 15, 0, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1327300054, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 9, 15, 13, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1327308707, 'comment_body': ""We're now using `.exclude(id=message.id).exists()`; \r\n\r\nIt will be called only when:\r\n* automatically_follow_topics_policy == AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION\r\n* automatically_unmute_topics_policy == AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION\r\n\r\noverall one db query when either or both of the policy is `ON_INITIATION`.\r\n\r\nand it is necessary to check if it is the topic start when the policy is `ON_INITIATION`\r\n\r\nSo, we can avoid adding `if visibility_policy == UserTopic.VisibilityPolicy.UNMUTED: return ...`"", 'comment_created': datetime.datetime(2023, 9, 15, 13, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1327310236, 'comment_body': 'Yes, using `.exclude(id=message.id).exists()` is far better. Done.', 'comment_created': datetime.datetime(2023, 9, 15, 13, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1327535603, 'comment_body': ""This should be `AUTOMATICALLY_UNMUTE_TOPICS_ON_PARTICIPATION`, right?\r\n\r\nI think we might want to just use a common set of values, and name them e.g. \r\n`CHANGE_USER_TOPIC_ON_INITIATION`, just to avoid the possibility of mixing this up and feeling like that fact might be important -- if they're clearly by intent the same set of values, we don't have that concern."", 'comment_created': datetime.datetime(2023, 9, 15, 16, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1327536423, 'comment_body': 'I think we also want to avoid doing that calculation if we know that the user already has the state that this would trigger. Otherwise, if you send a message to a topic 10 times in a row, we can potentially be doing this query for 9/10 of them for no reason.', 'comment_created': datetime.datetime(2023, 9, 15, 16, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1327539434, 'comment_body': ""Yeah, that's probably OK."", 'comment_created': datetime.datetime(2023, 9, 15, 16, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1327949369, 'comment_body': 'Ah right, `AUTOMATICALLY_UNMUTE_TOPICS_ON_INITIATION`. The tests didn\'t fail because internally they have the same `integer` value.\r\n\r\n@timabbott  Sorry, I\'m unsure about what you meant by:\r\n""use a common set of values, and name them e.g. CHANGE_USER_TOPIC_ON_INITIATION""\r\n', 'comment_created': datetime.datetime(2023, 9, 16, 11, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1328631338, 'comment_body': 'I think things would be much easier in future when we\'ll have a `Topic` or `StreamTopic` table. We can simply use a `is_new_topic = True` variable parallely while creating a new `topic` object in the send message codepath; that would lead to avoiding this unnecessart repetitive query.\r\n\r\nFor now, I\'m not sure what would be the ideal place to store the info ""is_new_topic = False"" after a user finishes sending the first message and reuse during next send message operation.\r\n\r\n>  if we know that the user already has the state that this would trigger.\r\n\r\nThe problem would be for example: If a user has\r\n* follow_policy = on_initiation\r\n* unmute_policy = never\r\n\r\nNow if the user sends a message to an existing topic & they have the no visibility policy set; the db query will occur even if we apply the check ""if we know that the user already has the state that this would trigger. ""', 'comment_created': datetime.datetime(2023, 9, 18, 12, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1328963761, 'comment_body': ""Oh I meant to just rename both `AUTOMATICALLY_UNMUTE_TOPICS_ON_INITIATION` and `AUTOMATICALLY_FOLLOW_TOPICS_ON_INITIATION` with `CHANGE_USER_TOPIC_ON_INITIATION` -- so we'd just have one set of names for the 1/2/3 values and it'd feel very clear in the code that they're supposed to be parallel."", 'comment_created': datetime.datetime(2023, 9, 18, 16, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1329098994, 'comment_body': '@timabbott \r\nICYMI: we have one more question to discuss!', 'comment_created': datetime.datetime(2023, 9, 18, 17, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1331511928, 'comment_body': 'Alright, this is the modified code in `zerver/models.py` (removes duplication)\r\n\r\n```python\r\n    # The following two settings control which topics to automatically\r\n    # \'follow\' or \'unmute in a muted stream\', respectively.\r\n    # Follow or unmute a topic automatically on:\r\n    # - PARTICIPATION: Send a message, React to a message, Participate in a poll or Edit a TO-DO list.\r\n    # - INITIATION: Send the first message in the topic.\r\n    # - NEVER: Never automatically follow or unmute a topic.\r\n    AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_ON_PARTICIPATION = 1\r\n    AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_ON_INITIATION = 2\r\n    AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_NEVER = 3\r\n    AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_CHOICES = [\r\n        AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_ON_PARTICIPATION,\r\n        AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_ON_INITIATION,\r\n        AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_NEVER,\r\n    ]\r\n    automatically_follow_topics_policy = models.PositiveSmallIntegerField(\r\n        default=AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_NEVER\r\n    )\r\n    automatically_unmute_topics_in_muted_streams_policy = models.PositiveSmallIntegerField(\r\n        default=AUTOMATICALLY_CHANGE_VISIBILITY_POLICY_NEVER\r\n    )\r\n```\r\n\r\nI have made small changes to your suggestion `CHANGE_USER_TOPIC_ON_INITIATION`\r\n* used the term `VISIBILITY_POLICY` instead of `USER_TOPIC`\r\n* prefixed with `AUTOMATICALLY_` for readability.\r\n\r\nwithout the prefix, things like `CHANGE_USER_TOPIC_NEVER` seems to convey that ""never change the visibility policy"" instead of ""never automatically change the visibility policy""', 'comment_created': datetime.datetime(2023, 9, 20, 11, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1334895762, 'comment_body': 'This might be better with the early return pattern.', 'comment_created': datetime.datetime(2023, 9, 23, 0, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334896001, 'comment_body': 'Or maybe better is to extract this whole block as a function we can call; `user_topics.process_topic_participation(user_profile, message)` as the part inside the `if` statement; and then this could be called both here and in the submessage code path?', 'comment_created': datetime.datetime(2023, 9, 23, 0, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334896240, 'comment_body': ""This function doesn't check the `is_bot` case that the reactions code path does; should it? I think maybe bots can't use submessages, but it might be more future-proof to to the exact check we have for reactions here."", 'comment_created': datetime.datetime(2023, 9, 23, 0, 49, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1334896753, 'comment_body': 'Regarding a topic table I think we won\'t be able to do an `is_new_topic` check that way for private streams with protected history (since we can\'t leak to the user whether there are previous messages); but those are rare, and in shared history streams, it will be a nice optimization. Just wanted to mention that\'s a corner case that a topics table doesn\'t make any less ugly.\r\n\r\n> Now if the user sends a message to an existing topic & they have the no visibility policy set; the db query will occur even if we apply the check ""if we know that the user already has the state that this would trigger. ""\r\n\r\nI think the fix for this is that we need to pass `current_visibility_policy` to this function, and we can skip fetching existing messages if the user\'s current_visibility_policy for the topic is already at least as visible as what the policy would change it to.\r\n\r\nThis may make the `should_change_visibility_policy` separate abstraction no longer make sense; I\'m not sure. But I think that fixing this will be very significant in the performance impact of this feature, so we should probably do it.', 'comment_created': datetime.datetime(2023, 9, 23, 0, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1337760916, 'comment_body': 'Added a boolean function `set_visibility_policy_possible`.\r\n\r\n```\r\ndef set_visibility_policy_possible(user_profile: UserProfile, message: Message) -> bool:\r\n    """"""If the user can set a visibility policy.""""""\r\n    if not message.is_stream_message():\r\n        return False\r\n\r\n    if user_profile.is_bot:\r\n        return False\r\n\r\n    if user_profile.realm != message.get_realm():\r\n        return False\r\n\r\n    return True\r\n```\r\n\r\nIt is used at all the three places: message_send, reactions, and submessage.', 'comment_created': datetime.datetime(2023, 9, 26, 20, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1337761397, 'comment_body': 'Used `set_visibility_policy_possible` as explained in the above comment.', 'comment_created': datetime.datetime(2023, 9, 26, 20, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1337766088, 'comment_body': 'A better fact that we can use to solve this is:\r\n\r\n""If a topic has a visibility policy set, it can\'t be the case of initiation. We return early, thus saving a DB query.""\r\n\r\nWe now pass `current_visibility_policy` to this function and return None if it can\'t increase visibility.\r\n\r\n`should_change_visibility_policy` is now only used in reactions and submessage codepath.\r\n\r\n---\r\n\r\nThe only case in which we wouldn\'t be able to save the repetitive db query, when:\r\n* current_visibility_policy = INHERIT\r\n* either of the policy is set to initiation, none of them set to participation, the action is participation.\r\n\r\nIn this case the policies gives the hope to increase visbility so we need to check if the action is initiation or not using db query.', 'comment_created': datetime.datetime(2023, 9, 26, 20, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1337823800, 'comment_body': 'OK, works for me!', 'comment_created': datetime.datetime(2023, 9, 26, 21, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1339241464, 'comment_body': 'This works for me!', 'comment_created': datetime.datetime(2023, 9, 27, 21, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1339245080, 'comment_body': ""OK, this is pretty good! This should probably be a follow-up for sanity's sake, but we might want to make sure we have tests for the query counts for adding a reaction / etc., maybe in functions like ` test_automatically_unmute_topic_on_participation_add_reaction`? "", 'comment_created': datetime.datetime(2023, 9, 27, 21, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1339253687, 'comment_body': 'Let\'s add a comment here ""# Now we need to check if the user initiated the topic. We use the user\'s own message access to avoid leaking information in private streams with shared history.""', 'comment_created': datetime.datetime(2023, 9, 27, 21, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1339255792, 'comment_body': 'Reading this check, I realized that I think it is wrong for in the case of a stream with shared history; in that case, \r\nthe initiation check needs to be more like `get_topic_history_for_public_stream` not `get_topic_history_for_stream` -- basically we need a `can_access_stream_history` if/else clause here, and filter on just `Message` if the user has history access.', 'comment_created': datetime.datetime(2023, 9, 27, 21, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1342715028, 'comment_body': ""Updated code:\r\n\r\n```python\r\n    # Now we need to check if the user initiated the topic.\r\n    old_accessible_messages_in_topic: Union[QuerySet[Message], QuerySet[UserMessage]]\r\n    if can_access_stream_history(sender, stream):\r\n        old_accessible_messages_in_topic = messages_for_topic(\r\n            realm_id=sender.realm_id,\r\n            stream_recipient_id=message.recipient_id,\r\n            topic_name=message.topic_name(),\r\n        ).exclude(id=message.id)\r\n    else:\r\n        # We use the user's own message access to avoid leaking information in\r\n        # private streams with protected history.\r\n        old_accessible_messages_in_topic = UserMessage.objects.filter(\r\n            user_profile=sender,\r\n            message__recipient_id=message.recipient_id,\r\n            message__subject__iexact=message.topic_name(),\r\n        ).exclude(message_id=message.id)\r\n```"", 'comment_created': datetime.datetime(2023, 10, 2, 13, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1342715533, 'comment_body': 'Done, see the below review comment.', 'comment_created': datetime.datetime(2023, 10, 2, 13, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1342734530, 'comment_body': ""`visibility_policy_send` doesn't look a perfect name for this. Any better suggestions?"", 'comment_created': datetime.datetime(2023, 10, 2, 14, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1346323726, 'comment_body': ""This is a good bug fix for the production code! (Well, very unlikely case, but nice to have fixed).\r\n\r\nI would have put this in its own commit so it gets more emphasis; I'll try extracting it."", 'comment_created': datetime.datetime(2023, 10, 4, 18, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346324237, 'comment_body': 'Thinking about this a bit more, I think we should add this only if `settings.TEST_SUITE`; going to try doing that change for this commit.', 'comment_created': datetime.datetime(2023, 10, 4, 18, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346325202, 'comment_body': ""This bug fix would have been much better to submit an independent PR for, since it's fixing a regression that's in `main`; the bug in question went out to production last night because I hadn't had a chance to re-review this."", 'comment_created': datetime.datetime(2023, 10, 4, 18, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346349570, 'comment_body': 'Applied this revision so that this logic would only apply in the test suite; it\'s best to avoid changing production outcomes for testing reasons even if it\'s probably not going to come up in practice:\r\n\r\n```diff\r\ndiff --git a/zerver/models.py b/zerver/models.py\r\nindex 55e958d22f..10129cb14d 100644\r\n--- a/zerver/models.py\r\n+++ b/zerver/models.py\r\n@@ -3137,21 +3137,26 @@ class Message(AbstractMessage):\r\n         sending_client = self.sending_client.name.lower()\r\n \r\n         return (\r\n-            sending_client\r\n-            in (\r\n-                ""zulipandroid"",\r\n-                ""zulipios"",\r\n-                ""zulipdesktop"",\r\n-                ""zulipmobile"",\r\n-                ""zulipelectron"",\r\n-                ""zulipterminal"",\r\n-                ""snipe"",\r\n-                ""website"",\r\n-                ""ios"",\r\n-                ""android"",\r\n-                ""test suite"",\r\n+            (\r\n+                sending_client\r\n+                in (\r\n+                    ""zulipandroid"",\r\n+                    ""zulipios"",\r\n+                    ""zulipdesktop"",\r\n+                    ""zulipmobile"",\r\n+                    ""zulipelectron"",\r\n+                    ""zulipterminal"",\r\n+                    ""snipe"",\r\n+                    ""website"",\r\n+                    ""ios"",\r\n+                    ""android"",\r\n+                )\r\n             )\r\n-        ) or (""desktop app"" in sending_client)\r\n+            or (""desktop app"" in sending_client)\r\n+            # Since the vast majority of messages are sent by humans\r\n+            # in Zulip, treat test suite messages as such.\r\n+            or (sending_client == ""test suite"" and settings.TEST_SUITE)\r\n+        )\r\n \r\n     @staticmethod\r\n     def is_status_message(content: str, rendered_content: str) -> bool:\r\n```', 'comment_created': datetime.datetime(2023, 10, 4, 19, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346352395, 'comment_body': ""I don't have a readily available better idea; I think it'll be clear enough from the context. So let's just live with it and we can rethink when next revising that code path."", 'comment_created': datetime.datetime(2023, 10, 4, 19, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1346352966, 'comment_body': ""Ended up deciding it's not worth the effort to extract, so just mentioned it in the commit message."", 'comment_created': datetime.datetime(2023, 10, 4, 19, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'e301abdf486c6bbcc03c8eebace1b1086fadb1c9', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600f40a991eba4ddcef3f6a58535abc779fa5a1b', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac14141a3598b741408df9cf4bc0af64f138ce47', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9fcd5b7f848d1eb4fe7bca04c547fa528f8c43a', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1454845226,topic_mentions: Highlight the @topic mention for topic participants.,"Adds support to highlight the `@topic` wildcard mention text for the users who are both:
* subscribed to the stream
* a topic participant

Topic participants: Users who either sent or reacted to the messages in the topic.

Fixes part of #22829.


<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

---

**Screenshots and screen captures:**
<details><summary>Topic participant</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/7db24f46-b729-48d6-84c1-7afcddc5a052""></img>
</details> 
<details><summary>Not a topic participant</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/59d11160-1465-431b-afb7-75a06d28971d"">
</img>
</details> 

---

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26382,https://api.github.com/repos/zulip/zulip/pulls/26382,https://github.com/zulip/zulip/pull/26382,closed,112,7,4,2,26,100,3,0,"[{'name': 'size: XL'}, {'name': 'integration review'}, {'name': 'mentor review'}]",2023-07-29 18:16:58+00:00,2023-11-13 16:29:17+00:00,9238339.0,"106 days, 22:12:19","[{'comment_id': 1285198550, 'comment_body': 'This function sounds like it has something to do with ""user topic""s, while it doesn\'t. How about calling it just `is_topic_participant` (with user as the first argument to the function), or maybe `user_is_topic_participant`?', 'comment_created': datetime.datetime(2023, 8, 6, 11, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1285198878, 'comment_body': ""Wo don't really need to caluculate the entire sets of senders/reactors. An early return pattern would be better -- `if (current_user_id == msg.sender_id or current_user_id in msg.reactor_ids); return True;`"", 'comment_created': datetime.datetime(2023, 8, 6, 11, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1285904716, 'comment_body': 'Changed it to:\r\n\r\n```js\r\nexport function user_is_topic_participant(stream_id, topic, current_user_id) {\r\n    // Topic participants:\r\n    // Users who either sent or reacted to the messages in the topic.\r\n    const topic_messages = message_util.get_messages_in_topic(stream_id, topic);\r\n\r\n    for (const mssg of topic_messages) {\r\n        const reactor_ids = [];\r\n        const message_reactions = reactions.get_message_reactions(mssg);\r\n        reactor_ids.push(...message_reactions.flatMap((obj) => obj.user_ids));\r\n\r\n        if (current_user_id === mssg.sender_id || reactor_ids.includes(current_user_id)) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 7, 13, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1285911863, 'comment_body': '> This function sounds like it has something to do with ""user topic""s, while it doesn\'t.\r\n\r\nMakes sense.\r\n\r\n**Renamed it to `user_is_topic_participant`**\r\n\r\n> How about calling it just `is_topic_participant` (with user as the first argument to the function)\r\n\r\nI think we shouldn\'t rely on arguments to understand ""what a function does""?', 'comment_created': datetime.datetime(2023, 8, 7, 14, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1286174024, 'comment_body': 'Maybe we should have the first parameter be the user? I feel like that feels more natural to me given that name,', 'comment_created': datetime.datetime(2023, 8, 7, 17, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1286196587, 'comment_body': ""let's call the local variable here `message`."", 'comment_created': datetime.datetime(2023, 8, 7, 17, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1286198597, 'comment_body': 'Or we should just have this fetch the current user ID using the function from `people.ts`, and call it `current_user_is topic_participant(stream_id, topic)`?', 'comment_created': datetime.datetime(2023, 8, 7, 17, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1286203554, 'comment_body': ""So this function is not a correct calculation for two reasons:\r\n* Whether the mention targets the current user for other notification purposes was determined at the time the message was sent/edited, and is somewhat recorded in the message flags; but this doesn't inspect them.\r\n* It only looks at messages that we have locally, so older participation is not accounted for.\r\n\r\nI wonder if there's a way to avoid needing this function? Hmm, it's possible that we need to add a `topic_mentioned` `UserMessage` flag for whether the message contains a topic mention that triggered for the current user, and then we'd be able to have a simple rule that we highlight `@topic` in a message if and only if that flag is true? Would be a data model/API change but maybe a relatively cheap one, since these should be fairly rare."", 'comment_created': datetime.datetime(2023, 8, 7, 17, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1294192171, 'comment_body': 'We should add a test for this fix. Basically, to check that the `wildcard_mentioned` flag is set even if notification settings are off for the user.', 'comment_created': datetime.datetime(2023, 8, 15, 5, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1299167480, 'comment_body': 'Not needed as we are using the `topic_wildcard_mentioned` flag approach now.', 'comment_created': datetime.datetime(2023, 8, 19, 10, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1299167498, 'comment_body': 'Not needed as we are using the `topic_wildcard_mentioned` flag approach now.', 'comment_created': datetime.datetime(2023, 8, 19, 10, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1299167526, 'comment_body': 'Not needed as we are using the `topic_wildcard_mentioned` flag approach now.', 'comment_created': datetime.datetime(2023, 8, 19, 10, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1299167815, 'comment_body': '#26506', 'comment_created': datetime.datetime(2023, 8, 19, 10, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1304509132, 'comment_body': 'Here, should we mention that the old flag will be exclusively used to represent stream wildcards?\r\n(Same question for `zulip.yaml`)', 'comment_created': datetime.datetime(2023, 8, 24, 15, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1304515794, 'comment_body': 'Maybe worth checking here that this does not set the `wildcard_mentioned` flag (and conversely that the above test does not set the `topic_wildcard_mentioned` flag)', 'comment_created': datetime.datetime(2023, 8, 24, 15, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1304517600, 'comment_body': 'Similar to above comment, probably add a `assert.equal(message.flags.includes(""wildcard_mentioned""), false);`', 'comment_created': datetime.datetime(2023, 8, 24, 15, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1304517887, 'comment_body': '(Also in the tests below)', 'comment_created': datetime.datetime(2023, 8, 24, 15, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1304555762, 'comment_body': 'This index is for `personal_mentioned or stream_wildcard_mentioned or topic_wildcard_mentioned`, correct?\r\nWhy not name it like that? (I think it is OK to say ""stream_wildcard"" here since we are doing that rename in the next commit anyways)\r\nAnd it is OK for index names to be very long if necessary, they don\'t come up anywhere in the codebase apart from migrations/models.py anyways.', 'comment_created': datetime.datetime(2023, 8, 24, 15, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1304572381, 'comment_body': 'Should this be ""client capability"" (singular)?', 'comment_created': datetime.datetime(2023, 8, 24, 16, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1304596928, 'comment_body': 'It is generally bad practice to modify a loop while iterating over it since that can lead to unexpected bugs. Would the following serve our purpose?\r\n```python\r\nif not stream_wildcard_mentioned_flag:\r\n    if ""stream_wildcard_mentioned"" in flags:\r\n        flags.remove(""stream_wildcard_mentioned"")\r\n        flags.append(""wildcard_mentioned"")\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 16, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1304599908, 'comment_body': 'Is this to handle stale events in the event queue? Might be worth explaining in the comment.', 'comment_created': datetime.datetime(2023, 8, 24, 16, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1304600248, 'comment_body': 'Same comment as above re looping.', 'comment_created': datetime.datetime(2023, 8, 24, 16, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1304617497, 'comment_body': 'Does this also deserve a `TODO` tag?', 'comment_created': datetime.datetime(2023, 8, 24, 16, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1305263257, 'comment_body': 'On scrolling up a bit:\r\n```python\r\n      models.Index(\r\n          ""user_profile"",\r\n          ""message"",\r\n          condition=Q(flags__andnz=AbstractUserMessage.flags.mentioned.mask),\r\n          name=""zerver_usermessage_mentioned_message_id"",\r\n      ),\r\n```\r\nFor personal mentions, we have the flag `mentioned`. So we have one of the indexes named `zerver_usermessage_mentioned_message_id`. To keep things consistent, I just used the term `mentioned` and not `personal_mentioned`. I think that\'s fine?\r\n\r\nregarding, `stream_wildcard_mentioned or topic_wildcard_mentioned`\r\n\r\nWe collectively use the term `wildcard_mentioned` while addressing both the stream and topic wildcard mentions at other places in the codebase. \r\n\r\nWe can definitely use `stream_wildcard_mentioned or topic_wildcard_mentioned` in the name as you already mentioned\r\n> they don\'t come up anywhere in the codebase apart from migrations/models.py anyways.\r\n\r\n@timabbott your thoughts?', 'comment_created': datetime.datetime(2023, 8, 25, 7, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1305475967, 'comment_body': 'Right. Added.', 'comment_created': datetime.datetime(2023, 8, 25, 10, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1305481634, 'comment_body': 'Added a comment, i.e.\r\n\r\n> This is needed for the correct `stream_wildcard_mentioned in flags` check below and updating state[""mentions""] accordingly.', 'comment_created': datetime.datetime(2023, 8, 25, 10, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1305484613, 'comment_body': 'Made the changes. I should have noticed this myself :)\r\n\r\nOne more point:\r\nIn `event_queue.py`, `flags` is a Collection not a list. So we can\'t use remove, append.\r\n\r\nI have updated it to:\r\n```python\r\n      if ""wildcard_mentioned"" in flags:\r\n          updated_flags = [\r\n              ""stream_wildcard_mentioned"" if flag == ""wildcard_mentioned"" else flag\r\n              for flag in flags\r\n          ]\r\n          flags = updated_flags\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 10, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1305485214, 'comment_body': 'Changed this to ""client capability"" ', 'comment_created': datetime.datetime(2023, 8, 25, 10, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1305485554, 'comment_body': 'Done\r\n\r\nAlso, if we notice in `markdown.test.js`, now we have a lot of repetitive blocks:\r\n\r\n```js\r\n    assert.equal(message.flags.includes(""stream_wildcard_mentioned""), false);\r\n    assert.equal(message.flags.includes(""topic_wildcard_mentioned""), false);\r\n    assert.equal(message.flags.includes(""mentioned""), false);\r\n```\r\n\r\nShould we put this in a function named `assert_no_personal_stream_topic_mentions` and call this function everywhere instead of repeating those lines. Or is it fine for readability?', 'comment_created': datetime.datetime(2023, 8, 25, 10, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1305485797, 'comment_body': 'Makes sense. Done.', 'comment_created': datetime.datetime(2023, 8, 25, 10, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1305486939, 'comment_body': 'Yeah, I think that would be good. Added a line:\r\n\r\n> Now, the `wildcard_mentioned` flag will be exclusively used for stream wildcard mentions.', 'comment_created': datetime.datetime(2023, 8, 25, 10, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1305492038, 'comment_body': ""I definitely think it is better to more explicit here, but let's wait for Tim to comment."", 'comment_created': datetime.datetime(2023, 8, 25, 10, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1306022525, 'comment_body': 'I think I replied in the chat.zulip.org thread; I guess reading this, I think `zerver_usermessage_mentioned_any_message_id` might be an appropriate alternative.', 'comment_created': datetime.datetime(2023, 8, 25, 18, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1306680943, 'comment_body': ""Better way might be to implement a `assert_mentions(List[str])` function which asserts whatever is passed to it as is true, and whatever isn't is false."", 'comment_created': datetime.datetime(2023, 8, 27, 15, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1306681140, 'comment_body': '`s/Now/Henceforth` would be better wording.', 'comment_created': datetime.datetime(2023, 8, 27, 15, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1306683443, 'comment_body': ""I think that would add an another layer of understanding - what `assert_mentions(List[str])` does i.e.\r\n> it asserts whatever is passed to it as is true, and whatever isn't is false.\r\n\r\nCurrently it is easy to understand at one look.\r\n\r\nSpecially, when all are false. We would need to send an empty list.\r\n"", 'comment_created': datetime.datetime(2023, 8, 27, 15, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1306926601, 'comment_body': ""That's right. If the amount of code deduplicated seems high enough to justify implementing such a function, feel free to go ahead and implement if. Otherwise even the current situation is not too bad. I don't have a strong opinion here."", 'comment_created': datetime.datetime(2023, 8, 28, 5, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1307510943, 'comment_body': 'Changed the name to `zerver_usermessage_any_mentioned_message_id`. \r\n\r\nref: [CZO](https://chat.zulip.org/#narrow/stream/3-backend/topic/topic_wildcard_mentioned.20flag/near/1631746)', 'comment_created': datetime.datetime(2023, 8, 28, 14, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1307610546, 'comment_body': 'I would probably compress these a bit more rather than duplicating so much text -- referring to the ""`flags` field on message objects"" ... would probably suffice to just list all 3 endpoints at the start.', 'comment_created': datetime.datetime(2023, 8, 28, 15, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307625742, 'comment_body': ""Should this be a function defined in `models.py` like the `where_starred` batch of functions? If so, we could call it `where_any_mentioned`, or something.\r\n\r\n(The benefit of putting it on `models.py` after some testing is that we'd be providing an interface that more clearly promises that we're using a query that actually uses the index we have, which is much better for future code reuse -- though we would want to test the actual query with `EXPLAIN ANALYZE` to be certain)"", 'comment_created': datetime.datetime(2023, 8, 28, 16, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307629110, 'comment_body': ""I guess because this is SQLAlchemy, we can't use a common `models.py` function -- have you done an `EXPLAIN ANALYZE` of the SQL generated to confirm the `has:mention` narrow in fact uses this index?"", 'comment_created': datetime.datetime(2023, 8, 28, 16, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307634096, 'comment_body': ""This step is the main expensive part of the migration, and it's important that this migration be applied before we restart Django into the new code, as the `is:mentioned` narrow will do a table scan without it.\r\n\r\nI believe it can be pre-applied though, the new column is always 0 since we don't have any topic mentions yet; @alexmv FYI."", 'comment_created': datetime.datetime(2023, 8, 28, 16, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307647866, 'comment_body': ""It would be kinda nice to have this be just after `wildcard_mentioned` for cleaner organization; and then maybe a future `group_mentioned` might sit just after it where `summarize_in_stream` is.\r\n\r\nI looked at the history, and `summarize_in_home` is a feature that was removed in 2014 (748e5b6da6e1e55799add8db76eaa5e512927d3a) while Zulip was still in private beta pre-Dropbox acquisition, so I think the only Zulip servers that might have that bit set on any are Zulip Cloud, or perhaps someone who fiddled with the API pre fa77467d5d621f05b83ba155a2613eae42ee3fdf, which is likely not a concern worth thinking about much.\r\n\r\nI think it's possible that we did not do a migration to zero that bit, so some pre-2014 Zulip Cloud organizations might have some users with that flag set -- but I think we could pretty safely clear those, either directly, or via having the migration query \r\n\r\n{the set of UserMessage rows that have (mentioned|wildcard_mentioned|topic_mentioned)} - {the set of UserMessage rows that have (mentioned|wildcard_mentioned)}\r\n\r\nand setting `topic_wildcard_mentioned=0` for those -- that should be a quite fast operation before we drop the index.\r\n"", 'comment_created': datetime.datetime(2023, 8, 28, 16, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307651715, 'comment_body': ""Did we have a design discussion of whether topic wildcard mentions should take precedence in muted streams? I think the answer was we did -- it would be good to add a few comments here explaining the policy we're verifying in these cases."", 'comment_created': datetime.datetime(2023, 8, 28, 16, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307654734, 'comment_body': 'Hmm, I don\'t love the idea that we need to remember to pass this parameter in every endpoint fetching messages.\r\n\r\nDeserves an ""api design"" conversation -- I\'m thinking we may want the model to instead be that you just pass the same `client_capabilities` to every endpoint, and we can make `channel.js` do that for us, so that it\'s not a thing that we need to remember to do.\r\n\r\nStarted such a conversation here: https://chat.zulip.org/#narrow/stream/378-api-design/topic/client_capabilities.20for.20other.20endpoints/near/1632497', 'comment_created': datetime.datetime(2023, 8, 28, 16, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307659196, 'comment_body': "" I wonder if it'd be better to __always__ send `stream_wildcard_mentioned`, and just have sending the `wildcard_mentioned` copy of it be the thing that's conditional on the client capability.\r\n\r\nThe benefit of that plan would be that it'd make it easier to delete the client capability in 3 years: The penalty for talking to an old server without remembering to pass the capability flag is you get an unnecessary and deprecated `wildcard_mentioned` field, which is just a small waste of bandwidth, which seems totally fine.\r\n\r\nThere's also a question of what the right semantics are -- should `wildcard_mentioned = stream_wildcard_mentioned | topic_wildcard_mentioned` for backwards-compatibility? I think the answer is yes, because the whole point is to produce the best experience we can for clients that predate this migration, and treating a topic wildcard mention as a wildcard mention is more correct than not in the event that the client isn't looking at the `topic_wildcard_mentioned` flag at all.\r\n\r\nPosted this in https://chat.zulip.org/#narrow/stream/378-api-design/topic/highlight.20topic-wildcard.20mention/near/1632494 as well."", 'comment_created': datetime.datetime(2023, 8, 28, 16, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307661970, 'comment_body': ""I'd be surprised if this was correct for a client that doesn't have the new client capability -- how did you verify this logic? \r\n\r\n"", 'comment_created': datetime.datetime(2023, 8, 28, 16, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307667882, 'comment_body': 'If the intent is to merge the last two commits together, which seems reasonable, we might want them to share feature level 206; I think that would make it easier to write a cleaner explanation. Something like:\r\n\r\n> In Zulip 8.0 (feature level 206), the `wildcard_mentioned` flag was deprecated, replaced with the `stream_wildcard_mentioned` and `topic_wildcard_mentioned`. Clients supporting older servers can work with the new flags and treat `stream_wildcard_mentioned_flag=wildcard_mentioned, topic_wildcard_mentioned=false` with older servers, as topic wildcard mentions were not possible on older servers. To provide the best experience for older clients that do not check the new flags, clients that do not pass the `stream_wildcard_mentioned_flag` [client capability](...) will receive a `wildcard_mentioned = stream_wildcard_mentioned | topic_wildcard_mentioned`. \r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 28, 16, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1307685681, 'comment_body': 'Started https://chat.zulip.org/#narrow/stream/3-backend/topic/topic_wildcard_mentioned.20flag/near/1632474 to discuss this detail.', 'comment_created': datetime.datetime(2023, 8, 28, 17, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1345572335, 'comment_body': ""```diff\r\n Merge Append  (cost=29.65..42.41 rows=51 width=12) (actual time=0.272..0.278 rows=5 loops=1)\r\n   Sort Key: zerver_usermessage.message_id\r\n   ->  Sort  (cost=29.35..29.47 rows=50 width=12) (actual time=0.216..0.218 rows=4 loops=1)\r\n         Sort Key: zerver_usermessage.message_id\r\n         Sort Method: quicksort  Memory: 25kB\r\n         ->  Limit  (cost=21.36..27.44 rows=50 width=12) (actual time=0.190..0.197 rows=4 loops=1)\r\n               ->  Merge Join  (cost=21.36..32.42 rows=91 width=12) (actual time=0.189..0.195 rows=4 loops=1)\r\n                     Merge Cond: (zerver_usermessage.message_id = zerver_message.id)\r\n                     ->  Sort  (cost=21.13..21.35 rows=91 width=12) (actual time=0.164..0.165 rows=4 loops=1)\r\n                           Sort Key: zerver_usermessage.message_id DESC\r\n                           Sort Method: quicksort  Memory: 25kB\r\n                           ->  Bitmap Heap Scan on zerver_usermessage  (cost=4.98..18.17 rows=91 width=12) (actual time=0.050..0.146 rows=4 loops=1)\r\n                                 Recheck Cond: (user_profile_id = 9)\r\n                                 Filter: ((message_id <= 104) AND (((flags & '8'::bigint) <> 0) OR ((flags & '16'::bigint) <> 0) OR ((flags & '32'::bigint) <> 0) OR ((flags & '64'::bigint) <> 0)))\r\n                                 Rows Removed by Filter: 92\r\n                                 Heap Blocks: exact=10\r\n                                 ->  Bitmap Index Scan on zerver_usermessage_user_profile_id_e901f3b7  (cost=0.00..4.96 rows=91 width=0) (actual time=0.039..0.040 rows=96 loops=1)\r\n                                       Index Cond: (user_profile_id = 9)\r\n                     ->  Index Only Scan Backward using zerver_message_pkey on zerver_message  (cost=0.14..9.67 rows=102 width=4) (actual time=0.020..0.024 rows=5 loops=1)\r\n                           Heap Fetches: 5\r\n   ->  Limit  (cost=0.29..12.40 rows=1 width=12) (actual time=0.055..0.057 rows=1 loops=1)\r\n         ->  Nested Loop  (cost=0.29..12.40 rows=1 width=12) (actual time=0.055..0.057 rows=1 loops=1)\r\n+               ->  Index Scan using zerver_usermessage_any_mentioned_message_id on zerver_usermessage zerver_usermessage_1  (cost=0.14..8.16 rows=1 width=12) (actual time=0.039..0.040 rows=1 loops=1)\r\n                     Index Cond: ((user_profile_id = 9) AND (message_id >= 105))\r\n               ->  Index Only Scan using zerver_message_pkey on zerver_message zerver_message_1  (cost=0.14..4.16 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=1)\r\n                     Index Cond: (id = zerver_usermessage_1.message_id)\r\n                     Heap Fetches: 1\r\n Planning Time: 67.700 ms\r\n Execution Time: 0.470 ms\r\n(29 rows)\r\n```"", 'comment_created': datetime.datetime(2023, 10, 4, 10, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348703606, 'comment_body': 'We use the new approach as [discussed](https://chat.zulip.org/#narrow/stream/378-api-design/topic/highlight.20topic-wildcard.20mention/near/1621559) i.e. `topic_wildcard_mentioned` flag', 'comment_created': datetime.datetime(2023, 10, 6, 13, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348753782, 'comment_body': '> Should this be a function defined in models.py like the where_starred batch of functions?\r\n\r\nAs pointed out in [another comment](https://github.com/zulip/zulip/pull/26382/commits/16950d34fe3687a31c195103fb737345578fb115#r1307629110), No.\r\n\r\n> we would want to test the actual query with EXPLAIN ANALYZE to be certain\r\n\r\nThe query we have in `main` doesn\'t uses the `zerver_usermessage_wildcard_mentioned_message_id` index.\r\n\r\nHere\'s the result from explain analyze:\r\n```\r\nzulip=> explain analyze SELECT ""zerver_usermessage"".""user_profile_id"" FROM ""zerver_usermessage"" \r\nWHERE (""zerver_usermessage"".""flags"" | -1025 = -1025 AND\r\n""zerver_usermessage"".""message_id"" = 3 AND ""zerver_usermessage"".""flags"" & 24 != 0);\r\n                                                                         QUERY PLAN                                                                  \r\n       \r\n-------------------------------------------------------------------\r\n Index Scan using zerver_usermessage_message_id_f6e63a33 on zerver_usermessage \r\n(cost=0.28..10.72 rows=1 width=4) (actual time=0.058..0.058 rows=0 lo\r\nops=1)\r\n   Index Cond: (message_id = 3)\r\n   Filter: (((flags & \'24\'::bigint) <> 0) AND ((flags | \'-1025\'::bigint) = \'-1025\'::integer))\r\n   Rows Removed by Filter: 3\r\n Planning Time: 1.516 ms\r\n Execution Time: 0.095 ms\r\n(6 rows)\r\n```\r\n', 'comment_created': datetime.datetime(2023, 10, 6, 13, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348759434, 'comment_body': 'We can update the `filter()` so that it uses the index, updated query:\r\n```python\r\nfilter(\r\n    Q(flags__andnz=UserMessage.flags.mentioned) | \r\n    Q(flags__andnz=UserMessage.flags.stream_wildcard_mentioned)\r\n)\r\n```', 'comment_created': datetime.datetime(2023, 10, 6, 13, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348762783, 'comment_body': ""Our [updated approach is](https://chat.zulip.org/#narrow/stream/378-api-design/topic/highlight.20topic-wildcard.20mention/near/1656239):\r\n\r\nHmm, would that proposal be that we just don't have a client capability and send:\r\n\r\n* `stream_wildcard_mentioned` with the correct value and documented as the thing to use.\r\n* `wildcard_mentioned` = `stream_wildcard_mentioned` | `topic_wildcard_mentioned` for backwards-compatibility, and have that be documented as deprecated?\r\n\r\n> I guess that seems pretty clean and is in fact seay to clean up once all modern clients access the new field, so yeah, I think that's a good plan that feels simple to implement for both the server and all clients."", 'comment_created': datetime.datetime(2023, 10, 6, 14, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348769184, 'comment_body': 'This uses the new ""zerver_usermessage_any_mentioned_message_id"" index.', 'comment_created': datetime.datetime(2023, 10, 6, 14, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348769405, 'comment_body': ""explain analyze for this query\r\n```\r\n Bitmap Heap Scan on zerver_usermessage  (cost=8.57..13.79 rows=2 width=24) (actual time=0.048..0.062 rows=24 loops=1)\r\n   Recheck Cond: (message_id = ANY ('{101,102}'::integer[]))\r\n   Filter: (user_profile_id = ANY ('{6,7,8,9,10,11,12,13,14,15,16,17}'::integer[]))\r\n   Heap Blocks: exact=2\r\n   ->  Bitmap Index Scan on zerver_usermessage_message_id_f6e63a33  (cost=0.00..8.57 rows=2 width=0) (actual time=0.031..0.031 rows=24 loops=1)\r\n         Index Cond: (message_id = ANY ('{101,102}'::integer[]))\r\n Planning Time: 1.290 ms\r\n Execution Time: 0.118 ms\r\n(8 rows)\r\n```"", 'comment_created': datetime.datetime(2023, 10, 6, 14, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348872800, 'comment_body': 'I didn\'t use `if ""stream_wildcard_mentioned"" in flags or ""topic_wildcard_mentioned"" in flags:` because:\r\n\r\nIf we plan to return `wildcard_mentioned = topic_wild... | stream_wild...` then, suppose during upgrade we have an event in a queue with `wildcard_mentioned` flag, now in the translation code (just above) we should replace `wildcard_mentioned` with `stream_wild..` or `topic_wild...`?\r\n\r\nTechnically it is possible to set `wildcard_mentioned` flag using @**topic**, but the feature is not yet used by web client or mobile; we also haven\'t mentioned it yet in our api docs. So I think it is safe to move forward with the logic that `wildcard_mentioned` should be returned only if `stream_wildcard_mentioned` is set?\r\n\r\nFor older clients  `wildcard_mentioned` is only set in the case of  stream wildcard mentions as they are unaware of ""topic mentions"" feature? ', 'comment_created': datetime.datetime(2023, 10, 6, 15, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348876614, 'comment_body': 'changelog updated as we are moving forward with a [new approach](https://chat.zulip.org/#narrow/stream/378-api-design/topic/highlight.20topic-wildcard.20mention/near/1656239)', 'comment_created': datetime.datetime(2023, 10, 6, 15, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348881582, 'comment_body': '```diff\r\n-      ""summarize_in_home"",\r\n-      ""summarize_in_stream"",\r\n+      ""topic_wildcard_mentioned"",\r\n+      ""group_mentioned"",\r\n```\r\n\r\n[Steps followed (CZO)](https://chat.zulip.org/#narrow/stream/3-backend/topic/topic_wildcard_mentioned.20flag/near/1654575)\r\n', 'comment_created': datetime.datetime(2023, 10, 6, 15, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348881906, 'comment_body': 'comments added', 'comment_created': datetime.datetime(2023, 10, 6, 15, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348882985, 'comment_body': ""With the [updated approach,](https://chat.zulip.org/#narrow/stream/378-api-design/topic/highlight.20topic-wildcard.20mention/near/1656239) we don't need to pass these params."", 'comment_created': datetime.datetime(2023, 10, 6, 15, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348884717, 'comment_body': 'This code block was not needed actually, as it is in `apply_events` codepath. removed.', 'comment_created': datetime.datetime(2023, 10, 6, 15, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1348885122, 'comment_body': 'Merged the two commits.', 'comment_created': datetime.datetime(2023, 10, 6, 15, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1349219283, 'comment_body': ""This sort of complex migration is generally best done in Zulip Cloud in multiple staged deployments, and for that reason we should split up this commit and its migrations. The sequence I would recommend is:\r\n* First, a commit with a migration containing the minimal `models.py` changes to rename the flags, plus the `AlterField` entries (very cheap) and `AddIndexConcurrently`. This its own complicated-to-deploy migration just because `UserMessage` is an enormous table, and it'll be valuable to deploy that checkpoint independently of the remaining steps.\r\n* Then a commit to start writing the `topic_mentioned` field when seeing a topic mention. (The migration after this will clear this bit, but it doesn't matter, since the feature isn't out yet anyway)\r\n* Then a commit with the backfill migration `clear_set_bit_topic_wildcard_and_group_mentioned`. The idea is that this would be a checkpoint that we might deploy to.\r\n* And then a final commit with the API changes to split the field.\r\n* And finally, I think we should skip removing `zerver_usermessage_wildcard_mentioned_message_id` at all in this PR -- we will want to do it as a follow-up once we have confirmed that we're not going to have to revert this migration for some reason.\r\n\r\nNow that we've verified that this plan will work end-to-end, I think it would also be a good idea to open a fresh PR with the prefix of this project that ends with the final migration (i.e. leaving off the API changes) -- that'll be a nice checkpoint to review without all the clutter of this PR's older review history, and we can focus on getting the migration into a state we can actually merge."", 'comment_created': datetime.datetime(2023, 10, 6, 19, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349282855, 'comment_body': ""I think this documentation doesn't match my understanding of the decision, which is that this compatible `wildcard_mentioned` would be true \r\n\r\nAlso, we always want API documentation to be written from the mindset of clearly and explicitly answering the questions that one needs to answer in order to do a correct client implementation. \r\n\r\n> In Zulip 8.0 (feature level 215), the `wildcard_mentioned` flag was deprecated in favor of the `stream_wildcard_mentioned` and `topic_wildcard_mentioned` flags. The `wildcard_mentioned` flag exists for backwards-compatibility with older clients, and equals `stream_wildcard_mentioned || topic_wildcard_mentioned`. Clients interacting with older servers should treat this field as an old name for `stream_wildcard_mentioned`; `@topic` mentions were not available prior to this feature level."", 'comment_created': datetime.datetime(2023, 10, 6, 20, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349283207, 'comment_body': '""Whether this message contained topic wildcard mention (`@**topic**`)"" is probably clearer than the `i.e`.', 'comment_created': datetime.datetime(2023, 10, 6, 20, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349285843, 'comment_body': 'We should mainly discuss this in the `models.py` code, so feel free to mark this comment as resolved, but seeing this has been considering that we might want to write it as a single `((flags & {mention_flags_mask}))` where the mask is a bitword with the 4 relevant flags 1 and the rest 0s.', 'comment_created': datetime.datetime(2023, 10, 6, 20, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349290561, 'comment_body': 'Let\'s add a blockquote here explaining that because these flags are reused flag slots in the `flags` bitword, we\'re not confident that their value is always in the ""fresh"" always-0 state in very old servers, and this migration to ensure that\'s the case.', 'comment_created': datetime.datetime(2023, 10, 6, 20, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349297870, 'comment_body': ""This sort of `EXPLAIN ANALYZE` check isn't very helpful in the development environment, just because the data sizes being small can warp what index ends up being used.\r\n\r\nI think what we want to do for this migration is something following some of the patterns in  `zerver/migrations/0239_usermessage_copy_id_to_bigint_id.py`. But roughly, we're going to want to have a loop processing batches of say 1K-10K `UserMessage` rows that match our query, ideally doing the work all in SQL, with progress indication print statements, and definitely avoid sending lists of individual message/user IDs to the database in each request, if we can.\r\n\r\nYou may want to do a pairing session with @mateuszmandera to work on this, as he has a lot of experience writing this sort of migration on our biggest tables."", 'comment_created': datetime.datetime(2023, 10, 6, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349298790, 'comment_body': 'OK, that query plan looks good. Though we may need to recheck this if we end up changing the index structure.', 'comment_created': datetime.datetime(2023, 10, 6, 20, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349301003, 'comment_body': ""Let's discuss in https://chat.zulip.org/#narrow/stream/3-backend/topic/topic_wildcard_mentioned.20flag/near/1657514. The question in my mind is whether it would be a better index to instead index on:\r\n`condition=Q(flags__andnz=AbstractUserMessage.flags.mentioned.mask | AbstractUserMessage.flags.stream_wildcard_mentioned.mask | AbstractUserMessage.flags.topic_wildcard_mentioned.mask | AbstractUserMessage.flags.group_mentioned.mask)`, so that we're asking the database to do a single bitmask check, rather than 4 parallel ones. \r\n\r\nSee https://github.com/zulip/zulip/pull/26382/commits/4f550840f35ac9ee3dad9d404d2056f90f521507#r1349285843 for evidence of the precise index/query that this implementation generates."", 'comment_created': datetime.datetime(2023, 10, 6, 20, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349304849, 'comment_body': 'Does this need to be a `Set` to avoid double-appending certain flags in the compatibility code? ', 'comment_created': datetime.datetime(2023, 10, 6, 20, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349306974, 'comment_body': 'I think we want `if ""stream_wildcard_mentioned"" in flags or ""topic_wildcard_mentioned"" in flags`. The upgrade code path concern that you mention is generally going to affect clients for at most ~30 minutes after an upgrade -- so as long as nothing crashing, the impact of the behavior being non-ideal is very bounded, because clients will eventually reload and get a new event queue (see `server_generation` for details). If we sometimes produce an incorrect value for the flags temporarily after someone used the still-undocumented `@topic` mention code, it\'s not a big problem.\r\n\r\nWhereas anyone using an old copy of the mobile apps that predates `topic_wildcard_mentioned` support, might see newly sent `@topic` messages as not containing a mention, without this code, unless I\'m missing something?\r\n\r\nOr maybe I\'m missing something -- if the `send_event` code path is already taking care of adding the `wildcard_mentioned` bonus flag, then we might not need a compatibility change here at all?', 'comment_created': datetime.datetime(2023, 10, 6, 20, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349310497, 'comment_body': ""Hmm, I don't think we need this sort of compatibility code. My thinking is that:\r\n* An event that is emitted by a post-upgrade server will have all 3 fields, so this doesn't apply. (And a client that had started with a pre-8.0 server will probably just ignore the new fields, and happily access `wildcard_mentioned` until it restarts and gets an 8.0 feature level startup)\r\n* An event that is emitted by a pre-upgrade server will just have a `wildcard_mentioned` field, and will only ever be processed by a client that had created its event queue expecting a pre-8.0 server and thus should be OK processing an additional pre-8.0 format event even if it's also getting post-8.0 events now.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 10, 6, 20, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1349311332, 'comment_body': ""I could be wrong, but I think with the present proposed API design, we may not need any compatibility code in Tornado at all -- we just need to make sure that any Django code that is generating events containing a `flags` list adds the `wildcard_mentioned` while it's adding the other flags."", 'comment_created': datetime.datetime(2023, 10, 6, 20, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1352666279, 'comment_body': ""Yeah.  Regardless of if that query is indexed, the fetch of the initial `ums` variable for Zulip Cloud is going to be too large to comfortably fit in memory.  In addition to being slow because it's done in Python, this also has the difficulty of exposing us to race conditions between when we fetch `user_messages` and when we update using `bulk_update`.  Any solution here is going to need to use `update` and run the logic entirely in PostgreSQL, in batches."", 'comment_created': datetime.datetime(2023, 10, 10, 14, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1352723213, 'comment_body': ""That looks like a reasonable ordering to me.  Splitting out the commit to do the backfill would also be useful to better highlight the _why_ of it -- specifically, in the first commit we can call out in the AlterField commit that we're renaming two now-unused and historical bits of the bitfield, but they may have old data that we need to clear.  The third commit can be explicit that we're clearing out old data from the now-renamed bitfields, which is why we need to walk the entire table."", 'comment_created': datetime.datetime(2023, 10, 10, 14, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1381812295, 'comment_body': ""We moved forward with\r\n> we're asking the database to do a single bitmask check, rather than 4 parallel ones."", 'comment_created': datetime.datetime(2023, 11, 3, 14, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1381815373, 'comment_body': 'Yeah, passing the three fields via send_event, instead of including `wildcard_mentioned` in tornado code is a much cleaner approach.', 'comment_created': datetime.datetime(2023, 11, 3, 14, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1381817027, 'comment_body': 'We no longer need these compatibility code -- [discussion](https://github.com/zulip/zulip/pull/26382#discussion_r1349311332)', 'comment_created': datetime.datetime(2023, 11, 3, 14, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1381817334, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 11, 3, 14, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1381818242, 'comment_body': 'Yeah, passing the three fields via send_event, instead of including wildcard_mentioned in tornado code is a much cleaner approach.\r\n\r\n', 'comment_created': datetime.datetime(2023, 11, 3, 14, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1382616914, 'comment_body': ""populate_db -n 10000 and ~50 personal/wildcard mentions.\r\n\r\n```sql\r\nzulip=> explain analyze CREATE TEMP TABLE temp_any_mentioned_usermessage AS SELECT um.id FROM zerver_usermessage um WHERE um.flags & 120 != 0 AND um.user_profile_id = ANY(ARRAY(SELECT id FROM zerver_userprofile));\r\n                                                                        QUERY PLAN                                    \r\n                                     \r\n----------------------------------------------------------------------------------------------------------------------\r\n-------------------------------------\r\n Bitmap Heap Scan on zerver_usermessage um  (cost=41.39..2119.44 rows=43020 width=8) (actual time=0.494..1.264 rows=28\r\n2 loops=1)\r\n   Recheck Cond: ((user_profile_id = ANY ($0)) AND ((flags & '120'::bigint) <> 0))\r\n   Heap Blocks: exact=48\r\n   InitPlan 1 (returns $0)\r\n     ->  Seq Scan on zerver_userprofile  (cost=0.00..4.23 rows=23 width=4) (actual time=0.034..0.155 rows=23 loops=1)\r\n   ->  Bitmap Index Scan on zerver_usermessage_any_mentioned_message_id  (cost=0.00..26.40 rows=43020 width=0) (actual\r\n time=0.445..0.446 rows=282 loops=1)\r\n         Index Cond: (user_profile_id = ANY ($0))\r\n Planning Time: 7.418 ms\r\n Execution Time: 13.974 ms\r\n(9 rows)\r\n```"", 'comment_created': datetime.datetime(2023, 11, 5, 17, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1382617035, 'comment_body': '```sql\r\nzulip=> explain analyze UPDATE zerver_usermessage SET flags = (flags & ~(1 << 5) & ~(1 << 6)) WHERE id = ANY(ARRAY(SELECT id FROM temp_any_mentioned_usermessage ORDER BY id OFFSET 0 LIMIT 10000));\r\n                                                                      QUERY PLAN                                      \r\n                                 \r\n----------------------------------------------------------------------------------------------------------------------\r\n---------------------------------\r\n Update on zerver_usermessage  (cost=164.45..241.33 rows=10 width=34) (actual time=16.909..16.913 rows=0 loops=1)\r\n   InitPlan 1 (returns $0)\r\n     ->  Limit  (cost=158.51..164.16 rows=2260 width=8) (actual time=0.606..0.914 rows=282 loops=1)\r\n           ->  Sort  (cost=158.51..164.16 rows=2260 width=8) (actual time=0.603..0.722 rows=282 loops=1)\r\n                 Sort Key: temp_any_mentioned_usermessage.id\r\n                 Sort Method: quicksort  Memory: 38kB\r\n                 ->  Seq Scan on temp_any_mentioned_usermessage  (cost=0.00..32.60 rows=2260 width=8) (actual time=0.0\r\n96..0.272 rows=282 loops=1)\r\n   ->  Index Scan using zerver_usermessage_pkey on zerver_usermessage  (cost=0.29..77.18 rows=10 width=34) (actual tim\r\ne=1.292..3.177 rows=282 loops=1)\r\n         Index Cond: (id = ANY ($0))\r\n Planning Time: 0.873 ms\r\n Execution Time: 17.075 ms\r\n(11 rows)\r\n```', 'comment_created': datetime.datetime(2023, 11, 5, 17, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1382617665, 'comment_body': 'I have added a comment in 0486 migration file.', 'comment_created': datetime.datetime(2023, 11, 5, 17, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1382617823, 'comment_body': '0486 has the related migration', 'comment_created': datetime.datetime(2023, 11, 5, 17, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1382617884, 'comment_body': 'Outdated approach', 'comment_created': datetime.datetime(2023, 11, 5, 17, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1382618230, 'comment_body': 'https://chat.zulip.org/#narrow/stream/3-backend/topic/topic_wildcard_mentioned.20flag/near/1673984', 'comment_created': datetime.datetime(2023, 11, 5, 17, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1382618546, 'comment_body': 'https://github.com/zulip/zulip/pull/27278#discussion_r1365821523', 'comment_created': datetime.datetime(2023, 11, 5, 17, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1383788632, 'comment_body': ""`24a603b` doesn't resolve to a commit, presumably due to rebasing. "", 'comment_created': datetime.datetime(2023, 11, 6, 18, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1384749668, 'comment_body': 'Corrected it to c37871a. Thanks.', 'comment_created': datetime.datetime(2023, 11, 7, 11, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1388563959, 'comment_body': '```suggestion\r\n                            Whether this message contained either a\r\n                            <a href=""/help/mention-a-user-or-group#mention-everyone-on-a-stream"">stream wildcard mention</a>\r\n                            like @**all** or a topic wildcard mention (@**topic**). Cannot be changed\r\n```', 'comment_created': datetime.datetime(2023, 11, 9, 20, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1388564193, 'comment_body': '```suggestion\r\n                            Whether this message contained a', 'comment_created': datetime.datetime(2023, 11, 9, 20, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1388565989, 'comment_body': ""```suggestion\r\n                            Whether this message contained a topic wildcard mention (@**topic**).\r\n```\r\nLooks like we don't have a documentation we can link to yet, which I assume is a follow-up task."", 'comment_created': datetime.datetime(2023, 11, 9, 20, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'alexmv', 'type': 'User'}, {'comment_id': 1389400662, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2023, 11, 10, 13, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1389703253, 'comment_body': 'This last line looks copy-pasted from a note in `events.py` about backwards-compatibility of RabbitMQ event formats (protocol between Django and Tornado and Tornado reloading its own queues with a new version).\r\n\r\nIt is not applicable to this code, which is, I think, about the API with clients, and should be removed when clients no longer require it, regardless of the server release cycle.', 'comment_created': datetime.datetime(2023, 11, 10, 17, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1389706008, 'comment_body': 'Changing the last sentence to ""Remove this when we no longer support legacy clients that have not been updated to access `stream_wildcard_mentioned`.""', 'comment_created': datetime.datetime(2023, 11, 10, 17, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1389711746, 'comment_body': ""I think this logic is wrong -- can't we just check `message.topic_wildcard_mentioned`? That answers the question of whether the mention applied to you or not, without any reference to subscriptions."", 'comment_created': datetime.datetime(2023, 11, 10, 17, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1389718034, 'comment_body': ""If a user unsubscribes. Should we highlight previous topic mentions in that stream?\r\n\r\nFor stream wildcards, we don't."", 'comment_created': datetime.datetime(2023, 11, 10, 18, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1389718636, 'comment_body': ""We can't rely on `message_row` existing -- consider drafts, message edit history, and compose previews.\r\n\r\nI'll try to rework this."", 'comment_created': datetime.datetime(2023, 11, 10, 18, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'b500f027f457bde28559f2820bb2371166ebbaf7', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a224479daf419fad7c840056a492963e7ea650c', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1358600509,user_topics: Update API documentation.,"[CZO Discussion](https://chat.zulip.org/#narrow/stream/378-api-design/topic/muted.20topics/near/1557615)

This commit adds the missing `UNMUTED` visibility policy to the documentation for `api/get-events` and `api/register-queue`.

It replaces `INHERIT` with `NONE` for a clearer name in the `api/update-user-topic` documentation.


<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->
<hr>

**Screenshots and screen captures:**
<details>
<summary>
<b>api/get-events</b>
</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/f62434bf-b8a3-4d12-b4ef-b7cd2819b3ef""></img>
</details>

<details>
<summary>
<b>api/update-user-topic (main description)</b>
</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/6bf6021a-c9bb-4d92-98d9-101f7d4363f0""></img>
</details>

<details>
<summary>
<b>api/update-user-topic</b>
</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/6ef1fad0-e188-4a03-b345-6d905f860deb""></img>
</details>

<details>
<summary>
<b>api/mute-topic (main description)</b>
</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/d9b9e3bb-7301-462d-a2d1-72a3694405ec""></img>
</details>

<details>
<summary>
<b>api/register-queue</b>
</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/baa8ea50-2ab0-4512-bdaf-68eb28a7d8ee""></img>
</details>

<details>
<summary>
<b>api/changelog</b>
</summary>
<img src=""https://github.com/zulip/zulip/assets/56781761/f0a7b7c5-4efd-468b-b342-6fbec8e4b215""></img>
</details>

<hr>
<details>

<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25704,https://api.github.com/repos/zulip/zulip/pulls/25704,https://github.com/zulip/zulip/pull/25704,closed,30,29,2,1,5,10,2,0,"[{'name': 'size: L'}, {'name': 'integration review'}]",2023-05-22 06:07:13+00:00,2023-05-30 17:46:06+00:00,733133.0,"8 days, 11:38:53","[{'comment_id': 1202263085, 'comment_body': 'The ""in events"" seems weird to me here, since the ""None"" value is also used in the `visibility_policy` parameter. I think it can just read:\r\n\r\n> - 0 = None. Used to indicate that the user ...', 'comment_created': datetime.datetime(2023, 5, 23, 12, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1202264309, 'comment_body': ""I don't think we need the example in the parenthesis."", 'comment_created': datetime.datetime(2023, 5, 23, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1202270842, 'comment_body': 'The ""New in Zulip 7.0 ..."" part needs to be in a **Changes** note for the field. So it would read something like ...\r\n\r\n> - 2 = Unmuted. Used to record unmuted topics.\r\n> \r\n> **Changes**: In Zulip 7.0 (feature level 170), added unmuted as a visibility policy option.', 'comment_created': datetime.datetime(2023, 5, 23, 12, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1202311619, 'comment_body': 'Can we fix all of these all caps in this parameter description to only have the first letter capitalized here, and revise the explanatory text so that they are lowercase and link to the help center ... maybe something like,\r\n\r\n> - 0 = None. Removes the visibility policy previously set for the topic.\r\n> - 1 = Muted. [Mutes the topic](/help/mute-a-topic) in a stream.\r\n> - 2 = Unmuted. [Unmutes the topic](/help/mute-a-topic) in a muted stream.\r\n>\r\n> In an unmuted stream, a topic visibility policy of unmuted will have the same effect as the ""None"" visibility policy.\r\n\r\n---\r\n\r\nIn general, it\'s good to avoid describing the UI of settings in the API documentation if possible, because it might vary for different clients. For example, the mobile or terminal apps might do something different than the web app to indicate muted topics or streams. That\'s why linking to the help center documentation can be helpful because there we do try to explain what users will experience in regards to the UI for the web app and also as in this case for the mobile app.', 'comment_created': datetime.datetime(2023, 5, 23, 13, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1202312939, 'comment_body': 'Same note about adding a **Changes** note here.', 'comment_created': datetime.datetime(2023, 5, 23, 13, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1202914617, 'comment_body': 'Another reason that\'s a good change is because this text is already within the documentation of an event, so ""in events"" is redundant.\r\n\r\nI think the idea may have been to refer to the fact that a visibility policy of 0/None does not appear in the `user_topics` data in the /api/register-queue response. But really the place to cover that is in that response\'s own docs, and we do cover that there by simply not listing it as a possible value.\r\n', 'comment_created': datetime.datetime(2023, 5, 23, 19, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1204346020, 'comment_body': ""Let's link these ideas ...\r\n\r\n> * [`POST /user_topics`](/api/update-user-topic): Added a new endpoint to  update a user's personal preferences for a topic, which deprecates the  [`PATCH /users/me/subscriptions/muted_topics`](/api/mute-topic)  endpoint. The deprecated endpoint is maintained for  backwards-compatibility, but may be removed in a future release."", 'comment_created': datetime.datetime(2023, 5, 24, 15, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1204346305, 'comment_body': ""Let's simplify this a bit ...\r\n\r\n> **Changes**: Deprecated in Zulip 7.0 (feature level 170). Clients connecting to newer servers should use the [`POST /user_topics`](/api/update-user-topic) endpoint as this endpoint may be removed in a future release.\r\n\r\nWhile we're here can we update the description too?\r\n\r\n> [Mute or unmute a topic](/help/mute-a-topic) within a stream that the current user is subscribed to."", 'comment_created': datetime.datetime(2023, 5, 24, 15, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1204346464, 'comment_body': ""I feel like 'muting state' could be better worded as ...\r\n\r\n> **Changes**: New in Zulip 7.0 (feature level 170). Previously, toggling whether a topic was muted or unmuted was managed by the [`PATCH /users/me/subscriptions/muted_topics endpoint`](/api/mute-topic).\r\n\r\nSince we're linking to that endpoint where it says it's deprecated, I don't think we need that last bit."", 'comment_created': datetime.datetime(2023, 5, 24, 15, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1204368581, 'comment_body': ""Also, it'd be good to add a screenshot of this and the other endpoint's main description with these **Changes** notes."", 'comment_created': datetime.datetime(2023, 5, 24, 15, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}]","[{'commit_sha': '0df4f654ad59d0fbc4d80f9ab15414869fb94ea9', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1463715571,notifications: Rename `private_message` to `direct_message`.,"[CZO message](https://chat.zulip.org/#narrow/stream/2-general/topic/private.20messages.20.3D.3E.20direct.20messages/near/1588736):
> It's probably be a while before we manage to rename everything, but I think we should do any renames that are easy to verify as we notice them. (Some of the backend stuff is tricky, like the notification triggers, because items can be in the API, database, or queues -- **@Prakhar-Pratyush** FYI for the `private_message` notification trigger value that sits in queues, mainly since you're doing a similar rename right now for topic wildcard mentions and it might make sense for you to change them both while it's fresh)

---
* The First commit renames the `PRIVATE_MESSAGE` attribute of the `NotificationTriggers` class to `DIRECT_MESSAGE`. -- custom migration to update the existing value in the database + API changes.
* The Second commit renames the keyword `pm` to `dm` in the `RecipientInfoResult` dataclass. -- handles the fields that sit in the queues.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

---
**Manual Testing**

I did manual testing by adding the translation code (`TODO/compatibility`) in `event_queue.py` and keeping the field in the event sent by `message_send` and `message_edit` codepath as `pm_mention_email_disabled_user_ids` (instead of `dm_mention_email_disabled_user_ids`).

* Disabled the setting ""email notification for DM, mentions, and alerts""

* No missed message emails were sent.

* Without the compatibility code i.e. simply using the following code block,
``` 
dm_mention_push_disabled_user_ids = set(event_template.pop(""dm_mention_push_disabled_user_ids"", []) 
```
missed message emails were sent.

---

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26427,https://api.github.com/repos/zulip/zulip/pulls/26427,https://github.com/zulip/zulip/pull/26427,closed,263,152,23,3,5,7,3,0,"[{'name': 'size: XL'}, {'name': 'integration review'}, {'name': 'mentor review'}]",2023-08-05 07:50:11+00:00,2023-08-11 00:41:49+00:00,492698.0,"5 days, 16:51:38","[{'comment_id': 1285211139, 'comment_body': ""If we are doing the `x in y` check earlier, we don't need to provide a default value of `[]` when we do `.get(x)`."", 'comment_created': datetime.datetime(2023, 8, 6, 12, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1286153595, 'comment_body': 'Hmm, where is the compatibility code for handling ""private_message"" in a push notifications queue?', 'comment_created': datetime.datetime(2023, 8, 7, 16, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1286156953, 'comment_body': 'Yeah, this would be a nice simplification.', 'comment_created': datetime.datetime(2023, 8, 7, 16, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1286158134, 'comment_body': ""Reading this if/else chain, I'm pretty sure it will fail if handling such an event in the queue; there's a final assert at the end, which will bubble up an exception, which seems bad."", 'comment_created': datetime.datetime(2023, 8, 7, 16, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1287389154, 'comment_body': 'Prakhar mentioned this is PM, the issue here is the `set` function cannot handle an `Optional` argument (which `.get` returns without a provided default)\r\n\r\n> zerver/tornado/event_queue.py:1001: error: Argument 1 to ""set"" has incompatible type ""Optional[Any]""; expected ""Iterable[Any]"" [arg-type]', 'comment_created': datetime.datetime(2023, 8, 8, 16, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1287479519, 'comment_body': 'Hm, the compatibility code was missing.\r\n\r\nAdded the compatibility code + did manual testing by changing the trigger value in `get_push_notification_trigger`\r\n', 'comment_created': datetime.datetime(2023, 8, 8, 18, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1290801426, 'comment_body': 'OK.', 'comment_created': datetime.datetime(2023, 8, 11, 0, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'cc34bc39132e5078a125e5621048b841fc493935', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2ad0dc38478c00b9a2b6f8860cb8bb3555f57f8', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c858d915afc45a0245efe4fc33fef2eeba4baa7', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1460483737,test_users: Use 'do_change_user_setting' instead of '.save()'.,"Follow-up : [#25828 (comment)](https://github.com/zulip/zulip/pull/25828#discussion_r1244652123)
> This should use `do_change_user_settings`.
(Maybe it would be nice to change all of this test in a sweep in a prep commit, since this test uses the `.save()` anti-pattern.)

While working on the follow-up, I noticed a small improvement, and the same has been included as a prep commit in this PR. The commit message explains the reasoning in detail. (Skipping to explain again in the PR description.)
 
<!-- Describe your pull request here.-->



<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->



<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26404,https://api.github.com/repos/zulip/zulip/pulls/26404,https://github.com/zulip/zulip/pull/26404,closed,27,29,1,2,1,3,3,0,"[{'name': 'size: L'}, {'name': 'integration review'}, {'name': 'mentor review'}]",2023-08-02 21:59:41+00:00,2023-08-07 17:01:52+00:00,414131.0,"4 days, 19:02:11","[{'comment_id': 1285209926, 'comment_body': ""Why should this be a function? It isn't use anywhere else. I think just the for loop will suffice."", 'comment_created': datetime.datetime(2023, 8, 6, 12, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'abhijeetbodas2001', 'type': 'User'}, {'comment_id': 1285770992, 'comment_body': 'Ah right!\r\n\r\nMade the changes.', 'comment_created': datetime.datetime(2023, 8, 7, 12, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'prakhar1144', 'type': 'User'}, {'comment_id': 1286164316, 'comment_body': ""This works. Looking at https://github.com/zulip/zulip/commit/b10f156250e3b982d8b7200479279cbb85069f1d#diff-338fc8375bdda13ccdd1d4a31b273f2ee9a121f0fbe7bffe820b8b3d24f43001, the history is that originally when drafting this test, the default value was one of light/dark, and so that extra line was necessary to make it obvious that the test was verifying Hamlet wasn't changed, but that's no longer necessary now that the default isn't one of the values used in the test."", 'comment_created': datetime.datetime(2023, 8, 7, 17, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'e156b15139eb6d72381666d1a32d078f92321a5f', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '959b47793a58d0fccb9434b047949ed60c0f147e', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1460197833,test_event_queue: Set the notification settings explicitly.,"Follow-up : [#25640 (comment)](https://github.com/zulip/zulip/pull/25640#issuecomment-1590251661)

> https://github.com/zulip/zulip/pull/25640#discussion_r1228823795 might be worth a follow-up to make it easier to see why those tests are correct.

[#25640 (comment)](https://github.com/zulip/zulip/pull/25640/commits/18e1d42f81f50f12d678ad8b5539b924b9c9d564#r1228823795)
> It would also be good to explicitly set `enable_followed_topic_email_notifications` to True at the start of the first test.

<!-- Describe your pull request here.-->



<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26400,https://api.github.com/repos/zulip/zulip/pulls/26400,https://github.com/zulip/zulip/pull/26400,closed,7,1,1,1,2,0,3,0,"[{'name': 'size: S'}, {'name': 'integration review'}, {'name': 'mentor review'}]",2023-08-02 17:46:32+00:00,2023-08-07 17:08:52+00:00,429740.0,"4 days, 23:22:20",[],"[{'commit_sha': '22a89b7c313440b0aa6e4e13657ab9c67e5d2349', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1446651968,notifications: Remove the stray notification trigger strings.,"[#25828 (comment)](https://github.com/zulip/zulip/pull/25828#discussion_r1259828715)

> Would be great if we didn't have any stray trigger strings in this file, as well as in test_notification_data.py, although not a blocker :)

> Included in my TODO list. -- stray trigger strings have been used in a lot of places in this file and a few others. I'll change all of them in a separate mini PR.

---

This commit removes the stray strings used to refer to various types of notification triggers.

We use the attributes of the `NotificationTriggers` class instead.

<!-- Describe your pull request here.-->



<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->


<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26339,https://api.github.com/repos/zulip/zulip/pulls/26339,https://github.com/zulip/zulip/pull/26339,closed,189,121,10,1,1,0,2,0,"[{'name': 'size: XL'}, {'name': 'mentor review'}]",2023-07-24 12:32:59+00:00,2023-07-24 18:02:14+00:00,19755.0,5:29:15,[],"[{'commit_sha': '40ff53233b6a597478b6e7be8a392741d50e6cec', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39
1446454040,settings: Add a saving-saved indicator to the 'SETTINGS/TOPICS' UI.,"[#26016 (comment)](https://github.com/zulip/zulip/pull/26016#issuecomment-1639063408)

> I think the settings ""topics"" UI is missing a loading...saved indicator interaction to show you that your changes are saved; right now you get no feedback at all that your change works. But that feels like something that'd be OK as an immediate follow-up.

---

This commit adds a 'saving...' - 'saved' indicator to the 'SETTINGS/TOPICS' UI.

This improves the UX by reflecting that the changes are saved.

---
<!-- Describe your pull request here.-->


<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

[screen-capture.webm](https://github.com/zulip/zulip/assets/56781761/fc0e4368-3fdc-4b96-a5bf-8191c5e180d1)


<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26337,https://api.github.com/repos/zulip/zulip/pulls/26337,https://github.com/zulip/zulip/pull/26337,closed,44,1,4,1,4,0,4,0,"[{'name': 'size: M'}, {'name': 'integration review'}, {'name': 'buddy review'}, {'name': 'mentor review'}]",2023-07-24 10:23:28+00:00,2023-08-06 20:55:21+00:00,1161113.0,"13 days, 10:31:53",[],"[{'commit_sha': 'a3aef77de3fa9352c226c23d03e271dfe703ddc5', 'committer_username': 'prakhar1144', 'committer_name': 'Prakhar Pratyush', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 20, 5, 21, 23, tzinfo=datetime.timezone.utc)}]",Prakhar Pratyush,56781761,,User,,53,,22,39

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43160685,zulip,zulip/zulip,Python,7615,21003,376,1133,60235,2483,28,806,"[{'id': 2022856625, 'number': 31377, 'closed': datetime.datetime(2024, 8, 19, 17, 14, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 16, 12, 0, 42, tzinfo=datetime.timezone.utc), 'time_taken': 278047.0, 'time_delta': '3 days, 5:14:07', 'additions': 170, 'deletions': 161, 'state': 'closed'}, {'id': 2020775226, 'number': 31360, 'closed': datetime.datetime(2024, 8, 15, 16, 46, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 15, 8, 57, 1, tzinfo=datetime.timezone.utc), 'time_taken': 28170.0, 'time_delta': '7:49:30', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 2018645067, 'number': 31346, 'closed': datetime.datetime(2024, 8, 14, 20, 20, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 14, 7, 26, 29, tzinfo=datetime.timezone.utc), 'time_taken': 46469.0, 'time_delta': '12:54:29', 'additions': 131, 'deletions': 11, 'state': 'closed'}, {'id': 2010383137, 'number': 31310, 'closed': datetime.datetime(2024, 8, 12, 19, 16, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 8, 12, 4, 23, tzinfo=datetime.timezone.utc), 'time_taken': 371511.0, 'time_delta': '4 days, 7:11:51', 'additions': 144, 'deletions': 124, 'state': 'closed'}, {'id': 1998585349, 'number': 31207, 'closed': datetime.datetime(2024, 8, 15, 1, 18, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 1, 13, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1164511.0, 'time_delta': '13 days, 11:28:31', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 1994504405, 'number': 31169, 'closed': datetime.datetime(2024, 8, 1, 5, 33, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 30, 14, 2, 48, tzinfo=datetime.timezone.utc), 'time_taken': 142264.0, 'time_delta': '1 day, 15:31:04', 'additions': 38, 'deletions': 27, 'state': 'closed'}, {'id': 1989154380, 'number': 31118, 'closed': None, 'created': datetime.datetime(2024, 7, 26, 10, 11, 42, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 73, 'deletions': 0, 'state': 'open'}, {'id': 1983900648, 'number': 31060, 'closed': datetime.datetime(2024, 7, 23, 19, 28, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 23, 18, 23, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3905.0, 'time_delta': '1:05:05', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1981446039, 'number': 31031, 'closed': datetime.datetime(2024, 7, 22, 17, 26, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 22, 14, 57, 8, tzinfo=datetime.timezone.utc), 'time_taken': 8965.0, 'time_delta': '2:29:25', 'additions': 44, 'deletions': 0, 'state': 'closed'}, {'id': 1980855775, 'number': 31028, 'closed': datetime.datetime(2024, 7, 22, 17, 21, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 22, 9, 52, 12, tzinfo=datetime.timezone.utc), 'time_taken': 26950.0, 'time_delta': '7:29:10', 'additions': 15, 'deletions': 7, 'state': 'closed'}, {'id': 1976415004, 'number': 30985, 'closed': datetime.datetime(2024, 7, 18, 17, 52, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 18, 16, 19, 5, tzinfo=datetime.timezone.utc), 'time_taken': 5624.0, 'time_delta': '1:33:44', 'additions': 13, 'deletions': 0, 'state': 'closed'}, {'id': 1972895897, 'number': 30952, 'closed': datetime.datetime(2024, 7, 17, 6, 27, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 17, 5, 48, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2309.0, 'time_delta': '0:38:29', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1971160507, 'number': 30922, 'closed': datetime.datetime(2024, 7, 16, 16, 36, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 16, 9, 41, 45, tzinfo=datetime.timezone.utc), 'time_taken': 24858.0, 'time_delta': '6:54:18', 'additions': 33, 'deletions': 2, 'state': 'closed'}, {'id': 1962520301, 'number': 30813, 'closed': datetime.datetime(2024, 7, 17, 18, 36, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 10, 14, 12, 37, tzinfo=datetime.timezone.utc), 'time_taken': 620604.0, 'time_delta': '7 days, 4:23:24', 'additions': 195, 'deletions': 96, 'state': 'closed'}, {'id': 1960381902, 'number': 30789, 'closed': datetime.datetime(2024, 7, 9, 20, 8, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 9, 15, 5, 18, tzinfo=datetime.timezone.utc), 'time_taken': 18164.0, 'time_delta': '5:02:44', 'additions': 74, 'deletions': 40, 'state': 'closed'}, {'id': 1953506492, 'number': 30729, 'closed': datetime.datetime(2024, 7, 8, 20, 0, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 4, 12, 4, 32, tzinfo=datetime.timezone.utc), 'time_taken': 374140.0, 'time_delta': '4 days, 7:55:40', 'additions': 197, 'deletions': 5, 'state': 'closed'}, {'id': 1944189507, 'number': 30625, 'closed': datetime.datetime(2024, 6, 28, 17, 41, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 28, 11, 49, 53, tzinfo=datetime.timezone.utc), 'time_taken': 21115.0, 'time_delta': '5:51:55', 'additions': 12, 'deletions': 3, 'state': 'closed'}, {'id': 1943872845, 'number': 30623, 'closed': datetime.datetime(2024, 6, 28, 18, 4, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 28, 8, 32, 40, tzinfo=datetime.timezone.utc), 'time_taken': 34331.0, 'time_delta': '9:32:11', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 1935156617, 'number': 30549, 'closed': datetime.datetime(2024, 6, 24, 17, 44, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 24, 10, 7, 50, tzinfo=datetime.timezone.utc), 'time_taken': 27400.0, 'time_delta': '7:36:40', 'additions': 84, 'deletions': 142, 'state': 'closed'}, {'id': 1930257362, 'number': 30502, 'closed': None, 'created': datetime.datetime(2024, 6, 20, 10, 1, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 3, 'deletions': 3, 'state': 'open'}, {'id': 1928580719, 'number': 30486, 'closed': datetime.datetime(2024, 7, 8, 17, 32, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 19, 11, 49, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1662156.0, 'time_delta': '19 days, 5:42:36', 'additions': 31, 'deletions': 6, 'state': 'closed'}, {'id': 1926107210, 'number': 30463, 'closed': datetime.datetime(2024, 6, 18, 16, 39, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 18, 9, 42, 36, tzinfo=datetime.timezone.utc), 'time_taken': 25034.0, 'time_delta': '6:57:14', 'additions': 43, 'deletions': 83, 'state': 'closed'}, {'id': 1924615448, 'number': 30455, 'closed': datetime.datetime(2024, 6, 17, 17, 42, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 17, 16, 33, 1, tzinfo=datetime.timezone.utc), 'time_taken': 4171.0, 'time_delta': '1:09:31', 'additions': 105, 'deletions': 47, 'state': 'closed'}, {'id': 1920543752, 'number': 30432, 'closed': datetime.datetime(2024, 6, 14, 17, 1, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 14, 11, 52, 5, tzinfo=datetime.timezone.utc), 'time_taken': 18576.0, 'time_delta': '5:09:36', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1916837285, 'number': 30404, 'closed': datetime.datetime(2024, 6, 15, 0, 26, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 12, 15, 20, 1, tzinfo=datetime.timezone.utc), 'time_taken': 205582.0, 'time_delta': '2 days, 9:06:22', 'additions': 95, 'deletions': 6, 'state': 'closed'}, {'id': 1911755077, 'number': 30374, 'closed': datetime.datetime(2024, 6, 10, 17, 37, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 10, 9, 25, 41, tzinfo=datetime.timezone.utc), 'time_taken': 29520.0, 'time_delta': '8:12:00', 'additions': 24, 'deletions': 7, 'state': 'closed'}, {'id': 1909141441, 'number': 30350, 'closed': datetime.datetime(2024, 6, 17, 18, 21, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 7, 12, 41, 44, tzinfo=datetime.timezone.utc), 'time_taken': 884386.0, 'time_delta': '10 days, 5:39:46', 'additions': 36, 'deletions': 21, 'state': 'closed'}, {'id': 1908722057, 'number': 30347, 'closed': datetime.datetime(2024, 6, 10, 21, 23, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 7, 8, 31, 24, tzinfo=datetime.timezone.utc), 'time_taken': 305514.0, 'time_delta': '3 days, 12:51:54', 'additions': 41, 'deletions': 2, 'state': 'closed'}, {'id': 1907513155, 'number': 30337, 'closed': datetime.datetime(2024, 7, 11, 16, 51, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 6, 15, 30, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3028912.0, 'time_delta': '35 days, 1:21:52', 'additions': 87, 'deletions': 29, 'state': 'closed'}, {'id': 1900174875, 'number': 30285, 'closed': datetime.datetime(2024, 6, 3, 15, 53, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 3, 7, 30, 53, tzinfo=datetime.timezone.utc), 'time_taken': 30155.0, 'time_delta': '8:22:35', 'additions': 30, 'deletions': 28, 'state': 'closed'}, {'id': 1895673656, 'number': 30253, 'closed': datetime.datetime(2024, 5, 30, 17, 52, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 30, 10, 19, 30, tzinfo=datetime.timezone.utc), 'time_taken': 27183.0, 'time_delta': '7:33:03', 'additions': 79, 'deletions': 8, 'state': 'closed'}, {'id': 1893821298, 'number': 30243, 'closed': datetime.datetime(2024, 5, 29, 23, 12, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 29, 12, 41, 39, tzinfo=datetime.timezone.utc), 'time_taken': 37856.0, 'time_delta': '10:30:56', 'additions': 19, 'deletions': 12, 'state': 'closed'}, {'id': 1890100972, 'number': 30220, 'closed': datetime.datetime(2024, 5, 30, 18, 32, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 27, 12, 37, 20, tzinfo=datetime.timezone.utc), 'time_taken': 280532.0, 'time_delta': '3 days, 5:55:32', 'additions': 20, 'deletions': 1, 'state': 'closed'}, {'id': 1889655606, 'number': 30217, 'closed': datetime.datetime(2024, 8, 15, 20, 31, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 27, 8, 28, 30, tzinfo=datetime.timezone.utc), 'time_taken': 6955390.0, 'time_delta': '80 days, 12:03:10', 'additions': 182, 'deletions': 161, 'state': 'closed'}, {'id': 1886757102, 'number': 30196, 'closed': datetime.datetime(2024, 5, 24, 17, 17, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 24, 12, 31, 58, tzinfo=datetime.timezone.utc), 'time_taken': 17138.0, 'time_delta': '4:45:38', 'additions': 20, 'deletions': 16, 'state': 'closed'}, {'id': 1879629742, 'number': 30153, 'closed': datetime.datetime(2024, 5, 21, 16, 24, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 21, 6, 2, 57, tzinfo=datetime.timezone.utc), 'time_taken': 37306.0, 'time_delta': '10:21:46', 'additions': 23, 'deletions': 22, 'state': 'closed'}, {'id': 1878727827, 'number': 30142, 'closed': datetime.datetime(2024, 7, 5, 22, 39, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 20, 16, 58, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3994859.0, 'time_delta': '46 days, 5:40:59', 'additions': 265, 'deletions': 45, 'state': 'closed'}, {'id': 1871699060, 'number': 30101, 'closed': datetime.datetime(2024, 5, 20, 6, 18, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 15, 17, 26, 29, tzinfo=datetime.timezone.utc), 'time_taken': 391935.0, 'time_delta': '4 days, 12:52:15', 'additions': 476, 'deletions': 273, 'state': 'closed'}, {'id': 1869522615, 'number': 30089, 'closed': datetime.datetime(2024, 5, 15, 18, 19, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 14, 17, 47, 50, tzinfo=datetime.timezone.utc), 'time_taken': 88274.0, 'time_delta': '1 day, 0:31:14', 'additions': 47, 'deletions': 33, 'state': 'closed'}, {'id': 1865933251, 'number': 30070, 'closed': datetime.datetime(2024, 5, 13, 23, 6, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 13, 7, 35, 53, tzinfo=datetime.timezone.utc), 'time_taken': 55817.0, 'time_delta': '15:30:17', 'additions': 44, 'deletions': 42, 'state': 'closed'}, {'id': 1865162855, 'number': 30063, 'closed': datetime.datetime(2024, 5, 13, 0, 24, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 12, 4, 59, 43, tzinfo=datetime.timezone.utc), 'time_taken': 69874.0, 'time_delta': '19:24:34', 'additions': 41, 'deletions': 60, 'state': 'closed'}, {'id': 1863958788, 'number': 30042, 'closed': datetime.datetime(2024, 5, 10, 19, 30, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 10, 13, 43, 59, tzinfo=datetime.timezone.utc), 'time_taken': 20783.0, 'time_delta': '5:46:23', 'additions': 208, 'deletions': 1541, 'state': 'closed'}, {'id': 1857743300, 'number': 29984, 'closed': datetime.datetime(2024, 5, 7, 23, 51, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 7, 8, 39, 56, tzinfo=datetime.timezone.utc), 'time_taken': 54713.0, 'time_delta': '15:11:53', 'additions': 118, 'deletions': 119, 'state': 'closed'}, {'id': 1856070361, 'number': 29958, 'closed': datetime.datetime(2024, 5, 6, 18, 18, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 6, 12, 20, 18, tzinfo=datetime.timezone.utc), 'time_taken': 21508.0, 'time_delta': '5:58:28', 'additions': 209, 'deletions': 209, 'state': 'closed'}, {'id': 1851379797, 'number': 29923, 'closed': datetime.datetime(2024, 5, 2, 20, 26, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 2, 12, 6, 1, tzinfo=datetime.timezone.utc), 'time_taken': 30027.0, 'time_delta': '8:20:27', 'additions': 14, 'deletions': 890, 'state': 'closed'}, {'id': 1849333075, 'number': 29910, 'closed': datetime.datetime(2024, 5, 2, 19, 48, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 1, 7, 46, 26, tzinfo=datetime.timezone.utc), 'time_taken': 129717.0, 'time_delta': '1 day, 12:01:57', 'additions': 18, 'deletions': 11, 'state': 'closed'}, {'id': 1848062091, 'number': 29897, 'closed': datetime.datetime(2024, 5, 28, 19, 9, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 30, 14, 30, 28, tzinfo=datetime.timezone.utc), 'time_taken': 2435969.0, 'time_delta': '28 days, 4:39:29', 'additions': 51, 'deletions': 10, 'state': 'closed'}, {'id': 1831747791, 'number': 29791, 'closed': datetime.datetime(2024, 4, 19, 16, 54, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 19, 14, 20, 58, tzinfo=datetime.timezone.utc), 'time_taken': 9236.0, 'time_delta': '2:33:56', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 1829126056, 'number': 29774, 'closed': datetime.datetime(2024, 5, 8, 23, 17, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 18, 9, 23, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1778042.0, 'time_delta': '20 days, 13:54:02', 'additions': 16, 'deletions': 2, 'state': 'closed'}, {'id': 1827266162, 'number': 29762, 'closed': datetime.datetime(2024, 5, 9, 0, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 17, 11, 56, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1858181.0, 'time_delta': '21 days, 12:09:41', 'additions': 189, 'deletions': 41, 'state': 'closed'}, {'id': 1819540308, 'number': 29704, 'closed': datetime.datetime(2024, 4, 16, 16, 49, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 12, 8, 54, 1, tzinfo=datetime.timezone.utc), 'time_taken': 374103.0, 'time_delta': '4 days, 7:55:03', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 1809228713, 'number': 29634, 'closed': datetime.datetime(2024, 7, 16, 20, 52, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 5, 12, 27, 26, tzinfo=datetime.timezone.utc), 'time_taken': 8843129.0, 'time_delta': '102 days, 8:25:29', 'additions': 162, 'deletions': 2, 'state': 'closed'}, {'id': 1804295503, 'number': 29590, 'closed': datetime.datetime(2024, 6, 5, 16, 31, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 3, 10, 10, 52, tzinfo=datetime.timezone.utc), 'time_taken': 5466065.0, 'time_delta': '63 days, 6:21:05', 'additions': 37, 'deletions': 1, 'state': 'closed'}, {'id': 1802065269, 'number': 29564, 'closed': datetime.datetime(2024, 4, 2, 22, 13, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 2, 9, 37, 9, tzinfo=datetime.timezone.utc), 'time_taken': 45376.0, 'time_delta': '12:36:16', 'additions': 79, 'deletions': 3, 'state': 'closed'}, {'id': 1800709885, 'number': 29544, 'closed': datetime.datetime(2024, 4, 11, 23, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 1, 15, 38, 3, tzinfo=datetime.timezone.utc), 'time_taken': 891339.0, 'time_delta': '10 days, 7:35:39', 'additions': 254, 'deletions': 165, 'state': 'closed'}, {'id': 1800248339, 'number': 29542, 'closed': datetime.datetime(2024, 4, 3, 19, 28, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 1, 10, 40, 25, tzinfo=datetime.timezone.utc), 'time_taken': 204460.0, 'time_delta': '2 days, 8:47:40', 'additions': 71, 'deletions': 20, 'state': 'closed'}, {'id': 1795907074, 'number': 29494, 'closed': datetime.datetime(2024, 3, 28, 16, 29, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 28, 12, 0, 51, tzinfo=datetime.timezone.utc), 'time_taken': 16112.0, 'time_delta': '4:28:32', 'additions': 20, 'deletions': 5, 'state': 'closed'}, {'id': 1794844417, 'number': 29480, 'closed': datetime.datetime(2024, 3, 28, 16, 3, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 27, 20, 27, 34, tzinfo=datetime.timezone.utc), 'time_taken': 70585.0, 'time_delta': '19:36:25', 'additions': 63, 'deletions': 25, 'state': 'closed'}, {'id': 1787657729, 'number': 29422, 'closed': datetime.datetime(2024, 3, 23, 5, 35, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 23, 4, 46, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2946.0, 'time_delta': '0:49:06', 'additions': 6, 'deletions': 8, 'state': 'closed'}, {'id': 1787649588, 'number': 29421, 'closed': datetime.datetime(2024, 5, 9, 21, 5, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 23, 4, 12, 42, tzinfo=datetime.timezone.utc), 'time_taken': 4121574.0, 'time_delta': '47 days, 16:52:54', 'additions': 378, 'deletions': 166, 'state': 'closed'}, {'id': 1786161460, 'number': 29410, 'closed': datetime.datetime(2024, 3, 27, 18, 43, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 22, 9, 7, 44, tzinfo=datetime.timezone.utc), 'time_taken': 466559.0, 'time_delta': '5 days, 9:35:59', 'additions': 22, 'deletions': 7, 'state': 'closed'}, {'id': 1779816461, 'number': 29345, 'closed': datetime.datetime(2024, 3, 19, 16, 25, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 19, 12, 52, 47, tzinfo=datetime.timezone.utc), 'time_taken': 12741.0, 'time_delta': '3:32:21', 'additions': 2682, 'deletions': 1, 'state': 'closed'}, {'id': 1774746680, 'number': 29313, 'closed': datetime.datetime(2024, 3, 15, 19, 31, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 15, 17, 52, 23, tzinfo=datetime.timezone.utc), 'time_taken': 5974.0, 'time_delta': '1:39:34', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1760864313, 'number': 29222, 'closed': datetime.datetime(2024, 3, 7, 17, 54, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 7, 11, 44, 28, tzinfo=datetime.timezone.utc), 'time_taken': 22206.0, 'time_delta': '6:10:06', 'additions': 19, 'deletions': 4, 'state': 'closed'}, {'id': 1760552620, 'number': 29221, 'closed': datetime.datetime(2024, 3, 8, 17, 25, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 7, 8, 56, 10, tzinfo=datetime.timezone.utc), 'time_taken': 116976.0, 'time_delta': '1 day, 8:29:36', 'additions': 40, 'deletions': 14, 'state': 'closed'}, {'id': 1758792066, 'number': 29211, 'closed': datetime.datetime(2024, 6, 5, 16, 30, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 6, 12, 15, 1, tzinfo=datetime.timezone.utc), 'time_taken': 7877733.0, 'time_delta': '91 days, 4:15:33', 'additions': 58, 'deletions': 76, 'state': 'closed'}, {'id': 1756831752, 'number': 29192, 'closed': datetime.datetime(2024, 3, 19, 16, 32, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 5, 13, 1, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1222275.0, 'time_delta': '14 days, 3:31:15', 'additions': 194, 'deletions': 3, 'state': 'closed'}, {'id': 1755038464, 'number': 29178, 'closed': datetime.datetime(2024, 3, 4, 22, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 4, 15, 59, 10, tzinfo=datetime.timezone.utc), 'time_taken': 22130.0, 'time_delta': '6:08:50', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 1751749529, 'number': 29146, 'closed': datetime.datetime(2024, 3, 1, 18, 47, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 1, 13, 49, 6, tzinfo=datetime.timezone.utc), 'time_taken': 17930.0, 'time_delta': '4:58:50', 'additions': 66, 'deletions': 12, 'state': 'closed'}, {'id': 1749443665, 'number': 29120, 'closed': datetime.datetime(2024, 2, 29, 20, 50, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 29, 10, 15, 52, tzinfo=datetime.timezone.utc), 'time_taken': 38072.0, 'time_delta': '10:34:32', 'additions': 78, 'deletions': 31, 'state': 'closed'}, {'id': 1747355429, 'number': 29108, 'closed': datetime.datetime(2024, 2, 28, 16, 48, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 28, 10, 1, 7, tzinfo=datetime.timezone.utc), 'time_taken': 24431.0, 'time_delta': '6:47:11', 'additions': 11, 'deletions': 6, 'state': 'closed'}, {'id': 1742201745, 'number': 29059, 'closed': datetime.datetime(2024, 2, 25, 17, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 25, 15, 5, 40, tzinfo=datetime.timezone.utc), 'time_taken': 8840.0, 'time_delta': '2:27:20', 'additions': 393, 'deletions': 13, 'state': 'closed'}, {'id': 1739712482, 'number': 29032, 'closed': datetime.datetime(2024, 2, 23, 0, 12, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 22, 21, 17, 1, tzinfo=datetime.timezone.utc), 'time_taken': 10541.0, 'time_delta': '2:55:41', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 1734390322, 'number': 28993, 'closed': datetime.datetime(2024, 2, 20, 16, 25, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 20, 10, 30, 15, tzinfo=datetime.timezone.utc), 'time_taken': 21334.0, 'time_delta': '5:55:34', 'additions': 106, 'deletions': 101, 'state': 'closed'}, {'id': 1732657618, 'number': 28982, 'closed': datetime.datetime(2024, 2, 20, 1, 58, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 19, 11, 6, 11, tzinfo=datetime.timezone.utc), 'time_taken': 53559.0, 'time_delta': '14:52:39', 'additions': 49, 'deletions': 15, 'state': 'closed'}, {'id': 1729656822, 'number': 28959, 'closed': datetime.datetime(2024, 2, 16, 22, 48, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 16, 14, 42, 47, tzinfo=datetime.timezone.utc), 'time_taken': 29144.0, 'time_delta': '8:05:44', 'additions': 9, 'deletions': 9, 'state': 'closed'}, {'id': 1729236636, 'number': 28956, 'closed': datetime.datetime(2024, 2, 16, 16, 30, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 16, 10, 25, 59, tzinfo=datetime.timezone.utc), 'time_taken': 21858.0, 'time_delta': '6:04:18', 'additions': 27, 'deletions': 5, 'state': 'closed'}, {'id': 1727319562, 'number': 28934, 'closed': datetime.datetime(2024, 2, 21, 18, 43, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 15, 10, 25, 25, tzinfo=datetime.timezone.utc), 'time_taken': 548278.0, 'time_delta': '6 days, 8:17:58', 'additions': 7734, 'deletions': 30, 'state': 'closed'}, {'id': 1721667954, 'number': 28907, 'closed': datetime.datetime(2024, 2, 12, 17, 6, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 12, 10, 27, 55, tzinfo=datetime.timezone.utc), 'time_taken': 23891.0, 'time_delta': '6:38:11', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 1715607121, 'number': 28860, 'closed': datetime.datetime(2024, 2, 21, 17, 4, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 7, 12, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1225223.0, 'time_delta': '14 days, 4:20:23', 'additions': 406, 'deletions': 322, 'state': 'closed'}, {'id': 1712880196, 'number': 28833, 'closed': datetime.datetime(2024, 2, 6, 7, 19, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 6, 3, 36, 24, tzinfo=datetime.timezone.utc), 'time_taken': 13370.0, 'time_delta': '3:42:50', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 1708327126, 'number': 28802, 'closed': datetime.datetime(2024, 2, 7, 2, 43, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 2, 12, 10, 33, tzinfo=datetime.timezone.utc), 'time_taken': 397970.0, 'time_delta': '4 days, 14:32:50', 'additions': 480, 'deletions': 15, 'state': 'closed'}, {'id': 1703495490, 'number': 28763, 'closed': datetime.datetime(2024, 1, 31, 20, 25, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 31, 7, 23, 51, tzinfo=datetime.timezone.utc), 'time_taken': 46900.0, 'time_delta': '13:01:40', 'additions': 63, 'deletions': 21, 'state': 'closed'}, {'id': 1701975664, 'number': 28749, 'closed': datetime.datetime(2024, 1, 30, 18, 10, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 30, 12, 24, 25, tzinfo=datetime.timezone.utc), 'time_taken': 20753.0, 'time_delta': '5:45:53', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1697217452, 'number': 28720, 'closed': datetime.datetime(2024, 3, 20, 18, 48, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 26, 14, 1, 43, tzinfo=datetime.timezone.utc), 'time_taken': 4682784.0, 'time_delta': '54 days, 4:46:24', 'additions': 475, 'deletions': 24, 'state': 'closed'}, {'id': 1689681019, 'number': 28660, 'closed': datetime.datetime(2024, 1, 25, 18, 57, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 22, 11, 57, 32, tzinfo=datetime.timezone.utc), 'time_taken': 284397.0, 'time_delta': '3 days, 6:59:57', 'additions': 3058, 'deletions': 8, 'state': 'closed'}, {'id': 1683142959, 'number': 28603, 'closed': datetime.datetime(2024, 1, 17, 16, 35, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 17, 15, 0, 50, tzinfo=datetime.timezone.utc), 'time_taken': 5679.0, 'time_delta': '1:34:39', 'additions': 1725, 'deletions': 1619, 'state': 'closed'}, {'id': 1682931328, 'number': 28596, 'closed': datetime.datetime(2024, 1, 29, 19, 23, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 17, 12, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1059888.0, 'time_delta': '12 days, 6:24:48', 'additions': 17828, 'deletions': 86, 'state': 'closed'}, {'id': 1677719045, 'number': 28559, 'closed': datetime.datetime(2024, 1, 15, 17, 40, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 13, 11, 12, 31, tzinfo=datetime.timezone.utc), 'time_taken': 196092.0, 'time_delta': '2 days, 6:28:12', 'additions': 302, 'deletions': 296, 'state': 'closed'}, {'id': 1675225601, 'number': 28540, 'closed': datetime.datetime(2024, 1, 11, 20, 32, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 11, 19, 42, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2974.0, 'time_delta': '0:49:34', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1674231238, 'number': 28532, 'closed': datetime.datetime(2024, 1, 11, 20, 35, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 11, 11, 33, 47, tzinfo=datetime.timezone.utc), 'time_taken': 32531.0, 'time_delta': '9:02:11', 'additions': 7939, 'deletions': 1, 'state': 'closed'}, {'id': 1670362848, 'number': 28497, 'closed': datetime.datetime(2024, 1, 14, 23, 47, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 9, 10, 17, 12, tzinfo=datetime.timezone.utc), 'time_taken': 480643.0, 'time_delta': '5 days, 13:30:43', 'additions': 9886, 'deletions': 9, 'state': 'closed'}, {'id': 1666184824, 'number': 28451, 'closed': datetime.datetime(2024, 1, 5, 20, 2, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 5, 13, 26, 13, tzinfo=datetime.timezone.utc), 'time_taken': 23802.0, 'time_delta': '6:36:42', 'additions': 106, 'deletions': 30, 'state': 'closed'}, {'id': 1663068292, 'number': 28419, 'closed': datetime.datetime(2024, 1, 4, 17, 43, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 3, 11, 17, 46, tzinfo=datetime.timezone.utc), 'time_taken': 109542.0, 'time_delta': '1 day, 6:25:42', 'additions': 47, 'deletions': 3, 'state': 'closed'}, {'id': 1659565883, 'number': 28377, 'closed': datetime.datetime(2023, 12, 30, 19, 15, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 29, 4, 50, 32, tzinfo=datetime.timezone.utc), 'time_taken': 138274.0, 'time_delta': '1 day, 14:24:34', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1653648160, 'number': 28313, 'closed': datetime.datetime(2023, 12, 23, 22, 58, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 21, 12, 7, 33, tzinfo=datetime.timezone.utc), 'time_taken': 211879.0, 'time_delta': '2 days, 10:51:19', 'additions': 51, 'deletions': 0, 'state': 'closed'}, {'id': 1651913041, 'number': 28301, 'closed': datetime.datetime(2024, 1, 2, 19, 20, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 20, 11, 34, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1151184.0, 'time_delta': '13 days, 7:46:24', 'additions': 3846, 'deletions': 3, 'state': 'closed'}, {'id': 1649888262, 'number': 28289, 'closed': datetime.datetime(2023, 12, 19, 18, 59, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 19, 7, 58, 22, tzinfo=datetime.timezone.utc), 'time_taken': 39676.0, 'time_delta': '11:01:16', 'additions': 974, 'deletions': 66, 'state': 'closed'}, {'id': 1648650764, 'number': 28280, 'closed': datetime.datetime(2023, 12, 19, 7, 49, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 18, 14, 1, 1, tzinfo=datetime.timezone.utc), 'time_taken': 64082.0, 'time_delta': '17:48:02', 'additions': 152, 'deletions': 17, 'state': 'closed'}, {'id': 1645656787, 'number': 28242, 'closed': datetime.datetime(2023, 12, 15, 16, 9, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 15, 9, 47, 47, tzinfo=datetime.timezone.utc), 'time_taken': 22905.0, 'time_delta': '6:21:45', 'additions': 15, 'deletions': 5, 'state': 'closed'}, {'id': 1642514579, 'number': 28196, 'closed': datetime.datetime(2023, 12, 15, 17, 8, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 13, 14, 8, 8, tzinfo=datetime.timezone.utc), 'time_taken': 183641.0, 'time_delta': '2 days, 3:00:41', 'additions': 3787, 'deletions': 97, 'state': 'closed'}, {'id': 1640198892, 'number': 28158, 'closed': datetime.datetime(2023, 12, 12, 20, 15, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 12, 8, 4, 10, tzinfo=datetime.timezone.utc), 'time_taken': 43896.0, 'time_delta': '12:11:36', 'additions': 131, 'deletions': 67, 'state': 'closed'}, {'id': 1639719792, 'number': 28146, 'closed': datetime.datetime(2023, 12, 11, 23, 3, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 11, 22, 39, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1462.0, 'time_delta': '0:24:22', 'additions': 20, 'deletions': 1, 'state': 'closed'}, {'id': 1637260472, 'number': 28110, 'closed': datetime.datetime(2023, 12, 11, 22, 7, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 9, 14, 39, 41, tzinfo=datetime.timezone.utc), 'time_taken': 199678.0, 'time_delta': '2 days, 7:27:58', 'additions': 259, 'deletions': 220, 'state': 'closed'}, {'id': 1636700880, 'number': 28101, 'closed': datetime.datetime(2024, 4, 25, 0, 40, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 8, 19, 55, tzinfo=datetime.timezone.utc), 'time_taken': 11940337.0, 'time_delta': '138 days, 4:45:37', 'additions': 146, 'deletions': 49, 'state': 'closed'}, {'id': 1634861685, 'number': 28084, 'closed': datetime.datetime(2023, 12, 7, 19, 54, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 7, 17, 9, 23, tzinfo=datetime.timezone.utc), 'time_taken': 9913.0, 'time_delta': '2:45:13', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1633043407, 'number': 28070, 'closed': datetime.datetime(2023, 12, 8, 20, 58, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 6, 18, 30, 20, tzinfo=datetime.timezone.utc), 'time_taken': 181681.0, 'time_delta': '2 days, 2:28:01', 'additions': 265, 'deletions': 31, 'state': 'closed'}, {'id': 1631023681, 'number': 28051, 'closed': datetime.datetime(2023, 12, 5, 20, 51, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 5, 18, 51, 32, tzinfo=datetime.timezone.utc), 'time_taken': 7210.0, 'time_delta': '2:00:10', 'additions': 127, 'deletions': 110, 'state': 'closed'}, {'id': 1629798288, 'number': 28045, 'closed': datetime.datetime(2023, 12, 5, 18, 4, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 5, 8, 13, 47, tzinfo=datetime.timezone.utc), 'time_taken': 35454.0, 'time_delta': '9:50:54', 'additions': 137, 'deletions': 3, 'state': 'closed'}, {'id': 1625766447, 'number': 28009, 'closed': datetime.datetime(2023, 12, 7, 2, 19, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 1, 14, 13, 11, tzinfo=datetime.timezone.utc), 'time_taken': 475570.0, 'time_delta': '5 days, 12:06:10', 'additions': 468, 'deletions': 305, 'state': 'closed'}, {'id': 1625002836, 'number': 28005, 'closed': datetime.datetime(2023, 12, 1, 16, 14, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 1, 5, 27, 28, tzinfo=datetime.timezone.utc), 'time_taken': 38807.0, 'time_delta': '10:46:47', 'additions': 5, 'deletions': 15, 'state': 'closed'}, {'id': 1623627826, 'number': 27985, 'closed': datetime.datetime(2023, 11, 30, 16, 28, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 30, 12, 36, 14, tzinfo=datetime.timezone.utc), 'time_taken': 13958.0, 'time_delta': '3:52:38', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1621474839, 'number': 27959, 'closed': datetime.datetime(2023, 12, 12, 6, 32, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 29, 9, 38, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1112050.0, 'time_delta': '12 days, 20:54:10', 'additions': 89, 'deletions': 13, 'state': 'closed'}, {'id': 1620740423, 'number': 27948, 'closed': datetime.datetime(2023, 11, 28, 23, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 28, 21, 33, 42, tzinfo=datetime.timezone.utc), 'time_taken': 5658.0, 'time_delta': '1:34:18', 'additions': 79, 'deletions': 50, 'state': 'closed'}, {'id': 1620164128, 'number': 27939, 'closed': datetime.datetime(2023, 12, 4, 15, 8, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 28, 15, 32, 49, tzinfo=datetime.timezone.utc), 'time_taken': 516950.0, 'time_delta': '5 days, 23:35:50', 'additions': 469, 'deletions': 21, 'state': 'closed'}, {'id': 1617673495, 'number': 27908, 'closed': datetime.datetime(2023, 11, 27, 17, 1, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 27, 10, 15, 55, tzinfo=datetime.timezone.utc), 'time_taken': 24361.0, 'time_delta': '6:46:01', 'additions': 181, 'deletions': 85, 'state': 'closed'}, {'id': 1617291210, 'number': 27905, 'closed': datetime.datetime(2023, 11, 27, 7, 30, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 27, 5, 24, 46, tzinfo=datetime.timezone.utc), 'time_taken': 7538.0, 'time_delta': '2:05:38', 'additions': 40, 'deletions': 15, 'state': 'closed'}, {'id': 1615935789, 'number': 27882, 'closed': datetime.datetime(2023, 11, 28, 17, 24, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 24, 15, 20, 7, tzinfo=datetime.timezone.utc), 'time_taken': 353052.0, 'time_delta': '4 days, 2:04:12', 'additions': 112, 'deletions': 50, 'state': 'closed'}, {'id': 1612659557, 'number': 27843, 'closed': datetime.datetime(2023, 11, 23, 17, 1, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 22, 11, 51, 24, tzinfo=datetime.timezone.utc), 'time_taken': 105021.0, 'time_delta': '1 day, 5:10:21', 'additions': 204, 'deletions': 174, 'state': 'closed'}, {'id': 1612240149, 'number': 27834, 'closed': datetime.datetime(2023, 11, 22, 7, 39, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 22, 7, 7, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1937.0, 'time_delta': '0:32:17', 'additions': 8, 'deletions': 7, 'state': 'closed'}, {'id': 1610642263, 'number': 27814, 'closed': datetime.datetime(2023, 11, 21, 17, 20, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 21, 10, 13, 53, tzinfo=datetime.timezone.utc), 'time_taken': 25624.0, 'time_delta': '7:07:04', 'additions': 69, 'deletions': 73, 'state': 'closed'}, {'id': 1610637364, 'number': 27813, 'closed': datetime.datetime(2023, 11, 23, 20, 52, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 21, 10, 11, 37, tzinfo=datetime.timezone.utc), 'time_taken': 211249.0, 'time_delta': '2 days, 10:40:49', 'additions': 295, 'deletions': 77, 'state': 'closed'}, {'id': 1609295110, 'number': 27800, 'closed': datetime.datetime(2023, 11, 20, 18, 41, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 20, 15, 8, 42, tzinfo=datetime.timezone.utc), 'time_taken': 12740.0, 'time_delta': '3:32:20', 'additions': 28, 'deletions': 0, 'state': 'closed'}, {'id': 1608539468, 'number': 27798, 'closed': datetime.datetime(2023, 11, 20, 16, 0, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 20, 7, 43, 50, tzinfo=datetime.timezone.utc), 'time_taken': 29775.0, 'time_delta': '8:16:15', 'additions': 107, 'deletions': 61, 'state': 'closed'}, {'id': 1607827125, 'number': 27790, 'closed': datetime.datetime(2023, 11, 19, 23, 4, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 19, 7, 23, 17, tzinfo=datetime.timezone.utc), 'time_taken': 56501.0, 'time_delta': '15:41:41', 'additions': 28, 'deletions': 1, 'state': 'closed'}, {'id': 1606350217, 'number': 27765, 'closed': datetime.datetime(2023, 11, 24, 15, 10, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 17, 12, 36, 50, tzinfo=datetime.timezone.utc), 'time_taken': 614010.0, 'time_delta': '7 days, 2:33:30', 'additions': 83, 'deletions': 127, 'state': 'closed'}, {'id': 1605778775, 'number': 27763, 'closed': datetime.datetime(2023, 11, 17, 22, 7, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 17, 6, 46, 56, tzinfo=datetime.timezone.utc), 'time_taken': 55224.0, 'time_delta': '15:20:24', 'additions': 173, 'deletions': 27, 'state': 'closed'}, {'id': 1604782796, 'number': 27736, 'closed': datetime.datetime(2023, 11, 16, 17, 48, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 16, 16, 38, 59, tzinfo=datetime.timezone.utc), 'time_taken': 4184.0, 'time_delta': '1:09:44', 'additions': 137, 'deletions': 138, 'state': 'closed'}, {'id': 1602465105, 'number': 27712, 'closed': datetime.datetime(2023, 11, 15, 17, 42, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 15, 12, 32, 7, tzinfo=datetime.timezone.utc), 'time_taken': 18618.0, 'time_delta': '5:10:18', 'additions': 50, 'deletions': 8, 'state': 'closed'}, {'id': 1600736524, 'number': 27697, 'closed': datetime.datetime(2023, 11, 14, 20, 7, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 14, 13, 32, 1, tzinfo=datetime.timezone.utc), 'time_taken': 23725.0, 'time_delta': '6:35:25', 'additions': 119, 'deletions': 96, 'state': 'closed'}, {'id': 1600163950, 'number': 27693, 'closed': datetime.datetime(2023, 11, 14, 20, 9, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 14, 6, 56, 6, tzinfo=datetime.timezone.utc), 'time_taken': 47590.0, 'time_delta': '13:13:10', 'additions': 15, 'deletions': 8, 'state': 'closed'}, {'id': 1598954360, 'number': 27678, 'closed': datetime.datetime(2023, 11, 15, 17, 26, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 13, 14, 17, 51, tzinfo=datetime.timezone.utc), 'time_taken': 184131.0, 'time_delta': '2 days, 3:08:51', 'additions': 219, 'deletions': 185, 'state': 'closed'}, {'id': 1598281303, 'number': 27675, 'closed': datetime.datetime(2023, 11, 13, 16, 11, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 13, 6, 58, 30, tzinfo=datetime.timezone.utc), 'time_taken': 33177.0, 'time_delta': '9:12:57', 'additions': 108, 'deletions': 114, 'state': 'closed'}, {'id': 1596787233, 'number': 27650, 'closed': datetime.datetime(2023, 11, 10, 21, 39, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 10, 19, 39, 18, tzinfo=datetime.timezone.utc), 'time_taken': 7183.0, 'time_delta': '1:59:43', 'additions': 22, 'deletions': 2, 'state': 'closed'}, {'id': 1596202145, 'number': 27647, 'closed': datetime.datetime(2023, 11, 10, 17, 15, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 10, 13, 24, 14, tzinfo=datetime.timezone.utc), 'time_taken': 13857.0, 'time_delta': '3:50:57', 'additions': 57, 'deletions': 61, 'state': 'closed'}, {'id': 1593047288, 'number': 27620, 'closed': None, 'created': datetime.datetime(2023, 11, 8, 17, 27, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 17, 'deletions': 17, 'state': 'open'}, {'id': 1590805720, 'number': 27598, 'closed': datetime.datetime(2023, 11, 7, 17, 30, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 7, 15, 11, 56, tzinfo=datetime.timezone.utc), 'time_taken': 8311.0, 'time_delta': '2:18:31', 'additions': 64, 'deletions': 14, 'state': 'closed'}, {'id': 1587082393, 'number': 27542, 'closed': datetime.datetime(2023, 11, 7, 19, 44, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 4, 14, 19, 38, tzinfo=datetime.timezone.utc), 'time_taken': 278701.0, 'time_delta': '3 days, 5:25:01', 'additions': 113, 'deletions': 30, 'state': 'closed'}, {'id': 1582632732, 'number': 27468, 'closed': datetime.datetime(2023, 11, 2, 0, 37, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 1, 13, 3, 11, tzinfo=datetime.timezone.utc), 'time_taken': 41670.0, 'time_delta': '11:34:30', 'additions': 65, 'deletions': 10, 'state': 'closed'}, {'id': 1572090784, 'number': 27367, 'closed': datetime.datetime(2023, 10, 25, 17, 28, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 25, 3, 39, 16, tzinfo=datetime.timezone.utc), 'time_taken': 49740.0, 'time_delta': '13:49:00', 'additions': 12, 'deletions': 7, 'state': 'closed'}, {'id': 1570073173, 'number': 27335, 'closed': datetime.datetime(2023, 11, 1, 18, 22, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 23, 22, 59, 28, tzinfo=datetime.timezone.utc), 'time_taken': 761002.0, 'time_delta': '8 days, 19:23:22', 'additions': 20, 'deletions': 18, 'state': 'closed'}, {'id': 1568849838, 'number': 27320, 'closed': datetime.datetime(2023, 11, 6, 18, 16, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 23, 9, 59, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1239453.0, 'time_delta': '14 days, 8:17:33', 'additions': 57, 'deletions': 58, 'state': 'closed'}, {'id': 1568021738, 'number': 27313, 'closed': datetime.datetime(2023, 10, 25, 3, 11, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 22, 9, 44, 36, tzinfo=datetime.timezone.utc), 'time_taken': 235587.0, 'time_delta': '2 days, 17:26:27', 'additions': 128, 'deletions': 64, 'state': 'closed'}, {'id': 1566750507, 'number': 27291, 'closed': datetime.datetime(2024, 1, 30, 22, 34, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 20, 13, 57, 9, tzinfo=datetime.timezone.utc), 'time_taken': 8843819.0, 'time_delta': '102 days, 8:36:59', 'additions': 100, 'deletions': 9, 'state': 'closed'}, {'id': 1566377578, 'number': 27286, 'closed': datetime.datetime(2023, 10, 20, 17, 7, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 20, 9, 52, tzinfo=datetime.timezone.utc), 'time_taken': 26138.0, 'time_delta': '7:15:38', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 1565219207, 'number': 27278, 'closed': datetime.datetime(2023, 11, 2, 16, 25, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 19, 16, 19, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1209959.0, 'time_delta': '14 days, 0:05:59', 'additions': 176, 'deletions': 102, 'state': 'closed'}, {'id': 1558381272, 'number': 27229, 'closed': datetime.datetime(2023, 10, 19, 17, 13, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 16, 11, 15, 11, tzinfo=datetime.timezone.utc), 'time_taken': 280673.0, 'time_delta': '3 days, 5:57:53', 'additions': 118, 'deletions': 25, 'state': 'closed'}, {'id': 1556437737, 'number': 27211, 'closed': datetime.datetime(2023, 10, 13, 22, 30, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 13, 20, 10, 54, tzinfo=datetime.timezone.utc), 'time_taken': 8396.0, 'time_delta': '2:19:56', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 1554396366, 'number': 27179, 'closed': datetime.datetime(2023, 10, 12, 16, 46, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 12, 15, 45, 29, tzinfo=datetime.timezone.utc), 'time_taken': 3645.0, 'time_delta': '1:00:45', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1553600340, 'number': 27175, 'closed': datetime.datetime(2023, 10, 12, 16, 53, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 12, 7, 33, 47, tzinfo=datetime.timezone.utc), 'time_taken': 33563.0, 'time_delta': '9:19:23', 'additions': 76, 'deletions': 47, 'state': 'closed'}, {'id': 1551328313, 'number': 27162, 'closed': datetime.datetime(2023, 10, 11, 17, 16, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 11, 5, 45, 49, tzinfo=datetime.timezone.utc), 'time_taken': 41436.0, 'time_delta': '11:30:36', 'additions': 1, 'deletions': 3, 'state': 'closed'}, {'id': 1547992647, 'number': 27121, 'closed': datetime.datetime(2023, 10, 9, 18, 17, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 9, 14, 25, 32, tzinfo=datetime.timezone.utc), 'time_taken': 13891.0, 'time_delta': '3:51:31', 'additions': 36, 'deletions': 1, 'state': 'closed'}, {'id': 1547684917, 'number': 27119, 'closed': datetime.datetime(2023, 10, 17, 22, 38, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 9, 11, 39, 35, tzinfo=datetime.timezone.utc), 'time_taken': 730722.0, 'time_delta': '8 days, 10:58:42', 'additions': 136, 'deletions': 29, 'state': 'closed'}, {'id': 1546939549, 'number': 27115, 'closed': datetime.datetime(2023, 10, 17, 23, 21, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 8, 19, 29, 1, tzinfo=datetime.timezone.utc), 'time_taken': 791525.0, 'time_delta': '9 days, 3:52:05', 'additions': 31, 'deletions': 37, 'state': 'closed'}, {'id': 1539789839, 'number': 27003, 'closed': datetime.datetime(2023, 10, 3, 16, 0, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 3, 11, 20, 14, tzinfo=datetime.timezone.utc), 'time_taken': 16833.0, 'time_delta': '4:40:33', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 1539543815, 'number': 26997, 'closed': datetime.datetime(2023, 10, 3, 15, 18, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 3, 8, 42, 14, tzinfo=datetime.timezone.utc), 'time_taken': 23786.0, 'time_delta': '6:36:26', 'additions': 7, 'deletions': 8, 'state': 'closed'}, {'id': 1537156602, 'number': 26958, 'closed': datetime.datetime(2023, 10, 11, 0, 15, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 1, 19, 22, 48, tzinfo=datetime.timezone.utc), 'time_taken': 795161.0, 'time_delta': '9 days, 4:52:41', 'additions': 203, 'deletions': 163, 'state': 'closed'}, {'id': 1536963982, 'number': 26957, 'closed': datetime.datetime(2023, 10, 1, 16, 27, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 1, 10, 48, 12, tzinfo=datetime.timezone.utc), 'time_taken': 20340.0, 'time_delta': '5:39:00', 'additions': 209, 'deletions': 58, 'state': 'closed'}, {'id': 1533619271, 'number': 26904, 'closed': datetime.datetime(2023, 10, 11, 0, 36, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 28, 7, 38, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1097914.0, 'time_delta': '12 days, 16:58:34', 'additions': 470, 'deletions': 127, 'state': 'closed'}, {'id': 1528852060, 'number': 26849, 'closed': datetime.datetime(2023, 9, 25, 18, 43, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 25, 13, 43, 15, tzinfo=datetime.timezone.utc), 'time_taken': 18006.0, 'time_delta': '5:00:06', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1528483232, 'number': 26848, 'closed': datetime.datetime(2023, 9, 27, 20, 11, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 25, 10, 6, 19, tzinfo=datetime.timezone.utc), 'time_taken': 209101.0, 'time_delta': '2 days, 10:05:01', 'additions': 156, 'deletions': 48, 'state': 'closed'}, {'id': 1528092179, 'number': 26846, 'closed': datetime.datetime(2023, 9, 25, 19, 39, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 25, 5, 29, 16, tzinfo=datetime.timezone.utc), 'time_taken': 50990.0, 'time_delta': '14:09:50', 'additions': 24, 'deletions': 22, 'state': 'closed'}, {'id': 1526422419, 'number': 26819, 'closed': datetime.datetime(2023, 9, 23, 0, 18, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 22, 11, 23, 4, tzinfo=datetime.timezone.utc), 'time_taken': 46545.0, 'time_delta': '12:55:45', 'additions': 18, 'deletions': 6, 'state': 'closed'}, {'id': 1526156443, 'number': 26815, 'closed': None, 'created': datetime.datetime(2023, 9, 22, 8, 23, 8, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 42, 'deletions': 5, 'state': 'open'}, {'id': 1518176100, 'number': 26760, 'closed': datetime.datetime(2023, 9, 18, 20, 17, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 16, 9, 54, 14, tzinfo=datetime.timezone.utc), 'time_taken': 210176.0, 'time_delta': '2 days, 10:22:56', 'additions': 39, 'deletions': 4, 'state': 'closed'}, {'id': 1513812888, 'number': 26724, 'closed': datetime.datetime(2023, 9, 15, 20, 22, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 13, 12, 35, 32, tzinfo=datetime.timezone.utc), 'time_taken': 200823.0, 'time_delta': '2 days, 7:47:03', 'additions': 34, 'deletions': 3, 'state': 'closed'}, {'id': 1505659846, 'number': 26657, 'closed': datetime.datetime(2023, 9, 7, 23, 54, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 7, 6, 4, 18, tzinfo=datetime.timezone.utc), 'time_taken': 64188.0, 'time_delta': '17:49:48', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 1495486276, 'number': 26610, 'closed': datetime.datetime(2023, 8, 31, 19, 2, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 12, 59, 19, tzinfo=datetime.timezone.utc), 'time_taken': 108169.0, 'time_delta': '1 day, 6:02:49', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1493940284, 'number': 26599, 'closed': datetime.datetime(2023, 9, 1, 17, 46, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 29, 14, 57, 42, tzinfo=datetime.timezone.utc), 'time_taken': 269315.0, 'time_delta': '3 days, 2:48:35', 'additions': 23, 'deletions': 127, 'state': 'closed'}, {'id': 1493531662, 'number': 26597, 'closed': datetime.datetime(2023, 8, 30, 0, 12, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 29, 10, 49, 7, tzinfo=datetime.timezone.utc), 'time_taken': 48194.0, 'time_delta': '13:23:14', 'additions': 29, 'deletions': 108, 'state': 'closed'}, {'id': 1490042828, 'number': 26579, 'closed': datetime.datetime(2023, 9, 12, 0, 57, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 25, 16, 57, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1497608.0, 'time_delta': '17 days, 8:00:08', 'additions': 28, 'deletions': 17, 'state': 'closed'}, {'id': 1482268781, 'number': 26536, 'closed': datetime.datetime(2023, 10, 22, 21, 24, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 6, 30, 9, tzinfo=datetime.timezone.utc), 'time_taken': 5410453.0, 'time_delta': '62 days, 14:54:13', 'additions': 96, 'deletions': 201, 'state': 'closed'}, {'id': 1477195864, 'number': 26506, 'closed': datetime.datetime(2023, 8, 16, 18, 31, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 16, 10, 6, 55, tzinfo=datetime.timezone.utc), 'time_taken': 30301.0, 'time_delta': '8:25:01', 'additions': 97, 'deletions': 29, 'state': 'closed'}, {'id': 1473244225, 'number': 26486, 'closed': datetime.datetime(2023, 8, 15, 17, 2, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 13, 6, 7, 45, tzinfo=datetime.timezone.utc), 'time_taken': 212058.0, 'time_delta': '2 days, 10:54:18', 'additions': 29, 'deletions': 7, 'state': 'closed'}, {'id': 1463715571, 'number': 26427, 'closed': datetime.datetime(2023, 8, 11, 0, 41, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 5, 7, 50, 11, tzinfo=datetime.timezone.utc), 'time_taken': 492698.0, 'time_delta': '5 days, 16:51:38', 'additions': 263, 'deletions': 152, 'state': 'closed'}, {'id': 1460483737, 'number': 26404, 'closed': datetime.datetime(2023, 8, 7, 17, 1, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 21, 59, 41, tzinfo=datetime.timezone.utc), 'time_taken': 414131.0, 'time_delta': '4 days, 19:02:11', 'additions': 27, 'deletions': 29, 'state': 'closed'}, {'id': 1460197833, 'number': 26400, 'closed': datetime.datetime(2023, 8, 7, 17, 8, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 17, 46, 32, tzinfo=datetime.timezone.utc), 'time_taken': 429740.0, 'time_delta': '4 days, 23:22:20', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 1454845226, 'number': 26382, 'closed': datetime.datetime(2023, 11, 13, 16, 29, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 29, 18, 16, 58, tzinfo=datetime.timezone.utc), 'time_taken': 9238339.0, 'time_delta': '106 days, 22:12:19', 'additions': 112, 'deletions': 7, 'state': 'closed'}, {'id': 1452590351, 'number': 26371, 'closed': datetime.datetime(2023, 11, 13, 17, 7, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 19, 21, 48, tzinfo=datetime.timezone.utc), 'time_taken': 9409548.0, 'time_delta': '108 days, 21:45:48', 'additions': 21, 'deletions': 10, 'state': 'closed'}, {'id': 1448682510, 'number': 26353, 'closed': datetime.datetime(2023, 8, 17, 20, 30, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 25, 15, 35, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2004883.0, 'time_delta': '23 days, 4:54:43', 'additions': 282, 'deletions': 13, 'state': 'closed'}, {'id': 1446651968, 'number': 26339, 'closed': datetime.datetime(2023, 7, 24, 18, 2, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 24, 12, 32, 59, tzinfo=datetime.timezone.utc), 'time_taken': 19755.0, 'time_delta': '5:29:15', 'additions': 189, 'deletions': 121, 'state': 'closed'}, {'id': 1446454040, 'number': 26337, 'closed': datetime.datetime(2023, 8, 6, 20, 55, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 24, 10, 23, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1161113.0, 'time_delta': '13 days, 10:31:53', 'additions': 44, 'deletions': 1, 'state': 'closed'}, {'id': 1421502665, 'number': 26195, 'closed': datetime.datetime(2023, 7, 13, 18, 34, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 17, 39, 27, tzinfo=datetime.timezone.utc), 'time_taken': 694521.0, 'time_delta': '8 days, 0:55:21', 'additions': 358, 'deletions': 83, 'state': 'closed'}, {'id': 1397478478, 'number': 26054, 'closed': datetime.datetime(2023, 10, 4, 20, 4, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 4, 8, 23, tzinfo=datetime.timezone.utc), 'time_taken': 9302167.0, 'time_delta': '107 days, 15:56:07', 'additions': 1945, 'deletions': 81, 'state': 'closed'}, {'id': 1392296773, 'number': 26016, 'closed': datetime.datetime(2023, 7, 18, 0, 39, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 14, 12, 21, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2895481.0, 'time_delta': '33 days, 12:18:01', 'additions': 500, 'deletions': 49, 'state': 'closed'}, {'id': 1387154448, 'number': 25978, 'closed': datetime.datetime(2023, 7, 4, 5, 3, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 10, 13, 39, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2042603.0, 'time_delta': '23 days, 15:23:23', 'additions': 742, 'deletions': 295, 'state': 'closed'}, {'id': 1369930744, 'number': 25828, 'closed': datetime.datetime(2023, 7, 17, 16, 39, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 30, 7, 16, 58, tzinfo=datetime.timezone.utc), 'time_taken': 4180947.0, 'time_delta': '48 days, 9:22:27', 'additions': 1089, 'deletions': 34, 'state': 'closed'}, {'id': 1358600509, 'number': 25704, 'closed': datetime.datetime(2023, 5, 30, 17, 46, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 22, 6, 7, 13, tzinfo=datetime.timezone.utc), 'time_taken': 733133.0, 'time_delta': '8 days, 11:38:53', 'additions': 30, 'deletions': 29, 'state': 'closed'}, {'id': 1354303287, 'number': 25640, 'closed': datetime.datetime(2023, 6, 14, 1, 1, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 17, 14, 34, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2370456.0, 'time_delta': '27 days, 10:27:36', 'additions': 835, 'deletions': 27, 'state': 'closed'}, {'id': 1330279169, 'number': 25308, 'closed': datetime.datetime(2023, 4, 27, 15, 56, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 27, 12, 21, 18, tzinfo=datetime.timezone.utc), 'time_taken': 12940.0, 'time_delta': '3:35:40', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 1314394766, 'number': 25127, 'closed': datetime.datetime(2023, 4, 25, 19, 46, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 14, 16, 43, 27, tzinfo=datetime.timezone.utc), 'time_taken': 961359.0, 'time_delta': '11 days, 3:02:39', 'additions': 155, 'deletions': 106, 'state': 'closed'}, {'id': 1306839807, 'number': 25052, 'closed': datetime.datetime(2023, 4, 18, 23, 40, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 9, 20, 28, 2, tzinfo=datetime.timezone.utc), 'time_taken': 789175.0, 'time_delta': '9 days, 3:12:55', 'additions': 313, 'deletions': 28, 'state': 'closed'}, {'id': 1303104395, 'number': 24998, 'closed': datetime.datetime(2023, 4, 7, 16, 45, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 5, 12, 16, 7, tzinfo=datetime.timezone.utc), 'time_taken': 188960.0, 'time_delta': '2 days, 4:29:20', 'additions': 121, 'deletions': 207, 'state': 'closed'}, {'id': 1298581729, 'number': 24943, 'closed': datetime.datetime(2023, 4, 4, 5, 31, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 1, 5, 53, 43, tzinfo=datetime.timezone.utc), 'time_taken': 257886.0, 'time_delta': '2 days, 23:38:06', 'additions': 540, 'deletions': 38, 'state': 'closed'}, {'id': 1280336526, 'number': 24742, 'closed': datetime.datetime(2023, 3, 29, 16, 50, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 17, 14, 55, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1043698.0, 'time_delta': '12 days, 1:54:58', 'additions': 454, 'deletions': 213, 'state': 'closed'}, {'id': 1279810914, 'number': 24737, 'closed': datetime.datetime(2023, 3, 27, 23, 18, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 17, 7, 48, 32, tzinfo=datetime.timezone.utc), 'time_taken': 919792.0, 'time_delta': '10 days, 15:29:52', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 1276667554, 'number': 24696, 'closed': datetime.datetime(2023, 3, 16, 0, 4, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 15, 11, 15, 27, tzinfo=datetime.timezone.utc), 'time_taken': 46143.0, 'time_delta': '12:49:03', 'additions': 11, 'deletions': 1, 'state': 'closed'}, {'id': 1275795095, 'number': 24690, 'closed': datetime.datetime(2023, 3, 16, 17, 55, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 14, 21, 27, 9, tzinfo=datetime.timezone.utc), 'time_taken': 160125.0, 'time_delta': '1 day, 20:28:45', 'additions': 88, 'deletions': 78, 'state': 'closed'}, {'id': 1269780483, 'number': 24629, 'closed': datetime.datetime(2023, 3, 10, 22, 39, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 9, 14, 49, 27, tzinfo=datetime.timezone.utc), 'time_taken': 114588.0, 'time_delta': '1 day, 7:49:48', 'additions': 22, 'deletions': 29, 'state': 'closed'}, {'id': 1223433472, 'number': 24236, 'closed': datetime.datetime(2023, 3, 7, 3, 15, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 14, 56, 21, tzinfo=datetime.timezone.utc), 'time_taken': 2981965.0, 'time_delta': '34 days, 12:19:25', 'additions': 452, 'deletions': 185, 'state': 'closed'}, {'id': 1197724702, 'number': 24075, 'closed': datetime.datetime(2023, 3, 15, 0, 48, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 14, 19, 57, 7, tzinfo=datetime.timezone.utc), 'time_taken': 5115111.0, 'time_delta': '59 days, 4:51:51', 'additions': 347, 'deletions': 44, 'state': 'closed'}, {'id': 1177115887, 'number': 23917, 'closed': datetime.datetime(2023, 11, 29, 22, 20, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 24, 16, 52, 52, tzinfo=datetime.timezone.utc), 'time_taken': 29395629.0, 'time_delta': '340 days, 5:27:09', 'additions': 32, 'deletions': 16, 'state': 'closed'}, {'id': 1167363348, 'number': 23886, 'closed': datetime.datetime(2023, 2, 4, 2, 20, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 15, 20, 57, 45, tzinfo=datetime.timezone.utc), 'time_taken': 4339374.0, 'time_delta': '50 days, 5:22:54', 'additions': 87, 'deletions': 56, 'state': 'closed'}, {'id': 1140455274, 'number': 23710, 'closed': datetime.datetime(2022, 12, 3, 1, 25, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 30, 14, 39, tzinfo=datetime.timezone.utc), 'time_taken': 211598.0, 'time_delta': '2 days, 10:46:38', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 1102021303, 'number': 23362, 'closed': datetime.datetime(2023, 4, 27, 23, 50, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 27, 17, 18, 19, tzinfo=datetime.timezone.utc), 'time_taken': 15748311.0, 'time_delta': '182 days, 6:31:51', 'additions': 28, 'deletions': 13, 'state': 'closed'}, {'id': 1096992257, 'number': 23326, 'closed': datetime.datetime(2022, 10, 24, 17, 18, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 24, 6, 13, tzinfo=datetime.timezone.utc), 'time_taken': 39958.0, 'time_delta': '11:05:58', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 1085946648, 'number': 23225, 'closed': datetime.datetime(2023, 1, 24, 19, 19, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 13, 11, 33, 16, tzinfo=datetime.timezone.utc), 'time_taken': 8927191.0, 'time_delta': '103 days, 7:46:31', 'additions': 149, 'deletions': 16, 'state': 'closed'}, {'id': 1073740700, 'number': 23120, 'closed': datetime.datetime(2022, 10, 7, 22, 20, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 2, 4, 18, 40, tzinfo=datetime.timezone.utc), 'time_taken': 496900.0, 'time_delta': '5 days, 18:01:40', 'additions': 28, 'deletions': 6, 'state': 'closed'}]"
