pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
678925369,[mypyc] Add tests for str.method and fstring,,True,10729,https://api.github.com/repos/python/mypy/pulls/10729,https://github.com/python/mypy/pull/10729,closed,251,30,3,4,0,5,0,0,[],2021-06-28 10:38:29+00:00,2021-06-29 15:26:14+00:00,103665.0,"1 day, 4:47:45","[{'comment_id': 659875138, 'comment_body': 'Test also a negative integer. Test large integer (>2**64).', 'comment_created': datetime.datetime(2021, 6, 28, 15, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 659877561, 'comment_body': 'Test an integer without `!s` (just `{}`). Test a negative integer. The big integer (>2**64), and also negative big integer.\r\n\r\nTest `{}` with boolean, bytes and float arguments.', 'comment_created': datetime.datetime(2021, 6, 28, 15, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 659879865, 'comment_body': 'Test `{}` with bool, bytes and float arguments. Test both positive and negative floats + zero. Test a very large float and a float that is close to zero (e.g. 1.23e-20). Test infinities and NaN.', 'comment_created': datetime.datetime(2021, 6, 28, 15, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 659880805, 'comment_body': ""Nit: Maybe call this `testFStrings`, since that's the most commonly used name for the feature."", 'comment_created': datetime.datetime(2021, 6, 28, 15, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 659882561, 'comment_body': 'Testing a string with non-ASCII characters could also be interesting here.', 'comment_created': datetime.datetime(2021, 6, 28, 15, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'JelleZijlstra', 'type': 'User'}]","[{'commit_sha': 'd22dd6f229bf3daeea06cc954e58f6529b2b3897', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5cc56302621948a99f1a41084e5d30d421ccc43', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eba3049515f20269f1eed051cca2eb36e68f222', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2610fdfbf93745621e0e9ecbe6f46f9be31a6463', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
675924803,[mypyc] Add a str.format specializer which only supports empty brackets,"### Description

This PR adds a str.format specializer which only supports empty brackets. Also, the detection code can deal with the bracket literals, for example, ""{{}}"".

The specializer first split the formatting string by ""{}"". Then it replaces the brackets by `PyObject_Str`. Finally, all these separated substrings would be sent to a C helper function to generate a joint one.

## Test Plan

* An IRbuild test
* A run test

mypyc_benchmark:
```
running str_format_format_method
..........
interpreted: 0.597254s (avg of 5 iterations; stdev 1.7%)
compiled:    0.312174s (avg of 5 iterations; stdev 2.9%)

compiled is 1.913x faster
```
",True,10697,https://api.github.com/repos/python/mypy/pulls/10697,https://github.com/python/mypy/pull/10697,closed,227,20,6,19,3,14,0,0,[],2021-06-23 03:47:29+00:00,2021-07-02 09:03:29+00:00,796560.0,"9 days, 5:16:00","[{'comment_id': 656970573, 'comment_body': 'You can skip the `str_op` call if the type of the argument is `str_rprimitive`.', 'comment_created': datetime.datetime(2021, 6, 23, 10, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 656970764, 'comment_body': 'Check that all arguments are positional, as this only works for positional args.', 'comment_created': datetime.datetime(2021, 6, 23, 10, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 656971990, 'comment_body': 'Style nit: ""helper"" is not a very informative name. Try to name functions based on what they do. For example, here a better name could be `can_optimize_format`.', 'comment_created': datetime.datetime(2021, 6, 23, 10, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 656972465, 'comment_body': 'Style nit: Use docstring instead of a comment before a function for consistency. If you can find a more informative name for the function, the comment may become redundant.', 'comment_created': datetime.datetime(2021, 6, 23, 10, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 656973923, 'comment_body': ""These slice assignments are somewhat difficult to reason about (a bit too clever, I think). I'd prefer a simple for loop, possible with `zip()`. This way you should be able to build the list incrementally using `append` instead of first creating it and then mutating it. Appending to a list is more Pythonic than creating a list first with dummy values and then assigning to it."", 'comment_created': datetime.datetime(2021, 6, 23, 10, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 656975351, 'comment_body': 'You can skip empty literals, as they will have no effect and just slow things down a bit at runtime.', 'comment_created': datetime.datetime(2021, 6, 23, 10, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 658044965, 'comment_body': ""Please add more tests. We want fairly complete test coverage to make sure nothing has regressed. It's important both valid and error cases produce the same output when optimized. For example, any exceptions should be identical.\r\n\r\nExamples (but there are probably more):\r\n* Simplest possible case: `''.format()`\r\n* Plain text only: `'xyz'.format()`\r\n* Extra positional arguments: `'a{}b'.format(1, 2, 3)`\r\n* Too few arguments\r\n* Various format specifiers that are supported within `{...}` (these should still work, even if they aren't optimized)\r\n* Keyword arguments to `format`\r\n* `*args` to `format`\r\n* Invalid format string"", 'comment_created': datetime.datetime(2021, 6, 24, 15, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 658045602, 'comment_body': 'Add irbuild tests for skipping `PyObject_Str` for `str` values, skipping empty strings and `{{` / `}}`.', 'comment_created': datetime.datetime(2021, 6, 24, 15, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 658049345, 'comment_body': ""This isn't right? `{{}}` gets translated to `{}`, and we'll split it below, even though we shouldn't do it?"", 'comment_created': datetime.datetime(2021, 6, 24, 15, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 658052986, 'comment_body': 'Please add unit tests for this, since it has pretty tricky logic. Also consider various error cases and edge cases.', 'comment_created': datetime.datetime(2021, 6, 24, 15, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 658528514, 'comment_body': ""Since we would support many operations other than empty brackets, I'll add a helper function for parsing instead of using `replace` and `split`."", 'comment_created': datetime.datetime(2021, 6, 25, 7, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}, {'comment_id': 658589688, 'comment_body': 'Extra positional arguments case this compile error: `error: Not all arguments converted during string formatting`', 'comment_created': datetime.datetime(2021, 6, 25, 8, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}, {'comment_id': 662187284, 'comment_body': 'Add a few more IR build test cases, such as these:\r\n1.  an empty literal\r\n2. `{{` and `}}` in the format string', 'comment_created': datetime.datetime(2021, 7, 1, 10, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 662190420, 'comment_body': ""These test cases could still be useful. Can you double check if they aren't covered:\r\n* `'{}{}'.format(1, 2)` (empty literals)\r\n* `'x{}y{}'.format(*args)` (`*args`)"", 'comment_created': datetime.datetime(2021, 7, 1, 11, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': 'ad565ecb77edfcc64d445dc807fc95b527203f94', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf3f81a07f0bf09660ab7ae1b7765cb827f9193', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e3f7491db1b19384993fba95ab94fd1421973c', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bac70bfff23f2a4342fe90dfa533776319701045', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ca103e21a1f46331111374cfb2c5cd56da764cd', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2072c99231b29bc9419136e2f63f98e2aa949559', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c08364ac9cbe47fcab1b7afbe54f917a6ac10ab', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e649c3828a08ace63e6d6a63f4d20a12afc363b5', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04ea05434d7df15c61abc01b6349b41d805d3fc9', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1249d89fa9615199f32ddc4cdadbc252cf2e84f7', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbd5df5b2dc08d8f684e0628bfbf49e3c110cd52', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64d8147e34a3739d603032680e4c1bdf17e74a0c', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8e7fe73dce01a38cd4bca24250098f4638efb77', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86c35d3d367ffca640fcc3118783461ac52d3425', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be0d1807c8161c69964876b4cf6198c2f27af073', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd406d4378e5dcdf004cbe4b79a45fc89489cff38', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cba5389e9047ec20c9fbd79a451745fdf21a2b6', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cac67bd8523892cd5290ae8bd0c9d34e81360dc', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a17a3d4f43d02973da240726532edeb181cd6c25', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
682881303,[mypyc] Rewrite CPyStr_Build using a simplification of _PyUnicode_JoinArray,"### Description

Closes https://github.com/mypyc/mypyc/issues/876

## Test Plan

```py
@benchmark
def str_format_format_method() -> None:
    a = []
    tmp_str = ""Foobar""
    for i in range(1000):
        for _ in range(5):
            a.append('{}'.format(tmp_str))
        a.append('{}-{}'.format(tmp_str, i))
        a.append('{} {} str'.format(i, i * 2.0))

    n = 0
    for i in range(100):
        for s in a:
            n += len(""foobar {} stuff"".format(s))
            ss = ""foobar {} stuff"".format(s)
            n += len(""{}-{}-{}"".format(i, s, ss))
    assert n == 36897500, n
```

```
running str_format_format_method
..........
interpreted: 0.574899s (avg of 5 iterations; stdev 0.25%)
compiled:    0.156026s (avg of 5 iterations; stdev 0.63%)

compiled is 3.685x faster
```
",True,10762,https://api.github.com/repos/python/mypy/pulls/10762,https://github.com/python/mypy/pull/10762,closed,99,12,5,4,2,3,0,0,[],2021-07-02 21:07:16+00:00,2021-07-06 10:31:59+00:00,307483.0,"3 days, 13:24:43","[{'comment_id': 663824700, 'comment_body': 'Add `... from CPython X.Y.Z` to the end of the comment to make it clear from where it originally came from.', 'comment_created': datetime.datetime(2021, 7, 5, 10, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 663828448, 'comment_body': 'It would be useful to try all combinations of 1, 2 and 4 byte wide characters, such as 2 byte format string and 4 byte argument, etc.', 'comment_created': datetime.datetime(2021, 7, 5, 10, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 664042823, 'comment_body': 'This seems incorrect, because of possible overflow on the left hand side. Maybe this should be `add_sz > (size_t)(PY_SSIZE_T_MAX - sz)`? Also add comment about this.', 'comment_created': datetime.datetime(2021, 7, 5, 16, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '617f0ac24b34974b98b44715847bdc4d33ff92d9', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f592186606c84043fbe56c364f0850f6b2d89327', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '295563ef798d38d48ad823f34ee0044d84203740', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '688f6e839c245e70c9b35fe80cee43b0fe63a3e8', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
684554453,[mypyc] Faster int conversion in str.format,"### Description

Closes https://github.com/mypyc/mypyc/issues/875

## Test Plan

* Shorter IR code when calling tagged integer in `str.format`
* 3.8x faster when running microbenchmark (master branch is about 3.6x)",True,10774,https://api.github.com/repos/python/mypy/pulls/10774,https://github.com/python/mypy/pull/10774,closed,35,36,3,2,0,2,0,0,[],2021-07-06 17:26:46+00:00,2021-07-08 10:31:55+00:00,147909.0,"1 day, 17:05:09","[{'comment_id': 665325164, 'comment_body': 'Also accept short ints (`is_short_int_rprimitive`). They can use the same code path.', 'comment_created': datetime.datetime(2021, 7, 7, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 665325471, 'comment_body': 'Small nit: please avoid recalculating `node_type(x)` multiple times.', 'comment_created': datetime.datetime(2021, 7, 7, 12, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': 'e42f2eb6c32ec06ea14c2be0c0e08ecbb7ed06a8', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d3426e5efd62e001717deb6ae762afa8ac950e6', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
684680948,[mypyc] Initial optimization for f-string through a str.join() specializer,"### Description

This pull request adds a specializer for faster constructing f-string, which is translated into str.join() previously in mypy AST. 

## Test Plan

IR building tests: 
* {var}
* empty string
* literal string
* unsupported method

Speed up:
```
running str_format_fstring
..........
interpreted: 0.295028s (avg of 5 iterations; stdev 2.3%)
compiled:    0.188493s (avg of 5 iterations; stdev 1.7%)

compiled is 1.565x faster
```
on this case:
```
@benchmark
 def str_format_fstring() -> None:
     a = []
     tmp_str = ""Foobar""
     for i in range(1000):
         for _ in range(5):
             a.append(f'{tmp_str}')
         a.append(f'{tmp_str}-{i}')
         a.append(f'{i} {i*2.0} str')

     n = 0
     for i in range(100):
         for s in a:
             n += len(f""foobar {s} stuff"")
             ss = f""foobar {s} stuff""
             n += len(f""{i}-{s}-{ss}"")
     assert n == 36897500, n
```
Current master branch is 0.380x.",True,10776,https://api.github.com/repos/python/mypy/pulls/10776,https://github.com/python/mypy/pull/10776,closed,117,0,3,8,0,6,0,0,[],2021-07-06 21:10:34+00:00,2021-07-08 15:05:05+00:00,150871.0,"1 day, 17:54:31","[{'comment_id': 665331734, 'comment_body': 'At some point it should be possible to share some of the code above with the `str.format` implementation. No need to do anything about this in this PR.', 'comment_created': datetime.datetime(2021, 7, 7, 12, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 665333095, 'comment_body': 'Please add a run test that does various things that are almost supported but not quite. I.e., try to add tests for each of the `return None` cases.', 'comment_created': datetime.datetime(2021, 7, 7, 12, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 665334504, 'comment_body': 'Verify `callee.expr` -- it should be an empty literal string?', 'comment_created': datetime.datetime(2021, 7, 7, 12, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 665334941, 'comment_body': 'Skip empty strings?', 'comment_created': datetime.datetime(2021, 7, 7, 12, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 666075795, 'comment_body': ""Ideas for a few more test cases: `x.join(...)` (variable `x`), `','.join(...)` (non-empty string), `''.join(['x', v])` (variable in argument)."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 666076833, 'comment_body': ""Add comment describing that these mimic the AST generated for f-strings, but shouldn't trigger the specialization as they are slightly different. This way it's less likely that somebody will modify these in the future in a way that makes these no longer useful."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '4ac5f4e90d24a34c59f8aa48f8646c8384cb651a', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba750cd7337ccb956f22b7099e40bbb17cf7265e', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfcf56abd9c62013f9145ab6e708d1b86f7f48af', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d2b052526cbe16cfd397c1d74b624727c7de6f2', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9908ede25a718c12170a769a8449100dd644dbb', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bfc3b929eb251a085295aa5a096435c2bb25c10', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0265a9b685ac59ee7e82a7ac3390af691fb912a2', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71b0583be1eddfe1d01aaedfe46e18bb1cd6676d', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
687946999,[mypyc] Tokenizer for printf-style format string,"### Description

We add a special path for %-style string formatting, which previously is compiled by calling a % binary op. 

The `translate_str_format_percent_sign` serves as an interface from `transform_op_expr` to a specializer for string formatting. A regex tokenizer for %-style format string would parse the original strings into two lists, one is literals and the other is formatting operations.

Currently we directly match the `List[str]` with conversions only for %s and %d cases. In the following PRs, `FormatOp` would be used for better code structure.

`join_formatted_strings`, shared with `str.format()`, merges two lists into one final string using `str_build_op` which is much faster than `str.join`.

## Test Plan

This PR adds several run tests and irbuilding tests. 

The performance on microbenchmarks is: 

master branch:
```
running str_format_percent_operator
..........
interpreted: 0.407026s (avg of 5 iterations; stdev 1.9%)
compiled:    0.309361s (avg of 5 iterations; stdev 2.2%)

compiled is 1.316x faster
```

this PR:
```
running str_format_percent_operator
..........
interpreted: 0.385362s (avg of 5 iterations; stdev 0.75%)
compiled:    0.139198s (avg of 5 iterations; stdev 0.39%)

compiled is 2.768x faster
```

",True,10808,https://api.github.com/repos/python/mypy/pulls/10808,https://github.com/python/mypy/pull/10808,closed,236,23,7,11,0,7,0,0,[],2021-07-12 15:29:18+00:00,2021-07-20 11:09:10+00:00,675592.0,"7 days, 19:39:52","[{'comment_id': 672416394, 'comment_body': 'Why do we need to limit ourselves to just references and not arbitrary expressions? What is wrong with `""Hello %s"" % data[""name""]`?', 'comment_created': datetime.datetime(2021, 7, 19, 15, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ilevkivskyi', 'type': 'User'}, {'comment_id': 672416872, 'comment_body': '`flag` is a too generic name, please choose something more descriptive.', 'comment_created': datetime.datetime(2021, 7, 19, 15, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ilevkivskyi', 'type': 'User'}, {'comment_id': 672419726, 'comment_body': 'I would make this comment a bit more detailed and turn it into a docstring.', 'comment_created': datetime.datetime(2021, 7, 19, 15, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ilevkivskyi', 'type': 'User'}, {'comment_id': 672420217, 'comment_body': 'Make this pattern a top-level constant, otherwise it will be compiled on every function call.', 'comment_created': datetime.datetime(2021, 7, 19, 15, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ilevkivskyi', 'type': 'User'}, {'comment_id': 672421200, 'comment_body': 'Add a short docstring (in particular explain the function parameters). Also I am no sure `variables` is a good name, maybe `substitutions`?', 'comment_created': datetime.datetime(2021, 7, 19, 15, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ilevkivskyi', 'type': 'User'}, {'comment_id': 672422541, 'comment_body': 'Add more tests for situation where two format specifiers follow each other immediately, like `%s%s`, `%s%d` etc.', 'comment_created': datetime.datetime(2021, 7, 19, 15, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ilevkivskyi', 'type': 'User'}, {'comment_id': 672425315, 'comment_body': 'Add some descriptive assertion message?', 'comment_created': datetime.datetime(2021, 7, 19, 15, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ilevkivskyi', 'type': 'User'}]","[{'commit_sha': '4c8caf1e1f2c352f5e02726d2d3764b3da4dd536', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73d622500ed94bdd5619c5826c4e3740758c5fef', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595310d2433ffeb16976bfe2061cd499ddfab988', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14bbf3ca35b13089205f3298db314383ce4e1c9c', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3740ae3d312b81cb489c21a930be93e2f8625bf1', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc3b00337552f3d52543f0c74d0053cec502c52f', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ab77fc9217477e99b8526acc5ab1677efb1963a', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4b0525ff5bcf54df8e74450e6806340f8d0b968', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01d5d3e26cf978f4add54a3b310a6fc0b16ba123', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091850991233e0331baf0efa6d4d98027125f86f', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34a51f0facf9fb7ada96b95e7284d5f24341270a', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
696900522,[mypyc] Use mypy.FORMAT_RE and ConversionSpecifier for % interpolation,"### Description

`mypy.checkstrformat` offers regex and `ConversionSpecifier` for tokenizer, thus this PR:

* deletes the redundant code
* uses ConversionSpecifier as `FormatOp`
",True,10877,https://api.github.com/repos/python/mypy/pulls/10877,https://github.com/python/mypy/pull/10877,closed,74,57,4,22,1,1,0,0,[],2021-07-26 10:30:47+00:00,2021-07-29 10:32:21+00:00,259294.0,"3 days, 0:01:34","[{'comment_id': 678375559, 'comment_body': ""`\\d` matches non-ascii Unicode digits, which we probably don't want -- so `[0-9]` seems better. "", 'comment_created': datetime.datetime(2021, 7, 28, 14, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': 'ad565ecb77edfcc64d445dc807fc95b527203f94', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf3f81a07f0bf09660ab7ae1b7765cb827f9193', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e3f7491db1b19384993fba95ab94fd1421973c', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bac70bfff23f2a4342fe90dfa533776319701045', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ca103e21a1f46331111374cfb2c5cd56da764cd', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2072c99231b29bc9419136e2f63f98e2aa949559', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c08364ac9cbe47fcab1b7afbe54f917a6ac10ab', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e649c3828a08ace63e6d6a63f4d20a12afc363b5', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04ea05434d7df15c61abc01b6349b41d805d3fc9', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1249d89fa9615199f32ddc4cdadbc252cf2e84f7', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbd5df5b2dc08d8f684e0628bfbf49e3c110cd52', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64d8147e34a3739d603032680e4c1bdf17e74a0c', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8e7fe73dce01a38cd4bca24250098f4638efb77', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9be2a7584f0325e5817904479c00340b432d44c', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb4ecc1e64b4da606ff2c2be1f1f5bb3581938fe', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca18762a2022acd44c34f7b5d6bc8c7416039659', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '868923cea759eb55b90fb51ccdb5b7ca3d569261', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ea8fbb034791adc78e3993e3ded97dd963ad6f6', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46bba27fd10a7f4e81544144e62c3e5670e2a2dc', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f32ae8d50ebc858c473a24fa51999068ed875899', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77d85e1cd2958e62c72c7a33607263e85e222b4f', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d99bcb39d33625c7700cf412c92c4e0a50b15c0', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
700306734,[mypyc] Refactor: reuse format string parser,"### Description

`parse_conversion_specifiers` and `parse_format_value` from `mypy.checkstrformat` can be reused when compiling string formatting. `can_optimize_format` and `split_braces` are useless now.

Adding a `start_pos` as an attribute of `ConversionSpecifier` can not only help parse literals but also help generate useful error messages in the future.

## Test Plan
",True,10894,https://api.github.com/repos/python/mypy/pulls/10894,https://github.com/python/mypy/pull/10894,closed,189,244,4,13,0,9,0,0,[],2021-07-30 13:46:41+00:00,2021-08-02 16:27:39+00:00,268858.0,"3 days, 2:40:58","[{'comment_id': 680854890, 'comment_body': ""Make this `Final` since it's a constant."", 'comment_created': datetime.datetime(2021, 8, 2, 10, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 680855336, 'comment_body': ""Since this is mutable, it would be better to create this on each `translate_str_format` call. We don't want to risk accumulating state here.\r\n\r\nWhy do we need the `'': MypyFile(...)` entry in the dictionary? What happens if we leave it out? If we actually need it, please add a comment explaining why."", 'comment_created': datetime.datetime(2021, 8, 2, 10, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 680856616, 'comment_body': ""This may not be safe to do. For example, what if there is a malformed format string and the error has been `# type: ignore`d? I think that it would be better to fall back to the default slow path but still generate IR if we can't parse the format string. What do you think?"", 'comment_created': datetime.datetime(2021, 8, 2, 10, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 680885039, 'comment_body': ""Style nit: I don't expect this to be ever subclassed, so `@staticmethod` would seem more reasonable (actually I'd personally use a module-level function). Using `@classmethod` and `cls(...)` kind of gives the message that this can be subclassed."", 'comment_created': datetime.datetime(2021, 8, 2, 11, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 680885251, 'comment_body': ""Similar to above, I'd prefer to use `@staticmethod` or a module-level function."", 'comment_created': datetime.datetime(2021, 8, 2, 11, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 680942709, 'comment_body': 'Can I mark `EMPTY_MSG` as `Final`?', 'comment_created': datetime.datetime(2021, 8, 2, 12, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}, {'comment_id': 680943962, 'comment_body': ""I'm using a simpler approach now"", 'comment_created': datetime.datetime(2021, 8, 2, 12, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}, {'comment_id': 680962936, 'comment_body': ""Making `EMPTY_MSG` final doesn't help with the issue I mentioned earlier. `Errors()` is mutable, so it's now shared mutable state, which we want to usually avoid. Please create `MessageBuilder` and `Errors` within `translate_str_format` to avoid the global state."", 'comment_created': datetime.datetime(2021, 8, 2, 13, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 680964667, 'comment_body': ""It doesn't help -- see my other comment."", 'comment_created': datetime.datetime(2021, 8, 2, 13, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': 'cf60ab01b36194129f84e86a186d6860b4b11624', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da1eca3ddca8838477eb9615da0f9c9f7e3f09eb', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1047788192cca42dc45a39d28cc581a18d84254', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc35855c566572598553c4f943aa03a566bf24fa', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '212dae8b85648017176a636d394113779853b413', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1656449afb588b8241ef411948451a7b34a05af2', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67d7546f75e18fffcbb2ca3c0992a8057761a501', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4ce3f9d67ad2ed5efb458a880dff00c728c04f', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25fb620747984950fb32ce88841e29fc9be6427f', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aaf2551a39c377b9c0b5189ca0874e7c95d8793', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d6f3d7cd3bf347d83d615b91dfa7e979a3c982f', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0d4ea990b47353f5d3f48dc6c50fae007cb7f66', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0015c41950591b2e69a22dd5529cb3291cb39e86', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
704398999,[mypyc] Introduce FormatOp and add a tokenizer for .format() call,"### Description

This PR adds a tokenizer that convert a str.format() format string into literals and specifiers. By doing so, the code structure of `translate_str_format` is clearer.

This PR also introduces `FormatOp`. Compare to `ConversionSpecifier`, `FormatOp` has fewer attributes and indicates  compile time optimizations. For example, to mark a conversion from any object to string, `ConversionSpecifier` may have several representations, like '%s', '{}' or '{:{}}'. However, there would only exist one corresponding `FormatOp`.

 Currently `FormatOp` is just an Enum for convenience. We might add several attributes later and upgrade it to a class if we need to support more conversions.

To help for the future optimization, these parts of code are extracted into new functions:  
* `generate_format_ops` that shrink `ConversionSpecifier` into `FormatOp`
* `convert_expr` that can help convert the expressions into desired results.
",True,10935,https://api.github.com/repos/python/mypy/pulls/10935,https://github.com/python/mypy/pull/10935,closed,120,51,3,11,0,7,0,0,[],2021-08-05 05:46:29+00:00,2021-08-06 14:56:13+00:00,119384.0,"1 day, 9:09:44","[{'comment_id': 684127039, 'comment_body': 'Incomplete sentence.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684127669, 'comment_body': 'Add docstring.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684127797, 'comment_body': 'Add docstring.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684128633, 'comment_body': 'What about `%d`? Will it be supported in a follow-up PR?\r\n\r\nIt would be better to make this generic over different kinds of formatting instead of special casing percent sign formatting, etc. Do you plan to improve this in a follow-up PR (I assume that this is what the TODO comment is about)?', 'comment_created': datetime.datetime(2021, 8, 6, 10, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684129723, 'comment_body': 'Add docstring.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684130181, 'comment_body': 'Document that these are ""interleaved"", as it may otherwise be unclear.', 'comment_created': datetime.datetime(2021, 8, 6, 10, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684134430, 'comment_body': 'yes', 'comment_created': datetime.datetime(2021, 8, 6, 10, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}]","[{'commit_sha': 'b58ccd85c66b95061029692db6cb851df73fcee4', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64700860acfdc54301f62255f5f4951403c864de', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd09ce59b955af49b3d21d5fcabc6aafe2660eec6', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ac7f4c85705bff2afbdc43b065c3ebbf9a43157', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58c9381045b2713840dc806eda01cdbb18409945', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f22544b233b8fc50cc8780f3b8eaa2c49d35593', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '478576c67790fb63485d713ba749e8057ee974f0', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28f4365e5df87bc00011fff58f32d1ad726c58ce', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '980a9e6b9219c332293dfe6ba345b6251f791afe', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ad827fb7cc3a4aaf54860e127140aab20f79156', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '705202eb8ebd06ad255ae410d2d8a351f22c25d7', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
705874230,[mypyc] Speed up string formatting using FormatOp,"### Description

This Pr speeds up FStrings using `FormatOp` and `convert_expr`.

## Test Plan

Microbenchmark results:

```
running str_format_fstring
..........
interpreted: 0.280765s (avg of 5 iterations; stdev 1.4%)
compiled:    0.143244s (avg of 5 iterations; stdev 0.23%)

compiled is 1.960x faster
```

Previously is 1.6x.",True,10942,https://api.github.com/repos/python/mypy/pulls/10942,https://github.com/python/mypy/pull/10942,closed,114,147,5,6,0,0,0,0,[],2021-08-07 10:54:25+00:00,2021-08-09 10:23:11+00:00,170926.0,"1 day, 23:28:46",[],"[{'commit_sha': '0b6dcc37f320b5330f5c20648cb31da983124ce8', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af4e7c23f8825098bee5a5771ddd2399a90550b3', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae8384f981323d06b41b477ece6759a339de4d30', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a83b852b598ebb9bfce01aeec0325e4412e4971', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c7a6586de5f250a2109efd5cbc2bf1b9693b90', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '841a2b6fd5f84e543096af89737ed1ffea3308ef', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
697404037,[mypyc] Add bytes primitive type,"### Description

Replaces https://github.com/python/mypy/pull/9611

## Test Plan

#9611 encountered several test failures and this PR fixes them on latest branch.",True,10881,https://api.github.com/repos/python/mypy/pulls/10881,https://github.com/python/mypy/pull/10881,closed,119,45,13,7,6,0,0,0,[],2021-07-26 22:51:56+00:00,2021-07-28 14:29:28+00:00,142652.0,"1 day, 15:37:32",[],"[{'commit_sha': '86a2077d4dba108d76c6504a8ea0317553f7e54c', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f9e695b5481e0ba06083e6ef324a95aafb26b5', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5f2ff6c229ec3a6abe73ef3e752271136a182be', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d5311e72686f45b3bdc2c874e4cef5637082be', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09d37b5bc5637f1677006219f0d61f56afa777f2', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ded9e3e1e48b7ddf7d1f53d1644a73b89570f740', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f16b5da347c4ce7a7e0f2aab930aac236442b6ab', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
699557354,[mypyc] Add bytearray support,"### Description

`bytearray` is treated as a subtype of bytes by mypy, even though they behavior differently in some cases. We keep this design and check bytearray before calling corresponding cpython API.

## Test Plan

Adds tests for `bytearray` creation.",True,10891,https://api.github.com/repos/python/mypy/pulls/10891,https://github.com/python/mypy/pull/10891,closed,49,5,3,3,0,1,0,0,[],2021-07-29 13:56:25+00:00,2021-07-30 10:35:08+00:00,74323.0,20:38:43,"[{'comment_id': 679794616, 'comment_body': ""Explicitly annotate the variables as `bytes`, since right now the inferred type will be `bytearray`, which doesn't have a mypyc primitive type, so it reverts back to `object`.\r\n\r\nAlso test calling a function that accepts `bytes` with an actual argument that is a `bytearray` object annotated with type `Any`, to check the runtime type checking from `Any` to `bytes` works if the runtime value is a `bytearray` ."", 'comment_created': datetime.datetime(2021, 7, 30, 9, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': 'e4274e59c0177ae2013bd3affb8a3f99313cc406', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94530c33f9bfbfd6ee0300d1e69bf896016da75e', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47278b1242279d1a62a09ebee15a810220e15d00', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
700849348,[mypyc] Add bytes and bytearray initialization ops,"### Description

* Use `PyBytes_FromObject` for `bytes(o)`
* Use `PyByteArray_FromObject` for `bytearray(o)`

Current approach doesn't support empty initialization.

https://github.com/mypyc/mypyc/issues/880

## Test Plan

Added some new irbuild tests.",True,10900,https://api.github.com/repos/python/mypy/pulls/10900,https://github.com/python/mypy/pull/10900,closed,123,9,8,4,0,8,0,0,[],2021-08-01 07:37:07+00:00,2021-08-04 10:37:08+00:00,270001.0,"3 days, 3:00:01","[{'comment_id': 680852352, 'comment_body': ""Add also run tests to make sure the C API functions do what they should. For example, test `bytes([5])`, `bytes(bytearray(b'foo'))` and `bytes('x')` (the last one should raise an exception)."", 'comment_created': datetime.datetime(2021, 8, 2, 10, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 681452897, 'comment_body': 'This line causes a runtime error', 'comment_created': datetime.datetime(2021, 8, 3, 5, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}, {'comment_id': 681632902, 'comment_body': ""Unfortunately this means that C API function is not a 1:1 replacement for `bytes(x)` and can't be used as such. We now have these options: \r\n\r\n1. Don't add the primitive\r\n2. Add an argument type restriction to the use of the primitive (e.g. only support `bytes` or `list` -- whatever works).\r\n3. Implement a C helper that implements the missing functionality and falls back to the C API function for the supported functionality.\r\n\r\nWhat do you think? Also test `bytearray(5)`."", 'comment_created': datetime.datetime(2021, 8, 3, 10, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 681637982, 'comment_body': '`bytearray(5)` works well', 'comment_created': datetime.datetime(2021, 8, 3, 10, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}, {'comment_id': 681819486, 'comment_body': 'You need to raise an exception here.', 'comment_created': datetime.datetime(2021, 8, 3, 14, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 681822837, 'comment_body': ""Using a priority to pick an alternative implementation isn't enough here, since the integer argument could have a static type `Any`, and this alternative implementation wouldn't be picked up. The integer case would need to be handled in the main primitive that accepts any `object`. Also, since `bytes(n)` is an extremely rare thing to do, maybe you shouldn't bother with it and only optimize the more common cases."", 'comment_created': datetime.datetime(2021, 8, 3, 14, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 681946383, 'comment_body': 'I prefer using RUnion now', 'comment_created': datetime.datetime(2021, 8, 3, 17, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}, {'comment_id': 681947831, 'comment_body': ""I'll add some helper functions in later prs. I think it's fine to keep this."", 'comment_created': datetime.datetime(2021, 8, 3, 17, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}]","[{'commit_sha': 'c13c6babc4a8985b05de6053d656ecb101250475', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5eb98def628684b82dbf998d2a718fd8b284505', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc0f612634dd2651d46710e82b8fe4e9b2c81771', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c8a9124694c2ffa8dfa21f5072fe8840e68cc02', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
703278476,[mypyc] Add bytes concat op,"### Description

Related issue: https://github.com/mypyc/mypyc/issues/880

Use `PyByteArray_Concat` and `PyBytes_Concat` in a c helper function for bytes concat.

## Test Plan

Add several run tests for 
* bytes + bytearray
* bytearray + bytes
* bytes + bytes
* bytearray + bytearray

This PR speeds up the `bytes_concat` microbenchmark from 1.67x to 2.01x",True,10926,https://api.github.com/repos/python/mypy/pulls/10926,https://github.com/python/mypy/pull/10926,closed,115,46,8,12,4,5,0,0,[],2021-08-04 10:45:56+00:00,2021-08-06 14:52:45+00:00,187609.0,"2 days, 4:06:49","[{'comment_id': 682550111, 'comment_body': 'Also test the types of results e.g. `type(x) is bytearray`, since `bytes() == bytearray()`. We want to make sure that the returned the types are the same as in interpreted Python.', 'comment_created': datetime.datetime(2021, 8, 4, 12, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684169913, 'comment_body': 'Style nit: we format `else` so that `}` is on the same line as `else`:\r\n```\r\n} else ... {\r\n```', 'comment_created': datetime.datetime(2021, 8, 6, 11, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684170082, 'comment_body': 'Similar to above.', 'comment_created': datetime.datetime(2021, 8, 6, 11, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684170315, 'comment_body': 'Style nit: we tend to use a single empty line between irbuild tests.', 'comment_created': datetime.datetime(2021, 8, 6, 11, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 684173113, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 6, 11, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}]","[{'commit_sha': 'c13c6babc4a8985b05de6053d656ecb101250475', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5eb98def628684b82dbf998d2a718fd8b284505', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc0f612634dd2651d46710e82b8fe4e9b2c81771', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c8a9124694c2ffa8dfa21f5072fe8840e68cc02', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '633a2deea38472d50b7b2da1ba0d0a44cf5b40e3', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e871d1b69d0077640fcc41935bdf75fb4ab8ff1d', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f92d1490c27de07981c2b6103248f5445a19df', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed1b61920c4379536765370904576068af52c669', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e2a3f95347feb1dccd12154ccb122aa045f441e', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de8ab8cfc69602a8b971700ab543a54d0c8bb6c', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47d9d0537d06577b20af659034741ff78d811e47', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '390d1c4995bc97818d00fb5514394a3f400cb48f', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
704469940,[mypyc] Faster len(bytes),"### Description

Similar to list and tuple, we can directly get length of bytes from `PyVarObject->ob_size`

Implements part of mypyc/mypyc#880.

## Test Plan

* Add an irbuild test
* Add run tests for bytearray(There are already several run tests for bytes)",True,10936,https://api.github.com/repos/python/mypy/pulls/10936,https://github.com/python/mypy/pull/10936,closed,24,5,3,3,0,2,0,0,[],2021-08-05 07:58:00+00:00,2021-08-05 12:50:54+00:00,17574.0,4:52:54,"[{'comment_id': 683349016, 'comment_body': ""It would be better to have a separate test case for `len()`, since irbuild tests are fast to run. Small test cases are generally easier to maintain.\r\n\r\nIt's important to not have too many small run tests, however, since they have a lot of fixed overhead."", 'comment_created': datetime.datetime(2021, 8, 5, 10, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 683356524, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2021, 8, 5, 11, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}]","[{'commit_sha': 'f2ea422e178599ba987d324676fbc6dc246d2363', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc9bdc594bc6f8c2fafdcf091d578abd11a2bddd', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2a21286e87a87df6ddd4f2e7054f413c8f4369', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
707578397,[mypyc] Add primitive for bytes slicing,"### Description

Add a C helper function for `bytes` and `bytearray` slicing.

## Test Plan

* Run tests for both `bytes` and `bytearray` with return type checks.
* IR build test for C helper func.",True,10966,https://api.github.com/repos/python/mypy/pulls/10966,https://github.com/python/mypy/pull/10966,closed,122,3,7,6,1,5,0,0,[],2021-08-10 18:39:28+00:00,2021-08-12 11:28:32+00:00,146944.0,"1 day, 16:49:04","[{'comment_id': 686658300, 'comment_body': 'Style nit: use an inline function, since it will likely perform the same but is less error-prone.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 686660590, 'comment_body': 'Also test the edge case 8, 1 + length of byte string.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 686662220, 'comment_body': 'Test both a large short int (e.g. `2**24`) and a long integer representation (`2**63` or larger). Test both negative and positive large integers (e.g. write a loop `for bigint in ...:` followed by the current asserts).', 'comment_created': datetime.datetime(2021, 8, 11, 9, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 686662973, 'comment_body': 'Similar to above.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 686925785, 'comment_body': 'Tests using 8 as the index seem to be still missing (for testing against off-by-one errors which are common). ', 'comment_created': datetime.datetime(2021, 8, 11, 15, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '84d413ebc13e5c595f8c1b23d2b9eae7685cc349', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5bbc5d7e0bab1947809b1d5c222116beaa0c479', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da7e91613ce4f027151954340001918b8a1dba2b', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e24ba3b9727409dc00a2a42935057568b66e890', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77f84120b4f492332a8415b10853a4091079a3de', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca2d2e9ba2b8ef963530c02ec275bc4aced07e18', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
706271073,[mypyc] Add bytes index primitive,"### Description

Implements part of mypyc/mypyc#880.

* Add two `__getitem__` ops for bytes(`int` and `short_int` as index parameter)

## Test Plan

Add several run tests and an irbuild test.",True,10950,https://api.github.com/repos/python/mypy/pulls/10950,https://github.com/python/mypy/pull/10950,closed,82,8,6,8,4,7,0,0,[],2021-08-09 07:05:37+00:00,2021-08-11 09:34:53+00:00,181756.0,"2 days, 2:29:16","[{'comment_id': 685063820, 'comment_body': ""The `bytes` primitive type doesn't support `__setitem__`. For this to work we'd need a separate `bytearray` primitive type."", 'comment_created': datetime.datetime(2021, 8, 9, 10, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 685237781, 'comment_body': 'Use `unsigned char` so you can avoid the `if (num < 0)` test below.', 'comment_created': datetime.datetime(2021, 8, 9, 14, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 685245964, 'comment_body': ""You can possibly avoid a comparison by only checking for `n < 0` once. You can have a fast path for non-negative values in range, and handle everything else in a slow path. For example, you could have something like this:\r\n\r\n```\r\nif (n < 0 || n >= size) {\r\n    // Slow path\r\n    if (likely(n < 0 && n + size >= 0)) {\r\n        n += size;\r\n    } else {\r\n        // raise exception\r\n    }\r\n}\r\n```\r\n\r\nIt's unclear whether this will be faster than what you have, since C compilers are pretty smart, but at least it makes the fast and slow paths clearer for the reader."", 'comment_created': datetime.datetime(2021, 8, 9, 14, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 685246913, 'comment_body': ""Declare the type of `b` as `bytes`, as otherwise we won't use the primitive."", 'comment_created': datetime.datetime(2021, 8, 9, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 685247225, 'comment_body': 'Also test a long integer index (e.g. `2 ** 64`).\r\n\r\nTest `b[-4]` (edge case, lowest valid index).', 'comment_created': datetime.datetime(2021, 8, 9, 14, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 685898183, 'comment_body': 'Use `b2: bytes` here as well.', 'comment_created': datetime.datetime(2021, 8, 10, 10, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 686650478, 'comment_body': 'This still needs to be updated.', 'comment_created': datetime.datetime(2021, 8, 11, 9, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': 'bd7c4a31743d91fcf9aad0c9c2237f7145cded51', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87218ad29cc2a48ef1b89749bc2be63713ea7c69', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e16789a265cb85997d6ccfb4d669101a4c65b8f', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e75bba92ad57920734fead952b2c7eb2cf5e9550', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e42f34e52b1e96022e55acda6dccd90146315012', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b31a6aca33491ef0a6626e30f3cd211d2973547', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cda86c8b919d885474c179dea94be1144673ee64', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4637e1e3bd2e41fa70a2eb3a40f18d21013837b8', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
714922821,[mypyc] Faster bytes formatting,"### Description

* Share the same tokenizer with string formatting.
* Add a new conversion helper function `convert_expr_to_bytes` that convert values to bytes.
* Add a bytes construction C helper function `CPyBytes_Build` and `join_formatted_bytes`.
* Add a new FormatOp for %b.

## Test Plan

Several run tests and an irbuild test for `CPyBytes_Build`

",True,10989,https://api.github.com/repos/python/mypy/pulls/10989,https://github.com/python/mypy/pull/10989,closed,219,27,9,5,1,9,0,0,[],2021-08-18 09:52:25+00:00,2021-08-19 13:56:42+00:00,101057.0,"1 day, 4:04:17","[{'comment_id': 691120999, 'comment_body': 'Test producing an empty bytes object (e.g. `b""%b"" % bytes()` and `b"""" % ()`).\r\n\r\nAdd test for `__bytes__` conversion (of create an issue if it doesn\'t work yet).', 'comment_created': datetime.datetime(2021, 8, 18, 10, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 691121207, 'comment_body': 'Add comment.', 'comment_created': datetime.datetime(2021, 8, 18, 10, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 691192445, 'comment_body': 'Rename the function to `convert_format_expr_to_bytes`, for example, for clarity?', 'comment_created': datetime.datetime(2021, 8, 18, 12, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 691192731, 'comment_body': 'This is similar --` convert_expr` is not very descriptive.', 'comment_created': datetime.datetime(2021, 8, 18, 12, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 691193134, 'comment_body': ""Nit: This doesn't convert them into literals but bytes objects?\r\n\r\nDocument None return value."", 'comment_created': datetime.datetime(2021, 8, 18, 12, 34, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 691194163, 'comment_body': 'Do these need to be ascii? Is it sufficient for them to be arbitrary bytes literals?', 'comment_created': datetime.datetime(2021, 8, 18, 12, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 691194581, 'comment_body': ""If you'd use `latin1` as the encoding, could we support non-ascii bytes values?"", 'comment_created': datetime.datetime(2021, 8, 18, 12, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 691197816, 'comment_body': 'Test non-ascii values in the format string and in an operand.', 'comment_created': datetime.datetime(2021, 8, 18, 12, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 691994858, 'comment_body': ""The literals inside `BytesExpr` is guaranteed to be ascii literals, otherwise it won't pass the type-checker."", 'comment_created': datetime.datetime(2021, 8, 19, 10, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}]","[{'commit_sha': '6001aa6033756f8e5ea663c26c4c1ca4c2968aac', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57e6d6f87a2f1040a42af23cc34908979058392e', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88a71e9fbe4528524371910377debb99f39f36b6', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff8c2752deebf9d40505cbf3ba32d2b247793b69', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '103ebacb02cbe272b893802c724766736d07328d', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
701967310,"[mypyc] Add tests for chr(), ord(), encode() and decode()","### Description

Add several run tests:

* `chr()`
* `ord()`
* `decode()`
* `encode()`
",True,10914,https://api.github.com/repos/python/mypy/pulls/10914,https://github.com/python/mypy/pull/10914,closed,126,12,2,7,2,7,0,0,[],2021-08-03 05:27:32+00:00,2021-08-05 12:52:47+00:00,199515.0,"2 days, 7:25:15","[{'comment_id': 681633671, 'comment_body': 'Also test `chr(x)` when `x` is not a compile time constant (e.g. `chr(100 + int())`.', 'comment_created': datetime.datetime(2021, 8, 3, 10, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 681634208, 'comment_body': 'Also test a regular ascii value (e.g. `chr(65)`) and a value between 128 and 255.', 'comment_created': datetime.datetime(2021, 8, 3, 10, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 681634978, 'comment_body': 'Also test values higher than 0xffff.', 'comment_created': datetime.datetime(2021, 8, 3, 10, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 681635447, 'comment_body': ""Also test non-constant bytes value (e.g. `ord(b'a' + bytes())`."", 'comment_created': datetime.datetime(2021, 8, 3, 10, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 682463766, 'comment_body': 'Test also other values (0, over 128, over 256, over 65536, -1, too large) with non-constant argument.', 'comment_created': datetime.datetime(2021, 8, 4, 9, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 682465822, 'comment_body': 'A few more ideas: Test decode exception, test `latin1`, test some different spellings (`utf8`, `utf_8` and `Utf-8` all seem to work).', 'comment_created': datetime.datetime(2021, 8, 4, 9, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 682466248, 'comment_body': 'Test `latin1`, test some different spellings (as above).', 'comment_created': datetime.datetime(2021, 8, 4, 9, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '1610611f2286e017e1f92257359e446d0b2ee19e', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b178f76c83bd269dc88ef918e635fe70b8f9d49', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2028e63eb453e2a912bc25939965dc7bcc542736', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f3dc2e866df79d281a987deda334ae1117c49bb', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a3a6bdd63c3081e4b46a13bf7841a9596b9834e', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eae807ed1ba0e4508029961ecd507b787d2dc416', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc2559c9ec98e475bce7039a8e6d69cfbfd15448', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
706343725,[mypyc] Add primitive for bytes.decode,"### Description

Implements part of https://github.com/mypyc/mypyc/issues/880

",True,10951,https://api.github.com/repos/python/mypy/pulls/10951,https://github.com/python/mypy/pull/10951,closed,101,27,6,6,0,6,0,0,[],2021-08-09 09:08:16+00:00,2021-08-11 10:29:54+00:00,177698.0,"2 days, 1:21:38","[{'comment_id': 685257065, 'comment_body': ""It's better not use a macro here, as it buys us little and makes the code harder to understand and maintain. If you need to share code, use an inline function."", 'comment_created': datetime.datetime(2021, 8, 9, 14, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 685257886, 'comment_body': 'This seems to crash the process in case the string object is not ready, which is not the right thing to do? Instead, you should probably use `PyUnicode_READY` and return NULL if it fails.', 'comment_created': datetime.datetime(2021, 8, 9, 14, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 685258976, 'comment_body': ""The for loop doesn't save a lot of code and makes this harder to understand. I'd prefer just having three normal primitive definitions."", 'comment_created': datetime.datetime(2021, 8, 9, 14, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 686105827, 'comment_body': 'We prefer three separate helper functions.', 'comment_created': datetime.datetime(2021, 8, 10, 15, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': '97littleleaf11', 'type': 'User'}, {'comment_id': 686666152, 'comment_body': ""As discussed offline, I'd prefer to have three primitive definitions that all call a single C function, i.e. we'd only duplicate the `method_op` declarations, not C implementations. Some primitives can provide fixed extra arguments, but without using the for loop for clarity. Sorry for the extra back and forth!"", 'comment_created': datetime.datetime(2021, 8, 11, 9, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}, {'comment_id': 686702984, 'comment_body': ""Here it would be reasonable to have them in a single test case, since these are related (all string operations) and having fewer run tests will speed up tests. But it's not a big deal. The original name (`testChrOrdEncodeDecode`) wasn't the clearest though. Also we already have `testStringOps`, which would cover these as well. Not sure what's the best way to organize our tests. "", 'comment_created': datetime.datetime(2021, 8, 11, 10, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JukkaL', 'type': 'User'}]","[{'commit_sha': '17a22bd1a5d988b9eee0e44c0302d14314a2bf0c', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80893481a6f6b48810e702b85aeab0ec49210181', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd4c5c55a69925f2f1eefaca03fc4c9e3d409c62', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aea0e9bc77b82e568170bb708f6f35b447713d6', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31325fd74c99731aa31e6627ca70b6d29a6f1cbe', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75015bf6ff69b2724e036b0025e932d5f4c89136', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
710569232,[mypyc] Add primitives for str.encode(),"### Description

Add primitives for `str.encode(...)`",True,10974,https://api.github.com/repos/python/mypy/pulls/10974,https://github.com/python/mypy/pull/10974,closed,77,10,5,1,0,0,0,0,[],2021-08-12 09:36:45+00:00,2021-08-12 10:31:33+00:00,3288.0,0:54:48,[],"[{'commit_sha': '8574610bca1b728a09600c6e9f5ae3dedbc3f40b', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98
674367502,Add separated tests for three string formatting methods,"The three microbenchmarks share the same logic. Currently there are only limited cases, including %s, %d and %f, whose distribution is not exactly the same compared with real world situation.

I would first mark this PR as draft for further discussion.",False,29,https://api.github.com/repos/mypyc/mypyc-benchmarks/pulls/29,https://github.com/mypyc/mypyc-benchmarks/pull/29,open,57,0,1,4,4,0,0,0,[],2021-06-21 09:08:51+00:00,,0.0,,[],"[{'commit_sha': '324049500482c5b26ca120f6f8ed0dbeff0439d0', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b2931b35a939adeb878ffa672a1e0f78f96eb28', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b289f4c6ed3525e25c1bb5e6997ed3af76ec3483', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47d510cf451bdee7a2feb37e52c7a32462088359', 'committer_username': '97littleleaf11', 'committer_name': 'Jingchen Ye', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 24, 7, 7, 7, tzinfo=datetime.timezone.utc)}]",Jingchen Ye,11172084,,User,,27,,212,98

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
7053637,mypy,python/mypy,Python,2758,18094,239,730,11964,2894,74,242,"[{'id': 1349129377, 'number': 15230, 'closed': None, 'created': datetime.datetime(2023, 5, 12, 19, 49, 24, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 198, 'deletions': 44, 'state': 'open'}, {'id': 1025406610, 'number': 13399, 'closed': datetime.datetime(2022, 8, 14, 18, 40, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 21, 50, 1, tzinfo=datetime.timezone.utc), 'time_taken': 161404.0, 'time_delta': '1 day, 20:50:04', 'additions': 5, 'deletions': 6, 'state': 'closed'}, {'id': 1024903926, 'number': 13395, 'closed': datetime.datetime(2022, 8, 12, 18, 30, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 12, 38, 48, tzinfo=datetime.timezone.utc), 'time_taken': 21105.0, 'time_delta': '5:51:45', 'additions': 6, 'deletions': 4, 'state': 'closed'}, {'id': 958364827, 'number': 12941, 'closed': datetime.datetime(2022, 6, 6, 0, 16, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 5, 7, 43, 41, tzinfo=datetime.timezone.utc), 'time_taken': 59591.0, 'time_delta': '16:33:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 945195878, 'number': 12862, 'closed': datetime.datetime(2022, 5, 25, 12, 37, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 24, 6, 3, 34, tzinfo=datetime.timezone.utc), 'time_taken': 110064.0, 'time_delta': '1 day, 6:34:24', 'additions': 5, 'deletions': 9, 'state': 'closed'}, {'id': 944576235, 'number': 12859, 'closed': datetime.datetime(2022, 5, 23, 15, 53, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 23, 15, 8, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2693.0, 'time_delta': '0:44:53', 'additions': 158, 'deletions': 68, 'state': 'closed'}, {'id': 943738819, 'number': 12850, 'closed': datetime.datetime(2022, 5, 23, 14, 17, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 22, 20, 53, 20, tzinfo=datetime.timezone.utc), 'time_taken': 62657.0, 'time_delta': '17:24:17', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 930487042, 'number': 12750, 'closed': datetime.datetime(2022, 5, 8, 23, 27, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 8, 14, 15, 18, tzinfo=datetime.timezone.utc), 'time_taken': 33155.0, 'time_delta': '9:12:35', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 914841933, 'number': 12635, 'closed': datetime.datetime(2022, 4, 21, 5, 27, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 21, 2, 42, 53, tzinfo=datetime.timezone.utc), 'time_taken': 9885.0, 'time_delta': '2:44:45', 'additions': 15, 'deletions': 7, 'state': 'closed'}, {'id': 878710317, 'number': 12348, 'closed': datetime.datetime(2022, 3, 24, 14, 39, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 14, 7, 13, 49, tzinfo=datetime.timezone.utc), 'time_taken': 890730.0, 'time_delta': '10 days, 7:25:30', 'additions': 56, 'deletions': 55, 'state': 'closed'}, {'id': 873944997, 'number': 12306, 'closed': datetime.datetime(2022, 3, 18, 1, 59, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 8, 8, 42, 37, tzinfo=datetime.timezone.utc), 'time_taken': 839814.0, 'time_delta': '9 days, 17:16:54', 'additions': 20, 'deletions': 20, 'state': 'closed'}, {'id': 869276251, 'number': 12273, 'closed': datetime.datetime(2022, 3, 2, 10, 7, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 9, 29, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2304.0, 'time_delta': '0:38:24', 'additions': 0, 'deletions': 12, 'state': 'closed'}, {'id': 860332535, 'number': 12233, 'closed': datetime.datetime(2022, 2, 22, 16, 2, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 22, 11, 38, 21, tzinfo=datetime.timezone.utc), 'time_taken': 15824.0, 'time_delta': '4:23:44', 'additions': 7, 'deletions': 8, 'state': 'closed'}, {'id': 859637966, 'number': 12229, 'closed': datetime.datetime(2022, 2, 21, 17, 12, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 21, 16, 10, 32, tzinfo=datetime.timezone.utc), 'time_taken': 3725.0, 'time_delta': '1:02:05', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 856829078, 'number': 12209, 'closed': datetime.datetime(2022, 2, 20, 4, 54, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 18, 10, 55, 13, tzinfo=datetime.timezone.utc), 'time_taken': 151171.0, 'time_delta': '1 day, 17:59:31', 'additions': 16, 'deletions': 49, 'state': 'closed'}, {'id': 854084211, 'number': 12188, 'closed': datetime.datetime(2022, 2, 22, 5, 40, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 16, 7, 52, 41, tzinfo=datetime.timezone.utc), 'time_taken': 510462.0, 'time_delta': '5 days, 21:47:42', 'additions': 76, 'deletions': 62, 'state': 'closed'}, {'id': 828561159, 'number': 12037, 'closed': None, 'created': datetime.datetime(2022, 1, 21, 14, 8, 24, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 81, 'deletions': 47, 'state': 'open'}, {'id': 826282688, 'number': 12018, 'closed': datetime.datetime(2022, 2, 10, 0, 9, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 19, 9, 14, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1868144.0, 'time_delta': '21 days, 14:55:44', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 824751597, 'number': 12002, 'closed': datetime.datetime(2022, 1, 18, 13, 7, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 17, 16, 15, 18, tzinfo=datetime.timezone.utc), 'time_taken': 75146.0, 'time_delta': '20:52:26', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 807840105, 'number': 11813, 'closed': datetime.datetime(2022, 8, 14, 12, 1, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 21, 19, 42, 4, tzinfo=datetime.timezone.utc), 'time_taken': 20362742.0, 'time_delta': '235 days, 16:19:02', 'additions': 34, 'deletions': 6, 'state': 'closed'}, {'id': 803640425, 'number': 11754, 'closed': None, 'created': datetime.datetime(2021, 12, 15, 16, 27, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 13, 'deletions': 13, 'state': 'open'}, {'id': 797816756, 'number': 11683, 'closed': datetime.datetime(2021, 12, 15, 16, 29, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 8, 13, 7, 55, tzinfo=datetime.timezone.utc), 'time_taken': 616879.0, 'time_delta': '7 days, 3:21:19', 'additions': 374, 'deletions': 297, 'state': 'closed'}, {'id': 795909054, 'number': 11670, 'closed': datetime.datetime(2021, 12, 7, 9, 10, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 6, 13, 56, 19, tzinfo=datetime.timezone.utc), 'time_taken': 69232.0, 'time_delta': '19:13:52', 'additions': 29, 'deletions': 6, 'state': 'closed'}, {'id': 794327990, 'number': 11658, 'closed': datetime.datetime(2021, 12, 3, 11, 31, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 3, 7, 4, 26, tzinfo=datetime.timezone.utc), 'time_taken': 16036.0, 'time_delta': '4:27:16', 'additions': 16, 'deletions': 1, 'state': 'closed'}, {'id': 793923716, 'number': 11653, 'closed': datetime.datetime(2021, 12, 3, 10, 37, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 2, 17, 31, 47, tzinfo=datetime.timezone.utc), 'time_taken': 61546.0, 'time_delta': '17:05:46', 'additions': 16, 'deletions': 5, 'state': 'closed'}, {'id': 779167549, 'number': 11530, 'closed': datetime.datetime(2021, 11, 12, 9, 0, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 12, 7, 55, 1, tzinfo=datetime.timezone.utc), 'time_taken': 3928.0, 'time_delta': '1:05:28', 'additions': 75, 'deletions': 22, 'state': 'closed'}, {'id': 778443642, 'number': 11522, 'closed': datetime.datetime(2021, 11, 11, 17, 17, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 11, 10, 24, 45, tzinfo=datetime.timezone.utc), 'time_taken': 24767.0, 'time_delta': '6:52:47', 'additions': 98, 'deletions': 94, 'state': 'closed'}, {'id': 775355700, 'number': 11490, 'closed': datetime.datetime(2021, 11, 10, 15, 14, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 8, 9, 32, 5, tzinfo=datetime.timezone.utc), 'time_taken': 193343.0, 'time_delta': '2 days, 5:42:23', 'additions': 16, 'deletions': 16, 'state': 'closed'}, {'id': 775036700, 'number': 11485, 'closed': datetime.datetime(2021, 11, 8, 5, 17, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 7, 19, 43, 33, tzinfo=datetime.timezone.utc), 'time_taken': 34409.0, 'time_delta': '9:33:29', 'additions': 38, 'deletions': 6, 'state': 'closed'}, {'id': 759567988, 'number': 11343, 'closed': datetime.datetime(2021, 11, 4, 13, 30, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 16, 1, 10, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1686043.0, 'time_delta': '19 days, 12:20:43', 'additions': 17, 'deletions': 28, 'state': 'closed'}, {'id': 759008776, 'number': 11340, 'closed': None, 'created': datetime.datetime(2021, 10, 15, 8, 24, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 32, 'deletions': 13, 'state': 'open'}, {'id': 758498004, 'number': 11335, 'closed': datetime.datetime(2021, 10, 16, 0, 51, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 14, 16, 8, 30, tzinfo=datetime.timezone.utc), 'time_taken': 117755.0, 'time_delta': '1 day, 8:42:35', 'additions': 23, 'deletions': 23, 'state': 'closed'}, {'id': 758188137, 'number': 11332, 'closed': datetime.datetime(2021, 10, 15, 12, 14, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 14, 10, 3, 7, tzinfo=datetime.timezone.utc), 'time_taken': 94280.0, 'time_delta': '1 day, 2:11:20', 'additions': 34, 'deletions': 38, 'state': 'closed'}, {'id': 757165162, 'number': 11327, 'closed': datetime.datetime(2021, 10, 13, 17, 30, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 13, 8, 44, 38, tzinfo=datetime.timezone.utc), 'time_taken': 31571.0, 'time_delta': '8:46:11', 'additions': 11, 'deletions': 4, 'state': 'closed'}, {'id': 756345043, 'number': 11319, 'closed': datetime.datetime(2021, 10, 14, 12, 33, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 12, 16, 17, 53, tzinfo=datetime.timezone.utc), 'time_taken': 159342.0, 'time_delta': '1 day, 20:15:42', 'additions': 659, 'deletions': 629, 'state': 'closed'}, {'id': 754279596, 'number': 11300, 'closed': datetime.datetime(2021, 10, 10, 18, 57, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 8, 19, 15, 24, tzinfo=datetime.timezone.utc), 'time_taken': 171726.0, 'time_delta': '1 day, 23:42:06', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 754218595, 'number': 11297, 'closed': datetime.datetime(2021, 10, 11, 13, 29, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 8, 17, 22, 17, tzinfo=datetime.timezone.utc), 'time_taken': 245234.0, 'time_delta': '2 days, 20:07:14', 'additions': 30, 'deletions': 23, 'state': 'closed'}, {'id': 748957834, 'number': 11266, 'closed': datetime.datetime(2023, 4, 26, 5, 37, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 4, 13, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 49132240.0, 'time_delta': '568 days, 15:50:40', 'additions': 81, 'deletions': 75, 'state': 'closed'}, {'id': 748303145, 'number': 11253, 'closed': datetime.datetime(2021, 10, 8, 15, 56, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 3, 11, 42, 32, tzinfo=datetime.timezone.utc), 'time_taken': 447267.0, 'time_delta': '5 days, 4:14:27', 'additions': 25, 'deletions': 35, 'state': 'closed'}, {'id': 748167147, 'number': 11250, 'closed': datetime.datetime(2021, 10, 3, 0, 59, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 2, 17, 38, 50, tzinfo=datetime.timezone.utc), 'time_taken': 26447.0, 'time_delta': '7:20:47', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 745802493, 'number': 11224, 'closed': datetime.datetime(2021, 10, 1, 15, 41, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 29, 14, 23, 56, tzinfo=datetime.timezone.utc), 'time_taken': 177454.0, 'time_delta': '2 days, 1:17:34', 'additions': 19, 'deletions': 19, 'state': 'closed'}, {'id': 744700883, 'number': 11214, 'closed': datetime.datetime(2021, 9, 29, 10, 56, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 28, 11, 18, 5, tzinfo=datetime.timezone.utc), 'time_taken': 85122.0, 'time_delta': '23:38:42', 'additions': 54, 'deletions': 94, 'state': 'closed'}, {'id': 743462696, 'number': 11205, 'closed': datetime.datetime(2021, 10, 5, 16, 3, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 27, 13, 25, 19, tzinfo=datetime.timezone.utc), 'time_taken': 700675.0, 'time_delta': '8 days, 2:37:55', 'additions': 4, 'deletions': 16, 'state': 'closed'}, {'id': 729611161, 'number': 11073, 'closed': datetime.datetime(2021, 9, 12, 14, 8, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 8, 12, 42, 25, tzinfo=datetime.timezone.utc), 'time_taken': 350756.0, 'time_delta': '4 days, 1:25:56', 'additions': 160, 'deletions': 138, 'state': 'closed'}, {'id': 729194852, 'number': 11072, 'closed': datetime.datetime(2021, 9, 22, 12, 1, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 8, 2, 33, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1243662.0, 'time_delta': '14 days, 9:27:42', 'additions': 170, 'deletions': 203, 'state': 'closed'}, {'id': 728337900, 'number': 11068, 'closed': datetime.datetime(2021, 9, 10, 12, 16, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 7, 6, 8, 49, tzinfo=datetime.timezone.utc), 'time_taken': 281254.0, 'time_delta': '3 days, 6:07:34', 'additions': 73, 'deletions': 70, 'state': 'closed'}, {'id': 726910168, 'number': 11053, 'closed': datetime.datetime(2021, 9, 6, 16, 12, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 3, 15, 31, 13, tzinfo=datetime.timezone.utc), 'time_taken': 261649.0, 'time_delta': '3 days, 0:40:49', 'additions': 157, 'deletions': 185, 'state': 'closed'}, {'id': 715884514, 'number': 10995, 'closed': datetime.datetime(2021, 8, 19, 14, 14, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 19, 12, 20, 24, tzinfo=datetime.timezone.utc), 'time_taken': 6823.0, 'time_delta': '1:53:43', 'additions': 52, 'deletions': 56, 'state': 'closed'}, {'id': 714922821, 'number': 10989, 'closed': datetime.datetime(2021, 8, 19, 13, 56, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 9, 52, 25, tzinfo=datetime.timezone.utc), 'time_taken': 101057.0, 'time_delta': '1 day, 4:04:17', 'additions': 219, 'deletions': 27, 'state': 'closed'}, {'id': 710569232, 'number': 10974, 'closed': datetime.datetime(2021, 8, 12, 10, 31, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 9, 36, 45, tzinfo=datetime.timezone.utc), 'time_taken': 3288.0, 'time_delta': '0:54:48', 'additions': 77, 'deletions': 10, 'state': 'closed'}, {'id': 707578397, 'number': 10966, 'closed': datetime.datetime(2021, 8, 12, 11, 28, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 18, 39, 28, tzinfo=datetime.timezone.utc), 'time_taken': 146944.0, 'time_delta': '1 day, 16:49:04', 'additions': 122, 'deletions': 3, 'state': 'closed'}, {'id': 706343725, 'number': 10951, 'closed': datetime.datetime(2021, 8, 11, 10, 29, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 9, 9, 8, 16, tzinfo=datetime.timezone.utc), 'time_taken': 177698.0, 'time_delta': '2 days, 1:21:38', 'additions': 101, 'deletions': 27, 'state': 'closed'}, {'id': 706271073, 'number': 10950, 'closed': datetime.datetime(2021, 8, 11, 9, 34, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 9, 7, 5, 37, tzinfo=datetime.timezone.utc), 'time_taken': 181756.0, 'time_delta': '2 days, 2:29:16', 'additions': 82, 'deletions': 8, 'state': 'closed'}, {'id': 705874230, 'number': 10942, 'closed': datetime.datetime(2021, 8, 9, 10, 23, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 10, 54, 25, tzinfo=datetime.timezone.utc), 'time_taken': 170926.0, 'time_delta': '1 day, 23:28:46', 'additions': 114, 'deletions': 147, 'state': 'closed'}, {'id': 704469940, 'number': 10936, 'closed': datetime.datetime(2021, 8, 5, 12, 50, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 7, 58, tzinfo=datetime.timezone.utc), 'time_taken': 17574.0, 'time_delta': '4:52:54', 'additions': 24, 'deletions': 5, 'state': 'closed'}, {'id': 704398999, 'number': 10935, 'closed': datetime.datetime(2021, 8, 6, 14, 56, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 5, 46, 29, tzinfo=datetime.timezone.utc), 'time_taken': 119384.0, 'time_delta': '1 day, 9:09:44', 'additions': 120, 'deletions': 51, 'state': 'closed'}, {'id': 703278476, 'number': 10926, 'closed': datetime.datetime(2021, 8, 6, 14, 52, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 10, 45, 56, tzinfo=datetime.timezone.utc), 'time_taken': 187609.0, 'time_delta': '2 days, 4:06:49', 'additions': 115, 'deletions': 46, 'state': 'closed'}, {'id': 701967310, 'number': 10914, 'closed': datetime.datetime(2021, 8, 5, 12, 52, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 5, 27, 32, tzinfo=datetime.timezone.utc), 'time_taken': 199515.0, 'time_delta': '2 days, 7:25:15', 'additions': 126, 'deletions': 12, 'state': 'closed'}, {'id': 700849348, 'number': 10900, 'closed': datetime.datetime(2021, 8, 4, 10, 37, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 1, 7, 37, 7, tzinfo=datetime.timezone.utc), 'time_taken': 270001.0, 'time_delta': '3 days, 3:00:01', 'additions': 123, 'deletions': 9, 'state': 'closed'}, {'id': 700306734, 'number': 10894, 'closed': datetime.datetime(2021, 8, 2, 16, 27, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 13, 46, 41, tzinfo=datetime.timezone.utc), 'time_taken': 268858.0, 'time_delta': '3 days, 2:40:58', 'additions': 189, 'deletions': 244, 'state': 'closed'}, {'id': 699557354, 'number': 10891, 'closed': datetime.datetime(2021, 7, 30, 10, 35, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 13, 56, 25, tzinfo=datetime.timezone.utc), 'time_taken': 74323.0, 'time_delta': '20:38:43', 'additions': 49, 'deletions': 5, 'state': 'closed'}, {'id': 698530614, 'number': 10885, 'closed': datetime.datetime(2021, 7, 28, 15, 53, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 9, 45, 46, tzinfo=datetime.timezone.utc), 'time_taken': 22044.0, 'time_delta': '6:07:24', 'additions': 22, 'deletions': 5, 'state': 'closed'}, {'id': 697404037, 'number': 10881, 'closed': datetime.datetime(2021, 7, 28, 14, 29, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 22, 51, 56, tzinfo=datetime.timezone.utc), 'time_taken': 142652.0, 'time_delta': '1 day, 15:37:32', 'additions': 119, 'deletions': 45, 'state': 'closed'}, {'id': 696900522, 'number': 10877, 'closed': datetime.datetime(2021, 7, 29, 10, 32, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 10, 30, 47, tzinfo=datetime.timezone.utc), 'time_taken': 259294.0, 'time_delta': '3 days, 0:01:34', 'additions': 74, 'deletions': 57, 'state': 'closed'}, {'id': 696783670, 'number': 10875, 'closed': datetime.datetime(2021, 7, 26, 17, 27, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 7, 58, 5, tzinfo=datetime.timezone.utc), 'time_taken': 34194.0, 'time_delta': '9:29:54', 'additions': 63, 'deletions': 50, 'state': 'closed'}, {'id': 696488024, 'number': 10869, 'closed': datetime.datetime(2021, 7, 25, 19, 36, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 11, 44, 20, tzinfo=datetime.timezone.utc), 'time_taken': 28313.0, 'time_delta': '7:51:53', 'additions': 51, 'deletions': 9, 'state': 'closed'}, {'id': 692045709, 'number': 10836, 'closed': datetime.datetime(2021, 7, 19, 16, 58, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 18, 7, 42, 17, tzinfo=datetime.timezone.utc), 'time_taken': 119768.0, 'time_delta': '1 day, 9:16:08', 'additions': 77, 'deletions': 48, 'state': 'closed'}, {'id': 687946999, 'number': 10808, 'closed': datetime.datetime(2021, 7, 20, 11, 9, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 15, 29, 18, tzinfo=datetime.timezone.utc), 'time_taken': 675592.0, 'time_delta': '7 days, 19:39:52', 'additions': 236, 'deletions': 23, 'state': 'closed'}, {'id': 687651621, 'number': 10807, 'closed': datetime.datetime(2021, 7, 22, 19, 28, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 9, 7, 28, tzinfo=datetime.timezone.utc), 'time_taken': 901233.0, 'time_delta': '10 days, 10:20:33', 'additions': 99, 'deletions': 16, 'state': 'closed'}, {'id': 684680948, 'number': 10776, 'closed': datetime.datetime(2021, 7, 8, 15, 5, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 21, 10, 34, tzinfo=datetime.timezone.utc), 'time_taken': 150871.0, 'time_delta': '1 day, 17:54:31', 'additions': 117, 'deletions': 0, 'state': 'closed'}, {'id': 684554453, 'number': 10774, 'closed': datetime.datetime(2021, 7, 8, 10, 31, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 17, 26, 46, tzinfo=datetime.timezone.utc), 'time_taken': 147909.0, 'time_delta': '1 day, 17:05:09', 'additions': 35, 'deletions': 36, 'state': 'closed'}, {'id': 682881303, 'number': 10762, 'closed': datetime.datetime(2021, 7, 6, 10, 31, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 21, 7, 16, tzinfo=datetime.timezone.utc), 'time_taken': 307483.0, 'time_delta': '3 days, 13:24:43', 'additions': 99, 'deletions': 12, 'state': 'closed'}, {'id': 678925369, 'number': 10729, 'closed': datetime.datetime(2021, 6, 29, 15, 26, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 10, 38, 29, tzinfo=datetime.timezone.utc), 'time_taken': 103665.0, 'time_delta': '1 day, 4:47:45', 'additions': 251, 'deletions': 30, 'state': 'closed'}, {'id': 677736065, 'number': 10710, 'closed': datetime.datetime(2021, 7, 1, 10, 24, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 8, 35, 24, tzinfo=datetime.timezone.utc), 'time_taken': 524965.0, 'time_delta': '6 days, 1:49:25', 'additions': 86, 'deletions': 91, 'state': 'closed'}, {'id': 675925362, 'number': 10698, 'closed': datetime.datetime(2021, 6, 23, 6, 47, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 3, 49, 29, tzinfo=datetime.timezone.utc), 'time_taken': 10668.0, 'time_delta': '2:57:48', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 675924803, 'number': 10697, 'closed': datetime.datetime(2021, 7, 2, 9, 3, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 3, 47, 29, tzinfo=datetime.timezone.utc), 'time_taken': 796560.0, 'time_delta': '9 days, 5:16:00', 'additions': 227, 'deletions': 20, 'state': 'closed'}, {'id': 673456280, 'number': 10668, 'closed': datetime.datetime(2021, 6, 21, 17, 52, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 13, 4, 20, tzinfo=datetime.timezone.utc), 'time_taken': 276493.0, 'time_delta': '3 days, 4:48:13', 'additions': 212, 'deletions': 7, 'state': 'closed'}, {'id': 670959489, 'number': 10651, 'closed': datetime.datetime(2022, 3, 2, 16, 7, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 2, 53, 27, tzinfo=datetime.timezone.utc), 'time_taken': 22425221.0, 'time_delta': '259 days, 13:13:41', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 669177896, 'number': 10641, 'closed': datetime.datetime(2021, 6, 16, 13, 37, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 3, 16, 3, tzinfo=datetime.timezone.utc), 'time_taken': 210110.0, 'time_delta': '2 days, 10:21:50', 'additions': 392, 'deletions': 315, 'state': 'closed'}, {'id': 634699442, 'number': 10448, 'closed': datetime.datetime(2021, 5, 25, 15, 36, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 8, 17, 32, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1461868.0, 'time_delta': '16 days, 22:04:28', 'additions': 36, 'deletions': 21, 'state': 'closed'}, {'id': 631607808, 'number': 10433, 'closed': datetime.datetime(2021, 5, 8, 6, 12, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 6, 16, 25, 41, tzinfo=datetime.timezone.utc), 'time_taken': 136027.0, 'time_delta': '1 day, 13:47:07', 'additions': 18, 'deletions': 10, 'state': 'closed'}, {'id': 616909606, 'number': 10334, 'closed': datetime.datetime(2021, 4, 19, 12, 59, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 16, 15, 15, 34, tzinfo=datetime.timezone.utc), 'time_taken': 251012.0, 'time_delta': '2 days, 21:43:32', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 616709852, 'number': 10333, 'closed': datetime.datetime(2021, 4, 22, 15, 29, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 16, 10, 5, 37, tzinfo=datetime.timezone.utc), 'time_taken': 537856.0, 'time_delta': '6 days, 5:24:16', 'additions': 26, 'deletions': 2, 'state': 'closed'}, {'id': 613047485, 'number': 10307, 'closed': datetime.datetime(2021, 6, 8, 11, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 11, 10, 19, 39, tzinfo=datetime.timezone.utc), 'time_taken': 5014041.0, 'time_delta': '58 days, 0:47:21', 'additions': 134, 'deletions': 10, 'state': 'closed'}, {'id': 611270015, 'number': 10295, 'closed': datetime.datetime(2021, 4, 27, 16, 25, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 6, 55, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1675836.0, 'time_delta': '19 days, 9:30:36', 'additions': 278, 'deletions': 77, 'state': 'closed'}, {'id': 610027236, 'number': 10286, 'closed': datetime.datetime(2021, 4, 12, 12, 42, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 6, 17, 24, 8, tzinfo=datetime.timezone.utc), 'time_taken': 501505.0, 'time_delta': '5 days, 19:18:25', 'additions': 114, 'deletions': 31, 'state': 'closed'}, {'id': 602754190, 'number': 10261, 'closed': datetime.datetime(2021, 3, 31, 17, 16, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 13, 16, 15, tzinfo=datetime.timezone.utc), 'time_taken': 187209.0, 'time_delta': '2 days, 4:00:09', 'additions': 442, 'deletions': 19, 'state': 'closed'}, {'id': 602235237, 'number': 10257, 'closed': datetime.datetime(2021, 3, 29, 11, 49, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 28, 12, 39, 5, tzinfo=datetime.timezone.utc), 'time_taken': 83442.0, 'time_delta': '23:10:42', 'additions': 50, 'deletions': 26, 'state': 'closed'}, {'id': 593600793, 'number': 10217, 'closed': datetime.datetime(2021, 3, 25, 19, 10, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 6, 3, 17, tzinfo=datetime.timezone.utc), 'time_taken': 824813.0, 'time_delta': '9 days, 13:06:53', 'additions': 394, 'deletions': 11, 'state': 'closed'}, {'id': 581848286, 'number': 10154, 'closed': datetime.datetime(2021, 3, 5, 7, 5, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 1, 8, 31, 9, tzinfo=datetime.timezone.utc), 'time_taken': 340483.0, 'time_delta': '3 days, 22:34:43', 'additions': 42, 'deletions': 3, 'state': 'closed'}, {'id': 581183684, 'number': 10145, 'closed': datetime.datetime(2021, 2, 27, 13, 33, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 26, 23, 3, 16, tzinfo=datetime.timezone.utc), 'time_taken': 52221.0, 'time_delta': '14:30:21', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 572946070, 'number': 10088, 'closed': datetime.datetime(2021, 2, 24, 15, 20, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 13, 14, 45, 37, tzinfo=datetime.timezone.utc), 'time_taken': 952509.0, 'time_delta': '11 days, 0:35:09', 'additions': 74, 'deletions': 0, 'state': 'closed'}]"
260889956,mypyc-benchmarks,mypyc/mypyc-benchmarks,Python,8,22,6,5,224,8,22,1,"[{'id': 674367502, 'number': 29, 'closed': None, 'created': datetime.datetime(2021, 6, 21, 9, 8, 51, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 57, 'deletions': 0, 'state': 'open'}]"
