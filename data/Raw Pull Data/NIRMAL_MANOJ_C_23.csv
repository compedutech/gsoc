pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
422068798,Shifting of RAnnotatedCode to radare2," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)
- [x] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)

**Detailed description**
As part of improving the decompiler and how it represents data, the custom struct `AnnotatedCode` in Cutter will be replaced by `RAnnotatedCode.` `RAnnotatedCode` is in `r2ghidra-dec` as of now. This PR shifts it to `radare2`. Necessary changes are made to `r2ghidra-dec` as well, and it will be a part of a corresponding PR in r2ghidra-dec, as these changes should go live together. Corresponding PR in `r2ghidra-dec` is this [#107](https://github.com/radareorg/r2ghidra-dec/pull/107)

Unit tests for `RAnnotatedCode` are also made and uploaded as part of this PR.
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

**Test plan**

<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,16939,https://api.github.com/repos/radareorg/radare2/pulls/16939,https://github.com/radareorg/radare2/pull/16939,closed,868,2,11,24,7,86,2,0,"[{'name': 'API'}, {'name': 'r2r'}]",2020-05-22 17:53:53+00:00,2020-05-27 03:54:32+00:00,381639.0,"4 days, 10:00:39","[{'comment_id': 429406745, 'comment_body': 'Fix indentation', 'comment_created': datetime.datetime(2020, 5, 22, 18, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429430027, 'comment_body': 'no `that`?', 'comment_created': datetime.datetime(2020, 5, 22, 19, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429430635, 'comment_body': 'what does it mean `for syntax highlight`? I see the code only checks for offset.', 'comment_created': datetime.datetime(2020, 5, 22, 19, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429431686, 'comment_body': 'this should not be here, because this file is for r_util and the code is defined in core. This should be somewhere in in `libr/include`, maybe even in its own files or just directly in `libr/include/r_core.h` but not here.', 'comment_created': datetime.datetime(2020, 5, 22, 20, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429431857, 'comment_body': 'same for the other functions that are defined in `core_annotated_code.c`', 'comment_created': datetime.datetime(2020, 5, 22, 20, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429432300, 'comment_body': 'no need for all these spaces', 'comment_created': datetime.datetime(2020, 5, 22, 20, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429517777, 'comment_body': 'The code returns `RCodeAnnotation` of the type `R_CODE_ANNOTATION_TYPE_OFFSET` and `R_CODE_ANNOTATION_TYPE_SYNTAX_HIGHLIGHT`. Here, the offset code is checking for is different that the type of `RCodeAnnotation`. The code is checking for range of annotations to see if it contains the passed value (size_t offset).', 'comment_created': datetime.datetime(2020, 5, 23, 5, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429518256, 'comment_body': '@thestr4ng3r told me to do it this way. Maybe he overlooked this. I think I should wait for his opinion on this.', 'comment_created': datetime.datetime(2020, 5, 23, 6, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429518293, 'comment_body': 'I will fix that :)', 'comment_created': datetime.datetime(2020, 5, 23, 6, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429533038, 'comment_body': '```suggestion\r\n#include <r_util/r_annotated_code.h>\r\n```\r\nmissing space', 'comment_created': datetime.datetime(2020, 5, 23, 10, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533222, 'comment_body': 'Should be `union {`, as well as `struct {` below. This was wrongly formatted in r2ghidra.', 'comment_created': datetime.datetime(2020, 5, 23, 10, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533690, 'comment_body': '@ret2libc is right. I would prefix these functions with `r_core_annotated_code_...` and put their declarations right here: https://github.com/radareorg/radare2/blob/fea70914e8b04e10825f6e79c623cdb1b5d49591/libr/include/r_core.h#L922', 'comment_created': datetime.datetime(2020, 5, 23, 10, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533758, 'comment_body': 'Excessive indent, you can put the entire signature in one line. Also please use `snake_case` for function names, i.e. `make_code_annotation` for example (R not needed imo).', 'comment_created': datetime.datetime(2020, 5, 23, 10, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533851, 'comment_body': ""```suggestion\r\nstatic RVector get_some_code_annotation_for_add(){\r\n```\r\n\r\nI also don't think we should return `RVector` as a struct here. It should be `RVector *` with the vector being allocated entirely on the heap, i.e. with `r_vector_new()`."", 'comment_created': datetime.datetime(2020, 5, 23, 10, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533857, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 5, 23, 10, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533866, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 5, 23, 10, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533877, 'comment_body': '```suggestion\r\nstatic RAnnotatedCode *get_hello_world(){\r\n```', 'comment_created': datetime.datetime(2020, 5, 23, 10, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533980, 'comment_body': '```suggestion\r\nstatic bool test_r_annotated_code_new() {\r\n```\r\nand unnecessary newline below', 'comment_created': datetime.datetime(2020, 5, 23, 10, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533988, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 5, 23, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429533992, 'comment_body': '```suggestion\r\nstatic bool test_equal(RCodeAnnotation *first, RCodeAnnotation *second) { // First - Got, Second - Expected\r\n```', 'comment_created': datetime.datetime(2020, 5, 23, 10, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429534005, 'comment_body': '```suggestion\r\n\tif (first->type == R_CODE_ANNOTATION_TYPE_OFFSET) {\r\n```', 'comment_created': datetime.datetime(2020, 5, 23, 10, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429534040, 'comment_body': '```suggestion\r\n\tmu_assert_eq (first->start, second->start, ""start of annotations doesn\'t match"");\r\n```\r\nThis applies for all function/macro calls (but not their definitions).', 'comment_created': datetime.datetime(2020, 5, 23, 10, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429534632, 'comment_body': 'I will be adding better documentation in the next commit, will fix this ambiguity.', 'comment_created': datetime.datetime(2020, 5, 23, 10, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429534807, 'comment_body': ""I have formatted the code in the new commit. Now when I use`./sys/clang-format-diff.py`, it doesn't show any formatting problems. Please check if there are any problems with indentation now."", 'comment_created': datetime.datetime(2020, 5, 23, 10, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429535789, 'comment_body': 'Should be `struct {`', 'comment_created': datetime.datetime(2020, 5, 23, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429535807, 'comment_body': 'Please use snake_case for function names, i.e. `make_code_annotation` for example (R not needed imo).', 'comment_created': datetime.datetime(2020, 5, 23, 10, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429535821, 'comment_body': ""```suggestion\r\nstatic RVector get_some_code_annotation_for_add(){\r\n```\r\n\r\nI also don't think we should return `RVector` as a struct here. It should be `RVector *` with the vector being allocated entirely on the heap, i.e. with `r_vector_new()`."", 'comment_created': datetime.datetime(2020, 5, 23, 10, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429535837, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 5, 23, 10, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429535841, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 5, 23, 10, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429535868, 'comment_body': '```suggestion\r\nstatic RAnnotatedCode *get_hello_world(){\r\n```', 'comment_created': datetime.datetime(2020, 5, 23, 10, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429535901, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 23, 10, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429535911, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 23, 10, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429542020, 'comment_body': '@thestr4ng3r  These printing functions need `RAnnotatedCode` that is is r_annotated_code.h\r\n```\r\nR_API void r_core_annotated_code_print_json(RAnnotatedCode *code);\r\nR_API void r_core_annotated_code_print(RAnnotatedCode *code, RVector *line_offsets);\r\nR_API void r_core_annotated_code_print_comment_cmds(RAnnotatedCode *code);\r\n```\r\nHow can we handle this issue?\r\n', 'comment_created': datetime.datetime(2020, 5, 23, 12, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429555558, 'comment_body': ""@thestr4ng3r @ret2libc  as I said earlier, the printing function depends on `r_annotated_code.h` and `r_annotated_code.h` depends on `r_core.h`, so we can't move this without changing any of these dependencies. But looking at the code, I don't understand why we need `#include <r_core.h>` in `r_annotated_code.h `. Can we not have that in `r_annotated_code.h `?"", 'comment_created': datetime.datetime(2020, 5, 23, 15, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429556782, 'comment_body': 'Fixed in the new commit.', 'comment_created': datetime.datetime(2020, 5, 23, 15, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429556796, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 5, 23, 15, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429556885, 'comment_body': 'I am committing with this change now.', 'comment_created': datetime.datetime(2020, 5, 23, 15, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429561020, 'comment_body': ""Rename this as `cannotated_code`, similar to how it's done with other files (e.g. `cio`, `cconfig`, `cfile`, `cundo`, etc.)"", 'comment_created': datetime.datetime(2020, 5, 23, 16, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429561178, 'comment_body': 'change the name of this define, as this is not anymore r2ghidra code.', 'comment_created': datetime.datetime(2020, 5, 23, 16, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429561287, 'comment_body': ""I think it's important to note in the doc above that `code` will be owned and freed by RAnnotatedCode, so it must be a free-able string."", 'comment_created': datetime.datetime(2020, 5, 23, 16, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429561383, 'comment_body': ""I'm not sure this is really necessary to be said... these are anyway the only type of annotation we have right now. "", 'comment_created': datetime.datetime(2020, 5, 23, 16, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429561477, 'comment_body': 'remember to change this comment as well once you change the define above', 'comment_created': datetime.datetime(2020, 5, 23, 16, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429561683, 'comment_body': ""Maybe that's a stupid question or it's already explained elsewhere, but... What is a OFFSET annotation? What does it represent exactly? It may be worth providing a short explanation here, unless it is already obvious from somewhere else I'm missing."", 'comment_created': datetime.datetime(2020, 5, 23, 16, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429563257, 'comment_body': 'There are two types of annotation.\r\n```\r\ntypedef enum r_code_annotation_type_t {\r\n\tR_CODE_ANNOTATION_TYPE_OFFSET,\r\n\tR_CODE_ANNOTATION_TYPE_SYNTAX_HIGHLIGHT,\r\n\t// ...\r\n} RCodeAnnotationType;\r\n```\r\nBy the way `RAnnotatedCode` is defined, it could represent either one of these types. See code below (some parts are not shown)\r\n```\r\ntypedef struct r_code_annotation_t {\r\n\tRCodeAnnotationType type;\r\n\tunion {\r\n\t\tstruct {\r\n\t\t\tut64 offset;\r\n\t\t} offset;\r\n\t\tstruct {\r\n\t\t\tRSyntaxHighlightType type;\r\n\t\t} syntax_highlight;\r\n\t};\r\n} RCodeAnnotation;\r\n```\r\nIf you still think it should be explained, I will do that in `r_annotated_code.h`.\r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 23, 17, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429563379, 'comment_body': 'I have explained the types of annotation in another comment. Or were you talking about something else here?', 'comment_created': datetime.datetime(2020, 5, 23, 17, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429563835, 'comment_body': 'Sorry, I misread the question. `R_CODE_ANNOTATION_TYPE_OFFSET` represent the corresponding offsets for parts of the code\r\nFor example, see an output of `pdgo`\r\n\r\n>                   |\r\n>                   |void main(void)\r\n>                   |{\r\n>     0x00001158    |    sym.imp.puts(""Hello, World!"");\r\n>     0x0000115f    |    return;\r\n>                   |}\r\n\r\nIn the `RAnnotatedCode` representing this output, there will be at least two annotations of type `R_CODE_ANNOTATION_TYPE_OFFSET`, they will give offsets 0x00001158 and 0x0000115f.', 'comment_created': datetime.datetime(2020, 5, 23, 17, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429563986, 'comment_body': 'See the output of `pdgj` for the same code. (Some parts are not shown)\r\n\r\n> {""start"":23,""end"":52,""type"":""offset"",""offset"":4440},{""start"":58,""end"":64,""type"":""offset"",""offset"":4447},{""start"":58,""end"":64,""type"":""syntax_highlight"",""syntax_highlight"":""keyword""},{""start"":58,""end"":64,""type"":""offset"",""offset"":4447}""\r\n\r\nIs it clear now?', 'comment_created': datetime.datetime(2020, 5, 23, 17, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429567505, 'comment_body': 'So if I understand it right, it allows you to say which offset is associated with a given part of the decompiled code. Is that right? Maybe a small sentence explaining this would help for future devs', 'comment_created': datetime.datetime(2020, 5, 23, 18, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429567607, 'comment_body': ""I'm saying that if there are just 2 types of annotations and this function returns all kinds of annotations, then there is no need to list each possible type of annotations that can be returned in the comment."", 'comment_created': datetime.datetime(2020, 5, 23, 18, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ret2libc', 'type': 'User'}, {'comment_id': 429571637, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 23, 19, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429571643, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 23, 19, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429571675, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 23, 19, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429571769, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 23, 19, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429571846, 'comment_body': 'I have given a short explanation as you asked me to.', 'comment_created': datetime.datetime(2020, 5, 23, 19, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429572514, 'comment_body': ""@ret2libc I wrote all these replies without seeing any of your reply to the recent comments. It didn't refresh automatically. Sorry for that.\r\n\r\nYes, I understand your point. I will remove this part from the comment."", 'comment_created': datetime.datetime(2020, 5, 23, 19, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429572793, 'comment_body': ""Yes, that's right."", 'comment_created': datetime.datetime(2020, 5, 23, 19, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429763442, 'comment_body': '```suggestion\r\n* This function is used for printing the output of commands pdg and pdgo.\r\n* It can print the decompiled code with or without offsets. If line_offsets is a null pointer,\r\n* the output will be printed without offsets (pdg), otherwise, the output will be\r\n* printed with offsets.\r\n* This function will print the output in console using the function r_cons_printf();\r\n* \r\n* Return: Nothing\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 7, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ITAYC0HEN', 'type': 'User'}, {'comment_id': 429766763, 'comment_body': '```suggestion\r\n * r_annotated_code_new() - Creates a new RAnnotatedCode structure and returns its pointer.\r\n * @code: Literal code for which the RAnnotatedCode structure will be created .\r\n *\r\n * This functions creates a new RAnnotatedCode structure.\r\n * RAnnotatedCode.code will be initialized as the character array passed.\r\n * Here, code must be a string that can deallocated.\r\n * This will initialize RVector /*<RCodeAnnotation>*\\/ annotations as well.\r\n * \r\n * Return: Pointer to the new RAnnotatedCode structure created.\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 7, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ITAYC0HEN', 'type': 'User'}, {'comment_id': 429767192, 'comment_body': ""```suggestion\r\n * If a line of decompiled code doesn't have a unique offset, UT64_MAX is inserted as its offset.\r\n```"", 'comment_created': datetime.datetime(2020, 5, 25, 7, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ITAYC0HEN', 'type': 'User'}, {'comment_id': 429790572, 'comment_body': 'These changes are unrelated to the scope of the PR. Please revert them to the original.', 'comment_created': datetime.datetime(2020, 5, 25, 8, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429790632, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 5, 25, 8, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429794181, 'comment_body': 'These nested `/*` create compiler warnings. You can just write\r\n```\r\nThis will initialize RVector<RCodeAnnotation> annotations as well\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429794286, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 5, 25, 8, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429795902, 'comment_body': 'As reported by valgrind:\r\n```\r\n==28999== Invalid write of size 1\r\n==28999==    at 0x10A568: test_r_annotated_code_add_annotation (test_annotated_code.c:143)\r\n==28999==    by 0x10BA3F: all_tests (test_annotated_code.c:293)\r\n==28999==    by 0x10BC1A: main (test_annotated_code.c:304)\r\n==28999==  Address 0x625d716 is 0 bytes after a block of size 54 alloc\'d\r\n==28999==    at 0x483977F: malloc (vg_replace_malloc.c:307)\r\n==28999==    by 0x10A4FF: test_r_annotated_code_add_annotation (test_annotated_code.c:142)\r\n==28999==    by 0x10BA3F: all_tests (test_annotated_code.c:293)\r\n==28999==    by 0x10BC1A: main (test_annotated_code.c:304)\r\n==28999==\r\n```\r\nInstead, you can simply do:\r\n```c\r\nchar *test_string = strdup (""abcdefghijklmnopqrtstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ"");\r\n```\r\nThe same goes for all the other malloc/strcpy cases.', 'comment_created': datetime.datetime(2020, 5, 25, 8, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429796460, 'comment_body': 'Leak of code:\r\n```suggestion\r\n\r\n\tr_annotated_code_free (code);\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429797330, 'comment_body': 'Missing return\r\n```suggestion\r\n\treturn true;\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429797652, 'comment_body': 'We want to break the test if this fails:\r\n```suggestion\r\n\tif (!test_equal (r_vector_index_ptr (&code->annotations, 0), r_vector_index_ptr (test_annotations, 0))) {\r\n\t\treturn false;\r\n\t}\r\n```\r\nSame goes for all the other usages of `test_equal()`.', 'comment_created': datetime.datetime(2020, 5, 25, 8, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429800042, 'comment_body': 'Leak of code and out:\r\n```suggestion\r\n\r\n\tr_pvector_free (out);\r\n\tr_annotated_code_free (code);\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429801267, 'comment_body': 'Leak of code and out:\r\n```suggestion\r\n\r\n\tr_pvector_free (out);\r\n\tr_annotated_code_free (code);\r\n\tmu_end;\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429802207, 'comment_body': 'Leak of code and offsets:\r\n```suggestion\r\n\r\n\tr_vector_free (offsets);\r\n\tr_annotated_code_free (code);\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429804510, 'comment_body': 'Leak of code:\r\n```suggestion\r\n\tr_annotated_code_free (code);\r\n\tmu_end;\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429804623, 'comment_body': 'Leak of code and offsets:\r\n```suggestion\r\n\tr_vector_free (offsets);\r\n\tr_annotated_code_free (code);\r\n\tmu_end;\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429805793, 'comment_body': 'Leak of code and test_annotations:\r\n```suggestion\r\n\tr_vector_free (test_annotations);\r\n\tr_annotated_code_free (code);\r\n\tmu_end;\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429807094, 'comment_body': 'Leak of test_annotations:\r\n```suggestion\r\n\t}\r\n\tr_vector_free (test_annotations);\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429807282, 'comment_body': 'Leak of test_annotations:\r\n```suggestion\r\n\t}\r\n\tr_vector_free (test_annotations);\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 429827376, 'comment_body': ""It wasn't following the coding style. I changed it because it showed up while running the script to check coding style."", 'comment_created': datetime.datetime(2020, 5, 25, 9, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429907265, 'comment_body': 'Changed as suggested.', 'comment_created': datetime.datetime(2020, 5, 25, 12, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429907296, 'comment_body': 'Changed as suggested.', 'comment_created': datetime.datetime(2020, 5, 25, 12, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429907325, 'comment_body': 'Changed as suggested.', 'comment_created': datetime.datetime(2020, 5, 25, 12, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429907448, 'comment_body': 'Changes reverted', 'comment_created': datetime.datetime(2020, 5, 25, 12, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429907509, 'comment_body': 'Changes reverted', 'comment_created': datetime.datetime(2020, 5, 25, 12, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429907580, 'comment_body': 'Changed as suggested.', 'comment_created': datetime.datetime(2020, 5, 25, 12, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429907650, 'comment_body': 'Changed as suggested.', 'comment_created': datetime.datetime(2020, 5, 25, 12, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 429907797, 'comment_body': 'Changed as suggested.', 'comment_created': datetime.datetime(2020, 5, 25, 12, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 430080080, 'comment_body': ""It's still there though..."", 'comment_created': datetime.datetime(2020, 5, 25, 21, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 430154602, 'comment_body': ""I'm sorry. Actually, I had made the change but I think I accidentally did reset before making other changes. I will make the change now."", 'comment_created': datetime.datetime(2020, 5, 26, 4, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}]","[{'commit_sha': '74d297ebb605cb2920ba7b8bcea4813c57e0de67', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ec6637da748a7f2fbe503cf13a936ed9b07b97a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df4244af82529c55b21fd3442ca5a2e25fac9976', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b806f0049eacfa22ba7b3072f40bcada8d8dd496', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4b7da55d8c52d8eb5220a7fc21bd09bb9bb9167', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ad3486fba7caec4796df41bc40730bea6b09e4', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c4af4e430386db8e653ac7eb4099c418abf773', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d316f014e9d0a6517b7df6bc87eec3038816172', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eceaa1b253dcdae81a7308b4857a63012b11d70', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53759825a6b13c1be5f95c137e6b446a8114a30e', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '802537e180c8f9abbf3e622192d79e617747f47b', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6018d4d7a4282ac02608f63d430ae76582d5d743', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09c4b074c2603b62ceeb756a38c8ad1723a586a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11705007ad77d5caa6bc4ee2a228f80be5dce2a5', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8b2d5f7e15f33eee208940975b39f17fd7582c2', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13192924f93e232459fc8ee8d7d621d0a30977fa', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8710a233b6a3e3400c5fe725b36f905188d35b19', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be34e1b9b77bf299e491ea7e843bc840894020aa', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5376ff22f8f41884b5b3f014567986e369bc8448', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15cb143a4f3535231e1cff184a1eed436567701d', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac5f35cb7cff5e167a4497fdcaa497293b6c9fea', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f4d1d676f7e1a3622ebbdc6a7710f93176d148', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e60c27acd43bd3b17ce2870a542e3ddcefb457', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9882e71c1fc73d77653c37cde8bd2fd791c216f7', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
422070662,Shifting of RAnnotatedCode to radare2,"<!--- Filling this template is mandatory -->

**Detailed description**

RAnnotatedCode will be shifted to radare2 to make it a common interface for all decompilers. The corresponding PR in radare2 is this #[16369](https://github.com/radareorg/radare2/pull/16939)

<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->


**Test plan**
Test whether all functionality of `r2-ghidra` remains the same even after the shift.
<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->


**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->


",True,107,https://api.github.com/repos/rizinorg/rz-ghidra/pulls/107,https://github.com/rizinorg/rz-ghidra/pull/107,closed,6,405,6,4,0,0,0,0,[],2020-05-22 17:58:44+00:00,2020-05-27 09:04:19+00:00,399935.0,"4 days, 15:05:35",[],"[{'commit_sha': '79863bada20ac96bc316332c1c2b3a649aea9596', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd49059cb202836f93227a73d291a9b9844975bbd', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '742860b1c9e8923c26c36690c2460f87d6ee9138', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7c851d62ca465c9db6d62b702d270bf6e98f4df', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
424909899,Patched with changes required after migrating RAnnotatedCode to radare2,"This PR is from the radare2 team. We have migrated RAnnotatedCode used in retdec-r2plugin to radare2. In the future, RAnnotatedCode will work as the standard decompiler interface for all decompiler plugins in Cutter. We have a series of work going on for improving the decompiler widget. This PR contains necessary changes required to make retdec-r2plugin work with updated radare2.",True,16,https://api.github.com/repos/radareorg/r2retdec/pulls/16,https://github.com/radareorg/r2retdec/pull/16,closed,6,593,8,1,5,0,0,1,[],2020-05-29 06:20:47+00:00,2020-05-30 16:42:34+00:00,123707.0,"1 day, 10:21:47",[],"[{'commit_sha': '19d38a1bbdb0a2f5a3ab322d046c936c3b180e53', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49

425433012,Emit RAnnotatedCode to Cutter,"<!--- Filling this template is mandatory -->

**Detailed description**
[Update: This was merged to master by PR #114]
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->
In this PR, RAnnotatedCode is emitted from the decompileAt() function called by Cutter. Made changes to make this possible. 
There is code duplication in `r2ghidra_decompile_annotated_code()` and most of it is from `Decompile()`. I need suggestions in the ways I should refactor both functions to make it more elegant, if possible.
...

**Test plan**

<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->
1. Get PR #[2227](https://github.com/radareorg/cutter/pull/2227) and the latest radare2 version before compiling this PR.
2. Open the decompiler widget and make sure that the correct decompiled code is being shown while you select offsets from functions and other widgets.
3. Make sure that the decompiler widget is seeking the correct address while clicking on functions(and other offsets) in the decompiler widget.
4. Make sure that invalid offsets are not causing Segmentation Fault.
5. Check the code and make sure that I have not missed any exceptional cases that will cause errors.

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

**Notes**
Merge all these three PRs together to ensure smooth functioning of all decompilers.
Refactored decompiler widget and R2Dec plugin: [Cutter #2227 ](https://github.com/radareorg/cutter/pull/2227)
Refactored R2Ghidra plugin that emits RAnnotatedCode: [R2Ghidra-dec #112](https://github.com/radareorg/r2ghidra-dec/pull/112)
Refactored retdec plugin that emits RAnnotatedCode:[ Florian's fork #1](https://github.com/thestr4ng3r/retdec-r2plugin/pull/1), after this PR is verified, I will send it to retdec's repo.
...",True,112,https://api.github.com/repos/rizinorg/rz-ghidra/pulls/112,https://github.com/rizinorg/rz-ghidra/pull/112,closed,132,146,4,11,1,31,0,0,[],2020-05-30 08:11:34+00:00,2020-06-07 18:31:45+00:00,728411.0,"8 days, 10:20:11","[{'comment_id': 433692394, 'comment_body': '`addr` is ignored.', 'comment_created': datetime.datetime(2020, 6, 2, 8, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 433695139, 'comment_body': 'I would prefer if the internal implementation function passed offset explicitly instead of relying on global offset value. If necessary the core->offset can be passed as default position but that should be done at user interface level in the corresponding r2 command handler.', 'comment_created': datetime.datetime(2020, 6, 2, 8, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 433755439, 'comment_body': '> I would prefer if the internal implementation function passed offset explicitly instead of relying on global offset value.\r\n\r\nWhat benefit do we get from this? Is `static void Decompile(RCore *core, DecompileMode mode)` also not doing the same thing?', 'comment_created': datetime.datetime(2020, 6, 2, 9, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 433761946, 'comment_body': ""I have noticed this. But the decompileAt() in R2Dec needs `addr`, that's why I didn't change it here. If the core can be used in `R2DecDecompiler::decompileAt(RVA addr)` , we can avoid this here. This has to be decided."", 'comment_created': datetime.datetime(2020, 6, 2, 10, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 433775713, 'comment_body': 'Yes there are other parts of code doing this. Poor separation of user interface from the implementation of main logic isn\'t uncommon in r2 and it makes it\'s API more difficult to use.\r\n\r\nThere are two aspects to this.\r\n\r\n One is that ""global variables  are evil"".  `core->offset`  isn\'t a one from language perspective but from the perspective of data-flow in the whole system it is one, with the same problems. You can find plenty of articles on this topic.\r\n\r\nOther aspect is that core->offset is mixing responsibilities of 3 different concepts.\r\n* core->offset as part of interface  - this only makes sense in the r2 command mode, in Cutter and Panel mode there is no single current offset.\r\n* current offset as implementation detail of some io backends\r\n* function capable of decompiling code at any point of program\r\n\r\nDecompilation function shouldn\'t know anything about the current interface state. It is the responsibility of user interface tracking which parts you are looking at and to request decompiling them. \r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 2, 10, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 434024542, 'comment_body': 'I am joining @karliss here with these concerns. \r\n@NirmalManoj please suggest better API layer functions to demonstrate the desired changes, show us and then implement if it looks good :)', 'comment_created': datetime.datetime(2020, 6, 2, 16, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ITAYC0HEN', 'type': 'User'}, {'comment_id': 435008133, 'comment_body': 'Can we change `RAnnotatedCode* r2ghidra_decompile_annotated_code(RCore *core)` to `RAnnotatedCode* r2ghidra_decompile_annotated_code(RCore *core, RVA addr)`? \r\n\r\nWith this change,  in `r2ghidra_decompile_annotated_code` we decompile code at the address `RVA addr` without using core->offset.  @karliss @ITAYC0HEN ', 'comment_created': datetime.datetime(2020, 6, 4, 5, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 435099079, 'comment_body': ""I have made this change in the new commit @karliss @ITAYC0HEN . Now, cutter's plugin doesn't use core->offset directly or indirectly(as far as I could see:))"", 'comment_created': datetime.datetime(2020, 6, 4, 8, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 435107371, 'comment_body': ""Looks good. Weird that I can't mark this comment as resolved."", 'comment_created': datetime.datetime(2020, 6, 4, 9, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 435107657, 'comment_body': 'Looks good.', 'comment_created': datetime.datetime(2020, 6, 4, 9, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 435118575, 'comment_body': 'I will mark it as resolved:)', 'comment_created': datetime.datetime(2020, 6, 4, 9, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 435121840, 'comment_body': '@thestr4ng3r Should I make similar changes for retdec in the current PR?', 'comment_created': datetime.datetime(2020, 6, 4, 9, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 435138757, 'comment_body': 'Yes please.', 'comment_created': datetime.datetime(2020, 6, 4, 10, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 435160121, 'comment_body': '@thestr4ng3r Done. Please check if I have missed someplace that fetches offset from the core.', 'comment_created': datetime.datetime(2020, 6, 4, 10, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 435987605, 'comment_body': '`r2ghidra_decompile_annotated_code` is mostly identical with `Decompile` it should be be possible to refactor the  common part into separate function.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 436047805, 'comment_body': ""I don't think it's necessary to keep old hacky debug code. Also the same can be easily achieved by setting breakpoint on exceptions or in the catch statement."", 'comment_created': datetime.datetime(2020, 6, 5, 17, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 436087337, 'comment_body': '@karliss  Can you please look into the code and suggest parts you think I should separate? I had asked for suggestions to refactor for avoiding code duplication in the description of this PR.  I am not really sure about what all should be changed.', 'comment_created': datetime.datetime(2020, 6, 5, 18, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 436254876, 'comment_body': 'Please keep the code style as is, see https://gist.github.com/thestr4ng3r/d0b1de10852ca3d119e8c83375211e4b', 'comment_created': datetime.datetime(2020, 6, 6, 9, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 436255599, 'comment_body': 'Same as in retdec, you can call this file `r2ghidra.h`.', 'comment_created': datetime.datetime(2020, 6, 6, 9, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 436255704, 'comment_body': 'Please keep these, as noted on telegram.', 'comment_created': datetime.datetime(2020, 6, 6, 9, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 436256085, 'comment_body': ""Better signature:\r\n```C++\r\nstatic void Decompile(RCore *core, ut64 addr, DecompileMode mode, std::stringstream &out_stream, RAnnotatedCode **out_code)\r\n```\r\nThe `&` for core is unnecessary, for code it's better readable like this (you will have to use `*out_code` instead of `code` in the function body).\r\nAlso this makes is more clear what the inputs and what the outputs are.\r\n"", 'comment_created': datetime.datetime(2020, 6, 6, 10, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 436256141, 'comment_body': '```suggestion\r\nstatic void DecompileCmd(RCore *core, DecompileMode mode)\r\n```\r\nto distinguish it from the regular `Decompile()` as mentioned above.', 'comment_created': datetime.datetime(2020, 6, 6, 10, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 436256167, 'comment_body': 'Excessive indent, you can keep this all on a single line.', 'comment_created': datetime.datetime(2020, 6, 6, 10, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 436256183, 'comment_body': '```suggestion\r\nR_API RAnnotatedCode *r2ghidra_decompile_annotated_code(RCore *core, ut64 addr);\r\n```', 'comment_created': datetime.datetime(2020, 6, 6, 10, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 436259924, 'comment_body': 'Changed', 'comment_created': datetime.datetime(2020, 6, 6, 11, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 436259926, 'comment_body': 'Changed as requested above.', 'comment_created': datetime.datetime(2020, 6, 6, 11, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 436259936, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 11, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 436259938, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 6, 6, 11, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 436259943, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 11, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 436259945, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 6, 11, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 436259994, 'comment_body': '@thestr4ng3r Please review again', 'comment_created': datetime.datetime(2020, 6, 6, 11, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}]","[{'commit_sha': '3cc70c8587b60653ceacf7299f721a2dce6f614b', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd7b18051b793d08bb8926b5d3d56927d9148c99', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c12362fe50d2b36d00e2cf3a455ff92e3744cd6e', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07906fb2a6bc2b9441caf0c55494b8b6a01dcd80', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d67abd622a92fe220facdd1681c7c441f4fee4a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e3c349f472ffc2e84b7bb91e4723c9b2a7db72', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32cec0a1bd5fe0756660d18f132fa2dde22c915c', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '798d8b1f69442ca9feb4d898c871bbd844ad1f92', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3b0120008e81806ce6672f048a60a5ab949011f', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638668e6e603b122f5f77de95d71b2288df3ea0a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20040d68daaba14126eb25d712f4a35f62a27185', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
436257450,Emit RAnnotatedCode from decompileAt(),This PR is from the Cutter team.  We have a series of work going on for improving the decompiler widget as mentioned in PR #16 . Now we have changed the decompiler widget to base it directly on `RAnnotatedCode` removing the custom `AnnotatedCode` struct that was present in Cutter. The changes have been merged to the master branch in Cutter. This PR contains necessary changes required to make retdec-r2plugin work with the updated Cutter. It seems to be working as well as it was before. But I am not entirely sure if I missed anything important. ,False,17,https://api.github.com/repos/radareorg/r2retdec/pulls/17,https://github.com/radareorg/r2retdec/pull/17,closed,42,58,7,2,12,5,0,1,[],2020-06-18 06:28:14+00:00,2020-08-18 10:39:35+00:00,5285481.0,"61 days, 4:11:21","[{'comment_id': 442705705, 'comment_body': 'Can you move this file to the `include/r2plugin`?\r\n\r\nWith this update it should be required to add `core_retdec` [here]( https://github.com/avast/retdec-r2plugin/blob/1ba22472bf7718cf5b70130d249c95681ad71889/cutter-plugin/CMakeLists.txt#L18) in `cutter-plugin/CMakeLists.txt`.', 'comment_created': datetime.datetime(2020, 6, 19, 8, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'xkubov', 'type': 'User'}, {'comment_id': 442706319, 'comment_body': 'See the comment below regarding the position of `r2retdec.h`.', 'comment_created': datetime.datetime(2020, 6, 19, 8, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xkubov', 'type': 'User'}, {'comment_id': 443156093, 'comment_body': ""Hi, I'm thinking of making a new PR from a new branch made from the current master of retdec-r2plugin. I tried rebasing it, but couldn't succeed with minimal effort. I think to make a PR from the new branch will be less time-consuming. Are you okay with this? Also, can you please tell me what exactly I should add in `cutter-plugin/CMakeLists.txt`."", 'comment_created': datetime.datetime(2020, 6, 20, 20, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 443208676, 'comment_body': 'I think that this should be only\r\n\r\n`#include ""r2plugin/r2retdec.h""`\r\n\r\nFor this to work add the following to the `cutter-plugin/CMakeLists.txt` to [this list](https://github.com/avast/retdec-r2plugin/blob/1ba22472bf7718cf5b70130d249c95681ad71889/cutter-plugin/CMakeLists.txt#L19)\r\n```\r\n target_link_libraries(r2retdec_cutter core_retdec)\r\n```\r\nThis is needed anyways as we want the `core_retdec.cpp` to be linked to the cutter plugin too.\r\n\r\nAlso to build your branch with `-DBUILD_CUTTER_PLUGIN=on` I had to change the `GIT_TAG` to `master` so I think that this should be included in this PR too (in `deps/cutter/CMakeLists.txt`). ', 'comment_created': datetime.datetime(2020, 6, 21, 11, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'xkubov', 'type': 'User'}, {'comment_id': 443215294, 'comment_body': 'Made these changes.', 'comment_created': datetime.datetime(2020, 6, 21, 12, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}]","[{'commit_sha': 'e6c46c7f6b796f14a75cf5156e6166a333605641', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e7afc42303ad6ecdb80b15cd9e5608412d3d5e', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49



440492009,Implemented offset annotation for comments,"<!--- Filling this template is mandatory -->

### **Detailed description**

Earlier we didn't have offset annotation (`R_CODE_ANNOTATION_TYPE_OFFSET`) for comments. Because of this, we have inconsistent behavior while clicking on a comment to edit in Cutter. This PR solves this problem by implementing offset annotations for comments.

The following GIFs show the previous behavior and improved behavior.
[Note: The following GIFs don't use the current master of Cutter. The same behavior can be noticed from the master also. So this PR can be merged after testing]

**Before having offset annotation**
![BeforeCommentOffset](https://user-images.githubusercontent.com/18501167/85844514-7a332f00-b7c0-11ea-8269-4ebb034991fa.gif)
**After implementing offset annotation**
![AfterCommentOffset_1](https://user-images.githubusercontent.com/18501167/85844548-88814b00-b7c0-11ea-9f33-1f460757c9f3.gif)



<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**
- Test with the current master of Cutter
- Test if the changes are working as expected
- Make sure nothing else is affected by this change
<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,121,https://api.github.com/repos/rizinorg/rz-ghidra/pulls/121,https://github.com/rizinorg/rz-ghidra/pull/121,closed,48,3,2,3,7,0,0,1,[],2020-06-26 09:54:12+00:00,2020-06-29 10:12:06+00:00,260274.0,"3 days, 0:17:54",[],"[{'commit_sha': '49c07c588fc122bf3fce9d503bb8c71089ed42f6', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edfa9550777704a33a3780ef1b65c53e6ce1d612', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c8e44d363ff0f7a75918a34b72b467e1cf949dc', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
444167369,Annotation for function name," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)
- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)

**Detailed description**

This PR adds an annotation type (`R_CODE_ANNOTATION_TYPE_FUNCTION_NAME`) for function names in the decompiled code. This will be required for implementing some features in the decompiler in Cutter.

**Note**: I haven't modified tests so CI can fail during tests due to this. I will modify tests after getting feedback on this.
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**
1. Fetch and compile [PR #123](https://github.com/radareorg/r2ghidra-dec/pull/123) from r2ghidra-dec after compiling this PR.
- [ ] Check the code and make sure that I haven't missed anything.
- [ ] Check the modified JSON output code to make sure it's correct.
- [ ] Test the code with JSON output to see if it's working properly. 

<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,17204,https://api.github.com/repos/radareorg/radare2/pulls/17204,https://github.com/radareorg/radare2/pull/17204,closed,31,1,3,8,4,2,1,1,[{'name': 'API'}],2020-07-03 19:01:42+00:00,2020-07-10 05:37:49+00:00,556567.0,"6 days, 10:36:07","[{'comment_id': 449689417, 'comment_body': ""In the current form this can't work properly without memory problems. What is managing the memory pointed by name? RAnnotatedCode is supposed to be self contained. The name needs to be owned either by RannotatedCode or RCodeAnnotation which means that there needs to be appropriate method for releasing it."", 'comment_created': datetime.datetime(2020, 7, 3, 19, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 449759568, 'comment_body': 'Yep, this should be just `char *` and owned by this annotation. Then, you can create a free function for a single annotation that checks the type and frees the name when necessary and pass it in here instead of the NULL:\r\nhttps://github.com/radareorg/radare2/blob/305cc00766516eb563fd4a6a9e74700aa0907629/libr/util/annotated_code.c#L12\r\n', 'comment_created': datetime.datetime(2020, 7, 4, 10, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}]","[{'commit_sha': '38610ccc1e7c66e2a258b6dbcd7b128b3665c206', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ddb8c6a7b15196aa292654fe30d2753422fe659', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bfc9839ae84f7b60ff5464a90a97b01e3f5b6b6', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ddc283c851932cda7c956afab08f492b067b27a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536d5a5706673c8f78825ef107df67c31857588c', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f625284ed389278b00744480d50a6b6ef695897c', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db33531b5065915b5ca80ff5de2f326a6b488a2', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '860d50fc3009e619d02bfddfee564386d5fcc09b', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
444168498,Function name annotation annotator implemented,"<!--- Filling this template is mandatory -->

**Detailed description**
This PR implements an annotator that will annotate function names with a new type of annotation (`R_CODE_ANNOTATION_TYPE_FUNCTION_NAME`) introduced by [PR #17204](https://github.com/radareorg/radare2/pull/17204) in radare2. This will be required for implementing some features in the decompiler widget in Cutter.

I have also implemented [offset annotation](https://github.com/radareorg/r2ghidra-dec/pull/123#discussion_r451417915) for the currently decompiled function's name in this PR.

<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**
1. Fetch [PR #17204](https://github.com/radareorg/radare2/pull/17204) in radare2 and compile it before compiling this.
2. Make sure the output is working as expected from the JSON output (check r2 PR first for making sure JSON output is implemented correctly for function names).
3. Check code and other things that should be checked.
<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,123,https://api.github.com/repos/rizinorg/rz-ghidra/pulls/123,https://github.com/rizinorg/rz-ghidra/pull/123,closed,56,12,4,15,9,30,0,1,[],2020-07-03 19:07:18+00:00,2020-07-11 08:30:12+00:00,652974.0,"7 days, 13:22:54","[{'comment_id': 449799719, 'comment_body': ""(not related to the code here, making this comment to start a nested discussion)\r\n> It would be more reliable to use address of the function directly instead of the name. While the name can be evaluated to obtain address it's messy and you need the correct name. There is function name, real name, flag name, demangled name. The address of function referenced at position of code would also have other uses.\r\n\r\nI didn't think that renaming using the name would get messy. But initially, I wanted to have the address in the function name annotations, just so that it might become useful later. But unfortunately, we don't have this information in XML. So I am not sure how I could do it @karliss  @thestr4ng3r "", 'comment_created': datetime.datetime(2020, 7, 4, 19, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 449843141, 'comment_body': ""https://github.com/radareorg/radare2/blob/master/libr/include/r_anal.h#L277-L280\r\nDoes this name always refer to the 'function name' and not real name/flag name/demangled name."", 'comment_created': datetime.datetime(2020, 7, 5, 7, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 449852828, 'comment_body': 'The address can be clearly seen in the xml.', 'comment_created': datetime.datetime(2020, 7, 5, 8, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 449869657, 'comment_body': '@karliss I am unable to find it till now. We have the address of the current function in the XML(and I knew we could get that).   But how can I find the addresses of all the functions in the decompiled code from the XML?', 'comment_created': datetime.datetime(2020, 7, 5, 12, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 449874875, 'comment_body': '@NirmalManoj Can you post an example xml here for reference?', 'comment_created': datetime.datetime(2020, 7, 5, 12, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 449881759, 'comment_body': 'I had a call with @NirmalManoj  looking at the xml, Ghidra C++ API and Opref annotator as example for accessing Ghidra C++ API. He should be able to continue now.', 'comment_created': datetime.datetime(2020, 7, 5, 14, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 450398160, 'comment_body': ""@karliss @thestr4ng3r  I was trying this all day and it seems I need more help. This is what I am trying finally (not working code)\r\n```\r\n        PcodeOp *op = opit->second;\r\n\tuintb temp_off = 0;\r\n\tfor(int i = 0; i < op->numInput(); i++){\r\n\t\tconst Varnode *vn = op->getIn(i);\r\n\t\tif (vn->getSpace()->getType() == IPTR_FSPEC){\r\n\t\t\ttemp_off = vn->getOffset();\r\n\t\t\t// temp_off++;\r\n\t\t}\r\n\t}\r\n\tannotation.function_name.offset = temp_off;\r\n\tout->push_back(annotation);\r\n```\r\nIt does identify functions correctly with `IPTR_FSPEC`, but `vn->getOffset()` is not returning the correct offset. I want to find a way to get the offset from the `Varnode` and I believe there is a way to do that from `vn`. But I couldn't figure that out."", 'comment_created': datetime.datetime(2020, 7, 6, 18, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 450404574, 'comment_body': 'a) How did you came to conclusion that IPTR_FSPEC is the correct address space kind?\r\nb) did you to dump all the varnodes you get with their properties: type, whatever offset returns, the id displayed in xml, anything else potentially interesting by printing it to terminal?\r\nc) The offsets in xml looked reasonable, take a look a t how xml is printed', 'comment_created': datetime.datetime(2020, 7, 6, 18, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 450419949, 'comment_body': ""a) In `space.hh` in Ghidra,\r\n```\r\n/// \\brief Fundemental address space types\r\n///\r\n/// Every address space must be one of the following core types\r\nenum spacetype {\r\n  IPTR_CONSTANT = 0,\t       ///< Special space to represent constants\r\n  IPTR_PROCESSOR = 1,\t       ///< Normal spaces modelled by processor\r\n  IPTR_SPACEBASE = 2,\t       ///< addresses = offsets off of base register\r\n  IPTR_INTERNAL = 3,\t       ///< Internally managed temporary space\r\n  IPTR_FSPEC = 4,\t       ///< Special internal FuncCallSpecs reference\r\n  IPTR_IOP = 5,                ///< Special internal PcodeOp reference\r\n  IPTR_JOIN = 6\t\t       ///< Special virtual space to represent split variables\r\n};\r\n```\r\nFrom this and the code that I have read, I guessed `IPTR_FSPEC` will be the only `spacetype` for function calls. So I tried it.\r\nc) I was trying to find a way to get the offsets without extracting it from the XML. I did check saveXml functions (but not ruling out the possibility that I won't get anything from it in future)\r\nb) I haven't done all of it. I will try it now."", 'comment_created': datetime.datetime(2020, 7, 6, 18, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 450862118, 'comment_body': 'I used a debugger to see the offsets of all the `varnodes` inside `ctx->func.vbank.loc_tree`. I will attach the binary below. It has 25 nodes under `varnodes` tag in XML output and it displays the offsets of all those correctly except those that give us function offsets. [(Binary)](https://github.com/radareorg/r2ghidra-dec/pull/123#issuecomment-654858014)\r\n( Attached image shows the location that I am talking about clearly)\r\n![Screenshot from 2020-07-07 18-48-29](https://user-images.githubusercontent.com/18501167/86787397-abdeac80-c082-11ea-873f-76c64049efc1.png) ![Screenshot from 2020-07-07 18-53-32](https://user-images.githubusercontent.com/18501167/86787885-30312f80-c083-11ea-90ed-555d33950c86.png)\r\n\r\nIt will be great if someone with experience of Ghidra API could help me in understanding it more. I have spent a lot of time in the past two days trying to figure this out. @karliss @thestr4ng3r \r\n', 'comment_created': datetime.datetime(2020, 7, 7, 13, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 451105054, 'comment_body': 'I think I have finally found a way to extract offsets reliably.', 'comment_created': datetime.datetime(2020, 7, 7, 19, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 451417915, 'comment_body': ""With the currently pushed commits, I have also implemented offset annotation for the currently decompiled function's name. See gif\r\n![offset_annotation_for_function_name](https://user-images.githubusercontent.com/18501167/86903867-8b1f6100-c12d-11ea-9db6-8a77e44c1efc.gif)\r\n"", 'comment_created': datetime.datetime(2020, 7, 8, 9, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 451424414, 'comment_body': '@karliss @thestr4ng3r This PR is ready for more review.', 'comment_created': datetime.datetime(2020, 7, 8, 9, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 451500052, 'comment_body': 'Why did you decide to do a const cast here?', 'comment_created': datetime.datetime(2020, 7, 8, 12, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 451509625, 'comment_body': '`FuncCallSpecs *getCallSpecs(const PcodeOp *op) const;`\r\nBecause the argument is const PcodeOp. Now I think I should remove it.', 'comment_created': datetime.datetime(2020, 7, 8, 12, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 451551383, 'comment_body': 'Code should almost never contain contain const_casts. Valid uses cases for it are very rare. In this case you are  not even changing the type using the cast. You might want to read a bit more about how const works.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 451554579, 'comment_body': ""Thanks, I understood why it's useless in this case."", 'comment_created': datetime.datetime(2020, 7, 8, 13, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 451739958, 'comment_body': 'Removed const cast.', 'comment_created': datetime.datetime(2020, 7, 8, 18, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 452336352, 'comment_body': '```suggestion\r\n  - git clone --depth 1 --single-branch --branch decompiler-refactoring https://github.com/radareorg/cutter\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 16, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 452338666, 'comment_body': 'Just return without adding an annotation in these cases instead of adding an invalid one. Same for the other ""INVALID"" ones.', 'comment_created': datetime.datetime(2020, 7, 9, 16, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 452339253, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 16, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 452339373, 'comment_body': 'Is this needed?', 'comment_created': datetime.datetime(2020, 7, 9, 16, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 452340386, 'comment_body': 'Keep it please.', 'comment_created': datetime.datetime(2020, 7, 9, 16, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 452340679, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 16, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 452392054, 'comment_body': 'I will fix this.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 452392278, 'comment_body': 'I will change this as suggested', 'comment_created': datetime.datetime(2020, 7, 9, 17, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 452392667, 'comment_body': 'Not at all, I used it for printing something.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 452627068, 'comment_body': 'I have made all the suggested changes.', 'comment_created': datetime.datetime(2020, 7, 10, 5, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 452627538, 'comment_body': ""I'm sorry, I misread this suggestion. I will change it now. All the other changes are as suggested."", 'comment_created': datetime.datetime(2020, 7, 10, 5, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 452629806, 'comment_body': 'Done. Changed as suggested.', 'comment_created': datetime.datetime(2020, 7, 10, 5, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}]","[{'commit_sha': 'bf937bd744843d85fc6932f85369950393f18f37', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0032464f594fd72cabeb98051ba59bd06dbaf7f9', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5417724d4ce73c82f88eeff52e65c3f518db91bb', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4961a6a5111733b55db5c5d9a91b29c51036e7a5', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ac06988abf8f7f451396dad5acf3e843c62d614', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9b770005c8fa363a490e15a5670d921e72dc7d', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1ec47ce15b4de0f7f089513825b715ed079983', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb33e4d2dfdbefcc54102f529edaf2f9b3075873', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '586436f298677c30d7ae2a01f71e18a04f3c8f28', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8583c6a939b23c7ea2b1417f01b9e4a5b58599d', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7830333770637a5b1a341c977162b38631c7c698', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e65cde7b32c668b36231c9961e51cd92ce331b77', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a7e78aff04d158691280bab97b69c0e052a2be4', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1cf135289556fa857c185c8ba9c2a487df18b40', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '776b5a4fa7591abb3569fbe672786c5189cbd2ec', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49

449094545,Annotations for Constant Variables and Global Variables for the decompiler," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)
- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)

**Detailed description**
This PR implements annotations for constant and global variables. As of now, the only information that is stored in the annotation is the address of the constant/global variable. The actions in Cutter that we will be having using these annotations is to add/rename/delete flags at the address of constant/global variables. See the corresponding PR[ #124](https://github.com/radareorg/r2ghidra-dec/pull/124) in r2ghidra-dec

<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**

<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

- [ ] 1. Compile PR[ #124](https://github.com/radareorg/r2ghidra-dec/pull/124) in r2ghidra-dec after compiling this PR.
- [ ] 2. Make sure JSON output is working as expected.
- [ ] 3. Look at code.
- [ ] 4. Think if we need more information in annotations for having the action described above in Cutter.

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,17281,https://api.github.com/repos/radareorg/radare2/pulls/17281,https://github.com/radareorg/radare2/pull/17281,closed,27,6,10,7,4,11,2,1,"[{'name': 'infrastructure'}, {'name': 'API'}]",2020-07-14 20:22:40+00:00,2020-07-18 17:49:18+00:00,336398.0,"3 days, 21:26:38","[{'comment_id': 454798513, 'comment_body': ""Instead of having separate enum variants for function, global variable and constant I suggest merging them into single one called reference. In many cases using it don't care if it's a reference to function, global variable or read only global variable, just the fact that it points to some fixed memory address. That way the code using it can be simplified. You can keep the separate RCodeAnnotationType values so that they can be differentiated if necessary. "", 'comment_created': datetime.datetime(2020, 7, 15, 5, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 454814771, 'comment_body': ""@karliss I think it's a good idea to merge them. Functions have `char *name`, so when the type is not function, it will point to `nullptr`. "", 'comment_created': datetime.datetime(2020, 7, 15, 6, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 454822470, 'comment_body': '@karliss Please have a look now.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 454947269, 'comment_body': ""I don't think it's necessary to have two nested type specifiers unless the structure gets significantly more complicated, but that seems unlikely. If you decide to keep both of them don't reuse the same enum type for both. If you keep single type field there should be a comment explaining what RCodeAnnotationType values use the reference field."", 'comment_created': datetime.datetime(2020, 7, 15, 10, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 454969117, 'comment_body': ""It is to differentiate between function annotations and variable annotations. It's useful for printing JSON also.\r\n\r\n> If you decide to keep both of them don't reuse the same enum type for both.\r\n\r\nI didn't understand this. I will add a comment that explains what RCodeAnnotationType values are used by `annotation.reference.type`."", 'comment_created': datetime.datetime(2020, 7, 15, 11, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 454975014, 'comment_body': 'You can still differentiate between the 3 if you store R_CODE_ANNOTATION_TYPE_FUNCTION_NAME, R_CODE_ANNOTATION_TYPE_GLOBAL_VARIABLE, R_CODE_ANNOTATION_TYPE_CONSTANT_VARIABLE directly in the top level type field without having a second type field inside union and R_CODE_ANNOTATION_TYPE_REFERENCE.\r\n\r\nCurrently you have two type fields one directly inside the RAnnotatedCode and one within the union reference case.  In your current design top one will always be _OFFSET, _SYNTAX_HIGHLIGHT or _REFERENCE but never FUNCTION_NAME or VARIABLE. The type inside reference struct will always be one of the last 3 but never one of the first 3. If it is used that way you should define two enums instead of using single type for two different purpose.\r\n\r\nOut of the two approaches described above I recommend the first one.', 'comment_created': datetime.datetime(2020, 7, 15, 11, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 454985639, 'comment_body': ""I'll go with the first one:)"", 'comment_created': datetime.datetime(2020, 7, 15, 11, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 455588894, 'comment_body': 'You can probably add decompiler-refactoring to a list instead of replacing master. That way it will be easier to cleanup once everything is done.', 'comment_created': datetime.datetime(2020, 7, 16, 7, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 455598125, 'comment_body': 'Changed', 'comment_created': datetime.datetime(2020, 7, 16, 8, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 455719839, 'comment_body': 'Is there need to keep R_CODE_ANNOTATION_TYPE_REFERENCE type instead of using the more specific ones? Also the current situation where multiple annotation types use the same enum field was for which I suggested to add a comment explaining the mapping.', 'comment_created': datetime.datetime(2020, 7, 16, 11, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 456306233, 'comment_body': 'Removed R_CODE_ANNOTATION_TYPE_REFERENCE and explained the mapping with a comment.', 'comment_created': datetime.datetime(2020, 7, 17, 8, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}]","[{'commit_sha': '2d052a8d979654504c536849b20b1a0217dc23a1', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e89847a4098a51434048e11366a89cbf249158b6', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53aaed5b64f52bc96539f12a631ba8f2dd06d74d', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb805dfc7c5bac25a0376e722d8e0b3ece4db865', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd97520e8af917ad4b71c348560f9d721cd82cb4a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3e76a35718b7cd92cdc34895a5fe2c4b253972', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a14ad4e2001af9bb60a0b330ef7d771fe83aee9c', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
449096201,Annotation for constant and global variables,"<!--- Filling this template is mandatory -->

**Detailed description**
This PR implements annotations for constant variables and global variables. The logic used to determine if a variable is global or constant is taken from the following [existing code](https://github.com/thestr4ng3r/ghidra/blob/6c10f36f06468f866188cccf960c019779fb9028/Ghidra/Features/Decompiler/src/decompile/cpp/variable.cc#L452-L470) in `variable.cc`. https://github.com/thestr4ng3r/ghidra/blob/6c10f36f06468f866188cccf960c019779fb9028/Ghidra/Features/Decompiler/src/decompile/cpp/variable.cc#L452-L470
As discussed in the Telegram channel, I'm making constant variable annotation only when address space is of name ""ram"". However, I couldn't find such a constant variable that satisfies this condition in the examples I have tried. I am not sure if such a constant variable would ever exist. Maybe all we want is global variables for the action to add/delete/rename flags in Cutter. 
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solvPR ers can review your pull request. -->

...

**Test plan**

- [ ] 1. Fetch and compile [PR #17281](https://github.com/radareorg/radare2/pull/17281) from radare2 and compile it before compiling this PR. 
- [ ] 2. Test if all global and constant variables are identified as expected by the `AnnotateVariable` function.
-  You can use the output of `pdgj` for testing if the variables and offsets are annotated correctly. The binary used in the new tests made added in this PR can be used for testing.

- [ ] 3. Check code and make sure my logic for determining if a variable is global/constant is correct.

<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,124,https://api.github.com/repos/rizinorg/rz-ghidra/pulls/124,https://github.com/rizinorg/rz-ghidra/pull/124,closed,650,7,3,15,6,19,0,1,[],2020-07-14 20:26:20+00:00,2020-07-26 11:38:30+00:00,1005130.0,"11 days, 15:12:10","[{'comment_id': 456786053, 'comment_body': ""Don't do this, better create a dictionary so that you can look up by varref without iterating through everything. In the worst case your current approach can take time quadratic to function size. Not a problem for most functions, but it might for bigger unrolled ones that you can often find in compression and crypto libraries."", 'comment_created': datetime.datetime(2020, 7, 18, 12, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 456786610, 'comment_body': '```suggestion\r\n\telse if(varnode->getHigh()->isConstant() && varnode->getSpace()->getName() == ""ram"")\r\n```', 'comment_created': datetime.datetime(2020, 7, 18, 12, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 456792375, 'comment_body': 'I will create a dictionary for this. Thanks.', 'comment_created': datetime.datetime(2020, 7, 18, 13, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 456817051, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 7, 18, 18, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 456817056, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 18, 18, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 457380427, 'comment_body': 'In the code you have two different kind of references, but test has only one of them.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 457387578, 'comment_body': ""This code doesn't report any reference for string literals. You can test it using `PrintAmbassador` function in the same dectest32 executable you used for other tests. I expect being able to right click on a string literal in decompiled code and either copy address or show in hexwidget or disassembly widget. "", 'comment_created': datetime.datetime(2020, 7, 20, 13, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 457388821, 'comment_body': ""I looked at XML and it seemed like there shouldn't be problems handling them."", 'comment_created': datetime.datetime(2020, 7, 20, 13, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 457476481, 'comment_body': ""I thought we didn't want to handle string literals."", 'comment_created': datetime.datetime(2020, 7, 20, 15, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 457480734, 'comment_body': 'As I noted in the PR description, I couldn\'t find a constant variable that satisfies all conditions. Please tell me how to find such a constant variable or give me a binary with such a constant variable. Current code checks if something is a global variable in an if condition and checks if it\'s constant in the next else if. I can change this order if it\'s required, but still, I couldn\'t find a constant that\'s in the address space ""ram"".', 'comment_created': datetime.datetime(2020, 7, 20, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 457481044, 'comment_body': 'String literals are not in the address space ""ram"".', 'comment_created': datetime.datetime(2020, 7, 20, 15, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 457486492, 'comment_body': ""Don't guess if you don't have an example of such variable then there is no point writing code for handling it since you don't actually know how it looks in xml or ghidra structures and how to correctly handle it."", 'comment_created': datetime.datetime(2020, 7, 20, 15, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 457488040, 'comment_body': 'Take a look at the address. It is a correct address of string literal.', 'comment_created': datetime.datetime(2020, 7, 20, 15, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 457499534, 'comment_body': 'Yes, I know. But currently, we are avoiding all variables that are not in the address space ""ram"". I think we discussed that it\'s okay to not have this rename option for actual string literals.\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 15, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 457500576, 'comment_body': 'From our discussion regarding this, my understanding was to take constant variables and global variables that are in the address space ""ram"".', 'comment_created': datetime.datetime(2020, 7, 20, 15, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 457916058, 'comment_body': 'Here\'s what I could find about string literals so far\r\n\r\n**Case 1**: String literals with no modification to related parts\r\n\r\nWhen we have a string literal without any changes to the data(flags) at its address, that string literal is shown. Ghidra creates a varnode for it, and from the varnode we can find that the type of the address is \'pointer\'. Hence, in this case, we can give the offset given by this varnode to the annotation for the constant string literal. This can be used for Xrefs and for the Show-in action. \r\nXML line is \r\nLine 490: `<variable color=""const"" varref=""0x75f"" opref=""0x1db"">""pure""</variable>`\r\n\r\n**Case 2: When the flag of the string literal is deleted.**\r\n\r\nThe location of the string literal will be shown. For example, sym.imp.printf(""pure"") becomes sym.imp.printf(0x804a01b). But the varnode of the ""0x804a01b"" in this case points to the literal constant `0x804a01b`. This means it doesn\'t give any idea as to if it\'s a pointer or not.\r\n\r\nXML line is \r\nLine 475: `<variable color=""const"" varref=""0x741"" opref=""0x103"">0x804a01b</variable>`\r\n\r\n****Case 3**: When a new flag is added after deleting existing flag**\r\n\r\n`sym.imp.printf(0x804a01b)` becomes `sym.imp.printf(<name of flag>)`. \r\n\r\nXML line\r\n`<variable color=""global"" opref=""0x1db"">NameOfFlag</variable>`\r\nIn this case, we don\'t have any reference to varref from here. Even though varref is not available in the line output line we get, we could go to the corresponding ""PcodeOp *"" to find references to three varnodes: (in case 3)\r\n\r\n```\r\n<op code=""66"">\r\n<seqnum space=""ram"" offset=""0x8049269"" uniq=""0x1db""/>\r\n    <addr ref=""0x74d""/>\r\n    <addr ref=""0x74c""/>\r\n    <addr ref=""0x74e""/>\r\n</op>\r\n```\r\nHere, the third address reference refers to the string literal. However, reliably finding that the third reference is exactly what we are looking seems impossible to me. In this case, the first varnode also has metatype ""pointer"". \r\n\r\nIn case 2, however, we don\'t have a reference to the correct varnode even in the PcodeOp. Here, the references we found in case 3, are from PcodeOp.output and PcodeOp.inrefs\r\n\r\n...\r\n\r\nBinary used in the new test is used for this analysis and the name of the function is `sym.PrintAmbassador`.\r\n\r\nWhen I said type, I meant the metatype we can see in this part of the XML. (`varnode.high.type.metatype == TYPE_PTR`)\r\n```\r\n        <high repref=""0x75f"" class=""constant"">\r\n          <type name="""" size=""4"" metatype=""ptr"" core=""true"">\r\n            <typeref name=""char"" id=""0x8000fed063689fd9""/>\r\n          </type>\r\n          <addr ref=""0x75f""/>\r\n        </high>\r\n```\r\nXMLs are attached to this [comment](https://github.com/radareorg/r2ghidra-dec/pull/124#issuecomment-661706246).', 'comment_created': datetime.datetime(2020, 7, 21, 8, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 458320075, 'comment_body': 'Inspecting further, this what I think is a possible solution for recognizing (some) constant addresses. The types of variables are defined in `type.hh`. Here\'s the related part.\r\n```\r\n/// The core meta-types supported by the decompiler. These are sizeless templates\r\n/// for the elements making up the type algebra. Ordering is important: The lower\r\n/// the number, the more \\b specific the type, in calculations involving the generality\r\n/// of a type.\r\nenum type_metatype {\r\n  TYPE_VOID = 10,\t\t///< Standard ""void"" type, absence of type\r\n  TYPE_SPACEBASE = 9,\t\t///< Placeholder for symbol/type look-up calculations\r\n  TYPE_UNKNOWN = 8,\t\t///< An unknown low-level type. Treated as an unsigned integer.\r\n  TYPE_INT = 7,\t\t\t///< Signed integer. Signed is considered less specific than unsigned in C\r\n  TYPE_UINT = 6,\t\t///< Unsigned integer\r\n  TYPE_BOOL = 5,\t\t///< Boolean\r\n  TYPE_CODE = 4,\t\t///< Data is actual executable code\r\n  TYPE_FLOAT = 3,\t\t///< Floating-point\r\n\r\n  TYPE_PTR = 2,\t\t\t///< Pointer data-type\r\n  TYPE_ARRAY = 1,\t\t///< Array data-type, made up of a sequence of ""element"" datatype\r\n  TYPE_STRUCT = 0\t\t///< Structure data-type, made up of component datatypes\r\n};\r\n```\r\nHere, we could annotate variables that are constant and belong to the type `TYPE_PTR` as they will be having a valid address(I believe so, it\'s definitely true in the case of string literals). As of now, as I said above, we don\'t have any examples of constant variable annotations with the current code in this PR. \r\n\r\nIf we annotate constant variables of the type `TYPE_PTR`, we can successfully have actions  `Show in at address` and `Xrefs` for such constants variables (that will include all string literals). \r\n@karliss I want your opinion on this. ', 'comment_created': datetime.datetime(2020, 7, 21, 18, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 458334537, 'comment_body': 'Sounds great. I am happy to seethat you were able to figure it out.', 'comment_created': datetime.datetime(2020, 7, 21, 19, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 458846853, 'comment_body': 'Implemented this.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}]","[{'commit_sha': 'e55e4ab002fc0ea8a0cb1fbdb1f6f037480eb576', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '509daf3cb3947efd4a428bb274b28fb4ffff4bfc', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1fcf4bb6a878251960a58dc02939dee14cc46e', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61e77fd073dcf766988ab5fa20a6b22c49710630', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '918cc04f7f76347e3b78c25190056e9628c88d46', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5fb4e96a0ee5d62073113f7793f912d272a08d', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7957c5a7cb35f8c90e2b6708d7c021a250aacb56', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6faf0d47729776a653023bda078656f533f2c4ec', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4cb15e14ed77700ca17abdf0633fbded2b89ddf', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db66b6f1517ba275b240d537cd4084d9eaa6b617', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86500ee06eab88d565cf266f6faa6c4531e89ddf', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46eb6621735341fe05cb8f8a7ecad6a7d8250d44', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24e70b4e63106f9b475a8678c3f7d09d8474ec6c', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc15df895b2e1518c59ff7f08ca36afe73162e81', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db687885e3108b6d3b02e3539dc2498e1c51b884', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49



458876229,Annotation for local variables," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**

- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)
- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)

**Detailed description**
This PR adds annotation for local variables and function parameters. The data we have for each variable is the location of the variable in the code and the name of the variable. This will suffice for implementing retype local variables action in the decompiler widget in Cutter.
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**

1. Compile this PR.
2. Fetch [PR #128](https://github.com/radareorg/r2ghidra-dec/pull/128) from r2ghidra-dec and compile it. 
3. Follow the test plan in the PR linked in step 2.
4. Check code.
<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,17375,https://api.github.com/repos/radareorg/radare2/pulls/17375,https://github.com/radareorg/radare2/pull/17375,closed,21,1,3,2,2,0,2,1,"[{'name': 'test-required'}, {'name': 'API'}]",2020-07-30 05:02:40+00:00,2020-07-31 11:53:35+00:00,111055.0,"1 day, 6:50:55",[],"[{'commit_sha': 'dc776e9f6804c68bdb6560208f819816b99ab9a1', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c34e6699f1833c010a05363b1156b079ea45bb5b', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
458879271,Annotator for local variables and function paramters,"<!--- Filling this template is mandatory -->

**Detailed description**

This PR implements an annotator for annotating local variables and function parameters. The annotator uses the color attribute in the XML for classifying variables as local variables and function parameters. 
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**
1. Fetch [PR #17375](https://github.com/radareorg/radare2/pull/17375)  from radare2 and compile it.
2. Load any function (test functions with local variables and functions without local variables).
3. Pipe the output of `pdgj~{}` to a file and open it in an editor of your choice.
4. Because of the order of annotations, syntax highlight annotator with come right after local variable anntoation.
5. Search for `""syntax_highlight"": ""function_parameter""` and `""syntax_highlight"": ""local_variable""`. Make sure that you are seeing the exact local variable that the syntax highlight points in the annotation above it. For example, it should like this.
```    
    {
      ""start"": 551,
      ""end"": 558,
      ""type"": ""function_parameter"",
      ""name"": ""arg_10h""
    },
    {
      ""start"": 551,
      ""end"": 558,
      ""type"": ""syntax_highlight"",
      ""syntax_highlight"": ""function_parameter""
    }, 
```
6. Then search for `""type"": ""function_parameter""` and `""type"": ""local_variable""` and make sure that you can see the corresponding syntax highlight annotation right after that.
<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,128,https://api.github.com/repos/rizinorg/rz-ghidra/pulls/128,https://github.com/rizinorg/rz-ghidra/pull/128,closed,1113,1,2,10,2,14,0,1,[],2020-07-30 05:12:35+00:00,2020-08-02 11:49:30+00:00,283015.0,"3 days, 6:36:55","[{'comment_id': 462859888, 'comment_body': 'Please do not make decisions based on color.', 'comment_created': datetime.datetime(2020, 7, 30, 9, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 462924643, 'comment_body': '```suggestion\r\n\telse if (color == ""var"")\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 11, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 462968649, 'comment_body': ""@karliss @thestr4ng3r  I had seen the decision that leads to color. For PR #124 , I have used info from here. https://github.com/thestr4ng3r/ghidra/blob/6c10f36f06468f866188cccf960c019779fb9028/Ghidra/Features/Decompiler/src/decompile/cpp/variable.cc#L452-L470\r\n\r\nIn it ([variable.cc](https://github.com/thestr4ng3r/ghidra/blob/6c10f36f06468f866188cccf960c019779fb9028/Ghidra/Features/Decompiler/src/decompile/cpp/variable.cc#L452-L470\r\n)), the same logic (if I didn't miss out anything) is used to classify local variables and parameters. This is the reason why I used color to classify a variable as a parameter and local variable. Have you seen examples where color is mistakenly annotated? "", 'comment_created': datetime.datetime(2020, 7, 30, 12, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 462972849, 'comment_body': 'Also note that in some cases, the XML has just the color of the variable e.g. ``` <variable color=""param"">param_1</variable> ```\r\nIn other cases where variable has an attribute `varref`, it is first checked to make sure that it\'s not a global variable or a constant variable.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 462977453, 'comment_body': 'Earlier, I forgot to add the following check, I have added it now.\r\n```\r\n\telse if (!varnode->getHigh()->isPersist() && (varnode->getHigh()->getSymbol() != (Symbol *)0))\r\n\t\tAnnotateLocalVariable(node, out);\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 12, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 463126943, 'comment_body': 'Do you know the place in `printc.cc` where these cases without `varref` like `<variable color=""param"">param_1</variable>` are emitted?', 'comment_created': datetime.datetime(2020, 7, 30, 16, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 463174279, 'comment_body': '@thestr4ng3r I\'m not sure if I understand the question. If you were asking to confirm if `<variable color=""param"">param_1</variable>` is given the color=""param"" from the location you pointed to, then yes it happens at the place [you linked.](https://github.com/thestr4ng3r/ghidra/blob/master/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc#L1560-L1563)', 'comment_created': datetime.datetime(2020, 7, 30, 17, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 463475661, 'comment_body': ""Yes, that is what I meant. Now the question is why exactly some variables don't get the `varref` attribute."", 'comment_created': datetime.datetime(2020, 7, 31, 8, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 463493589, 'comment_body': '@thestr4ng3r I had noticed that it doesn\'t get the `varref` attribute when in places where variables are declared. For reference, let\'s use [example_pdgx_pdg_output.zip](https://github.com/radareorg/r2ghidra-dec/files/5006086/example_pdgx_pdg_output.zip). In the case of local variable `pvVar2`, it\'s used in three places.\r\nDeclaration.\r\n`<type color=""type"" id=""0x80feab8523c497cf"">void</type>\r\n        <syntax></syntax>\r\n        <op>*</op>\r\n        <syntax></syntax>\r\n        <variable color=""var"">pvVar2</variable>`\r\nRest\r\n1. `<variable color=""var"" varref=""0x3c4"" opref=""0x27d"">pvVar2</variable>`\r\n2. `<variable color=""var"" varref=""0x3c4"" opref=""0x1d"">pvVar2</variable>`\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 9, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 463496262, 'comment_body': ""@thestr4ng3r Do you agree that the current code will work in cases where we have `varref`? From what I understand, in cases where we have varref, we are doing exactly what's done in [variable.cc(#L452-L470)](https://github.com/thestr4ng3r/ghidra/blob/6c10f36f06468f866188cccf960c019779fb9028/Ghidra/Features/Decompiler/src/decompile/cpp/variable.cc#L452-L470\r\n) when we have the check\r\n```\r\n\telse if (!varnode->getHigh()->isPersist() && (varnode->getHigh()->getSymbol() != (Symbol *)0))\r\n\t\tAnnotateLocalVariable(node, out);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 31, 9, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 463947344, 'comment_body': 'Ah I see. Yes it would work but using color is still conceptually wrong. Moreover it currently uses the printed text `node.child_value()` as the variable name which is only marginally better than just ""grepping"".\r\nWhat you do get however in the case of the declaration is the following:\r\n```\r\n<vardecl symref=""0x400001000000000d"">\r\n        <type color=""type"" id=""0x80feab8523c497cf"">void</type>\r\n        <syntax></syntax>\r\n        <op>*</op>\r\n        <syntax></syntax>\r\n        <variable color=""var"">pvVar2</variable>\r\n</vardecl>\r\n```\r\nSo you can get the true info about the symbol itself from the parent\'s `symref`:\r\n```\r\n<symbol name=""pvVar2"" id=""0x400001000000000d"" cat=""-1"">\r\n...\r\n```\r\nwhich also has the `cat` field indicating whether it is a parameter or regular variable.', 'comment_created': datetime.datetime(2020, 8, 1, 10, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 463966271, 'comment_body': ""Thanks a lot, this is really helpful. Here's what I am planning to do now.\r\nMake a Symbol_ID -> Symbol map.\r\n\r\n1. If varref exists, get Symbol from the varnode by `varnode->getHigh()->getSymbol()`.\r\n2. Otherwise, get symbol from the map.\r\n\r\nIn order to get the `symref`, I will do `node.parent()` which will give the `vardecl` node and then get the attribute `symref`."", 'comment_created': datetime.datetime(2020, 8, 1, 14, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 463968377, 'comment_body': 'Yep, that approach sounds good!', 'comment_created': datetime.datetime(2020, 8, 1, 14, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'thestr4ng3r', 'type': 'User'}, {'comment_id': 464038059, 'comment_body': '@thestr4ng3r @karliss I have pushed changes now.', 'comment_created': datetime.datetime(2020, 8, 2, 6, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}]","[{'commit_sha': '7bdc584c224594ab537d8644d78e430dd9d48771', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e7619d468af10e5d24f9d92ec4ab720af69dab7', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac829cb361059e1fb7ab524c99e596abc78bf36c', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '412a32efba5cc7881a571274ae98ea46745bcb53', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bc0bc0e4e4e6ecda9491587ee1f3be41add6676', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56cf1ffac334778307a3c46cc8ff779546ee1ec', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10b6ea3ccac6680ff9624904aae5035be4edf3f8', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a00327d52ecd7044543d6414517e82264efb54d', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3133433c2b355507509005d9d1c2ddcab590b93b', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1b215a308aeb779b32073596774c9fdf6f9b052', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49

460176677,API for checking if an annotation is a reference or function variable.," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)
- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)

**Detailed description**

This PR implements the following two functions. Read the documentation below.
```
/**
 * is_annotation_reference() - Checks if the specified annotation is a reference.
 * @annotation: Pointer to an annotation.
 * 
 * This function recognizes the type of the specified annotation and returns true if its
 * type is any of the following three: R_CODE_ANNOTATION_TYPE_GLOBAL_VARIABLE,
 * R_CODE_ANNOTATION_TYPE_CONSTANT_VARIABLE, R_CODE_ANNOTATION_TYPE_FUNCTION_NAME
 * 
 * Return: Returns true if the specified annotation is a reference.
 */
R_API bool is_annotation_reference(RCodeAnnotation *annotation);
/**
 * is_annotation_variable() - Checks if the specified annotation is a function variable.
 * @annotation: Pointer to an annotation.
 * 
 * This function recognizes the type of the specified annotation and returns true if its
 * type is any of the following two: R_CODE_ANNOTATION_TYPE_LOCAL_VARIABLE,
 * R_CODE_ANNOTATION_TYPE_FUNCTION_PARAMETER
 * 
 * Return: Returns true if the specified annotation is a function variable.
 */
R_API bool is_annotation_variable(RCodeAnnotation *annotation);
```
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**
1. Check code.
2. Fetch and compile [Cutter PR #2352](https://github.com/radareorg/cutter/pull/2352) after compiling this PR. That PR uses this API. So you can check if it's working correctly or not.
<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,17386,https://api.github.com/repos/radareorg/radare2/pulls/17386,https://github.com/radareorg/radare2/pull/17386,closed,31,1,2,4,1,14,1,1,[{'name': 'API'}],2020-07-31 14:04:02+00:00,2020-08-03 14:57:05+00:00,262383.0,"3 days, 0:53:03","[{'comment_id': 463636994, 'comment_body': ""Please don't invent your own documentation comment style. If you use doxygen style comments do so consistently. They are not only for human reading but also consumption by tools. See the documentation https://www.doxygen.nl/manual/index.html"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 463641547, 'comment_body': 'Radare2 uses this style https://www.kernel.org/doc/html/v4.16/doc-guide/kernel-doc.html#how-to-format-kernel-doc-comments\r\nI have been told to use this and all functions in `r_annotated_code.h` are documented using this style.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 463642474, 'comment_body': 'See here: https://github.com/radareorg/radare2/blob/master/libr/include/r_util/r_annotated_code.h#L61', 'comment_created': datetime.datetime(2020, 7, 31, 14, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 463684272, 'comment_body': ""Is it written anywhere r2 documentation that it uses this style? If it I am fine with that, but I haven't seen it used anywhere except r_annotated_code."", 'comment_created': datetime.datetime(2020, 7, 31, 15, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 463685471, 'comment_body': 'This https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md claims that r2 uses doxygen C-style comments.', 'comment_created': datetime.datetime(2020, 7, 31, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 463693924, 'comment_body': ""@ITAYC0HEN @thestr4ng3r I'm not sure when this was decided. See this comment by @ITAYC0HEN https://github.com/radareorg/radare2/pull/16939#pullrequestreview-417269610 It was discussed when I was working on #16939 ."", 'comment_created': datetime.datetime(2020, 7, 31, 15, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 464190019, 'comment_body': 'Doxygen is the way to go.', 'comment_created': datetime.datetime(2020, 8, 3, 4, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'XVilka', 'type': 'User'}, {'comment_id': 464361274, 'comment_body': 'Please consider renaming these functions. Most R_API functions use common prefix, this helps avoiding naming conflict and improves discoverability. Maybe `r_annotation_is_reference` and `r_annotation_is_variable`.', 'comment_created': datetime.datetime(2020, 8, 3, 11, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464367803, 'comment_body': 'I will rename them.', 'comment_created': datetime.datetime(2020, 8, 3, 11, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 464383344, 'comment_body': '@karliss I have renamed functions. If you are fine with the code now, please merge it. I think [PR #2352](https://github.com/radareorg/cutter/pull/2352) Cutter can get merged tonight. Since it uses the new API implemented in this PR, I want this to get merged first.\r\n\r\nI will send a separate PR with documentation using Doxygen tonight, but I think it can be another PR as it could take more time to review.', 'comment_created': datetime.datetime(2020, 8, 3, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 464401062, 'comment_body': ""shouldn't it be `@param annotation` ?"", 'comment_created': datetime.datetime(2020, 8, 3, 13, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ITAYC0HEN', 'type': 'User'}, {'comment_id': 464401712, 'comment_body': 'Should you include the name of the function in the docs? ""r_annotation_is_variable() ""? Also, if you include this, the signature is wrong as it receive parameters', 'comment_created': datetime.datetime(2020, 8, 3, 13, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ITAYC0HEN', 'type': 'User'}, {'comment_id': 464419698, 'comment_body': 'This is how it is (if I understand correctly) in kernel-docs https://www.kernel.org/doc/html/v4.16/doc-guide/kernel-doc.html#how-to-format-kernel-doc-comments\n\n', 'comment_created': datetime.datetime(2020, 8, 3, 13, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 464420407, 'comment_body': ""This is how it is in Kernel-doc, if I understand correctly. As I said, I'm going to update this to Doxygen, in another PR. So let's not worry about documentation for now."", 'comment_created': datetime.datetime(2020, 8, 3, 13, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}]","[{'commit_sha': 'c8c81b214bd6d533909126e2e1476c98119e393a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6912ddd51c463ed0d066a531e1ebf74cf91a0557', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfbaef6fe2695aa147988d00b8735a6216961c3e', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80979162b78f21ef9da2f9460238f9359807dfea', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
462232537,Update docs in annotate code API ," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)
- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)

**Detailed description**
Earlier, I had used kernel-docs documentation style for documenting new API functions created for the annotations in the decompiler. This PR replaces these documentations by Doxygen. 
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**
1. Make sure this compiles properly.
2. Read the documentation and make sure nothing is wrong.
<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,17397,https://api.github.com/repos/radareorg/radare2/pulls/17397,https://github.com/radareorg/radare2/pull/17397,closed,97,110,2,11,4,19,1,1,[{'name': 'API'}],2020-08-03 15:05:44+00:00,2020-08-05 14:54:48+00:00,172144.0,"1 day, 23:49:04","[{'comment_id': 464491056, 'comment_body': ""Better place the brief before full description so that it can more easily be read top to bottom. You also don't need to duplicate the common part. Same applies to other functions.\r\n\r\nIf necessary run doxygen locally to get a better feeling of how output looks."", 'comment_created': datetime.datetime(2020, 8, 3, 15, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464501044, 'comment_body': 'Please document the element type inside the RVector. In a language with proper generic support it would be obvious but not in C.', 'comment_created': datetime.datetime(2020, 8, 3, 15, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464502480, 'comment_body': 'Document the element type inside RPVector. Also typo there is a typo it is not RPVecrtor.', 'comment_created': datetime.datetime(2020, 8, 3, 15, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464510226, 'comment_body': 'In comments don\'t describe how, describe what the code does. ""Creates an RPVector and inserts pointers"" is more of literal description of code written. The brief part should be sufficient. in this case. Range endpoint behavior is already described in parameter description.', 'comment_created': datetime.datetime(2020, 8, 3, 16, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464515591, 'comment_body': 'There is no need to go into implementation details like ""added to code->annotations"" which is RVector<RCodeAnnotation>"" unless it affects the way this function used. The whole point of this function is to hide implementation detail like this so that it in future it can be easily replaced with different container or multiple of them if necessary to answer queries about annotated code. For example it might replaced with a specialized tree structure which allows implementing `r_annotated_code_annotations_in` more efficiently. ', 'comment_created': datetime.datetime(2020, 8, 3, 16, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464854841, 'comment_body': ""I have removed the parts that say the same thing twice. I think it will be better if we keep the detailed description first and then have brief description and information regarding `parameters` and `return`.  This way, we can see the brief and parameters together. I think a detailed description won't be required every time to understand what the function does, so this is probably more readable. Also, this style is followed by many functions in other places."", 'comment_created': datetime.datetime(2020, 8, 4, 7, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 464854926, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 464854957, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 464855137, 'comment_body': 'Thanks, I have updated this.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 464884013, 'comment_body': '\\struct tag is only necessary in case of detached documentation. It is unnecessary when the comment is immediately before the thing it documents.', 'comment_created': datetime.datetime(2020, 8, 4, 8, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464888138, 'comment_body': 'Information like this  (returned RVector element type)  is something that you could have included in the `@return` description, but current approach is also fine.', 'comment_created': datetime.datetime(2020, 8, 4, 8, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464911011, 'comment_body': 'When mentioning other types like `RVectorFree` you can mark them using `@ref` like this `@ref RVectorFree`. It will cause doxygen to insert a link to the documentation of corresponding element.\r\n\r\n![Screenshot from 2020-08-04 12-06-13](https://user-images.githubusercontent.com/7101031/89276109-e751a400-d64b-11ea-97dd-029c12974f97.png)\r\n![Screenshot from 2020-08-04 12-12-39](https://user-images.githubusercontent.com/7101031/89276113-e7ea3a80-d64b-11ea-8bdd-cda882c78182.png)\r\n', 'comment_created': datetime.datetime(2020, 8, 4, 9, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464912598, 'comment_body': 'Removed struct tag.', 'comment_created': datetime.datetime(2020, 8, 4, 9, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 464955670, 'comment_body': ""There are two arguments for having brief before more detailed description:\r\n* That's the order Doxygen and other tools will display it. `By default the brief descriptions become the first sentence of the detailed descriptions`.  Moving it to the end means that it becomes less readable as single text.\r\n* Typical way of marking end of brief and start of detailed description is using an empty line. Some tools like like VSCode get confused if it isn't in this order and ignores everything before brief.\r\n\r\n> Also, this style is followed by many functions in other places.\r\n\r\nBy searching for `[@\\\\]brief` I was able to find only one such function in r2 which wasn't just written by you - `parse_attr_value`. And even in that case it was less of detailed description more of TODO comment noting that function is unfinished."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464960714, 'comment_body': ""In most cases Doxygen treats `//!` `///` `/**` and `/*!` almost identically so it's a question of chosen style. Whatever style is chosen use it consistently. Everywhere else in this file you used `/**` version so you should use the same for this enum instead of `//!` or `/*!`."", 'comment_created': datetime.datetime(2020, 8, 4, 10, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'karliss', 'type': 'User'}, {'comment_id': 464963017, 'comment_body': '@karliss I saw such examples somewhere and was also sure that I have seen it in radare2. My mistake I said many! Now I understand the problems with this and I will change it as you suggested.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 465552454, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 5, 8, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 465552493, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 5, 8, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 465552587, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 5, 8, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}]","[{'commit_sha': '3528bdedc58ed8c3c840aba82f431c7d316cbcb8', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b53ae5c287aaf44f786d3c26e878550a12d25186', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36967a4397bb6e2d4fc1f5c28674eda66357fe20', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e2ed6f3b8d555cc26e6981a4f463a2a93ec873', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b08c788090723e850c5e2385f0041f202c42b759', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df57764c96c3c2de47bc560afdd07103ea29253', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9199037ccda81dd9345eff4567665d0090db7c0c', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4135cc91a94e012756dd89557a8a97382502a75', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ef798625e00ddbf0e307cdcf4ef41c04ee5cb2d', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '239c5eb83ffab50d02e917b826b0fe65b79e3301', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c23366fb0a379d79fff63b4a4c159b865c91db', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
462912086,Unit tests for annotated code API," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)
- [x] I've added tests that prove my fix is effective or that my feature works (if possible)
- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)

**Detailed description**
This PR implements unit tests for the following API:
1. `r_annotation_is_reference()`
2. `r_annotation_is_variable()`
3. `r_annotation_free()`
4. JSON printing for context-related annotations.
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**
1. Run `make unit` from the test directory and make sure tests pass.
2. Check code.
3. Try to see if I should implement tests for anything else related to `RAnnotatedCode`.

<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,17403,https://api.github.com/repos/radareorg/radare2/pulls/17403,https://github.com/radareorg/radare2/pull/17403,closed,100,0,1,4,0,0,1,1,[{'name': 'r2r'}],2020-08-04 17:47:38+00:00,2020-08-05 19:49:00+00:00,93682.0,"1 day, 2:01:22",[],"[{'commit_sha': '3785a3c799a4cb782b7f73e1107124ce5219c01c', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '943cb9180844bb2a6799d14049cb9d9042c9a354', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f716d5593611bc30e8310b6b739f0ae63c1caafd', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd35b7ce07d29518bbcbe380c4a87d5cfc23fc44d', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49

465134426,New annotations and API functions for the decompiler," <!-- Filling this template is mandatory -->

**Your checklist for this pull request**
- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository
- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)
- [x] I've added tests that prove my fix is effective or that my feature works (if possible)
- [] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)

**Detailed description**
As part of the [Improving Decompiler Widget](https://github.com/orgs/radareorg/projects/1) project, many new types of annotations and new API functions have been implemented by the following PRs to the `decompiler-refactoring` branch. This PR is for merging these to the master.
1. #17204 - Annotation for function name 
2. #17281 - Annotations for Constant Variables and Global Variables for the decompiler
3. #17375 - Annotation for local variables
4. #17386 - API for checking if an annotation is a reference or function variable
5. #17397 - Update docs in annotate code API
6. #17403 - Unit tests for annotated code API
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**
1. Go through the linked PRs in order to get an idea of what has been done.
2. Compile, and make sure it compiles properly.
3. Run unit tests. New unit tests are testing all the new API functions and annotations already.
3. Fetch `decompiler-refactoring` branch from the r2ghidra-dec and use the command `pdgj` for the JSON output. See if it's working as expected.
<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->

...

**Closing issues**

<!-- put ""closes #XXXX"" in your comment to auto-close the issue that your PR fixes (if any). -->

...
",True,17429,https://api.github.com/repos/radareorg/radare2/pulls/17429,https://github.com/radareorg/radare2/pull/17429,closed,275,94,5,8,3,3,2,1,"[{'name': 'API'}, {'name': 'r2r'}]",2020-08-09 10:28:05+00:00,2020-08-10 10:40:17+00:00,87132.0,"1 day, 0:12:12","[{'comment_id': 467570666, 'comment_body': 'Can you make this LOC shorter by splitting the conditions in new lines? Had to enable line-wrap here', 'comment_created': datetime.datetime(2020, 8, 9, 11, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ITAYC0HEN', 'type': 'User'}, {'comment_id': 467598453, 'comment_body': '@ITAYC0HEN Can you tell me how I can do that? When I tried it earlier, the coding style checker was telling me to not split it into multiple lines.', 'comment_created': datetime.datetime(2020, 8, 9, 15, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'NirmalManoj', 'type': 'User'}, {'comment_id': 467606080, 'comment_body': ""Then I have no idea :)\r\nThat's only a small nice-to-have, if it causes a problem then no worries, you can skip this request"", 'comment_created': datetime.datetime(2020, 8, 9, 17, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ITAYC0HEN', 'type': 'User'}]","[{'commit_sha': 'fa1312c50cd9a4cd0b685202b2970e43b9875518', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9bf1063a25aec64b8c0cb3bd4321ddc4a2ac7a5', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59648f1d19e0571acb93a5ea9d4ff5f52c980ca6', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc3ba96788301092e03cf2bf62d49c7f261e179', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ab30a53c04878440d99dc5a8e348b82ac822e8a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c4689b1538fb18f311ef72f7cd524fdc137a648', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '649486f82a65b736cd8ae44a201f6a4bb90e491a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b501d2d4c030e1e4e7de955f32d16cacaf7e03e0', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49
465439846,Annotators for new annotations,"<!--- Filling this template is mandatory -->

**Detailed description**
As part of the [Improving Decompiler Widget](https://github.com/orgs/radareorg/projects/1) project, many new types of annotations have been added. This was merged to radare2 by [PR #17429](https://github.com/radareorg/radare2/pull/17429).

The annotators for these new annotations were implemented and merged to the `decompiler-refactoring` branch by the following PRs:
1. #123 - Function name annotation annotator implemented.
2. #124 - Annotator for constant and global variables.
3. #128 - Annotator for local variables and function parameters.
<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->

...

**Test plan**
1. Fetch the master of radare2 and compile.
2. Compile this PR.
3. Run tests in `r2ghidra-dec` and make sure the new tests are passing. New tests added tests all the annotators that were implemented by the linked PRs.
4. Run `pdgj~{}` on some small executables to see if the output is as expected.
5. Have a look at the code.
6. If you want, you can fetch the `decompiler-refactoring` branch in Cutter and test all the new actions in the decompiler context menu. But I don't think that is necessary.
<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->
",True,129,https://api.github.com/repos/rizinorg/rz-ghidra/pulls/129,https://github.com/rizinorg/rz-ghidra/pull/129,closed,1811,12,3,4,1,0,0,1,[],2020-08-10 11:25:01+00:00,2020-08-11 19:56:02+00:00,117061.0,"1 day, 8:31:01",[],"[{'commit_sha': '060fe9495685d6ba19e787663a9b2e06bf0fca88', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a15722a72b98f3b34bf3af20807b9b1456fa776a', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba9ba52243bbf5df4849bcf36b86534ddbe225b', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0374bcb70b5a9d6abca2a895e06e2d5d41545a8d', 'committer_username': 'NirmalManoj', 'committer_name': 'Nirmal Manoj', 'committer_email': 'nimmumanoj@gmail.com', 'commit_date': datetime.datetime(2016, 4, 16, 13, 36, 5, tzinfo=datetime.timezone.utc)}]",Nirmal Manoj,18501167,nimmumanoj@gmail.com,User,,29,,2,49






Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
4869294,radare2,radareorg/radare2,C,2956,20219,491,1122,32325,856,42,22,"[{'id': 465134426, 'number': 17429, 'closed': datetime.datetime(2020, 8, 10, 10, 40, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 10, 28, 5, tzinfo=datetime.timezone.utc), 'time_taken': 87132.0, 'time_delta': '1 day, 0:12:12', 'additions': 275, 'deletions': 94, 'state': 'closed'}, {'id': 462912086, 'number': 17403, 'closed': datetime.datetime(2020, 8, 5, 19, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 17, 47, 38, tzinfo=datetime.timezone.utc), 'time_taken': 93682.0, 'time_delta': '1 day, 2:01:22', 'additions': 100, 'deletions': 0, 'state': 'closed'}, {'id': 462232537, 'number': 17397, 'closed': datetime.datetime(2020, 8, 5, 14, 54, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 15, 5, 44, tzinfo=datetime.timezone.utc), 'time_taken': 172144.0, 'time_delta': '1 day, 23:49:04', 'additions': 97, 'deletions': 110, 'state': 'closed'}, {'id': 460176677, 'number': 17386, 'closed': datetime.datetime(2020, 8, 3, 14, 57, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 14, 4, 2, tzinfo=datetime.timezone.utc), 'time_taken': 262383.0, 'time_delta': '3 days, 0:53:03', 'additions': 31, 'deletions': 1, 'state': 'closed'}, {'id': 458876229, 'number': 17375, 'closed': datetime.datetime(2020, 7, 31, 11, 53, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 5, 2, 40, tzinfo=datetime.timezone.utc), 'time_taken': 111055.0, 'time_delta': '1 day, 6:50:55', 'additions': 21, 'deletions': 1, 'state': 'closed'}, {'id': 449094545, 'number': 17281, 'closed': datetime.datetime(2020, 7, 18, 17, 49, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 20, 22, 40, tzinfo=datetime.timezone.utc), 'time_taken': 336398.0, 'time_delta': '3 days, 21:26:38', 'additions': 27, 'deletions': 6, 'state': 'closed'}, {'id': 444167369, 'number': 17204, 'closed': datetime.datetime(2020, 7, 10, 5, 37, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 19, 1, 42, tzinfo=datetime.timezone.utc), 'time_taken': 556567.0, 'time_delta': '6 days, 10:36:07', 'additions': 31, 'deletions': 1, 'state': 'closed'}, {'id': 422068798, 'number': 16939, 'closed': datetime.datetime(2020, 5, 27, 3, 54, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 22, 17, 53, 53, tzinfo=datetime.timezone.utc), 'time_taken': 381639.0, 'time_delta': '4 days, 10:00:39', 'additions': 868, 'deletions': 2, 'state': 'closed'}, {'id': 387623731, 'number': 16204, 'closed': datetime.datetime(2020, 3, 13, 8, 48, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 7, 2, 33, tzinfo=datetime.timezone.utc), 'time_taken': 6351.0, 'time_delta': '1:45:51', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
196547485,rz-ghidra,rizinorg/rz-ghidra,C++,87,811,26,30,354,52,13,4,"[{'id': 472717895, 'number': 132, 'closed': datetime.datetime(2020, 8, 25, 11, 4, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 19, 24, 48, tzinfo=datetime.timezone.utc), 'time_taken': 56378.0, 'time_delta': '15:39:38', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 465439846, 'number': 129, 'closed': datetime.datetime(2020, 8, 11, 19, 56, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 11, 25, 1, tzinfo=datetime.timezone.utc), 'time_taken': 117061.0, 'time_delta': '1 day, 8:31:01', 'additions': 1811, 'deletions': 12, 'state': 'closed'}, {'id': 458879271, 'number': 128, 'closed': datetime.datetime(2020, 8, 2, 11, 49, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 5, 12, 35, tzinfo=datetime.timezone.utc), 'time_taken': 283015.0, 'time_delta': '3 days, 6:36:55', 'additions': 1113, 'deletions': 1, 'state': 'closed'}, {'id': 449096201, 'number': 124, 'closed': datetime.datetime(2020, 7, 26, 11, 38, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 20, 26, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1005130.0, 'time_delta': '11 days, 15:12:10', 'additions': 650, 'deletions': 7, 'state': 'closed'}, {'id': 444168498, 'number': 123, 'closed': datetime.datetime(2020, 7, 11, 8, 30, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 19, 7, 18, tzinfo=datetime.timezone.utc), 'time_taken': 652974.0, 'time_delta': '7 days, 13:22:54', 'additions': 56, 'deletions': 12, 'state': 'closed'}, {'id': 440492009, 'number': 121, 'closed': datetime.datetime(2020, 6, 29, 10, 12, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 9, 54, 12, tzinfo=datetime.timezone.utc), 'time_taken': 260274.0, 'time_delta': '3 days, 0:17:54', 'additions': 48, 'deletions': 3, 'state': 'closed'}, {'id': 434040763, 'number': 118, 'closed': datetime.datetime(2020, 6, 13, 20, 7, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 18, 34, 21, tzinfo=datetime.timezone.utc), 'time_taken': 5586.0, 'time_delta': '1:33:06', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 431985179, 'number': 115, 'closed': datetime.datetime(2020, 6, 9, 18, 39, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 18, 22, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1041.0, 'time_delta': '0:17:21', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 431533981, 'number': 114, 'closed': datetime.datetime(2020, 6, 12, 11, 6, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 4, 49, 32, tzinfo=datetime.timezone.utc), 'time_taken': 281793.0, 'time_delta': '3 days, 6:16:33', 'additions': 132, 'deletions': 146, 'state': 'closed'}, {'id': 425433012, 'number': 112, 'closed': datetime.datetime(2020, 6, 7, 18, 31, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 30, 8, 11, 34, tzinfo=datetime.timezone.utc), 'time_taken': 728411.0, 'time_delta': '8 days, 10:20:11', 'additions': 132, 'deletions': 146, 'state': 'closed'}, {'id': 422070662, 'number': 107, 'closed': datetime.datetime(2020, 5, 27, 9, 4, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 22, 17, 58, 44, tzinfo=datetime.timezone.utc), 'time_taken': 399935.0, 'time_delta': '4 days, 15:05:35', 'additions': 6, 'deletions': 405, 'state': 'closed'}]"
208782799,r2retdec,radareorg/r2retdec,C++,24,122,11,7,269,13,9,2,"[{'id': 436257450, 'number': 17, 'closed': datetime.datetime(2020, 8, 18, 10, 39, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 6, 28, 14, tzinfo=datetime.timezone.utc), 'time_taken': 5285481.0, 'time_delta': '61 days, 4:11:21', 'additions': 42, 'deletions': 58, 'state': 'closed'}, {'id': 424909899, 'number': 16, 'closed': datetime.datetime(2020, 5, 30, 16, 42, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 6, 20, 47, tzinfo=datetime.timezone.utc), 'time_taken': 123707.0, 'time_delta': '1 day, 10:21:47', 'additions': 6, 'deletions': 593, 'state': 'closed'}]"

