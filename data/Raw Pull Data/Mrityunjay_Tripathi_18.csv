pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
373298687,[MRG] adding poisson nll loss function,"Same as #2167 
No changes made.
I made this new PR because I screwed my master branch and reforked the repository. :(",True,2196,https://api.github.com/repos/mlpack/mlpack/pulls/2196,https://github.com/mlpack/mlpack/pull/2196,closed,336,0,5,21,21,71,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-02-10 18:59:45+00:00,2020-07-04 10:16:39+00:00,12496614.0,"144 days, 15:16:54","[{'comment_id': 379081943, 'comment_body': 'Missing stop at the end, this applies to the other descriptions as well.', 'comment_created': datetime.datetime(2020, 2, 13, 19, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 379082446, 'comment_body': 'Looking at the parameter description, should we call this `reduction` instead of `reduce`?', 'comment_created': datetime.datetime(2020, 2, 13, 19, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 379389236, 'comment_body': 'ok.', 'comment_created': datetime.datetime(2020, 2, 14, 11, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 379832614, 'comment_body': 'space between Negative and Log', 'comment_created': datetime.datetime(2020, 2, 15, 13, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 379832923, 'comment_body': 'I think you can avoid using `lossThis` variable and simply add to the totalLoss', 'comment_created': datetime.datetime(2020, 2, 15, 13, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 379833443, 'comment_body': 'Missing quotes around sum. I think you should remove all the quotes. ', 'comment_created': datetime.datetime(2020, 2, 15, 14, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 379834501, 'comment_body': 'Yup! I did this to make things a little clear (since not a big deal for space or time complexity).', 'comment_created': datetime.datetime(2020, 2, 15, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 380363949, 'comment_body': ""Also, should we talk about using true/false, since it's a boolean?"", 'comment_created': datetime.datetime(2020, 2, 17, 20, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 380364684, 'comment_body': 'The extra `()` are redundant.', 'comment_created': datetime.datetime(2020, 2, 17, 21, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 392637882, 'comment_body': '`Poisson` is a proper noun, should be capitalized', 'comment_created': datetime.datetime(2020, 3, 15, 3, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392637906, 'comment_body': 'I think we can out this on the same line as the constructor', 'comment_created': datetime.datetime(2020, 3, 15, 3, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392637919, 'comment_body': '`Boolean value that determines`', 'comment_created': datetime.datetime(2020, 3, 15, 3, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392637999, 'comment_body': 'We can remove a lot of the braces here.', 'comment_created': datetime.datetime(2020, 3, 15, 3, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 394198918, 'comment_body': ""You'll have to align these parameters, and put each in a new line (besides the first)"", 'comment_created': datetime.datetime(2020, 3, 18, 9, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 394200015, 'comment_body': 'Please put `loss = ...` on the next line from the condition', 'comment_created': datetime.datetime(2020, 3, 18, 9, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 394200133, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2020, 3, 18, 9, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 394200262, 'comment_body': 'Same as above. There are other places to do this too', 'comment_created': datetime.datetime(2020, 3, 18, 9, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 394823970, 'comment_body': 'I think you missed doing this?', 'comment_created': datetime.datetime(2020, 3, 19, 7, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 394828732, 'comment_body': 'This should be 4 spaces. See https://github.com/mlpack/mlpack/wiki/DesignGuidelines#constructor-initialization-lists', 'comment_created': datetime.datetime(2020, 3, 19, 7, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 394829002, 'comment_body': 'This should be 4 spaces. See https://github.com/mlpack/mlpack/wiki/DesignGuidelines#method-declarations', 'comment_created': datetime.datetime(2020, 3, 19, 7, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 396345410, 'comment_body': ""`Boolean value that determines whether to include Stirling's approximation term`  I think this was a better description"", 'comment_created': datetime.datetime(2020, 3, 23, 10, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 397166478, 'comment_body': 'In reference to #2329, we should probably serialize the parameters here? I missed this in the review', 'comment_created': datetime.datetime(2020, 3, 24, 13, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 397226316, 'comment_body': ""Though I have made the changes but I couldn't understand how serializing parameters in loss functions help?"", 'comment_created': datetime.datetime(2020, 3, 24, 15, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 397279991, 'comment_body': ""If someone were to choose to serialize a loss function, then it seems intuitive that when they reload the loss function it's behavior remains intact."", 'comment_created': datetime.datetime(2020, 3, 24, 16, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 397281691, 'comment_body': '```suggestion\r\n    Archive& ar ,\r\n```', 'comment_created': datetime.datetime(2020, 3, 24, 16, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 397303119, 'comment_body': 'oops :(', 'comment_created': datetime.datetime(2020, 3, 24, 16, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 397344491, 'comment_body': 'I mean I understood that but thought that we only need to save weights and the optimizer state. Anyway, this makes sense now.', 'comment_created': datetime.datetime(2020, 3, 24, 17, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 397590993, 'comment_body': ""Hmm,  Hey @mrityunjay-tripathi, Could you explain why we need to do this, I might be missing something. I don't think this is needed here. \r\nRefer : [1](https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/ann/loss_functions/mean_squared_logarithmic_error.hpp), [2](https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/ann/loss_functions/kl_divergence.hpp), [3](https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/ann/loss_functions/mean_squared_error.hpp)"", 'comment_created': datetime.datetime(2020, 3, 25, 3, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 397591508, 'comment_body': 'Could you also change `/* ar */` to `ar`, It might cause problems on older compilers (I think). Thanks.', 'comment_created': datetime.datetime(2020, 3, 25, 3, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 397591654, 'comment_body': ""Hey, I don't think this is needed, Let me know what you think. Thanks a lot."", 'comment_created': datetime.datetime(2020, 3, 25, 3, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 397592053, 'comment_body': 'What do you think about using `Logarithmic in nature` instead of `log(x)`', 'comment_created': datetime.datetime(2020, 3, 25, 3, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 397592627, 'comment_body': ""I don't think this line is needed as well since we are using assignment operator below. Armadillo we automatically allocate its size. Hence I feel this is redundant."", 'comment_created': datetime.datetime(2020, 3, 25, 3, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 397593091, 'comment_body': ""The style guideline suggests that if we use single statements with `if` we don't need to use the brackets but I think it will be much cleaner in the next line. If you want to reduce code further you can do this : \r\n`return reduction ? arma::accu(loss) / loss.n_elem : arma::accu(loss);`"", 'comment_created': datetime.datetime(2020, 3, 25, 3, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 397593300, 'comment_body': 'Same as above. I would prefer the statements in different lines. Most of the code-base follows that.', 'comment_created': datetime.datetime(2020, 3, 25, 3, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 397594328, 'comment_body': ""Do you mind having a single test case that tests both `PoissonNLLossTest` and `PoissonNLLossTestFull`.\r\nYou could use separate variables like `module1` and `module2`. I think that is what is done throughout `ann`. Aside from the layers that I added tests for, I don't think we have separate test for same functionalities. Also Could you add a test with varying reduction as well.\r\nThanks 👍."", 'comment_created': datetime.datetime(2020, 3, 25, 3, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 397594569, 'comment_body': '*will', 'comment_created': datetime.datetime(2020, 3, 25, 3, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 397604831, 'comment_body': 'I used [negative_log_likelihood.hpp](https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/ann/loss_functions/negative_log_likelihood.hpp) as a template for this. Though this seems redundant but @zoq can give more insight into this.', 'comment_created': datetime.datetime(2020, 3, 25, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 397604952, 'comment_body': 'Hmm... I will make the changes in the next commit.', 'comment_created': datetime.datetime(2020, 3, 25, 4, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 397606708, 'comment_body': ""Though I don't know how armadillo handles this but from experience with MATLAB I think initializing a vector/matrix with a predefined shape is a better practice."", 'comment_created': datetime.datetime(2020, 3, 25, 4, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 397607509, 'comment_body': 'Ok. I will make the changes.', 'comment_created': datetime.datetime(2020, 3, 25, 4, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 397608205, 'comment_body': 'Hmmm... Adding more tests.', 'comment_created': datetime.datetime(2020, 3, 25, 4, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 437532341, 'comment_body': 'If I am not mistaken we should write the full path here:\r\n```suggestion\r\n * @file methods/ann/loss_functions/poisson_nll_loss.hpp\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 15, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 437534120, 'comment_body': ""Shouldn't we write something like\r\n```suggestion\r\n * Definition of the PoissonNLLLoss class.\r\n```\r\nsince `Poisson Negative Log Likelihood` isn't exactly the class name?"", 'comment_created': datetime.datetime(2020, 6, 9, 15, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 437536815, 'comment_body': 'I am not sure we should start each word with a capital.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 437541481, 'comment_body': 'Doxygen understands formulas in LaTeX:\r\n```suggestion\r\n   * @param logInput If true the loss is computed as \\f$ \\exp(input) - target \\cdot input \\f$,\r\n   *        if false then the loss is \\f$ input - target \\cdot \\log(input + eps) \\f$.\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 15, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 437544819, 'comment_body': 'I suggest to replace `logInput`, `full`, and `eps` by a couple of words.', 'comment_created': datetime.datetime(2020, 6, 9, 16, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 437546027, 'comment_body': 'Perhaps it should be\r\n```suggestion\r\n                 const const typename InputType::elem_type eps = 1e-08,\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 16, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 437546288, 'comment_body': 'See the comment above.', 'comment_created': datetime.datetime(2020, 6, 9, 16, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 437550450, 'comment_body': ""1. Where did the `size()` function come from? I think you should specify the namespace.\r\n2. You don't need to resize the matrix. It was already mentioned."", 'comment_created': datetime.datetime(2020, 6, 9, 16, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 437566128, 'comment_body': ""Perhaps it's a good idea to check if `eps >= 0` here."", 'comment_created': datetime.datetime(2020, 6, 9, 16, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 437818276, 'comment_body': 'Hmm.. `size()` should be actually `arma::size()`.\r\nI think it should be like this -\r\n```cpp\r\nInputType loss(arma::size(input));\r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 2, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 437819148, 'comment_body': 'Yeah. I will add that in next commit.', 'comment_created': datetime.datetime(2020, 6, 10, 2, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 437828801, 'comment_body': 'Seems like no need of capitalization.', 'comment_created': datetime.datetime(2020, 6, 10, 2, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 437829906, 'comment_body': 'Do you mean more descriptive comment or more descriptive variable name? Can you clarify, please?', 'comment_created': datetime.datetime(2020, 6, 10, 2, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 437830942, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 10, 2, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438000833, 'comment_body': ""I meant the comments. I had to look at the constructor's comment several times in order to read the meaning of the variables."", 'comment_created': datetime.datetime(2020, 6, 10, 9, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 438021184, 'comment_body': 'Ok. Sure.\r\nThanks for the clarification.', 'comment_created': datetime.datetime(2020, 6, 10, 10, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 446885757, 'comment_body': ""Shouldn't it be\r\n```suggestion\r\n#ifndef MLPACK_METHODS_ANN_LOSS_FUNCTIONS_POISSON_NLL_LOSS_HPP\r\n#define MLPACK_METHODS_ANN_LOSS_FUNCTIONS_POISSON_NLL_LOSS_HPP\r\n```\r\n?"", 'comment_created': datetime.datetime(2020, 6, 29, 11, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 446937683, 'comment_body': '```suggestion\r\n#ifndef MLPACK_METHODS_ANN_LOSS_FUNCTIONS_POISSON_NLL_LOSS_IMPL_HPP\r\n#define MLPACK_METHODS_ANN_LOSS_FUNCTIONS_POISSON_NLL_LOSS_IMPL_HPP\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 12, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 446943433, 'comment_body': 'I was wondering how did you get these values? Did you compare them with e.g. tensorflow?', 'comment_created': datetime.datetime(2020, 6, 29, 12, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 446967645, 'comment_body': 'Yes. I compared them to pytorch.', 'comment_created': datetime.datetime(2020, 6, 29, 13, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 447901598, 'comment_body': 'Why does each input should be <= 1?', 'comment_created': datetime.datetime(2020, 6, 30, 18, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 447902688, 'comment_body': ""I don't think we need to check it each time. I guess the input could be > 1 and if it actually was < 0, then the result would be NAN."", 'comment_created': datetime.datetime(2020, 6, 30, 18, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 447903106, 'comment_body': 'Same comment here. And if I am not mistaken the same input has already been checked inside `Forward()`. I mean the backward pass is being applied after the forward pass.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 447920828, 'comment_body': ""Correct me if I'm wrong. I am going to remove these checks after merge."", 'comment_created': datetime.datetime(2020, 6, 30, 19, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448050961, 'comment_body': 'Because when `logInput = false`, it is expected that the input will be probabilities (for example output of a softmax layer) and 0 <= p <= 1.', 'comment_created': datetime.datetime(2020, 7, 1, 0, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448085762, 'comment_body': 'Yes. We can remove it from `Backward()`. :+1: ', 'comment_created': datetime.datetime(2020, 7, 1, 2, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448088479, 'comment_body': 'The changes are not necessary since most of the time it is used without the softmax layer and with `logInput = true`. You can remove these changes if you feel.', 'comment_created': datetime.datetime(2020, 7, 1, 3, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448503454, 'comment_body': '@lozhnikov Should I revert the changes?', 'comment_created': datetime.datetime(2020, 7, 1, 17, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448596426, 'comment_body': ""I'm not sure, it's up to you. I think both cases are correct."", 'comment_created': datetime.datetime(2020, 7, 1, 20, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448712441, 'comment_body': 'Then I am keeping it this way.', 'comment_created': datetime.datetime(2020, 7, 2, 2, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}]","[{'commit_sha': '8a1909fc67a8bdeceb6241b341ade2cdc32fb494', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e326ccf8218065f35c2307c1470cbf2c3667045e', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24673caf2059b033a3ad28c4423ebdd22fd4c8d0', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '911e09b672f98b60b14716eecc3a89aa984bff72', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '918707fdabeff22d3dc9a9c28abf400cffe829e3', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7aa70d4abfaf1a2679601c0bccdd685427412f1', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43d8310a50f831c4eebb76ea523d04a105d264ad', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c730c94efdcc1d9dd980b4b2cf5d7683a9eb72', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f61db138140a5188006973bf807de4764a95828d', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0226b3f8dbef788c1ef08c333ea627185ae2abfc', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fc610159dacc0714888884167fd598532a5e0ba', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd666d0bf3c67427f402a2b7fb5dfc9a56a3dd112', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9eaf9e9d0676082b1cdf8bd3700495eebe49ca5', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48593332dc1170db6057297d8f3f6469dfbf6b94', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b944c5a391735d3dc0bbb2b98283d2bf7029a7d', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71eb4eda69c2108da0772e83db4dc00b02d77cf2', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a547d43145c5197ea46a5cee8017895aab8a5b05', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6638cf72bf5db4819c549f9ce50eff7c3ca709a9', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f9e3ef7d4f409beef0d68d9919e5d078d1de4f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c496efae38adb25e2ccc4a60e9d03ddb7c0adf2', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '661bcfd3ebdd2be1e350e3acd8ed9b7da59959b6', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
373749248,adding huber loss implementation,"Hello Everyone,
I am adding [Huber Loss](https://en.wikipedia.org/wiki/Huber_loss) Function. The main feature of Huber Loss is that it is less sensitive to outliers in data than the Mean Squared Error function.",True,2199,https://api.github.com/repos/mlpack/mlpack/pulls/2199,https://github.com/mlpack/mlpack/pull/2199,closed,212,0,4,13,12,23,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-02-11 16:16:26+00:00,2020-03-18 06:43:05+00:00,3075999.0,"35 days, 14:26:39","[{'comment_id': 378399249, 'comment_body': 'Missing empty line here.', 'comment_created': datetime.datetime(2020, 2, 12, 17, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 378399397, 'comment_body': 'Missing stop here.', 'comment_created': datetime.datetime(2020, 2, 12, 17, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 380358967, 'comment_body': 'I\'d suggest a light reword here; this description made it sound like an integer type; maybe something like ""Boolean. If true, take the mean of total loss. If false, take the sum of total loss."" ', 'comment_created': datetime.datetime(2020, 2, 17, 20, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}, {'comment_id': 380360825, 'comment_body': 'I guess, to be correct we should go with `Definition of the Huber loss function`.', 'comment_created': datetime.datetime(2020, 2, 17, 20, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 380361478, 'comment_body': 'We should use `\\f$`, see https://github.com/mlpack/mlpack/blob/93fe75a131c26e422d1c2a65c45cacd4402be6ed/src/mlpack/methods/linear_regression/linear_regression.hpp#L114 for an example. I guess the syntax you used is markdown.', 'comment_created': datetime.datetime(2020, 2, 17, 20, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 380361529, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2020, 2, 17, 20, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 380361829, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2020, 2, 17, 20, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 380362168, 'comment_body': ""I guess you could also use `const double absError = std::abs(target[i] - input[i]);` to make clear the value isn't changed. "", 'comment_created': datetime.datetime(2020, 2, 17, 20, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 380362751, 'comment_body': 'Looks like you could use `totalLoss += absError > delta ...` here.', 'comment_created': datetime.datetime(2020, 2, 17, 20, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 380362974, 'comment_body': 'Should we use `const double absError` here as well?', 'comment_created': datetime.datetime(2020, 2, 17, 20, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 380363432, 'comment_body': '`Huber loss`.', 'comment_created': datetime.datetime(2020, 2, 17, 20, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 386801831, 'comment_body': 'Am I missing something, or do we need to account for mean and sum cases in Backward like in forward?', 'comment_created': datetime.datetime(2020, 3, 3, 5, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}, {'comment_id': 386811237, 'comment_body': ""That's correct. I will make the changes as soon as possible."", 'comment_created': datetime.datetime(2020, 3, 3, 5, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 392411399, 'comment_body': 'Seems like this was included by mistake', 'comment_created': datetime.datetime(2020, 3, 13, 18, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392411777, 'comment_body': 'I think this could have the parameter on the same line', 'comment_created': datetime.datetime(2020, 3, 13, 18, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392412033, 'comment_body': '`Huber Loss`', 'comment_created': datetime.datetime(2020, 3, 13, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392412970, 'comment_body': 'Does this need to be declared outside the loop?', 'comment_created': datetime.datetime(2020, 3, 13, 18, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392416112, 'comment_body': 'Ohh yes. It will be removed in the next commit.', 'comment_created': datetime.datetime(2020, 3, 13, 19, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 392416331, 'comment_body': 'Yup!', 'comment_created': datetime.datetime(2020, 3, 13, 19, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 392417083, 'comment_body': ""It's the class name and I guess exact name should be mentioned."", 'comment_created': datetime.datetime(2020, 3, 13, 19, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 392420153, 'comment_body': ""Oops, that's my mistake. Sorry about that."", 'comment_created': datetime.datetime(2020, 3, 13, 19, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392422893, 'comment_body': 'It can be declared inside the for loop. I will make the modifications in the next commit. Thanks for pointing this out.', 'comment_created': datetime.datetime(2020, 3, 13, 19, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 394102648, 'comment_body': 'We can remove the braces here', 'comment_created': datetime.datetime(2020, 3, 18, 4, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}]","[{'commit_sha': 'e36fd142674d022983fc0dfb977f5104dc83771d', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c17e8ea7d58f2f783f915d59d9c33ee7e93d7cdc', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ebf07de8b8a64b6815799726105c523b24d51ab', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3312343ff0b0bc23360f6b9a1e718339ab675dc9', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7174c0221e38dcdabd77098708c8bb21a7732719', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b48bb73486bf53f4d8d9329a77f0b0cfcaba89f7', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54e880b1980b915a69586c84ec33b4073cab944e', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae91ff7113684e45bddc05b571d79772bb972193', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ad211f0ecd8cb7af15890dbd6cc7beab4a81cb', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b426bb906944baf9284c9df4fb65fb156c93a434', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84de117e58755cf0c5cacac82102450655e5cdad', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3454e51d66c871f1eddcba7d5951a58ae7f456b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1919522431da83c8cd1b9a298741adb4bbface34', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
393550778,templating return type of loss functions,"In accordance to #2338
Any other suggestions/ideas are most welcome. ",True,2339,https://api.github.com/repos/mlpack/mlpack/pulls/2339,https://github.com/mlpack/mlpack/pull/2339,closed,86,46,27,2,15,16,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-03-25 12:09:10+00:00,2020-04-01 18:23:48+00:00,627278.0,"7 days, 6:14:38","[{'comment_id': 399210519, 'comment_body': 'In some other places we use: `typedef typename MatType::elem_type ElemType;` do you mind to change the style to be consistent with the rest of the codebase?', 'comment_created': datetime.datetime(2020, 3, 27, 11, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399213635, 'comment_body': 'Sure, @zoq. Also ```value_type``` -> ```elem_type```? ', 'comment_created': datetime.datetime(2020, 3, 27, 11, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 399701175, 'comment_body': 'Yes, looks like you already did that 👍 .', 'comment_created': datetime.datetime(2020, 3, 28, 19, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701255, 'comment_body': '```suggestion\r\n                                               const TargetType& target);\r\n```\r\n\r\nMinor style issue.', 'comment_created': datetime.datetime(2020, 3, 28, 19, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701281, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701325, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701343, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701348, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701357, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701374, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701410, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701432, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701443, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701466, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701490, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 399701503, 'comment_body': '```suggestion\r\n                                        const TargetType& target);\r\n```', 'comment_created': datetime.datetime(2020, 3, 28, 19, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '2f23fe84bbceb9717540fc8ffb80d0c8e69ef086', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94ae364a433a09beba358c54efa79fd8075af8f5', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
398151862,inclusion of all currently implemented layers in layer.hpp,,True,2353,https://api.github.com/repos/mlpack/mlpack/pulls/2353,https://github.com/mlpack/mlpack/pull/2353,closed,31,5,2,4,5,2,2,0,"[{'name': 'c: methods'}, {'name': 't: bugfix'}]",2020-04-03 12:44:06+00:00,2020-04-07 05:11:21+00:00,318435.0,"3 days, 16:27:15","[{'comment_id': 403819251, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 4, 6, 4, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}, {'comment_id': 403819294, 'comment_body': '```suggestion\r\n\r\n#include ""gru.hpp""\r\n```', 'comment_created': datetime.datetime(2020, 4, 6, 4, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}]","[{'commit_sha': '3f4ff9a4458fd64854ce94d71d1081f095a90bca', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82b7d1a684274fd70f5a0557f501682602c45ae4', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '307b14f85d7cedc6b4e175aae437f66be7ba077a', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bc9c7441c38193645eb2cb477fb009051700b93', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
398112799,[MRG] adding softmax layer,This should close PR #1958 worked by @sreenikSS.,True,2351,https://api.github.com/repos/mlpack/mlpack/pulls/2351,https://github.com/mlpack/mlpack/pull/2351,closed,241,8,7,11,18,24,1,0,[{'name': 'c: methods'}],2020-04-03 11:15:32+00:00,2020-05-19 22:26:22+00:00,4014650.0,"46 days, 11:10:50","[{'comment_id': 406638771, 'comment_body': ""ohh... I need to remove this (it's not used)."", 'comment_created': datetime.datetime(2020, 4, 10, 7, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 414767267, 'comment_body': '```suggestion\r\n * used for inference only and not with NLL loss (use LogSoftMax instead).\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 18, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 414767876, 'comment_body': ""Maybe it makes sense to rename this class to `Softmax `, because that's what you use to describe the class?"", 'comment_created': datetime.datetime(2020, 4, 24, 18, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 414832921, 'comment_body': 'Since you assign the output in line 37, no need to set the size here.', 'comment_created': datetime.datetime(2020, 4, 24, 20, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 414837895, 'comment_body': 'Not sure that is necessary, you could directly use `gy.col(i)` and `input.col(i)`.', 'comment_created': datetime.datetime(2020, 4, 24, 20, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 414838423, 'comment_body': 'Looks like `each_col` could work as well, and would avoid the extra matrix.', 'comment_created': datetime.datetime(2020, 4, 24, 20, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 414971536, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 4, 25, 4, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 414971753, 'comment_body': 'Agree. Also `Softmax` looks nicer :)', 'comment_created': datetime.datetime(2020, 4, 25, 4, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 414971822, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 4, 25, 4, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 414973333, 'comment_body': 'Done but I wonder how armadillo does this? Is it not that when we initialize the matrix with predefined shape (static allocation), it accesses the elements faster?', 'comment_created': datetime.datetime(2020, 4, 25, 4, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 415001792, 'comment_body': ""From the documentation, I couldn't clearly understand how to achieve this as the right-hand side of the expression depends on the ith column of `input` and `gy`."", 'comment_created': datetime.datetime(2020, 4, 25, 7, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 415002650, 'comment_body': 'One more question, should I use `arma::as_scalar` or `arma::dot` [here](https://github.com/mlpack/mlpack/pull/2351/commits/b7f318ef608a42a204c8b96553fe9da8785a36a5), as on some tests `as_scalar` is fast and on other `dot` is fast?', 'comment_created': datetime.datetime(2020, 4, 25, 7, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 416618358, 'comment_body': '@zoq: I think this is fine now. What do you think?', 'comment_created': datetime.datetime(2020, 4, 28, 13, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 418948244, 'comment_body': ""I've added `.vscode` since it becomes annoying sometimes if vscode files get added by mistake. I think its fine to add this. Or should I open a separate PR for this?"", 'comment_created': datetime.datetime(2020, 5, 2, 11, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 419144401, 'comment_body': ""That's fine."", 'comment_created': datetime.datetime(2020, 5, 3, 18, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 419144548, 'comment_body': 'Looks good.', 'comment_created': datetime.datetime(2020, 5, 3, 18, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423131788, 'comment_body': 'Other layers are in alphabetical order. Could you move the softmax layer accordingly?', 'comment_created': datetime.datetime(2020, 5, 11, 15, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 423153016, 'comment_body': ""Thanks, @lozhnikov for the review. I've made the required changes. I noticed some other LayerTypes were also out of order, so arranged them as well."", 'comment_created': datetime.datetime(2020, 5, 11, 16, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 426368540, 'comment_body': '```suggestion\r\n * @file methods/ann/layer/softmax.hpp\r\n```', 'comment_created': datetime.datetime(2020, 5, 18, 4, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}, {'comment_id': 426368601, 'comment_body': '```suggestion\r\n * @file methods/ann/layer/softmax_impl.hpp\r\n```', 'comment_created': datetime.datetime(2020, 5, 18, 4, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}, {'comment_id': 426675805, 'comment_body': 'Can you please restore the import re-arrangements made in this file? These are redundant.', 'comment_created': datetime.datetime(2020, 5, 18, 14, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ShikharJ', 'type': 'User'}, {'comment_id': 426696385, 'comment_body': '@ShikharJ: I rearranged the `LayerTypes` to maintain the alphabetical order as suggested by Mikhail. https://github.com/mlpack/mlpack/pull/2351#discussion_r423131788', 'comment_created': datetime.datetime(2020, 5, 18, 15, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 426756432, 'comment_body': 'Typo here, it should be `through`.', 'comment_created': datetime.datetime(2020, 5, 18, 16, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ShikharJ', 'type': 'User'}, {'comment_id': 426761267, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2020, 5, 18, 16, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}]","[{'commit_sha': 'ad916e3b96435a99ff07e26e250d4fb4ba2e765a', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1101a2753f0635fadd39eaed76367ac75c5101bc', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b19262fc0fd681a3e6944d9bc508090b3d7e4fc4', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf8bfcf39104ce8d045ce74e413a5dee8229d91d', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec8433adcec0236a51b8f3817d964c333e6f3d5b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b399ecb6b70bbb28c0f2865764fc6c6398d015e3', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5944db97adac3b492bac07becc9c4d83b26b026', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '396f0177901a969cfff87d298d216ede9951408f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f06ceb38c5ddb6723025f13f8634b18fa2fed55', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90aa0750621ab7b1b2fdf88d178ffa9ff4a5463b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c218831b0e309a546d648200718d1c64fae85c66', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
415024018,fix lookup layer,"Hi everyone,
This is an attempt to fix the issue in the Lookup layer that it takes only batchSize = 1.",True,2398,https://api.github.com/repos/mlpack/mlpack/pulls/2398,https://github.com/mlpack/mlpack/pull/2398,closed,149,53,3,50,15,47,3,0,"[{'name': 's: keep open'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-05-08 03:22:00+00:00,2020-08-05 09:25:11+00:00,7711391.0,"89 days, 6:03:11","[{'comment_id': 453276480, 'comment_body': ""To me, the previous test didn't make any sense. It was not a concern because `Lookup` is generally used as the first layer, so only gradient update is required. But still, I thought to correct that."", 'comment_created': datetime.datetime(2020, 7, 12, 6, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 453276886, 'comment_body': ""It looked more descriptive to me. I think it's a reasonable change."", 'comment_created': datetime.datetime(2020, 7, 12, 6, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 453892431, 'comment_body': 'Yeah, make sense.', 'comment_created': datetime.datetime(2020, 7, 13, 19, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 454087246, 'comment_body': 'Hey there, Since errorTemp is not modified anywhere, we should avoid creating a copy. See Convolutional Layers, Transposed Convolution Layers for reference. Thanks a lot.', 'comment_created': datetime.datetime(2020, 7, 14, 4, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 454088423, 'comment_body': 'Yes. Sure, I will correct it in the next commit. :+1: ', 'comment_created': datetime.datetime(2020, 7, 14, 4, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 454088658, 'comment_body': 'Awesome, Thanks a lot.', 'comment_created': datetime.datetime(2020, 7, 14, 4, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 456854544, 'comment_body': '```suggestion\r\n        arma::conv_to<arma::uvec>::from(input.col(i)) - 1));\r\n```\r\nDouble indent on a wrapped line. :smile:', 'comment_created': datetime.datetime(2020, 7, 19, 3, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456854749, 'comment_body': ""Do we have an example of how `Lookup<>` is supposed to be used?  It seems to me like it would expect an input point to be one-dimensional, and it would just look up the corresponding column in `weights`.  When the batch size is greater than one with a feed-forward network, then `input` will have number of columns equal to the batch size and number of rows equal to the dimensionality.\r\n\r\nSo, if this expects a dimensionality of 1, then the `arma::conv_to<arma::uvec>::from(input)` will create an `arma::uvec` of indices, one for each point in the batch.  Then `weights.cols()` will simply produce the corresponding column of `weights` for each individual input index.\r\n\r\nIf I've understood that correctly, then it seems like this already would support a batch size greater than 1.  Please, correct me if I've misunderstood something though. :+1:"", 'comment_created': datetime.datetime(2020, 7, 19, 3, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456860234, 'comment_body': 'If `input` is matrix type with shape `(sequenceLength, batchSize)` with `batchSize > 1`, the statement `arma::conv_to<arma::uvec>::from(input)` will not be able to convert it to `uvec` type and throw error. \r\n\r\nNow if I use `arma::vectorise(arma::conv_to<arma::umat>::from(input))`, the resultant vector is of shape `(sequenceLength * batchSize, 1)`. And then whichever numbers are there in this vector, those columns will be selected from the weight. So the shape of the `output` will be `(weights.n_rows, sequenceLength * batchSize)`. This is distorting the placement of batches for the next layers.\r\n\r\nInstead if the `output` has shape `(weights.n_rows * sequenceLength, batchSize)`, the number of columns i.e. `batchSize` is preserved for next layers.\r\n\r\nThis is what I have tried to do in this PR.', 'comment_created': datetime.datetime(2020, 7, 19, 5, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 457978270, 'comment_body': ""I can't add a comment to the required line since it wasn't changed. Could you add an extra `*` at line 71 in order to make the comment Doxygen compatible?\r\nI mean this:\r\n```c++\r\n  /*\r\n   * Calculate the gradient using the output delta and the input activation.\r\n   *\r\n   * @param input The input parameter used for calculating the gradient.\r\n   * @param error The calculated error.\r\n   * @param gradient The calculated gradient.\r\n   */\r\n  template<typename eT>\r\n  void Gradient(const arma::Mat<eT>& input,\r\n                const arma::Mat<eT>& error,\r\n                arma::Mat<eT>& gradient);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 21, 9, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 458065074, 'comment_body': ""I didn't get this part. Could you explain the purpose of this check?"", 'comment_created': datetime.datetime(2020, 7, 21, 12, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 458066731, 'comment_body': 'I agree with Mrityunjay, the input can be multidimensional. For instance each dataset record could represent a sequence of words. In this case `arma::conv_to<arma::uvec>::from(input)` would raise an exception.', 'comment_created': datetime.datetime(2020, 7, 21, 12, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 458210241, 'comment_body': ""The older test and this test are the same. Actually, I'm not getting your question. Do you suggest another test method I should use? Or your question is about the validity of the `Gradient` function?"", 'comment_created': datetime.datetime(2020, 7, 21, 15, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 458212222, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 21, 16, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 458280853, 'comment_body': ""No, I was speaking about the test. I don't understand the point. What exactly does it check? Is it relevant?"", 'comment_created': datetime.datetime(2020, 7, 21, 17, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 458289434, 'comment_body': 'Haha... In a sense, you are right because the check is like ""what I\'ve done is correct!"". But I\'m not sure whether we should remove the check or not.\r\nI have just added a gradient test and fortunately, it passed locally.', 'comment_created': datetime.datetime(2020, 7, 21, 18, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 458321209, 'comment_body': 'But I\'m still wondering what is a better way to check it. I think it\'s not wrong if you see the `Gradient` function, it can make sense.\r\n\r\nSuppose I have a sequence -- ""A word embedding is a class of approaches for representing words and documents using a dense vector representation.""\r\n\r\nHere the word ""a"" comes three times and so there will be three errors associated with the word ""a"", we sum up all those errors. And then the gradient here is same as the error, such is this ""mathematical function"". The gradients are same as errors if there is no repetition of words but if there is repetition, the error for the same words is added and stored as the gradient wrt that word.\r\n\r\n```\r\ngrad wrt ""a"" = sum of errors associated with ""a""\r\ngrad wrt ""word"" = sum of errors associated with ""word""\r\ngrad wrt ""embedding"" = sum of errors associated with ""embedding""\r\n...\r\n```\r\n...and that is why `sum of gradients = sum of errors`. Correct me if I misunderstood something or if I need to clarify anything further.', 'comment_created': datetime.datetime(2020, 7, 21, 18, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 459096051, 'comment_body': 'Could you add some details about what exactly this layer does? Perhaps before the class definition. It could be really helpful. I mean the dimensions of the output. Just add some information from comments https://github.com/mlpack/mlpack/pull/2398#discussion_r456854749 and https://github.com/mlpack/mlpack/pull/2398#discussion_r456860234.', 'comment_created': datetime.datetime(2020, 7, 22, 21, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 459105116, 'comment_body': ""Could you increase this a bit? The main reason of this PR is to fix batch sizes other than 1. So, I think it's worth to test it."", 'comment_created': datetime.datetime(2020, 7, 22, 21, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 459105411, 'comment_body': 'Did you mean `vocabSize`?\r\n```suggestion\r\n        input(i) = math::RandInt(1, vocabSize);\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 21, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 459106593, 'comment_body': ""The last argument is the batch size.\r\n```suggestion\r\n      double error = model->Evaluate(model->Parameters(), 0, batchSize);\r\n```\r\nYou'll need to make this variable a class field."", 'comment_created': datetime.datetime(2020, 7, 22, 21, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 459106997, 'comment_body': 'Same issue\r\n```suggestion\r\n      model->Gradient(model->Parameters(), 0, gradient, batchSize);\r\n```', 'comment_created': datetime.datetime(2020, 7, 22, 21, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 459113343, 'comment_body': ""Basically, you pick some random columns from `error` several times (they may even repeat since `input` is also random) and sum them up. That's how you obtain `gradient`. Then you compare the sum of `error` and the sum of `gradient`. I don't think they should be equal. The numbers are random. They could have the same expectation if you divided them by the number of summands.\r\n\r\nNote, the previous test dealt with deterministic numbers. Both `input` and `error` were defined. So, it could have sense. I don't think the present version is correct."", 'comment_created': datetime.datetime(2020, 7, 22, 22, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 459114851, 'comment_body': 'I think the main problem is that `input` is random. So, you pick a random slices from random `error`. The sums are not necessarily equal. Anyway, I think the new test is fine.', 'comment_created': datetime.datetime(2020, 7, 22, 22, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 459183612, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 2, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 459183814, 'comment_body': 'Sure. I will write the documentation in detail in next commit.', 'comment_created': datetime.datetime(2020, 7, 23, 2, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 459207582, 'comment_body': ""Random numbers are not a problem. Maybe `print` statements can reveal it to you.\r\nHere is the output:\r\n```cpp\r\ninput:\r\n   2.0000   2.0000   2.0000   9.0000\r\n   8.0000   3.0000   9.0000   7.0000\r\n   9.0000   5.0000   9.0000   9.0000\r\nerror:\r\n   0.0003   0.0048   0.0071   0.0042\r\n   0.0015   0.0030   0.0072   0.0060\r\n   0.0098   0.0029   0.0007   0.0009\r\n   0.0062   0.0092   0.0049   0.0027\r\n   0.0030   0.0063   0.0009   0.0062\r\n   0.0036   0.0076   0.0076   0.0022\r\nerror in 3D form:\r\n[cube slice 0]\r\n   0.0003   0.0098   0.0030\r\n   0.0015   0.0062   0.0036\r\n\r\n[cube slice 1]\r\n   0.0048   0.0029   0.0063\r\n   0.0030   0.0092   0.0076\r\n\r\n[cube slice 2]\r\n   0.0071   0.0007   0.0009\r\n   0.0072   0.0049   0.0076\r\n\r\n[cube slice 3]\r\n   0.0042   0.0009   0.0062\r\n   0.0060   0.0027   0.0022\r\n\r\ngradient initially:\r\n        0        0        0        0        0        0        0        0        0        0\r\n        0        0        0        0        0        0        0        0        0        0\r\ngradient after evaluation of 1th batch\r\n        0   0.0003        0        0        0        0        0   0.0098   0.0030        0\r\n        0   0.0015        0        0        0        0        0   0.0062   0.0036        0\r\ngradient after evaluation of 2th batch\r\n        0   0.0051   0.0029        0   0.0063        0        0   0.0098   0.0030        0\r\n        0   0.0045   0.0092        0   0.0076        0        0   0.0062   0.0036        0\r\ngradient after evaluation of 3th batch\r\n        0   0.0123   0.0029        0   0.0063        0        0   0.0098   0.0046        0\r\n        0   0.0117   0.0092        0   0.0076        0        0   0.0062   0.0161        0\r\ngradient after evaluation of 4th batch\r\n        0   0.0123   0.0029        0   0.0063        0   0.0009   0.0098   0.0151        0\r\n        0   0.0117   0.0092        0   0.0076        0   0.0027   0.0062   0.0243        0\r\n```\r\n\r\nNow let's focus on 1st column of input, 1st slice of error in 3D form, and gradient after evaluation of 1st batch.\r\nYou can see that the first column of input has (2, 8, 9). Those are the tokens for the words in that batch. Now columns 2, 8, 9 is selected from gradient and then 1st batch (1st slice) of error is added. So what happened is-- \r\n`gradient.cols(2, 8, 9) += error.slice(0)`. See that LHS and RHS have same shapes, so it's a valid operation.\r\n\r\n...and same thing goes for every batch.\r\nHope this helped :)\r\n\r\n\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 23, 4, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 459452725, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 13, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 459614693, 'comment_body': ""Thanks for the clarification! I totally agree. I don't know why, but I thought you select random columns from `error`. In fact you select random columns from `gradient` and add a slice of `error` to the selected columns. Of course in this case the test is absolutely correct."", 'comment_created': datetime.datetime(2020, 7, 23, 17, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 461028323, 'comment_body': ""I suggest to revert it back. Doxygen doesn't render it properly.\r\n```suggestion\r\n   * @param gy The backpropagated error.\r\n   * @param g The calculated gradient.\r\n   */\r\n   template<typename eT>\r\n   void Backward(const arma::Mat<eT>& /* input */,\r\n                 const arma::Mat<eT>& gy,\r\n                 arma::Mat<eT>& g);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 27, 16, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 461031075, 'comment_body': ""Correct me if I'm wrong. This function isn't meant to be used since this is the first layer of the network. Perhaps in this case it could be helpful to insert `Log::Fatal()` here or something."", 'comment_created': datetime.datetime(2020, 7, 27, 16, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 461042910, 'comment_body': 'But then it will show unused variable warning probably!?', 'comment_created': datetime.datetime(2020, 7, 27, 17, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 461045141, 'comment_body': ""No, it doesn't happen with declarations. If you wrote the implementation here then the compiler would write a warning."", 'comment_created': datetime.datetime(2020, 7, 27, 17, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 461050601, 'comment_body': ""Yes. `Backward()` can be called but nothing needs to be done here. Also, the `FFN` by its property will call `Backward()` function for all layers and if we put `Log::Fatal()`, it will break. But we don't want that, we just want to skip it."", 'comment_created': datetime.datetime(2020, 7, 27, 17, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 461057598, 'comment_body': 'Ohh... Thanks for the clarification. I will make the change.', 'comment_created': datetime.datetime(2020, 7, 27, 17, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 461073284, 'comment_body': ""I thought it skips the first layer:\r\n```c++\r\n  for (size_t i = 2; i < network.size(); ++i)\r\n  {\r\n    boost::apply_visitor(BackwardVisitor(boost::apply_visitor(\r\n        outputParameterVisitor, network[network.size() - i]),\r\n        boost::apply_visitor(deltaVisitor, network[network.size() - i + 1]),\r\n        boost::apply_visitor(deltaVisitor, network[network.size() - i])),\r\n        network[network.size() - i]);\r\n  }\r\n```\r\nI'll check it. Perhaps it calls `Backward()` somewhere else."", 'comment_created': datetime.datetime(2020, 7, 27, 18, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 461285374, 'comment_body': ""Ohh...my mistake. I was putting `i = network.size()` for last iteration and then assumed it will visit up to `network[0]`. I think then it's okay to put `Log::Fatal()` or at least `Log::Warn()` when someone tries to use it as an intermediate layer. Sorry for the confusion!\r\n\r\nAlso, I got a question now. If `Backward()` doesn't visit the first layer, how can we create a network with a single layer?\r\n```cpp\r\nFFN<MeanSquaredError<>, RandomInitialization> model;\r\nmodel.Add<Lookup<>>(vocabSize, embeddingSize);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 28, 2, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 461315588, 'comment_body': 'Ahh... got it. Probably we need to use `IdentityLayer` at the end.\n\n```cpp\nFFN<MeanSquaredError<>, RandomInitialization> model;\nmodel.Add<Lookup<>>(vocabSize, embeddingSize);\nmodel.Add<IdentityLayer<>>();\n```', 'comment_created': datetime.datetime(2020, 7, 28, 4, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 461459925, 'comment_body': ""> If Backward() doesn't visit the first layer, how can we create a network with a single layer?\r\n\r\nI think it's not supposed to create such networks. They usually have a classifier at the end."", 'comment_created': datetime.datetime(2020, 7, 28, 9, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 461474610, 'comment_body': 'Correct!', 'comment_created': datetime.datetime(2020, 7, 28, 10, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 463948199, 'comment_body': '@lozhnikov: I think we will need to make some changes here. As you suggested the shape of input to be `(tgtSeqLen, embedDim, batchSize)` and not `(embedDim, tgtSeqLen, batchSize)` in #2375, here also I think it should be `(seqLength, embeddingSize, batchSize)`. Otherwise, if Lookup is used before multihead attention, the dimensions will not be compatible.', 'comment_created': datetime.datetime(2020, 8, 1, 10, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 464114902, 'comment_body': '```suggestion\r\n * The output shape : (sequenceLength * embeddingSize, batchSize).\r\n```', 'comment_created': datetime.datetime(2020, 8, 2, 19, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 464115289, 'comment_body': 'Could you add a comment somewhere to describe why this ordering has been chosen? Some info from https://github.com/mlpack/mlpack/pull/2398#issuecomment-667671075 will do.', 'comment_created': datetime.datetime(2020, 8, 2, 19, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 464230758, 'comment_body': ""@lozhnikov: Is this comprehensible? I don't know if a third person reading this would understand or not 😬. This reminded me of a [tweet](https://pasteboard.co/JkCofMi.png) I read sometimes back 😂"", 'comment_created': datetime.datetime(2020, 8, 3, 7, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 464239315, 'comment_body': 'I think you could just point out that the multi-head attention layer requires this particular ordering.', 'comment_created': datetime.datetime(2020, 8, 3, 7, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 465029399, 'comment_body': ""In plain C the `abs()` function returns `int`, but in C++ there's an overload for `double`. So, this code is correct. Nevertheless, I prefer to use `fabs()` instead of `abs()`.\r\n```suggestion\r\n    REQUIRE(std::fabs(outputSum - arma::accu(output.col(i))) <= 1e-5);\r\n```"", 'comment_created': datetime.datetime(2020, 8, 4, 12, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 465029689, 'comment_body': '```suggestion\r\n  REQUIRE(std::fabs(arma::accu(error) - arma::accu(gradient)) <= 1e-07);\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 12, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}]","[{'commit_sha': '77a687dcf66565d40a0f62bd01c5c4ba1d868409', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00c163fdb97a7951888313201a71aef27c804284', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a139152b91b5653304abdb2f0d1300cf5cfb0c8c', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2b3e3743c20d977321b0f4940d60904af5a502', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f6b31f69a04cae43fa49f7c17dcbcd4fe9a4272', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ba87aa06d35653d977520dc5dc630164bbebed', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b417b33d1e87953d521241e3f9e6f7f62c952fa7', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d39baccde6a61fb564ab5d3251234ada60d1df7', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06df7f77b232e7b5bec225455ed548eac816972', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '747659ea0c2a8fba4b8f5ebf25ec230754d2bfc3', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84e00489b49a530338150e2f80c30979320cc385', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '726ab0923cd7e5582f733e4089a69f1403b7386b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7ff19cd787a1228ebf469aef3317b6b7972ff4', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd018cc24866e3610eb3a14d7ab59701c5d1a2701', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7fce359ec612437946a18efd2f3cf9d9779c4e2', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5f399491dd0b2074f8b18ee8c74a50ab5ad682b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f587465192820ce905b5a7677ad2686ef9b1f6f6', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9306df291a9f32ac8fcf3ae1b2f1006b4c346405', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a405fd802ed3df60e01323ad8cc98f5f4c3f6d', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1024073670861abba316de9eeaa5f10aa5c2ae41', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af5eae5a6870966cb9d699a060ae8c9b03cbf52f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5710dad6868f8133b128760a94a318052e33b58', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '248d7d37901886d0fc3176b9f38956c781f16336', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e525bbdcfa3a5bd03952f4449a57d1658e54a096', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fca30afc0da44d65d4f481b875ff22b82c6b491', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e9204b0fe2cc478380ac601a2f55b0cc66af193', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '232de366429633935ea4c523695c1d99974a2d91', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f583b0ab282c2021589f16d8dcd9175a27a8ea47', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24aa7be3f5112ba0485d5c782fc693e7e98a40c1', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9fc410238aab62fc115f5b5606d26de89f89f0f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c691e0c7cf472473868cb4d5af339d8e44c6ef', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90d1ca70ae01350bcf413e3f0dd89fbf32fab141', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8890bdf94c73d912fe453be6ab6fe4197ec65948', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54b1342c938e93d78a21205eab5d1a79f23cee14', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a13844d3fbd283cf8603e526c75d05d4b8924e2f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc43f0a2b4da185162ef50397c564258c2f113af', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '413905cadc340b5f19528e881e65036da0d3ba1a', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76abc84271377089afc196d765c8933bcab1ce5e', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a2f50e64e99c043cde822473b37f868a05657a6', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21dc590bfa5c176880900d79ceaf6685dbf9f1c0', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2f037fbfddc3abc6398e302d64098c6f8a0108', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3458f24466999f34fbedf712b93c7ea5201d74', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345b312c00391ae93cfddd2cbcd910de69fba59d', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3056ff6ed4df23116b7d6db4dc608a89f23bb61', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5081d77d6c7da1615ad6974aeb1cf5152aa0dcc6', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7354abc0b2f43d2c7e3ca444ce8e5c6727c43dd', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c32c47137b5492faaf8a798c49a9f15a4eddd93b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '172bd68d35ae45aebae483b8a5a6e67a0e01544c', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f146e3e2b349054ee2b93644332ce83368d409ef', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2418383e6957bbd68264f58198a10fcc381730ca', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
447224077,Linear3D,"The current Linear layer works well for the 2D input, like if a data point has 'n' features. Then the shape of input is (n, batchSize).
The size of the weight for the 2D Linear layer is `(inSize, outSize)`.

But when we have 3D input where every batch contains multiple data points and each data points has 'n' features. Like in the case of word embeddings, where each batch contains multiple sequences/sentences and each sequence contains embedding vector for each word. So, effectively the shape of such input will be `(sequenceLength, embeddingSize, batchSize)`, and the number of features is `embeddingSize`. Now when we try to use the existing Linear layer, we need to vectorize each slice so that shape becomes `(sequenceLength * embeddingSize, batchSize)`. And the number of features is taken as `sequenceLength * embeddingSize` which is not true. Even if we try to do such a thing, the number of parameters (the shape of weight will be `(sequenceLength * embeddingSize, outSize)`) will be much higher than what it should be.

In this pull request, I have tried to solve this issue. Let me know your thoughts.
(I asked about this on the IRC but when I am searching those messages now, I'm not getting. Looks like sometimes my messages go to Bermuda triangle :D)",True,2508,https://api.github.com/repos/mlpack/mlpack/pulls/2508,https://github.com/mlpack/mlpack/pull/2508,closed,479,12,7,5,6,25,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-07-10 04:58:04+00:00,2020-08-22 21:52:19+00:00,3776055.0,"43 days, 16:54:15","[{'comment_id': 453086778, 'comment_body': 'You need 2 extra spaces here:\r\n```suggestion\r\n  Linear3D(const size_t inSize,\r\n           const size_t outSize,\r\n           RegularizerType regularizer = RegularizerType());\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 21, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 453088218, 'comment_body': ""Shouldn't it be\r\n```suggestion\r\n  using ElemType = typename OutputDataType::elem_type;\r\n  weight = arma::Mat<ElemType>(weights.memptr(), outSize, inSize, false, false);\r\n  bias = arma::Mat<ElemType>(weights.memptr() + weight.n_elem,\r\n      outSize, 1, false, false);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 10, 21, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 453089474, 'comment_body': 'I think there should be either `inSize` or `outSize` in both cases.', 'comment_created': datetime.datetime(2020, 7, 10, 21, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 453143232, 'comment_body': 'Ohh... yes. It should be `outSize`.', 'comment_created': datetime.datetime(2020, 7, 11, 2, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 454087840, 'comment_body': ""Hey there, Can you please prevent copying of the matrix (set copy_aux_mem = false), since it's not modified it would be better to save space. See Convolutional layers. (Could you also please extend this to other PRs.)"", 'comment_created': datetime.datetime(2020, 7, 14, 4, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 454089318, 'comment_body': 'Sure. Thanks for pointing them out.', 'comment_created': datetime.datetime(2020, 7, 14, 4, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466406482, 'comment_body': 'Doxygen ignores comments that are unrelated to declarations.\r\n```suggestion\r\n    // Shape of weight : (outSize, inSize).\r\n    // Shape of inputTemp : (nPoints, inSize, batchSize).\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 13, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466409348, 'comment_body': ""Do you need this particular ordering? Why didn't you use the following\r\n```c++\r\nCubeType inputTemp(const_cast<MatType&>(input).memptr(), inSize, nPoints,\r\n    batchSize, false, false);\r\n```\r\n(I swapped `inSize` and `nPoints`)."", 'comment_created': datetime.datetime(2020, 8, 6, 13, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466411136, 'comment_body': ""If you swap `inSize` and `nPoints` you'll get the following code:\r\n```c++\r\nMatType z = weight * inputTemp.slice(i);\r\nz.each_col() += bias;\r\n```\r\nIt's exactly the same code as in the `Linear` layer. And I think it's more efficient since Armadillo is column-major."", 'comment_created': datetime.datetime(2020, 8, 6, 13, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466413618, 'comment_body': 'Could you describe here the shape of the input and the output? It could be very helpful.', 'comment_created': datetime.datetime(2020, 8, 6, 13, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466579936, 'comment_body': ""The reason is [similar to this one](https://github.com/mlpack/mlpack/pull/2398#issuecomment-667671075) but still, I'm wondering can we do something about it?? I mean suppose we switched to this version, then is it possible to get multihead attention working?\r\n\r\n(Here `nPoints` : `seqLength`, `inSize` : `embeddingSize1` and `outSize` : `embeddingSize2`)\r\n```cpp\r\narma::mat input(seqLength, batchSize);\r\n\r\n// Following the style of keeping feature dimension to be the first. (This is not the case with recently merged Lookup layer)\r\n// I'm assuming such a scenario.\r\nFFN<LossType<>, InitType> model;\r\nmodel.Add<Lookup<>>(vocabSize, embeddingSize1);  // The shape of output is : (embeddingSize1, seqLength, batchSize) if we keep feature dimension to be first.\r\nmodel.Add<Linear3D<>>(embeddingSize1, embeddingSize2);   // The shape of output is : (embeddingSize2, seqLength, batchSize) if we keep feature dimension to be first.\r\nmodel.Add<MultiheadAttention<>>(embeddingSize, numHeads);  // The shape of input will be (embeddingSize2, seqLength, batchSize), but we want the input of shape (seqLength, embeddingSize2, batchSize) to return an output of same shape.\r\n```\r\n\r\nNow if we follow the style of keeping feature dimension to be beside the batch dimension, the only problem is probably efficiency but it will be compatible with multihead-attention. What's your opinion?? I would definitely prefer efficiency but then how will it be compatible with multihead attention?\r\nLet me know if something is unclear."", 'comment_created': datetime.datetime(2020, 8, 6, 17, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466580049, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 8, 6, 17, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466610326, 'comment_body': ""> The reason is similar to this one but still, I'm wondering can we do something about it?? I mean suppose we switched to this version, then is it possible to get multihead attention working?\r\n\r\nPerhaps, we could do the reordering before `MultiHeadAttention`. We could implement something like `TransposeLayer` which transposes each slice of the input. Although, the reordering will affect performance. Anyway, I can't say anything without benchmarks. So, let's leave it as is for now."", 'comment_created': datetime.datetime(2020, 8, 6, 18, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466618462, 'comment_body': '>We could implement something like TransposeLayer.\r\n\r\nThat is actually a nice solution. But what if we do it inside the multihead attention layer? Should I try this thing?', 'comment_created': datetime.datetime(2020, 8, 6, 18, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466629786, 'comment_body': ""Don' waste your time. I'd like to try to take care of `dL/d(key)` and `dL/d(value)` first. Unfortunately, we have several PR's that depend on each other. If we change one, then we have to change the others."", 'comment_created': datetime.datetime(2020, 8, 6, 19, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 471481973, 'comment_body': '```suggestion\r\n  const CubeType inputTemp(const_cast<MatType&>(input).memptr(), inSize,\r\n      nPoints, batchSize, false, false);\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 471483800, 'comment_body': ""Perhaps, it'll save a memory allocation. However, I'm not sure.\r\n```suggestion\r\n    output.col(i) = arma::vectorise(weight * inputTemp.slice(i) +\r\n        arma::repmat(bias, 1, nPoints));\r\n```"", 'comment_created': datetime.datetime(2020, 8, 17, 13, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 471484374, 'comment_body': '```suggestion\r\n  const CubeType gyTemp(const_cast<MatType&>(gy).memptr(), outSize,\r\n      nPoints, batchSize, false, false);\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 471486886, 'comment_body': '```suggestion\r\n  const CubeType inputTemp(const_cast<MatType&>(input).memptr(), inSize,\r\n      nPoints, batchSize, false, false);\r\n  const CubeType errorTemp(const_cast<MatType&>(error).memptr(), outSize,\r\n      nPoints, batchSize, false, false);\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 13, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 471489975, 'comment_body': ""```suggestion\r\n    //! (embeddingSize, seqLength) selected as a combination of columns from the\r\n```\r\nBy the way, you don't need the exclamation after `//` since Doxygen ignores comments that aren't attached to a function or class etc."", 'comment_created': datetime.datetime(2020, 8, 17, 13, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 471553794, 'comment_body': 'But `arma::repmat()` is extending a vector into matrix. Probably this allocates more memory?', 'comment_created': datetime.datetime(2020, 8, 17, 15, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 471599236, 'comment_body': 'Armadillo is a tricky library. Sometimes it returns a special object `Operation` instead of matrix. So, the computation itself happens at `operator=`.', 'comment_created': datetime.datetime(2020, 8, 17, 16, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 471619372, 'comment_body': ""The documentation says its more efficient to use `each_col()`. https://pasteboard.co/JmOdSSs.png\r\nAlso, I tried [this](https://pastebin.com/exVWCxDq) code, which shows a significant time difference. Though I'm still not sure whether space complexity is better or not."", 'comment_created': datetime.datetime(2020, 8, 17, 17, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 471636719, 'comment_body': ""Okay, fine.\r\n\r\nBy the way, there's a slight issue in your benchmark. The compiler could optimize your code out (i.e. remove it) since you don't use the result of the computation. It's easy to fix, just write the result to the screen (or a function of the result like the sum of all elements) after the time measurement."", 'comment_created': datetime.datetime(2020, 8, 17, 17, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 471651216, 'comment_body': ""Yes! That made some difference.\r\n\r\nBut still, I'm getting 0.4 sec difference on my system if I print `arma::accu(output)` in the last line."", 'comment_created': datetime.datetime(2020, 8, 17, 17, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}]","[{'commit_sha': '9364fad72fd078fe963dda0ad91a0fc7e4955673', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c6e790ba27a0f0a7fcee9da7de79eb1407e33ee', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '422ae898b82ea42425059a899879b82d0b88775b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ba736a1fdc14f0d8c5a30fc3b446618367e117', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e511f5ba5c9a7ee203c5ab8af1b56c17fce2b5f5', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
405119771,multihead attention,"Hi everyone,
I've worked on the implementation of multihead attention. The multihead attention layer would be required for the Transformer model. Debugging and refactoring of the code will come subsequently but this is the initial structure on which I will be working on. The implementation is mostly motivated from [PyTorch](https://pytorch.org/docs/stable/nn.html#multiheadattention) and [Tensorflow](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Attention).
",True,2375,https://api.github.com/repos/mlpack/mlpack/pulls/2375,https://github.com/mlpack/mlpack/pull/2375,closed,1253,1,11,21,33,137,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-04-17 13:03:00+00:00,2020-08-24 10:49:38+00:00,11137598.0,"128 days, 21:46:38","[{'comment_id': 418943799, 'comment_body': 'Can we use field object as input and output in forward function? As the forward function needs three matrices as input. How should I go with this?', 'comment_created': datetime.datetime(2020, 5, 2, 10, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 423143017, 'comment_body': 'I think we should at least initialize the class members with the default variables.', 'comment_created': datetime.datetime(2020, 5, 11, 15, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 423143797, 'comment_body': 'I think it should be of the same type as the matrix element type (`typename InputDataType::elem_type` if I remember right).', 'comment_created': datetime.datetime(2020, 5, 11, 15, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 423146720, 'comment_body': ""I am not sure that's a good idea since each layer takes the output of the previous layer as the input data."", 'comment_created': datetime.datetime(2020, 5, 11, 16, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 423147681, 'comment_body': 'See the comment above.', 'comment_created': datetime.datetime(2020, 5, 11, 16, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 423148395, 'comment_body': ""Shouldn't it be `size_t`?"", 'comment_created': datetime.datetime(2020, 5, 11, 16, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 423149862, 'comment_body': ""I think this line is redundant since you've already defined `ElemType` in the class definition."", 'comment_created': datetime.datetime(2020, 5, 11, 16, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 423154452, 'comment_body': 'I think it should be `Linear<InputDataType, OutputDataType>`. The same rule applies to the lines above.', 'comment_created': datetime.datetime(2020, 5, 11, 16, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 423168964, 'comment_body': 'I thought, users generally use low precision dropout value (like 0.5, 0.35, etc.) so used `float`. Also, it takes less space :D', 'comment_created': datetime.datetime(2020, 5, 11, 16, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 423169907, 'comment_body': ""Right. I will better try to vectorize the inputs or concatenate them. I'll see what works."", 'comment_created': datetime.datetime(2020, 5, 11, 16, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 423171729, 'comment_body': ""I agree, but the scalar size is much less than the matrix size. And it'll be converted to the matrix element type anyway."", 'comment_created': datetime.datetime(2020, 5, 11, 16, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 423184365, 'comment_body': 'You are right! I will make the changes.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 423184709, 'comment_body': 'Oh! completely overlooked this thing. Thanks.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 426131950, 'comment_body': ""@lozhnikov: I've changed the inputs to matrix types. Probably one main thing remains in forward function is softmax layer (PR #2351)"", 'comment_created': datetime.datetime(2020, 5, 16, 8, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 427245126, 'comment_body': 'Hey @lozhnikov, here in the forward function, I have to resize the `attnOutputWeight` multiple times. Can you suggest something to prevent this?', 'comment_created': datetime.datetime(2020, 5, 19, 11, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 427246250, 'comment_body': '@lozhnikov: Is there some way other than using for loop to multiply two `cubes`.', 'comment_created': datetime.datetime(2020, 5, 19, 12, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438683356, 'comment_body': ""@lozhnikov: I am wondering where should I put these policy classes? For now, I've kept them in `multihead_attention.hpp` header file."", 'comment_created': datetime.datetime(2020, 6, 11, 10, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438686770, 'comment_body': ""@lozhnikov: I am getting an error here -\r\n```\r\nerror: ‘SelfAttention’ was not declared in this scope\r\n         MultiheadAttention<SelfAttention, arma::mat, arma::mat>*,\r\n```\r\nand similar for `EncoderDecoderAttention` and `GeneralAttention`. I could not find what I've missed."", 'comment_created': datetime.datetime(2020, 6, 11, 10, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438694410, 'comment_body': 'Ohh...this one is fixed. I was making a silly mistake.', 'comment_created': datetime.datetime(2020, 6, 11, 10, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438758856, 'comment_body': ""I didn't get the point. Why do you need to resize the matrix?"", 'comment_created': datetime.datetime(2020, 6, 11, 12, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 438760208, 'comment_body': ""I think it's better to get rid of the pointers. Otherwise you have to write a special copy constructor, a special move constructor and take care of memory allocation errors correctly (I mean operator new could throw an exception)."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 438761917, 'comment_body': ""I think it's ok for now. I think you can move each attention class to a separate file (perhaps under `layers/attention/` directory) or introduce a file for all attention types."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 438762368, 'comment_body': 'According to the style guide each function should begin with a capital.', 'comment_created': datetime.datetime(2020, 6, 11, 12, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 438764005, 'comment_body': ""Do you need a visitor here? Why don't you call `softmaxModule->Forward()` directly?"", 'comment_created': datetime.datetime(2020, 6, 11, 13, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 438765390, 'comment_body': 'Pointer can give you a lot of troubles. I suggest to get rid of them.\r\n\r\nFor instance suppose the second `new` throws an exception. In that case you should catch it, delete `softmaxModule` and throw the exception forward. Otherwise there would be a memory leak.', 'comment_created': datetime.datetime(2020, 6, 11, 13, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 438773156, 'comment_body': 'There has to be either a 2d mask or 3d mask and not both. So, when specifying a 2d mask, we have to remove 3d mask. Maybe something else can be done about that.', 'comment_created': datetime.datetime(2020, 6, 11, 13, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438774408, 'comment_body': 'Yeah. I have already changed that. It will get reflected in the next commit.', 'comment_created': datetime.datetime(2020, 6, 11, 13, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438774610, 'comment_body': 'Ohh. yes. I will change that.', 'comment_created': datetime.datetime(2020, 6, 11, 13, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438779065, 'comment_body': ""I'm not clear about that but I think we will need the output of the softmax module for backward propagation. I think the visitor does that."", 'comment_created': datetime.datetime(2020, 6, 11, 13, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438783438, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 6, 11, 13, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 438947441, 'comment_body': ""You are right. That serves the purpose. Thanks a lot. In fact, it was causing error only. (Don't know what I was doing wrong)"", 'comment_created': datetime.datetime(2020, 6, 11, 17, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439074611, 'comment_body': 'I guess it makes sense to use a value > 0 here, since dropout is enabled by default, but using a dropout value of 0 is the same as setting `deterministic = false`.', 'comment_created': datetime.datetime(2020, 6, 11, 21, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439184990, 'comment_body': ""Sure. I'm setting default value of dropout to `0.1`."", 'comment_created': datetime.datetime(2020, 6, 12, 3, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 442841715, 'comment_body': ""Do you need to copy the data here? Perhaps it's faster to use the same memptr constructor."", 'comment_created': datetime.datetime(2020, 6, 19, 13, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 442841830, 'comment_body': 'Same comment here.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 442848779, 'comment_body': ""I was wondering if it would be better to assume that each attention layer takes three inputs: query, key, and value.\r\nIn that case\r\n1. You don't need to write different attention policies.\r\n2. The code will be a bit more simple.\r\n3. It would be easier to work with the layer due to the unique interface. Otherwise you have to write a method in order to pack the input for each attention type.\r\n\r\nOn the contrary\r\n1. Passing three matrices to each attention layer could be a bit slower since you have to copy the query and the key and concatenate it to the input."", 'comment_created': datetime.datetime(2020, 6, 19, 13, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 442955575, 'comment_body': 'I will better try pass three matrices concatenated into a single matrix as input as you suggested above.', 'comment_created': datetime.datetime(2020, 6, 19, 17, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 442963362, 'comment_body': '>2. The code will be a bit more simple.\r\n\r\nYes, I totally agree. In fact, I started with that but due to the possibility of loss of efficiency I switched.\r\nI will try that again.', 'comment_created': datetime.datetime(2020, 6, 19, 17, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 443197272, 'comment_body': '@lozhnikov: Done.', 'comment_created': datetime.datetime(2020, 6, 21, 8, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 443514787, 'comment_body': ""I think it's undefined behavior. These matrices are parts of `input` which has the `const` modifier. Therefore you can't change them."", 'comment_created': datetime.datetime(2020, 6, 22, 12, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443517370, 'comment_body': ""Shouldn't it be\r\n```c++\r\n    Wt3d.slice(i) = qProj.slice(i) * kProj.slice(i).t();\r\n```\r\n?"", 'comment_created': datetime.datetime(2020, 6, 22, 12, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443520561, 'comment_body': 'Does it work with `float`s? I guess in this case `weights.memptr()` should return `float*`, but `arma::mat()` requires `double*`. Perhaps there should be `arma::Mat<TheSameElemType>()`.', 'comment_created': datetime.datetime(2020, 6, 22, 12, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443520776, 'comment_body': 'See the comment above.', 'comment_created': datetime.datetime(2020, 6, 22, 12, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443520969, 'comment_body': 'See the comment above.', 'comment_created': datetime.datetime(2020, 6, 22, 12, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443521185, 'comment_body': 'See the comment above.', 'comment_created': datetime.datetime(2020, 6, 22, 12, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443522908, 'comment_body': ""Looks like you do the same thing using three different ways. I was wondering if it's possible to simplify it a bit."", 'comment_created': datetime.datetime(2020, 6, 22, 12, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443524286, 'comment_body': ""Matrix multiplication isn't commutative.\r\n```suggestion\r\n  attnOut = CubeMultiply(Wt3d, vProj, 0, 0);\r\n```"", 'comment_created': datetime.datetime(2020, 6, 22, 12, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443552298, 'comment_body': 'Ohh... right. I think I should use copy while defining those matrices.\r\n```cpp\r\narma::cube query(const_cast<arma::Mat<eT>&>(input).memptr(), embedDim, tLen, bsz, true);\r\narma::cube key(const_cast<arma::Mat<eT>&>(input).memptr() + query.n_elem, embedDim, sLen, bsz, true);\r\narma::cube value(const_cast<arma::Mat<eT>&>(input).memptr() + query.n_elem + key.n_elem, embedDim, sLen, bsz, true);\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 13, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 443561804, 'comment_body': ""It's because I assume each embedding is a column vector and then any bunch of words when represented as embedding, each column contains embedding for each word. In other implementations, it is other way round (i.e. each embedding is a row vector). I had to do this because 1) mlpack is column-major, 2) while splitting into n heads the actual embedding gets distorted.\r\n\r\nHere, `kProj.slice(i)` is of shape `(headDim, sLen)` and `qProj.slice(i)` is of shape `(headDim, tLen)`, so\r\n`qProj.slice(i) * kProj.slice(i).t()` won't be a valid multiplication."", 'comment_created': datetime.datetime(2020, 6, 22, 13, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 443567334, 'comment_body': 'Here, `Wt3d` is a 3d tensor. So, when applying 2d mask, I will have to iterate to each slice and apply the mask. Now when the mask is 3d, I need not do that, I can simply add two cubes.\r\nYes, for `keyPaddingMask`, it can be simplified by just using `.each_slice()` method. Thanks for pointing it out.', 'comment_created': datetime.datetime(2020, 6, 22, 13, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 443570254, 'comment_body': 'Yes, you are right. I will handle the templating once the implementation looks good. It was just that my ide was looking cluttered. :smile: ', 'comment_created': datetime.datetime(2020, 6, 22, 13, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 443667578, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 22, 16, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 460415177, 'comment_body': '@lozhnikov Can we do something like this here?\r\n```cpp\r\ndouble Gradient(arma::mat& gradient) const\r\n{\r\n  double error = model->EvaluateWithGradient(model->Parameters(), 0, gradient, batchSize);\r\n  return error;\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 25, 15, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 460417926, 'comment_body': 'I think it does the same provided that the `deterministic` equals `true`. Actually `Gradient(4 arguments version)` calls `EvaluateWithGradient()`.', 'comment_created': datetime.datetime(2020, 7, 25, 15, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460567717, 'comment_body': ""If I remember right, you added exactly the same function to the Scaled Dot Product Attention layer. Perhaps it's a good idea to move this to e.g. `core/math/`.\r\n\r\nIn this case I suggest to rename it because the natural multiplication for cubes is the tensor product, but here you just multiply slices. I propose something like `SliceMultiply()` or `MultiplySlices()`."", 'comment_created': datetime.datetime(2020, 7, 26, 20, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460568636, 'comment_body': ""I think it's incorrect:\r\n```suggestion\r\n      Log::Assert(a.n_rows == b.n_rows);\r\n```"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460568792, 'comment_body': ""Actually, there are 4 cases. You didn't take into account `aTranspose = true`, `bTranspose = true`."", 'comment_created': datetime.datetime(2020, 7, 26, 20, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460568943, 'comment_body': '```suggestion\r\n      Log::Assert(a.n_rows == b.n_rows);\r\n```', 'comment_created': datetime.datetime(2020, 7, 26, 20, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460569040, 'comment_body': 'Same issue here (`aTranspose = true`, `bTranspose = true`).', 'comment_created': datetime.datetime(2020, 7, 26, 20, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460575666, 'comment_body': ""I think it's always easier to understand the same code with 3 nested loops.\r\n```c++\r\n    for (size_t slice = 0; slice < q.n_slices; slice++)\r\n    {\r\n      for (size_t col = 0; col < q.n_cols; col++)\r\n      {\r\n        for (size_t row = 0; row < q.n_rows; row++)\r\n          q(row, col, slice) = query(col * q.n_rows + row, slice);\r\n      }\r\n    }\r\n```\r\n\r\nWhy didn't you use the `memptr()` constructor?\r\n```suggestion\r\n    q = CubeType(value.memptr(), embedDim, query.n_rows / embedDim, query.n_cols);\r\n```\r\nIf I am not mistaken it does the same."", 'comment_created': datetime.datetime(2020, 7, 26, 21, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460586329, 'comment_body': ""Is this `reshape()` correct? I'm not sure that it's correct to cross the second dimension (i.e. change the first and the third).\r\n\r\nI think the following reshapes are correct:\r\n```\r\n(a * b, y, z) ----> (a, b * y, z),\r\n(x, a * b, z) ----> (x, a, b * z)\r\n```\r\nand their compositions and inversions.\r\nBut I'm not sure that the following operation is correct:\r\n```\r\n(a * b, y, z) ----> (a, y, b * z)\r\n```\r\n\r\nIf I am not mistaken Armadillo stores cubes by slices and each slice is stored in the column major order. Looks like you changed the fastest and the slowest dimension. I think it's not enough to reshape the arrays, you need to reorder them as well. Or you could swap the sequence length and the embedding dimension. In this case `qProj` reshapes from `(tgtSeqLen, embedDim, batchSize)` to `(tgtSeqLen, headDim, nHeads * batchSize)`."", 'comment_created': datetime.datetime(2020, 7, 26, 23, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460587159, 'comment_body': 'The same comment about the reshape.', 'comment_created': datetime.datetime(2020, 7, 26, 23, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460605082, 'comment_body': 'Perfect. I will add it in core/math/', 'comment_created': datetime.datetime(2020, 7, 27, 1, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 460606013, 'comment_body': ""I think if somewhere it is required, we can simply use the fact `B'.A' = (A.B)'` which I think will be a better option."", 'comment_created': datetime.datetime(2020, 7, 27, 1, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 460612771, 'comment_body': 'Do you suggest\r\n```cpp\r\nq = CubeType(const_cast<arma::Mat<eT>&>(query).memptr(),\r\n        embedDim, query.n_rows / embedDim, query.n_cols, false, false);\r\n```\r\n?\r\nI think this removes the constantness of `query`, and later `q` is modified also. I preferred copying it (and turning from 2D to 3D).\r\n\r\nEven if we set `copy_aux_mem = true`, I think we will still be removing constantness of `query`(which is the actual input) and copying also. What should I do?', 'comment_created': datetime.datetime(2020, 7, 27, 2, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 460614554, 'comment_body': 'Hmm... I will see this. This is serious.', 'comment_created': datetime.datetime(2020, 7, 27, 2, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 460763429, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 7, 27, 9, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 460765202, 'comment_body': ""No, `copy_aux_mem` equals `true` by default. So, I suggest\r\n```c++\r\nq = CubeType(const_cast<arma::Mat<eT>&>(query).memptr(),\r\n        embedDim, query.n_rows / embedDim, query.n_cols, true, false);\r\n```\r\nYes, it will remove constantness of `query`, but it won't modify `query`. As far as I know it's not forbidden."", 'comment_created': datetime.datetime(2020, 7, 27, 9, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463974422, 'comment_body': 'Could you add some documentation to these functions?', 'comment_created': datetime.datetime(2020, 8, 1, 15, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463974679, 'comment_body': 'It\'s not necessary, but in my opinion it improves readability.\r\n```suggestion\r\n  {\r\n    Log::Fatal << ""Transposing slices of both cubes is inefficient. Consider \\\r\n        using the property B\'A\' = (AB)\'."" << std::endl;\r\n  }\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 15, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463974855, 'comment_body': '```suggestion\r\n  {\r\n    Log::Fatal << ""Transposing both objects is inefficient. Consider using the \\\r\n        property B\'A\' = (AB)\'."" << std::endl;\r\n  }\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 15, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463974957, 'comment_body': '```suggestion\r\n  {\r\n    Log::Fatal << ""Transposing both objects is inefficient. Consider using the \\\r\n        property B\'A\' = (AB)\'."" << std::endl;\r\n  }\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 15, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463975105, 'comment_body': 'According to the style guide arguments should begin with a lowercase letter.\r\n```suggestion\r\n                           const bool aTranspose = false,\r\n                           const bool bTranspose = false);\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 15, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463975408, 'comment_body': 'According to the style guide arguments should begin with a lowercase letter.\r\n```suggestion\r\n                          const bool aTranspose = false,\r\n                          const bool bTranspose = false);\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463975427, 'comment_body': 'According to the style guide arguments should begin with a lowercase letter.\r\n```suggestion\r\n                          const bool aTranspose = false,\r\n                          const bool bTranspose = false);\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463975506, 'comment_body': '```suggestion\r\n    const bool aTranspose,\r\n    const bool bTranspose)\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463975525, 'comment_body': '```suggestion\r\n    const bool aTranspose,\r\n    const bool bTranspose)\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463975553, 'comment_body': '```suggestion\r\n    const bool aTranspose,\r\n    const bool bTranspose)\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463975760, 'comment_body': 'I suggest to replace `nHeads` to `numHeads`. I think it sounds better.\r\n```suggestion\r\n   * @param numHeads Number of parallel attention heads.\r\n   */\r\n  MultiheadAttention(const size_t embedDim,\r\n                     const size_t numHeads);\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463976042, 'comment_body': '```suggestion\r\n  size_t NumHeads() const { return numHeads; }\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463976085, 'comment_body': '```suggestion\r\n  size_t& NumHeads() { return numHeads; }\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463976319, 'comment_body': ""Could you write somewhere an information about the input. I think it's to complex. It could be quite useful to describe the way how the query, the key and the value are stored in the input."", 'comment_created': datetime.datetime(2020, 8, 1, 16, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463976368, 'comment_body': '```suggestion\r\n  size_t numHeads;\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463976521, 'comment_body': 'I think the line is redundant.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463976842, 'comment_body': ""I think it's better to use `lowest()` instead of `-max()`.\r\n```suggestion\r\n  keyPaddingMask(sLen - 1) = std::numeric_limits<double>::lowest();\r\n```"", 'comment_created': datetime.datetime(2020, 8, 1, 16, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463976929, 'comment_body': '```suggestion\r\n        attnMask(i, j) = std::numeric_limits<double>::lowest();\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463977016, 'comment_body': '```suggestion\r\n            attnMask(i, j) = std::numeric_limits<double>::lowest();\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463977044, 'comment_body': '```suggestion\r\n      keyPaddingMask(srcSeqLen - 1) = std::numeric_limits<double>::lowest();\r\n```', 'comment_created': datetime.datetime(2020, 8, 1, 16, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 463988091, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 1, 18, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 463988202, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 1, 18, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 465571187, 'comment_body': ""@lozhnikov: Should I remove all such comments? I just mentioned it to understand what is going on?\r\nAnd can you please explain how memory checks passed? I'm not getting it 😅"", 'comment_created': datetime.datetime(2020, 8, 5, 8, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 465578640, 'comment_body': ""> Should I remove all such comments?\r\n\r\nLeave them as is. Actually, they're very helpful. :+1: \r\n\r\n> And can you please explain how memory checks passed? I'm not getting it.\r\n\r\nNeither am I. Perhaps, these issues were fixed in the upstream (you've just merged it)."", 'comment_created': datetime.datetime(2020, 8, 5, 8, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 465862639, 'comment_body': ""Why don't you extract `key` and `value` from the input like you do with `query`? I mean the following code:\r\n```c++\r\nq = CubeType(const_cast<arma::Mat<eT>&>(input).memptr(),\r\n        tgtSeqLen, embedDim, batchSize, true, false);\r\nk = CubeType(const_cast<arma::Mat<eT>&>(input).memptr() + tgtSeqLen * embedDim * batchSize,\r\n        srcSeqLen, embedDim, batchSize, true, false);\r\nv = CubeType(const_cast<arma::Mat<eT>&>(input).memptr(), + (tgtSeqLen + srcSeqLen) * embedDim * batchSize\r\n        srcSeqLen, embedDim, batchSize, true, false);\r\n```\r\n\r\nPerhaps, I don't understand the point. I thought we obtain `query`, `key`, and `value` by the forward propagation. But in this function they could be defined as external constants."", 'comment_created': datetime.datetime(2020, 8, 5, 16, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 465870549, 'comment_body': ""I think this is correct if `vProj` doesn't depend on `query`. But, actually it may be equal to `query * Wk + Bk`. I'm not sure the formula will remain the same in this case.\r\n\r\nIt's quite complicated, so let's simplify it a bit. Let's remove the linear transformation of `query` and `key` for simplicity and consider `headDim = 1`. In this case `Score = Q * K^T`. If `key` equals `query`, then `Score = Q * Q^T`. I'm not sure that `GY = GY * K` is a correct backward pass in this case (if `query` = `key`).\r\n\r\nI think it could be right if you extracted `key` and `value` from the input like I suggested above (I'm not sure, I need to check it)."", 'comment_created': datetime.datetime(2020, 8, 5, 16, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 465873532, 'comment_body': 'The same comment here.', 'comment_created': datetime.datetime(2020, 8, 5, 17, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 465898163, 'comment_body': "">Why don't you extract key and value from the input like you do with query?\r\n\r\nWe can get `k` from `input` as you suggested but `v` must be extracted from `k` only. Because when `value` is empty (line 223) it doesn't mean that `key` is also empty. And in that case `value = key` i.e. the Encoder-Decoder Attention case. Let me know if I missed something.\r\n\r\n>I thought we obtain query, key, and value by the forward propagation.\r\n\r\nYou are correct. But I think it is possible that we train the encoder part first to get the `key` and use it to train the decoder part. (At least this should work for Transformer Model)."", 'comment_created': datetime.datetime(2020, 8, 5, 17, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 465978042, 'comment_body': ""> We can get k from input as you suggested but v must be extracted from k only.\r\n\r\nI think we can implement it in a layer that will be before `MultiHeadAttention`. In this case, `MultiHeadAttention` would accept input of shape `(tgtSeqLen + 2 * srcSeqLen, embedDim, batchSize)`. I mean we could introduce a layer that copies `query` to `key`, `key` to `value` depending on the attention type. I think this could simplify the backward pass in `MultiHeadAttention` since the layer I've just proposed will handle this.\r\n\r\n> You are correct. But I think it is possible that we train the encoder part first to get the key and use it to train the decoder part.\r\n\r\nOk, let's leave this PR as is and leave it open until we start the implementation of the decoder and the encoder. I feel we'll need to change the API of `MultiHeadAttention`."", 'comment_created': datetime.datetime(2020, 8, 5, 20, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466137134, 'comment_body': 'I saw Jacobian Test fails for `query = key = value` (i.e. Self-Attention case) but the reason is ""how backward pass is tested?"".\r\n\r\nConsidering the case when the key or value is not provided. Then key and value will be extracted from the input (i.e. query), but the thing is key and value are not input themselves. They are just ""equal"" to the input. When the Jacobian Test is held, f(x + h) and f(x - h) are calculated. It is expected that (x + h) or (x - h) only changes the input but since we are extracting key and value from the input itself, key and value also get mutated.\r\n\r\nConsider this example--\r\n\r\n![first_principle](https://user-images.githubusercontent.com/35535378/89489838-fdd13a00-d7c8-11ea-9bba-eece81e09e2f.gif)\r\n\r\nMaybe this will be solved if we restrict the user to provide key and value even if they are equal to input (i.e. query) like other libraries do. What do you say??', 'comment_created': datetime.datetime(2020, 8, 6, 4, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466145508, 'comment_body': "">In this case, MultiHeadAttention would accept input of shape (tgtSeqLen + 2 * srcSeqLen, embedDim, batchSize).\r\n\r\nI tried this. Using this method, none of the cases pass for the Jacobian Test. We can see why from this [comment](https://github.com/mlpack/mlpack/pull/2375#discussion_r466137134). This method was very tedious (maybe for me) to implement in mlpack. The reason being Forward function accepts just two arguments, one input, and one output.\r\n\r\n>I mean we could introduce a layer that copies query to key, key to value depending on the attention type. I think this could simplify the backward pass in MultiHeadAttention since the layer I've just proposed will handle this.\r\n\r\nI'm not getting this one. Can you please illustrate this?\r\n\r\n>Ok, let's leave this PR as is\r\n\r\nThat's scary 😬. Let's get it done by this week, please 😂. Sorry for the conflicting idea but we can't do anything in Transformer model without multihead attention. It's at the core. And we are on the verge to get it done. :+1: \r\n\r\n>leave it open until we start the implementation of the decoder and the encoder.\r\n\r\nI have already opened a PR in models repository https://github.com/mlpack/models/pull/16. But how will we proceed without the MultiheadAttention class?"", 'comment_created': datetime.datetime(2020, 8, 6, 4, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466206508, 'comment_body': ""> I'm not getting this one. Can you please illustrate this?\r\n\r\nI mean the positional encoding layer.\r\n\r\n> But how will we proceed without the MultiheadAttention class?\r\n\r\nThe problem is about passing the input to `MultiHeadAttention`. How are you going to implement that?"", 'comment_created': datetime.datetime(2020, 8, 6, 7, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466211320, 'comment_body': ""Are you telling me that `key` and `value` are constants (I mean they won't change during training)? I think that's not true in case of e.g. Self-Attention.\r\n\r\nSo, `key` and `value` are variables. If these variables change during training, you can't treat them as constants. In this case you have to calculate their partial derivatives too.\r\n\r\nI totally agree with your example. But in this case `alpha` doesn't depend on `x`, it's a different variable."", 'comment_created': datetime.datetime(2020, 8, 6, 7, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466256584, 'comment_body': ""The thing is backward pass doesn't flow through `key` or `value` i.e. dL/d(key) or dL/d(value) is not calculated and if it is calculated, what will we do with them?? For the self-attention case, after every forward pass `key` and `value` are set equal to `query`.\r\n\r\n>But in this case alpha doesn't depend on x, it's a different variable.\r\n\r\nIn my opinion, the same is the case here also. Again the same example--\r\n\r\n![example](https://user-images.githubusercontent.com/35535378/89511460-91b5fc80-d7ef-11ea-960d-5a1aca66a65f.gif)\r\n\r\nI locally tested with `query = key = value` and it passed. Let me push the changes to explain."", 'comment_created': datetime.datetime(2020, 8, 6, 9, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466266374, 'comment_body': 'This was the problem why initially Jacobian Test failed for the case `query = key = value`.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466269364, 'comment_body': ""I've set `query = key = value`, and it works (passed locally) without changing the Backward implementation."", 'comment_created': datetime.datetime(2020, 8, 6, 9, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466317176, 'comment_body': 'This assertion is required at line 227 and is already there. So removed it.', 'comment_created': datetime.datetime(2020, 8, 6, 10, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466322803, 'comment_body': ""> The thing is backward pass doesn't flow through key or value\r\n\r\nI don't understand why. How are you going to obtain `key` and `value`? I thought you calculate them by forward propagation. So, they're not independent external parameters. They're variables like `query`. In this case you have to calculate `dL/d(query)`, `dL/d(key)`, and `dL/d(value)` and then calculate the gradient using these partial derivatives. But, in fact you use only `dL/d(query)`.\r\n\r\n> I locally tested with query = key = value and it passed.\r\n\r\nI still think these formulas aren't correct in strict mathematical sense. But, the difference could be small, and we could neglect it. Perhaps, there's something I don't understand correctly. Could you send me the link to any other implementation?"", 'comment_created': datetime.datetime(2020, 8, 6, 10, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466343778, 'comment_body': 'Oops...The correct statement is ""The thing is backward pass doesn\'t flow through key or <strike>query</strike> value"". I corrected the above comment also.\r\n\r\nSuppose there is `gy`. We get `dL/d(query)`, `dL/d(key)`, and `dL/d(value)` from it. So what should be `g` in terms of these partial derivatives??\r\nWhat I understand is-- For the Backpropagation, we should just focus on `dL/d(input)` and in this case, it is `dL/d(query)`.\r\n\r\nUnfortunately, I don\'t have implementation for Backpropagation of the multihead attention layer of any other library. For the forward propagation--\r\ni) https://www.tensorflow.org/tutorials/text/transformer#multi-head_attention\r\nii) https://github.com/pytorch/pytorch/blob/c30bc6d4d7b54296179d717c15cd7507ba520bae/torch/nn/functional.py#L3865', 'comment_created': datetime.datetime(2020, 8, 6, 11, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466356473, 'comment_body': ""Yeah, I meant `value` too.\r\n\r\n> What I understand is-- For the Backpropagation, we should just focus on dL/d(input)\r\n\r\nYes, you're right. But why aren't `key` and `value` parts of the input?\r\n\r\n> Unfortunately, I don't have implementation for Backpropagation of the multihead attention layer of any other library.\r\n\r\nThe libraries do it automatically, you just need to build a model using the required blocks. I think we could compare the gradients of our implementation and of the tensorflow implementation. I think this'll solve the question."", 'comment_created': datetime.datetime(2020, 8, 6, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466378543, 'comment_body': '>I think we could compare the gradients of our implementation and of the tensorflow implementation.\r\n\r\nSo looks like everything boils down to comparing the Forward function because I (and all of us :D) trust the `CheckGradient` and `JacobianTest` functions in `ann_test_tools.cpp`. Also, I can see that the tolerance (1e-06) in the Gradient check of Multihead Attention is the lowest of all gradient checks in `ann_layer_test.cpp`.\r\n\r\nAbout comparing Forward function, I will respond before going to sleep today :)', 'comment_created': datetime.datetime(2020, 8, 6, 12, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466379872, 'comment_body': ""> > What I understand is-- For the Backpropagation, we should just focus on dL/d(input)\r\n\r\n> Yes, you're right. But why aren't key and value parts of the input?\r\n\r\nWell, technically they're not parts of the input since you pass them in a different way. But in fact they have the same meaning as `query`, the MultiHeadAttention layer obtains them in the same way by means of the forward pass. Therefore I think they should be handled in the same way as `query`."", 'comment_created': datetime.datetime(2020, 8, 6, 12, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466381443, 'comment_body': '> About comparing Forward function, I will respond before going to sleep today :)\r\n\r\nI think the `Forward()` function is correct.\r\n\r\n> Also, I can see that the tolerance (1e-06) in the Gradient check of Multihead Attention is the lowest of all gradient checks in ann_layer_test.cpp.\r\n\r\nAs I said perhaps, the difference is too small. So, maybe we could neglect it.', 'comment_created': datetime.datetime(2020, 8, 6, 12, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466395728, 'comment_body': "">Therefore I think they should be handled in the same way as query.\r\n\r\nSo what do you suggest about this? \r\nI already tried different ways for this if you remember. Since I rebased and squashed all previous commits, I can't show them now. The various methods I already tried apart from current implementation--\r\ni) Concatenate `query`, `key` and `value` as a single input. Disadvantage-- deliberate copy even if not required, Jacobian Test fails always.\r\nii) Policy-based input. Disadvantage-- had to implement multiple versions of class methods depending on Policy.\r\niii) The `Concat` layer (not `Concatenate`). I realized later, it's not how things are done in multihead attention."", 'comment_created': datetime.datetime(2020, 8, 6, 13, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466400008, 'comment_body': ""> So what do you suggest about this?\r\n\r\nI think I have an idea. Let me a couple of days to write a prototype. Do you have other work to do? Can you leave this PR for a couple of days? I mean is there any other layers that aren't blocked by `MultiHeadAttention`?"", 'comment_created': datetime.datetime(2020, 8, 6, 13, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 466405471, 'comment_body': "">Let me a couple of days to write a prototype.\r\n\r\nThat's great :)\r\n\r\n>Do you have other work to do?\r\n\r\nYup, I have to work on Positional Encoding and Label Smoothing. Linear3D (PR 2508) is also ready. I think that's enough for two days :)"", 'comment_created': datetime.datetime(2020, 8, 6, 13, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 466805131, 'comment_body': "">>What I understand is-- For the Backpropagation, we should just focus on dL/d(input)\r\n\r\n>Yes, you're right. But why aren't key and value parts of the input?\r\n\r\n@lozhnikov: This [answer from cross-validated](https://stats.stackexchange.com/a/424127) can help us understand this. It's true that not much explanation is there in the paper about what actually are `query`, `key`, and `value`?"", 'comment_created': datetime.datetime(2020, 8, 7, 3, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475119109, 'comment_body': '```suggestion\r\n * @file core/math/multiply_slices_impl.hpp\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 18, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475121182, 'comment_body': '```suggestion\r\n   * Serialize the layer.\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 19, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475121555, 'comment_body': ""I prefer `OutputDataType` here since it's the type used in the calculations.\r\n```suggestion\r\n  typedef typename OutputDataType::elem_type ElemType;\r\n```"", 'comment_created': datetime.datetime(2020, 8, 22, 19, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475121959, 'comment_body': 'You add this matrix to `scores` which is an object of `arma::Cube<ElemType>`, where `ElemType = OutputDataType::elem_type ElemType` (see my suggestion above).\r\n```suggestion\r\n  OutputDataType attnMask;\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 19, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475122019, 'comment_body': 'See the comment above.\r\n```suggestion\r\n  OutputDataType keyPaddingMask;\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 19, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475122202, 'comment_body': 'I believe these variables are unused.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 19, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475124824, 'comment_body': '```suggestion\r\n  //! Two dimensional Attention Mask of shape (tgtSeqLen, srcSeqLen).\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 19, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475131719, 'comment_body': 'See the comment above.\r\n```suggestion\r\n  //! Get the two dimensional Attention Mask.\r\n  OutputDataType const& AttentionMask() const { return attnMask; }\r\n  //! Modify the two dimensional Attention Mask.\r\n  OutputDataType& AttentionMask() { return attnMask; }\r\n    \r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 20, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475132958, 'comment_body': 'See the comment above.\r\n```suggestion\r\n  //! Get Key Padding Mask.\r\n  OutputDataType const& KeyPaddingMask() const { return keyPaddingMask; }\r\n  //! Modify the Key Padding Mask.\r\n  OutputDataType& KeyPaddingMask() { return keyPaddingMask; }\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 20, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475133741, 'comment_body': '`weights` is a matrix of type `OutputDataType`.\r\n```suggestion\r\n  typedef typename arma::Mat<typename OutputDataType::elem_type> MatType;\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475134469, 'comment_body': ""What's the purpose of this variable? Why didn't you use `input`?\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2020, 8, 22, 20, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475134521, 'comment_body': '```suggestion\r\n    double original = input(i);\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 20, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475134650, 'comment_body': '```suggestion\r\n    input(i) = original - perturbation;\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 20, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475134670, 'comment_body': '```suggestion\r\n    input(i) = original + perturbation;\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 20, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475134704, 'comment_body': '```suggestion\r\n    input(i) = original;\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 20, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475134756, 'comment_body': 'See the comment above.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 20, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475134813, 'comment_body': '```suggestion\r\n    deriv(i) = 1;\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 20, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475176573, 'comment_body': 'I think you are right. Actually I just picked the [actual Jacobian test](https://github.com/mlpack/mlpack/blob/c1ababace74eed7add4555da403272f0ee156031/src/mlpack/tests/ann_test_tools.hpp#L37-L99) and removed initialization of input.', 'comment_created': datetime.datetime(2020, 8, 23, 6, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475189084, 'comment_body': ""Yeah, I noticed. The main thing I don't like - variable `sin` has the same name as a function from `<math.h>`."", 'comment_created': datetime.datetime(2020, 8, 23, 8, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475190559, 'comment_body': 'Agreed. Perhaps we can remove it from the actual Jacobian function also.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475191467, 'comment_body': ""Maybe in another PR? I wanted to merge this as soon as possible. It's time to move on. Of course, I'll wait for the second approval, for the tests and I'll test the final version locally as well."", 'comment_created': datetime.datetime(2020, 8, 23, 8, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475192897, 'comment_body': 'Ok. :+1: ', 'comment_created': datetime.datetime(2020, 8, 23, 8, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}]","[{'commit_sha': '6424ee59857458f3931e32898ee9b516dbe063ab', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b37c618edf570ef1844de9ff521432eda4aafed4', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f4636fd00306d01c3504829a1a5e01a3f96a73', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ad8203b642472bf570760d9764248fe8dd4b1ca', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc9ab693b62c72e74c161520edfbd173c61a1f47', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ebd16c2135035d231ae7564bf3e0be670a56c3', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e560fedcd6a4c21421182de7b0f75319f7e0d2a9', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77a431357ce2ae974edc96d0dbdc6a8bb7e2d2bc', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bbbd94430cc57e4384b1354f3d7caf35b6513f6', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bcbd3a7616882058bd4bc5cbb98154acccf8dbb', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65f3421739fc99fa00fb9b65df180903d6aedda6', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dbac85033557219f40f5a41c5efbf6e0551cc95', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9577643a7c63c1a1ecc1644210ac3ee1e8a35eb9', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae3596adefd48d28bc948d57ebdc5c6c18fa6119', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac38f1e3345626b2d76a8d9eba68951e328742d9', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ca84c8506a439a6bd67c46975b70e1d68e40e5', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e949ce73dcdf6ddc9d36ec742ca31fdbb92f9a6', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2dbd729690203ac6a6be301bfc6a65381dd5b11', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '735d7bf3bc248954bd9ef836ae1a2355bef6d560', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37b1f764bde4059d7e141b935af3987d20bb185b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b317bad751b8ad29c58356ad441267fd84281d0', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
418072128,getter and setter methods for weight of some ann layers,"I have added the getter and setter methods for the `weight` of the linear layer. This is needed because the other methods to access `weight` makes the expression complex. 
#2403 ",True,2404,https://api.github.com/repos/mlpack/mlpack/pulls/2404,https://github.com/mlpack/mlpack/pull/2404,closed,558,65,16,43,33,72,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-05-14 15:27:53+00:00,2020-08-11 13:56:08+00:00,7684095.0,"88 days, 22:28:15","[{'comment_id': 425423771, 'comment_body': 'Can you also check that `Parameters` is the same as `Weight + Bias` after you change the weights, just to make sure everything works as expected.', 'comment_created': datetime.datetime(2020, 5, 14, 20, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 425578399, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 15, 5, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 430742861, 'comment_body': ""I know it's only the tests, but in my opinion each pointer should be freed as long as it is no longer needed. So, the app shouldn't have any memory leaks in all possible cases."", 'comment_created': datetime.datetime(2020, 5, 26, 22, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 430745072, 'comment_body': 'See the comment above.', 'comment_created': datetime.datetime(2020, 5, 26, 22, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 430746577, 'comment_body': ""Is there any reason you didn't initialize the bias randomly? I am not sure it's really needed, just in case."", 'comment_created': datetime.datetime(2020, 5, 26, 22, 40, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 430747212, 'comment_body': ""Do we need to check `inear->Bias().n_cols == 1` as well? I am not sure it's really needed, just in case."", 'comment_created': datetime.datetime(2020, 5, 26, 22, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 430748245, 'comment_body': ""I think the code is correct. I was just wondering is it always correct to subtract values from the `end()` iterator? Could it depend on any particular container? I don't take into account cases where reverse iterations aren't supported."", 'comment_created': datetime.datetime(2020, 5, 26, 22, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 430750349, 'comment_body': 'I suggest to use different values with the GCD = 1.', 'comment_created': datetime.datetime(2020, 5, 26, 22, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 430750670, 'comment_body': 'See the comments above.', 'comment_created': datetime.datetime(2020, 5, 26, 22, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 430751686, 'comment_body': 'See the comments above.', 'comment_created': datetime.datetime(2020, 5, 26, 22, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 430753175, 'comment_body': ""Perhaps I missed something. Why did you use the pointer? Why didn't you define the object as follows\r\n```c++\r\nLinear<> linear(inSize, outSize);\r\n```"", 'comment_created': datetime.datetime(2020, 5, 26, 23, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 430819126, 'comment_body': ""There is no particular reason why I used pointer here, it's just that the problem (in PR 2375) I was dealing with uses pointers. And yes not freeing the pointers was a mistake, sorry for that. I will correct it in the next commit."", 'comment_created': datetime.datetime(2020, 5, 27, 2, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 430821334, 'comment_body': ""I don't think there's a reason. It was just a test. For the sake of correctness, bias could be initialized with zeros."", 'comment_created': datetime.datetime(2020, 5, 27, 2, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 430838372, 'comment_body': 'Yup! I will add that.', 'comment_created': datetime.datetime(2020, 5, 27, 3, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 430838549, 'comment_body': 'Sure. I used these arguments from the actual test of these layers.', 'comment_created': datetime.datetime(2020, 5, 27, 3, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 430984898, 'comment_body': 'I meant the following:\r\n```c++\r\nRandomInitialization().Initialize(linear->Bias(), outSize, 1);\r\n```', 'comment_created': datetime.datetime(2020, 5, 27, 9, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 431015398, 'comment_body': ""The purpose of this PR is to achieve a way to \r\n* initialize `weight` and `bias` with different initialization rules. \r\n* initialize the `weight`/`bias` of a particular layer with different initialization rule than that of the network's.\r\n\r\nIf we had to initialize `weight` and `bias` with the same initialization rule, we could have done that using\r\n```cpp\r\nRandomInitialization().Initialize(linear->Parameters(), outSize * (inSize + 1), 1)\r\n```\r\nSo, it's just to check we are able to use different initialization rules for `weight` and `bias`."", 'comment_created': datetime.datetime(2020, 5, 27, 10, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 432119890, 'comment_body': ""Is there any particular reason as to why only the methods for the linear layer have ```InputDataType``` whereas the other layers have ```arma::cube``` for the Weight and ```arma:mat``` for the bias? Can't we use template types for them too? Maybe I am missing something? Let me know!"", 'comment_created': datetime.datetime(2020, 5, 28, 20, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 432134597, 'comment_body': 'Good point, there is no reason, no.', 'comment_created': datetime.datetime(2020, 5, 28, 21, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432305297, 'comment_body': 'Actually, it should have been `OutputDataType` since `weight` is of `OutputDataType`, sorry for that, I will correct it in next commit. In fact templating is a concern in all-around `ann` codebase. It will be a lot of work so I thought of handling it in a separate PR.\r\nIs that okay for now?', 'comment_created': datetime.datetime(2020, 5, 29, 7, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 432322537, 'comment_body': ""As long as you do it, it's fine by me. Doesn't matter if it is in this PR or a separate one. \r\nMaybe you would like to create an issue for now, listing this templating problem and then later we can resolve it with a separate PR?\r\nLet's also wait for zoq's opinion on this."", 'comment_created': datetime.datetime(2020, 5, 29, 8, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 439736815, 'comment_body': ""Could you clarify why did you revert these values back? I saw there was a failing test. I'm just curious why the test had failed."", 'comment_created': datetime.datetime(2020, 6, 13, 12, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439736834, 'comment_body': 'See the comment above.', 'comment_created': datetime.datetime(2020, 6, 13, 12, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439736854, 'comment_body': 'See the comment above.', 'comment_created': datetime.datetime(2020, 6, 13, 12, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439737131, 'comment_body': 'Looks like this is an error. It could be easy to find if you used different values for `inSize`, `outSize`, `kernelWidth`, and `kernelHeight`.\r\n```suggestion\r\n  BOOST_REQUIRE_EQUAL(module->Bias().n_cols, 1);\r\n```', 'comment_created': datetime.datetime(2020, 6, 13, 12, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439738856, 'comment_body': 'The tests failed because I was using invalid combination of parameters, as [here](https://github.com/mlpack/mlpack/blob/22e7c8e7d24c38c6837a0486fd0a45b5e2d7900c/src/mlpack/methods/ann/layer/transposed_convolution_impl.hpp#L162-L173). \r\nI will look in for a correct combination.', 'comment_created': datetime.datetime(2020, 6, 13, 13, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439739825, 'comment_body': 'Thanks for the clarification.', 'comment_created': datetime.datetime(2020, 6, 13, 13, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439784809, 'comment_body': ""@lozhnikov: I don't know why the `module->Parameters()` contains the same values even after we initialize `module->Weight()` and `module->Bias()`. Though we can see from [here](https://github.com/mlpack/mlpack/blob/22e7c8e7d24c38c6837a0486fd0a45b5e2d7900c/src/mlpack/methods/ann/layer/atrous_convolution_impl.hpp#L151-L170) that we are not using copy to create `weight` and `bias`. But the same thing works for `Linear` layer."", 'comment_created': datetime.datetime(2020, 6, 14, 2, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439784828, 'comment_body': 'Same thing here also.', 'comment_created': datetime.datetime(2020, 6, 14, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439814741, 'comment_body': ""That's weird. I'll look into it. I need to build the project on my local computer."", 'comment_created': datetime.datetime(2020, 6, 14, 10, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439816427, 'comment_body': 'On further checking, I found that only the `weight` part is not modified. Change in `bias` is reflected in `module->Parameters()`.\r\nI don\'t think there is any problem with `RandomInitialization` class.\r\n\r\nI tried this and it works normal.\r\n```cpp\r\n  arma::mat weights;\r\n  weights.set_size(10, 1);\r\n  arma::cube weight = arma::cube(weights.memptr(), 2, 2, 2, false, false);\r\n  arma::mat bias = arma::mat(weights.memptr() + weight.n_elem, 2, 1, false, false);\r\n  RandomInitialization().Initialize(weight, 2, 2, 2);\r\n  bias.ones();\r\n  \r\n  weight.print(""weight:"");\r\n  weights.print(""parameters:"");\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 10, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439820356, 'comment_body': ""It happens since `RandomInitialization` creates a new object. Indeed, look at the code:\r\n```c++\r\n  template<typename eT>\r\n  void Initialize(arma::Cube<eT>& W,\r\n                  const size_t rows,\r\n                  const size_t cols,\r\n                  const size_t slices)\r\n  {\r\n    // This line creates a new object.\r\n    W = arma::Cube<eT>(rows, cols, slices);\r\n\r\n    for (size_t i = 0; i < slices; i++)\r\n      Initialize(W.slice(i), rows, cols);\r\n  }\r\n```\r\nJust replace `RandomInitialization().Initialize()` by `model->Weight().randu()` and it'll work fine."", 'comment_created': datetime.datetime(2020, 6, 14, 11, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439820838, 'comment_body': ""@zoq Marcus, this might be interesting for you. Why didn't you write the function like the `arma::Mat` specialization\r\n```c++\r\nW = lowerBound + arma::randu<arma::Cube<eT>>(rows, cols, slices) *\r\n        (upperBound - lowerBound);\r\n```\r\nPerhaps in this case Armadillo won't create a new object provided that there's enough memory."", 'comment_created': datetime.datetime(2020, 6, 14, 11, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439820965, 'comment_body': '```suggestion\r\n  module->Weight().randu();\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 11, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439820986, 'comment_body': '```suggestion\r\n  module->Weight().randu();\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 11, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439821226, 'comment_body': ""That's weird. The test should fail too.\r\n```suggestion\r\n  module->Weight().randu();\r\n```\r\nPerhaps it didn't fail since you didn't change the values of `inSize`, `outSize`, `kernelWidth`, `kernelHeight` (see the comment below)."", 'comment_created': datetime.datetime(2020, 6, 14, 11, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439821258, 'comment_body': 'I suggest to change these values accordingly.', 'comment_created': datetime.datetime(2020, 6, 14, 11, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439821773, 'comment_body': 'Maybe we can do something like this--\r\n```cpp\r\n  template<typename eT>\r\n  void Initialize(arma::Cube<eT>& W,\r\n                  const size_t rows,\r\n                  const size_t cols,\r\n                  const size_t slices)\r\n  {\r\n    W.set_size(rows, cols, slices);\r\n\r\n    for (size_t i = 0; i < slices; i++)\r\n      Initialize(W.slice(i), rows, cols);\r\n  }\r\n```\r\nBut still why it works for `Linear` layer?', 'comment_created': datetime.datetime(2020, 6, 14, 11, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439822227, 'comment_body': 'I am not sure how this will work with the memory pointer constructor. Anyway I suggest to replace `RandomInitialization` by `module-Weight().randu()`.', 'comment_created': datetime.datetime(2020, 6, 14, 11, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439822737, 'comment_body': 'Perhaps someone wants to apply some other init rules like `GlorotInitialization` on weight and keep `bias` to zero. How can we accomplish it? Other init rules also have almost the same implementation.', 'comment_created': datetime.datetime(2020, 6, 14, 12, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439823080, 'comment_body': 'Ohh...yes. I completely forgot this one.\r\nLooking into it now :)', 'comment_created': datetime.datetime(2020, 6, 14, 12, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439823092, 'comment_body': ""> Perhaps someone wants to apply some other init rules like GlorotInitialization on weight and keep bias to zero.\r\n\r\nI didn't get the point,  `module->Weight().randu();` doesn't affect the bias."", 'comment_created': datetime.datetime(2020, 6, 14, 12, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439823189, 'comment_body': '> Other init rules also have almost the same implementation.\r\n\r\nIn that case we need a separate PR for the changes.', 'comment_created': datetime.datetime(2020, 6, 14, 12, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439824402, 'comment_body': "">I didn't get the point, module->Weight().randu(); doesn't affect the bias.\r\n\r\nI mean we do have `x.randu()` from armadillo but how will use other init rules. The other thing which is currently used is initializing both `weight` and `bias` with the same initialization rules. Like we do in `FFN<LossType, InitType>`, it initializes both `weight` and `bias` with the same rule.\r\n\r\nIf we were to just do `module->Weight().randu()` and `module->Bias().randu()`, there was no need for separate methods,\r\nwe can do `module->Parameters().randu()`.\r\n\r\nFrom https://cs231n.github.io/neural-networks-2/\r\n>Initializing the biases. It is possible and common to initialize the biases to be zero since the asymmetry breaking is provided by the small random numbers in the weights. For ReLU non-linearities, some people like to use small constant value such as 0.01 for all biases because this ensures that all ReLU units fire in the beginning and therefore obtain and propagate some gradient. However, it is not clear if this provides a consistent improvement (in fact some results seem to indicate that this performs worse) and it is more common to simply use 0 bias initialization."", 'comment_created': datetime.datetime(2020, 6, 14, 12, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439825827, 'comment_body': 'Maybe because the `weight` here is of size `4x4x1` (kind of matrix). ', 'comment_created': datetime.datetime(2020, 6, 14, 12, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439826603, 'comment_body': 'I get your point, thanks for the clarification.', 'comment_created': datetime.datetime(2020, 6, 14, 12, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 439832323, 'comment_body': ""I didn't think of that earlier. I have made the change as you suggested. Thanks for pointing it out :)\r\nDo you think we should do the same thing for other init rules and perform test over each of them, to check whether it is possible to use other initializers in a similar way for weight initialization?"", 'comment_created': datetime.datetime(2020, 6, 14, 13, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 439834466, 'comment_body': ""> I didn't think of that earlier.\r\n\r\nPerhaps\r\n```c++\r\nW.set_size(rows, cols, slices);\r\n```\r\nwould work fine. I don't think Armadillo reallocates memory if it's not needed.\r\n\r\n> Do you think we should do the same thing for other init rules\r\n\r\nI'm not sure. I think using this function in order to initialize a matrix obtained by the memory pointer constructor could be dangerous. Suppose you pass an incorrect shape by mistake. Then the function will reallocate the matrix.\r\n\r\nThat is you don't need to pass the shape for any preallocated matrix. Perhaps it's better to introduce a special method for preallocated matrices:\r\n```c++\r\nvoid Initialize(arma::Cube<eT>& W)\r\n```\r\n@zoq Let's wait for Marcus'es response.\r\n\r\n> and perform test over each of them\r\n\r\nCurrently you wrote about 4 tests with `RandomInitialization`. You can use different initializers in them. I don't think we need to increase the number of tests."", 'comment_created': datetime.datetime(2020, 6, 14, 14, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 441168180, 'comment_body': 'Adding another method for preallocated matrices sounds like the safest option to me.', 'comment_created': datetime.datetime(2020, 6, 16, 22, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441177336, 'comment_body': 'Do you build with `DEBUG=ON` (compiler optimization off)? ', 'comment_created': datetime.datetime(2020, 6, 16, 22, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441178158, 'comment_body': ""> @zoq Marcus, this might be interesting for you. Why didn't you write the function like the `arma::Mat` specialization\r\n\r\nAt the time I wrote the code I haven't thought about passing a non empty object. I think @mrityunjay-tripathi fix using `set_size` should work in both cases."", 'comment_created': datetime.datetime(2020, 6, 16, 22, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441807099, 'comment_body': 'Let me know if you need any help with the changes.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 442832254, 'comment_body': ""Looks good, but don't forget about other initialization rules. Perhaps it's a good idea to move these changes into a separate PR (it's up to you).\r\n\r\nBesides, perhaps we should revert `set_size()` back and point out the side effects in the documentation."", 'comment_created': datetime.datetime(2020, 6, 19, 13, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 442946756, 'comment_body': ""I agree. I will open a separate PR for that.\r\n\r\nMemory leak is still a problem :( I couldn't hunt down the origin."", 'comment_created': datetime.datetime(2020, 6, 19, 16, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 442975639, 'comment_body': ""Perhaps that's not your fault. Try to sync your fork with the upstream (there's no memory leaks in the main repo)."", 'comment_created': datetime.datetime(2020, 6, 19, 17, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443446251, 'comment_body': ""I'm not sure. Looks like you forgot to change these values. Anyway, it's a minor issue. It's ok as is."", 'comment_created': datetime.datetime(2020, 6, 22, 9, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 443485416, 'comment_body': 'changed it finally :D', 'comment_created': datetime.datetime(2020, 6, 22, 11, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 443817181, 'comment_body': '```suggestion\r\n  double var = 2.0 / double(W.n_rows + W.n_cols);\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 20, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 443817691, 'comment_body': '```suggestion\r\n    // standard deviation = sqrt(2 / rows), i.e. variance = (2 / rows).\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 20, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 443818064, 'comment_body': '```suggestion\r\n    const double variance = 1.0 / (double) W.n_rows;\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 20, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 446211928, 'comment_body': ""@zoq I used the method for pre-allocated matrices in `netwok_init.hpp` and all failing :( I think we should not touch this. The [errors](https://dev.azure.com/mlpack/mlpack/_build/results?buildId=2837&view=logs&j=24d3abe3-ef0b-5deb-3aab-64d839de2c3c&t=b3d23cc5-b695-5043-0f03-2084bf2ff0b5&l=705).\r\n\r\nAnd when I used `W.set_size(rows, cols)`, the tests were passing but there was memory failure which I couldn't trace. I am stuck here.\r\n\r\nTo reiterate the problem -\r\nThere was no `Weight()` method, so I introduced it. We should be able to access or modify the weight. But when trying to modify it using some initialization rule, the `weight` is initialized as expected but those new values are not reflected in `parameters`. It is because the `Initialize()` method of any initializer creates a new object."", 'comment_created': datetime.datetime(2020, 6, 26, 14, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 446396244, 'comment_body': ""> I used the method for pre-allocated matrices in `netwok_init.hpp` and all failing :(\r\n\r\nThat's weird. Perhaps, the matrices weren't allocated.\r\n\r\n> And when I used `W.set_size(rows, cols)`, the tests were passing but there was memory failure which I couldn't trace. I am stuck here.\r\n\r\nYour code doesn't deal with memory explicitly. Perhaps, it's not your fault. Maybe it's a side effect. Let me look into it."", 'comment_created': datetime.datetime(2020, 6, 26, 20, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 446475109, 'comment_body': 'It looks like there is some problem with how some of the tests are made. Because not all tests involving initialization fails in memory check if `W.set_size(rows, cols)` is used.\r\nAlso, how can I perform memory check locally on a single file say, `mlpack/tests/ann_layer_test.cpp`?', 'comment_created': datetime.datetime(2020, 6, 27, 2, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 446478883, 'comment_body': 'Valgrind `./bin/mlpack_test -t ANNLayerTest`', 'comment_created': datetime.datetime(2020, 6, 27, 3, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jeffin143', 'type': 'User'}, {'comment_id': 446486953, 'comment_body': 'Thanks @jeffin143. ', 'comment_created': datetime.datetime(2020, 6, 27, 5, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 446514291, 'comment_body': ""Actually, there's an error (Invalid read, heap-use-after-free) in `QLearningTest/CartPoleWithNStepDQN`. The error also exists in the upstream. GitHub doesn't allow to attach the output of Address Sanitizer. I'll open an issue later. But this PR reveals an error in `DCGANNetworkTest/DCGANMNISTTest`. If you revert back all `if (W.is_empty())`, then it suppresses the error. Looks like incorrect arguments were passed somewhere to the `Initialize()` function.\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 27, 11, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 446514968, 'comment_body': 'Hi, I think the error is documented in #2386 with a probable fix. ', 'comment_created': datetime.datetime(2020, 6, 27, 11, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 446517778, 'comment_body': ""@kartikdutt18 Yeah, that's it, thanks."", 'comment_created': datetime.datetime(2020, 6, 27, 12, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 467193156, 'comment_body': ""Maybe I missed something but I think we can use `Linear<> linear(inSize, outSize)` as well, the idea is we don't have to manually deconstruct the object, which is problematic if one of the conditions fail."", 'comment_created': datetime.datetime(2020, 8, 7, 18, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 467270544, 'comment_body': ""I don't think it matters, but you use `set_size()` everywhere. In my opinion `arma::mat()` should work as well. So, it's up to you.\r\n```suggestion\r\n    W.set_size(rows, cols);\r\n```"", 'comment_created': datetime.datetime(2020, 8, 7, 21, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 467282691, 'comment_body': ""That's an old error! `1 / W.n_rows` is an integer.\r\n```suggestion\r\n    double beta = 0.7 * std::pow(W.n_cols, 1.0 / W.n_rows);\r\n```\r\n\r\nThere's the same error at line 81. I can't put a comment there since you didn't change the line. Could you fix it too?"", 'comment_created': datetime.datetime(2020, 8, 7, 21, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 467290238, 'comment_body': ""I do agree with Marcus. Pointers usually overcomplicate things. It's better to avoid them provided that they're not needed."", 'comment_created': datetime.datetime(2020, 8, 7, 21, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}]","[{'commit_sha': '692ec5cc194cf714b48bd4e10902513748cb49a5', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b0635c78537e16ba6a1b01af4ceff167cb911b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51a2c5cbf0593c809164a873a779db3a24575a60', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70ba996da66f42dd22c6c9760badc57cf6b04a65', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '657dbb97fc86f357f49017c2ef0a68aab83a33a7', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3769f2662f3f2715e3440068117d077547edb3', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80ef5c8d75faa3fea3c0f93dfc1a7c0e53dbd0ef', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7210584fc075635cb4c90537ec9774b0e6f27ab2', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d301134d4fda02daaa69a146da7869055c4798b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f2938ba124b30d06adc588ba301faff4024a5d2', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8297745a7b618edbae6e546b299a8b293d7933c7', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dcb16aa714d2a78c4e5431d42f743b104f18a62', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f47e7927fe3fab1a0ae54100ad9a995781da60be', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8832a8d0cabbb0b3389224f6b1a4e35e593db9b', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19837e163057f17ffd9b1552494619043f9f4151', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00c8603797628721747395c42b69e052c5620ae3', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '735fde7860e8ad4c5348a446f8bd24aa725b6056', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a0befd170a6a5b306790b3aa6366eadec0484f7', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb8f2e66a78b6dce72f11bebee5b7550f2389389', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d53a9fb958775d4595ee5e186f711870dc68d2', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77218e3b5378f89311e8112ec8b5c9895769d662', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfba6c3cd276ea41381e568056340c1078f9669a', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b660df1690827b9aad4c759d7b92eb98df73893a', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6059f796f55780fe69b6dd9e32370cb2698e02d7', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abcddc2f4da50c8111de7805ec531060c56030ad', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dac6dfa7266f261c7f1b507c2391a62a4f06434', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1572f2de646a49a9f3c294025d19545ca1cc6055', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d7c103e543bf923ee6610c8557e4bfc89cc23e5', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbda5f52011cf529c89a3b0590abb063a3aff960', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1ac4a5dd83fc84d129a3486407054be1ca8037c', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf426f7d5421fb914b633bd76fca8de17e01fa8', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87ef276cb04e87d3362807d61b22e00bec977112', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc09183ae598b91d57dc0dc431ef96242fc1a33f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '628548a856a6240d00f8c56b41b4590421c5782f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2ac14f66a51a7a0f3992132546bc934f32d64d', 'committer_username': 'zoq', 'committer_name': 'Marcus Edel', 'committer_email': 'marcus.edel@fu-berlin.de', 'commit_date': datetime.datetime(2013, 4, 20, 12, 45, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '884fe0a5aa68be57ddb02dead6d58391b84df087', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e738097b58e6637fae87b551eacd071da2a8faa', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4104dae42895033903f64ed0ccc01512e6f8c47f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fb07e1aa2cd73f523b72bb1cbdf4f2b757093ac', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f15174657a46e58b251bb255a92b5e8c723ddbcc', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd75c104f2dd938e1439edab8bca5b39b53088c69', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be8caec05d43d7faa9c96e63b633862bd61b8021', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9465119f552428ec5d49c0b106017d393eb4f6a', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
465024725,positional encoding,"Ref: https://arxiv.org/abs/1706.03762
@lozhnikov ",True,2557,https://api.github.com/repos/mlpack/mlpack/pulls/2557,https://github.com/mlpack/mlpack/pull/2557,closed,273,1,6,5,5,3,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-08-08 12:10:20+00:00,2020-08-22 23:55:04+00:00,1251884.0,"14 days, 11:44:44","[{'comment_id': 469563331, 'comment_body': ""Perhaps it's possible to reduce this:\r\n```suggestion\r\n  output = input.each_col() + positionalEncoding;\r\n```"", 'comment_created': datetime.datetime(2020, 8, 12, 21, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 469567046, 'comment_body': 'I think the comments are out of date.', 'comment_created': datetime.datetime(2020, 8, 12, 21, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 469660363, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2020, 8, 13, 2, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}]","[{'commit_sha': '9b5d04568cc89a43757dcb4c18dce16eb9fb65c1', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '028856226816f68c41e231f592a2e12c1890f4cb', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b529a348a61c6feb774ed1055ea13e8fe334e5', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb0f7aa79a71ef102871b56a70f3c886f9846d55', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9481f976bf5f272abe98518f55b28770c60c933a', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
427776018,transformer,"Hello everyone! I've implemented the transformer encoder and decoder. Though there are other dependencies for this PR, I made this PR to get some insights and opinions. Some things still remaining regarding this PR:
- [x] Get PR https://github.com/mlpack/mlpack/pull/2375 merged.
- [x] Implement positional encoding
- [ ] Adding wiki-dataset2
- [x] Adding tests for encoder and decoder
- [ ] Adding documentation for encoder and decoder.
- [ ] Do something useful using this code.",False,16,https://api.github.com/repos/mlpack/models/pulls/16,https://github.com/mlpack/models/pull/16,open,1075,2,10,10,14,42,3,0,"[{'name': 's: keep open'}, {'name': 's: needs review'}, {'name': 't: added feature'}]",2020-06-04 11:39:45+00:00,,0.0,,"[{'comment_id': 435468955, 'comment_body': 'Does d in Model stand for dimension? Maybe we can find a more descriptive name, e.g. `modelDimension`  or `numFeatures`?', 'comment_created': datetime.datetime(2020, 6, 4, 18, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 435470610, 'comment_body': 'Most probably I missed something, so I guess there is a good reason to not put this into the constructor?', 'comment_created': datetime.datetime(2020, 6, 4, 18, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 435651711, 'comment_body': 'Ahh, yes. Because the `Concatenate` layer requires the key matrix (line 64) to be concatenated (line 67 & 68) and how can one assign `key` if object is not yet constructed? (`key` is the output of the Encoder). Though it was not required for `Encoder`, yet I made them separate to maintain the same API. The name of the method might not be a good choice 😁, so I am open to any other name for this method. When I named it, in my mind - ""Avengers! Assemble"" :smiley: ', 'comment_created': datetime.datetime(2020, 6, 5, 2, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 435654769, 'comment_body': 'Yup! Sure. Actually the [paper](https://arxiv.org/abs/1706.03762) used ""d<sub>model</sub>"" everywhere. As mentioned in the argument description, `dModel` is same as `embedDim` (size of each embedding vector). Should I make it `embedDim` (or `embeddingDim` or `embeddingDimension`) as it says more about what actually it is.', 'comment_created': datetime.datetime(2020, 6, 5, 2, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 437674887, 'comment_body': 'Ahh, thanks for the clarification, I like the name.', 'comment_created': datetime.datetime(2020, 6, 9, 19, 43, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 471031709, 'comment_body': ""Regarding your question. If I'm not mistaken, you need to concatenate the output of the Encoder with the previous layer and pass it to `encoderDecoderAttn`. But don't forget the Encoder and the Decoder have different inputs. You need to split a dataset record into two parts: `(input, target)`. You can use the `Subview` layer for that. I tried to implement a rough model [here](https://github.com/mlpack/mlpack/pull/2375#issuecomment-672910701). I think it should provide a clue on your question.\r\n\r\nTell me if you have any questions. It's not that easy."", 'comment_created': datetime.datetime(2020, 8, 15, 20, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 471108938, 'comment_body': ""The problem is neither we can pass more than one inputs to `FFN` nor to the `Concat` layer. I can understand the use of Concat for repeating query into `[query query query]` but how will we use it to get `[query key key]` or \r\n`[query key value]`? I think defining the `Backward` and `Gradient` function manually is not a bad option (It will use less number of layers also). Like if we define single encoder and single decoder block as a layer. Then the complete encoder could be `N` deep copies of the encoder block and similarly for the complete decoder. \r\nI think I'm not understanding what is going on in your mind :( Could you please clarify how two inputs are flowing in the `encoderDecoderAttn` part? And how their backpropagated errors will reach to appropriate place?"", 'comment_created': datetime.datetime(2020, 8, 16, 12, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 471109783, 'comment_body': ""> The problem is neither we can pass more than one inputs to FFN nor to the Concat layer.\r\n\r\nOf course we can. Technically we pass jest one input to each layer. But we can use the `Subview` layer in order to split the input in two parts. Then we'll process each input separately. Look at the example https://github.com/mlpack/mlpack/pull/2375#issuecomment-672910701.\r\n\r\n> Could you please clarify how two inputs are flowing in the encoderDecoderAttn part?\r\n\r\nI think the example https://github.com/mlpack/mlpack/pull/2375#issuecomment-672910701 should clarify that.\r\n\r\n> I think defining the Backward and Gradient function manually is not a bad option (It will use less number of layers also)\r\n\r\nYes, the backward propagation will require less number of layers. But the implementation itself would be more complex."", 'comment_created': datetime.datetime(2020, 8, 16, 12, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475140924, 'comment_body': ""Shouldn't it be \\` instead of `'`?\r\n```suggestion\r\n   *               `embedDim` in `MultiheadAttention` layer.\r\n```"", 'comment_created': datetime.datetime(2020, 8, 22, 21, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475141538, 'comment_body': ""Do we need to pass template arguments to each layer we add? I mean something like `InputDataType`, `OutputDataType` and so on.\r\n\r\nIf so, perhaps, it'll be useful to declare the required data types:\r\n```c++\r\ntypedef Concat<InputDataType, OutputDataType> ConcatType;\r\ntypedef Sequential<InputDataType, OutputDataType, false> SequentialType;\r\n// and so forth\r\n```"", 'comment_created': datetime.datetime(2020, 8, 22, 21, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475141638, 'comment_body': 'I thought you prefer this overload:\r\n```suggestion\r\n    encoder->Add<LayerNorm<>>(dModel * srcSeqLen);\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 21, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475142030, 'comment_body': '```suggestion\r\n    encoder->Add<LayerNorm<>>(dModel * srcSeqLen);\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 21, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475142487, 'comment_body': ""Do you need this layer? I think it's ok to begin with the attention block."", 'comment_created': datetime.datetime(2020, 8, 22, 21, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475142785, 'comment_body': ""There's a slight problem. You need to free the allocated memory. If you insert the encoder into the transformer, then the parent layer/model will do it automatically. Otherwise you need to do it manually. I'm not sure what's the right way to solve it."", 'comment_created': datetime.datetime(2020, 8, 22, 22, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475143335, 'comment_body': '```suggestion\r\n   *        `embedDim` in `MultiheadAttention` layer.\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 22, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475143863, 'comment_body': '```suggestion\r\n    decoder->Add<LayerNorm<>>(dModel * tgtSeqLen);\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 22, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475143952, 'comment_body': 'Looks like the comments are out of date.', 'comment_created': datetime.datetime(2020, 8, 22, 22, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475144002, 'comment_body': 'The comments are out of date.', 'comment_created': datetime.datetime(2020, 8, 22, 22, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475144024, 'comment_body': 'See the comment above.', 'comment_created': datetime.datetime(2020, 8, 22, 22, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475144144, 'comment_body': '```suggestion\r\n   *               `embedDim` in `MultiheadAttention` layer.\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475144237, 'comment_body': 'The comments are out of date.', 'comment_created': datetime.datetime(2020, 8, 22, 22, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475145699, 'comment_body': ""Unfortunately, it's not that easy. Each attention block should take its own output from the encoder. That is the encoder broadcasts the key matrix `numDecoderLayers` times. Look at lines 150-157 and 179-204 of [my implementation](https://gist.github.com/lozhnikov/aabb9231c0bb72528ff64a4f9bc19923).\r\n\r\nOtherwise you won't be able to put the attention block after the FFN block (the dimensions are incorrect). However, you can simplify my implementation a bit: you can concatenate the result of the FFN block with the result of the encoder:\r\n```c++\r\nfor (size_t n = 0; n < numLayers; ++n)\r\n{\r\n  // The last layer doesn't need to concatenate its output with the decoder output.\r\n  if (n + 1 == numLayers)\r\n  {\r\n    decoder->Add(attentionBlock);\r\n    decoder->Add(positionWiseFFNBlock);\r\n    break;\r\n  }\r\n  Sequential<>* decoderBlock = new Sequential<>();\r\n  decoderBlock->Add(attentionBlock);\r\n  decoderBlock->Add(positionWiseFFNBlock);\r\n\r\n  Concat<>* smth = new Concat<>();\r\n  smth->Add(decoderBlock);\r\n  smth->Add<Subview<>>();\r\n\r\n  decoder.Add(smth);\r\n}\r\n```\r\nI think this code will work as well."", 'comment_created': datetime.datetime(2020, 8, 22, 22, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475145803, 'comment_body': 'Tiny style issue. According to the style guide all variables should begin with a lowercase.\r\n```suggestion\r\n  for (size_t n = 0; n < numLayers; ++n)\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 22, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475145837, 'comment_body': '```suggestion\r\n  for (size_t n = 0; n < numLayers; ++n)\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 22, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475145965, 'comment_body': 'Possible memory loss. See the comment above.', 'comment_created': datetime.datetime(2020, 8, 22, 22, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475146204, 'comment_body': 'Looks like `transformer` has only one layer. In this case you can simplify it.', 'comment_created': datetime.datetime(2020, 8, 22, 22, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475187988, 'comment_body': 'Maybe we can avoid using templates for matrix types in models repository? What do you think?', 'comment_created': datetime.datetime(2020, 8, 23, 8, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475188253, 'comment_body': 'Right. I somehow again missed this 🤦', 'comment_created': datetime.datetime(2020, 8, 23, 8, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475189478, 'comment_body': 'Well, the darknet model has the same problem:) (https://github.com/mlpack/models/blob/master/models/darknet/darknet.hpp). So, perhaps we can leave it as is for now.', 'comment_created': datetime.datetime(2020, 8, 23, 8, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475210338, 'comment_body': ""I think this provides a way to add encoder as a layer by doing something like this--\r\n```\r\n  mlpack::ann::TransformerEncoder<> encoder(numLayers, srcSeqLen,\r\n      dModel, numHeads, dimFFN, dropout);\r\n\r\n  FFN<> model;\r\n\r\n  model.Add(encoder.Model());\r\n  model.Add<Linear<>>(dModel * srcSeqLen, vocabSize);\r\n  model.Add<LogSoftMax<>>();\r\n```\r\nIt's of no use if not used like this. So probably I think it will be eventually used in some FFN or Sequential. I think no one is going to create an instance of the TransformerEncoder class and not using it in any model."", 'comment_created': datetime.datetime(2020, 8, 23, 11, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475211792, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2020, 8, 23, 12, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475211832, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2020, 8, 23, 12, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475211990, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2020, 8, 23, 12, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475212736, 'comment_body': ""I agree that it's supposed to be added to a model. Nevertheless this approach is unsafe. I suggest to add an argument to the constructor:\r\n```c++\r\nEncoder::Encoder(/* some encoder args */, bool ownMemory) :\r\n    ownMemory(ownMemory)\r\n{\r\n}\r\n\r\nEncoder::~Encoder()\r\n{\r\n  if (ownMemory)\r\n    delete encoder;\r\n}\r\n```\r\n\r\nBy the way, looks like the `Sequential<>` layer doesn't delete its sublayers by default:\r\n```c++\r\ntemplate <typename InputDataType, typename OutputDataType, bool Residual,\r\n          typename... CustomLayers>\r\nSequential<\r\n    InputDataType, OutputDataType, Residual, CustomLayers...>::~Sequential()\r\n{\r\n  if (!model && ownsLayers)\r\n  {\r\n    for (LayerTypes<CustomLayers...>& layer : network)\r\n      boost::apply_visitor(deleteVisitor, layer);\r\n  }\r\n}\r\n```\r\nsince `model = true` by default. I think we should explicitly state `model = false` in the constructor:\r\n```c++\r\nencoder = new Sequential<InputDataType, OutputDataType, false>(false);\r\n```\r\nWe don't need to change the `Concat` and `AddMerge` objects since their constructors states `model = false` by default.\r\n\r\n\r\nAnd the last thing: we have to implement copy and move constructors and assignment operators since this class contains a raw pointer. Otherwise we could explicitly make them forbidden:\r\n```c++\r\nEncoder& operator=(const Encoder&) = delete;\r\n/* and so forth */\r\n```"", 'comment_created': datetime.datetime(2020, 8, 23, 12, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475214951, 'comment_body': 'Completely agree.\r\n\r\n>And the last thing: we have to implement copy and move constructors and assignment operators\r\n\r\nYes. Sure.', 'comment_created': datetime.datetime(2020, 8, 23, 12, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 475215973, 'comment_body': "">> And the last thing: we have to implement copy and move constructors and assignment operators\r\n\r\n> Yes. Sure.\r\n\r\nI think it's ok to delete them (I mean `= delete`) for now."", 'comment_created': datetime.datetime(2020, 8, 23, 12, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 490719216, 'comment_body': ""The constructor doesn't have this argument."", 'comment_created': datetime.datetime(2020, 9, 18, 5, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 490722143, 'comment_body': ""The argument can't be constant:) The idea is that the constructor moves data from the argument.\r\n```suggestion\r\n  TransformerDecoder(TransformerDecoder&& ) = delete;\r\n```"", 'comment_created': datetime.datetime(2020, 9, 18, 6, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 490722639, 'comment_body': ""There's also the move assignment operator.\r\n```c++\r\n  /**\r\n   * Move assignment operator.\r\n   */\r\n  TransformerDecoder& operator = (TransformerDecoder&& ) = delete;\r\n```"", 'comment_created': datetime.datetime(2020, 9, 18, 6, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 490733828, 'comment_body': ""Shouldn't the second argument be equal to `srcSeqLen`?"", 'comment_created': datetime.datetime(2020, 9, 18, 6, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 490740039, 'comment_body': ""I think this is incorrect. It's the decoder bottom input. But the encoder-decoder attention block should receive the output of the decoder bottom.\r\n```suggestion\r\n    encDecAttnInput->Add(decoderBlockBottom);\r\n```"", 'comment_created': datetime.datetime(2020, 9, 18, 6, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 490744621, 'comment_body': ""You can't pass the same block twice (see the comment to `encDecAttnInput`). Looks like we need to change the model a bit. I have to go now. I'll come up with the idea in the evening."", 'comment_created': datetime.datetime(2020, 9, 18, 7, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}]","[{'commit_sha': '437fdebb0432a6727c8e1661400e032feefec67a', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8bc78d98318c913eabf1954969fe5bebb4c44e', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec965bb86f815868d90ac358485348746dccf45d', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e43f886b49fc7b18d6675b59cb842d318fe2c137', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55de04561f7dfd731ea4bc6fb5c89d082d64214e', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a253a6a9e0c4a11ef4e882e24a9bcb68e6e7faf7', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbdd4ff2a028cad8c75673ff81f84546f8f2d9ea', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaec6479fc09bfc4913bbbf3359a763faf38d470', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '858f262bdd22bdc0984ac5345ff90b852ab53c1e', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '368f82e94027b5049da3baa71957f0a9f323aded', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
469349146,BERT,,False,30,https://api.github.com/repos/mlpack/models/pulls/30,https://github.com/mlpack/models/pull/30,open,469,3,8,11,2,5,3,0,"[{'name': 's: keep open'}, {'name': 's: needs review'}, {'name': 't: added feature'}]",2020-08-18 10:05:51+00:00,,0.0,,"[{'comment_id': 475647930, 'comment_body': ""If I understand correctly, it's not a network layer. It's just a preprocessor. In this case you don't need the template arguments."", 'comment_created': datetime.datetime(2020, 8, 24, 14, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475650906, 'comment_body': 'I think `std::unordered_map` could be faster.\r\n```suggestion\r\n                      std::unordered_map<std::string, size_t>& vocabulary)\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 14, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475651428, 'comment_body': '```suggestion\r\n      Log::Fatal() << ""Unable to open vocabulary file!"" << std::endl;\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 14, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475651560, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 14, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 475652395, 'comment_body': ""You don't need to close the file explicitly since it'll be closed in the destructor."", 'comment_created': datetime.datetime(2020, 8, 24, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}]","[{'commit_sha': '33a982f3fbee68d3996301bd6a6a3558dbbfc5b8', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50497e871bcb0540d85370583a968308ff9bf42f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd67d5cc9afde8be29c6425b20a5260a48f6dd6a9', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9363fe5a56eadcf3d6f09599ab33754edc8c46e3', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929dba6f22b4e64cfcf28b7ee9e2c2ef93d23562', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278dfc76241cfc329fec0f0a89cab8a925b71db7', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39da2c84505e79725c3c70f15efa50fda238c265', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2be79a0bead5e9cf739cfb1a9cfe97bcf9353d0f', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12156fd58ad6e4aa7e478f6996419dc06b72c73e', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd731575f794c6b4c39ab65efbe3dfbf9bb7edc76', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8df3c3e486dd9b52d85cded72461706f07d3a615', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7
439670662,BLEU score,,True,2477,https://api.github.com/repos/mlpack/mlpack/pulls/2477,https://github.com/mlpack/mlpack/pull/2477,closed,430,1,4,5,7,86,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-06-25 05:21:00+00:00,2020-07-27 11:51:50+00:00,2788250.0,"32 days, 6:30:50","[{'comment_id': 445321467, 'comment_body': 'We can use `boost::string_view` instead of `std::string` here and many other place too', 'comment_created': datetime.datetime(2020, 6, 25, 5, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jeffin143', 'type': 'User'}, {'comment_id': 445321984, 'comment_body': '```suggestion\r\n  std::vector<size_t> matchesByOrder(maxOrder, 0), possibleMatchesByOrder(maxOrder, 0);\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 5, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jeffin143', 'type': 'User'}, {'comment_id': 445322864, 'comment_body': '```suggestion\r\n    for (const size_t& value : precisions)\r\n    {\r\n      pLogSum += (1.0 / maxOrder) * std::log(value);\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 5, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jeffin143', 'type': 'User'}, {'comment_id': 445325891, 'comment_body': ""I've used \r\n```cpp\r\ntypedef typename TranslationCorpusType::value_type WordVector;\r\n``` \r\nstatement in line number 52. I think it's up to the user what to be used."", 'comment_created': datetime.datetime(2020, 6, 25, 6, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445326357, 'comment_body': 'I think it will exceed 80 characters!?', 'comment_created': datetime.datetime(2020, 6, 25, 6, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445328059, 'comment_body': ""It is ok to give user a choice, but here overlap variable doesn't have any relation with the user, I mean it is not exposed to user\r\n\r\n`map<<vector<string>>, size_t> overlap` , it would be unnecessary copy of whole string when inserting the value in overlap map\r\n\r\nThat's my POV, may be you can wait for someone to give a better insight\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 25, 6, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jeffin143', 'type': 'User'}, {'comment_id': 445328259, 'comment_body': 'But I think it will be better to add tests for both types :)', 'comment_created': datetime.datetime(2020, 6, 25, 6, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445328979, 'comment_body': '>it would be unnecessary copy of whole string when inserting the value in overlap map\r\n\r\nOk I will see this. Thanks for clarifying.', 'comment_created': datetime.datetime(2020, 6, 25, 6, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445697307, 'comment_body': 'Can you add a comment for each template parameter?', 'comment_created': datetime.datetime(2020, 6, 25, 16, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 445697534, 'comment_body': 'Can you add a comment for the `maxOrder` parameter?', 'comment_created': datetime.datetime(2020, 6, 25, 16, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 445698209, 'comment_body': 'Looks like this can be removed?', 'comment_created': datetime.datetime(2020, 6, 25, 16, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 445700658, 'comment_body': 'Can you use `{}` for multiline cases?', 'comment_created': datetime.datetime(2020, 6, 25, 16, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 445701279, 'comment_body': 'Do you mind to add some comments on some important lines? ', 'comment_created': datetime.datetime(2020, 6, 25, 16, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 445741116, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445741200, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445741602, 'comment_body': 'Ohh right. I forgot to remove that.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445741699, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445743851, 'comment_body': 'Sure, I will do that by tomorrow.', 'comment_created': datetime.datetime(2020, 6, 25, 18, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445964870, 'comment_body': ""@zoq: I've added a few comments as you suggested. Let me know if I need to add any further comments."", 'comment_created': datetime.datetime(2020, 6, 26, 4, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 445976177, 'comment_body': ""I think you'll also have to add a class description, like in the other metrics"", 'comment_created': datetime.datetime(2020, 6, 26, 5, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 446116204, 'comment_body': ""I've added the class description but not sure whether the latex commands are correct or not."", 'comment_created': datetime.datetime(2020, 6, 26, 11, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 446422404, 'comment_body': 'Yes, that looks great, super helpful to understand the code.', 'comment_created': datetime.datetime(2020, 6, 26, 21, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 448602280, 'comment_body': ""I suggest to use `\\left` and `\\right`. They work perfectly well if you're not going to insert line breaks between them\r\n```suggestion\r\n * BLEU SCORE = bp \\cdot \\exp \\left(\\sum_{n=1}^{N} w \\log p_n \\right) \\\\\r\n```"", 'comment_created': datetime.datetime(2020, 7, 1, 20, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448605034, 'comment_body': ""Perhaps, it should be `\\text{where,}`. The font is different in the text mode.\r\n\r\nAlso, can we insert line breaks `\\\\` into `@f[` and `@f]`. Do you now how exactly Doxygen interprets them? It could be\r\n```tex\r\n\\begin{equation}\r\n% You can't break line here unless you use something like the aligned environment.\r\n\\end{equation}\r\n```\r\nor it could be\r\n```tex\r\n\\begin{multline}\r\n% You can break line here.\r\n\\end{multline}\r\n```\r\nor something else."", 'comment_created': datetime.datetime(2020, 7, 1, 20, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448605936, 'comment_body': 'TeX will remove spaces here (because of the math mode). You should use `\\text{}` here or write spaces using `\\ ` or `\\quad` or something else.', 'comment_created': datetime.datetime(2020, 7, 1, 20, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448609589, 'comment_body': ""TeX doesn't show brace, you need to write `\\` before them. I mean\r\n```tex\r\n   * So, the \\f$ referenceCorpus = \\{reference_1, reference_2, \\ldots \\} \\f$\r\n```\r\nAnd it's better to write `\\ldots` instead of `...`. Actually, it's one symbol, instead of three symbols.\r\n\r\nThere is a number of several similar issues below."", 'comment_created': datetime.datetime(2020, 7, 1, 20, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448613223, 'comment_body': ""Shouldn't it be always a container of `ElemType`s? like `std::vector<ElemType>` or any other container? I thought there was a special construction for that. I don't remember exactly, I think something like\r\n```c++\r\ntemplate <typename ElemType = float,\r\n          class PrecisionType<ElemType> = std::vector<ElemType>\r\n>\r\n```\r\n(I'm not sure it's correct, but there was something like that)"", 'comment_created': datetime.datetime(2020, 7, 1, 20, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448614035, 'comment_body': ""I think you don't need `= std::vector<std::string>` here, the compiler should be able to detect it automatically."", 'comment_created': datetime.datetime(2020, 7, 1, 21, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448617782, 'comment_body': 'I think you can simplify it\r\n```suggestion\r\n        mergedRefNGramCounts[it->first] = std::max(it->second,\r\n            mergedRefNGramCounts[it->first]);\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 21, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448618927, 'comment_body': ""Perhaps it's better to write\r\n```suggestion\r\n        if (translationNGramCounts.find(it->first) != translationNGramCounts.end())\r\n```\r\nOf course if it can't be equal to zero."", 'comment_created': datetime.datetime(2020, 7, 1, 21, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448619565, 'comment_body': 'Can the size be equal to zero? Do we need to check it?', 'comment_created': datetime.datetime(2020, 7, 1, 21, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 448701510, 'comment_body': ""```tex\r\n\\begin{multline}\r\n% You can break line here.\r\n\\end{multline}\r\n```\r\nLooks like the thing to be used here :D Also, the Latex Documentation checker was complaining something about `\\{text}`, I forgot what it was.\r\nI'm not well versed in TeX. I just generated those commands from a TeX editor. 😁"", 'comment_created': datetime.datetime(2020, 7, 2, 1, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448701714, 'comment_body': 'Correcting it...', 'comment_created': datetime.datetime(2020, 7, 2, 1, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448702085, 'comment_body': 'Hmm. I will look into it.', 'comment_created': datetime.datetime(2020, 7, 2, 1, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448702348, 'comment_body': ""Right. Here it's not needed."", 'comment_created': datetime.datetime(2020, 7, 2, 1, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448708092, 'comment_body': ""The `overlap` contains either no elements or contains elements with size at least `1`, and upto `maxOrder`. Because this is the length of the sequence of order `1` or `2` ..., and till `maxOrder`. It simply won't scan sequences of size `0`.\r\n\r\nAnd if overlap itself has size `0`, then it won't enter inside the for loop.\r\nI think it's not needed. Let me know what do you think?"", 'comment_created': datetime.datetime(2020, 7, 2, 2, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448708865, 'comment_body': 'I am not sure, but when I was comparing them, it turned out `.find()` was a little bit slower. Though the sizes were not large. I will test this again.', 'comment_created': datetime.datetime(2020, 7, 2, 2, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448711704, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 7, 2, 2, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448722393, 'comment_body': '```cpp\r\ntemplate <typename ElemType = float, typename PrecisionType = std::vector<ElemType>>\r\n```\r\nis working fine.', 'comment_created': datetime.datetime(2020, 7, 2, 3, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 448735117, 'comment_body': 'How can I know, what is being rendered from the Documentation? (visualizing the output)', 'comment_created': datetime.datetime(2020, 7, 2, 4, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 449226512, 'comment_body': 'I think either\r\n```\r\nmake doc\r\n```\r\nor\r\n```\r\nmake mlpack_doc\r\n```\r\nshould generate HTML docs and LaTeX sources.', 'comment_created': datetime.datetime(2020, 7, 2, 19, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 449227138, 'comment_body': ""Yes, in this case the check isn't needed."", 'comment_created': datetime.datetime(2020, 7, 2, 19, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 449786384, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2020, 7, 4, 16, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 449786602, 'comment_body': '@lozhnikov Fixed this one also. Now it renders like [this](https://pasteboard.co/Jg7ajJ7.png).', 'comment_created': datetime.datetime(2020, 7, 4, 16, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 453091893, 'comment_body': 'Tiny issue:\r\n```suggestion\r\n *   \\exp \\left(1-\\frac{1}{ratio}\\right) & \\text{otherwise}\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 21, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 453094399, 'comment_body': ""Isn't it better to use Markdown here:\r\n```\r\n`(3 times)\r\nrefCorpus = \r\n...\r\n`(3 times)\r\n```\r\nsince it looks like a code rather than a formula.\r\n"", 'comment_created': datetime.datetime(2020, 7, 10, 21, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 453095672, 'comment_body': ""I was wondering do you need the ordering here? Perhaps it's better to use `std::unordered_map` instead? It has `O(1)` search, insertion and removal rather than `O(N log N)` as `std::map`."", 'comment_created': datetime.datetime(2020, 7, 10, 21, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 453095852, 'comment_body': 'The same question about `std::unordered_map`.', 'comment_created': datetime.datetime(2020, 7, 10, 22, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 453144859, 'comment_body': 'Sure. Thank you very much for the suggestion.', 'comment_created': datetime.datetime(2020, 7, 11, 2, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 453144950, 'comment_body': 'I think you are right. Let me try it.', 'comment_created': datetime.datetime(2020, 7, 11, 2, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 453146868, 'comment_body': 'Done. That looks good :)', 'comment_created': datetime.datetime(2020, 7, 11, 3, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 454325887, 'comment_body': 'Tiny issue: missing dot at the end.\r\n```suggestion\r\n *         double, float).\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 12, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454326498, 'comment_body': 'I thought we should write `e.g.`:\r\n```suggestion\r\n * @tparam ElemType Type of the quantities in BLEU, e.g. (long double,\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454327016, 'comment_body': '```suggestion\r\n *         e.g. (std::vector<float>, std::vector<double>, or any such boost or\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 12, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454340457, 'comment_body': ""Shouldn't you serialize `maxOrder` here?"", 'comment_created': datetime.datetime(2020, 7, 14, 13, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454342086, 'comment_body': ""I suggest to replace `returns` by `calculates` or something. I think it's a bit more precise.\r\n```suggestion\r\n   * calculates other BLEU metrics (brevity penalty, translation length, reference\r\n```"", 'comment_created': datetime.datetime(2020, 7, 14, 13, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454352410, 'comment_body': ""I forgot to say that `std::unordered_map` requires a special hash function for `WordVector`. You could either add a specialization of `std::hash` like `std::hash<WordVector>` or define a separate class like\r\n```c++\r\nclass SomeHasher {\r\n public:\r\n  size_t operator(const SomeWordVector& vec) const\r\n  { ... }\r\n};\r\n```\r\nIn this case you have to declare the function as follows\r\n```c++\r\ntemplate <typename ElemType, typename PrecisionType>\r\ntemplate <typename WordVector, typename WordVectorHasher =  std::hash<WordVector>>\r\nstd::unordered_map<WordVector, size_t, WordVectorHasher> BLEU<ElemType, PrecisionType>::GetNGrams(\r\n```\r\nThe same thing applies to `Evaluate()`.\r\n\r\nI am not sure it's a good idea since it makes the use of `Evaluate()` dramatically difficult. So, it's up to you. Perhaps, it's better to leave as is (with `std::map`). It could be interesting to compare the performance and take into account all pros and cons."", 'comment_created': datetime.datetime(2020, 7, 14, 13, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454356641, 'comment_body': 'I think it could be incorrect if `order > segment.size() + 1`.', 'comment_created': datetime.datetime(2020, 7, 14, 13, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454365055, 'comment_body': 'I was wondering can a paragraph be empty? Dow we need yo add something like\r\n```c++\r\nif (min == std::numeric_limits<size_t>::max())\r\n  min = 0;\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 13, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454441397, 'comment_body': 'Tiny issue: according to the [style guide](https://github.com/mlpack/mlpack/wiki/DesignGuidelines#constructor-initialization-lists) you need 4 spaces here.', 'comment_created': datetime.datetime(2020, 7, 14, 15, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454442220, 'comment_body': ""Tiny issue: according to the [style guide](https://github.com/mlpack/mlpack/wiki/DesignGuidelines#method-declarations) you need 4 spaces here. I didn't point out the same issues below."", 'comment_created': datetime.datetime(2020, 7, 14, 15, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454442980, 'comment_body': 'I think it should be a reference:\r\n```suggestion\r\n    for (auto& t : *refIt)\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 15, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454443230, 'comment_body': '```suggestion\r\n    for (auto& t : *refIt)\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 15, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454445411, 'comment_body': ""Isn't it better to initialize the variable at the declaration?\r\n```suggestion\r\n    const std::map<WordVector, size_t> translationNGramCounts = GetNGrams(*trIt);\r\n```\r\nAnd I think you could add the `const` modifier."", 'comment_created': datetime.datetime(2020, 7, 14, 15, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454454422, 'comment_body': ""If I am not mistaken this code could add `([it->first, 0)` to `translationNGramCounts`. I don't think it's a good idea to modify `translationNGramCounts` without a reason. I suggest the following code:\r\n```c++\r\nauto translationIt = translationNGramCounts.find(it->first);\r\n\r\nif (translationIt != translationNGramCounts.end())\r\n{\r\n  overlap[it->first] = std::min(translationIt->second, it->second);\r\n}\r\n```\r\nMoreover, this code allows you to add the `const` modifier to the declaration of `translationNGramCounts`."", 'comment_created': datetime.datetime(2020, 7, 14, 15, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454458300, 'comment_body': ""That's a good error. `possibleMatches` is always non-negative. On the other side `order` can be greater than `trIt->size() + 1`. I suggest the following fix:\r\n```suggestion\r\n      if (order <= trIt->size() + 1)\r\n        possibleMatchesByOrder[order - 1] += trIt->size() - order + 1;\r\n```"", 'comment_created': datetime.datetime(2020, 7, 14, 15, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454462005, 'comment_body': ""It could be better to move this check outside of the loop. On the other hand the number of iterations is small. So, it's up to you."", 'comment_created': datetime.datetime(2020, 7, 14, 15, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454506730, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 7, 14, 17, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 454511668, 'comment_body': '>It could be interesting to compare the performance and take into account all pros and cons.\r\n\r\nI will look into it but I am not sure how much time it can take :\\', 'comment_created': datetime.datetime(2020, 7, 14, 17, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 454526256, 'comment_body': 'Hmm... I think it\'s better to add an assert statement like --\r\n```cpp\r\nLog::Assert(segment.size() >= maxOrder);\r\n```\r\nor,\r\n```cpp\r\nif (segment.size() < maxOrder)\r\n  Log::Fatal(""Segment size cannot be smaller than \'maxOrder\'."")\r\n```\r\nor,\r\n```cpp\r\nif (segment.size() < maxOrder)\r\n{\r\n  Log::Warn << ""\'maxOrder\' greater than segment size. Setting \'maxOrder\' to segment size..."";\r\n  maxOrder = segment.size();\r\n}\r\n```\r\nWhat\'s your opinion?', 'comment_created': datetime.datetime(2020, 7, 14, 17, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 454532382, 'comment_body': ""I think it's a normal situation. You don't need to raise an exception in this case. I guess something like this could work:\r\n```c++\r\nfor (size_t order = 1; order < maxOrder + 1; ++order)\r\n{\r\n  for (size_t i = 0; i + order < segment.size() + 1; ++i)\r\n```\r\nBasically, it's the same check, but it avoids overflows."", 'comment_created': datetime.datetime(2020, 7, 14, 17, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454534375, 'comment_body': ""> I will look into it but I am not sure how much time it can take :\\\r\n\r\nThen leave as is. It's not a high priority task."", 'comment_created': datetime.datetime(2020, 7, 14, 17, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 454548056, 'comment_body': 'That makes sense. It took me some time to understand the difference 😅', 'comment_created': datetime.datetime(2020, 7, 14, 18, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 454555940, 'comment_body': 'Practically it should not be but yes the condition can occur. So I think it will be better to add the statement.', 'comment_created': datetime.datetime(2020, 7, 14, 18, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 454982151, 'comment_body': 'I think it can be `if (order < trIt->size() + 1)`? Because when `order = trIt->size() + 1` then `trIt->size() - order + 1` will be `0` and useless addition operation is performed. Also we will be performing one less condition checking in every for loop.', 'comment_created': datetime.datetime(2020, 7, 15, 11, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 455026982, 'comment_body': 'Yes, sure.', 'comment_created': datetime.datetime(2020, 7, 15, 12, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 456303586, 'comment_body': 'Actually, the method does something now.\r\n```suggestion\r\n  //! Serialize the metric.\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 8, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 456328507, 'comment_body': 'Tiny issue:\r\n```suggestion\r\n    // overlap: It holds those keys (sequence of order n) which are common to\r\n```', 'comment_created': datetime.datetime(2020, 7, 17, 9, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 456332871, 'comment_body': ""I think that's incorrect since `mergedRefNGramCounts.count(it->first)` always equals to `1`. If I remember right I proposed the following implementation\r\n```suggestion\r\n      auto mergedIt = mergedRefNGramCounts.find(it->first);\r\n      if (mergedIt != mergedRefNGramCounts.end())\r\n      {\r\n        // If the key (sequence of order n) is present in both translation\r\n        // corpus as well as reference corpus, then the minimum number of\r\n        // counts it has occurred in any is considered.\r\n        overlap[it->first] = std::min(mergedIt->second, it->second);\r\n      }\r\n```\r\nWhy didn't you apply it? I think it's correct."", 'comment_created': datetime.datetime(2020, 7, 17, 9, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 456334416, 'comment_body': ""There's no need to convert to `double`, `possibleMatchesByOrder[i]` is an integer.\r\n```suggestion\r\n      if (possibleMatchesByOrder[i] > 0)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 17, 9, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 456391461, 'comment_body': 'Ohh...there was no reason, I was just experimenting them 😅 and got busy in fixing errors in other PRs. My bad.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 456908676, 'comment_body': ""You replace 2 times `mergedRefNGramCounts` by `translationNGramCounts` and vice versa. I think both variants are correct:) However, I guess it's faster to loop over the smallest container. Does `mergedRefNGramCounts` usually smaller than `translationNGramCounts`?"", 'comment_created': datetime.datetime(2020, 7, 19, 13, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 456917098, 'comment_body': ""I'm not sure but I felt that `mergedRefNGramCounts` may be larger because it comes out of multiple documents/references while `translationNGramCounts` come from the predicted/generated text (you can see the parameter description for `referenceCorpus` and `translationCorpus`). I will clear this today with some benchmarking on slightly larger tests. (Though I feel what I'm thinking is correct)."", 'comment_created': datetime.datetime(2020, 7, 19, 14, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 456923801, 'comment_body': ""Yes! In fact, iterating over `translationNGramCounts` is faster. I got the following results (in the current test sets)--\r\n\r\nWhen iterating over `mergedNGramCounts`-\r\n```\r\nTime taken (without smoothing function): 0.000766\r\nTime taken (with smoothing function): 0.001878\r\n```\r\n\r\nWhile iterating over `translationNGramCounts`-\r\n```\r\nTime taken (without smoothing function): 0.000339\r\nTime taken (with smoothing function): 0.000355\r\n```\r\nThere is a significant difference even on small test. I don't think we need to do any further tests."", 'comment_created': datetime.datetime(2020, 7, 19, 15, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 456927320, 'comment_body': 'Yes, I agree.', 'comment_created': datetime.datetime(2020, 7, 19, 16, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}, {'comment_id': 458826166, 'comment_body': ""Clang writes a warning here:\r\n```\r\nsrc/mlpack/core/metrics/bleu_impl.hpp:74:16: warning: inequality comparison result unused [-Wunused-comparison]\r\n  for (; refIt != referenceCorpus.cend(), trIt != translationCorpus.cend();\r\n         ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\nAnd I think `clang`'s right. If I remember right the comma operator returns the last value.\r\n```suggestion\r\n  for (; refIt != referenceCorpus.cend() && trIt != translationCorpus.cend();\r\n      ++refIt, ++trIt)\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 7, 22, 14, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lozhnikov', 'type': 'User'}]","[{'commit_sha': 'd5a37f28c1afc5e5e866ea6a201eb9f8389ed783', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92f9adfc07687fe6647c5a0cdd5bb85d98106aac', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eedbbf69a766892944b74a7a84744d1f43aaeade', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '218b5f318b0b78458c9a357410dc2c7a2b6e4e62', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f7a2c61b828823a7442f72e55e24be34319e852', 'committer_username': 'mrityunjay-tripathi', 'committer_name': 'mrityunjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 17, 16, 7, 23, tzinfo=datetime.timezone.utc)}]",mrityunjay,35535378,,User,,46,,16,7

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1592,4978,183,321,30199,24,11,15,"[{'id': 465024725, 'number': 2557, 'closed': datetime.datetime(2020, 8, 22, 23, 55, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 12, 10, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1251884.0, 'time_delta': '14 days, 11:44:44', 'additions': 273, 'deletions': 1, 'state': 'closed'}, {'id': 451102717, 'number': 2518, 'closed': datetime.datetime(2020, 7, 17, 22, 12, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 12, 50, 22, tzinfo=datetime.timezone.utc), 'time_taken': 33711.0, 'time_delta': '9:21:51', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 447224077, 'number': 2508, 'closed': datetime.datetime(2020, 8, 22, 21, 52, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 4, 58, 4, tzinfo=datetime.timezone.utc), 'time_taken': 3776055.0, 'time_delta': '43 days, 16:54:15', 'additions': 479, 'deletions': 12, 'state': 'closed'}, {'id': 444257088, 'number': 2500, 'closed': datetime.datetime(2020, 10, 31, 20, 21, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 4, 8, 30, 12, tzinfo=datetime.timezone.utc), 'time_taken': 10324249.0, 'time_delta': '119 days, 11:50:49', 'additions': 656, 'deletions': 1, 'state': 'closed'}, {'id': 443186014, 'number': 2492, 'closed': datetime.datetime(2020, 7, 2, 2, 16, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 2, 16, 17, tzinfo=datetime.timezone.utc), 'time_taken': 25.0, 'time_delta': '0:00:25', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 439670662, 'number': 2477, 'closed': datetime.datetime(2020, 7, 27, 11, 51, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 5, 21, tzinfo=datetime.timezone.utc), 'time_taken': 2788250.0, 'time_delta': '32 days, 6:30:50', 'additions': 430, 'deletions': 1, 'state': 'closed'}, {'id': 418072128, 'number': 2404, 'closed': datetime.datetime(2020, 8, 11, 13, 56, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 15, 27, 53, tzinfo=datetime.timezone.utc), 'time_taken': 7684095.0, 'time_delta': '88 days, 22:28:15', 'additions': 558, 'deletions': 65, 'state': 'closed'}, {'id': 415024018, 'number': 2398, 'closed': datetime.datetime(2020, 8, 5, 9, 25, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 8, 3, 22, tzinfo=datetime.timezone.utc), 'time_taken': 7711391.0, 'time_delta': '89 days, 6:03:11', 'additions': 149, 'deletions': 53, 'state': 'closed'}, {'id': 405119771, 'number': 2375, 'closed': datetime.datetime(2020, 8, 24, 10, 49, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 17, 13, 3, tzinfo=datetime.timezone.utc), 'time_taken': 11137598.0, 'time_delta': '128 days, 21:46:38', 'additions': 1253, 'deletions': 1, 'state': 'closed'}, {'id': 401413231, 'number': 2364, 'closed': datetime.datetime(2020, 4, 17, 12, 45, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 9, 13, 7, 44, tzinfo=datetime.timezone.utc), 'time_taken': 689839.0, 'time_delta': '7 days, 23:37:19', 'additions': 37, 'deletions': 5, 'state': 'closed'}, {'id': 398151862, 'number': 2353, 'closed': datetime.datetime(2020, 4, 7, 5, 11, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 12, 44, 6, tzinfo=datetime.timezone.utc), 'time_taken': 318435.0, 'time_delta': '3 days, 16:27:15', 'additions': 31, 'deletions': 5, 'state': 'closed'}, {'id': 398112799, 'number': 2351, 'closed': datetime.datetime(2020, 5, 19, 22, 26, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 11, 15, 32, tzinfo=datetime.timezone.utc), 'time_taken': 4014650.0, 'time_delta': '46 days, 11:10:50', 'additions': 241, 'deletions': 8, 'state': 'closed'}, {'id': 393550778, 'number': 2339, 'closed': datetime.datetime(2020, 4, 1, 18, 23, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 25, 12, 9, 10, tzinfo=datetime.timezone.utc), 'time_taken': 627278.0, 'time_delta': '7 days, 6:14:38', 'additions': 86, 'deletions': 46, 'state': 'closed'}, {'id': 387552771, 'number': 2285, 'closed': datetime.datetime(2020, 3, 13, 2, 40, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 1, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2509.0, 'time_delta': '0:41:49', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 373749248, 'number': 2199, 'closed': datetime.datetime(2020, 3, 18, 6, 43, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 11, 16, 16, 26, tzinfo=datetime.timezone.utc), 'time_taken': 3075999.0, 'time_delta': '35 days, 14:26:39', 'additions': 212, 'deletions': 0, 'state': 'closed'}, {'id': 373309314, 'number': 2197, 'closed': datetime.datetime(2020, 5, 22, 20, 6, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 19, 25, 47, tzinfo=datetime.timezone.utc), 'time_taken': 8815236.0, 'time_delta': '102 days, 0:40:36', 'additions': 244, 'deletions': 0, 'state': 'closed'}, {'id': 373298687, 'number': 2196, 'closed': datetime.datetime(2020, 7, 4, 10, 16, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 18, 59, 45, tzinfo=datetime.timezone.utc), 'time_taken': 12496614.0, 'time_delta': '144 days, 15:16:54', 'additions': 336, 'deletions': 0, 'state': 'closed'}, {'id': 369236955, 'number': 2167, 'closed': datetime.datetime(2020, 2, 10, 18, 33, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 30, 19, 6, 22, tzinfo=datetime.timezone.utc), 'time_taken': 948429.0, 'time_delta': '10 days, 23:27:09', 'additions': 309, 'deletions': 0, 'state': 'closed'}, {'id': 367615134, 'number': 2162, 'closed': datetime.datetime(2020, 1, 28, 18, 45, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 17, 32, 36, tzinfo=datetime.timezone.utc), 'time_taken': 90800.0, 'time_delta': '1 day, 1:13:20', 'additions': 245, 'deletions': 0, 'state': 'closed'}]"
248572894,models,mlpack/models,C++,41,34,24,25,456,17,1,12,"[{'id': 469349146, 'number': 30, 'closed': None, 'created': datetime.datetime(2020, 8, 18, 10, 5, 51, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 469, 'deletions': 3, 'state': 'open'}, {'id': 427776018, 'number': 16, 'closed': None, 'created': datetime.datetime(2020, 6, 4, 11, 39, 45, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1075, 'deletions': 2, 'state': 'open'}]"
