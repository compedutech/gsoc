pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
610278260,Create mfa_backup_code.rst,"Fixes #163, draft design for mfa backup code

- [ ] cargo fmt has been run
- [ ] cargo clippy has been run
- [ ] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [x] design document included (if relevant)
",True,402,https://api.github.com/repos/kanidm/kanidm/pulls/402,https://github.com/kanidm/kanidm/pull/402,closed,63,0,1,3,1,15,0,0,[],2021-04-07 02:20:27+00:00,2021-04-12 01:02:40+00:00,427333.0,"4 days, 22:42:13","[{'comment_id': 608307044, 'comment_body': 'look at kanidmd/src/lib/utils.rs readable_password_from_random :) ', 'comment_created': datetime.datetime(2021, 4, 7, 3, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 608307315, 'comment_body': 'Or self modification if they are in the correct policy group. I think this policy actually could already be done pretty easily via a membership to a backup_code_allowed group and the existing access profile infrastructure. ', 'comment_created': datetime.datetime(2021, 4, 7, 3, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 608307617, 'comment_body': 'I\'d check how github does this - since the backup code is ""once use"" and get\'s scratched off (deleted) after use, then we also need:\r\n\r\n* An async message to remove that backup code from the account after usage\r\n* Multiple backup codes.\r\n\r\nGithub for example issues batches of 5 or 10 at a time that can be printed. I think we should do similar. ', 'comment_created': datetime.datetime(2021, 4, 7, 3, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 608307730, 'comment_body': 'This sounds more like a password reset flow? I think this may be out of scope .... ', 'comment_created': datetime.datetime(2021, 4, 7, 3, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 608307841, 'comment_body': 'Yes, the work flow here should only be users self requesting I think. In other cases I think that a full credential reset on account lockout may be better .... ', 'comment_created': datetime.datetime(2021, 4, 7, 3, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 608638919, 'comment_body': 'I see your point. I suppose this should be separated into a ""password reset"" flow.', 'comment_created': datetime.datetime(2021, 4, 7, 13, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 608641932, 'comment_body': 'Github issues a batch of 16 codes. When a code is used, it is no longer valid (i.e. you can only use the remaining 15 codes).\r\nWhen user generates a new batch of backup codes, the previous codes will no longer be valid.  \r\n', 'comment_created': datetime.datetime(2021, 4, 7, 13, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 608643335, 'comment_body': ""One question though: Why do we need a separate async message? Couldn't we just do it in the same transaction?"", 'comment_created': datetime.datetime(2021, 4, 7, 13, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 609168001, 'comment_body': 'Yep, that\'s the thought I had is to have a batch of codes and you use one at a time. \r\n\r\nWell, the thing about the auth process is that currently while it\'s in a single transaction lock, that transaction is NOT a writeable transaction, and the intent is to make it so that authentications can proceed in parallel.\r\n\r\nBecause the server can also operate as a single thread, and there are a limited set of db tickets, that also prevents opening nested transactions too.\r\n\r\nSo the correct way here to perform the ""write"" to invalidate the code is to send a message to the async task queue - you can see how this is done for ""on login pw upgrades"". A similar process could be used here, but when the recovery code is used and is found correct, we immediately send the async task to deactivate it. Theoretically, this means there is a small window between ""use of the backup code"" and the async action being processed to actually cause the invalidation, but this window is short. So I think it\'s an acceptable compromise here. ', 'comment_created': datetime.datetime(2021, 4, 8, 0, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 609168845, 'comment_body': 'Well, password reset or an account setup flow I think. Because any password reset, those passwords/tokens need a time limit on their usage and they are a single factor, where these backup mfa codes can\'t have one since the user has to be able to use them from anypoint from now to the future, and they are to ""replace"" a lost TOTP/Webauthn token so they are still part of an MFA setup. \r\n', 'comment_created': datetime.datetime(2021, 4, 8, 0, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 609347234, 'comment_body': 'Yep I was wondering what if another agent login with the same code while the async action is being processed. \r\nThanks for clearing that up!', 'comment_created': datetime.datetime(2021, 4, 8, 6, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 610230963, 'comment_body': ""I'd remove TOTP/HOTP here, as I don't think these are viable options here. "", 'comment_created': datetime.datetime(2021, 4, 9, 0, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 610231372, 'comment_body': ""'saved in the database in a non-reversible format (KDF)'"", 'comment_created': datetime.datetime(2021, 4, 9, 0, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 610231712, 'comment_body': 'We also need to comment on how we need rate limiting/bruteforce protection against these codes similar to what exists for passwords. ', 'comment_created': datetime.datetime(2021, 4, 9, 0, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 610232043, 'comment_body': '`idm_account_mfa_backup_code_self_priv` I think is the better name for this. For other users to admin backup codes for others it should be `idm_account_mfa_backup_code_manage_priv`. See kanidmd/src/lib/constants/entries.rs for examples of existing groups for privileges. ', 'comment_created': datetime.datetime(2021, 4, 9, 0, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}]","[{'commit_sha': 'b4804cb2653c41fe5e54a58c2c538d24566ef35b', 'committer_username': 'victorcwai', 'committer_name': 'vcwai', 'committer_email': 'victorcwai@gmail.com', 'commit_date': datetime.datetime(2014, 10, 27, 2, 44, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83e5a58d541e64596277065e9559d04889634f6d', 'committer_username': 'victorcwai', 'committer_name': 'vcwai', 'committer_email': 'victorcwai@gmail.com', 'commit_date': datetime.datetime(2014, 10, 27, 2, 44, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4e048c116e4fe4d09a8f7e6cb09e5050d9cb242', 'committer_username': 'victorcwai', 'committer_name': 'vcwai', 'committer_email': 'victorcwai@gmail.com', 'commit_date': datetime.datetime(2014, 10, 27, 2, 44, 21, tzinfo=datetime.timezone.utc)}]",vcwai,9410593,victorcwai@gmail.com,User,,52,,24,11
663195307,163 account recovery code,"Fixes #163 (WIP) 
Looking for feedback!
Draft code for using backup code to login and how to create it. I mostly follow the code for doing authentication with totp/password generation.

- [x] cargo fmt has been run
- [ ] cargo clippy has been run
- [x] cargo test has been run and passes
- [ ] book chapter included (if relevant)
- [ ] design document included (if relevant)
",True,469,https://api.github.com/repos/kanidm/kanidm/pulls/469,https://github.com/kanidm/kanidm/pull/469,closed,941,57,14,5,2,34,0,0,[],2021-06-07 05:47:40+00:00,2021-06-25 02:39:05+00:00,1543885.0,"17 days, 20:51:25","[{'comment_id': 646293974, 'comment_body': ""This should probably use a new type like BackupCodes on the `SetCredentialResponse` enum so it's really clear what these are. "", 'comment_created': datetime.datetime(2021, 6, 7, 6, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646294587, 'comment_body': 'These should be under :cid or `.at(""/:id/_credential/primary"")`. This is for future multiple credential handling', 'comment_created': datetime.datetime(2021, 6, 7, 6, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646294780, 'comment_body': ""Shouldn't this be BackupCodes (plural, append an S here). "", 'comment_created': datetime.datetime(2021, 6, 7, 6, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646295491, 'comment_body': 'we should reject (not panic), so this would change to `Result<Self, OperationError>` to represent that errorstate', 'comment_created': datetime.datetime(2021, 6, 7, 6, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646295693, 'comment_body': ""I don't think this is valid to do this convert, since a backup code exists to recover from lost webauthn/totp."", 'comment_created': datetime.datetime(2021, 6, 7, 6, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646295808, 'comment_body': 'Should return a Err() instead. ', 'comment_created': datetime.datetime(2021, 6, 7, 6, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646296612, 'comment_body': ""I think you should uncomment this, it's good :) \r\n\r\nIf you make it so only PasswordMfa takes backup code, it's a much simpler code path. You could probabry consider returning Err() when not PMFA here though so that we respond that the transform is invalid though. "", 'comment_created': datetime.datetime(2021, 6, 7, 6, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646297020, 'comment_body': ""I think this check won't be needed if you change the code above to only set backup code if totp/webauthn are some. (which they have to be if you are password MFA anyway). "", 'comment_created': datetime.datetime(2021, 6, 7, 6, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646297097, 'comment_body': 'plural ', 'comment_created': datetime.datetime(2021, 6, 7, 6, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646297695, 'comment_body': 'You need to extend and test this state machine flow in the tests at the bottom of this file. This is a security critical code path, so requires *extensive* testing. However, the logic here appears to be correct IMO. ', 'comment_created': datetime.datetime(2021, 6, 7, 6, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646298060, 'comment_body': 'Why not just iter() and .join? ', 'comment_created': datetime.datetime(2021, 6, 7, 6, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646298349, 'comment_body': ""Shouldn't we return a Vec<String> here to the client, and it's up to the front end utility to format this? Given this is structured data after all, and we don't want the client to have to str split on, when they can just process the json which is structured. "", 'comment_created': datetime.datetime(2021, 6, 7, 6, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646298948, 'comment_body': ""Minor, but can't you do:\r\n\r\n```\r\n(1..8).iter().map(|_| {\r\n    readable_password_from_random()\r\n})\r\n.collect()\r\n```\r\n\r\nThere is some type-hint magic in rust that pre-hints the capacity to the hashset during the collect so you don't need to do it manually. "", 'comment_created': datetime.datetime(2021, 6, 7, 6, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646299696, 'comment_body': 'Consider here adding a `DelayedAction` from kanidmd/src/lib/idm/delayed.rs which will remove code String from account with uuid. See ""WebauthnCounterIncrement` for inspiration. ', 'comment_created': datetime.datetime(2021, 6, 7, 6, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646300062, 'comment_body': 'Also consider adding a test into `kanidm_client/tests/proto_v1_test.rs` which actually tests these api interactions to create and retrieve the codes, then to use them from an external client perspective. ', 'comment_created': datetime.datetime(2021, 6, 7, 6, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646300490, 'comment_body': 'You can remove anything if you try hard enough :) ', 'comment_created': datetime.datetime(2021, 6, 7, 6, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 646300808, 'comment_body': 'You may want this to be a number of how many codes are remaining so they know they may need to reset it soon if they are low. ', 'comment_created': datetime.datetime(2021, 6, 7, 6, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 647884461, 'comment_body': 'How will we use :cid?\r\nAlso, it looks like there is no REST API for RemoveTotp/RemoveWebAuthn? I think we need an API to delete backup code from PasswordMFA(...). in case the backup codes are leaked or etc. \r\nAnd I wonder whether the user should be able to view the codes again after generating it. (I think normally it requires the user to do a MFA, regardless of having session or not.)', 'comment_created': datetime.datetime(2021, 6, 9, 0, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 647890272, 'comment_body': ""Isn't having CredentialType::PasswordMfa(...) implies either totp/webauthn exists?"", 'comment_created': datetime.datetime(2021, 6, 9, 0, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 647920513, 'comment_body': 'iter() returns &String and there is no join method for HashSet::Iter :(', 'comment_created': datetime.datetime(2021, 6, 9, 2, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 650591939, 'comment_body': 'For now this is okay :) but still good for it to be in a struct incase we add moe. ', 'comment_created': datetime.datetime(2021, 6, 13, 23, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 650591987, 'comment_body': 'No I think we should still have it as seperate incase we extend or change the type in the future. ', 'comment_created': datetime.datetime(2021, 6, 13, 23, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 650592058, 'comment_body': ""No, because this function will take ownership of the backup_codes so it's correct to NOT use a reference here (if you used a reference you'd need to .clone() ) "", 'comment_created': datetime.datetime(2021, 6, 13, 23, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 650592093, 'comment_body': 'See above :) ', 'comment_created': datetime.datetime(2021, 6, 13, 23, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 650592397, 'comment_body': 'There is a problem here. Imagine we have two logins, and they each use a seperate backup code, A and B. We\'ll have two delayed actions queued. One set where A is NOT present, one where B is not present. So we\'ll ""lose"" one of the code removals. \r\n\r\nAlso imagine the person reset\'s their backup codes, before this delayed action is processed. We would then process his and ""reset back"" all their codes! \r\n\r\nThe correct action here is not to clone the codes to send in the delayed action, but to send the *code that was used*. and then the delayed action looks at the set within a write txn and removes that code, if present, or if not present, skips (because the codes were reset). \r\n\r\nThis avoids your cloning issue too :) \r\n\r\ntl;dr - \r\n```\r\nBackupCodeRemoval {\r\n    target_uuid: Uuid,\r\n    code_to_remove: String\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 6, 13, 23, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 650592555, 'comment_body': 'Does this generate 8 codes? Just checking. ', 'comment_created': datetime.datetime(2021, 6, 13, 23, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651068072, 'comment_body': 'Good catch. So when the delayed action is processed, I should retrieve the backup codes and remove `code_to_remove` from it, right? ', 'comment_created': datetime.datetime(2021, 6, 14, 15, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 651074481, 'comment_body': ""It inserts 8 codes. But on second thought, if the `readable_password_from_random()` returns the same string, then the HashSet won't have 8 codes."", 'comment_created': datetime.datetime(2021, 6, 14, 15, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 651080651, 'comment_body': 'I will change it to insert until set.size() >= 8', 'comment_created': datetime.datetime(2021, 6, 14, 16, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'victorcwai', 'type': 'User'}, {'comment_id': 651358211, 'comment_body': ""In the future there is a plan to have multiple credentials per account, but it's not fully fleshed out, but we want the routes to reflect this possible change for now. "", 'comment_created': datetime.datetime(2021, 6, 15, 0, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651358561, 'comment_body': ""Just make it 0..8, that's clearer .... Also readable_password_from_random returns a new random PW each call. "", 'comment_created': datetime.datetime(2021, 6, 15, 0, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651358661, 'comment_body': 'Correct! :D ', 'comment_created': datetime.datetime(2021, 6, 15, 0, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 651358826, 'comment_body': 'Ahhh yes, your right, I misread :) ', 'comment_created': datetime.datetime(2021, 6, 15, 0, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}, {'comment_id': 657541813, 'comment_body': ""That's fine, you just have to deque here and check that the removal message *was* sent. "", 'comment_created': datetime.datetime(2021, 6, 24, 0, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Firstyear', 'type': 'User'}]","[{'commit_sha': '3b3a68fdc0f6aaf77702f4594849e0475f9dabf6', 'committer_username': 'victorcwai', 'committer_name': 'vcwai', 'committer_email': 'victorcwai@gmail.com', 'commit_date': datetime.datetime(2014, 10, 27, 2, 44, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b329998437474632d3fe1d50b981241426ee3f51', 'committer_username': 'victorcwai', 'committer_name': 'vcwai', 'committer_email': 'victorcwai@gmail.com', 'commit_date': datetime.datetime(2014, 10, 27, 2, 44, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7861ef478e20a0b4d2f12e8ef2f91aca3da94ac5', 'committer_username': 'victorcwai', 'committer_name': 'vcwai', 'committer_email': 'victorcwai@gmail.com', 'commit_date': datetime.datetime(2014, 10, 27, 2, 44, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f937a84e6ca44c372247efb6d16b21792059c6d2', 'committer_username': 'victorcwai', 'committer_name': 'vcwai', 'committer_email': 'victorcwai@gmail.com', 'commit_date': datetime.datetime(2014, 10, 27, 2, 44, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0c4c20396f800de3c5f7ba4f5356001093b4f64', 'committer_username': 'victorcwai', 'committer_name': 'vcwai', 'committer_email': 'victorcwai@gmail.com', 'commit_date': datetime.datetime(2014, 10, 27, 2, 44, 21, tzinfo=datetime.timezone.utc)}]",vcwai,9410593,victorcwai@gmail.com,User,,52,,24,11

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
168782501,kanidm,kanidm/kanidm,Rust,172,2550,21,87,2029,186,15,9,"[{'id': 663195307, 'number': 469, 'closed': datetime.datetime(2021, 6, 25, 2, 39, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 5, 47, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1543885.0, 'time_delta': '17 days, 20:51:25', 'additions': 941, 'deletions': 57, 'state': 'closed'}, {'id': 650281698, 'number': 451, 'closed': datetime.datetime(2021, 5, 23, 23, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 19, 53, 10, tzinfo=datetime.timezone.utc), 'time_taken': 184832.0, 'time_delta': '2 days, 3:20:32', 'additions': 23, 'deletions': 3, 'state': 'closed'}, {'id': 624831017, 'number': 425, 'closed': datetime.datetime(2021, 5, 5, 4, 38, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 28, 4, 13, 53, tzinfo=datetime.timezone.utc), 'time_taken': 606280.0, 'time_delta': '7 days, 0:24:40', 'additions': 176, 'deletions': 81, 'state': 'closed'}, {'id': 610278260, 'number': 402, 'closed': datetime.datetime(2021, 4, 12, 1, 2, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 7, 2, 20, 27, tzinfo=datetime.timezone.utc), 'time_taken': 427333.0, 'time_delta': '4 days, 22:42:13', 'additions': 63, 'deletions': 0, 'state': 'closed'}, {'id': 601300675, 'number': 394, 'closed': datetime.datetime(2021, 3, 31, 1, 19, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 4, 45, 23, tzinfo=datetime.timezone.utc), 'time_taken': 419621.0, 'time_delta': '4 days, 20:33:41', 'additions': 227, 'deletions': 25, 'state': 'closed'}]"
