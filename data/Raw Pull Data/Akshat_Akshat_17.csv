pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1415319534,test-backend: Enable single-threaded profiling when thread count is unspecified.,"If the number of threads is not specified while profiling then use a single thread. This is because profiling across multiple threads (earlier default behaviour) may obscure the accurate measurement of which functions are the most costly due to thread blocking.

More context: https://chat.zulip.org/#narrow/stream/3-backend/topic/test-backend.20performance/near/1601293.",True,26165,https://api.github.com/repos/zulip/zulip/pulls/26165,https://github.com/zulip/zulip/pull/26165,closed,6,1,1,1,1,1,1,0,[{'name': 'size: S'}],2023-06-30 19:37:35+00:00,2023-07-02 23:18:59+00:00,186084.0,"2 days, 3:41:24","[{'comment_id': 1248335795, 'comment_body': 'We can use `elif` and `else` here for less indentation.', 'comment_created': datetime.datetime(2023, 6, 30, 23, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'PIG208', 'type': 'User'}]","[{'commit_sha': '04ad2b434426574b9476d97f279006bbaf8aa5ab', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
1396832664,message_view_header: Fix bad rendering of stream links in description.,"This bad rendering was the result of unwanted css applied in the stream description. In message view header, the stream link (title) we have defined has css defined but the markdown rendered stream link in stream description had the same class resulting in unwanted css applied to it.

Fixes: #25961.
",True,26050,https://api.github.com/repos/zulip/zulip/pulls/26050,https://github.com/zulip/zulip/pull/26050,closed,4,4,3,1,10,2,5,0,"[{'name': 'bug'}, {'name': 'area: search'}, {'name': 'priority: high'}, {'name': 'size: S'}, {'name': 'integration review'}]",2023-06-17 16:57:56+00:00,2023-07-10 20:47:22+00:00,2000966.0,"23 days, 3:49:26","[{'comment_id': 1252499605, 'comment_body': ""Let's name it `message-header-stream-settings-button`."", 'comment_created': datetime.datetime(2023, 7, 5, 3, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 1257343536, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 7, 8, 19, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}]","[{'commit_sha': '5b12af7f555d9c2d521b7fef63f6bfdd1b05401b', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
1369449194,narrow: Fix topic highlighting issue with apostrophes in search results.,"This commit addresses the issue where the topic highlighting in search results was offset by one character when an apostrophe was present. The problem stemmed from the disparity in SQL-style HTML escaping used to obtain topic_matches and the escaping performed by Django utils or other libraries for apostrophes (').

sql_escape | django_escape
-----------+---------------
   `&#39;`   |     `&#x27;`

To resolve this, a manual replacement was implemented to achieve a similar HTML escape result.

Fixes: #25633.",True,25818,https://api.github.com/repos/zulip/zulip/pulls/25818,https://github.com/zulip/zulip/pull/25818,closed,76,12,3,1,5,11,6,0,"[{'name': 'bug'}, {'name': 'area: search'}, {'name': 'size: L'}, {'name': 'area: message feed (UI)'}, {'name': 'buddy review'}, {'name': 'mentor review'}]",2023-05-29 18:28:13+00:00,2023-08-16 00:29:21+00:00,6760868.0,"78 days, 6:01:08","[{'comment_id': 1209510587, 'comment_body': ""Thanks for tracking this down. Doing string replacements after escaping can often be dangerous from a security standpoint, though I think it's probably correct in this case. \r\n\r\nGiven the [escaping algorithm](https://docs.python.org/3/library/html.html) [used by Django](https://docs.djangoproject.com/en/4.2/ref/utils/#module-django.utils.html), I think this might be OK.\r\n\r\n@andersk FYI, is there a better way to do this without reimplementing one of these? I don't see a parameter in the Python one for how to do escaping, or anything like that."", 'comment_created': datetime.datetime(2023, 5, 29, 18, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1210733283, 'comment_body': 'There is no “SQL-style HTML escaping”. The `func.escape_html` used in `zerver/lib/narrow.py` is a reference to a custom function that we defined ourselves.\r\n  https://github.com/zulip/zulip/blob/f45a6a6d995c0c935491734153e245201a5ed207/zerver/migrations/0001_initial.py#L61-L63\r\n\r\n“Any other library” is misleading—there are many other libraries that do escaping in many different ways. Django itself switched from `&#39;` to `&#x27;` [in Django 3.0](https://docs.djangoproject.com/en/3.0/releases/3.0/#miscellaneous).', 'comment_created': datetime.datetime(2023, 5, 30, 19, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 1210738329, 'comment_body': 'It’d be more robust to change the SQL query to return the HTML-escaped topic name, escaped with the same function as the one used for `topic_matches`, so that we don’t have to carefully make two different escaping methods consistent with each other.', 'comment_created': datetime.datetime(2023, 5, 30, 19, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 1210799714, 'comment_body': '@timabbott @andersk let me how good is the idea to use the connection object each time we execute the `get_search_fields` function.', 'comment_created': datetime.datetime(2023, 5, 30, 20, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1210826888, 'comment_body': 'No, don’t add new SQL queries. The *original* SQL queries in `zerver.lib.narrow` should be changed to add this additional column.', 'comment_created': datetime.datetime(2023, 5, 30, 21, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 1211030153, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 5, 31, 2, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1224894650, 'comment_body': 'Can you add a block comment here explaining how the topic escaping logic works end-to-end? It\'s pretty important, and I\'d like to make sure we address clearly questions like ""Does `process_fts_updates` need to do something special to agree with this?""', 'comment_created': datetime.datetime(2023, 6, 9, 23, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1226898781, 'comment_body': 'Added the comment in the code addressing these questions.', 'comment_created': datetime.datetime(2023, 6, 12, 16, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1263158098, 'comment_body': '@akshatdalton can you reply with how you resolved this and the other comments about escaping strategy?', 'comment_created': datetime.datetime(2023, 7, 14, 0, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1268538492, 'comment_body': 'I updated my [commit message](https://github.com/zulip/zulip/pull/25818/commits/b6d550368f47a6a278020b5a86c57c1ff6c9cc3c).\r\n\r\n```\r\nTo fix this SQL query is changed to return the HTML-escaped\r\ntopic name generated by the function `func.escape_html`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 18, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1268539633, 'comment_body': ""I've also added a [comment block](https://github.com/zulip/zulip/pull/25818/files#diff-55c7496b687a8de1d5046bcea7ed5f9f78b50f2db9bdfe87df31fec3b6ca125bR961-R977) in the code."", 'comment_created': datetime.datetime(2023, 7, 19, 18, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}]","[{'commit_sha': 'b6d550368f47a6a278020b5a86c57c1ff6c9cc3c', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
1463955036,Refactor: Use `add_narrow_conditions` in `messages_in_narrow_backend`.,"The `messages_in_narrow_backend` function was directly calling `NarrowBuilder` instead of utilizing the
`add_narrow_conditions` method like `fetch_messages` does. This behaviour was not combing any search operands together as it happens inside the `add_narrow_conditions`.

Fixes: https://chat.zulip.org/#narrow/stream/3-backend/topic/messages_in_narrow_backend.20calling.20NarrowBuilder.20directly/near/1611193.",True,26429,https://api.github.com/repos/zulip/zulip/pulls/26429,https://github.com/zulip/zulip/pull/26429,closed,37,15,2,1,5,4,1,0,[{'name': 'size: L'}],2023-08-05 21:22:15+00:00,2023-08-15 20:18:11+00:00,860156.0,"9 days, 22:55:56","[{'comment_id': 1285265000, 'comment_body': 'Should we just use `.mappings()` instead of `.fetchall()`, so that we don\'t have to set the local variables conditionally, and just pass `row[""rendered_content""]` and etc. directly to `get_search_fields`?', 'comment_created': datetime.datetime(2023, 8, 6, 21, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'PIG208', 'type': 'User'}, {'comment_id': 1286144819, 'comment_body': 'That seems like potentially a good idea, yeah.', 'comment_created': datetime.datetime(2023, 8, 7, 16, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1287471561, 'comment_body': 'updated the changes.', 'comment_created': datetime.datetime(2023, 8, 8, 17, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1287513451, 'comment_body': ""Thanks for the update. Just a nit: should we inline these to the `get_search_fields`, so that we don't need to define these variables?"", 'comment_created': datetime.datetime(2023, 8, 8, 18, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'PIG208', 'type': 'User'}]","[{'commit_sha': 'd03b2b39a2ffddbac8c2d73f01164ddd84420b61', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
707651707,typeahead_helper: Update typeahead priority order logic for recipients.,"Check the comments for the updated logic.

This update was necessary as two users generally had
different typeahead list in stream-topic messages, like
for User1, he may have target_user (who is a recent sender)
in his typeahead list but for another User2, it may not
be the same. In most of these situations, users are most
likely to tag the recent senders.

Moreover, if a user types: @ - then wildcard mentions used
to appear on top. This was in some sense implied that
we want to encourage the users to use wildcard mentions
more often which is not true.

**Testing plan:** <!-- How have you tested? -->

Added/modified test cases.

",False,19554,https://api.github.com/repos/zulip/zulip/pulls/19554,https://github.com/zulip/zulip/pull/19554,open,397,54,6,2,8,0,3,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'completion candidate'}]",2021-08-10 20:04:44+00:00,,0.0,,[],"[{'commit_sha': '0bf8b99d4618462399014148cee2d9be38c1c21b', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fb34e2f12893e9cc50fc95bf0e7ba936bcdc77a', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
586086912,markdown: Re-enable backslash escape inline pattern.,"This commit re-enables backslash escape inline pattern.

Fixes #2401.

<!-- What's this PR for?  (Just a link to an issue is fine.) -->


**Testing plan:** <!-- How have you tested? -->
New test cases are added.",False,17511,https://api.github.com/repos/zulip/zulip/pulls/17511,https://github.com/zulip/zulip/pull/17511,open,256,51,6,4,25,8,7,0,"[{'name': 'bug'}, {'name': 'area: markdown'}, {'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'post release'}, {'name': 'buddy review'}, {'name': 'mentor review'}]",2021-03-06 15:49:11+00:00,,0.0,,"[{'comment_id': 594021034, 'comment_body': ""How did you pick 102?  Might be worth commenting on how that's done in python-markdown upstream."", 'comment_created': datetime.datetime(2021, 3, 15, 3, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 624560806, 'comment_body': 'Simpler:\r\n\r\n```python\r\nself.ESCAPED_CHARS = list(string.punctuation)\r\n```', 'comment_created': datetime.datetime(2021, 5, 1, 20, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 624561450, 'comment_body': 'We don’t need a custom escape function.\r\n\r\n```suggestion\r\n        return html.escape(super().unescape(m))\r\n```', 'comment_created': datetime.datetime(2021, 5, 1, 20, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 624563720, 'comment_body': 'This change seems wrong; this backslash belongs to TeX.\r\n\r\n#18342', 'comment_created': datetime.datetime(2021, 5, 1, 20, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 624563865, 'comment_body': 'This change also seems wrong; this backslash belongs to TeX.', 'comment_created': datetime.datetime(2021, 5, 1, 20, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 624564197, 'comment_body': 'I think this should not be renamed, as this still performs the operation that upstream calls “unescape”; it just also fixes a bug by adding a missing escape operation.', 'comment_created': datetime.datetime(2021, 5, 1, 20, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 635441951, 'comment_body': ""I don't think this change belongs in the Tex priority change commit."", 'comment_created': datetime.datetime(2021, 5, 19, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aero31aero', 'type': 'User'}, {'comment_id': 635445549, 'comment_body': ""I'll do a clean push, resolving all the conflicts."", 'comment_created': datetime.datetime(2021, 5, 19, 17, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}]","[{'commit_sha': '360f55e5bbbba3a4f33d5a9b62a72c49533aebb9', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e3281f2dcb659215bd77f7db1fbc5a3c20ead9d', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb703457e94bf2b60f7281d990ef482023837d3f', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a3999fd086bf930bb54f706c79bb4fc9414454', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
1356853266,narrow: Add support for anchoring messages by date.,"This adds a new `anchor_date` parameter which needs to be used in conjunction with the `anchor` parameter set to `date` value. It allows to anchor the view to the messages that are closest to the specified searched date (provided via `anchor_date`).

Fixes: #25436.

<!-- Describe your pull request here.-->

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",False,25677,https://api.github.com/repos/zulip/zulip/pulls/25677,https://github.com/zulip/zulip/pull/25677,open,409,14,15,3,7,35,5,0,"[{'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'post release'}, {'name': 'buddy review'}, {'name': 'mentor review'}]",2023-05-19 09:15:13+00:00,,0.0,,"[{'comment_id': 1203042307, 'comment_body': ""We probably don't want to add these in this file, since the whole point is to have a real example input, and this parameter should not be used with that value of anchor."", 'comment_created': datetime.datetime(2023, 5, 23, 21, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1203043086, 'comment_body': 'Why can it only be applied at the end?', 'comment_created': datetime.datetime(2023, 5, 23, 21, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1203043439, 'comment_body': ""What does this `extract` part do? It might deserve an explanatory comment on what this implements, since it's not a pattern we use often.\r\n\r\nAlso, if you can get the actual database query that this generates, and run `EXPLAIN ANALYZE` on the query in a `manage.py dbshell`, it'd be nice to see the query plan this uses. Here's the block to uncomment to get the query:\r\n```\r\n        ## Uncomment the following to get all database queries logged to the console                    \r\n        # 'django.db': {                                                                                \r\n        #     'level': 'DEBUG',                                                                         \r\n        #     'handlers': ['console'],                                                                  \r\n        #     'propagate': False,                                                                       \r\n        # },                                                                                            \r\n```"", 'comment_created': datetime.datetime(2023, 5, 23, 21, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1203045127, 'comment_body': ""Would it make sense to do the `not anchor_date` check inside `parse_anchor_date_value`? I'm not sure if that'd be cleaner or not.\r\n\r\nI kinda feel like we should only be parsing `anchor_date` if `anchor` was set in a way such that it should be used."", 'comment_created': datetime.datetime(2023, 5, 23, 21, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1203048165, 'comment_body': ""We should add a `**Changes**` entry documenting the API change with a feature level bump; check out the new application feature tutorial for a guide on this process.\r\n\r\nI think this should also explicitly state that datetimes that do not include a timezone will be interpreted as UTC... assuming that's the behavior we intend."", 'comment_created': datetime.datetime(2023, 5, 23, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1203049461, 'comment_body': 'This should be edited to clearly specify the boundary conditions, like we do for `first_unread`. For example ""The oldest message on or after the date indicated in the `anchor_date` parameter, if any; otherwise, the most recent message"".\r\n', 'comment_created': datetime.datetime(2023, 5, 23, 21, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1203053326, 'comment_body': ""I'd like to see this test improved to more clearly verify all the corner cases in the actual logic, with more comments like this one, and also checking which message IDs were returned, not just the anchor.\r\n\r\nI would also like to see a case using the date-only ISO format."", 'comment_created': datetime.datetime(2023, 5, 23, 21, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1207169471, 'comment_body': ""Uncommenting that part of the code produced so many logs :') I used another hack to generate the db query log:\r\n```sql\r\nSELECT id AS message_id, subject, rendered_content, pgroonga_match_positions_character(rendered_content, pgroonga_query_extract_keywords(escape_html(%(escape_html_1)s))) AS content_matches, pgroonga_match_positions_character(escape_html(subject), pgroonga_query_extract_keywords(escape_html(%(escape_html_1)s))) AS topic_matches\r\nFROM zerver_message\r\nWHERE recipient_id = %(recipient_id_1)s AND (search_pgroonga &@~ escape_html(%(escape_html_1)s)) ORDER BY abs(EXTRACT(epoch FROM zerver_message.date_sent - %(param_1)s))\r\n\r\n```\r\n\r\nwith the following parameters:\r\n```\r\n- `%(escape_html_1)s`: 'foo'\r\n- `%(recipient_id_1)s`: 30\r\n- `%(param_1)s`: `datetime.datetime(2023, 6, 6, 0, 0)`\r\n```\r\n\r\nOn running `EXPLAIN ANALYZE` I got:\r\n```\r\n                                                                      QUERY PLAN\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------\r\n---------------\r\n Sort  (cost=4.05..4.05 rows=1 width=335) (actual time=1.465..1.466 rows=0 loops=1)\r\n   Sort Key: (abs(date_part('epoch'::text, (date_sent - '2023-06-06 00:00:00+00'::timestamp with time zone))))\r\n   Sort Method: quicksort  Memory: 25kB\r\n   ->  Index Scan using zerver_message_search_pgroonga on zerver_message  (cost=0.00..4.04 rows=1 width=335) (actual time=1.362..1.363 r\r\nows=0 loops=1)\r\n         Index Cond: (search_pgroonga &@~ 'foo'::text)\r\n         Filter: (recipient_id = 30)\r\n         Rows Removed by Filter: 1\r\n Planning Time: 109.001 ms\r\n Execution Time: 3.895 ms\r\n(9 rows)\r\n```"", 'comment_created': datetime.datetime(2023, 5, 26, 18, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1207173441, 'comment_body': 'The `extract(""epoch"", literal_column(""zerver_message.date_sent"") - literal(anchor_date))` expression calculates the difference between the two timestamps and extracts it as an epoch value. By ordering the query based on this epoch difference, the closest message to the `anchor_date` will be selected.', 'comment_created': datetime.datetime(2023, 5, 26, 18, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1207721530, 'comment_body': ""I've improved the comment to clarify this:\r\n```.py\r\n# `date_anchor` is not a filter but a mechanism to obtain the anchor value.\r\n# This anchor value points to the message ID having date sent closest to\r\n# the `anchor_date`. This anchor is utilized to restrict the query within\r\n# a specific range. It can only be computed at this point, considering the\r\n# set of messages/query that have already undergone the narrow conditions.\r\n```"", 'comment_created': datetime.datetime(2023, 5, 27, 6, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1207728123, 'comment_body': ""I've added a comment to explain the use `extract` function:\r\n```.py\r\n# Order the query results based on the absolute difference between the\r\n# `date_sent` column and `anchor_date`. The `extract` function converts\r\n# the timestamps to epoch values for accurate ordering.\r\n```"", 'comment_created': datetime.datetime(2023, 5, 27, 6, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1207738740, 'comment_body': 'I have moved the validation logic inside `parse_anchor_date_value`.', 'comment_created': datetime.datetime(2023, 5, 27, 7, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1208093073, 'comment_body': 'Added more test cases.', 'comment_created': datetime.datetime(2023, 5, 27, 18, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1208107252, 'comment_body': 'Ah, I missed', 'comment_created': datetime.datetime(2023, 5, 27, 19, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1208111823, 'comment_body': ""I'm not very sure how to pass the test without changing the example anchor value to `date`."", 'comment_created': datetime.datetime(2023, 5, 27, 19, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1208113263, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 5, 27, 19, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1208115917, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 5, 27, 20, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1208549437, 'comment_body': ""If we don't want `anchor_date` documented here,`intentionally_undocumented` of `REQ` might be helpful."", 'comment_created': datetime.datetime(2023, 5, 28, 13, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 1208549690, 'comment_body': 'Latest feature level seems to have changed with the rebase.', 'comment_created': datetime.datetime(2023, 5, 28, 13, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 1209090899, 'comment_body': 'Adding the fix.', 'comment_created': datetime.datetime(2023, 5, 29, 8, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1227012134, 'comment_body': 'This test case, does cover the new added lines: https://github.com/zulip/zulip/pull/25677/files#diff-6c6eeaa26f7145a3d41a485431ee2442ca53a7aded6a4fdbc265e9575326834dR796-R800. After investigating I found that the test is returning from: https://github.com/zulip/zulip/pull/25677/files#diff-6c6eeaa26f7145a3d41a485431ee2442ca53a7aded6a4fdbc265e9575326834dR786-R789 even though I have set `visibly_empty: () => false` in the mock.', 'comment_created': datetime.datetime(2023, 6, 12, 17, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1227014394, 'comment_body': ""I couldn't find any way where without changing this example value I can pass the tests in `test_openapi.py`."", 'comment_created': datetime.datetime(2023, 6, 12, 17, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1227016441, 'comment_body': ""`7.1` is a mistake I'll correct it along with the other changes."", 'comment_created': datetime.datetime(2023, 6, 12, 17, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1227018325, 'comment_body': ""can someone help me - what's the easiest way to fetch the message ID of the first message sent? I'll replace it with `151`."", 'comment_created': datetime.datetime(2023, 6, 12, 17, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1227022038, 'comment_body': ""Umm, so do you want me to use `intentionally_undocumented` in `REQ` of `anchor_date`? But doesn't it mean we don't anymore need the documentation for `anchor_date` in `zulip.yaml`?"", 'comment_created': datetime.datetime(2023, 6, 12, 17, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1227712091, 'comment_body': ""I have to add these changes to update the focus view after fetching the response from the server (along with \r\n [these changes](https://github.com/zulip/zulip/pull/25677/files#diff-6c6eeaa26f7145a3d41a485431ee2442ca53a7aded6a4fdbc265e9575326834dR796-R800)) because:\r\n - as suggested in the [chat](https://chat.zulip.org/#narrow/stream/14-GSoC/topic/Akshat.20-.20checkins/near/1590094) to use `then_select_id` logic to update the focus - the current code path doesn't work that way - it doesn't use `then_select_id` logic rather it calls this callback function `cont` in the very end to update the focus\r\n - the `near:` filter works differently and we can't leverage the same logic for this `date:` filter because `near` has a message ID specified which we may either find or not. This same message ID is set to the `id_info` object which is passed to this `cont` function (and hence the `near:` filter does not direct depend on the fetched server anchor value to update the focus). The correct value if found by the `closest_id` function in `MessageList` (all this happens inside the callback function `cont`)."", 'comment_created': datetime.datetime(2023, 6, 13, 8, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1236887608, 'comment_body': 'Oh, right then.I guess we don\'t want to do that. I think we want to pass `exclude=[""anchor_date""]`. May be look at other places in the file where we skip few fields. ', 'comment_created': datetime.datetime(2023, 6, 21, 12, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 1236895605, 'comment_body': 'Should we call this `epoch_difference` instead?', 'comment_created': datetime.datetime(2023, 6, 21, 12, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 1236906216, 'comment_body': ""Does the database have messages sorted by date already?\r\n\r\nWould it be possible to find the closest date with sth like binary search instead of finding difference in timestamps for every message? Not an expert with db queries, so I'm not aware if that's actually possible.\r\n\r\nMay be start a discussion in czo - #backend, to check if this is already efficient or others have better ideas?"", 'comment_created': datetime.datetime(2023, 6, 21, 12, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 1236907373, 'comment_body': 'Same as https://github.com/zulip/zulip/pull/25677/commits/175286a1d5b39df042f730b8d7ace8c970537ca8#r1236887608?', 'comment_created': datetime.datetime(2023, 6, 21, 12, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'chdinesh1089', 'type': 'User'}, {'comment_id': 1263152705, 'comment_body': ""yeah, it should just say 8.0, since we don't backport this sort of change to the 7.x style stable releases."", 'comment_created': datetime.datetime(2023, 7, 14, 0, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1263153535, 'comment_body': 'I\'m not sure what you\'re getting at -- `self.send_stream_message` returns the message ID of a message you sent. \r\n\r\nIs the issue you want the very oldest message available to a user? One option would be to just do a `GET /messages` query with `anchor: ""oldest""` without a date filter, and verify the results agree.', 'comment_created': datetime.datetime(2023, 7, 14, 0, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1263154027, 'comment_body': 'Yeah, that `exclude` option sounds correct.', 'comment_created': datetime.datetime(2023, 7, 14, 0, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1263157465, 'comment_body': ""> Does the database have messages sorted by date already?\r\n\r\nMostly -- there's exceptions to that rule because of data imports. But that's true within an individual realm. \r\n\r\nHmm. What I'm worried about here is that we're not taking advantage of the database index that we have on the `date_sent` column, and this operation could be very inefficient... but that index isn't very useful, since it isn't limited to a given realm or anything, so effectively what we're doing is asking the database to walk all the message matching whatever the rest of the query is, and sort those by this date filter.\r\n\r\nOne option would be to just first find the message ID in the realm that is closest to the target date via some sort of binary search mechanism -- worst case we add a new `(realm, date_sent)` index to make this step efficient.\r\n\r\nOne option would be to figure out a different query construction that we can use to ask the database to walk a new `(realm, date_sent)` index or `(recipient, date_sent)` index."", 'comment_created': datetime.datetime(2023, 7, 14, 0, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1268542922, 'comment_body': '> Is the issue you want the very oldest message available to a user? \r\n\r\nyes; thanks for the suggestion.', 'comment_created': datetime.datetime(2023, 7, 19, 18, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}]","[{'commit_sha': '73173ebce52cc7458f3ced947029a8e0cb83978b', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a23dcbda6e176c645985a8a9aff7d840a8c954b', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7915ce024e2cf7e7a05650ee2baf12b2343e87af', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
1377877489,notifications: Fix bad rendering of math formulas.,"This commit fixes the bad rendering of math formulas in the email notifications. For the emails having math formulas like: `$$d^* = +\infty$$` includes them three times in a row (once as unicode, once as latex, again as unicode). This was because we were displaying KaTeX HTML without the CSS.

This is fixed by showing the raw LaTeX source.

Fixes: #25289.",False,25885,https://api.github.com/repos/zulip/zulip/pulls/25885,https://github.com/zulip/zulip/pull/25885,closed,116,0,3,1,4,7,7,0,"[{'name': 'bug'}, {'name': 'area: notifications (messages)'}, {'name': 'size: XL'}, {'name': 'has conflicts'}, {'name': 'area: markdown (LaTeX)'}, {'name': 'buddy review'}, {'name': 'mentor review'}]",2023-06-04 18:26:04+00:00,2023-11-27 07:30:21+00:00,15167057.0,"175 days, 13:04:17","[{'comment_id': 1216994584, 'comment_body': ""- I couldn't figure out how to test the html version of the email's content.\r\n- While I was able to view the email notifications in `/emails` but I don't know where to look for the mobile push notifications."", 'comment_created': datetime.datetime(2023, 6, 4, 18, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1224895129, 'comment_body': ""@mateuszmandera maybe you can help give advice on the testing questions here? I don't know off the top of my head."", 'comment_created': datetime.datetime(2023, 6, 9, 23, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1233953725, 'comment_body': '@akshatdalton For email html content in an automated test, see how this code grabs it for example, I think  something like that should work:\r\n```\r\nclass EmailLogBackEnd(EmailBackend):\r\n    @staticmethod\r\n    def log_email(email: EmailMessage) -> None:\r\n        """"""Used in development to record sent emails in a nice HTML log""""""\r\n        html_message: Union[bytes, EmailMessage, Message, str] = ""Missing HTML message""\r\n        assert isinstance(email, EmailMultiAlternatives)\r\n        if len(email.alternatives) > 0:\r\n            html_message = email.alternatives[0][0]\r\n```\r\n\r\n> I don\'t know where to look for the mobile push notifications.\r\n\r\nWhile I\'m not aware of an ergonomic way of testing this manually, what I\'d typically do here is just modify the `consume` code in `PushNotificationsWorker` to `print` the even dict to the console and verify it looks like it should. Or are you asking about writing an automated test? For that you could mock the `handle_push_notification` function there to assert it\'s being with appropriate arguments', 'comment_created': datetime.datetime(2023, 6, 19, 11, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mateuszmandera', 'type': 'User'}, {'comment_id': 1253671313, 'comment_body': ""I don't understand the TODO comment here -- are you still trying to figure out what code needs to change?\r\n\r\n`get_mobile_push_content` is the function you probably want."", 'comment_created': datetime.datetime(2023, 7, 5, 21, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253672094, 'comment_body': ""I think a much better comment here would be one that explains the structure of KaTeX output and thus how we're going the algorithm below will get the plain-text version of the KaTeX input."", 'comment_created': datetime.datetime(2023, 7, 5, 21, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1268559201, 'comment_body': 'I saw that function but I was unable to find the possible fix for that.', 'comment_created': datetime.datetime(2023, 7, 19, 19, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1269918206, 'comment_body': 'Can you provide more details in a ""#backend"" thread?', 'comment_created': datetime.datetime(2023, 7, 20, 20, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '44f6b0504c4246fd8502ee8bfec0c0b00e4bbb99', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
1479486761,narrow: Fix topic highlighting issue with apostrophes in search results.,"This commit addresses the issue where the topic highlighting in search results was offset by one character when an apostrophe was present. The problem stemmed from the disparity in HTML escaping generated by the function `func.escape_html` which is used to obtain `topic_matches` differs from the escaping performed by the function `django.utils.html.escape` for apostrophes (').

func.escape_html | django.utils.html.escape
-----------------+--------------------------
      `&#39;`      |           `&#x27;`

To fix this SQL query is changed to return the HTML-escaped topic name generated by the function `func.escape_html`.

Fixes: #25633.

This PR fixes the changes for PR: #25818 that failed the build during the merge.",False,26517,https://api.github.com/repos/zulip/zulip/pulls/26517,https://github.com/zulip/zulip/pull/26517,open,83,16,3,1,2,3,3,0,"[{'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'integration review'}]",2023-08-17 18:18:26+00:00,,0.0,,"[{'comment_id': 1297583951, 'comment_body': 'do you want me to add the same explanation here as well?', 'comment_created': datetime.datetime(2023, 8, 17, 18, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1297595913, 'comment_body': ""I wonder if this is the wrong fix -- Like maybe the bug here is that `messages_in_narrow_backend` shouldn't be trying to access these columns if `!is_search` -- the escaped topic name is not expected to be if interest in that case.\r\n\r\n(Somehow the message_fetch code path doesn't add these columns for `!is_search`, and the goal is for this code to work in a parallel fashion, so something feels awry)."", 'comment_created': datetime.datetime(2023, 8, 17, 18, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1297608805, 'comment_body': '@timabbott so those columns are accessed because there are other use cases when we try to match the contents; such use case is when we use the `has` operator with the `link` operand.\r\n(checkout the test case: `test_messages_in_narrow_for_non_search` in `zerver.tests.test_message_fetch.GetOldMessagesTest`.)', 'comment_created': datetime.datetime(2023, 8, 17, 18, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}]","[{'commit_sha': '1c1f9c722c403269cf77f9864966ef2ae6eb6d62', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
1369449194,narrow: Fix topic highlighting issue with apostrophes in search results.,"This commit addresses the issue where the topic highlighting in search results was offset by one character when an apostrophe was present. The problem stemmed from the disparity in SQL-style HTML escaping used to obtain topic_matches and the escaping performed by Django utils or other libraries for apostrophes (').

sql_escape | django_escape
-----------+---------------
   `&#39;`   |     `&#x27;`

To resolve this, a manual replacement was implemented to achieve a similar HTML escape result.

Fixes: #25633.",True,25818,https://api.github.com/repos/zulip/zulip/pulls/25818,https://github.com/zulip/zulip/pull/25818,closed,76,12,3,1,5,11,6,0,"[{'name': 'bug'}, {'name': 'area: search'}, {'name': 'size: L'}, {'name': 'area: message feed (UI)'}, {'name': 'buddy review'}, {'name': 'mentor review'}]",2023-05-29 18:28:13+00:00,2023-08-16 00:29:21+00:00,6760868.0,"78 days, 6:01:08","[{'comment_id': 1209510587, 'comment_body': ""Thanks for tracking this down. Doing string replacements after escaping can often be dangerous from a security standpoint, though I think it's probably correct in this case. \r\n\r\nGiven the [escaping algorithm](https://docs.python.org/3/library/html.html) [used by Django](https://docs.djangoproject.com/en/4.2/ref/utils/#module-django.utils.html), I think this might be OK.\r\n\r\n@andersk FYI, is there a better way to do this without reimplementing one of these? I don't see a parameter in the Python one for how to do escaping, or anything like that."", 'comment_created': datetime.datetime(2023, 5, 29, 18, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1210733283, 'comment_body': 'There is no “SQL-style HTML escaping”. The `func.escape_html` used in `zerver/lib/narrow.py` is a reference to a custom function that we defined ourselves.\r\n  https://github.com/zulip/zulip/blob/f45a6a6d995c0c935491734153e245201a5ed207/zerver/migrations/0001_initial.py#L61-L63\r\n\r\n“Any other library” is misleading—there are many other libraries that do escaping in many different ways. Django itself switched from `&#39;` to `&#x27;` [in Django 3.0](https://docs.djangoproject.com/en/3.0/releases/3.0/#miscellaneous).', 'comment_created': datetime.datetime(2023, 5, 30, 19, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 1210738329, 'comment_body': 'It’d be more robust to change the SQL query to return the HTML-escaped topic name, escaped with the same function as the one used for `topic_matches`, so that we don’t have to carefully make two different escaping methods consistent with each other.', 'comment_created': datetime.datetime(2023, 5, 30, 19, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 1210799714, 'comment_body': '@timabbott @andersk let me how good is the idea to use the connection object each time we execute the `get_search_fields` function.', 'comment_created': datetime.datetime(2023, 5, 30, 20, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1210826888, 'comment_body': 'No, don’t add new SQL queries. The *original* SQL queries in `zerver.lib.narrow` should be changed to add this additional column.', 'comment_created': datetime.datetime(2023, 5, 30, 21, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 1211030153, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 5, 31, 2, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1224894650, 'comment_body': 'Can you add a block comment here explaining how the topic escaping logic works end-to-end? It\'s pretty important, and I\'d like to make sure we address clearly questions like ""Does `process_fts_updates` need to do something special to agree with this?""', 'comment_created': datetime.datetime(2023, 6, 9, 23, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1226898781, 'comment_body': 'Added the comment in the code addressing these questions.', 'comment_created': datetime.datetime(2023, 6, 12, 16, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1263158098, 'comment_body': '@akshatdalton can you reply with how you resolved this and the other comments about escaping strategy?', 'comment_created': datetime.datetime(2023, 7, 14, 0, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1268538492, 'comment_body': 'I updated my [commit message](https://github.com/zulip/zulip/pull/25818/commits/b6d550368f47a6a278020b5a86c57c1ff6c9cc3c).\r\n\r\n```\r\nTo fix this SQL query is changed to return the HTML-escaped\r\ntopic name generated by the function `func.escape_html`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 18, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}, {'comment_id': 1268539633, 'comment_body': ""I've also added a [comment block](https://github.com/zulip/zulip/pull/25818/files#diff-55c7496b687a8de1d5046bcea7ed5f9f78b50f2db9bdfe87df31fec3b6ca125bR961-R977) in the code."", 'comment_created': datetime.datetime(2023, 7, 19, 18, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akshatdalton', 'type': 'User'}]","[{'commit_sha': 'b6d550368f47a6a278020b5a86c57c1ff6c9cc3c', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91
1481547884,fenced_code: Enable code-highlighting without language markers.,"The `startinline` option is utilized in the `CodeHilite` instantiation to indicate that the provided code snippet should be highlighted even if it doesn't start with the opening tag or marker of the associated programming language.

This is particularly useful in scenarios involving languages like PHP, where users may not want to include the `<?php` marker at the start of their code blocks.

Fixes: https://chat.zulip.org/#narrow/stream/137-feedback/topic/php.20syntax.20highlighting.20should.20not.20require.20.60.3C.3Fphp.60.",True,26532,https://api.github.com/repos/zulip/zulip/pulls/26532,https://github.com/zulip/zulip/pull/26532,closed,16,0,2,1,4,3,3,0,"[{'name': 'area: compose (misc)'}, {'name': 'size: S'}, {'name': 'integration review'}]",2023-08-19 18:17:43+00:00,2023-08-30 01:16:12+00:00,889109.0,"10 days, 6:58:29","[{'comment_id': 1309118030, 'comment_body': '```suggestion\r\n                # This is particularly helpful in the case of PHP, so users can\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 16, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'karlstolley', 'type': 'User'}, {'comment_id': 1309118401, 'comment_body': '```suggestion\r\n                # avoid adding a `<?php` marker at the start of their codeblock.\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 17, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'karlstolley', 'type': 'User'}, {'comment_id': 1309118628, 'comment_body': 'Just a couple of minor fixes on the comments here.', 'comment_created': datetime.datetime(2023, 8, 29, 17, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'karlstolley', 'type': 'User'}]","[{'commit_sha': 'c916a512d94dbd447f097905ec8eb0275ee6769e', 'committer_username': 'akshatdalton', 'committer_name': 'Akshat', 'committer_email': 'akshat25iiit@gmail.com', 'commit_date': datetime.datetime(2020, 6, 22, 14, 13, 55, tzinfo=datetime.timezone.utc)}]",Akshat,67277428,akshat25iiit@gmail.com,User,,54,,114,91

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43160685,zulip,zulip/zulip,Python,7613,21003,376,1133,60212,2486,28,810,"[{'id': 1481547884, 'number': 26532, 'closed': datetime.datetime(2023, 8, 30, 1, 16, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 18, 17, 43, tzinfo=datetime.timezone.utc), 'time_taken': 889109.0, 'time_delta': '10 days, 6:58:29', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 1479486761, 'number': 26517, 'closed': None, 'created': datetime.datetime(2023, 8, 17, 18, 18, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 83, 'deletions': 16, 'state': 'open'}, {'id': 1463955036, 'number': 26429, 'closed': datetime.datetime(2023, 8, 15, 20, 18, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 5, 21, 22, 15, tzinfo=datetime.timezone.utc), 'time_taken': 860156.0, 'time_delta': '9 days, 22:55:56', 'additions': 37, 'deletions': 15, 'state': 'closed'}, {'id': 1415319534, 'number': 26165, 'closed': datetime.datetime(2023, 7, 2, 23, 18, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 30, 19, 37, 35, tzinfo=datetime.timezone.utc), 'time_taken': 186084.0, 'time_delta': '2 days, 3:41:24', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 1396832664, 'number': 26050, 'closed': datetime.datetime(2023, 7, 10, 20, 47, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 17, 16, 57, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2000966.0, 'time_delta': '23 days, 3:49:26', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1377877489, 'number': 25885, 'closed': datetime.datetime(2023, 11, 27, 7, 30, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 18, 26, 4, tzinfo=datetime.timezone.utc), 'time_taken': 15167057.0, 'time_delta': '175 days, 13:04:17', 'additions': 116, 'deletions': 0, 'state': 'closed'}, {'id': 1369449194, 'number': 25818, 'closed': datetime.datetime(2023, 8, 16, 0, 29, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 29, 18, 28, 13, tzinfo=datetime.timezone.utc), 'time_taken': 6760868.0, 'time_delta': '78 days, 6:01:08', 'additions': 76, 'deletions': 12, 'state': 'closed'}, {'id': 1356853266, 'number': 25677, 'closed': None, 'created': datetime.datetime(2023, 5, 19, 9, 15, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 409, 'deletions': 14, 'state': 'open'}, {'id': 711330783, 'number': 19566, 'closed': datetime.datetime(2021, 11, 30, 0, 20, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 17, 49, 27, tzinfo=datetime.timezone.utc), 'time_taken': 9441062.0, 'time_delta': '109 days, 6:31:02', 'additions': 26, 'deletions': 13, 'state': 'closed'}, {'id': 707651707, 'number': 19554, 'closed': None, 'created': datetime.datetime(2021, 8, 10, 20, 4, 44, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 397, 'deletions': 54, 'state': 'open'}, {'id': 705929780, 'number': 19538, 'closed': datetime.datetime(2023, 8, 5, 21, 50, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 7, 18, 37, 14, tzinfo=datetime.timezone.utc), 'time_taken': 62910806.0, 'time_delta': '728 days, 3:13:26', 'additions': 75, 'deletions': 37, 'state': 'closed'}, {'id': 702375839, 'number': 19479, 'closed': datetime.datetime(2023, 10, 5, 22, 54, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 15, 19, 38, tzinfo=datetime.timezone.utc), 'time_taken': 68542493.0, 'time_delta': '793 days, 7:34:53', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 698224056, 'number': 19408, 'closed': datetime.datetime(2021, 7, 27, 22, 41, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 22, 19, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1340.0, 'time_delta': '0:22:20', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 698206657, 'number': 19407, 'closed': datetime.datetime(2021, 7, 27, 23, 17, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 21, 41, 58, tzinfo=datetime.timezone.utc), 'time_taken': 5733.0, 'time_delta': '1:35:33', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 696570925, 'number': 19386, 'closed': datetime.datetime(2024, 7, 21, 20, 41, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 22, 5, 37, tzinfo=datetime.timezone.utc), 'time_taken': 94343735.0, 'time_delta': '1091 days, 22:35:35', 'additions': 40, 'deletions': 9, 'state': 'closed'}, {'id': 694991888, 'number': 19352, 'closed': datetime.datetime(2021, 7, 22, 17, 57, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 9, 2, 59, tzinfo=datetime.timezone.utc), 'time_taken': 32089.0, 'time_delta': '8:54:49', 'additions': 17, 'deletions': 27, 'state': 'closed'}, {'id': 694775579, 'number': 19345, 'closed': datetime.datetime(2021, 8, 7, 16, 51, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 23, 44, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1443978.0, 'time_delta': '16 days, 17:06:18', 'additions': 35, 'deletions': 4, 'state': 'closed'}, {'id': 689329948, 'number': 19233, 'closed': datetime.datetime(2021, 7, 13, 20, 3, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 19, 6, 43, tzinfo=datetime.timezone.utc), 'time_taken': 3415.0, 'time_delta': '0:56:55', 'additions': 41, 'deletions': 31, 'state': 'closed'}, {'id': 689200331, 'number': 19230, 'closed': datetime.datetime(2021, 7, 14, 6, 49, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 16, 8, 23, tzinfo=datetime.timezone.utc), 'time_taken': 52885.0, 'time_delta': '14:41:25', 'additions': 289, 'deletions': 18, 'state': 'closed'}, {'id': 687061559, 'number': 19204, 'closed': datetime.datetime(2021, 7, 13, 16, 13, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 22, 7, 32, tzinfo=datetime.timezone.utc), 'time_taken': 324371.0, 'time_delta': '3 days, 18:06:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 686364123, 'number': 19184, 'closed': datetime.datetime(2021, 7, 9, 0, 41, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 22, 28, 25, tzinfo=datetime.timezone.utc), 'time_taken': 7978.0, 'time_delta': '2:12:58', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 686349061, 'number': 19183, 'closed': datetime.datetime(2021, 7, 9, 0, 45, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 21, 54, 7, tzinfo=datetime.timezone.utc), 'time_taken': 10295.0, 'time_delta': '2:51:35', 'additions': 1, 'deletions': 21, 'state': 'closed'}, {'id': 686088262, 'number': 19174, 'closed': datetime.datetime(2021, 7, 8, 19, 39, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 14, 52, 31, tzinfo=datetime.timezone.utc), 'time_taken': 17191.0, 'time_delta': '4:46:31', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 685492166, 'number': 19160, 'closed': datetime.datetime(2021, 7, 7, 21, 29, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 20, 31, 18, tzinfo=datetime.timezone.utc), 'time_taken': 3485.0, 'time_delta': '0:58:05', 'additions': 12, 'deletions': 8, 'state': 'closed'}, {'id': 684305491, 'number': 19136, 'closed': datetime.datetime(2021, 7, 6, 22, 26, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 6, 11, 47, 52, tzinfo=datetime.timezone.utc), 'time_taken': 38341.0, 'time_delta': '10:39:01', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 678091454, 'number': 19011, 'closed': datetime.datetime(2021, 7, 5, 23, 58, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 18, 4, 10, tzinfo=datetime.timezone.utc), 'time_taken': 885261.0, 'time_delta': '10 days, 5:54:21', 'additions': 39, 'deletions': 4, 'state': 'closed'}, {'id': 677202097, 'number': 18980, 'closed': datetime.datetime(2021, 6, 24, 16, 43, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 15, 15, 22, tzinfo=datetime.timezone.utc), 'time_taken': 5290.0, 'time_delta': '1:28:10', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 673723742, 'number': 18914, 'closed': None, 'created': datetime.datetime(2021, 6, 18, 20, 46, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 398, 'deletions': 26, 'state': 'open'}, {'id': 672148234, 'number': 18889, 'closed': datetime.datetime(2021, 6, 17, 22, 33, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 3, 26, 49, tzinfo=datetime.timezone.utc), 'time_taken': 68807.0, 'time_delta': '19:06:47', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 669478119, 'number': 18831, 'closed': datetime.datetime(2021, 7, 13, 10, 18, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 11, 17, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2502048.0, 'time_delta': '28 days, 23:00:48', 'additions': 23, 'deletions': 6, 'state': 'closed'}, {'id': 668897028, 'number': 18819, 'closed': datetime.datetime(2021, 11, 10, 20, 56, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 15, 46, 38, tzinfo=datetime.timezone.utc), 'time_taken': 13065005.0, 'time_delta': '151 days, 5:10:05', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 668570732, 'number': 18811, 'closed': datetime.datetime(2021, 6, 12, 14, 31, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 21, 20, tzinfo=datetime.timezone.utc), 'time_taken': 61872.0, 'time_delta': '17:11:12', 'additions': 133, 'deletions': 113, 'state': 'closed'}, {'id': 665424895, 'number': 18754, 'closed': datetime.datetime(2021, 6, 9, 19, 25, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 23, 15, 35, tzinfo=datetime.timezone.utc), 'time_taken': 72599.0, 'time_delta': '20:09:59', 'additions': 145, 'deletions': 146, 'state': 'closed'}, {'id': 660957181, 'number': 18683, 'closed': datetime.datetime(2021, 6, 3, 16, 26, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 14, 32, 12, tzinfo=datetime.timezone.utc), 'time_taken': 6856.0, 'time_delta': '1:54:16', 'additions': 14, 'deletions': 11, 'state': 'closed'}, {'id': 658529116, 'number': 18658, 'closed': None, 'created': datetime.datetime(2021, 5, 31, 21, 47, 9, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 346, 'deletions': 77, 'state': 'open'}, {'id': 653671197, 'number': 18608, 'closed': datetime.datetime(2021, 7, 15, 22, 18, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 12, 5, 51, tzinfo=datetime.timezone.utc), 'time_taken': 4356763.0, 'time_delta': '50 days, 10:12:43', 'additions': 70, 'deletions': 2, 'state': 'closed'}, {'id': 650675663, 'number': 18577, 'closed': None, 'created': datetime.datetime(2021, 5, 22, 19, 30, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 77, 'deletions': 34, 'state': 'open'}, {'id': 646909038, 'number': 18538, 'closed': datetime.datetime(2021, 5, 19, 18, 59, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 18, 16, 24, 45, tzinfo=datetime.timezone.utc), 'time_taken': 95683.0, 'time_delta': '1 day, 2:34:43', 'additions': 200, 'deletions': 194, 'state': 'closed'}, {'id': 646127200, 'number': 18529, 'closed': datetime.datetime(2021, 5, 20, 18, 43, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 17, 19, 33, 9, tzinfo=datetime.timezone.utc), 'time_taken': 256195.0, 'time_delta': '2 days, 23:09:55', 'additions': 165, 'deletions': 45, 'state': 'closed'}, {'id': 643561913, 'number': 18470, 'closed': None, 'created': datetime.datetime(2021, 5, 12, 23, 15, 4, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 80, 'deletions': 54, 'state': 'open'}, {'id': 638499817, 'number': 18431, 'closed': datetime.datetime(2023, 4, 26, 23, 6, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 10, 21, 36, 58, tzinfo=datetime.timezone.utc), 'time_taken': 61867774.0, 'time_delta': '716 days, 1:29:34', 'additions': 46, 'deletions': 24, 'state': 'closed'}, {'id': 638066295, 'number': 18426, 'closed': datetime.datetime(2021, 5, 10, 19, 20, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 10, 17, 30, tzinfo=datetime.timezone.utc), 'time_taken': 6656.0, 'time_delta': '1:50:56', 'additions': 35, 'deletions': 1, 'state': 'closed'}, {'id': 623970615, 'number': 18274, 'closed': datetime.datetime(2021, 4, 27, 23, 45, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 27, 4, 30, 38, tzinfo=datetime.timezone.utc), 'time_taken': 69301.0, 'time_delta': '19:15:01', 'additions': 46, 'deletions': 7, 'state': 'closed'}, {'id': 613892926, 'number': 18109, 'closed': datetime.datetime(2021, 4, 13, 18, 42, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 12, 19, 35, 2, tzinfo=datetime.timezone.utc), 'time_taken': 83255.0, 'time_delta': '23:07:35', 'additions': 39, 'deletions': 3, 'state': 'closed'}, {'id': 613354909, 'number': 18102, 'closed': datetime.datetime(2021, 4, 24, 2, 11, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 12, 7, 35, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1017326.0, 'time_delta': '11 days, 18:35:26', 'additions': 558, 'deletions': 2, 'state': 'closed'}, {'id': 612624777, 'number': 18064, 'closed': None, 'created': datetime.datetime(2021, 4, 9, 17, 35, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 9, 'deletions': 6, 'state': 'open'}, {'id': 608266027, 'number': 17963, 'closed': datetime.datetime(2021, 4, 2, 22, 9, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 2, 21, 41, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1668.0, 'time_delta': '0:27:48', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 600044445, 'number': 17781, 'closed': None, 'created': datetime.datetime(2021, 3, 24, 20, 21, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 695, 'deletions': 22, 'state': 'open'}, {'id': 592398355, 'number': 17616, 'closed': datetime.datetime(2024, 1, 4, 18, 15, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 17, 38, 4, tzinfo=datetime.timezone.utc), 'time_taken': 88735037.0, 'time_delta': '1027 days, 0:37:17', 'additions': 78, 'deletions': 17, 'state': 'closed'}, {'id': 586086912, 'number': 17511, 'closed': None, 'created': datetime.datetime(2021, 3, 6, 15, 49, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 256, 'deletions': 51, 'state': 'open'}, {'id': 578366717, 'number': 17386, 'closed': None, 'created': datetime.datetime(2021, 2, 23, 11, 18, 8, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 723, 'deletions': 77, 'state': 'open'}, {'id': 560212805, 'number': 17104, 'closed': datetime.datetime(2021, 1, 25, 22, 24, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 22, 21, 10, 27, tzinfo=datetime.timezone.utc), 'time_taken': 263662.0, 'time_delta': '3 days, 1:14:22', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 553660643, 'number': 17045, 'closed': datetime.datetime(2021, 5, 10, 3, 31, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 12, 18, 24, 50, tzinfo=datetime.timezone.utc), 'time_taken': 10141597.0, 'time_delta': '117 days, 9:06:37', 'additions': 220, 'deletions': 16, 'state': 'closed'}, {'id': 552099657, 'number': 17031, 'closed': datetime.datetime(2022, 3, 18, 19, 32, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 9, 8, 50, 12, tzinfo=datetime.timezone.utc), 'time_taken': 37449754.0, 'time_delta': '433 days, 10:42:34', 'additions': 170, 'deletions': 1, 'state': 'closed'}, {'id': 546599679, 'number': 16984, 'closed': None, 'created': datetime.datetime(2020, 12, 29, 19, 3, 12, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 119, 'deletions': 7, 'state': 'open'}, {'id': 545630468, 'number': 16964, 'closed': None, 'created': datetime.datetime(2020, 12, 25, 20, 49, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 897, 'deletions': 71, 'state': 'open'}, {'id': 542898524, 'number': 16931, 'closed': datetime.datetime(2021, 1, 25, 22, 26, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 19, 8, 44, 40, tzinfo=datetime.timezone.utc), 'time_taken': 3246124.0, 'time_delta': '37 days, 13:42:04', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 541930089, 'number': 16916, 'closed': datetime.datetime(2021, 3, 25, 7, 41, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 17, 15, 11, 10, tzinfo=datetime.timezone.utc), 'time_taken': 8440204.0, 'time_delta': '97 days, 16:30:04', 'additions': 225, 'deletions': 2, 'state': 'closed'}, {'id': 536262983, 'number': 16871, 'closed': datetime.datetime(2021, 5, 3, 20, 7, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 10, 21, 17, 17, tzinfo=datetime.timezone.utc), 'time_taken': 12437428.0, 'time_delta': '143 days, 22:50:28', 'additions': 48, 'deletions': 8, 'state': 'closed'}, {'id': 534990424, 'number': 16860, 'closed': datetime.datetime(2021, 6, 17, 0, 55, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 9, 8, 3, 19, tzinfo=datetime.timezone.utc), 'time_taken': 16390309.0, 'time_delta': '189 days, 16:51:49', 'additions': 104, 'deletions': 6, 'state': 'closed'}, {'id': 521239752, 'number': 16748, 'closed': None, 'created': datetime.datetime(2020, 11, 15, 18, 41, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 172, 'deletions': 36, 'state': 'open'}, {'id': 515670070, 'number': 16708, 'closed': datetime.datetime(2020, 11, 6, 18, 12, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 4, 22, 16, 37, tzinfo=datetime.timezone.utc), 'time_taken': 158181.0, 'time_delta': '1 day, 19:56:21', 'additions': 22, 'deletions': 1, 'state': 'closed'}, {'id': 513297835, 'number': 16665, 'closed': datetime.datetime(2020, 10, 30, 22, 22, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 30, 21, 39, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2631.0, 'time_delta': '0:43:51', 'additions': 50, 'deletions': 16, 'state': 'closed'}, {'id': 507155008, 'number': 16581, 'closed': datetime.datetime(2020, 10, 21, 18, 15, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 20, 23, 34, 55, tzinfo=datetime.timezone.utc), 'time_taken': 67242.0, 'time_delta': '18:40:42', 'additions': 7, 'deletions': 3, 'state': 'closed'}, {'id': 502994541, 'number': 16530, 'closed': None, 'created': datetime.datetime(2020, 10, 13, 23, 49, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 116, 'deletions': 4, 'state': 'open'}, {'id': 497162510, 'number': 16466, 'closed': datetime.datetime(2020, 10, 7, 0, 28, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 2, 22, 32, 19, tzinfo=datetime.timezone.utc), 'time_taken': 352544.0, 'time_delta': '4 days, 1:55:44', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 482530252, 'number': 16319, 'closed': datetime.datetime(2020, 10, 19, 19, 6, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 9, 5, 58, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3503260.0, 'time_delta': '40 days, 13:07:40', 'additions': 39, 'deletions': 2, 'state': 'closed'}, {'id': 475201550, 'number': 16220, 'closed': datetime.datetime(2020, 9, 1, 6, 0, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 6, 50, 23, tzinfo=datetime.timezone.utc), 'time_taken': 342602.0, 'time_delta': '3 days, 23:10:02', 'additions': 19, 'deletions': 1, 'state': 'closed'}, {'id': 473630723, 'number': 16200, 'closed': datetime.datetime(2020, 8, 26, 13, 45, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 4, 9, 47, tzinfo=datetime.timezone.utc), 'time_taken': 34568.0, 'time_delta': '9:36:08', 'additions': 19, 'deletions': 1, 'state': 'closed'}]"
