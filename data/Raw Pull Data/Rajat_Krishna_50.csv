pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1381386222,[JAVA_API] Reorganize project structure and automatically load native libraries,"## Details

- *Restructure Java API project to improve code organization*
- *Move the logic for finding and loading native libraries from the **Core** class to the **NativeLibrary** class*
- *Automatically load native libraries when the class is loaded using static initializer blocks*",True,668,https://api.github.com/repos/openvinotoolkit/openvino_contrib/pulls/668,https://github.com/openvinotoolkit/openvino_contrib/pull/668,closed,524,430,101,20,14,20,2,0,"[{'name': 'category: build'}, {'name': 'category: java API'}]",2023-06-06 19:25:51+00:00,2023-06-29 22:39:57+00:00,1998846.0,"23 days, 3:14:06","[{'comment_id': 1222046269, 'comment_body': 'Too much code duplication.\r\nAs I see it, we can keep this static block only for the Wrapper superclass.', 'comment_created': datetime.datetime(2023, 6, 7, 19, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1222048410, 'comment_body': 'Need do add native libraries loading for `compatibility` classes as well.', 'comment_created': datetime.datetime(2023, 6, 7, 19, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1222049341, 'comment_body': 'Need to review and fix samples as well.', 'comment_created': datetime.datetime(2023, 6, 7, 19, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1222051602, 'comment_body': 'Please add instructions on how to run tests with IntelliJ IDEA', 'comment_created': datetime.datetime(2023, 6, 7, 19, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1223948719, 'comment_body': 'That changes look like line ending formatting made by your IDE. Please revert the lines which did not actually change', 'comment_created': datetime.datetime(2023, 6, 9, 7, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1223951047, 'comment_body': 'Why tests share main package? I hope they are not included in the final JAR?', 'comment_created': datetime.datetime(2023, 6, 9, 7, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1223968288, 'comment_body': ""Sorry, let me rephrase, I hope that tests are not a part of package and cannot be imported in the user's app."", 'comment_created': datetime.datetime(2023, 6, 9, 7, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1224611568, 'comment_body': 'The test classes share the same package as the classes they test to provide access to package-scope classes during testing. However, to keep the tests separate from the main package during compilation and assembly, they are stored in a different physical directory- `src/test/java/` than the main package `src/main/java`. The Gradle java plugin compiles and assembles only the main package in the final JAR.', 'comment_created': datetime.datetime(2023, 6, 9, 18, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rajatkrishna', 'type': 'User'}, {'comment_id': 1224725075, 'comment_body': 'Resolved. Thank you.', 'comment_created': datetime.datetime(2023, 6, 9, 20, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rajatkrishna', 'type': 'User'}, {'comment_id': 1224725241, 'comment_body': 'Resolved. Thank you.', 'comment_created': datetime.datetime(2023, 6, 9, 20, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rajatkrishna', 'type': 'User'}, {'comment_id': 1224755670, 'comment_body': 'Added. Thank you.', 'comment_created': datetime.datetime(2023, 6, 9, 20, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rajatkrishna', 'type': 'User'}, {'comment_id': 1225224589, 'comment_body': ""That's done by Gradle automatically (when setupvars.sh is called)."", 'comment_created': datetime.datetime(2023, 6, 10, 8, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1225225071, 'comment_body': 'Why not keep README at `modules/java_api/src/test`?', 'comment_created': datetime.datetime(2023, 6, 10, 8, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1226448379, 'comment_body': '```suggestion\r\n2. Run `gradle` to build a package and run tests:\r\n```', 'comment_created': datetime.datetime(2023, 6, 12, 10, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1226453659, 'comment_body': 'I think we just forgot to change these instructions', 'comment_created': datetime.datetime(2023, 6, 12, 10, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1228165863, 'comment_body': 'Moved. Thank you', 'comment_created': datetime.datetime(2023, 6, 13, 13, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rajatkrishna', 'type': 'User'}, {'comment_id': 1229010943, 'comment_body': '@rajatkrishna, This breaks Android build: https://github.com/dkurt/openvino_java/actions/runs/5219539621/jobs/9441828252?pr=22\r\n\r\nsteps to reproduce: https://github.com/dkurt/openvino_java/blob/test_java_refactoring/.github/workflows/android.yaml\r\n\r\n```\r\n/home/runner/work/openvino_java/openvino_java/openvino_contrib/modules/java_api/src/test/java/org/intel/openvino/TensorTests.java:3: error: package org.junit does not exist\r\nimport static org.junit.Assert.*;\r\n                       ^\r\n/home/runner/work/openvino_java/openvino_java/openvino_contrib/modules/java_api/src/test/java/org/intel/openvino/TensorTests.java:5: error: package org.junit does not exist\r\nimport org.junit.Test;\r\n                ^\r\n/home/runner/work/openvino_java/openvino_java/openvino_contrib/modules/java_api/src/test/java/org/intel/openvino/OVTest.java:3: error: package org.junit does not exist\r\nimport org.junit.Ignore;\r\n                ^\r\n/home/runner/work/openvino_java/openvino_java/openvino_contrib/modules/java_api/src/test/java/org/intel/openvino/OVTest.java:4: error: package org.junit does not exist\r\nimport org.junit.Rule;\r\n                ^\r\n/home/runner/work/openvino_java/openvino_java/openvino_contrib/modules/java_api/src/test/java/org/intel/openvino/OVTest.java:5: error: package org.junit.rules does not exist\r\nimport org.junit.rules.TestWatcher;\r\n                      ^\r\n/home/runner/work/openvino_java/openvino_java/openvino_contrib/modules/java_api/src/test/java/org/intel/openvino/OVTest.java:6: error: package org.junit.runner does not exist\r\nimport org.junit.runner.Description;\r\n                       ^\r\n/home/runner/work/openvino_java/openvino_java/openvino_contrib/modules/java_api/src/test/java/org/intel/openvino/OVTest.java:10: error: cannot find symbol\r\n@Ignore\r\n ^\r\n  symbol: class Ignore\r\n```', 'comment_created': datetime.datetime(2023, 6, 14, 5, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dkurt', 'type': 'User'}, {'comment_id': 1232647994, 'comment_body': 'Added instructions for building and running benchmarking app, and face detection samples.', 'comment_created': datetime.datetime(2023, 6, 16, 19, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rajatkrishna', 'type': 'User'}, {'comment_id': 1233123736, 'comment_body': ""It appears that the compilation errors are occurring due to missing JUnit dependencies. Due to these changes, gradle detects the java tests in the `src/test/java` folder and attempts to compile them. \r\n\r\nOne solution would be to disable the compilation and execution of tests through gradle using the `-x test` flag when building for Android: https://github.com/dkurt/openvino_java/pull/24\r\n\r\nPlease let me know if you have questions or if there are alternative solutions you'd like to explore. Thank you "", 'comment_created': datetime.datetime(2023, 6, 17, 20, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rajatkrishna', 'type': 'User'}, {'comment_id': 1233123791, 'comment_body': 'Reverted. Thank you', 'comment_created': datetime.datetime(2023, 6, 17, 20, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rajatkrishna', 'type': 'User'}]","[{'commit_sha': '0cc80f89803cfdf1ebb5a0c0b41f89caea0b4708', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1352014d698ba4c23e90a23f9f3792055fe21025', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b100c7c9518e8fe45351e944e984086f8a17f1f', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '693f61599c98c85a798497134a69e306d080865b', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '466dc5d049cafd38ea504a843c3d1b3baa14d00c', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '942bc3296d892f492d6aff84be08f56a3e31bc5e', 'committer_username': 'ilya-lavrenov', 'committer_name': 'Ilya Lavrenov', 'committer_email': 'ilya.lavrenov@intel.com', 'commit_date': datetime.datetime(2012, 10, 15, 19, 26, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daacfeb2088f24cce7cd97571031d582f002ebc9', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '881cb59ac318bcf4b10fa4bb8cb900c9b2027aba', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '840e2e0eeb88fda064e7ec46629d8e86c03161e4', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbfa8134f18c5d728b066fffd6462ee4d7e79bb2', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22f044c8c225a6955460e1344d18c6a2dbd028d7', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb0a6af64d14caf808ab359f642651cafb97640', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f4dbea9a95fd75c76aff348b1670414093098ab', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc0ce8432ce930725ae4feaf7abed54002ba2272', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '514c7097225b7d3140e464397ca2d0fa4e58e928', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a33e94e5c01ad7b8bfe91dd44478c8bef7cf0e7', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61e5fe3a92c9ff71f63d74e19227100678f5adb', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d2b5d4c7875bc1f97c08051b50bd700cdab00de', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d2329afda57dc05cdd2e972e83971dcac1ca7fd', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80ae143c2d52a908f37906fd09b79045a509d998', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}]",Rajat Krishna,61770314,rajatkrishna99@gmail.com,User,,17,,6,7
1488366850,[JAVA_API][GSOC] Add Java API bindings,"## Details

This PR adds JNI wrappers to the OpenVINO Java API and includes a `hello_query_device` sample that demonstrates the usage of the Query Device API feature to print device configuration and default config values.

Below is a list of JNI wrappers added:

* Read and compile a model directly from the model path

    | ov::Core | Core |
    |----------|------|
    | compile_model(model_path) | compile_model(modelPath) |
    | compile_model(model_path, device_name) | compile_model(modelPath, deviceName) |
    | compile_model(model_path, device_name, properties={}) | compile_model(modelPath, deviceName, properties) |

* Compile an ov.Model with the given properties
    | ov::Core | Core |
    |----------|------|
    | compile_model(model, device_name, properties={}) | compile_model(model, deviceName, properties) |
   
* List devices available for inference

    | ov::Core | Core |
    |----------|------|
    | get_available_devices() | get_available_devices() |

* Extract data from ov.Any type
    | ov::Any | Any |
    |----------|------|
    |  | asString() |
    |  | asList() |

* List the input and output tensor information of a CompiledModel. Returns the tensor shape, name and element type of each input/output tensor. 

    | ov::CompiledModel | CompiledModel|
    |----------|------|
    | inputs() | inputs() |
    | outputs() | outputs() |

* Set input/output tensors to infer on by tensor name when the model has multiple input/output tensors

    | ov::InferRequest| InferRequest |
    |----------|------|
    | set_tensor(tensor_name, tensor) | set_tensor(tensorName, tensor) |

* Create integer tensors and extract data as an int array

    | ov::Tensor| Tensor|
    |----------|------|
    | Tensor(shape, data) | Tensor(shape, data) |
    | data() | as_int() |

* Create Long tensors 

    | ov::Tensor| Tensor|
    |----------|------|
    | Tensor(shape, data) | Tensor(shape, data) |

* Save model into IR format from memory

    | | |
    |----------|------|
    | ov::serialize(model, xml_path, bin_path) | Openvino.serialize(model, xmlPath, binPath) |",True,709,https://api.github.com/repos/openvinotoolkit/openvino_contrib/pulls/709,https://github.com/openvinotoolkit/openvino_contrib/pull/709,closed,827,3,27,20,2,9,1,0,[{'name': 'category: java API'}],2023-08-24 16:35:46+00:00,2023-12-12 20:53:06+00:00,9519440.0,"110 days, 4:17:20","[{'comment_id': 1316233032, 'comment_body': '```suggestion\r\n        std::string c_tensorName = jstringToString(env, tensorName);\r\n```', 'comment_created': datetime.datetime(2023, 9, 5, 18, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1316304927, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 9, 5, 19, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1316306370, 'comment_body': '```suggestion\r\nstatic jobject vectorToJavaList(JNIEnv *env, std::vector<std::string> items)\r\n```', 'comment_created': datetime.datetime(2023, 9, 5, 19, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1316318951, 'comment_body': '```suggestion\r\n        std::shared_ptr<const Model> model = std::make_shared<const Model>(modelAddr);\r\n```', 'comment_created': datetime.datetime(2023, 9, 5, 19, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1316319110, 'comment_body': '```suggestion\r\n        serialize(model, xml_path, bin_path);\r\n```', 'comment_created': datetime.datetime(2023, 9, 5, 19, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1316336064, 'comment_body': 'There would be an error if item is not `std::string`', 'comment_created': datetime.datetime(2023, 9, 5, 19, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1316338050, 'comment_body': ""Just for understanding in future :)\r\n```suggestion\r\n        // AnyMap will be copied inside compile_model, so we don't have to track the lifetime of this object\r\n        CompiledModel *compiled_model = new CompiledModel();\r\n```"", 'comment_created': datetime.datetime(2023, 9, 5, 19, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1331694764, 'comment_body': 'My mistake, not needed', 'comment_created': datetime.datetime(2023, 9, 20, 14, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'likholat', 'type': 'User'}, {'comment_id': 1353225538, 'comment_body': '[Updated](https://github.com/openvinotoolkit/openvino_contrib/pull/709/commits/98c3e6debff015a71afd196771698d99b048278b#diff-7eea2d8fe6a6c9d40a378141adc603ea0b429492bd1410ae550edd7cd2d31807) to accept `std::string` items.', 'comment_created': datetime.datetime(2023, 10, 10, 19, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rajatkrishna', 'type': 'User'}]","[{'commit_sha': '2ae6b6e90e3c646e26db76d29a901a8ffcd1645b', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '841a8070e08f705a6ed53450d75d67831289470e', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2035d266c2d693380e95ed636246e03a1e2b374a', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '515c311adc19e7e4583bc0e2e2198e30906de9f6', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9e60af9a2576fc96ea5110c9c1432fc15251380', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f8be6940d7d0e38ffcf6a75085efc4a342f41ff', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e02038a84503394d2f8729171de8e4c9002cd58e', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98c3e6debff015a71afd196771698d99b048278b', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc15092f7bb5e81b490d6f697a619faf31b974ca', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d039ec23735cb6bbe642c5506bfa1840ac63f34', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c283d0828fa54f0a2d924c828320260981f5f541', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e62491e3372a0504475132861ec83b79dff87f6', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cdc84aaf0474b14b1fea3a19bc49810245e73ca', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9bef6a816c817d579112a578ce2d083b1b52455', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ecf6836bcf194bfcf68aaac7e43954b2e9b3109', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '842c638590f0ce535d1598f373d53b8e6e3de7bd', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a94a669d97f465e2a26cfc2f69615fec2e36b8d', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7a4300d45e3b84eb74fabd86ba94a38cc2785f6', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ff501b4fa7593365b269ce987339bc52e8d585f', 'committer_username': 'likholat', 'committer_name': 'Anna Likholat', 'committer_email': 'anna.likholat@intel.com', 'commit_date': datetime.datetime(2017, 9, 22, 14, 5, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9776c5c6d6444fb45e67331135820a1a21b85041', 'committer_username': 'likholat', 'committer_name': 'Anna Likholat', 'committer_email': 'anna.likholat@intel.com', 'commit_date': datetime.datetime(2017, 9, 22, 14, 5, 58, tzinfo=datetime.timezone.utc)}]",Rajat Krishna,61770314,rajatkrishna99@gmail.com,User,,17,,6,7
1492287154,[WIP] Integrating OpenVINO Runtime in Spark NLP,"Reopened as https://github.com/JohnSnowLabs/spark-nlp/pull/14200

---
This PR introduces OpenVINO Runtime support in Spark NLP

## Description

This PR enables Spark NLP to leverage the OpenVINO Runtime API for Java to load and run models in various formats including ONNX, PaddlePaddle, Tensorflow, Tensorflow Lite and OpenVINO IR format. OpenVINO also enables performance improvements when running on supported intel hardware, with upto 40% improvement vs Tensorflow on [benchmarks](https://github.com/rajatkrishna/google-summer-of-code/tree/main/benchmarks) with no further tuning. You can also take advantage of the full optimization and quantization capabilities offered by the OpenVINO toolkit when exporting/converting the model to the OpenVINO format using the Model Conversion API.

The following annotators have been enabled to work with OpenVINO:

- [x] BertEmbeddings: https://colab.research.google.com/drive/1J9IlT0CLrmvEOHBxuKHreEyVqsfsbidm?usp=sharing
- [x] RoBertaEmbeddings: https://colab.research.google.com/drive/1oFRqCuk2XLk29Q0X5uyGyFFQtBz23pBd?usp=sharing
- [x] XlmRoBertaEmbeddings: https://colab.research.google.com/drive/1btFhV9vunqRB-kKxTCKlBXffdE6um_Pv?usp=sharing

Note: To take advantage of this feature, see [these instructions](https://github.com/rajatkrishna/google-summer-of-code/blob/main/docs/openvino/build-ov-lin.md) to build OpenVINO jar (Linux), and [these](https://github.com/rajatkrishna/google-summer-of-code/blob/main/docs/spark-nlp/spark-nlp-jar.md) to build Spark NLP. OpenVINO is cross-platform. Refer [here](https://github.com/rajatkrishna/google-summer-of-code/blob/main/docs/openvino/build-ov-win.md) for Windows build instructions, and [here](https://github.com/openvinotoolkit/openvino/blob/master/docs/dev/build.md) for other platforms.

## Motivation and Context

- Out-of-the-box optimizations and better performance on supported Intel hardware
- Capable of reading ONNX, PaddlePaddle, TensorFlow and TensorFlow Lite formats directly
- This work was completed as part of Google Summer of Code 2023

## Screenshots (if appropriate):

## Types of changes

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] Code improvements with no or little impact
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

## Checklist:

- [x] My code follows the code style of this project.
- [x] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have read the [CONTRIBUTING](https://sparknlp.org/contribute.html) page.
- [x] I have added tests to cover my changes.
- [x] All new and existing tests passed.",False,13947,https://api.github.com/repos/JohnSnowLabs/spark-nlp/pulls/13947,https://github.com/JohnSnowLabs/spark-nlp/pull/13947,closed,849,67,23,8,0,0,0,0,[],2023-08-28 15:31:06+00:00,2024-03-09 04:04:03+00:00,16720377.0,"193 days, 12:32:57",[],"[{'commit_sha': '08e27d1913a0d55a68ac9e2515544f0d3f416f2a', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50bd63268c6ecaf6c4caf62ab8989ddb0fd536d8', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b38f6ea429780dc6ed7262d531f44c3250720427', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '718ee1b874e0f25c572472f3c1f63f2fe8ac8e76', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b543a36282ffc6798daf2212291165c508703d', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a42f39ce5ee84248ee8a8ec3bd00be28318f77a', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b069c8ec6230ac70e6c0117e8fd10c4b28e22f4', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9935856c91007d25fc054915743a7fac48ebe5dc', 'committer_username': 'rajatkrishna', 'committer_name': 'Rajat Krishna', 'committer_email': 'rajatkrishna99@gmail.com', 'commit_date': datetime.datetime(2020, 3, 4, 4, 11, 42, tzinfo=datetime.timezone.utc)}]",Rajat Krishna,61770314,rajatkrishna99@gmail.com,User,,17,,6,7

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
309381188,openvino_contrib,openvinotoolkit/openvino_contrib,C++,143,103,31,89,889,14,17,4,"[{'id': 1785024665, 'number': 894, 'closed': datetime.datetime(2024, 4, 24, 12, 41, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 21, 17, 22, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2920759.0, 'time_delta': '33 days, 19:19:19', 'additions': 42, 'deletions': 0, 'state': 'closed'}, {'id': 1750466733, 'number': 883, 'closed': datetime.datetime(2024, 3, 13, 15, 37, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 29, 20, 17, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1106392.0, 'time_delta': '12 days, 19:19:52', 'additions': 132, 'deletions': 10, 'state': 'closed'}, {'id': 1488366850, 'number': 709, 'closed': datetime.datetime(2023, 12, 12, 20, 53, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 24, 16, 35, 46, tzinfo=datetime.timezone.utc), 'time_taken': 9519440.0, 'time_delta': '110 days, 4:17:20', 'additions': 827, 'deletions': 3, 'state': 'closed'}, {'id': 1463070556, 'number': 699, 'closed': datetime.datetime(2023, 8, 10, 11, 39, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 4, 14, 50, 4, tzinfo=datetime.timezone.utc), 'time_taken': 506943.0, 'time_delta': '5 days, 20:49:03', 'additions': 39, 'deletions': 0, 'state': 'closed'}, {'id': 1433644905, 'number': 685, 'closed': datetime.datetime(2023, 8, 24, 16, 36, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 13, 19, 4, 27, tzinfo=datetime.timezone.utc), 'time_taken': 3619907.0, 'time_delta': '41 days, 21:31:47', 'additions': 533, 'deletions': 2, 'state': 'closed'}, {'id': 1381386222, 'number': 668, 'closed': datetime.datetime(2023, 6, 29, 22, 39, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 6, 19, 25, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1998846.0, 'time_delta': '23 days, 3:14:06', 'additions': 524, 'deletions': 430, 'state': 'closed'}]"
104670986,spark-nlp,JohnSnowLabs/spark-nlp,Scala,706,3797,99,113,8566,58,418,21,"[{'id': 1909617848, 'number': 14313, 'closed': datetime.datetime(2024, 6, 10, 12, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 7, 17, 31, 8, tzinfo=datetime.timezone.utc), 'time_taken': 241432.0, 'time_delta': '2 days, 19:03:52', 'additions': 15899, 'deletions': 0, 'state': 'closed'}, {'id': 1896122746, 'number': 14308, 'closed': datetime.datetime(2024, 6, 3, 11, 47, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 30, 14, 11, 5, tzinfo=datetime.timezone.utc), 'time_taken': 336979.0, 'time_delta': '3 days, 21:36:19', 'additions': 22, 'deletions': 14, 'state': 'closed'}, {'id': 1763885084, 'number': 14200, 'closed': datetime.datetime(2024, 5, 21, 16, 9, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 9, 4, 2, 38, tzinfo=datetime.timezone.utc), 'time_taken': 6350786.0, 'time_delta': '73 days, 12:06:26', 'additions': 1513, 'deletions': 127, 'state': 'closed'}, {'id': 1492287154, 'number': 13947, 'closed': datetime.datetime(2024, 3, 9, 4, 4, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 15, 31, 6, tzinfo=datetime.timezone.utc), 'time_taken': 16720377.0, 'time_delta': '193 days, 12:32:57', 'additions': 849, 'deletions': 67, 'state': 'closed'}]"
