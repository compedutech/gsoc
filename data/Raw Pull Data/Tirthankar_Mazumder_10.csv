pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
455346391,Transition `sympy.parsing.latex` from Antlr parser to Lark parser,"#### References to other Issues or PRs

Fixes #19528
Fixes #14004

#### Brief description of what is fixed or changed

This PR aims to move the sympy latex parser from Antlr to a pure python parser Lark (reasons for choosing Lark below). The two issues that this PR fixes give several reasons for moving away from Antlr. The PR will be feature complete when compared with the Antlr parser and hopefully allow for easier modifications of the grammar for future community contributions. 

cc: @bollwyvl, @asmeurer

#### Other comments

Reasons lark https://github.com/lark-parser/lark was chosen:
  - seems to be one of the more active python parser projects: actively developing and merging community PRs
  - lark can generate standalone python files that do depend on lark for parsing a given grammar. Enabling sympy to ship without needing lark as a dependency
  - while not necessary for parsing latex math equations lark is capable of parsing all context free grammars (similar to Antlr)
  - LALR(1) parser is used for parsing grammar
  - grammar file is well known [EBNF grammar](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)

#### Release Notes

<!-- BEGIN RELEASE NOTES -->
* parsing
  * transition latex parser from Antlr to Lark LALR(1) parser
<!-- END RELEASE NOTES -->",False,19825,https://api.github.com/repos/sympy/sympy/pulls/19825,https://github.com/sympy/sympy/pull/19825,closed,2677,4742,22,12,36,25,3,0,"[{'name': 'parsing'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2020-07-22 20:45:29+00:00,2023-06-09 21:19:22+00:00,90894833.0,"1052 days, 0:33:53","[{'comment_id': 459156935, 'comment_body': 'Is this file also automatically generated? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157058, 'comment_body': ""I guess it probably isn't :)"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157291, 'comment_body': 'Is there a page that documents the syntax for this file that we can link to in here (assuming it allows comments)?', 'comment_created': datetime.datetime(2020, 7, 23, 0, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158550, 'comment_body': ""I thought the grammar file doesn't depend on lark at runtime. Or are we testing that the grammar file generates properly somewhere?"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158778, 'comment_body': ""Here's some links:\r\n- the canonical docs: https://lark-parser.readthedocs.io/en/latest/grammar/\r\n- the simplified self-description: https://github.com/lark-parser/lark/blob/master/examples/lark.lark\r\n- the self-description with templates: https://github.com/lark-parser/lark/blob/master/examples/template_lark.lark\r\n- a python: https://github.com/lark-parser/lark/blob/master/examples/python3.lark\r\n\r\nAnd indeed, comments are denoted with `//`"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459159513, 'comment_body': 'Here is the lark documentation on it https://lark-parser.readthedocs.io/en/latest/grammar/. Though I am sure there are better documents on this.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160202, 'comment_body': ""Any number of approaches, not mutually exclusive:\r\n- don't check in the parser, if you want to use it off `git+https`, install lark\r\n- build the parser at build time, ship, and use by default\r\n  - while lark is fast, reading _another_ file from disk, generating the parser, etc. isn't free, especially if it were to be done every time\r\n- if `lark` is available at runtime, and the user were to _want_ to change the grammar, they could"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459160369, 'comment_body': 'So I think this is worth discussion. Lark can generate a python file `lark_grammar.py` in this case. Do we want to check in the generated file to git (currently I am doing this). This could also be done in the packaging step by sympy when it distributes a the sdist and wheels etc.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160574, 'comment_body': 'Ahh I see you brought up this exact issue https://github.com/sympy/sympy/pull/19825#issuecomment-662766127. Yeup either works with me.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160937, 'comment_body': 'No this file is not auto generated', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160945, 'comment_body': 'Ah, I thought maybe // were comments, but the lines here confused me. Is there any reason they are commented out? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459161795, 'comment_body': 'Standalone parsers generated with 0.8.2+ are licensed under the MPL, which seems more compatible with BSD-3...\r\n\r\nhttps://github.com/lark-parser/lark/issues/507\r\n\r\nAlso there have been some performance enhancements...', 'comment_created': datetime.datetime(2020, 7, 23, 0, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459171368, 'comment_body': 'Great I will make sure to use the latest! Also nice to hear that the license is more compatible', 'comment_created': datetime.datetime(2020, 7, 23, 1, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459172952, 'comment_body': ""I didn't notice this. GPL is definitely a no go. I'm not sure if MPL is OK either actually. I don't understand why they would restrict the licensing of the parser like this. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459175154, 'comment_body': ""I think we should either check it in or generate it at package build time. Generating it on the fly when the user calls the parser would be neat, but would probably slow things down more than necessary. \r\n\r\nThe main disadvantage of checking it in is that people might not realize that it is a generated file, and try to edit it directly. On the other hand, not checking it in adds some complexity to the build process and makes things slightly harder for people who want to use SymPy directly from git without installing (currently SymPy doesn't have any build steps). My preference is toward checking the file in. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176224, 'comment_body': ""No file is written to disk unless you explicitly _ask_ for it, with a special CLI invocation. It's purely a performance (and dependency-avoidance) mechanism."", 'comment_created': datetime.datetime(2020, 7, 23, 1, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459176489, 'comment_body': 'You should note the command that should be used to regenerate the file here. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176655, 'comment_body': 'The autolev parser still uses antlr, but I guess it was never made to use this. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176895, 'comment_body': 'Still working on matching features of the antlr parser', 'comment_created': datetime.datetime(2020, 7, 23, 1, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459177158, 'comment_body': '@asmeurer if lark is available, it just looks like this!', 'comment_created': datetime.datetime(2020, 7, 23, 1, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459177819, 'comment_body': ""Wait so it's faster to use lark than the auto generated file if it is installed? "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459183491, 'comment_body': 'No, I think the up-front cost of the standalone file will be faster. Successive calls would be identical, presumably. I have no benchmarks to support this.', 'comment_created': datetime.datetime(2020, 7, 23, 2, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 460210360, 'comment_body': 'This should not be here. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460210540, 'comment_body': 'Perhaps it would be simpler to do this transformation on the tokenization. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460216978, 'comment_body': 'Agreed will clean all this once I have a working version :)', 'comment_created': datetime.datetime(2020, 7, 24, 18, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}]","[{'commit_sha': '75e5f959990c63f0e5f677ed215a6bf75cfeca6f', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e398b35ee99f4fca274147ea58bb89cf2c0caf3c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0f07bd82f89715ab332cb1ff4e1d66df466d122', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fed857e996122458b46b12c806fd83530dfa8c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a13859d5f3e495fa5fdf4d00f738d8921b4f68', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde22a1dfd37292de2b30a03f091f21cd9327dcf', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccf2e6de68d475952dc13152963da3bd0047b1b', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3195d511b2669ef1b21e74eadcf2dc282e4f407c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687d42a1c893e5184f7796832d1e01dc4558d7ac', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda133b1a056fd06b823a539e41def2f1aa6d3d6', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621ee181573b10853a9d5349e1ffeb7150322f01', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9fdb01532753bda9037bd5a83f8b6e32cb54e1d', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}]",Christopher Ostrouchov,1740337,chris.ostrouchov@gmail.com,User,,184,,155,140
1382097119,[DON'T MERGE] Changed the LaTeX parser implementation from ANTLR to Lark.,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs

Resumes the work of https://github.com/sympy/sympy/pull/19825

<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->

As requested by @asmeurer and @Upabjojr, I have made a draft PR on which all my work will be pushed. I have marked it as a draft because it is still a WIP.

#### Brief description of what is fixed or changed
To be written.

#### Other comments
To be written.

#### Release Notes
To be written.
<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->

<!-- END RELEASE NOTES -->
",False,25210,https://api.github.com/repos/sympy/sympy/pulls/25210,https://github.com/sympy/sympy/pull/25210,closed,2956,4699,20,14,3,0,0,0,[],2023-06-07 07:30:02+00:00,2023-06-08 16:54:43+00:00,120281.0,"1 day, 9:24:41",[],"[{'commit_sha': 'c95becac496760407f48aed0e4122484a0b021f7', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf8037560e148a56c886f74cf444f7a818858754', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4cabca85b7e364915f18baa0276f9935e342639', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eab5d4bb182b5cf86f4c19234f06cddd59776c0', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a767fbb7a267a33c7abe4528b7f9142eafedacd', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd91773f1f002772d236284b821958ca8b7f6a370', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a5c017ec9d951fbf39ce3a36fe7d70b1b423b9', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63e86d6135787a48d857d6cb76774e36387d221d', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad03baedcccba12219a789e5ff62f5133fcf574d', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c94633676171d8d287ea9045821494363c77cd0', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dd32caacb482a18abd4441287dcd6d8b6f2e80b', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4cd766e0f63a10109d470542d4f4d52d1eb249e', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39b805821dd6b83d6825ab4b9e41cb920921504a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e022dd7ea445a3aa9578bceaf16b6b2e65cf8475', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
455346391,Transition `sympy.parsing.latex` from Antlr parser to Lark parser,"#### References to other Issues or PRs

Fixes #19528
Fixes #14004

#### Brief description of what is fixed or changed

This PR aims to move the sympy latex parser from Antlr to a pure python parser Lark (reasons for choosing Lark below). The two issues that this PR fixes give several reasons for moving away from Antlr. The PR will be feature complete when compared with the Antlr parser and hopefully allow for easier modifications of the grammar for future community contributions. 

cc: @bollwyvl, @asmeurer

#### Other comments

Reasons lark https://github.com/lark-parser/lark was chosen:
  - seems to be one of the more active python parser projects: actively developing and merging community PRs
  - lark can generate standalone python files that do depend on lark for parsing a given grammar. Enabling sympy to ship without needing lark as a dependency
  - while not necessary for parsing latex math equations lark is capable of parsing all context free grammars (similar to Antlr)
  - LALR(1) parser is used for parsing grammar
  - grammar file is well known [EBNF grammar](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)

#### Release Notes

<!-- BEGIN RELEASE NOTES -->
* parsing
  * transition latex parser from Antlr to Lark LALR(1) parser
<!-- END RELEASE NOTES -->",False,19825,https://api.github.com/repos/sympy/sympy/pulls/19825,https://github.com/sympy/sympy/pull/19825,closed,2677,4742,22,12,36,25,3,0,"[{'name': 'parsing'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2020-07-22 20:45:29+00:00,2023-06-09 21:19:22+00:00,90894833.0,"1052 days, 0:33:53","[{'comment_id': 459156935, 'comment_body': 'Is this file also automatically generated? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157058, 'comment_body': ""I guess it probably isn't :)"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157291, 'comment_body': 'Is there a page that documents the syntax for this file that we can link to in here (assuming it allows comments)?', 'comment_created': datetime.datetime(2020, 7, 23, 0, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158550, 'comment_body': ""I thought the grammar file doesn't depend on lark at runtime. Or are we testing that the grammar file generates properly somewhere?"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158778, 'comment_body': ""Here's some links:\r\n- the canonical docs: https://lark-parser.readthedocs.io/en/latest/grammar/\r\n- the simplified self-description: https://github.com/lark-parser/lark/blob/master/examples/lark.lark\r\n- the self-description with templates: https://github.com/lark-parser/lark/blob/master/examples/template_lark.lark\r\n- a python: https://github.com/lark-parser/lark/blob/master/examples/python3.lark\r\n\r\nAnd indeed, comments are denoted with `//`"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459159513, 'comment_body': 'Here is the lark documentation on it https://lark-parser.readthedocs.io/en/latest/grammar/. Though I am sure there are better documents on this.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160202, 'comment_body': ""Any number of approaches, not mutually exclusive:\r\n- don't check in the parser, if you want to use it off `git+https`, install lark\r\n- build the parser at build time, ship, and use by default\r\n  - while lark is fast, reading _another_ file from disk, generating the parser, etc. isn't free, especially if it were to be done every time\r\n- if `lark` is available at runtime, and the user were to _want_ to change the grammar, they could"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459160369, 'comment_body': 'So I think this is worth discussion. Lark can generate a python file `lark_grammar.py` in this case. Do we want to check in the generated file to git (currently I am doing this). This could also be done in the packaging step by sympy when it distributes a the sdist and wheels etc.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160574, 'comment_body': 'Ahh I see you brought up this exact issue https://github.com/sympy/sympy/pull/19825#issuecomment-662766127. Yeup either works with me.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160937, 'comment_body': 'No this file is not auto generated', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160945, 'comment_body': 'Ah, I thought maybe // were comments, but the lines here confused me. Is there any reason they are commented out? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459161795, 'comment_body': 'Standalone parsers generated with 0.8.2+ are licensed under the MPL, which seems more compatible with BSD-3...\r\n\r\nhttps://github.com/lark-parser/lark/issues/507\r\n\r\nAlso there have been some performance enhancements...', 'comment_created': datetime.datetime(2020, 7, 23, 0, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459171368, 'comment_body': 'Great I will make sure to use the latest! Also nice to hear that the license is more compatible', 'comment_created': datetime.datetime(2020, 7, 23, 1, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459172952, 'comment_body': ""I didn't notice this. GPL is definitely a no go. I'm not sure if MPL is OK either actually. I don't understand why they would restrict the licensing of the parser like this. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459175154, 'comment_body': ""I think we should either check it in or generate it at package build time. Generating it on the fly when the user calls the parser would be neat, but would probably slow things down more than necessary. \r\n\r\nThe main disadvantage of checking it in is that people might not realize that it is a generated file, and try to edit it directly. On the other hand, not checking it in adds some complexity to the build process and makes things slightly harder for people who want to use SymPy directly from git without installing (currently SymPy doesn't have any build steps). My preference is toward checking the file in. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176224, 'comment_body': ""No file is written to disk unless you explicitly _ask_ for it, with a special CLI invocation. It's purely a performance (and dependency-avoidance) mechanism."", 'comment_created': datetime.datetime(2020, 7, 23, 1, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459176489, 'comment_body': 'You should note the command that should be used to regenerate the file here. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176655, 'comment_body': 'The autolev parser still uses antlr, but I guess it was never made to use this. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176895, 'comment_body': 'Still working on matching features of the antlr parser', 'comment_created': datetime.datetime(2020, 7, 23, 1, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459177158, 'comment_body': '@asmeurer if lark is available, it just looks like this!', 'comment_created': datetime.datetime(2020, 7, 23, 1, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459177819, 'comment_body': ""Wait so it's faster to use lark than the auto generated file if it is installed? "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459183491, 'comment_body': 'No, I think the up-front cost of the standalone file will be faster. Successive calls would be identical, presumably. I have no benchmarks to support this.', 'comment_created': datetime.datetime(2020, 7, 23, 2, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 460210360, 'comment_body': 'This should not be here. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460210540, 'comment_body': 'Perhaps it would be simpler to do this transformation on the tokenization. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460216978, 'comment_body': 'Agreed will clean all this once I have a working version :)', 'comment_created': datetime.datetime(2020, 7, 24, 18, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}]","[{'commit_sha': '75e5f959990c63f0e5f677ed215a6bf75cfeca6f', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e398b35ee99f4fca274147ea58bb89cf2c0caf3c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0f07bd82f89715ab332cb1ff4e1d66df466d122', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fed857e996122458b46b12c806fd83530dfa8c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a13859d5f3e495fa5fdf4d00f738d8921b4f68', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde22a1dfd37292de2b30a03f091f21cd9327dcf', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccf2e6de68d475952dc13152963da3bd0047b1b', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3195d511b2669ef1b21e74eadcf2dc282e4f407c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687d42a1c893e5184f7796832d1e01dc4558d7ac', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda133b1a056fd06b823a539e41def2f1aa6d3d6', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621ee181573b10853a9d5349e1ffeb7150322f01', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9fdb01532753bda9037bd5a83f8b6e32cb54e1d', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}]",Christopher Ostrouchov,1740337,chris.ostrouchov@gmail.com,User,,184,,155,140
1115161683,Remove all mentions of Travis from the codebase,"Travis CI is no longer functioning and with #24232, we now no longer require it for pushing the development docs, which was the last remaining thing it did that was not on GitHub Actions.

The ON_TRAVIS variable in the tests has been renamed to ON_CI, and is based on the CI environment variable being set (see
https://docs.github.com/en/actions/learn-github-actions/environment-variables).

<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
- other
  - Completely remove all usage/mentions of Travis CI. 
<!-- END RELEASE NOTES -->
",True,24239,https://api.github.com/repos/sympy/sympy/pulls/24239,https://github.com/sympy/sympy/pull/24239,closed,63,576,21,1,2,0,2,0,"[{'name': 'Travis'}, {'name': 'CI'}]",2022-11-08 23:11:58+00:00,2022-11-09 00:26:07+00:00,4449.0,1:14:09,[],"[{'commit_sha': 'bcb8a73bc34a8372b39b8a2f0edcb7452d929a9c', 'committer_username': 'asmeurer', 'committer_name': 'Aaron Meurer', 'committer_email': 'asmeurer@gmail.com', 'commit_date': datetime.datetime(2009, 4, 7, 19, 11, 38, tzinfo=datetime.timezone.utc)}]",Aaron Meurer,71486,asmeurer@gmail.com,User,,226,,27,822
455346391,Transition `sympy.parsing.latex` from Antlr parser to Lark parser,"#### References to other Issues or PRs

Fixes #19528
Fixes #14004

#### Brief description of what is fixed or changed

This PR aims to move the sympy latex parser from Antlr to a pure python parser Lark (reasons for choosing Lark below). The two issues that this PR fixes give several reasons for moving away from Antlr. The PR will be feature complete when compared with the Antlr parser and hopefully allow for easier modifications of the grammar for future community contributions. 

cc: @bollwyvl, @asmeurer

#### Other comments

Reasons lark https://github.com/lark-parser/lark was chosen:
  - seems to be one of the more active python parser projects: actively developing and merging community PRs
  - lark can generate standalone python files that do depend on lark for parsing a given grammar. Enabling sympy to ship without needing lark as a dependency
  - while not necessary for parsing latex math equations lark is capable of parsing all context free grammars (similar to Antlr)
  - LALR(1) parser is used for parsing grammar
  - grammar file is well known [EBNF grammar](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)

#### Release Notes

<!-- BEGIN RELEASE NOTES -->
* parsing
  * transition latex parser from Antlr to Lark LALR(1) parser
<!-- END RELEASE NOTES -->",False,19825,https://api.github.com/repos/sympy/sympy/pulls/19825,https://github.com/sympy/sympy/pull/19825,closed,2677,4742,22,12,36,25,3,0,"[{'name': 'parsing'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2020-07-22 20:45:29+00:00,2023-06-09 21:19:22+00:00,90894833.0,"1052 days, 0:33:53","[{'comment_id': 459156935, 'comment_body': 'Is this file also automatically generated? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157058, 'comment_body': ""I guess it probably isn't :)"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157291, 'comment_body': 'Is there a page that documents the syntax for this file that we can link to in here (assuming it allows comments)?', 'comment_created': datetime.datetime(2020, 7, 23, 0, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158550, 'comment_body': ""I thought the grammar file doesn't depend on lark at runtime. Or are we testing that the grammar file generates properly somewhere?"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158778, 'comment_body': ""Here's some links:\r\n- the canonical docs: https://lark-parser.readthedocs.io/en/latest/grammar/\r\n- the simplified self-description: https://github.com/lark-parser/lark/blob/master/examples/lark.lark\r\n- the self-description with templates: https://github.com/lark-parser/lark/blob/master/examples/template_lark.lark\r\n- a python: https://github.com/lark-parser/lark/blob/master/examples/python3.lark\r\n\r\nAnd indeed, comments are denoted with `//`"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459159513, 'comment_body': 'Here is the lark documentation on it https://lark-parser.readthedocs.io/en/latest/grammar/. Though I am sure there are better documents on this.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160202, 'comment_body': ""Any number of approaches, not mutually exclusive:\r\n- don't check in the parser, if you want to use it off `git+https`, install lark\r\n- build the parser at build time, ship, and use by default\r\n  - while lark is fast, reading _another_ file from disk, generating the parser, etc. isn't free, especially if it were to be done every time\r\n- if `lark` is available at runtime, and the user were to _want_ to change the grammar, they could"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459160369, 'comment_body': 'So I think this is worth discussion. Lark can generate a python file `lark_grammar.py` in this case. Do we want to check in the generated file to git (currently I am doing this). This could also be done in the packaging step by sympy when it distributes a the sdist and wheels etc.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160574, 'comment_body': 'Ahh I see you brought up this exact issue https://github.com/sympy/sympy/pull/19825#issuecomment-662766127. Yeup either works with me.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160937, 'comment_body': 'No this file is not auto generated', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160945, 'comment_body': 'Ah, I thought maybe // were comments, but the lines here confused me. Is there any reason they are commented out? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459161795, 'comment_body': 'Standalone parsers generated with 0.8.2+ are licensed under the MPL, which seems more compatible with BSD-3...\r\n\r\nhttps://github.com/lark-parser/lark/issues/507\r\n\r\nAlso there have been some performance enhancements...', 'comment_created': datetime.datetime(2020, 7, 23, 0, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459171368, 'comment_body': 'Great I will make sure to use the latest! Also nice to hear that the license is more compatible', 'comment_created': datetime.datetime(2020, 7, 23, 1, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459172952, 'comment_body': ""I didn't notice this. GPL is definitely a no go. I'm not sure if MPL is OK either actually. I don't understand why they would restrict the licensing of the parser like this. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459175154, 'comment_body': ""I think we should either check it in or generate it at package build time. Generating it on the fly when the user calls the parser would be neat, but would probably slow things down more than necessary. \r\n\r\nThe main disadvantage of checking it in is that people might not realize that it is a generated file, and try to edit it directly. On the other hand, not checking it in adds some complexity to the build process and makes things slightly harder for people who want to use SymPy directly from git without installing (currently SymPy doesn't have any build steps). My preference is toward checking the file in. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176224, 'comment_body': ""No file is written to disk unless you explicitly _ask_ for it, with a special CLI invocation. It's purely a performance (and dependency-avoidance) mechanism."", 'comment_created': datetime.datetime(2020, 7, 23, 1, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459176489, 'comment_body': 'You should note the command that should be used to regenerate the file here. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176655, 'comment_body': 'The autolev parser still uses antlr, but I guess it was never made to use this. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176895, 'comment_body': 'Still working on matching features of the antlr parser', 'comment_created': datetime.datetime(2020, 7, 23, 1, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459177158, 'comment_body': '@asmeurer if lark is available, it just looks like this!', 'comment_created': datetime.datetime(2020, 7, 23, 1, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459177819, 'comment_body': ""Wait so it's faster to use lark than the auto generated file if it is installed? "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459183491, 'comment_body': 'No, I think the up-front cost of the standalone file will be faster. Successive calls would be identical, presumably. I have no benchmarks to support this.', 'comment_created': datetime.datetime(2020, 7, 23, 2, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 460210360, 'comment_body': 'This should not be here. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460210540, 'comment_body': 'Perhaps it would be simpler to do this transformation on the tokenization. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460216978, 'comment_body': 'Agreed will clean all this once I have a working version :)', 'comment_created': datetime.datetime(2020, 7, 24, 18, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}]","[{'commit_sha': '75e5f959990c63f0e5f677ed215a6bf75cfeca6f', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e398b35ee99f4fca274147ea58bb89cf2c0caf3c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0f07bd82f89715ab332cb1ff4e1d66df466d122', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fed857e996122458b46b12c806fd83530dfa8c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a13859d5f3e495fa5fdf4d00f738d8921b4f68', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde22a1dfd37292de2b30a03f091f21cd9327dcf', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccf2e6de68d475952dc13152963da3bd0047b1b', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3195d511b2669ef1b21e74eadcf2dc282e4f407c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687d42a1c893e5184f7796832d1e01dc4558d7ac', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda133b1a056fd06b823a539e41def2f1aa6d3d6', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621ee181573b10853a9d5349e1ffeb7150322f01', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9fdb01532753bda9037bd5a83f8b6e32cb54e1d', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}]",Christopher Ostrouchov,1740337,chris.ostrouchov@gmail.com,User,,184,,155,140
455346391,Transition `sympy.parsing.latex` from Antlr parser to Lark parser,"#### References to other Issues or PRs

Fixes #19528
Fixes #14004

#### Brief description of what is fixed or changed

This PR aims to move the sympy latex parser from Antlr to a pure python parser Lark (reasons for choosing Lark below). The two issues that this PR fixes give several reasons for moving away from Antlr. The PR will be feature complete when compared with the Antlr parser and hopefully allow for easier modifications of the grammar for future community contributions. 

cc: @bollwyvl, @asmeurer

#### Other comments

Reasons lark https://github.com/lark-parser/lark was chosen:
  - seems to be one of the more active python parser projects: actively developing and merging community PRs
  - lark can generate standalone python files that do depend on lark for parsing a given grammar. Enabling sympy to ship without needing lark as a dependency
  - while not necessary for parsing latex math equations lark is capable of parsing all context free grammars (similar to Antlr)
  - LALR(1) parser is used for parsing grammar
  - grammar file is well known [EBNF grammar](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)

#### Release Notes

<!-- BEGIN RELEASE NOTES -->
* parsing
  * transition latex parser from Antlr to Lark LALR(1) parser
<!-- END RELEASE NOTES -->",False,19825,https://api.github.com/repos/sympy/sympy/pulls/19825,https://github.com/sympy/sympy/pull/19825,closed,2677,4742,22,12,36,25,3,0,"[{'name': 'parsing'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2020-07-22 20:45:29+00:00,2023-06-09 21:19:22+00:00,90894833.0,"1052 days, 0:33:53","[{'comment_id': 459156935, 'comment_body': 'Is this file also automatically generated? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157058, 'comment_body': ""I guess it probably isn't :)"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157291, 'comment_body': 'Is there a page that documents the syntax for this file that we can link to in here (assuming it allows comments)?', 'comment_created': datetime.datetime(2020, 7, 23, 0, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158550, 'comment_body': ""I thought the grammar file doesn't depend on lark at runtime. Or are we testing that the grammar file generates properly somewhere?"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158778, 'comment_body': ""Here's some links:\r\n- the canonical docs: https://lark-parser.readthedocs.io/en/latest/grammar/\r\n- the simplified self-description: https://github.com/lark-parser/lark/blob/master/examples/lark.lark\r\n- the self-description with templates: https://github.com/lark-parser/lark/blob/master/examples/template_lark.lark\r\n- a python: https://github.com/lark-parser/lark/blob/master/examples/python3.lark\r\n\r\nAnd indeed, comments are denoted with `//`"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459159513, 'comment_body': 'Here is the lark documentation on it https://lark-parser.readthedocs.io/en/latest/grammar/. Though I am sure there are better documents on this.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160202, 'comment_body': ""Any number of approaches, not mutually exclusive:\r\n- don't check in the parser, if you want to use it off `git+https`, install lark\r\n- build the parser at build time, ship, and use by default\r\n  - while lark is fast, reading _another_ file from disk, generating the parser, etc. isn't free, especially if it were to be done every time\r\n- if `lark` is available at runtime, and the user were to _want_ to change the grammar, they could"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459160369, 'comment_body': 'So I think this is worth discussion. Lark can generate a python file `lark_grammar.py` in this case. Do we want to check in the generated file to git (currently I am doing this). This could also be done in the packaging step by sympy when it distributes a the sdist and wheels etc.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160574, 'comment_body': 'Ahh I see you brought up this exact issue https://github.com/sympy/sympy/pull/19825#issuecomment-662766127. Yeup either works with me.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160937, 'comment_body': 'No this file is not auto generated', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160945, 'comment_body': 'Ah, I thought maybe // were comments, but the lines here confused me. Is there any reason they are commented out? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459161795, 'comment_body': 'Standalone parsers generated with 0.8.2+ are licensed under the MPL, which seems more compatible with BSD-3...\r\n\r\nhttps://github.com/lark-parser/lark/issues/507\r\n\r\nAlso there have been some performance enhancements...', 'comment_created': datetime.datetime(2020, 7, 23, 0, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459171368, 'comment_body': 'Great I will make sure to use the latest! Also nice to hear that the license is more compatible', 'comment_created': datetime.datetime(2020, 7, 23, 1, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459172952, 'comment_body': ""I didn't notice this. GPL is definitely a no go. I'm not sure if MPL is OK either actually. I don't understand why they would restrict the licensing of the parser like this. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459175154, 'comment_body': ""I think we should either check it in or generate it at package build time. Generating it on the fly when the user calls the parser would be neat, but would probably slow things down more than necessary. \r\n\r\nThe main disadvantage of checking it in is that people might not realize that it is a generated file, and try to edit it directly. On the other hand, not checking it in adds some complexity to the build process and makes things slightly harder for people who want to use SymPy directly from git without installing (currently SymPy doesn't have any build steps). My preference is toward checking the file in. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176224, 'comment_body': ""No file is written to disk unless you explicitly _ask_ for it, with a special CLI invocation. It's purely a performance (and dependency-avoidance) mechanism."", 'comment_created': datetime.datetime(2020, 7, 23, 1, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459176489, 'comment_body': 'You should note the command that should be used to regenerate the file here. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176655, 'comment_body': 'The autolev parser still uses antlr, but I guess it was never made to use this. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176895, 'comment_body': 'Still working on matching features of the antlr parser', 'comment_created': datetime.datetime(2020, 7, 23, 1, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459177158, 'comment_body': '@asmeurer if lark is available, it just looks like this!', 'comment_created': datetime.datetime(2020, 7, 23, 1, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459177819, 'comment_body': ""Wait so it's faster to use lark than the auto generated file if it is installed? "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459183491, 'comment_body': 'No, I think the up-front cost of the standalone file will be faster. Successive calls would be identical, presumably. I have no benchmarks to support this.', 'comment_created': datetime.datetime(2020, 7, 23, 2, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 460210360, 'comment_body': 'This should not be here. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460210540, 'comment_body': 'Perhaps it would be simpler to do this transformation on the tokenization. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460216978, 'comment_body': 'Agreed will clean all this once I have a working version :)', 'comment_created': datetime.datetime(2020, 7, 24, 18, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}]","[{'commit_sha': '75e5f959990c63f0e5f677ed215a6bf75cfeca6f', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e398b35ee99f4fca274147ea58bb89cf2c0caf3c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0f07bd82f89715ab332cb1ff4e1d66df466d122', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fed857e996122458b46b12c806fd83530dfa8c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a13859d5f3e495fa5fdf4d00f738d8921b4f68', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde22a1dfd37292de2b30a03f091f21cd9327dcf', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccf2e6de68d475952dc13152963da3bd0047b1b', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3195d511b2669ef1b21e74eadcf2dc282e4f407c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687d42a1c893e5184f7796832d1e01dc4558d7ac', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda133b1a056fd06b823a539e41def2f1aa6d3d6', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621ee181573b10853a9d5349e1ffeb7150322f01', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9fdb01532753bda9037bd5a83f8b6e32cb54e1d', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}]",Christopher Ostrouchov,1740337,chris.ostrouchov@gmail.com,User,,184,,155,140
455346391,Transition `sympy.parsing.latex` from Antlr parser to Lark parser,"#### References to other Issues or PRs

Fixes #19528
Fixes #14004

#### Brief description of what is fixed or changed

This PR aims to move the sympy latex parser from Antlr to a pure python parser Lark (reasons for choosing Lark below). The two issues that this PR fixes give several reasons for moving away from Antlr. The PR will be feature complete when compared with the Antlr parser and hopefully allow for easier modifications of the grammar for future community contributions. 

cc: @bollwyvl, @asmeurer

#### Other comments

Reasons lark https://github.com/lark-parser/lark was chosen:
  - seems to be one of the more active python parser projects: actively developing and merging community PRs
  - lark can generate standalone python files that do depend on lark for parsing a given grammar. Enabling sympy to ship without needing lark as a dependency
  - while not necessary for parsing latex math equations lark is capable of parsing all context free grammars (similar to Antlr)
  - LALR(1) parser is used for parsing grammar
  - grammar file is well known [EBNF grammar](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)

#### Release Notes

<!-- BEGIN RELEASE NOTES -->
* parsing
  * transition latex parser from Antlr to Lark LALR(1) parser
<!-- END RELEASE NOTES -->",False,19825,https://api.github.com/repos/sympy/sympy/pulls/19825,https://github.com/sympy/sympy/pull/19825,closed,2677,4742,22,12,36,25,3,0,"[{'name': 'parsing'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2020-07-22 20:45:29+00:00,2023-06-09 21:19:22+00:00,90894833.0,"1052 days, 0:33:53","[{'comment_id': 459156935, 'comment_body': 'Is this file also automatically generated? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157058, 'comment_body': ""I guess it probably isn't :)"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157291, 'comment_body': 'Is there a page that documents the syntax for this file that we can link to in here (assuming it allows comments)?', 'comment_created': datetime.datetime(2020, 7, 23, 0, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158550, 'comment_body': ""I thought the grammar file doesn't depend on lark at runtime. Or are we testing that the grammar file generates properly somewhere?"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158778, 'comment_body': ""Here's some links:\r\n- the canonical docs: https://lark-parser.readthedocs.io/en/latest/grammar/\r\n- the simplified self-description: https://github.com/lark-parser/lark/blob/master/examples/lark.lark\r\n- the self-description with templates: https://github.com/lark-parser/lark/blob/master/examples/template_lark.lark\r\n- a python: https://github.com/lark-parser/lark/blob/master/examples/python3.lark\r\n\r\nAnd indeed, comments are denoted with `//`"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459159513, 'comment_body': 'Here is the lark documentation on it https://lark-parser.readthedocs.io/en/latest/grammar/. Though I am sure there are better documents on this.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160202, 'comment_body': ""Any number of approaches, not mutually exclusive:\r\n- don't check in the parser, if you want to use it off `git+https`, install lark\r\n- build the parser at build time, ship, and use by default\r\n  - while lark is fast, reading _another_ file from disk, generating the parser, etc. isn't free, especially if it were to be done every time\r\n- if `lark` is available at runtime, and the user were to _want_ to change the grammar, they could"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459160369, 'comment_body': 'So I think this is worth discussion. Lark can generate a python file `lark_grammar.py` in this case. Do we want to check in the generated file to git (currently I am doing this). This could also be done in the packaging step by sympy when it distributes a the sdist and wheels etc.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160574, 'comment_body': 'Ahh I see you brought up this exact issue https://github.com/sympy/sympy/pull/19825#issuecomment-662766127. Yeup either works with me.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160937, 'comment_body': 'No this file is not auto generated', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160945, 'comment_body': 'Ah, I thought maybe // were comments, but the lines here confused me. Is there any reason they are commented out? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459161795, 'comment_body': 'Standalone parsers generated with 0.8.2+ are licensed under the MPL, which seems more compatible with BSD-3...\r\n\r\nhttps://github.com/lark-parser/lark/issues/507\r\n\r\nAlso there have been some performance enhancements...', 'comment_created': datetime.datetime(2020, 7, 23, 0, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459171368, 'comment_body': 'Great I will make sure to use the latest! Also nice to hear that the license is more compatible', 'comment_created': datetime.datetime(2020, 7, 23, 1, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459172952, 'comment_body': ""I didn't notice this. GPL is definitely a no go. I'm not sure if MPL is OK either actually. I don't understand why they would restrict the licensing of the parser like this. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459175154, 'comment_body': ""I think we should either check it in or generate it at package build time. Generating it on the fly when the user calls the parser would be neat, but would probably slow things down more than necessary. \r\n\r\nThe main disadvantage of checking it in is that people might not realize that it is a generated file, and try to edit it directly. On the other hand, not checking it in adds some complexity to the build process and makes things slightly harder for people who want to use SymPy directly from git without installing (currently SymPy doesn't have any build steps). My preference is toward checking the file in. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176224, 'comment_body': ""No file is written to disk unless you explicitly _ask_ for it, with a special CLI invocation. It's purely a performance (and dependency-avoidance) mechanism."", 'comment_created': datetime.datetime(2020, 7, 23, 1, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459176489, 'comment_body': 'You should note the command that should be used to regenerate the file here. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176655, 'comment_body': 'The autolev parser still uses antlr, but I guess it was never made to use this. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176895, 'comment_body': 'Still working on matching features of the antlr parser', 'comment_created': datetime.datetime(2020, 7, 23, 1, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459177158, 'comment_body': '@asmeurer if lark is available, it just looks like this!', 'comment_created': datetime.datetime(2020, 7, 23, 1, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459177819, 'comment_body': ""Wait so it's faster to use lark than the auto generated file if it is installed? "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459183491, 'comment_body': 'No, I think the up-front cost of the standalone file will be faster. Successive calls would be identical, presumably. I have no benchmarks to support this.', 'comment_created': datetime.datetime(2020, 7, 23, 2, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 460210360, 'comment_body': 'This should not be here. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460210540, 'comment_body': 'Perhaps it would be simpler to do this transformation on the tokenization. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460216978, 'comment_body': 'Agreed will clean all this once I have a working version :)', 'comment_created': datetime.datetime(2020, 7, 24, 18, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}]","[{'commit_sha': '75e5f959990c63f0e5f677ed215a6bf75cfeca6f', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e398b35ee99f4fca274147ea58bb89cf2c0caf3c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0f07bd82f89715ab332cb1ff4e1d66df466d122', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fed857e996122458b46b12c806fd83530dfa8c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a13859d5f3e495fa5fdf4d00f738d8921b4f68', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde22a1dfd37292de2b30a03f091f21cd9327dcf', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccf2e6de68d475952dc13152963da3bd0047b1b', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3195d511b2669ef1b21e74eadcf2dc282e4f407c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687d42a1c893e5184f7796832d1e01dc4558d7ac', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda133b1a056fd06b823a539e41def2f1aa6d3d6', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621ee181573b10853a9d5349e1ffeb7150322f01', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9fdb01532753bda9037bd5a83f8b6e32cb54e1d', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}]",Christopher Ostrouchov,1740337,chris.ostrouchov@gmail.com,User,,184,,155,140
1384836650,[GSoC] Added a preliminary Lark LaTeX parser implementation.,"#### References to other Issues or PRs

Resumes the work of #19825.

As requested by @asmeurer and @Upabjojr, I have made a draft PR on which all my work will be pushed. I have marked it as a draft because it is still a WIP.

#### Brief description of what is fixed or changed

To be written.

#### Other comments


#### Release Notes

To be written.

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->

<!-- END RELEASE NOTES -->
",False,25219,https://api.github.com/repos/sympy/sympy/pulls/25219,https://github.com/sympy/sympy/pull/25219,closed,542,0,5,12,17,5,0,0,[],2023-06-08 16:53:49+00:00,2023-07-05 02:56:12+00:00,2282543.0,"26 days, 10:02:23","[{'comment_id': 1223422541, 'comment_body': 'It could be better to split the rules in the grammar than defining the conditions here.\r\nI often try to minimize the conditions in transformer, if it can be done with the grammar itself, for better practice, and hopefully the library can optimize that part.', 'comment_created': datetime.datetime(2023, 6, 8, 18, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1223425725, 'comment_body': 'You can avoid indexing if you use `_` prefix in terminal\r\nhttps://lark-parser.readthedocs.io/en/latest/tree_construction.html#terminals', 'comment_created': datetime.datetime(2023, 6, 8, 18, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1224560873, 'comment_body': 'what about:\r\n```python\r\nexpected_failures = {4}\r\nfor i, (latex_str, sympy_expr) in enumerate(GOOD_PAIRS):\r\n    if i in expected_failures:\r\n        continue\r\n    ...\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1224570467, 'comment_body': 'The `expected_failures` can be used to keep track of the failing examples.', 'comment_created': datetime.datetime(2023, 6, 9, 17, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1225293239, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': 'f659dbaf244b0592cd4c29eb60e779474cb1cd1a', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b4f46c487384d97de6e9129778f3c6dee579c6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e19efa48dac2e060fa22fbe5344e4f30c91d593', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3868dc2acd7c6cb89329be5f04f9da612bc960b5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd30c067edc180b594110cbfdbbe4269a54d476b2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2449e2d12b9695a7090a0fc367b3510b323589cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6205525680aec35bbbd5314f7705c6609fd81d92', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26f728f66d258fe29fd24e9e35062751c1a8576b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c8caa4f78889ab70d00c85a90ca6faa9c4d7833', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20f6fb752e64ae817b46d6b0b6a6b2b97edc6f6e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2ccd08842f95b45ffa9084a70617365e44bc02', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02e54e43d2d21124fbfec7dfbc96e2ee6cfc105b', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1384836650,[GSoC] Added a preliminary Lark LaTeX parser implementation.,"#### References to other Issues or PRs

Resumes the work of #19825.

As requested by @asmeurer and @Upabjojr, I have made a draft PR on which all my work will be pushed. I have marked it as a draft because it is still a WIP.

#### Brief description of what is fixed or changed

To be written.

#### Other comments


#### Release Notes

To be written.

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->

<!-- END RELEASE NOTES -->
",False,25219,https://api.github.com/repos/sympy/sympy/pulls/25219,https://github.com/sympy/sympy/pull/25219,closed,542,0,5,12,17,5,0,0,[],2023-06-08 16:53:49+00:00,2023-07-05 02:56:12+00:00,2282543.0,"26 days, 10:02:23","[{'comment_id': 1223422541, 'comment_body': 'It could be better to split the rules in the grammar than defining the conditions here.\r\nI often try to minimize the conditions in transformer, if it can be done with the grammar itself, for better practice, and hopefully the library can optimize that part.', 'comment_created': datetime.datetime(2023, 6, 8, 18, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1223425725, 'comment_body': 'You can avoid indexing if you use `_` prefix in terminal\r\nhttps://lark-parser.readthedocs.io/en/latest/tree_construction.html#terminals', 'comment_created': datetime.datetime(2023, 6, 8, 18, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1224560873, 'comment_body': 'what about:\r\n```python\r\nexpected_failures = {4}\r\nfor i, (latex_str, sympy_expr) in enumerate(GOOD_PAIRS):\r\n    if i in expected_failures:\r\n        continue\r\n    ...\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1224570467, 'comment_body': 'The `expected_failures` can be used to keep track of the failing examples.', 'comment_created': datetime.datetime(2023, 6, 9, 17, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1225293239, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': 'f659dbaf244b0592cd4c29eb60e779474cb1cd1a', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b4f46c487384d97de6e9129778f3c6dee579c6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e19efa48dac2e060fa22fbe5344e4f30c91d593', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3868dc2acd7c6cb89329be5f04f9da612bc960b5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd30c067edc180b594110cbfdbbe4269a54d476b2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2449e2d12b9695a7090a0fc367b3510b323589cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6205525680aec35bbbd5314f7705c6609fd81d92', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26f728f66d258fe29fd24e9e35062751c1a8576b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c8caa4f78889ab70d00c85a90ca6faa9c4d7833', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20f6fb752e64ae817b46d6b0b6a6b2b97edc6f6e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2ccd08842f95b45ffa9084a70617365e44bc02', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02e54e43d2d21124fbfec7dfbc96e2ee6cfc105b', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
157276303,Add Experimental LaTeX parsing,"Hi folks! Long-time dabbler in sympy stuff, love the work!

Based on:

https://github.com/augustt198/latex2sympy/issues/1#issuecomment-349332771

...this brings over that codebase, with a few changes discovered in trying to get it all up to specs I could find by running tests locally, etc. The initial cut was some [`2to3` scripting](https://gist.github.com/anonymous/2271d8a3a1d98e23fd45e3f402f2c38f), but the rest was hand-tinkering.

I wanted to see a ""clean"" run, so have skipped all the new tests.

This is really more of the start of a conversation rather than something that should be merged. While it does work, the `antlr4` stuff (though easily conda-packageable) is a bit heavy, though if the generated code could be done at packaging time, it might be a fine option, as the `antlr4-python*-runtimes` aren't bad at all (on pip, easy to package).

Other, more labor-intensive options (mentioned on that issue) include adopting a pure-python parser chain, etc.

Related Issues (will add _fixes_ at some point):
- #5418
- #11880
- #9882",True,13706,https://api.github.com/repos/sympy/sympy/pulls/13706,https://github.com/sympy/sympy/pull/13706,closed,5228,7,23,54,63,26,0,0,[],2017-12-08 16:04:18+00:00,2018-01-26 02:13:54+00:00,4183776.0,"48 days, 10:09:36","[{'comment_id': 155829722, 'comment_body': 'Note that sympy has `sympy.external.importtools.import_module`. It would be preferable to modify our existing machinery for all of these kinds of import checks, instead of having a standalone tool to maintain.', 'comment_created': datetime.datetime(2017, 12, 8, 17, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 155829897, 'comment_body': ""You'll need to include their license or better yet getting their permission to license this under the SymPy license is best."", 'comment_created': datetime.datetime(2017, 12, 8, 17, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 155829957, 'comment_body': 'Use `import_module`.', 'comment_created': datetime.datetime(2017, 12, 8, 17, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 155857617, 'comment_body': 'Tests should use the functions from sympy.utilities.pytest, not pytest. ', 'comment_created': datetime.datetime(2017, 12, 8, 19, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 155914043, 'comment_body': 'Added in LICENSE.txt for now!\r\n\r\n@augustt198, can you provide any feedback regarding licensing not covered by your initial response to augustt198/latex2sympy#1?', 'comment_created': datetime.datetime(2017, 12, 9, 5, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 158171654, 'comment_body': 'This should be added to the blacklist in sympy/utilities/runtests.py', 'comment_created': datetime.datetime(2017, 12, 21, 0, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 158172369, 'comment_body': ""I don't like this. If you run `setup.py clean` with this it will delete checked in files. "", 'comment_created': datetime.datetime(2017, 12, 21, 0, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 158172494, 'comment_body': 'Can you give a better error message if antlr4 is not installed?', 'comment_created': datetime.datetime(2017, 12, 21, 0, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 158301366, 'comment_body': 'added, but then i suppose you mean removed from here as well', 'comment_created': datetime.datetime(2017, 12, 21, 15, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 158301714, 'comment_body': 'how do we feel about this level of pinning for now?', 'comment_created': datetime.datetime(2017, 12, 21, 15, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 158302284, 'comment_body': 'Can this also be removed, if it\'s in the ""master"" blacklist?', 'comment_created': datetime.datetime(2017, 12, 21, 15, 18, 47, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 158302621, 'comment_body': 'Is this also excluded by the master blacklist?', 'comment_created': datetime.datetime(2017, 12, 21, 15, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 158401195, 'comment_body': ""Yes. There shouldn't be special things like this in the Travis configuration. We want the tests to pass if someone runs `./bin/doctest` on their own system. "", 'comment_created': datetime.datetime(2017, 12, 21, 23, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 158401411, 'comment_body': 'I believe the blacklists are separate. This one can stay. Although if the generated file has trailing whitespace it would be nice to remove that as some people (including me) have their editors configured to remove it automatically. ', 'comment_created': datetime.datetime(2017, 12, 21, 23, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 158401535, 'comment_body': ""I think this is fine for now. When a new version comes out we can figure out how different it is and if it's backwards or forwards compatible. "", 'comment_created': datetime.datetime(2017, 12, 21, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 158499175, 'comment_body': 'leaving these in...', 'comment_created': datetime.datetime(2017, 12, 22, 14, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 158499712, 'comment_body': ""Added whitespace stripping. I tried running these through yapf, and the results were less than readable, so this is probably as much prodding as we'll want."", 'comment_created': datetime.datetime(2017, 12, 22, 14, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 158606714, 'comment_body': 'You can remove them.', 'comment_created': datetime.datetime(2017, 12, 24, 17, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ylemkimon', 'type': 'User'}, {'comment_id': 158609346, 'comment_body': 'thx, removed...', 'comment_created': datetime.datetime(2017, 12, 24, 20, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 163385994, 'comment_body': 'Make it clearer that only one of the commands should be run, by splitting them into separate code blocks. ', 'comment_created': datetime.datetime(2018, 1, 23, 21, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 163386870, 'comment_body': 'Add a note here that the input string should be prepended with an `r` so that the latex backslashes are interpreted correctly. ', 'comment_created': datetime.datetime(2018, 1, 23, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 163387127, 'comment_body': 'How about a more insightful example here. ', 'comment_created': datetime.datetime(2018, 1, 23, 21, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 163390081, 'comment_body': 'Also the disclaimers I discussed should be in this docstring, as well as the main docs. ', 'comment_created': datetime.datetime(2018, 1, 23, 21, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 163390341, 'comment_body': '`LaTeXParsingError` makes more sense to me, especially since many parsing errors will be from valid LaTeX. ', 'comment_created': datetime.datetime(2018, 1, 23, 21, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 163657029, 'comment_body': 'What do you mean by double-backslash? ', 'comment_created': datetime.datetime(2018, 1, 24, 19, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 163657702, 'comment_body': 'Oh you fixed it. ', 'comment_created': datetime.datetime(2018, 1, 24, 19, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}]","[{'commit_sha': '3cca0bc1bfaab7e8a3397fe8fad6777c4ea5de27', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bcde4c7b1e502c3ceb815a5e448099306d988349', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '002de20259dc48e2b33fdd63defd2902816c9324', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c5f091b10a496d959c74e8792da47319b01093cf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd8a7f8693c69f65b51999ffb2e8cd6235002ae64', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '98c50854bceefeb2a82d7332e362cb8270091d6f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8b1513a3094f744850befb04181e09a1e77ea3e6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f8cd10e5f00a017390dfe1fef4fd790830c6d546', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a4841ad1013df0bacec5d6123d0a87ea74926c3f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1f75c895678b27f56c6738e9d00ff48ef8eb6436', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '909470122055e4b35d467c05eef69e00030a4358', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1d512ccc9c74bb556d5316ea72dce05075864f1a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'be8ce4056707e1804850e9bcb8bde06fad0c7433', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3824cf3d386a174bf03ce608e6325776e4e72a82', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7429203d6998a6cac0f08328979395987ae5198b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '220d5418e1e7cfe2711b0c3a2a013151975824d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83597ce37431c8d00d13990a1ff39a5f3ee4ddb7', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2c2ccf8c2627ee90395c39b5d4c755efed13a19', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29421bc4753befbb02decc6475d308105989dcc', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef5a8b6bd34422e38783cb8ea9dbde685375b77a', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8302c13acba27f8dfa4d2e5d7fbfab3cc25cfca3', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc603c23003ed6a38b24a9f7fccd68a1e83e2b9', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0240a789ea706eb7d48af7d5469d17df47ab9b7', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57853007e644830e6b31cabea30d422876c21c71', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1d7c36b2865fa2d0a67b9b48c2508747d00ae27', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac75373d30ec693b951c0db8a9874c862ab49e3b', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e0b1658e705c7fa31c208be10b8447f5b6cddb0', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07c0880cb17fb992f081c448f70f07decd879861', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79a38ff24fa5e010940fa330c6d9295947fa4c64', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b97c674a07eb997b3ca0a4d4e4ae39ccba909743', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1bc015730c09083b52d28a0b2e270fe07e9e315', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe518fc06926cc7d939fc2c85e3843465c778c14', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b6a0663c30fee4af812531f85a33d8df5759ada', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '618696ccc8796d88899296af0f7d0511fa42cc0d', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787dea1a3bcc1fe7b005c09292d006b098e104a8', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32f1b8a15f2ce138b52e21274eff69bd0a1a0037', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c75e67320251a382cbfd2911684c55be99bfa9e', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed5c6121df83fb6ba727b82b060b2ad1c7200794', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02de9685c4e22a1d537f4716c925a588cb710ea8', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ec12cf4abf44d514f83a6a7fcb906c69b5367df', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9ab87d788a96e92c3c81f9bb43f40953d15abf7', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8340790ab9c5d990c1aeb1690772194fe48eaa73', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1efcffb8d75ce3b0dd022ce031293df4bd01e20e', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d42f7d896359510b050222065e4d3442b3a10ac', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45dcf98d1a274a3e555e343f095530afe14376f8', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34d2a53d9d3cbe3c11e9f1b7a4d596f099e82d9d', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84741bc73e86a837dd79e87e2a02f8966cf3ae6d', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbd4fb66c05252f5f7ae9ec5a29af603a35fba14', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba3df691c3342f8587fc93f138f62a9f09cd23c', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c468d8ef6d18e743643aeb896c438ae2177c456', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33cb500b2b515e75c327a65e09c66998d9a5814f', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aee17f716e0b4fbe86ea179db885f5d749cf829c', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dab88fe141ee9adda0eb55181dc587a1eb3f6ef9', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e94acb1dd84f2fedc6d87abf2adabde35179ab7', 'committer_username': 'bollwyvl', 'committer_name': 'Nicholas Bollweg', 'committer_email': None, 'commit_date': datetime.datetime(2009, 1, 9, 18, 1, 57, tzinfo=datetime.timezone.utc)}]",Nicholas Bollweg,45380,,User,,906,,3,213
1420312028,[GSoC] Added a preliminary Lark LaTeX parser implementation.,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Resumes the work of https://github.com/sympy/sympy/pull/19825.

As requested by @asmeurer and @Upabjojr, I have made a draft PR on which all my work will be pushed. I have marked it as a draft because it is still a WIP.

#### Brief description of what is fixed or changed

This is the v1 rewrite of the current ANTLR-based LaTeX parser. It contains most of the features that the ANTLR-based parser supports. Notable exceptions are:
* Interpreting `\frac{d}{dx}` as a derivative.
* Interpreting integrals with the `d` operator in a fraction, like `\int \frac{dz}{z}`.
* Support for Bra and Ket notation.
* Recognizing variables like `y_1''` and interpreting them as symbols correctly
* Recognizing expressions like `f'_1(x)` as function applications.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * Added a Lark-based LaTeX parser.
<!-- END RELEASE NOTES -->
",True,25324,https://api.github.com/repos/sympy/sympy/pulls/25324,https://github.com/sympy/sympy/pull/25324,closed,1286,3,6,101,9,27,0,0,[],2023-07-05 02:39:06+00:00,2023-08-12 18:30:27+00:00,3340281.0,"38 days, 15:51:21","[{'comment_id': 1253217675, 'comment_body': 'these `print` statements should not be merged.', 'comment_created': datetime.datetime(2023, 7, 5, 14, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253218143, 'comment_body': 'this should be removed', 'comment_created': datetime.datetime(2023, 7, 5, 14, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253219458, 'comment_body': 'is this variable needed? Correct way to use it would be `disabled = lark is None`', 'comment_created': datetime.datetime(2023, 7, 5, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253424918, 'comment_body': '`\\\\sin^{-1}` would be better handled with the _CARET_ operator as an expression, and then rendered into the `arcsin` by the transformer.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1258315351, 'comment_body': 'Resolved during the weekly meeting.', 'comment_created': datetime.datetime(2023, 7, 10, 13, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1258337256, 'comment_body': ""Good idea. I'll implement it like that."", 'comment_created': datetime.datetime(2023, 7, 10, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1259825868, 'comment_body': 'We should create two kinds of expressions: the ones that have higher priority than `\\binom` and the ones that have lower. That was the idea of `expression_core`... `expression_core` should contain all expressions that have higher priority than the backslash operators.\r\n\r\nGeneric `expression` should be either an `expression_core` or any kind of expressions that have lower priority than backslash operators.\r\n\r\nThis way should work.', 'comment_created': datetime.datetime(2023, 7, 11, 14, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260771617, 'comment_body': '`group_curly_parentheses | atomic_expr` can probably be replaced by `expression_core`', 'comment_created': datetime.datetime(2023, 7, 12, 8, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260835030, 'comment_body': '`expression_core` also allows for `group_round_parentheses` which is not a valid option in this scenario.', 'comment_created': datetime.datetime(2023, 7, 12, 8, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260841534, 'comment_body': 'what about just having:\r\n```\r\nfraction: CMD_FRAC expression_core expression_core\r\n```\r\nthat is, `expression_core` should contain all elements that have higher priority than `\\frac`.', 'comment_created': datetime.datetime(2023, 7, 12, 8, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260858003, 'comment_body': 'Setting aside the `group_round_parentheses` discussion, that would still not work. If we make this change, then in `\\frac12`, the `12` would parse as `number`, when we need it to parse as `DIGIT DIGIT` in this case.\r\n\r\nA similar thing would happen for `\\frac1234` whereas we need the `1234` to parse as `DIGIT DIGIT expression` where the expression contains `34` as a `number`.', 'comment_created': datetime.datetime(2023, 7, 12, 9, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260974391, 'comment_body': 'Using a named rule `A` in a different rule `B` does not mean that `A` has a higher priority than `B`. That is to say, `expression_core` does not have a higher precedence than `expression`. Both have equal precedence, which is the root reason for many of the ambiguous parses.\r\n\r\nAssigning `expression_core` a higher precedence than `expression` _is_ possible, but there are two things to keep in mind:\r\n1. Assigning priorities to rules is only possible using the Earley parser and not the LALR parser. Since you mentioned that you think that moving to the LALR parser might be a better option, I am mentioning this.\r\n2. If we go with the rule priorities route, then we lose the ability to inform the user that their input expression is ambiguous. Using rule priorities requires to use `ambiguity=resolve`, which means that any ambiguity in the parsing is resolved automatically (using rule priorities, if that is available). If we keep `ambiguity=explicit`, we retain the ability to inform the user of ambiguous parses, but lose the ability to use rules with different priorities.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260984991, 'comment_body': 'As you mentioned [here](https://matrix.to/#/!ieKAyoLMgajmgkdQZE:matrix.org/$sSGfnbR9sCvD06rPCApkMbi4aMeKgp2ok7CtjgRR1AQ?via=matrix.org&via=gitter.im), I removed `group_round_parentheses` from the definition of `expression_core` and made this change.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260985839, 'comment_body': ""As these are temporary, I'm marking this as resolved. They will be removed at the end."", 'comment_created': datetime.datetime(2023, 7, 12, 10, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260987501, 'comment_body': ""I'm not sure if it is needed or not. This is how ANTLR tests are disabled if the `antlr4-python3-runtime` is not found, in the current [master](https://github.com/sympy/sympy/blob/46558492a74bf2a324f9560af008b6c3ee587a6c/sympy/parsing/tests/test_latex.py#L27-L29).\r\n\r\nSince we want to do the same thing if Lark is not found, I added it."", 'comment_created': datetime.datetime(2023, 7, 12, 10, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260991182, 'comment_body': 'I still need to handle things like `\\sin^2 x`. This is correctly handled in the ANTLR parser (I checked), but there are no tests for ensuring this behavior in [`test_latex.py`](https://github.com/sympy/sympy/blob/46558492a74bf2a324f9560af008b6c3ee587a6c/sympy/parsing/tests/test_latex.py) so it is not a priority. My first priority is passing the test cases in the `test_latex.py`.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1261435504, 'comment_body': ""I'm marking this as resolved because we solved this issue in the team meeting."", 'comment_created': datetime.datetime(2023, 7, 12, 16, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1261436332, 'comment_body': ""I'm also marking this as resolved, because we discussed how to solve this problem during the team meeting, and the way to solve this is to use the same strategy but for binomial expressions."", 'comment_created': datetime.datetime(2023, 7, 12, 16, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1264334255, 'comment_body': ""This is checked for in [this function](https://github.com/sympy/sympy/blob/0ec134d277f14961e8b6629182895fc986658c2e/sympy/conftest.py#L67-L74). I'm marking this as resolved because it's required. I'll make the proposed change soon."", 'comment_created': datetime.datetime(2023, 7, 15, 5, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266845000, 'comment_body': ""> // TODO: Shouold [sic] we include the uppercase variants for the symbols where the uppercase variant doesn't have a separate meaning\r\n\r\n@Upabjojr could you comment on this?"", 'comment_created': datetime.datetime(2023, 7, 18, 14, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266845623, 'comment_body': '> // TODO: Should this be included? Delta usually denotes other things.\r\n@Upabjojr what are your thoughts on this?', 'comment_created': datetime.datetime(2023, 7, 18, 14, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266846970, 'comment_body': ""@Upabjojr What about this? Should `\\iota` be added? It's a valid LaTeX command, according to [this reference](https://www.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols), but I've rarely seen it used as a bona fide variable. At best, I've seen people use it to denote the imaginary number `i`."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266847881, 'comment_body': ""@Upabjojr What do you think of this? I think it's fine but I just wanted to cross-check with you."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266857678, 'comment_body': ""@Upabjojr For this one, I think doing it like this is a good idea. What do you think? I think that'll be a valuable feature as there is already an open issue for handling it specially: #20306."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266859918, 'comment_body': ""@Upabjojr I'm not sure whether we should have lowercase sigma or not. It's usually used to denote standard deviation, but I'm not sure how relevant that is here."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1283629078, 'comment_body': ""I'll resolve all the Greek symbol related queries, and move them into an issue of their own. They are low-priority, and won't require much work to add. All I really need is clarification on what features we want and which ones we don't want.\r\n\r\nThe Greek symbol stuff isn't important to the v1 Lark-based parser PR."", 'comment_created': datetime.datetime(2023, 8, 3, 19, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1284789850, 'comment_body': ""I've added this feature."", 'comment_created': datetime.datetime(2023, 8, 4, 19, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': '7863b841ceff4cd83c49bb7f05b5f64e4d45fcc4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f5f790c573214d4b974cdb90ad91998e1500d09', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa0a2ed71d7ee2a8ed83816e6d1b968163d41e2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49909cadcdeb22bdf90048804aa9d1ffa383921f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00db7719633143fb163c46022d51ce31c896a771', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbbc2ca42bf3f8c01a088bba8210b2f03850c91c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e8953c390b0f74147461e011b2bbc7ffee470d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76857d64cba1b54a7d4badc85cea965becc6c98a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c64a4a19fa443350f31f32a2a92da2de65a3481e', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b1913be35b6c96847cc1a0b90516078c3b6fff3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '208621f39599c85411edd3cfd5b59248634aa0ea', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f976c42a56760d116d70ec1eb396da4d34215cdf', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50d7706ab9120a311d0d5c1ac3237d1bb6140335', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9286274a882c8a5e55725742b3ca64a3db11c97b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465c905c268418ea333a3e2f318b3ea1ed014090', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f966dab3fc916489407deaae542b976f88b9d5c2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423f2a90060bab0dd6b25299e3ef18649ce35ec1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cc0623db26adc6a2eeb01953ab6f45df5d3f164', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba043891d69762152d234dba07dff1befc4c2e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa19b8508faea36008e963fed090030d4c93ffb6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '248a20e39d39753187eb959dcdc22441821b0c7c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917ceb2df6bb368e5af1674f8891bc828d8a7161', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb4f72eebfe39e49fe15e0bca85881df00f0c5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c99d4c6375042de5bdb4ac418d8e5f91ef2d12', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60770ad4412b30e825bc6ed995e3017f9fbab4f', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1a461b686665d1e2c50e84063da965cf68ed12', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14fffa6e04d04e3622649d4e8d3d3adb789a0d85', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7592494fb2c2508f5822692ca22ddd7b156e4cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5797c36a33435d72e4b600ad2f6cd3e3706b29c9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62bfa4f45a97abd789face8a57bc0e616f3729cb', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447c14cd4419a29edbcfc0d6f56c3d9725e5e8e2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0837b37f8b6203d65c2d6d6242d0015ead80d364', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c9e4d46c2b58abe17339d24a6e7ebb7cb7a47ed', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf6a1911ed7fce3ee6cb3e6f7ca919fb16051bd', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a7a7bfb10ede7bcadf565e4205b62e6e01e29fd', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70056a3d82611cf1e4748e7d1ac0d009acf1e86b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929f484310c56fe3c3cf38e9469767e637b1dd8c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3f11602c2655fac162054dd5de52614194d665f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0be1b26636329a55fb3656c17c549cfc0b19b1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6781e7670fcc65089af7ec7df724783459684061', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af08710e8820451daeeff283c3b75a952438521d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0398e5745f9fdf20d9670b040b6783f55f63a0d7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8525dcc5813e9f428ae81eccb87fbfbfeb8f0ee', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a713041dd351bd3d685af8509bd36cf051fe478', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef74986e5c79537bc7a062440a6300e5707e0de5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd93fb94b6b6c6a8b9b23cfae83b0d2bac151f7c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae52e2d5711eca7a35118e2ade6ba81a4fd9f7c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed0244cb89b630ef256abfb635bfa730738dc7b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3423720143a707864139c8f95f8be7334efda4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '716304ae40ddead73a56a4d71482ce2b2e2d44c9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b19f2a2d78a0a967166f8ef38de1fdb600db60d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5a0f3a5a854d499cc490ce24ea474c7b313446', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb5677966f640727b0bf36259f949b487b5d854', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882a71b233f0eca7dcc60c6c867ebea4a994dee5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13be69fe6bfe4c5444c478a76f9c7752b51f1fe3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdc95dc7f637a81c555838b85fa568a853a29d3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786d7fd0de5a38725a160bd9fc3508c1c219c4e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '923f531a2877ec0f71fc5494ea75dcd488a172e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fddd8f788901803533af983273a2ecbe0e5a6c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5fbf4e74e2d404758d8be025c20b72830e77156', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ebfe3dd019f6dc0dbef0b7068c931350ca1174c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7ba6caabd98779a487af78605dbf05fc2ac66f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b9fd310bdc23d22bf46295873a0a808ba485d0d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92fc1ba961281f25f41dcfc551e99e456d5c7f27', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700e3bc3efa844cd2d891eb374464e472b47f60c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc8e0ab357bf78741e910aab2e0664b96fb0cb4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bec0b676fd48f20d7c9e9cc81b56b4718cdf553', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83ce0c0a5d5266ffab8e043b9d890fb2ed319c7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f68a6504f412cafd782ef5c5553c8eb8cb5e9b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdb199d71f2c38e89ac3d6395d1c56d0f079f1c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741e1f07ca1b1b9622e8620b461437639a675c2c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e29efe2723f2905b2f193882a7e2eee4262a6bb6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261d887834fd6922aac345243500024736d375cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb6fe229aad6baa89f09bb1776c30ce46d74e4ab', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384ef0785e735acbeaff3be23a4f7343aee9124e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '126715ddf2d785bf4e6721e2fc548e4af78f050f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18697bc0a777102404f44173303927093c7bbb5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a623e43a837c2946823aa3f02aba45a1bbb2585f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6738c3d17973239593b74bd591ae58cd20eacb27', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f20bcc11c9a1391d4504af316c55ac4aac80716', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278768346a30ef2220247b139de35564a236ac80', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '085ce4ea9414551f497b3236ec5fd5a38e812c8c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb61a9aeda68f8a056f5b894115bb92e794d7df', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14a77dc073ef95bb917c03f6968877071a314618', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5207a150cb23dcab20015c4bd52695bf04f6da', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b723cce2939d293bce335ff6b0f48084cafb8abd', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091fc6b0736b184208dcea6a924879282bc572c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7b68605bc5ab333fd8f6ae75321e3917820cf2', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c69a6b9f1982571024b462adf47109e6792d4117', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6a099c28f898b0447739a2404d403d6fe2da86', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad17284b4fd7e51958e6e1b9eaea430ddac50d5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b6cafa399fea34aa2dbe30eb0841f964f98c110', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6e06a84b620e4cc7a172f14d58e7e0ec200d441', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48926e89b205e45d6245f9f3dcc73d8af0e91185', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1076343b9196098fdc72812f13c34868f6cd75', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1afa6cfa19a5216d407383bedf009c18e6a22a9d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e7c95a5121d776e414a645058bae180ece763c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd16d9b7a5719bfffe0d3c809225e99b1ac6807', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4519392947e7281566a8a7d0549d8a0cf1c1072e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1250dd326cd13b7bf9a384d2d84613d4471a5bf9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fa08ab7d72dcc038c20b36294e27f1f446b80fc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
455346391,Transition `sympy.parsing.latex` from Antlr parser to Lark parser,"#### References to other Issues or PRs

Fixes #19528
Fixes #14004

#### Brief description of what is fixed or changed

This PR aims to move the sympy latex parser from Antlr to a pure python parser Lark (reasons for choosing Lark below). The two issues that this PR fixes give several reasons for moving away from Antlr. The PR will be feature complete when compared with the Antlr parser and hopefully allow for easier modifications of the grammar for future community contributions. 

cc: @bollwyvl, @asmeurer

#### Other comments

Reasons lark https://github.com/lark-parser/lark was chosen:
  - seems to be one of the more active python parser projects: actively developing and merging community PRs
  - lark can generate standalone python files that do depend on lark for parsing a given grammar. Enabling sympy to ship without needing lark as a dependency
  - while not necessary for parsing latex math equations lark is capable of parsing all context free grammars (similar to Antlr)
  - LALR(1) parser is used for parsing grammar
  - grammar file is well known [EBNF grammar](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)

#### Release Notes

<!-- BEGIN RELEASE NOTES -->
* parsing
  * transition latex parser from Antlr to Lark LALR(1) parser
<!-- END RELEASE NOTES -->",False,19825,https://api.github.com/repos/sympy/sympy/pulls/19825,https://github.com/sympy/sympy/pull/19825,closed,2677,4742,22,12,36,25,3,0,"[{'name': 'parsing'}, {'name': 'Please take over'}, {'name': 'Merge conflict'}]",2020-07-22 20:45:29+00:00,2023-06-09 21:19:22+00:00,90894833.0,"1052 days, 0:33:53","[{'comment_id': 459156935, 'comment_body': 'Is this file also automatically generated? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157058, 'comment_body': ""I guess it probably isn't :)"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459157291, 'comment_body': 'Is there a page that documents the syntax for this file that we can link to in here (assuming it allows comments)?', 'comment_created': datetime.datetime(2020, 7, 23, 0, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158550, 'comment_body': ""I thought the grammar file doesn't depend on lark at runtime. Or are we testing that the grammar file generates properly somewhere?"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459158778, 'comment_body': ""Here's some links:\r\n- the canonical docs: https://lark-parser.readthedocs.io/en/latest/grammar/\r\n- the simplified self-description: https://github.com/lark-parser/lark/blob/master/examples/lark.lark\r\n- the self-description with templates: https://github.com/lark-parser/lark/blob/master/examples/template_lark.lark\r\n- a python: https://github.com/lark-parser/lark/blob/master/examples/python3.lark\r\n\r\nAnd indeed, comments are denoted with `//`"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459159513, 'comment_body': 'Here is the lark documentation on it https://lark-parser.readthedocs.io/en/latest/grammar/. Though I am sure there are better documents on this.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160202, 'comment_body': ""Any number of approaches, not mutually exclusive:\r\n- don't check in the parser, if you want to use it off `git+https`, install lark\r\n- build the parser at build time, ship, and use by default\r\n  - while lark is fast, reading _another_ file from disk, generating the parser, etc. isn't free, especially if it were to be done every time\r\n- if `lark` is available at runtime, and the user were to _want_ to change the grammar, they could"", 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459160369, 'comment_body': 'So I think this is worth discussion. Lark can generate a python file `lark_grammar.py` in this case. Do we want to check in the generated file to git (currently I am doing this). This could also be done in the packaging step by sympy when it distributes a the sdist and wheels etc.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160574, 'comment_body': 'Ahh I see you brought up this exact issue https://github.com/sympy/sympy/pull/19825#issuecomment-662766127. Yeup either works with me.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160937, 'comment_body': 'No this file is not auto generated', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459160945, 'comment_body': 'Ah, I thought maybe // were comments, but the lines here confused me. Is there any reason they are commented out? ', 'comment_created': datetime.datetime(2020, 7, 23, 0, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459161795, 'comment_body': 'Standalone parsers generated with 0.8.2+ are licensed under the MPL, which seems more compatible with BSD-3...\r\n\r\nhttps://github.com/lark-parser/lark/issues/507\r\n\r\nAlso there have been some performance enhancements...', 'comment_created': datetime.datetime(2020, 7, 23, 0, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459171368, 'comment_body': 'Great I will make sure to use the latest! Also nice to hear that the license is more compatible', 'comment_created': datetime.datetime(2020, 7, 23, 1, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459172952, 'comment_body': ""I didn't notice this. GPL is definitely a no go. I'm not sure if MPL is OK either actually. I don't understand why they would restrict the licensing of the parser like this. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459175154, 'comment_body': ""I think we should either check it in or generate it at package build time. Generating it on the fly when the user calls the parser would be neat, but would probably slow things down more than necessary. \r\n\r\nThe main disadvantage of checking it in is that people might not realize that it is a generated file, and try to edit it directly. On the other hand, not checking it in adds some complexity to the build process and makes things slightly harder for people who want to use SymPy directly from git without installing (currently SymPy doesn't have any build steps). My preference is toward checking the file in. "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176224, 'comment_body': ""No file is written to disk unless you explicitly _ask_ for it, with a special CLI invocation. It's purely a performance (and dependency-avoidance) mechanism."", 'comment_created': datetime.datetime(2020, 7, 23, 1, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459176489, 'comment_body': 'You should note the command that should be used to regenerate the file here. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176655, 'comment_body': 'The autolev parser still uses antlr, but I guess it was never made to use this. ', 'comment_created': datetime.datetime(2020, 7, 23, 1, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459176895, 'comment_body': 'Still working on matching features of the antlr parser', 'comment_created': datetime.datetime(2020, 7, 23, 1, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}, {'comment_id': 459177158, 'comment_body': '@asmeurer if lark is available, it just looks like this!', 'comment_created': datetime.datetime(2020, 7, 23, 1, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 459177819, 'comment_body': ""Wait so it's faster to use lark than the auto generated file if it is installed? "", 'comment_created': datetime.datetime(2020, 7, 23, 1, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 459183491, 'comment_body': 'No, I think the up-front cost of the standalone file will be faster. Successive calls would be identical, presumably. I have no benchmarks to support this.', 'comment_created': datetime.datetime(2020, 7, 23, 2, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'bollwyvl', 'type': 'User'}, {'comment_id': 460210360, 'comment_body': 'This should not be here. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460210540, 'comment_body': 'Perhaps it would be simpler to do this transformation on the tokenization. ', 'comment_created': datetime.datetime(2020, 7, 24, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 460216978, 'comment_body': 'Agreed will clean all this once I have a working version :)', 'comment_created': datetime.datetime(2020, 7, 24, 18, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'costrouc', 'type': 'User'}]","[{'commit_sha': '75e5f959990c63f0e5f677ed215a6bf75cfeca6f', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e398b35ee99f4fca274147ea58bb89cf2c0caf3c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0f07bd82f89715ab332cb1ff4e1d66df466d122', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fed857e996122458b46b12c806fd83530dfa8c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a13859d5f3e495fa5fdf4d00f738d8921b4f68', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde22a1dfd37292de2b30a03f091f21cd9327dcf', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccf2e6de68d475952dc13152963da3bd0047b1b', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3195d511b2669ef1b21e74eadcf2dc282e4f407c', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '687d42a1c893e5184f7796832d1e01dc4558d7ac', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda133b1a056fd06b823a539e41def2f1aa6d3d6', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621ee181573b10853a9d5349e1ffeb7150322f01', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9fdb01532753bda9037bd5a83f8b6e32cb54e1d', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}]",Christopher Ostrouchov,1740337,chris.ostrouchov@gmail.com,User,,184,,155,140
1384836650,[GSoC] Added a preliminary Lark LaTeX parser implementation.,"#### References to other Issues or PRs

Resumes the work of #19825.

As requested by @asmeurer and @Upabjojr, I have made a draft PR on which all my work will be pushed. I have marked it as a draft because it is still a WIP.

#### Brief description of what is fixed or changed

To be written.

#### Other comments


#### Release Notes

To be written.

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->

<!-- END RELEASE NOTES -->
",False,25219,https://api.github.com/repos/sympy/sympy/pulls/25219,https://github.com/sympy/sympy/pull/25219,closed,542,0,5,12,17,5,0,0,[],2023-06-08 16:53:49+00:00,2023-07-05 02:56:12+00:00,2282543.0,"26 days, 10:02:23","[{'comment_id': 1223422541, 'comment_body': 'It could be better to split the rules in the grammar than defining the conditions here.\r\nI often try to minimize the conditions in transformer, if it can be done with the grammar itself, for better practice, and hopefully the library can optimize that part.', 'comment_created': datetime.datetime(2023, 6, 8, 18, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1223425725, 'comment_body': 'You can avoid indexing if you use `_` prefix in terminal\r\nhttps://lark-parser.readthedocs.io/en/latest/tree_construction.html#terminals', 'comment_created': datetime.datetime(2023, 6, 8, 18, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1224560873, 'comment_body': 'what about:\r\n```python\r\nexpected_failures = {4}\r\nfor i, (latex_str, sympy_expr) in enumerate(GOOD_PAIRS):\r\n    if i in expected_failures:\r\n        continue\r\n    ...\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1224570467, 'comment_body': 'The `expected_failures` can be used to keep track of the failing examples.', 'comment_created': datetime.datetime(2023, 6, 9, 17, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1225293239, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': 'f659dbaf244b0592cd4c29eb60e779474cb1cd1a', 'committer_username': 'costrouc', 'committer_name': 'Christopher Ostrouchov', 'committer_email': 'chris.ostrouchov@gmail.com', 'commit_date': datetime.datetime(2012, 5, 15, 0, 38, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56b4f46c487384d97de6e9129778f3c6dee579c6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e19efa48dac2e060fa22fbe5344e4f30c91d593', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3868dc2acd7c6cb89329be5f04f9da612bc960b5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd30c067edc180b594110cbfdbbe4269a54d476b2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2449e2d12b9695a7090a0fc367b3510b323589cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6205525680aec35bbbd5314f7705c6609fd81d92', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26f728f66d258fe29fd24e9e35062751c1a8576b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c8caa4f78889ab70d00c85a90ca6faa9c4d7833', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20f6fb752e64ae817b46d6b0b6a6b2b97edc6f6e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc2ccd08842f95b45ffa9084a70617365e44bc02', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02e54e43d2d21124fbfec7dfbc96e2ee6cfc105b', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1420312028,[GSoC] Added a preliminary Lark LaTeX parser implementation.,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Resumes the work of https://github.com/sympy/sympy/pull/19825.

As requested by @asmeurer and @Upabjojr, I have made a draft PR on which all my work will be pushed. I have marked it as a draft because it is still a WIP.

#### Brief description of what is fixed or changed

This is the v1 rewrite of the current ANTLR-based LaTeX parser. It contains most of the features that the ANTLR-based parser supports. Notable exceptions are:
* Interpreting `\frac{d}{dx}` as a derivative.
* Interpreting integrals with the `d` operator in a fraction, like `\int \frac{dz}{z}`.
* Support for Bra and Ket notation.
* Recognizing variables like `y_1''` and interpreting them as symbols correctly
* Recognizing expressions like `f'_1(x)` as function applications.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * Added a Lark-based LaTeX parser.
<!-- END RELEASE NOTES -->
",True,25324,https://api.github.com/repos/sympy/sympy/pulls/25324,https://github.com/sympy/sympy/pull/25324,closed,1286,3,6,101,9,27,0,0,[],2023-07-05 02:39:06+00:00,2023-08-12 18:30:27+00:00,3340281.0,"38 days, 15:51:21","[{'comment_id': 1253217675, 'comment_body': 'these `print` statements should not be merged.', 'comment_created': datetime.datetime(2023, 7, 5, 14, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253218143, 'comment_body': 'this should be removed', 'comment_created': datetime.datetime(2023, 7, 5, 14, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253219458, 'comment_body': 'is this variable needed? Correct way to use it would be `disabled = lark is None`', 'comment_created': datetime.datetime(2023, 7, 5, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253424918, 'comment_body': '`\\\\sin^{-1}` would be better handled with the _CARET_ operator as an expression, and then rendered into the `arcsin` by the transformer.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1258315351, 'comment_body': 'Resolved during the weekly meeting.', 'comment_created': datetime.datetime(2023, 7, 10, 13, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1258337256, 'comment_body': ""Good idea. I'll implement it like that."", 'comment_created': datetime.datetime(2023, 7, 10, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1259825868, 'comment_body': 'We should create two kinds of expressions: the ones that have higher priority than `\\binom` and the ones that have lower. That was the idea of `expression_core`... `expression_core` should contain all expressions that have higher priority than the backslash operators.\r\n\r\nGeneric `expression` should be either an `expression_core` or any kind of expressions that have lower priority than backslash operators.\r\n\r\nThis way should work.', 'comment_created': datetime.datetime(2023, 7, 11, 14, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260771617, 'comment_body': '`group_curly_parentheses | atomic_expr` can probably be replaced by `expression_core`', 'comment_created': datetime.datetime(2023, 7, 12, 8, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260835030, 'comment_body': '`expression_core` also allows for `group_round_parentheses` which is not a valid option in this scenario.', 'comment_created': datetime.datetime(2023, 7, 12, 8, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260841534, 'comment_body': 'what about just having:\r\n```\r\nfraction: CMD_FRAC expression_core expression_core\r\n```\r\nthat is, `expression_core` should contain all elements that have higher priority than `\\frac`.', 'comment_created': datetime.datetime(2023, 7, 12, 8, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260858003, 'comment_body': 'Setting aside the `group_round_parentheses` discussion, that would still not work. If we make this change, then in `\\frac12`, the `12` would parse as `number`, when we need it to parse as `DIGIT DIGIT` in this case.\r\n\r\nA similar thing would happen for `\\frac1234` whereas we need the `1234` to parse as `DIGIT DIGIT expression` where the expression contains `34` as a `number`.', 'comment_created': datetime.datetime(2023, 7, 12, 9, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260974391, 'comment_body': 'Using a named rule `A` in a different rule `B` does not mean that `A` has a higher priority than `B`. That is to say, `expression_core` does not have a higher precedence than `expression`. Both have equal precedence, which is the root reason for many of the ambiguous parses.\r\n\r\nAssigning `expression_core` a higher precedence than `expression` _is_ possible, but there are two things to keep in mind:\r\n1. Assigning priorities to rules is only possible using the Earley parser and not the LALR parser. Since you mentioned that you think that moving to the LALR parser might be a better option, I am mentioning this.\r\n2. If we go with the rule priorities route, then we lose the ability to inform the user that their input expression is ambiguous. Using rule priorities requires to use `ambiguity=resolve`, which means that any ambiguity in the parsing is resolved automatically (using rule priorities, if that is available). If we keep `ambiguity=explicit`, we retain the ability to inform the user of ambiguous parses, but lose the ability to use rules with different priorities.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260984991, 'comment_body': 'As you mentioned [here](https://matrix.to/#/!ieKAyoLMgajmgkdQZE:matrix.org/$sSGfnbR9sCvD06rPCApkMbi4aMeKgp2ok7CtjgRR1AQ?via=matrix.org&via=gitter.im), I removed `group_round_parentheses` from the definition of `expression_core` and made this change.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260985839, 'comment_body': ""As these are temporary, I'm marking this as resolved. They will be removed at the end."", 'comment_created': datetime.datetime(2023, 7, 12, 10, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260987501, 'comment_body': ""I'm not sure if it is needed or not. This is how ANTLR tests are disabled if the `antlr4-python3-runtime` is not found, in the current [master](https://github.com/sympy/sympy/blob/46558492a74bf2a324f9560af008b6c3ee587a6c/sympy/parsing/tests/test_latex.py#L27-L29).\r\n\r\nSince we want to do the same thing if Lark is not found, I added it."", 'comment_created': datetime.datetime(2023, 7, 12, 10, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260991182, 'comment_body': 'I still need to handle things like `\\sin^2 x`. This is correctly handled in the ANTLR parser (I checked), but there are no tests for ensuring this behavior in [`test_latex.py`](https://github.com/sympy/sympy/blob/46558492a74bf2a324f9560af008b6c3ee587a6c/sympy/parsing/tests/test_latex.py) so it is not a priority. My first priority is passing the test cases in the `test_latex.py`.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1261435504, 'comment_body': ""I'm marking this as resolved because we solved this issue in the team meeting."", 'comment_created': datetime.datetime(2023, 7, 12, 16, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1261436332, 'comment_body': ""I'm also marking this as resolved, because we discussed how to solve this problem during the team meeting, and the way to solve this is to use the same strategy but for binomial expressions."", 'comment_created': datetime.datetime(2023, 7, 12, 16, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1264334255, 'comment_body': ""This is checked for in [this function](https://github.com/sympy/sympy/blob/0ec134d277f14961e8b6629182895fc986658c2e/sympy/conftest.py#L67-L74). I'm marking this as resolved because it's required. I'll make the proposed change soon."", 'comment_created': datetime.datetime(2023, 7, 15, 5, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266845000, 'comment_body': ""> // TODO: Shouold [sic] we include the uppercase variants for the symbols where the uppercase variant doesn't have a separate meaning\r\n\r\n@Upabjojr could you comment on this?"", 'comment_created': datetime.datetime(2023, 7, 18, 14, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266845623, 'comment_body': '> // TODO: Should this be included? Delta usually denotes other things.\r\n@Upabjojr what are your thoughts on this?', 'comment_created': datetime.datetime(2023, 7, 18, 14, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266846970, 'comment_body': ""@Upabjojr What about this? Should `\\iota` be added? It's a valid LaTeX command, according to [this reference](https://www.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols), but I've rarely seen it used as a bona fide variable. At best, I've seen people use it to denote the imaginary number `i`."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266847881, 'comment_body': ""@Upabjojr What do you think of this? I think it's fine but I just wanted to cross-check with you."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266857678, 'comment_body': ""@Upabjojr For this one, I think doing it like this is a good idea. What do you think? I think that'll be a valuable feature as there is already an open issue for handling it specially: #20306."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266859918, 'comment_body': ""@Upabjojr I'm not sure whether we should have lowercase sigma or not. It's usually used to denote standard deviation, but I'm not sure how relevant that is here."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1283629078, 'comment_body': ""I'll resolve all the Greek symbol related queries, and move them into an issue of their own. They are low-priority, and won't require much work to add. All I really need is clarification on what features we want and which ones we don't want.\r\n\r\nThe Greek symbol stuff isn't important to the v1 Lark-based parser PR."", 'comment_created': datetime.datetime(2023, 8, 3, 19, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1284789850, 'comment_body': ""I've added this feature."", 'comment_created': datetime.datetime(2023, 8, 4, 19, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': '7863b841ceff4cd83c49bb7f05b5f64e4d45fcc4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f5f790c573214d4b974cdb90ad91998e1500d09', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa0a2ed71d7ee2a8ed83816e6d1b968163d41e2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49909cadcdeb22bdf90048804aa9d1ffa383921f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00db7719633143fb163c46022d51ce31c896a771', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbbc2ca42bf3f8c01a088bba8210b2f03850c91c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e8953c390b0f74147461e011b2bbc7ffee470d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76857d64cba1b54a7d4badc85cea965becc6c98a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c64a4a19fa443350f31f32a2a92da2de65a3481e', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b1913be35b6c96847cc1a0b90516078c3b6fff3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '208621f39599c85411edd3cfd5b59248634aa0ea', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f976c42a56760d116d70ec1eb396da4d34215cdf', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50d7706ab9120a311d0d5c1ac3237d1bb6140335', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9286274a882c8a5e55725742b3ca64a3db11c97b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465c905c268418ea333a3e2f318b3ea1ed014090', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f966dab3fc916489407deaae542b976f88b9d5c2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423f2a90060bab0dd6b25299e3ef18649ce35ec1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cc0623db26adc6a2eeb01953ab6f45df5d3f164', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba043891d69762152d234dba07dff1befc4c2e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa19b8508faea36008e963fed090030d4c93ffb6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '248a20e39d39753187eb959dcdc22441821b0c7c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917ceb2df6bb368e5af1674f8891bc828d8a7161', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb4f72eebfe39e49fe15e0bca85881df00f0c5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c99d4c6375042de5bdb4ac418d8e5f91ef2d12', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60770ad4412b30e825bc6ed995e3017f9fbab4f', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1a461b686665d1e2c50e84063da965cf68ed12', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14fffa6e04d04e3622649d4e8d3d3adb789a0d85', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7592494fb2c2508f5822692ca22ddd7b156e4cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5797c36a33435d72e4b600ad2f6cd3e3706b29c9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62bfa4f45a97abd789face8a57bc0e616f3729cb', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447c14cd4419a29edbcfc0d6f56c3d9725e5e8e2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0837b37f8b6203d65c2d6d6242d0015ead80d364', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c9e4d46c2b58abe17339d24a6e7ebb7cb7a47ed', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf6a1911ed7fce3ee6cb3e6f7ca919fb16051bd', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a7a7bfb10ede7bcadf565e4205b62e6e01e29fd', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70056a3d82611cf1e4748e7d1ac0d009acf1e86b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929f484310c56fe3c3cf38e9469767e637b1dd8c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3f11602c2655fac162054dd5de52614194d665f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0be1b26636329a55fb3656c17c549cfc0b19b1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6781e7670fcc65089af7ec7df724783459684061', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af08710e8820451daeeff283c3b75a952438521d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0398e5745f9fdf20d9670b040b6783f55f63a0d7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8525dcc5813e9f428ae81eccb87fbfbfeb8f0ee', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a713041dd351bd3d685af8509bd36cf051fe478', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef74986e5c79537bc7a062440a6300e5707e0de5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd93fb94b6b6c6a8b9b23cfae83b0d2bac151f7c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae52e2d5711eca7a35118e2ade6ba81a4fd9f7c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed0244cb89b630ef256abfb635bfa730738dc7b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3423720143a707864139c8f95f8be7334efda4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '716304ae40ddead73a56a4d71482ce2b2e2d44c9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b19f2a2d78a0a967166f8ef38de1fdb600db60d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5a0f3a5a854d499cc490ce24ea474c7b313446', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb5677966f640727b0bf36259f949b487b5d854', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882a71b233f0eca7dcc60c6c867ebea4a994dee5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13be69fe6bfe4c5444c478a76f9c7752b51f1fe3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdc95dc7f637a81c555838b85fa568a853a29d3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786d7fd0de5a38725a160bd9fc3508c1c219c4e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '923f531a2877ec0f71fc5494ea75dcd488a172e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fddd8f788901803533af983273a2ecbe0e5a6c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5fbf4e74e2d404758d8be025c20b72830e77156', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ebfe3dd019f6dc0dbef0b7068c931350ca1174c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7ba6caabd98779a487af78605dbf05fc2ac66f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b9fd310bdc23d22bf46295873a0a808ba485d0d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92fc1ba961281f25f41dcfc551e99e456d5c7f27', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700e3bc3efa844cd2d891eb374464e472b47f60c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc8e0ab357bf78741e910aab2e0664b96fb0cb4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bec0b676fd48f20d7c9e9cc81b56b4718cdf553', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83ce0c0a5d5266ffab8e043b9d890fb2ed319c7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f68a6504f412cafd782ef5c5553c8eb8cb5e9b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdb199d71f2c38e89ac3d6395d1c56d0f079f1c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741e1f07ca1b1b9622e8620b461437639a675c2c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e29efe2723f2905b2f193882a7e2eee4262a6bb6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261d887834fd6922aac345243500024736d375cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb6fe229aad6baa89f09bb1776c30ce46d74e4ab', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384ef0785e735acbeaff3be23a4f7343aee9124e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '126715ddf2d785bf4e6721e2fc548e4af78f050f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18697bc0a777102404f44173303927093c7bbb5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a623e43a837c2946823aa3f02aba45a1bbb2585f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6738c3d17973239593b74bd591ae58cd20eacb27', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f20bcc11c9a1391d4504af316c55ac4aac80716', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278768346a30ef2220247b139de35564a236ac80', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '085ce4ea9414551f497b3236ec5fd5a38e812c8c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb61a9aeda68f8a056f5b894115bb92e794d7df', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14a77dc073ef95bb917c03f6968877071a314618', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5207a150cb23dcab20015c4bd52695bf04f6da', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b723cce2939d293bce335ff6b0f48084cafb8abd', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091fc6b0736b184208dcea6a924879282bc572c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7b68605bc5ab333fd8f6ae75321e3917820cf2', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c69a6b9f1982571024b462adf47109e6792d4117', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6a099c28f898b0447739a2404d403d6fe2da86', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad17284b4fd7e51958e6e1b9eaea430ddac50d5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b6cafa399fea34aa2dbe30eb0841f964f98c110', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6e06a84b620e4cc7a172f14d58e7e0ec200d441', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48926e89b205e45d6245f9f3dcc73d8af0e91185', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1076343b9196098fdc72812f13c34868f6cd75', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1afa6cfa19a5216d407383bedf009c18e6a22a9d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e7c95a5121d776e414a645058bae180ece763c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd16d9b7a5719bfffe0d3c809225e99b1ac6807', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4519392947e7281566a8a7d0549d8a0cf1c1072e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1250dd326cd13b7bf9a384d2d84613d4471a5bf9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fa08ab7d72dcc038c20b36294e27f1f446b80fc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1420312028,[GSoC] Added a preliminary Lark LaTeX parser implementation.,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Resumes the work of https://github.com/sympy/sympy/pull/19825.

As requested by @asmeurer and @Upabjojr, I have made a draft PR on which all my work will be pushed. I have marked it as a draft because it is still a WIP.

#### Brief description of what is fixed or changed

This is the v1 rewrite of the current ANTLR-based LaTeX parser. It contains most of the features that the ANTLR-based parser supports. Notable exceptions are:
* Interpreting `\frac{d}{dx}` as a derivative.
* Interpreting integrals with the `d` operator in a fraction, like `\int \frac{dz}{z}`.
* Support for Bra and Ket notation.
* Recognizing variables like `y_1''` and interpreting them as symbols correctly
* Recognizing expressions like `f'_1(x)` as function applications.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * Added a Lark-based LaTeX parser.
<!-- END RELEASE NOTES -->
",True,25324,https://api.github.com/repos/sympy/sympy/pulls/25324,https://github.com/sympy/sympy/pull/25324,closed,1286,3,6,101,9,27,0,0,[],2023-07-05 02:39:06+00:00,2023-08-12 18:30:27+00:00,3340281.0,"38 days, 15:51:21","[{'comment_id': 1253217675, 'comment_body': 'these `print` statements should not be merged.', 'comment_created': datetime.datetime(2023, 7, 5, 14, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253218143, 'comment_body': 'this should be removed', 'comment_created': datetime.datetime(2023, 7, 5, 14, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253219458, 'comment_body': 'is this variable needed? Correct way to use it would be `disabled = lark is None`', 'comment_created': datetime.datetime(2023, 7, 5, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253424918, 'comment_body': '`\\\\sin^{-1}` would be better handled with the _CARET_ operator as an expression, and then rendered into the `arcsin` by the transformer.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1258315351, 'comment_body': 'Resolved during the weekly meeting.', 'comment_created': datetime.datetime(2023, 7, 10, 13, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1258337256, 'comment_body': ""Good idea. I'll implement it like that."", 'comment_created': datetime.datetime(2023, 7, 10, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1259825868, 'comment_body': 'We should create two kinds of expressions: the ones that have higher priority than `\\binom` and the ones that have lower. That was the idea of `expression_core`... `expression_core` should contain all expressions that have higher priority than the backslash operators.\r\n\r\nGeneric `expression` should be either an `expression_core` or any kind of expressions that have lower priority than backslash operators.\r\n\r\nThis way should work.', 'comment_created': datetime.datetime(2023, 7, 11, 14, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260771617, 'comment_body': '`group_curly_parentheses | atomic_expr` can probably be replaced by `expression_core`', 'comment_created': datetime.datetime(2023, 7, 12, 8, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260835030, 'comment_body': '`expression_core` also allows for `group_round_parentheses` which is not a valid option in this scenario.', 'comment_created': datetime.datetime(2023, 7, 12, 8, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260841534, 'comment_body': 'what about just having:\r\n```\r\nfraction: CMD_FRAC expression_core expression_core\r\n```\r\nthat is, `expression_core` should contain all elements that have higher priority than `\\frac`.', 'comment_created': datetime.datetime(2023, 7, 12, 8, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260858003, 'comment_body': 'Setting aside the `group_round_parentheses` discussion, that would still not work. If we make this change, then in `\\frac12`, the `12` would parse as `number`, when we need it to parse as `DIGIT DIGIT` in this case.\r\n\r\nA similar thing would happen for `\\frac1234` whereas we need the `1234` to parse as `DIGIT DIGIT expression` where the expression contains `34` as a `number`.', 'comment_created': datetime.datetime(2023, 7, 12, 9, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260974391, 'comment_body': 'Using a named rule `A` in a different rule `B` does not mean that `A` has a higher priority than `B`. That is to say, `expression_core` does not have a higher precedence than `expression`. Both have equal precedence, which is the root reason for many of the ambiguous parses.\r\n\r\nAssigning `expression_core` a higher precedence than `expression` _is_ possible, but there are two things to keep in mind:\r\n1. Assigning priorities to rules is only possible using the Earley parser and not the LALR parser. Since you mentioned that you think that moving to the LALR parser might be a better option, I am mentioning this.\r\n2. If we go with the rule priorities route, then we lose the ability to inform the user that their input expression is ambiguous. Using rule priorities requires to use `ambiguity=resolve`, which means that any ambiguity in the parsing is resolved automatically (using rule priorities, if that is available). If we keep `ambiguity=explicit`, we retain the ability to inform the user of ambiguous parses, but lose the ability to use rules with different priorities.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260984991, 'comment_body': 'As you mentioned [here](https://matrix.to/#/!ieKAyoLMgajmgkdQZE:matrix.org/$sSGfnbR9sCvD06rPCApkMbi4aMeKgp2ok7CtjgRR1AQ?via=matrix.org&via=gitter.im), I removed `group_round_parentheses` from the definition of `expression_core` and made this change.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260985839, 'comment_body': ""As these are temporary, I'm marking this as resolved. They will be removed at the end."", 'comment_created': datetime.datetime(2023, 7, 12, 10, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260987501, 'comment_body': ""I'm not sure if it is needed or not. This is how ANTLR tests are disabled if the `antlr4-python3-runtime` is not found, in the current [master](https://github.com/sympy/sympy/blob/46558492a74bf2a324f9560af008b6c3ee587a6c/sympy/parsing/tests/test_latex.py#L27-L29).\r\n\r\nSince we want to do the same thing if Lark is not found, I added it."", 'comment_created': datetime.datetime(2023, 7, 12, 10, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260991182, 'comment_body': 'I still need to handle things like `\\sin^2 x`. This is correctly handled in the ANTLR parser (I checked), but there are no tests for ensuring this behavior in [`test_latex.py`](https://github.com/sympy/sympy/blob/46558492a74bf2a324f9560af008b6c3ee587a6c/sympy/parsing/tests/test_latex.py) so it is not a priority. My first priority is passing the test cases in the `test_latex.py`.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1261435504, 'comment_body': ""I'm marking this as resolved because we solved this issue in the team meeting."", 'comment_created': datetime.datetime(2023, 7, 12, 16, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1261436332, 'comment_body': ""I'm also marking this as resolved, because we discussed how to solve this problem during the team meeting, and the way to solve this is to use the same strategy but for binomial expressions."", 'comment_created': datetime.datetime(2023, 7, 12, 16, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1264334255, 'comment_body': ""This is checked for in [this function](https://github.com/sympy/sympy/blob/0ec134d277f14961e8b6629182895fc986658c2e/sympy/conftest.py#L67-L74). I'm marking this as resolved because it's required. I'll make the proposed change soon."", 'comment_created': datetime.datetime(2023, 7, 15, 5, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266845000, 'comment_body': ""> // TODO: Shouold [sic] we include the uppercase variants for the symbols where the uppercase variant doesn't have a separate meaning\r\n\r\n@Upabjojr could you comment on this?"", 'comment_created': datetime.datetime(2023, 7, 18, 14, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266845623, 'comment_body': '> // TODO: Should this be included? Delta usually denotes other things.\r\n@Upabjojr what are your thoughts on this?', 'comment_created': datetime.datetime(2023, 7, 18, 14, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266846970, 'comment_body': ""@Upabjojr What about this? Should `\\iota` be added? It's a valid LaTeX command, according to [this reference](https://www.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols), but I've rarely seen it used as a bona fide variable. At best, I've seen people use it to denote the imaginary number `i`."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266847881, 'comment_body': ""@Upabjojr What do you think of this? I think it's fine but I just wanted to cross-check with you."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266857678, 'comment_body': ""@Upabjojr For this one, I think doing it like this is a good idea. What do you think? I think that'll be a valuable feature as there is already an open issue for handling it specially: #20306."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266859918, 'comment_body': ""@Upabjojr I'm not sure whether we should have lowercase sigma or not. It's usually used to denote standard deviation, but I'm not sure how relevant that is here."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1283629078, 'comment_body': ""I'll resolve all the Greek symbol related queries, and move them into an issue of their own. They are low-priority, and won't require much work to add. All I really need is clarification on what features we want and which ones we don't want.\r\n\r\nThe Greek symbol stuff isn't important to the v1 Lark-based parser PR."", 'comment_created': datetime.datetime(2023, 8, 3, 19, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1284789850, 'comment_body': ""I've added this feature."", 'comment_created': datetime.datetime(2023, 8, 4, 19, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': '7863b841ceff4cd83c49bb7f05b5f64e4d45fcc4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f5f790c573214d4b974cdb90ad91998e1500d09', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa0a2ed71d7ee2a8ed83816e6d1b968163d41e2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49909cadcdeb22bdf90048804aa9d1ffa383921f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00db7719633143fb163c46022d51ce31c896a771', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbbc2ca42bf3f8c01a088bba8210b2f03850c91c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e8953c390b0f74147461e011b2bbc7ffee470d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76857d64cba1b54a7d4badc85cea965becc6c98a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c64a4a19fa443350f31f32a2a92da2de65a3481e', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b1913be35b6c96847cc1a0b90516078c3b6fff3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '208621f39599c85411edd3cfd5b59248634aa0ea', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f976c42a56760d116d70ec1eb396da4d34215cdf', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50d7706ab9120a311d0d5c1ac3237d1bb6140335', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9286274a882c8a5e55725742b3ca64a3db11c97b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465c905c268418ea333a3e2f318b3ea1ed014090', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f966dab3fc916489407deaae542b976f88b9d5c2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423f2a90060bab0dd6b25299e3ef18649ce35ec1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cc0623db26adc6a2eeb01953ab6f45df5d3f164', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba043891d69762152d234dba07dff1befc4c2e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa19b8508faea36008e963fed090030d4c93ffb6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '248a20e39d39753187eb959dcdc22441821b0c7c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917ceb2df6bb368e5af1674f8891bc828d8a7161', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb4f72eebfe39e49fe15e0bca85881df00f0c5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c99d4c6375042de5bdb4ac418d8e5f91ef2d12', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60770ad4412b30e825bc6ed995e3017f9fbab4f', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1a461b686665d1e2c50e84063da965cf68ed12', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14fffa6e04d04e3622649d4e8d3d3adb789a0d85', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7592494fb2c2508f5822692ca22ddd7b156e4cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5797c36a33435d72e4b600ad2f6cd3e3706b29c9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62bfa4f45a97abd789face8a57bc0e616f3729cb', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447c14cd4419a29edbcfc0d6f56c3d9725e5e8e2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0837b37f8b6203d65c2d6d6242d0015ead80d364', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c9e4d46c2b58abe17339d24a6e7ebb7cb7a47ed', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf6a1911ed7fce3ee6cb3e6f7ca919fb16051bd', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a7a7bfb10ede7bcadf565e4205b62e6e01e29fd', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70056a3d82611cf1e4748e7d1ac0d009acf1e86b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929f484310c56fe3c3cf38e9469767e637b1dd8c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3f11602c2655fac162054dd5de52614194d665f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0be1b26636329a55fb3656c17c549cfc0b19b1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6781e7670fcc65089af7ec7df724783459684061', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af08710e8820451daeeff283c3b75a952438521d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0398e5745f9fdf20d9670b040b6783f55f63a0d7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8525dcc5813e9f428ae81eccb87fbfbfeb8f0ee', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a713041dd351bd3d685af8509bd36cf051fe478', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef74986e5c79537bc7a062440a6300e5707e0de5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd93fb94b6b6c6a8b9b23cfae83b0d2bac151f7c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae52e2d5711eca7a35118e2ade6ba81a4fd9f7c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed0244cb89b630ef256abfb635bfa730738dc7b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3423720143a707864139c8f95f8be7334efda4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '716304ae40ddead73a56a4d71482ce2b2e2d44c9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b19f2a2d78a0a967166f8ef38de1fdb600db60d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5a0f3a5a854d499cc490ce24ea474c7b313446', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb5677966f640727b0bf36259f949b487b5d854', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882a71b233f0eca7dcc60c6c867ebea4a994dee5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13be69fe6bfe4c5444c478a76f9c7752b51f1fe3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdc95dc7f637a81c555838b85fa568a853a29d3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786d7fd0de5a38725a160bd9fc3508c1c219c4e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '923f531a2877ec0f71fc5494ea75dcd488a172e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fddd8f788901803533af983273a2ecbe0e5a6c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5fbf4e74e2d404758d8be025c20b72830e77156', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ebfe3dd019f6dc0dbef0b7068c931350ca1174c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7ba6caabd98779a487af78605dbf05fc2ac66f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b9fd310bdc23d22bf46295873a0a808ba485d0d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92fc1ba961281f25f41dcfc551e99e456d5c7f27', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700e3bc3efa844cd2d891eb374464e472b47f60c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc8e0ab357bf78741e910aab2e0664b96fb0cb4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bec0b676fd48f20d7c9e9cc81b56b4718cdf553', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83ce0c0a5d5266ffab8e043b9d890fb2ed319c7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f68a6504f412cafd782ef5c5553c8eb8cb5e9b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdb199d71f2c38e89ac3d6395d1c56d0f079f1c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741e1f07ca1b1b9622e8620b461437639a675c2c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e29efe2723f2905b2f193882a7e2eee4262a6bb6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261d887834fd6922aac345243500024736d375cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb6fe229aad6baa89f09bb1776c30ce46d74e4ab', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384ef0785e735acbeaff3be23a4f7343aee9124e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '126715ddf2d785bf4e6721e2fc548e4af78f050f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18697bc0a777102404f44173303927093c7bbb5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a623e43a837c2946823aa3f02aba45a1bbb2585f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6738c3d17973239593b74bd591ae58cd20eacb27', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f20bcc11c9a1391d4504af316c55ac4aac80716', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278768346a30ef2220247b139de35564a236ac80', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '085ce4ea9414551f497b3236ec5fd5a38e812c8c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb61a9aeda68f8a056f5b894115bb92e794d7df', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14a77dc073ef95bb917c03f6968877071a314618', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5207a150cb23dcab20015c4bd52695bf04f6da', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b723cce2939d293bce335ff6b0f48084cafb8abd', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091fc6b0736b184208dcea6a924879282bc572c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7b68605bc5ab333fd8f6ae75321e3917820cf2', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c69a6b9f1982571024b462adf47109e6792d4117', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6a099c28f898b0447739a2404d403d6fe2da86', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad17284b4fd7e51958e6e1b9eaea430ddac50d5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b6cafa399fea34aa2dbe30eb0841f964f98c110', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6e06a84b620e4cc7a172f14d58e7e0ec200d441', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48926e89b205e45d6245f9f3dcc73d8af0e91185', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1076343b9196098fdc72812f13c34868f6cd75', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1afa6cfa19a5216d407383bedf009c18e6a22a9d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e7c95a5121d776e414a645058bae180ece763c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd16d9b7a5719bfffe0d3c809225e99b1ac6807', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4519392947e7281566a8a7d0549d8a0cf1c1072e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1250dd326cd13b7bf9a384d2d84613d4471a5bf9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fa08ab7d72dcc038c20b36294e27f1f446b80fc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1475491407,Removed `evaluate=False` from the Lark-based LaTeX parser,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Addresses #24116 for the Lark-based LaTeX parser.

#### Brief description of what is fixed or changed

Originally, the ANTLR LaTeX parser returned unevaluated expressions. There were concerns that unevaluated expressions can [create all sorts of issues ](https://github.com/sympy/sympy/issues/24116#issue-1398475575), so we wanted to change this behavior.

I made it so that both `evaluate=False` and `evaluate=True` work with the Lark-based LaTeX parser, with `evaluate=True` being the default.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
    * The Lark-based LaTeX parser now evaluates the input string and returns the result. For example, `""\sqrt{\frac{12}{6}}""` will re turn `\sqrt(2)` now. The previous behavior can achieved by using the `evaluate(False)` context manager.
<!-- END RELEASE NOTES -->
",True,25515,https://api.github.com/repos/sympy/sympy/pulls/25515,https://github.com/sympy/sympy/pull/25515,closed,299,112,2,8,25,5,0,0,[],2023-08-15 06:50:35+00:00,2023-08-16 11:10:47+00:00,102012.0,"1 day, 4:20:12","[{'comment_id': 1294252974, 'comment_body': ""After removing `evaluate` option, it is now possible to build sympy expressions without `Add, Mul, Pow`. I'd prefer to write division as `tokens[1] / tokens[2]`"", 'comment_created': datetime.datetime(2023, 8, 15, 6, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1294258386, 'comment_body': 'How would this change interact with the `evaluate(False)` context manager? I.e., would\r\n```python\r\nwith evaluate(False):\r\n    parse_latex_lark(r""\\frac12"")\r\n```\r\nstill work as expected?', 'comment_created': datetime.datetime(2023, 8, 15, 7, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1294261220, 'comment_body': 'It looks like it works as expected:\r\n```python\r\nIn [14]: with evaluate(False):\r\n    ...:    expr = parse_latex_lark(r""\\frac12"")\r\nIn [15]: expr\r\nOut[15]: 1/2\r\nIn [16]: srepr(expr)\r\nOut[16]: \'Mul(Integer(1), Pow(Integer(2), Integer(-1)))\'\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 7, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1294263594, 'comment_body': 'Using `evaluate(False)` context manager means that `evaluate=False` is passed throughout any depth inside the block,\r\nwithout drilling down `evaluate=False`, so it works.', 'comment_created': datetime.datetime(2023, 8, 15, 7, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1294264315, 'comment_body': ""I've made the requested change, so I'm marking this conversation as resolved."", 'comment_created': datetime.datetime(2023, 8, 15, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': '1aa3a013edfca469b8e4addd0d66eac7ee32f1f8', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ff6fd080bb2176b726cfa9ccb57bdbfd51b19bf', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8355dd6f34609a2007ac63cf3befda4ce74ee66d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac5f9843a9ca6d69db5b264f44b5ec76d12657d8', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '942624cb61bb3accfdd1b209bb33599d3d86671e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2490d516c868719ed800649f33e0af0ffc2e41d5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b703a7061c75999da5a8d873edbf28a6e83bd0be', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b1ad1dc047e3901d4e389c91ce9e95d45f4d166', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1478239940,[GSoC] Refactored Transformer code and fixed a minor inconsistency,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#25515

#### Brief description of what is fixed or changed

I fixed a small inconsistency that was pointed out [here](https://github.com/sympy/sympy/pull/25515#issuecomment-1680375204) by @sylee957. I also refactored the Transformer code out into its own file, to make the design more modular.

I also made the `parse_latex_lark` function visible from `sympy.parsing.latex`.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * `parse_latex_lark` is now visible from `sympy.parsing.latex`.
<!-- END RELEASE NOTES -->
",True,25535,https://api.github.com/repos/sympy/sympy/pulls/25535,https://github.com/sympy/sympy/pull/25535,closed,449,458,3,13,7,17,0,0,[],2023-08-17 01:22:41+00:00,2023-08-26 18:47:10+00:00,840269.0,"9 days, 17:24:29","[{'comment_id': 1296582838, 'comment_body': ""I don't think that you have copied the correct code\r\nThis regresses #25515"", 'comment_created': datetime.datetime(2023, 8, 17, 1, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1296584414, 'comment_body': 'Oops, good catch. Thanks!\r\n\r\nI must have made a mistake with Git somehow.', 'comment_created': datetime.datetime(2023, 8, 17, 1, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1296661031, 'comment_body': ""I'm not sure that `lambda` is a invalid Symbol name\r\n`Symbol('lambda')` works.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 8, 17, 4, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1296695282, 'comment_body': ""Like the comment says, I simply mimicked `sympy.abc`'s approach here. If you think that using `lambda` will not cause issues, then I am fine with making the change."", 'comment_created': datetime.datetime(2023, 8, 17, 5, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1296797427, 'comment_body': 'I think we should keep it that way because if the user tries to use `subs` with an expression that has a lambda in it, the code will not work as intended.\r\n', 'comment_created': datetime.datetime(2023, 8, 17, 7, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1297337169, 'comment_body': 'I believe the symbol name should be lambda, not lamda.', 'comment_created': datetime.datetime(2023, 8, 17, 14, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1297369289, 'comment_body': ""I've made the change."", 'comment_created': datetime.datetime(2023, 8, 17, 15, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1299000755, 'comment_body': 'The test should only run for optional dependencies', 'comment_created': datetime.datetime(2023, 8, 19, 2, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1299131432, 'comment_body': ""The test was failing without this, and I'm not sure. Do you have any idea what else I can do to solve the issue? It was complaining that it could not find the `lark` module."", 'comment_created': datetime.datetime(2023, 8, 19, 6, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1299183316, 'comment_body': 'This is the place to add dependency\r\n\r\nhttps://github.com/sympy/sympy/blob/73484029c5f8a02da1a6f91419f39c6ed4cfdf57/.github/workflows/runtests.yml#L169-L223\r\n\r\nand you should also try to check if the files are added in the list in\r\n\r\nhttps://github.com/sympy/sympy/blob/master/bin/test_optional_dependencies.py', 'comment_created': datetime.datetime(2023, 8, 19, 12, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1299183632, 'comment_body': ""I already see the lark is there, but I'm not sure about the problem though.\r\nI just request you to remove the modifications here, such that I can see how CI fail"", 'comment_created': datetime.datetime(2023, 8, 19, 12, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1299188616, 'comment_body': ""Alright, I'll do that."", 'comment_created': datetime.datetime(2023, 8, 19, 13, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1299194635, 'comment_body': ""I've removed all the changes I made related to `runtests.yml`. You should be able to check the CI logs for the issues now."", 'comment_created': datetime.datetime(2023, 8, 19, 14, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1299239692, 'comment_body': 'You may need to guard the import with\r\nlark = import_module(‘lark’)', 'comment_created': datetime.datetime(2023, 8, 19, 18, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1303174051, 'comment_body': ""I've made the change."", 'comment_created': datetime.datetime(2023, 8, 23, 15, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1306492952, 'comment_body': 'You have to add `#type: ignore`', 'comment_created': datetime.datetime(2023, 8, 26, 17, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1306499411, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 26, 17, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': 'e67dec85261e1f408143a13ba286d809b0fd62c1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa70ba710c41369868d072630c4183ce4cbabf3d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a818543e15602a6d49043fe77c9dd93318877e81', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e219176334a2cb6f150afcbd266397193e27110', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ee4e7a0801178e0d9ee6b9156183bf4572a96f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed3531a6c4dcbb1c95f2d3fa4516edc67719efad', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d624a575d3131cd8dc996a2b28eb3da55cb26d9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5778c3aad9d7815cd6bcef6e253eca19404c2314', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4ce99827f476b833fce2cfb928212160e36c9e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2c95c5c80d9b234ea417ea4427d8624e11c15d2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b36841a5252915809d3bf4228419d5fee526bd7e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5905070f91f04d1ac50c6cd73a1e3a2a919c18ba', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bfd602a53fec1e6f3ca75b93ed0ab3ad6addfd3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1480479964,"[GSoC] Added support for Min, Max, Bra, and Ket","<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Addresses #19127 for the Lark-based LaTeX parser.

#### Brief description of what is fixed or changed
I added support for Min and Max in the Lark-based LaTeX parser. I also took this opportunity to add support for Bra and Ket notation.

#### Other comments
cc @sylee957 and @Upabjojr for review.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * The Lark-based parser now supports Min, Max, and Bra and Ket.
<!-- END RELEASE NOTES -->
",True,25552,https://api.github.com/repos/sympy/sympy/pulls/25552,https://github.com/sympy/sympy/pull/25552,closed,66,7,3,5,3,6,0,0,[],2023-08-18 12:04:16+00:00,2023-08-19 13:48:06+00:00,92630.0,"1 day, 1:43:50","[{'comment_id': 1298450685, 'comment_body': 'What about combined braket notation $\\langle x | y \\rangle$', 'comment_created': datetime.datetime(2023, 8, 18, 13, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1298617926, 'comment_body': 'I added support for this too.', 'comment_created': datetime.datetime(2023, 8, 18, 16, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1298628859, 'comment_body': 'Using `_atomic_expr` can be too restrictive, \r\nwhy not use general expression like `_expression` if it is not ambiguous?\r\nFor example, what about $| x+y \\rangle$', 'comment_created': datetime.datetime(2023, 8, 18, 16, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1298632492, 'comment_body': 'This makes sense.', 'comment_created': datetime.datetime(2023, 8, 18, 16, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1298647288, 'comment_body': ""Good point, I didn't think of the case you mentioned. The main thing I wanted to prevent was something like $| \\cos x \\rangle$ which is meaningless. `_expression` allows for strings like that, but I guess that's something we'll have to live with."", 'comment_created': datetime.datetime(2023, 8, 18, 16, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1298650132, 'comment_body': ""SymPy can sort out the things that doesn't make sense. If the SymPy objects don't validate the input type, it's usually their own issue."", 'comment_created': datetime.datetime(2023, 8, 18, 16, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}]","[{'commit_sha': '63b825a08c5b3e05fade85f07b5e7575641d04fb', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb21ff022017c7e79ce6e28f7f014015500c9af', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6db6eefcf6126d768d3cd61763a664033edaed6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '352dbfb39899ac9b7c20ad29589f491e6809a58c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe029fbc6e19645e491a41242109a4545e43619', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1484369181,[GSoC] Simplified Lark LaTeX parser testing framework,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

I simplified the testing framework in the tests for the Lark-based LaTeX parser. Previously, there was a lot of code duplication. I reduced code duplication greatly by reusing the shorthand definitions in `test_latex.py`, which also allowed me to cut down on the imports for `test_latex_lark.py`.

I also simplified the test disabling logic, and removed the `XFAIL` marker from a test that is now passing.

#### Other comments
cc @Upabjojr @sylee957 for review.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25569,https://api.github.com/repos/sympy/sympy/pulls/25569,https://github.com/sympy/sympy/pull/25569,closed,8,49,2,5,2,0,0,0,[],2023-08-22 09:20:05+00:00,2023-08-22 18:22:50+00:00,32565.0,9:02:45,[],"[{'commit_sha': '65d39d31dfa6e83487f3541d12e6d68f916dc85a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46adfb816a4a123afb754b3c2e13ee7ccfb6b9d2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b64ed82aeb98de835a5136aab643ecc4cd4ef5b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c746890e3bb1d0b082303f189318c260c8b4a643', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff89b2e06e21ff68e9a7acc08ea53edc95010241', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1499941932,Added error messages to the Lark LaTeX parser,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

When writing the LaTeX parser, I had left most of the error messages as TODOs. In this PR, I filled out all the error messages with helpful strings.

#### Other comments

cc @sylee957 and @Upabjojr for review.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25622,https://api.github.com/repos/sympy/sympy/pulls/25622,https://github.com/sympy/sympy/pull/25622,closed,18,18,1,4,2,4,0,0,[],2023-09-02 12:30:21+00:00,2023-09-03 12:32:29+00:00,86528.0,"1 day, 0:02:08","[{'comment_id': 1313920758, 'comment_body': ""I'm not sure if the error is reachable, this already exhausts all tokens, \r\nso the error should be meaningful for some future if someone adds more tokens here\r\n\r\n`relation: _expression (EQUAL | NOT_EQUAL | LT | LTE | GT | GTE) _expression`"", 'comment_created': datetime.datetime(2023, 9, 2, 17, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314059030, 'comment_body': '> the error should be meaningful for some future if someone adds more tokens here\r\n\r\nThat was what I was going for. Can you give me some suggestions on how to improve the error message?', 'comment_created': datetime.datetime(2023, 9, 3, 1, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314247676, 'comment_body': 'I may suggest in other ways to organize the grammar\r\nfrom\r\n```lark\r\nrelation: _expression (EQUAL | NOT_EQUAL | LT | LTE | GT | GTE) _expression\r\n```\r\nto\r\n```lark\r\n_relation: eq | ne | lt | le | gt | ge\r\neq: _expression EQUAL _expression\r\nne: _expression EQUAL _expression\r\n...\r\n```\r\n\r\nwhich eliminates the need to write the if-statements and errors inside transformers.', 'comment_created': datetime.datetime(2023, 9, 3, 12, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314247910, 'comment_body': ""That sounds good to me. I'm currently finishing up a PR which adds derivative support, among many other things. I'll make this change in that PR."", 'comment_created': datetime.datetime(2023, 9, 3, 12, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': 'a473d53d5cdca5ad806f328c76116898040d27b1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bfead0b167464025a6576a5b82ba02511774267', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e7114b1d6c68db3611ca1dd085e96ba6ccca482', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a096856d188b8d9c35eda4d839ec181630a7ca6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1500649384,Miscellaneous improvements to Lark LaTeX parser,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Addresses [#25622 (comment)](https://github.com/sympy/sympy/pull/25622#discussion_r1314247676), among other things.

#### Brief description of what is fixed or changed

I did a lot of miscellaneous refactoring and stuff in this PR. Here's a list of changes:
* Added support for Outer Products, just like how Inner Products for Bra and Ket are supported
* Renamed the `_implicit_multipilcation` node to a more aptly named node `adjacent_expressions` and also unfolded the node. This change made the `mul` node's Transformer logic much simpler.
* Renamed `multiletter_symbol` to `multi_letter_symbol` to make the underscore usage more consistent
* Removed the unnecessary rule for the `CMD_INFTY` terminal
* Changed some variable names in the `LarkLaTeXParser` class to more aptly named ones.
* Added support for derivatives. Things like `\frac{\mathrm{d}}{\mathrm{d}x} \sin x` work.
* Slightly modified the logic for the `integral` node in the transformer, and added comments explaining how it works.
* Refactored the Greek Symbol stuff out into its own `.lark` file.

#### Other comments
cc @sylee957 and @Upabjojr for review.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * The Lark-based LaTeX parser now supports parsing derivative-related expressions.
<!-- END RELEASE NOTES -->
",True,25626,https://api.github.com/repos/sympy/sympy/pulls/25626,https://github.com/sympy/sympy/pull/25626,closed,243,124,6,27,9,38,0,0,[],2023-09-04 05:38:17+00:00,2023-09-05 12:41:57+00:00,111820.0,"1 day, 7:03:40","[{'comment_id': 1314628949, 'comment_body': ""Why can't `d` be used as symbols here?"", 'comment_created': datetime.datetime(2023, 9, 4, 8, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314644627, 'comment_body': 'To answer your question, I\'ll mostly copy-and-paste my messages on the Element chat:\r\nWhile working on adding support for derivatives in the parser, I\'m ran into an issue: It\'s impossible to tell the parser to treat ""d"" as a one-letter symbol some of the time, except in certain context-sensitive cases.\r\n\r\nIf I don\'t disallow `d` as a variable name, then something like `\\dfrac{d}{dx}` binds both to `fraction` and `derivative_operator`. This happens because we are using the Earley parser (because we want to detect and report ambiguous expressions to the user) so the concept of ""best match"" doesn\'t apply here.\r\n\r\nAll in all, I decided that the loss of `d` as a variable name is not a huge loss: The only time I\'ve ever seen/used ""d"" as a variable is in number theory contexts, where it stood for ""divisor"". Another variable name can just as easily be used in these contexts.\r\n\r\nBy disallowing `d` as a variable name, we gained derivative support, and now I can also support parsing expressions like `\\int \\frac{dz}{z}`.\r\n', 'comment_created': datetime.datetime(2023, 9, 4, 9, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314652255, 'comment_body': 'Okay, I think that it is unfortunate that d can’t be used as variable name.\r\n\r\nBut if there is technical difficulty regarding that, we would be unfortunately disabling that.', 'comment_created': datetime.datetime(2023, 9, 4, 9, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314660466, 'comment_body': ""If we disallow normal `d` and require all instances of `d` as a differential to be either `\\text{d}` or `\\mathrm{d}` then we can use `d` as a variable again. However, I don't think most people make a distinction between `d` as a differential and a variable in their LaTeX code."", 'comment_created': datetime.datetime(2023, 9, 4, 9, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314664004, 'comment_body': 'It is very common to use `d` as a variable name.\r\n\r\nWhat about allowing `d` as a symbol and then having `dfrac` process into a derivative afterwards?', 'comment_created': datetime.datetime(2023, 9, 4, 9, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314705274, 'comment_body': ""I may suggest in other ways, to split start symbol into two expression cases\r\n\r\n```\r\nstart: expression_with_derivative | expression_without_derivative\r\n```\r\n\r\nand defining `expression_with_derivative`, `expression_without_derivative` separately into their own recursive grammars such that\r\n`expression_with_derivative` contains the derivatives or integrals, and `expression_without_derivative` does not, with `d` parsed as polynomial variable.\r\n\r\nI think that if users use `d` as polynomial variables, then users should deliberately avoid using derivatives at math, and vice versa. However, I'm not sure if this is easy before factoring out the recursive rules nicely.\r\n\r\n> What about allowing d as a symbol and then having dfrac process into a derivative afterwards?\r\n\r\nWe can try that idea, but if we encouter some issues like \r\n\r\n- The expression `dx` parses to multiplication\r\n- SymPy may sort the multiplication arguments\r\n\r\nthen we may rethink about the fix though."", 'comment_created': datetime.datetime(2023, 9, 4, 9, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314827849, 'comment_body': '> The expression `dx` parses to multiplication\n\nThis is precisely the problem since the transformer is applied in a bottom-up fashion on the AST.', 'comment_created': datetime.datetime(2023, 9, 4, 11, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314838049, 'comment_body': ""It is probably better to have a two-pass process here. In the first pass `dx` becomes `Juxtapose(d, x)`. The second pass can decide to change something like `Dfrac(Symbol('d'), Juxtapose(Symbol('d'), Symbol('x'))` into a derivative or a fraction."", 'comment_created': datetime.datetime(2023, 9, 4, 11, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314861450, 'comment_body': ""I will try a few things and see if they stick, but I'm not sure how this two-pass approach would work. The Transformer runs only once. After that, we are supposed to have the desired output."", 'comment_created': datetime.datetime(2023, 9, 4, 12, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314863027, 'comment_body': 'The good news is that the integral feature is completely disjoint from the derivative feature. It looks to me like `\\int \\frac{dz}[z}` still parses as we want it to, even if we allow `d` as a symbol name.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314882054, 'comment_body': '> The Transformer runs only once. After that, we are supposed to have the desired output.\r\n\r\nThat is when the second pass would kick in. The transformer should do only what can be done unambiguously in a bottom up manner. The second pass can then work back through the expression top down using e.g. `replace`.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314888524, 'comment_body': ""The transformer class for Lark ASTs has a very specific structure and is designed to handle a specific class of inputs. From my POV as a SymPy developer, I simply write the transformer class with the terminal or rule names as functions and do what I need to in the body, and Lark takes care of the parsing and transformer application.\r\n\r\nI don't think this second pass wouldn't work because Lark flattens the tree as it applies the transformer class to the parse tree. And since Lark does this part, I am cannot freely modify the process in which things are done. I.e., I cannot make this one-pass approach into a two-pass approach at will."", 'comment_created': datetime.datetime(2023, 9, 4, 12, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314899886, 'comment_body': '> I cannot make this one-pass approach into a two-pass approach at will.\r\n\r\nLark does the first pass. Then you can do whatever you want with the object that Lark returns: that is when you do the second pass.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314904058, 'comment_body': ""> Lark does the first pass. Then you can do whatever you want with the object that Lark returns: that is when you do the second pass.\r\n\r\nI'd still favor to find the concise solution that does everything in first pass.\r\n\r\nThe idea to introduce `Dfrac` or `Juxtapose` objects may not be light, because those objects can eventualy be picked up somewhere in `sympify`, and it seems like we eventually need to introduce two additional `Basic` object, which can be redundant."", 'comment_created': datetime.datetime(2023, 9, 4, 12, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314916922, 'comment_body': 'Having everything in bottom-up logic, should make it more easier to implement things like evaluation controls in the future.\r\n\r\nhttps://github.com/sympy/sympy/issues/25620\r\n\r\nI think that evaluation control is more complicated if we also consider the case about top-down evaluation pass', 'comment_created': datetime.datetime(2023, 9, 4, 12, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314923806, 'comment_body': 'Fair enough.\r\n\r\nIf I was designing a parser like this I would make everything a two pass process from the outset. The first pass would just parse the latex and produce a symbolic representation of the latex itself (using expression heads that are all LaTeX-specific). The second pass would be a set of match/replacement rules that translate that into an expression. Then it is much easier for a user to control or customise the parsing by changing or adding their own match/replacement rules like\r\n```python\r\nrules = {\r\n    LaTeX(r""\\pi""): sympy.pi,\r\n    LaTeX(r""\\beta""): Symbol(\'beta\'),\r\n    ...\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 13, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315070318, 'comment_body': ""I've made it so that `d` followed by another variable is parsed as a differential. This is not exactly what we want, but it's pretty darn close.\r\n\r\n> However, I'm not sure if this is easy before factoring out the recursive rules nicely.\r\n\r\nWe can revisit the issue and put the final nail in the coffin once I have made a PR which splits the grammar into separate file."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315076398, 'comment_body': 'There is ISO standard \r\nhttps://tug.org/tugboat/tb18-1/tb54becc.pdf\r\nthat suggests typesetting upright `d` as differential.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1315078279, 'comment_body': ""Have a look at the Mathematica parser. It has four steps and makes usage of lists as if they were Lisp S-expressions.\r\n\r\nI suggest we go that way after Lark's transformer has been applied."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315088522, 'comment_body': ""> There is ISO standard\r\n> https://tug.org/tugboat/tb18-1/tb54becc.pdf\r\n> that suggests typesetting upright d as differential.\r\n\r\nThe problem is that most people either don't know about this convention or don't care. Take a look at [this highly popular Math StackExchange answer](https://math.stackexchange.com/a/565626/737093) for an example. All the `d`s are typeset in italics. However, the question put the `d` in the integral in an upright position."", 'comment_created': datetime.datetime(2023, 9, 4, 16, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315230783, 'comment_body': 'Why does the extra 1 appears in multiplication?', 'comment_created': datetime.datetime(2023, 9, 4, 23, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1315252201, 'comment_body': ""> The problem is that most people either don't know about this convention or don't care. Take a look at this highly popular Math StackExchange answer for an example.\r\n\r\nI think that we can be loose about other iso standards, for easy things like not setting `i, j` or `e` as roman letters, because there is less technical difficulty implementing that.\r\n\r\nHowever, for derivative, the technical difficulty of implementing parser can make a valid defense against some user requests about parser not being flexible though."", 'comment_created': datetime.datetime(2023, 9, 5, 0, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1315427081, 'comment_body': ""> However, for derivative, the technical difficulty of implementing parser can make a valid defense against some user requests about parser not being flexible though.\r\n\r\nTrue. I'd like to point out, however, that it works now even with a normal `d`. The only pathological case we have sacrificed is something like `ab + dt` but I'd say that that comes up very rarely in real applications."", 'comment_created': datetime.datetime(2023, 9, 5, 6, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315432393, 'comment_body': ""I'm not entirely sure. This is some oddity which is manifesting itself when the parser interacts with the `evaluate(False)` context manager. Perhaps you can mention this in #25620 as well.\r\n\r\nSince it's just random multiplications by 1, I'm not too worried about it as the correctness is not affected."", 'comment_created': datetime.datetime(2023, 9, 5, 6, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315443544, 'comment_body': 'If possible, it would be good to make the parser as customizable as possible. Please do not make the current parser code too complicated in order to handle very specific rules. We should rather focus on making the parser customizable.', 'comment_created': datetime.datetime(2023, 9, 5, 6, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315456620, 'comment_body': 'The next PR will add the features that we discussed in our last meeting and add customizability to the parser.\r\n\r\n> Please do not make the current parser code too complicated in order to handle very specific rules. \r\n\r\nI believe that your suggestion of multiple passes to parse `d` correctly would also add to the code complexity of the parser.', 'comment_created': datetime.datetime(2023, 9, 5, 7, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315474139, 'comment_body': '""grammar"" better than ""grammar/"", Microsoft Windows uses backslashes instead of slashes.', 'comment_created': datetime.datetime(2023, 9, 5, 7, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315483787, 'comment_body': 'Keep in mind that extracting ""d"" from SYMBOL makes the code a lot more complicated. This project is meant to be continued in the future... we should try to find a way to do this without adding ad-hoc hooks for special meanings of expressions.', 'comment_created': datetime.datetime(2023, 9, 5, 7, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315543519, 'comment_body': ""Windows supports forward slashes on paths. It has done so for a long time. It's not a big deal. See [here](https://stackoverflow.com/a/12086287/12591388) for some relevant information.\r\n\r\nFWIW, I have been using Windows as my dev environment this whole time, and it never complained."", 'comment_created': datetime.datetime(2023, 9, 5, 8, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315553827, 'comment_body': ""> makes the code a lot more complicated\r\n\r\nI think the multiple pass idea makes the code even more complicated. I looked through the docstring for the Mathematica parser and it looks like it does 4 passes.\r\n\r\nAlso, I don't think looking at how the Mathematica parser handles things is not a fruitful idea because that is a CAS-to-CAS parser. A LaTeX to SymPy parser is a typesetting language to CAS parser, which is an inherently different beast, as I've mentioned multiple times."", 'comment_created': datetime.datetime(2023, 9, 5, 8, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315555629, 'comment_body': ""Also, the reason I don't want to open multiple concurrent PRs is because merge conflicts are a pain. I already had to resolve merge conflicts for this PR, and I actually made a mistake which I then had to fix."", 'comment_created': datetime.datetime(2023, 9, 5, 8, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315558170, 'comment_body': 'If we want simplicity, then I think we should go the route @sylee957 mentioned, and only support `\\text{d}` and `\\mathrm{d}` as differentials because of the ISO standard.', 'comment_created': datetime.datetime(2023, 9, 5, 8, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315601687, 'comment_body': '> I think the multiple pass idea makes the code even more complicated.\r\n\r\nIt is better to have multiple simple passes than one complicated one especially if it avoids having hard-coded rules and if separating the passes also separates concerns. Any decision you make about how to handle `d` here will be disliked by some users who will then want a way to control it. Hard-coded rules at the parse level make it more difficult to customise the behaviour in future.\r\n\r\nIt is better to have a first pass that handles parsing only and uses unambiguous parsing rules corresponding to the LaTeX formal grammar (which is not ambiguous), with the output being effectively a concrete or abstract syntax tree. This first step should not make any decisions that any users might reasonably complain about like disallowing `d` as a variable name or deciding that `dx` is a product or a differential. Then any steps after that that are ambiguous or not always desired should be *optionally* handled in the subsequent passes. These subsequent steps are much easier to implement and/or customise as tree-to-tree operations than when built into the parser.\r\n\r\nHaving a single pass might seem simpler now but it will make things more complicated in future for anyone who might try to extend or improve this parser. The difficulty you have right now in handling `d` demonstrates precisely the difficulties that future contributors will have when trying to build on this work to add or customise other features.', 'comment_created': datetime.datetime(2023, 9, 5, 9, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315773141, 'comment_body': ""> It is better to have a first pass that handles parsing only and uses unambiguous parsing rules corresponding to the LaTeX formal grammar (which is not ambiguous), with the output being effectively a concrete or abstract syntax tree.\r\n\r\nUnless I am mistaken, what you're suggesting sounds like a complete revamp of the project. I'm not sure how feasible this is, given that my GSoC project deadline is 6 days away. This is something we should have discussed and decided at the start. I am more and more inclined to take @sylee957's suggestion and only allow `\\text{d}` and `\\mathrm{d}` as differentials.\r\n\r\n> LaTeX formal grammar (which is not ambiguous)\r\n\r\nIt doesn't matter if the (La)TeX formal grammar is ambiguous or not. We are, in essence, trying to extract mathematical meaning from a language meant for typesetting. Ambiguity is inevitable. TeX doesn't care what `d` is. All it cares about is whether to italicize it not. For TeX, the decision is simple: default to italicize, unless told otherwise.\r\n\r\nWe have the following ambiguities so far in the parser:\r\n* Do we parse `d` as a differential or as a variable?\r\n* Do we parse `e` and `\\pi` as the constants or are arbitrary variables and function names? (`\\pi` might refer to the constant or to the prime-counting function.)\r\n* Do we parse `f(x)` or, more generally and pathologically, something like `u(t)` as function applications or as a multiplication of two variables?\r\n\r\nAll of these decisions, ultimately, depend on the user. We as library writers cannot make these decisions, and as far as I understand, each of these require slightly different grammars. Once again, because TeX only cares about looks (i.e., visual output), it doesn't care about the mathematical meanings and is unfazed by these ambiguities. We cannot extract the user's intent from these LaTeX strings.\r\n\r\nWhat we _can_ do, however, as an initial measure, is to have a default which satisfies most use-cases. Non-standard or niche use cases come after that. What I have currently prevents the user from writing something like `dt` as a multiplication. That's it. Everything else works fine.\r\n\r\n> The difficulty you have right now in handling `d` demonstrates precisely the difficulties that future contributors will have when trying to build on this work to add or customise other features.\r\n\r\nI can make the behavior I described above happen even without adding another rule, if that's what you care about. I thought that doing it this way conveys the special nature of `d` in particular, and my intent as a programmer, better. Plus, as @sylee957 mentioned, it's best to have as much brancing logic in the grammar as possible instead of in the transformer class. That's why I broke up the `relation` rule in the grammar, even though one could argue that it complicated the grammar further."", 'comment_created': datetime.datetime(2023, 9, 5, 11, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315782395, 'comment_body': ""> I can make the behavior I described above happen even without adding another rule, if that's what you care about. I thought that doing it this way conveys the special nature of `d` in particular, and my intent as a programmer, better.\r\n\r\nI've gone ahead and removed the special casing. Everything still works the same way as before."", 'comment_created': datetime.datetime(2023, 9, 5, 11, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315788049, 'comment_body': 'To be clear I am not objecting to the changes here but just commenting on the design decisions for future consideration.\r\n\r\nI realise that it would be difficult to change these things at this late stage in the project but when making any changes now we should still be aware of whether or not those changes now are compatible with how we might want to change or extend the code in future.\r\n\r\n> All of these decisions, ultimately, depend on the user. We as library writers cannot make these decisions,\r\n\r\nAgreed.\r\n\r\n> and as far as I understand, each of these require slightly different grammars.\r\n\r\nNo, this is not true. They only seem to require different ""grammars"" because you are mixing up grammar with other things in the parse phase. LaTeX has an unambiguous grammar and the best way to parse it is that the first pass parses that grammar in an unambiguous way. A parser that matches the actual grammar perfectly is a solid base on top of which any other LaTeX parsing functionality can be built. If the base parsing phase already makes any undesirable decisions then it is impossible to undo those in any code that builds on top.', 'comment_created': datetime.datetime(2023, 9, 5, 11, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315797481, 'comment_body': "">  LaTeX has an unambiguous grammar and the best way to parse it is that the first pass parses that grammar in an unambiguous way. A parser that matches the actual grammar perfectly is a solid base on top of which any other LaTeX parsing functionality can be built.\r\n\r\nThe only thing that can be very reusable and unambiguous, about LaTeX are tokens\r\nFor example, we can add everything in \r\nhttps://katex.org/docs/supported\r\nwithout much technical difficulty.\r\n\r\nHowever, I'm not very concluded about how to make the second phase (the CFG part) more reusable,\r\nif it is very much thin, it won't be much different than the tokenizer itself.\r\nAnd if we just attempt to parse every mathematical grammar users may need, it can likely be dead in ambiguity and complexity.\r\nSo at this stagge, I think that it is just important to focus on clarity of implementation, even if it is small, than having more rich set of features."", 'comment_created': datetime.datetime(2023, 9, 5, 12, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1316766834, 'comment_body': "" I would further argue that in the future we could add a Machine Learning stage after the transformer that applies advanced transformations based on statistical learning of real world use cases. Maybe we shouldn't customize the Lark parser too much."", 'comment_created': datetime.datetime(2023, 9, 6, 5, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': 'dc4e9db9084ba660d3e8b400d84cfe6112fa7e1c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d93d634fe7d61bda524b32fe550170f247f95d3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '467f3521f47bf9210e8f5eab00b3844cb4b3485f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9921eccca43df483cfa516fd2b33501888c8d1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd70c6fcea22f543b6ce20e1252de826169da606', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8024e31c04b87687cc64f22a9d2881766447450', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9047d0587bb8e4f5ffbcc977c8077218a754ff2c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f36a596389c560c9e830c8081ea75bf2d718a9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a5ae27452941820378dc33eab2aaf016b101d5a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16653cd05c338108f44c62e2a200de83b39fb4b2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cea4e14a3e42a3aaa20c235c2c93d13604f30d2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d92f31d16539d282b05a622dec37ae4ef617d66', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfede04329e250d36207f55d066a7853fec0002', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20bfa8482db4f7dc8be29dfb4250f340e7b219e0', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dfde00b6abc26268de0c00cc5328634b0f7d7e0', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37819646a72d3acef146cb394e8b1eb1f39d257', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa01b3165e1088228499b1ceca7aad94bbd805e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e012b4d6959c6a43e435ee19a47cd0cd12c856fc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f059d03c7e9437ca0632146b08a060b128bf1f0c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '511adbe9a55c6267cf0b1beec0ee894f9fa62a83', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453f1488c63adcf858d18277689e1dc2ce857763', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '284a9cde2137e73ec35dc2e70e2d31b5d4a97fcf', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe64c6c039ac2099f75235c431a803eec67f422', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d61b36ed741055709197c02ce5c4627f191d0ef', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6e308a3be74b452bae48037bd03f1e987be3b39', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70be04e26b33d448d18666980979372343dfd035', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e41f70f30c749b4abfc4498080e21a62db6fef0b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1420312028,[GSoC] Added a preliminary Lark LaTeX parser implementation.,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Resumes the work of https://github.com/sympy/sympy/pull/19825.

As requested by @asmeurer and @Upabjojr, I have made a draft PR on which all my work will be pushed. I have marked it as a draft because it is still a WIP.

#### Brief description of what is fixed or changed

This is the v1 rewrite of the current ANTLR-based LaTeX parser. It contains most of the features that the ANTLR-based parser supports. Notable exceptions are:
* Interpreting `\frac{d}{dx}` as a derivative.
* Interpreting integrals with the `d` operator in a fraction, like `\int \frac{dz}{z}`.
* Support for Bra and Ket notation.
* Recognizing variables like `y_1''` and interpreting them as symbols correctly
* Recognizing expressions like `f'_1(x)` as function applications.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * Added a Lark-based LaTeX parser.
<!-- END RELEASE NOTES -->
",True,25324,https://api.github.com/repos/sympy/sympy/pulls/25324,https://github.com/sympy/sympy/pull/25324,closed,1286,3,6,101,9,27,0,0,[],2023-07-05 02:39:06+00:00,2023-08-12 18:30:27+00:00,3340281.0,"38 days, 15:51:21","[{'comment_id': 1253217675, 'comment_body': 'these `print` statements should not be merged.', 'comment_created': datetime.datetime(2023, 7, 5, 14, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253218143, 'comment_body': 'this should be removed', 'comment_created': datetime.datetime(2023, 7, 5, 14, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253219458, 'comment_body': 'is this variable needed? Correct way to use it would be `disabled = lark is None`', 'comment_created': datetime.datetime(2023, 7, 5, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1253424918, 'comment_body': '`\\\\sin^{-1}` would be better handled with the _CARET_ operator as an expression, and then rendered into the `arcsin` by the transformer.', 'comment_created': datetime.datetime(2023, 7, 5, 17, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1258315351, 'comment_body': 'Resolved during the weekly meeting.', 'comment_created': datetime.datetime(2023, 7, 10, 13, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1258337256, 'comment_body': ""Good idea. I'll implement it like that."", 'comment_created': datetime.datetime(2023, 7, 10, 14, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1259825868, 'comment_body': 'We should create two kinds of expressions: the ones that have higher priority than `\\binom` and the ones that have lower. That was the idea of `expression_core`... `expression_core` should contain all expressions that have higher priority than the backslash operators.\r\n\r\nGeneric `expression` should be either an `expression_core` or any kind of expressions that have lower priority than backslash operators.\r\n\r\nThis way should work.', 'comment_created': datetime.datetime(2023, 7, 11, 14, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260771617, 'comment_body': '`group_curly_parentheses | atomic_expr` can probably be replaced by `expression_core`', 'comment_created': datetime.datetime(2023, 7, 12, 8, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260835030, 'comment_body': '`expression_core` also allows for `group_round_parentheses` which is not a valid option in this scenario.', 'comment_created': datetime.datetime(2023, 7, 12, 8, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260841534, 'comment_body': 'what about just having:\r\n```\r\nfraction: CMD_FRAC expression_core expression_core\r\n```\r\nthat is, `expression_core` should contain all elements that have higher priority than `\\frac`.', 'comment_created': datetime.datetime(2023, 7, 12, 8, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1260858003, 'comment_body': 'Setting aside the `group_round_parentheses` discussion, that would still not work. If we make this change, then in `\\frac12`, the `12` would parse as `number`, when we need it to parse as `DIGIT DIGIT` in this case.\r\n\r\nA similar thing would happen for `\\frac1234` whereas we need the `1234` to parse as `DIGIT DIGIT expression` where the expression contains `34` as a `number`.', 'comment_created': datetime.datetime(2023, 7, 12, 9, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260974391, 'comment_body': 'Using a named rule `A` in a different rule `B` does not mean that `A` has a higher priority than `B`. That is to say, `expression_core` does not have a higher precedence than `expression`. Both have equal precedence, which is the root reason for many of the ambiguous parses.\r\n\r\nAssigning `expression_core` a higher precedence than `expression` _is_ possible, but there are two things to keep in mind:\r\n1. Assigning priorities to rules is only possible using the Earley parser and not the LALR parser. Since you mentioned that you think that moving to the LALR parser might be a better option, I am mentioning this.\r\n2. If we go with the rule priorities route, then we lose the ability to inform the user that their input expression is ambiguous. Using rule priorities requires to use `ambiguity=resolve`, which means that any ambiguity in the parsing is resolved automatically (using rule priorities, if that is available). If we keep `ambiguity=explicit`, we retain the ability to inform the user of ambiguous parses, but lose the ability to use rules with different priorities.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260984991, 'comment_body': 'As you mentioned [here](https://matrix.to/#/!ieKAyoLMgajmgkdQZE:matrix.org/$sSGfnbR9sCvD06rPCApkMbi4aMeKgp2ok7CtjgRR1AQ?via=matrix.org&via=gitter.im), I removed `group_round_parentheses` from the definition of `expression_core` and made this change.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260985839, 'comment_body': ""As these are temporary, I'm marking this as resolved. They will be removed at the end."", 'comment_created': datetime.datetime(2023, 7, 12, 10, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260987501, 'comment_body': ""I'm not sure if it is needed or not. This is how ANTLR tests are disabled if the `antlr4-python3-runtime` is not found, in the current [master](https://github.com/sympy/sympy/blob/46558492a74bf2a324f9560af008b6c3ee587a6c/sympy/parsing/tests/test_latex.py#L27-L29).\r\n\r\nSince we want to do the same thing if Lark is not found, I added it."", 'comment_created': datetime.datetime(2023, 7, 12, 10, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1260991182, 'comment_body': 'I still need to handle things like `\\sin^2 x`. This is correctly handled in the ANTLR parser (I checked), but there are no tests for ensuring this behavior in [`test_latex.py`](https://github.com/sympy/sympy/blob/46558492a74bf2a324f9560af008b6c3ee587a6c/sympy/parsing/tests/test_latex.py) so it is not a priority. My first priority is passing the test cases in the `test_latex.py`.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1261435504, 'comment_body': ""I'm marking this as resolved because we solved this issue in the team meeting."", 'comment_created': datetime.datetime(2023, 7, 12, 16, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1261436332, 'comment_body': ""I'm also marking this as resolved, because we discussed how to solve this problem during the team meeting, and the way to solve this is to use the same strategy but for binomial expressions."", 'comment_created': datetime.datetime(2023, 7, 12, 16, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1264334255, 'comment_body': ""This is checked for in [this function](https://github.com/sympy/sympy/blob/0ec134d277f14961e8b6629182895fc986658c2e/sympy/conftest.py#L67-L74). I'm marking this as resolved because it's required. I'll make the proposed change soon."", 'comment_created': datetime.datetime(2023, 7, 15, 5, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266845000, 'comment_body': ""> // TODO: Shouold [sic] we include the uppercase variants for the symbols where the uppercase variant doesn't have a separate meaning\r\n\r\n@Upabjojr could you comment on this?"", 'comment_created': datetime.datetime(2023, 7, 18, 14, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266845623, 'comment_body': '> // TODO: Should this be included? Delta usually denotes other things.\r\n@Upabjojr what are your thoughts on this?', 'comment_created': datetime.datetime(2023, 7, 18, 14, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266846970, 'comment_body': ""@Upabjojr What about this? Should `\\iota` be added? It's a valid LaTeX command, according to [this reference](https://www.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols), but I've rarely seen it used as a bona fide variable. At best, I've seen people use it to denote the imaginary number `i`."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266847881, 'comment_body': ""@Upabjojr What do you think of this? I think it's fine but I just wanted to cross-check with you."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266857678, 'comment_body': ""@Upabjojr For this one, I think doing it like this is a good idea. What do you think? I think that'll be a valuable feature as there is already an open issue for handling it specially: #20306."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1266859918, 'comment_body': ""@Upabjojr I'm not sure whether we should have lowercase sigma or not. It's usually used to denote standard deviation, but I'm not sure how relevant that is here."", 'comment_created': datetime.datetime(2023, 7, 18, 14, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1283629078, 'comment_body': ""I'll resolve all the Greek symbol related queries, and move them into an issue of their own. They are low-priority, and won't require much work to add. All I really need is clarification on what features we want and which ones we don't want.\r\n\r\nThe Greek symbol stuff isn't important to the v1 Lark-based parser PR."", 'comment_created': datetime.datetime(2023, 8, 3, 19, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1284789850, 'comment_body': ""I've added this feature."", 'comment_created': datetime.datetime(2023, 8, 4, 19, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': '7863b841ceff4cd83c49bb7f05b5f64e4d45fcc4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f5f790c573214d4b974cdb90ad91998e1500d09', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa0a2ed71d7ee2a8ed83816e6d1b968163d41e2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49909cadcdeb22bdf90048804aa9d1ffa383921f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00db7719633143fb163c46022d51ce31c896a771', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbbc2ca42bf3f8c01a088bba8210b2f03850c91c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e8953c390b0f74147461e011b2bbc7ffee470d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76857d64cba1b54a7d4badc85cea965becc6c98a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c64a4a19fa443350f31f32a2a92da2de65a3481e', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b1913be35b6c96847cc1a0b90516078c3b6fff3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '208621f39599c85411edd3cfd5b59248634aa0ea', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f976c42a56760d116d70ec1eb396da4d34215cdf', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50d7706ab9120a311d0d5c1ac3237d1bb6140335', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9286274a882c8a5e55725742b3ca64a3db11c97b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465c905c268418ea333a3e2f318b3ea1ed014090', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f966dab3fc916489407deaae542b976f88b9d5c2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423f2a90060bab0dd6b25299e3ef18649ce35ec1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cc0623db26adc6a2eeb01953ab6f45df5d3f164', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ba043891d69762152d234dba07dff1befc4c2e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa19b8508faea36008e963fed090030d4c93ffb6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '248a20e39d39753187eb959dcdc22441821b0c7c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '917ceb2df6bb368e5af1674f8891bc828d8a7161', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb4f72eebfe39e49fe15e0bca85881df00f0c5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c99d4c6375042de5bdb4ac418d8e5f91ef2d12', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60770ad4412b30e825bc6ed995e3017f9fbab4f', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1a461b686665d1e2c50e84063da965cf68ed12', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14fffa6e04d04e3622649d4e8d3d3adb789a0d85', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7592494fb2c2508f5822692ca22ddd7b156e4cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5797c36a33435d72e4b600ad2f6cd3e3706b29c9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62bfa4f45a97abd789face8a57bc0e616f3729cb', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447c14cd4419a29edbcfc0d6f56c3d9725e5e8e2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0837b37f8b6203d65c2d6d6242d0015ead80d364', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c9e4d46c2b58abe17339d24a6e7ebb7cb7a47ed', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf6a1911ed7fce3ee6cb3e6f7ca919fb16051bd', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a7a7bfb10ede7bcadf565e4205b62e6e01e29fd', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70056a3d82611cf1e4748e7d1ac0d009acf1e86b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929f484310c56fe3c3cf38e9469767e637b1dd8c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3f11602c2655fac162054dd5de52614194d665f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0be1b26636329a55fb3656c17c549cfc0b19b1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6781e7670fcc65089af7ec7df724783459684061', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af08710e8820451daeeff283c3b75a952438521d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0398e5745f9fdf20d9670b040b6783f55f63a0d7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8525dcc5813e9f428ae81eccb87fbfbfeb8f0ee', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a713041dd351bd3d685af8509bd36cf051fe478', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef74986e5c79537bc7a062440a6300e5707e0de5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd93fb94b6b6c6a8b9b23cfae83b0d2bac151f7c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae52e2d5711eca7a35118e2ade6ba81a4fd9f7c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed0244cb89b630ef256abfb635bfa730738dc7b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e3423720143a707864139c8f95f8be7334efda4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '716304ae40ddead73a56a4d71482ce2b2e2d44c9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b19f2a2d78a0a967166f8ef38de1fdb600db60d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5a0f3a5a854d499cc490ce24ea474c7b313446', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb5677966f640727b0bf36259f949b487b5d854', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882a71b233f0eca7dcc60c6c867ebea4a994dee5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13be69fe6bfe4c5444c478a76f9c7752b51f1fe3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdc95dc7f637a81c555838b85fa568a853a29d3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786d7fd0de5a38725a160bd9fc3508c1c219c4e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '923f531a2877ec0f71fc5494ea75dcd488a172e1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fddd8f788901803533af983273a2ecbe0e5a6c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5fbf4e74e2d404758d8be025c20b72830e77156', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ebfe3dd019f6dc0dbef0b7068c931350ca1174c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7ba6caabd98779a487af78605dbf05fc2ac66f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b9fd310bdc23d22bf46295873a0a808ba485d0d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92fc1ba961281f25f41dcfc551e99e456d5c7f27', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700e3bc3efa844cd2d891eb374464e472b47f60c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adc8e0ab357bf78741e910aab2e0664b96fb0cb4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bec0b676fd48f20d7c9e9cc81b56b4718cdf553', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83ce0c0a5d5266ffab8e043b9d890fb2ed319c7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f68a6504f412cafd782ef5c5553c8eb8cb5e9b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdb199d71f2c38e89ac3d6395d1c56d0f079f1c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741e1f07ca1b1b9622e8620b461437639a675c2c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e29efe2723f2905b2f193882a7e2eee4262a6bb6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261d887834fd6922aac345243500024736d375cc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb6fe229aad6baa89f09bb1776c30ce46d74e4ab', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384ef0785e735acbeaff3be23a4f7343aee9124e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '126715ddf2d785bf4e6721e2fc548e4af78f050f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18697bc0a777102404f44173303927093c7bbb5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a623e43a837c2946823aa3f02aba45a1bbb2585f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6738c3d17973239593b74bd591ae58cd20eacb27', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f20bcc11c9a1391d4504af316c55ac4aac80716', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278768346a30ef2220247b139de35564a236ac80', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '085ce4ea9414551f497b3236ec5fd5a38e812c8c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb61a9aeda68f8a056f5b894115bb92e794d7df', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14a77dc073ef95bb917c03f6968877071a314618', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5207a150cb23dcab20015c4bd52695bf04f6da', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b723cce2939d293bce335ff6b0f48084cafb8abd', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '091fc6b0736b184208dcea6a924879282bc572c4', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa7b68605bc5ab333fd8f6ae75321e3917820cf2', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c69a6b9f1982571024b462adf47109e6792d4117', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6a099c28f898b0447739a2404d403d6fe2da86', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad17284b4fd7e51958e6e1b9eaea430ddac50d5c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b6cafa399fea34aa2dbe30eb0841f964f98c110', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6e06a84b620e4cc7a172f14d58e7e0ec200d441', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48926e89b205e45d6245f9f3dcc73d8af0e91185', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d1076343b9196098fdc72812f13c34868f6cd75', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1afa6cfa19a5216d407383bedf009c18e6a22a9d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e7c95a5121d776e414a645058bae180ece763c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd16d9b7a5719bfffe0d3c809225e99b1ac6807', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4519392947e7281566a8a7d0549d8a0cf1c1072e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1250dd326cd13b7bf9a384d2d84613d4471a5bf9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fa08ab7d72dcc038c20b36294e27f1f446b80fc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1478239940,[GSoC] Refactored Transformer code and fixed a minor inconsistency,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
#25515

#### Brief description of what is fixed or changed

I fixed a small inconsistency that was pointed out [here](https://github.com/sympy/sympy/pull/25515#issuecomment-1680375204) by @sylee957. I also refactored the Transformer code out into its own file, to make the design more modular.

I also made the `parse_latex_lark` function visible from `sympy.parsing.latex`.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * `parse_latex_lark` is now visible from `sympy.parsing.latex`.
<!-- END RELEASE NOTES -->
",True,25535,https://api.github.com/repos/sympy/sympy/pulls/25535,https://github.com/sympy/sympy/pull/25535,closed,449,458,3,13,7,17,0,0,[],2023-08-17 01:22:41+00:00,2023-08-26 18:47:10+00:00,840269.0,"9 days, 17:24:29","[{'comment_id': 1296582838, 'comment_body': ""I don't think that you have copied the correct code\r\nThis regresses #25515"", 'comment_created': datetime.datetime(2023, 8, 17, 1, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1296584414, 'comment_body': 'Oops, good catch. Thanks!\r\n\r\nI must have made a mistake with Git somehow.', 'comment_created': datetime.datetime(2023, 8, 17, 1, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1296661031, 'comment_body': ""I'm not sure that `lambda` is a invalid Symbol name\r\n`Symbol('lambda')` works.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 8, 17, 4, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1296695282, 'comment_body': ""Like the comment says, I simply mimicked `sympy.abc`'s approach here. If you think that using `lambda` will not cause issues, then I am fine with making the change."", 'comment_created': datetime.datetime(2023, 8, 17, 5, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1296797427, 'comment_body': 'I think we should keep it that way because if the user tries to use `subs` with an expression that has a lambda in it, the code will not work as intended.\r\n', 'comment_created': datetime.datetime(2023, 8, 17, 7, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1297337169, 'comment_body': 'I believe the symbol name should be lambda, not lamda.', 'comment_created': datetime.datetime(2023, 8, 17, 14, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1297369289, 'comment_body': ""I've made the change."", 'comment_created': datetime.datetime(2023, 8, 17, 15, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1299000755, 'comment_body': 'The test should only run for optional dependencies', 'comment_created': datetime.datetime(2023, 8, 19, 2, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1299131432, 'comment_body': ""The test was failing without this, and I'm not sure. Do you have any idea what else I can do to solve the issue? It was complaining that it could not find the `lark` module."", 'comment_created': datetime.datetime(2023, 8, 19, 6, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1299183316, 'comment_body': 'This is the place to add dependency\r\n\r\nhttps://github.com/sympy/sympy/blob/73484029c5f8a02da1a6f91419f39c6ed4cfdf57/.github/workflows/runtests.yml#L169-L223\r\n\r\nand you should also try to check if the files are added in the list in\r\n\r\nhttps://github.com/sympy/sympy/blob/master/bin/test_optional_dependencies.py', 'comment_created': datetime.datetime(2023, 8, 19, 12, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1299183632, 'comment_body': ""I already see the lark is there, but I'm not sure about the problem though.\r\nI just request you to remove the modifications here, such that I can see how CI fail"", 'comment_created': datetime.datetime(2023, 8, 19, 12, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1299188616, 'comment_body': ""Alright, I'll do that."", 'comment_created': datetime.datetime(2023, 8, 19, 13, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1299194635, 'comment_body': ""I've removed all the changes I made related to `runtests.yml`. You should be able to check the CI logs for the issues now."", 'comment_created': datetime.datetime(2023, 8, 19, 14, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1299239692, 'comment_body': 'You may need to guard the import with\r\nlark = import_module(‘lark’)', 'comment_created': datetime.datetime(2023, 8, 19, 18, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1303174051, 'comment_body': ""I've made the change."", 'comment_created': datetime.datetime(2023, 8, 23, 15, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1306492952, 'comment_body': 'You have to add `#type: ignore`', 'comment_created': datetime.datetime(2023, 8, 26, 17, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1306499411, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 26, 17, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': 'e67dec85261e1f408143a13ba286d809b0fd62c1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa70ba710c41369868d072630c4183ce4cbabf3d', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a818543e15602a6d49043fe77c9dd93318877e81', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e219176334a2cb6f150afcbd266397193e27110', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ee4e7a0801178e0d9ee6b9156183bf4572a96f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed3531a6c4dcbb1c95f2d3fa4516edc67719efad', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d624a575d3131cd8dc996a2b28eb3da55cb26d9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5778c3aad9d7815cd6bcef6e253eca19404c2314', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4ce99827f476b833fce2cfb928212160e36c9e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2c95c5c80d9b234ea417ea4427d8624e11c15d2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b36841a5252915809d3bf4228419d5fee526bd7e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5905070f91f04d1ac50c6cd73a1e3a2a919c18ba', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bfd602a53fec1e6f3ca75b93ed0ab3ad6addfd3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1484369181,[GSoC] Simplified Lark LaTeX parser testing framework,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

I simplified the testing framework in the tests for the Lark-based LaTeX parser. Previously, there was a lot of code duplication. I reduced code duplication greatly by reusing the shorthand definitions in `test_latex.py`, which also allowed me to cut down on the imports for `test_latex_lark.py`.

I also simplified the test disabling logic, and removed the `XFAIL` marker from a test that is now passing.

#### Other comments
cc @Upabjojr @sylee957 for review.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25569,https://api.github.com/repos/sympy/sympy/pulls/25569,https://github.com/sympy/sympy/pull/25569,closed,8,49,2,5,2,0,0,0,[],2023-08-22 09:20:05+00:00,2023-08-22 18:22:50+00:00,32565.0,9:02:45,[],"[{'commit_sha': '65d39d31dfa6e83487f3541d12e6d68f916dc85a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46adfb816a4a123afb754b3c2e13ee7ccfb6b9d2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b64ed82aeb98de835a5136aab643ecc4cd4ef5b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c746890e3bb1d0b082303f189318c260c8b4a643', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff89b2e06e21ff68e9a7acc08ea53edc95010241', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1499941932,Added error messages to the Lark LaTeX parser,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

When writing the LaTeX parser, I had left most of the error messages as TODOs. In this PR, I filled out all the error messages with helpful strings.

#### Other comments

cc @sylee957 and @Upabjojr for review.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25622,https://api.github.com/repos/sympy/sympy/pulls/25622,https://github.com/sympy/sympy/pull/25622,closed,18,18,1,4,2,4,0,0,[],2023-09-02 12:30:21+00:00,2023-09-03 12:32:29+00:00,86528.0,"1 day, 0:02:08","[{'comment_id': 1313920758, 'comment_body': ""I'm not sure if the error is reachable, this already exhausts all tokens, \r\nso the error should be meaningful for some future if someone adds more tokens here\r\n\r\n`relation: _expression (EQUAL | NOT_EQUAL | LT | LTE | GT | GTE) _expression`"", 'comment_created': datetime.datetime(2023, 9, 2, 17, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314059030, 'comment_body': '> the error should be meaningful for some future if someone adds more tokens here\r\n\r\nThat was what I was going for. Can you give me some suggestions on how to improve the error message?', 'comment_created': datetime.datetime(2023, 9, 3, 1, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314247676, 'comment_body': 'I may suggest in other ways to organize the grammar\r\nfrom\r\n```lark\r\nrelation: _expression (EQUAL | NOT_EQUAL | LT | LTE | GT | GTE) _expression\r\n```\r\nto\r\n```lark\r\n_relation: eq | ne | lt | le | gt | ge\r\neq: _expression EQUAL _expression\r\nne: _expression EQUAL _expression\r\n...\r\n```\r\n\r\nwhich eliminates the need to write the if-statements and errors inside transformers.', 'comment_created': datetime.datetime(2023, 9, 3, 12, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314247910, 'comment_body': ""That sounds good to me. I'm currently finishing up a PR which adds derivative support, among many other things. I'll make this change in that PR."", 'comment_created': datetime.datetime(2023, 9, 3, 12, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': 'a473d53d5cdca5ad806f328c76116898040d27b1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bfead0b167464025a6576a5b82ba02511774267', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e7114b1d6c68db3611ca1dd085e96ba6ccca482', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a096856d188b8d9c35eda4d839ec181630a7ca6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1500649384,Miscellaneous improvements to Lark LaTeX parser,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Addresses [#25622 (comment)](https://github.com/sympy/sympy/pull/25622#discussion_r1314247676), among other things.

#### Brief description of what is fixed or changed

I did a lot of miscellaneous refactoring and stuff in this PR. Here's a list of changes:
* Added support for Outer Products, just like how Inner Products for Bra and Ket are supported
* Renamed the `_implicit_multipilcation` node to a more aptly named node `adjacent_expressions` and also unfolded the node. This change made the `mul` node's Transformer logic much simpler.
* Renamed `multiletter_symbol` to `multi_letter_symbol` to make the underscore usage more consistent
* Removed the unnecessary rule for the `CMD_INFTY` terminal
* Changed some variable names in the `LarkLaTeXParser` class to more aptly named ones.
* Added support for derivatives. Things like `\frac{\mathrm{d}}{\mathrm{d}x} \sin x` work.
* Slightly modified the logic for the `integral` node in the transformer, and added comments explaining how it works.
* Refactored the Greek Symbol stuff out into its own `.lark` file.

#### Other comments
cc @sylee957 and @Upabjojr for review.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * The Lark-based LaTeX parser now supports parsing derivative-related expressions.
<!-- END RELEASE NOTES -->
",True,25626,https://api.github.com/repos/sympy/sympy/pulls/25626,https://github.com/sympy/sympy/pull/25626,closed,243,124,6,27,9,38,0,0,[],2023-09-04 05:38:17+00:00,2023-09-05 12:41:57+00:00,111820.0,"1 day, 7:03:40","[{'comment_id': 1314628949, 'comment_body': ""Why can't `d` be used as symbols here?"", 'comment_created': datetime.datetime(2023, 9, 4, 8, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314644627, 'comment_body': 'To answer your question, I\'ll mostly copy-and-paste my messages on the Element chat:\r\nWhile working on adding support for derivatives in the parser, I\'m ran into an issue: It\'s impossible to tell the parser to treat ""d"" as a one-letter symbol some of the time, except in certain context-sensitive cases.\r\n\r\nIf I don\'t disallow `d` as a variable name, then something like `\\dfrac{d}{dx}` binds both to `fraction` and `derivative_operator`. This happens because we are using the Earley parser (because we want to detect and report ambiguous expressions to the user) so the concept of ""best match"" doesn\'t apply here.\r\n\r\nAll in all, I decided that the loss of `d` as a variable name is not a huge loss: The only time I\'ve ever seen/used ""d"" as a variable is in number theory contexts, where it stood for ""divisor"". Another variable name can just as easily be used in these contexts.\r\n\r\nBy disallowing `d` as a variable name, we gained derivative support, and now I can also support parsing expressions like `\\int \\frac{dz}{z}`.\r\n', 'comment_created': datetime.datetime(2023, 9, 4, 9, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314652255, 'comment_body': 'Okay, I think that it is unfortunate that d can’t be used as variable name.\r\n\r\nBut if there is technical difficulty regarding that, we would be unfortunately disabling that.', 'comment_created': datetime.datetime(2023, 9, 4, 9, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314660466, 'comment_body': ""If we disallow normal `d` and require all instances of `d` as a differential to be either `\\text{d}` or `\\mathrm{d}` then we can use `d` as a variable again. However, I don't think most people make a distinction between `d` as a differential and a variable in their LaTeX code."", 'comment_created': datetime.datetime(2023, 9, 4, 9, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314664004, 'comment_body': 'It is very common to use `d` as a variable name.\r\n\r\nWhat about allowing `d` as a symbol and then having `dfrac` process into a derivative afterwards?', 'comment_created': datetime.datetime(2023, 9, 4, 9, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314705274, 'comment_body': ""I may suggest in other ways, to split start symbol into two expression cases\r\n\r\n```\r\nstart: expression_with_derivative | expression_without_derivative\r\n```\r\n\r\nand defining `expression_with_derivative`, `expression_without_derivative` separately into their own recursive grammars such that\r\n`expression_with_derivative` contains the derivatives or integrals, and `expression_without_derivative` does not, with `d` parsed as polynomial variable.\r\n\r\nI think that if users use `d` as polynomial variables, then users should deliberately avoid using derivatives at math, and vice versa. However, I'm not sure if this is easy before factoring out the recursive rules nicely.\r\n\r\n> What about allowing d as a symbol and then having dfrac process into a derivative afterwards?\r\n\r\nWe can try that idea, but if we encouter some issues like \r\n\r\n- The expression `dx` parses to multiplication\r\n- SymPy may sort the multiplication arguments\r\n\r\nthen we may rethink about the fix though."", 'comment_created': datetime.datetime(2023, 9, 4, 9, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314827849, 'comment_body': '> The expression `dx` parses to multiplication\n\nThis is precisely the problem since the transformer is applied in a bottom-up fashion on the AST.', 'comment_created': datetime.datetime(2023, 9, 4, 11, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314838049, 'comment_body': ""It is probably better to have a two-pass process here. In the first pass `dx` becomes `Juxtapose(d, x)`. The second pass can decide to change something like `Dfrac(Symbol('d'), Juxtapose(Symbol('d'), Symbol('x'))` into a derivative or a fraction."", 'comment_created': datetime.datetime(2023, 9, 4, 11, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314861450, 'comment_body': ""I will try a few things and see if they stick, but I'm not sure how this two-pass approach would work. The Transformer runs only once. After that, we are supposed to have the desired output."", 'comment_created': datetime.datetime(2023, 9, 4, 12, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314863027, 'comment_body': 'The good news is that the integral feature is completely disjoint from the derivative feature. It looks to me like `\\int \\frac{dz}[z}` still parses as we want it to, even if we allow `d` as a symbol name.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314882054, 'comment_body': '> The Transformer runs only once. After that, we are supposed to have the desired output.\r\n\r\nThat is when the second pass would kick in. The transformer should do only what can be done unambiguously in a bottom up manner. The second pass can then work back through the expression top down using e.g. `replace`.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314888524, 'comment_body': ""The transformer class for Lark ASTs has a very specific structure and is designed to handle a specific class of inputs. From my POV as a SymPy developer, I simply write the transformer class with the terminal or rule names as functions and do what I need to in the body, and Lark takes care of the parsing and transformer application.\r\n\r\nI don't think this second pass wouldn't work because Lark flattens the tree as it applies the transformer class to the parse tree. And since Lark does this part, I am cannot freely modify the process in which things are done. I.e., I cannot make this one-pass approach into a two-pass approach at will."", 'comment_created': datetime.datetime(2023, 9, 4, 12, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314899886, 'comment_body': '> I cannot make this one-pass approach into a two-pass approach at will.\r\n\r\nLark does the first pass. Then you can do whatever you want with the object that Lark returns: that is when you do the second pass.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314904058, 'comment_body': ""> Lark does the first pass. Then you can do whatever you want with the object that Lark returns: that is when you do the second pass.\r\n\r\nI'd still favor to find the concise solution that does everything in first pass.\r\n\r\nThe idea to introduce `Dfrac` or `Juxtapose` objects may not be light, because those objects can eventualy be picked up somewhere in `sympify`, and it seems like we eventually need to introduce two additional `Basic` object, which can be redundant."", 'comment_created': datetime.datetime(2023, 9, 4, 12, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314916922, 'comment_body': 'Having everything in bottom-up logic, should make it more easier to implement things like evaluation controls in the future.\r\n\r\nhttps://github.com/sympy/sympy/issues/25620\r\n\r\nI think that evaluation control is more complicated if we also consider the case about top-down evaluation pass', 'comment_created': datetime.datetime(2023, 9, 4, 12, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314923806, 'comment_body': 'Fair enough.\r\n\r\nIf I was designing a parser like this I would make everything a two pass process from the outset. The first pass would just parse the latex and produce a symbolic representation of the latex itself (using expression heads that are all LaTeX-specific). The second pass would be a set of match/replacement rules that translate that into an expression. Then it is much easier for a user to control or customise the parsing by changing or adding their own match/replacement rules like\r\n```python\r\nrules = {\r\n    LaTeX(r""\\pi""): sympy.pi,\r\n    LaTeX(r""\\beta""): Symbol(\'beta\'),\r\n    ...\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 13, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315070318, 'comment_body': ""I've made it so that `d` followed by another variable is parsed as a differential. This is not exactly what we want, but it's pretty darn close.\r\n\r\n> However, I'm not sure if this is easy before factoring out the recursive rules nicely.\r\n\r\nWe can revisit the issue and put the final nail in the coffin once I have made a PR which splits the grammar into separate file."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315076398, 'comment_body': 'There is ISO standard \r\nhttps://tug.org/tugboat/tb18-1/tb54becc.pdf\r\nthat suggests typesetting upright `d` as differential.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1315078279, 'comment_body': ""Have a look at the Mathematica parser. It has four steps and makes usage of lists as if they were Lisp S-expressions.\r\n\r\nI suggest we go that way after Lark's transformer has been applied."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315088522, 'comment_body': ""> There is ISO standard\r\n> https://tug.org/tugboat/tb18-1/tb54becc.pdf\r\n> that suggests typesetting upright d as differential.\r\n\r\nThe problem is that most people either don't know about this convention or don't care. Take a look at [this highly popular Math StackExchange answer](https://math.stackexchange.com/a/565626/737093) for an example. All the `d`s are typeset in italics. However, the question put the `d` in the integral in an upright position."", 'comment_created': datetime.datetime(2023, 9, 4, 16, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315230783, 'comment_body': 'Why does the extra 1 appears in multiplication?', 'comment_created': datetime.datetime(2023, 9, 4, 23, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1315252201, 'comment_body': ""> The problem is that most people either don't know about this convention or don't care. Take a look at this highly popular Math StackExchange answer for an example.\r\n\r\nI think that we can be loose about other iso standards, for easy things like not setting `i, j` or `e` as roman letters, because there is less technical difficulty implementing that.\r\n\r\nHowever, for derivative, the technical difficulty of implementing parser can make a valid defense against some user requests about parser not being flexible though."", 'comment_created': datetime.datetime(2023, 9, 5, 0, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1315427081, 'comment_body': ""> However, for derivative, the technical difficulty of implementing parser can make a valid defense against some user requests about parser not being flexible though.\r\n\r\nTrue. I'd like to point out, however, that it works now even with a normal `d`. The only pathological case we have sacrificed is something like `ab + dt` but I'd say that that comes up very rarely in real applications."", 'comment_created': datetime.datetime(2023, 9, 5, 6, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315432393, 'comment_body': ""I'm not entirely sure. This is some oddity which is manifesting itself when the parser interacts with the `evaluate(False)` context manager. Perhaps you can mention this in #25620 as well.\r\n\r\nSince it's just random multiplications by 1, I'm not too worried about it as the correctness is not affected."", 'comment_created': datetime.datetime(2023, 9, 5, 6, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315443544, 'comment_body': 'If possible, it would be good to make the parser as customizable as possible. Please do not make the current parser code too complicated in order to handle very specific rules. We should rather focus on making the parser customizable.', 'comment_created': datetime.datetime(2023, 9, 5, 6, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315456620, 'comment_body': 'The next PR will add the features that we discussed in our last meeting and add customizability to the parser.\r\n\r\n> Please do not make the current parser code too complicated in order to handle very specific rules. \r\n\r\nI believe that your suggestion of multiple passes to parse `d` correctly would also add to the code complexity of the parser.', 'comment_created': datetime.datetime(2023, 9, 5, 7, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315474139, 'comment_body': '""grammar"" better than ""grammar/"", Microsoft Windows uses backslashes instead of slashes.', 'comment_created': datetime.datetime(2023, 9, 5, 7, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315483787, 'comment_body': 'Keep in mind that extracting ""d"" from SYMBOL makes the code a lot more complicated. This project is meant to be continued in the future... we should try to find a way to do this without adding ad-hoc hooks for special meanings of expressions.', 'comment_created': datetime.datetime(2023, 9, 5, 7, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315543519, 'comment_body': ""Windows supports forward slashes on paths. It has done so for a long time. It's not a big deal. See [here](https://stackoverflow.com/a/12086287/12591388) for some relevant information.\r\n\r\nFWIW, I have been using Windows as my dev environment this whole time, and it never complained."", 'comment_created': datetime.datetime(2023, 9, 5, 8, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315553827, 'comment_body': ""> makes the code a lot more complicated\r\n\r\nI think the multiple pass idea makes the code even more complicated. I looked through the docstring for the Mathematica parser and it looks like it does 4 passes.\r\n\r\nAlso, I don't think looking at how the Mathematica parser handles things is not a fruitful idea because that is a CAS-to-CAS parser. A LaTeX to SymPy parser is a typesetting language to CAS parser, which is an inherently different beast, as I've mentioned multiple times."", 'comment_created': datetime.datetime(2023, 9, 5, 8, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315555629, 'comment_body': ""Also, the reason I don't want to open multiple concurrent PRs is because merge conflicts are a pain. I already had to resolve merge conflicts for this PR, and I actually made a mistake which I then had to fix."", 'comment_created': datetime.datetime(2023, 9, 5, 8, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315558170, 'comment_body': 'If we want simplicity, then I think we should go the route @sylee957 mentioned, and only support `\\text{d}` and `\\mathrm{d}` as differentials because of the ISO standard.', 'comment_created': datetime.datetime(2023, 9, 5, 8, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315601687, 'comment_body': '> I think the multiple pass idea makes the code even more complicated.\r\n\r\nIt is better to have multiple simple passes than one complicated one especially if it avoids having hard-coded rules and if separating the passes also separates concerns. Any decision you make about how to handle `d` here will be disliked by some users who will then want a way to control it. Hard-coded rules at the parse level make it more difficult to customise the behaviour in future.\r\n\r\nIt is better to have a first pass that handles parsing only and uses unambiguous parsing rules corresponding to the LaTeX formal grammar (which is not ambiguous), with the output being effectively a concrete or abstract syntax tree. This first step should not make any decisions that any users might reasonably complain about like disallowing `d` as a variable name or deciding that `dx` is a product or a differential. Then any steps after that that are ambiguous or not always desired should be *optionally* handled in the subsequent passes. These subsequent steps are much easier to implement and/or customise as tree-to-tree operations than when built into the parser.\r\n\r\nHaving a single pass might seem simpler now but it will make things more complicated in future for anyone who might try to extend or improve this parser. The difficulty you have right now in handling `d` demonstrates precisely the difficulties that future contributors will have when trying to build on this work to add or customise other features.', 'comment_created': datetime.datetime(2023, 9, 5, 9, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315773141, 'comment_body': ""> It is better to have a first pass that handles parsing only and uses unambiguous parsing rules corresponding to the LaTeX formal grammar (which is not ambiguous), with the output being effectively a concrete or abstract syntax tree.\r\n\r\nUnless I am mistaken, what you're suggesting sounds like a complete revamp of the project. I'm not sure how feasible this is, given that my GSoC project deadline is 6 days away. This is something we should have discussed and decided at the start. I am more and more inclined to take @sylee957's suggestion and only allow `\\text{d}` and `\\mathrm{d}` as differentials.\r\n\r\n> LaTeX formal grammar (which is not ambiguous)\r\n\r\nIt doesn't matter if the (La)TeX formal grammar is ambiguous or not. We are, in essence, trying to extract mathematical meaning from a language meant for typesetting. Ambiguity is inevitable. TeX doesn't care what `d` is. All it cares about is whether to italicize it not. For TeX, the decision is simple: default to italicize, unless told otherwise.\r\n\r\nWe have the following ambiguities so far in the parser:\r\n* Do we parse `d` as a differential or as a variable?\r\n* Do we parse `e` and `\\pi` as the constants or are arbitrary variables and function names? (`\\pi` might refer to the constant or to the prime-counting function.)\r\n* Do we parse `f(x)` or, more generally and pathologically, something like `u(t)` as function applications or as a multiplication of two variables?\r\n\r\nAll of these decisions, ultimately, depend on the user. We as library writers cannot make these decisions, and as far as I understand, each of these require slightly different grammars. Once again, because TeX only cares about looks (i.e., visual output), it doesn't care about the mathematical meanings and is unfazed by these ambiguities. We cannot extract the user's intent from these LaTeX strings.\r\n\r\nWhat we _can_ do, however, as an initial measure, is to have a default which satisfies most use-cases. Non-standard or niche use cases come after that. What I have currently prevents the user from writing something like `dt` as a multiplication. That's it. Everything else works fine.\r\n\r\n> The difficulty you have right now in handling `d` demonstrates precisely the difficulties that future contributors will have when trying to build on this work to add or customise other features.\r\n\r\nI can make the behavior I described above happen even without adding another rule, if that's what you care about. I thought that doing it this way conveys the special nature of `d` in particular, and my intent as a programmer, better. Plus, as @sylee957 mentioned, it's best to have as much brancing logic in the grammar as possible instead of in the transformer class. That's why I broke up the `relation` rule in the grammar, even though one could argue that it complicated the grammar further."", 'comment_created': datetime.datetime(2023, 9, 5, 11, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315782395, 'comment_body': ""> I can make the behavior I described above happen even without adding another rule, if that's what you care about. I thought that doing it this way conveys the special nature of `d` in particular, and my intent as a programmer, better.\r\n\r\nI've gone ahead and removed the special casing. Everything still works the same way as before."", 'comment_created': datetime.datetime(2023, 9, 5, 11, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315788049, 'comment_body': 'To be clear I am not objecting to the changes here but just commenting on the design decisions for future consideration.\r\n\r\nI realise that it would be difficult to change these things at this late stage in the project but when making any changes now we should still be aware of whether or not those changes now are compatible with how we might want to change or extend the code in future.\r\n\r\n> All of these decisions, ultimately, depend on the user. We as library writers cannot make these decisions,\r\n\r\nAgreed.\r\n\r\n> and as far as I understand, each of these require slightly different grammars.\r\n\r\nNo, this is not true. They only seem to require different ""grammars"" because you are mixing up grammar with other things in the parse phase. LaTeX has an unambiguous grammar and the best way to parse it is that the first pass parses that grammar in an unambiguous way. A parser that matches the actual grammar perfectly is a solid base on top of which any other LaTeX parsing functionality can be built. If the base parsing phase already makes any undesirable decisions then it is impossible to undo those in any code that builds on top.', 'comment_created': datetime.datetime(2023, 9, 5, 11, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315797481, 'comment_body': "">  LaTeX has an unambiguous grammar and the best way to parse it is that the first pass parses that grammar in an unambiguous way. A parser that matches the actual grammar perfectly is a solid base on top of which any other LaTeX parsing functionality can be built.\r\n\r\nThe only thing that can be very reusable and unambiguous, about LaTeX are tokens\r\nFor example, we can add everything in \r\nhttps://katex.org/docs/supported\r\nwithout much technical difficulty.\r\n\r\nHowever, I'm not very concluded about how to make the second phase (the CFG part) more reusable,\r\nif it is very much thin, it won't be much different than the tokenizer itself.\r\nAnd if we just attempt to parse every mathematical grammar users may need, it can likely be dead in ambiguity and complexity.\r\nSo at this stagge, I think that it is just important to focus on clarity of implementation, even if it is small, than having more rich set of features."", 'comment_created': datetime.datetime(2023, 9, 5, 12, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1316766834, 'comment_body': "" I would further argue that in the future we could add a Machine Learning stage after the transformer that applies advanced transformations based on statistical learning of real world use cases. Maybe we shouldn't customize the Lark parser too much."", 'comment_created': datetime.datetime(2023, 9, 6, 5, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': 'dc4e9db9084ba660d3e8b400d84cfe6112fa7e1c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d93d634fe7d61bda524b32fe550170f247f95d3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '467f3521f47bf9210e8f5eab00b3844cb4b3485f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9921eccca43df483cfa516fd2b33501888c8d1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd70c6fcea22f543b6ce20e1252de826169da606', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8024e31c04b87687cc64f22a9d2881766447450', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9047d0587bb8e4f5ffbcc977c8077218a754ff2c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f36a596389c560c9e830c8081ea75bf2d718a9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a5ae27452941820378dc33eab2aaf016b101d5a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16653cd05c338108f44c62e2a200de83b39fb4b2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cea4e14a3e42a3aaa20c235c2c93d13604f30d2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d92f31d16539d282b05a622dec37ae4ef617d66', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfede04329e250d36207f55d066a7853fec0002', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20bfa8482db4f7dc8be29dfb4250f340e7b219e0', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dfde00b6abc26268de0c00cc5328634b0f7d7e0', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37819646a72d3acef146cb394e8b1eb1f39d257', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa01b3165e1088228499b1ceca7aad94bbd805e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e012b4d6959c6a43e435ee19a47cd0cd12c856fc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f059d03c7e9437ca0632146b08a060b128bf1f0c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '511adbe9a55c6267cf0b1beec0ee894f9fa62a83', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453f1488c63adcf858d18277689e1dc2ce857763', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '284a9cde2137e73ec35dc2e70e2d31b5d4a97fcf', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe64c6c039ac2099f75235c431a803eec67f422', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d61b36ed741055709197c02ce5c4627f191d0ef', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6e308a3be74b452bae48037bd03f1e987be3b39', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70be04e26b33d448d18666980979372343dfd035', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e41f70f30c749b4abfc4498080e21a62db6fef0b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1499941932,Added error messages to the Lark LaTeX parser,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed

When writing the LaTeX parser, I had left most of the error messages as TODOs. In this PR, I filled out all the error messages with helpful strings.

#### Other comments

cc @sylee957 and @Upabjojr for review.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25622,https://api.github.com/repos/sympy/sympy/pulls/25622,https://github.com/sympy/sympy/pull/25622,closed,18,18,1,4,2,4,0,0,[],2023-09-02 12:30:21+00:00,2023-09-03 12:32:29+00:00,86528.0,"1 day, 0:02:08","[{'comment_id': 1313920758, 'comment_body': ""I'm not sure if the error is reachable, this already exhausts all tokens, \r\nso the error should be meaningful for some future if someone adds more tokens here\r\n\r\n`relation: _expression (EQUAL | NOT_EQUAL | LT | LTE | GT | GTE) _expression`"", 'comment_created': datetime.datetime(2023, 9, 2, 17, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314059030, 'comment_body': '> the error should be meaningful for some future if someone adds more tokens here\r\n\r\nThat was what I was going for. Can you give me some suggestions on how to improve the error message?', 'comment_created': datetime.datetime(2023, 9, 3, 1, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314247676, 'comment_body': 'I may suggest in other ways to organize the grammar\r\nfrom\r\n```lark\r\nrelation: _expression (EQUAL | NOT_EQUAL | LT | LTE | GT | GTE) _expression\r\n```\r\nto\r\n```lark\r\n_relation: eq | ne | lt | le | gt | ge\r\neq: _expression EQUAL _expression\r\nne: _expression EQUAL _expression\r\n...\r\n```\r\n\r\nwhich eliminates the need to write the if-statements and errors inside transformers.', 'comment_created': datetime.datetime(2023, 9, 3, 12, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314247910, 'comment_body': ""That sounds good to me. I'm currently finishing up a PR which adds derivative support, among many other things. I'll make this change in that PR."", 'comment_created': datetime.datetime(2023, 9, 3, 12, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': 'a473d53d5cdca5ad806f328c76116898040d27b1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bfead0b167464025a6576a5b82ba02511774267', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e7114b1d6c68db3611ca1dd085e96ba6ccca482', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a096856d188b8d9c35eda4d839ec181630a7ca6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1500649384,Miscellaneous improvements to Lark LaTeX parser,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Addresses [#25622 (comment)](https://github.com/sympy/sympy/pull/25622#discussion_r1314247676), among other things.

#### Brief description of what is fixed or changed

I did a lot of miscellaneous refactoring and stuff in this PR. Here's a list of changes:
* Added support for Outer Products, just like how Inner Products for Bra and Ket are supported
* Renamed the `_implicit_multipilcation` node to a more aptly named node `adjacent_expressions` and also unfolded the node. This change made the `mul` node's Transformer logic much simpler.
* Renamed `multiletter_symbol` to `multi_letter_symbol` to make the underscore usage more consistent
* Removed the unnecessary rule for the `CMD_INFTY` terminal
* Changed some variable names in the `LarkLaTeXParser` class to more aptly named ones.
* Added support for derivatives. Things like `\frac{\mathrm{d}}{\mathrm{d}x} \sin x` work.
* Slightly modified the logic for the `integral` node in the transformer, and added comments explaining how it works.
* Refactored the Greek Symbol stuff out into its own `.lark` file.

#### Other comments
cc @sylee957 and @Upabjojr for review.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* parsing
  * The Lark-based LaTeX parser now supports parsing derivative-related expressions.
<!-- END RELEASE NOTES -->
",True,25626,https://api.github.com/repos/sympy/sympy/pulls/25626,https://github.com/sympy/sympy/pull/25626,closed,243,124,6,27,9,38,0,0,[],2023-09-04 05:38:17+00:00,2023-09-05 12:41:57+00:00,111820.0,"1 day, 7:03:40","[{'comment_id': 1314628949, 'comment_body': ""Why can't `d` be used as symbols here?"", 'comment_created': datetime.datetime(2023, 9, 4, 8, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314644627, 'comment_body': 'To answer your question, I\'ll mostly copy-and-paste my messages on the Element chat:\r\nWhile working on adding support for derivatives in the parser, I\'m ran into an issue: It\'s impossible to tell the parser to treat ""d"" as a one-letter symbol some of the time, except in certain context-sensitive cases.\r\n\r\nIf I don\'t disallow `d` as a variable name, then something like `\\dfrac{d}{dx}` binds both to `fraction` and `derivative_operator`. This happens because we are using the Earley parser (because we want to detect and report ambiguous expressions to the user) so the concept of ""best match"" doesn\'t apply here.\r\n\r\nAll in all, I decided that the loss of `d` as a variable name is not a huge loss: The only time I\'ve ever seen/used ""d"" as a variable is in number theory contexts, where it stood for ""divisor"". Another variable name can just as easily be used in these contexts.\r\n\r\nBy disallowing `d` as a variable name, we gained derivative support, and now I can also support parsing expressions like `\\int \\frac{dz}{z}`.\r\n', 'comment_created': datetime.datetime(2023, 9, 4, 9, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314652255, 'comment_body': 'Okay, I think that it is unfortunate that d can’t be used as variable name.\r\n\r\nBut if there is technical difficulty regarding that, we would be unfortunately disabling that.', 'comment_created': datetime.datetime(2023, 9, 4, 9, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314660466, 'comment_body': ""If we disallow normal `d` and require all instances of `d` as a differential to be either `\\text{d}` or `\\mathrm{d}` then we can use `d` as a variable again. However, I don't think most people make a distinction between `d` as a differential and a variable in their LaTeX code."", 'comment_created': datetime.datetime(2023, 9, 4, 9, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314664004, 'comment_body': 'It is very common to use `d` as a variable name.\r\n\r\nWhat about allowing `d` as a symbol and then having `dfrac` process into a derivative afterwards?', 'comment_created': datetime.datetime(2023, 9, 4, 9, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314705274, 'comment_body': ""I may suggest in other ways, to split start symbol into two expression cases\r\n\r\n```\r\nstart: expression_with_derivative | expression_without_derivative\r\n```\r\n\r\nand defining `expression_with_derivative`, `expression_without_derivative` separately into their own recursive grammars such that\r\n`expression_with_derivative` contains the derivatives or integrals, and `expression_without_derivative` does not, with `d` parsed as polynomial variable.\r\n\r\nI think that if users use `d` as polynomial variables, then users should deliberately avoid using derivatives at math, and vice versa. However, I'm not sure if this is easy before factoring out the recursive rules nicely.\r\n\r\n> What about allowing d as a symbol and then having dfrac process into a derivative afterwards?\r\n\r\nWe can try that idea, but if we encouter some issues like \r\n\r\n- The expression `dx` parses to multiplication\r\n- SymPy may sort the multiplication arguments\r\n\r\nthen we may rethink about the fix though."", 'comment_created': datetime.datetime(2023, 9, 4, 9, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314827849, 'comment_body': '> The expression `dx` parses to multiplication\n\nThis is precisely the problem since the transformer is applied in a bottom-up fashion on the AST.', 'comment_created': datetime.datetime(2023, 9, 4, 11, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314838049, 'comment_body': ""It is probably better to have a two-pass process here. In the first pass `dx` becomes `Juxtapose(d, x)`. The second pass can decide to change something like `Dfrac(Symbol('d'), Juxtapose(Symbol('d'), Symbol('x'))` into a derivative or a fraction."", 'comment_created': datetime.datetime(2023, 9, 4, 11, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314861450, 'comment_body': ""I will try a few things and see if they stick, but I'm not sure how this two-pass approach would work. The Transformer runs only once. After that, we are supposed to have the desired output."", 'comment_created': datetime.datetime(2023, 9, 4, 12, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314863027, 'comment_body': 'The good news is that the integral feature is completely disjoint from the derivative feature. It looks to me like `\\int \\frac{dz}[z}` still parses as we want it to, even if we allow `d` as a symbol name.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314882054, 'comment_body': '> The Transformer runs only once. After that, we are supposed to have the desired output.\r\n\r\nThat is when the second pass would kick in. The transformer should do only what can be done unambiguously in a bottom up manner. The second pass can then work back through the expression top down using e.g. `replace`.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314888524, 'comment_body': ""The transformer class for Lark ASTs has a very specific structure and is designed to handle a specific class of inputs. From my POV as a SymPy developer, I simply write the transformer class with the terminal or rule names as functions and do what I need to in the body, and Lark takes care of the parsing and transformer application.\r\n\r\nI don't think this second pass wouldn't work because Lark flattens the tree as it applies the transformer class to the parse tree. And since Lark does this part, I am cannot freely modify the process in which things are done. I.e., I cannot make this one-pass approach into a two-pass approach at will."", 'comment_created': datetime.datetime(2023, 9, 4, 12, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1314899886, 'comment_body': '> I cannot make this one-pass approach into a two-pass approach at will.\r\n\r\nLark does the first pass. Then you can do whatever you want with the object that Lark returns: that is when you do the second pass.', 'comment_created': datetime.datetime(2023, 9, 4, 12, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314904058, 'comment_body': ""> Lark does the first pass. Then you can do whatever you want with the object that Lark returns: that is when you do the second pass.\r\n\r\nI'd still favor to find the concise solution that does everything in first pass.\r\n\r\nThe idea to introduce `Dfrac` or `Juxtapose` objects may not be light, because those objects can eventualy be picked up somewhere in `sympify`, and it seems like we eventually need to introduce two additional `Basic` object, which can be redundant."", 'comment_created': datetime.datetime(2023, 9, 4, 12, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314916922, 'comment_body': 'Having everything in bottom-up logic, should make it more easier to implement things like evaluation controls in the future.\r\n\r\nhttps://github.com/sympy/sympy/issues/25620\r\n\r\nI think that evaluation control is more complicated if we also consider the case about top-down evaluation pass', 'comment_created': datetime.datetime(2023, 9, 4, 12, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1314923806, 'comment_body': 'Fair enough.\r\n\r\nIf I was designing a parser like this I would make everything a two pass process from the outset. The first pass would just parse the latex and produce a symbolic representation of the latex itself (using expression heads that are all LaTeX-specific). The second pass would be a set of match/replacement rules that translate that into an expression. Then it is much easier for a user to control or customise the parsing by changing or adding their own match/replacement rules like\r\n```python\r\nrules = {\r\n    LaTeX(r""\\pi""): sympy.pi,\r\n    LaTeX(r""\\beta""): Symbol(\'beta\'),\r\n    ...\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 9, 4, 13, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315070318, 'comment_body': ""I've made it so that `d` followed by another variable is parsed as a differential. This is not exactly what we want, but it's pretty darn close.\r\n\r\n> However, I'm not sure if this is easy before factoring out the recursive rules nicely.\r\n\r\nWe can revisit the issue and put the final nail in the coffin once I have made a PR which splits the grammar into separate file."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315076398, 'comment_body': 'There is ISO standard \r\nhttps://tug.org/tugboat/tb18-1/tb54becc.pdf\r\nthat suggests typesetting upright `d` as differential.', 'comment_created': datetime.datetime(2023, 9, 4, 15, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1315078279, 'comment_body': ""Have a look at the Mathematica parser. It has four steps and makes usage of lists as if they were Lisp S-expressions.\r\n\r\nI suggest we go that way after Lark's transformer has been applied."", 'comment_created': datetime.datetime(2023, 9, 4, 15, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315088522, 'comment_body': ""> There is ISO standard\r\n> https://tug.org/tugboat/tb18-1/tb54becc.pdf\r\n> that suggests typesetting upright d as differential.\r\n\r\nThe problem is that most people either don't know about this convention or don't care. Take a look at [this highly popular Math StackExchange answer](https://math.stackexchange.com/a/565626/737093) for an example. All the `d`s are typeset in italics. However, the question put the `d` in the integral in an upright position."", 'comment_created': datetime.datetime(2023, 9, 4, 16, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315230783, 'comment_body': 'Why does the extra 1 appears in multiplication?', 'comment_created': datetime.datetime(2023, 9, 4, 23, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1315252201, 'comment_body': ""> The problem is that most people either don't know about this convention or don't care. Take a look at this highly popular Math StackExchange answer for an example.\r\n\r\nI think that we can be loose about other iso standards, for easy things like not setting `i, j` or `e` as roman letters, because there is less technical difficulty implementing that.\r\n\r\nHowever, for derivative, the technical difficulty of implementing parser can make a valid defense against some user requests about parser not being flexible though."", 'comment_created': datetime.datetime(2023, 9, 5, 0, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1315427081, 'comment_body': ""> However, for derivative, the technical difficulty of implementing parser can make a valid defense against some user requests about parser not being flexible though.\r\n\r\nTrue. I'd like to point out, however, that it works now even with a normal `d`. The only pathological case we have sacrificed is something like `ab + dt` but I'd say that that comes up very rarely in real applications."", 'comment_created': datetime.datetime(2023, 9, 5, 6, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315432393, 'comment_body': ""I'm not entirely sure. This is some oddity which is manifesting itself when the parser interacts with the `evaluate(False)` context manager. Perhaps you can mention this in #25620 as well.\r\n\r\nSince it's just random multiplications by 1, I'm not too worried about it as the correctness is not affected."", 'comment_created': datetime.datetime(2023, 9, 5, 6, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315443544, 'comment_body': 'If possible, it would be good to make the parser as customizable as possible. Please do not make the current parser code too complicated in order to handle very specific rules. We should rather focus on making the parser customizable.', 'comment_created': datetime.datetime(2023, 9, 5, 6, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315456620, 'comment_body': 'The next PR will add the features that we discussed in our last meeting and add customizability to the parser.\r\n\r\n> Please do not make the current parser code too complicated in order to handle very specific rules. \r\n\r\nI believe that your suggestion of multiple passes to parse `d` correctly would also add to the code complexity of the parser.', 'comment_created': datetime.datetime(2023, 9, 5, 7, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315474139, 'comment_body': '""grammar"" better than ""grammar/"", Microsoft Windows uses backslashes instead of slashes.', 'comment_created': datetime.datetime(2023, 9, 5, 7, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315483787, 'comment_body': 'Keep in mind that extracting ""d"" from SYMBOL makes the code a lot more complicated. This project is meant to be continued in the future... we should try to find a way to do this without adding ad-hoc hooks for special meanings of expressions.', 'comment_created': datetime.datetime(2023, 9, 5, 7, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}, {'comment_id': 1315543519, 'comment_body': ""Windows supports forward slashes on paths. It has done so for a long time. It's not a big deal. See [here](https://stackoverflow.com/a/12086287/12591388) for some relevant information.\r\n\r\nFWIW, I have been using Windows as my dev environment this whole time, and it never complained."", 'comment_created': datetime.datetime(2023, 9, 5, 8, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315553827, 'comment_body': ""> makes the code a lot more complicated\r\n\r\nI think the multiple pass idea makes the code even more complicated. I looked through the docstring for the Mathematica parser and it looks like it does 4 passes.\r\n\r\nAlso, I don't think looking at how the Mathematica parser handles things is not a fruitful idea because that is a CAS-to-CAS parser. A LaTeX to SymPy parser is a typesetting language to CAS parser, which is an inherently different beast, as I've mentioned multiple times."", 'comment_created': datetime.datetime(2023, 9, 5, 8, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315555629, 'comment_body': ""Also, the reason I don't want to open multiple concurrent PRs is because merge conflicts are a pain. I already had to resolve merge conflicts for this PR, and I actually made a mistake which I then had to fix."", 'comment_created': datetime.datetime(2023, 9, 5, 8, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315558170, 'comment_body': 'If we want simplicity, then I think we should go the route @sylee957 mentioned, and only support `\\text{d}` and `\\mathrm{d}` as differentials because of the ISO standard.', 'comment_created': datetime.datetime(2023, 9, 5, 8, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315601687, 'comment_body': '> I think the multiple pass idea makes the code even more complicated.\r\n\r\nIt is better to have multiple simple passes than one complicated one especially if it avoids having hard-coded rules and if separating the passes also separates concerns. Any decision you make about how to handle `d` here will be disliked by some users who will then want a way to control it. Hard-coded rules at the parse level make it more difficult to customise the behaviour in future.\r\n\r\nIt is better to have a first pass that handles parsing only and uses unambiguous parsing rules corresponding to the LaTeX formal grammar (which is not ambiguous), with the output being effectively a concrete or abstract syntax tree. This first step should not make any decisions that any users might reasonably complain about like disallowing `d` as a variable name or deciding that `dx` is a product or a differential. Then any steps after that that are ambiguous or not always desired should be *optionally* handled in the subsequent passes. These subsequent steps are much easier to implement and/or customise as tree-to-tree operations than when built into the parser.\r\n\r\nHaving a single pass might seem simpler now but it will make things more complicated in future for anyone who might try to extend or improve this parser. The difficulty you have right now in handling `d` demonstrates precisely the difficulties that future contributors will have when trying to build on this work to add or customise other features.', 'comment_created': datetime.datetime(2023, 9, 5, 9, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315773141, 'comment_body': ""> It is better to have a first pass that handles parsing only and uses unambiguous parsing rules corresponding to the LaTeX formal grammar (which is not ambiguous), with the output being effectively a concrete or abstract syntax tree.\r\n\r\nUnless I am mistaken, what you're suggesting sounds like a complete revamp of the project. I'm not sure how feasible this is, given that my GSoC project deadline is 6 days away. This is something we should have discussed and decided at the start. I am more and more inclined to take @sylee957's suggestion and only allow `\\text{d}` and `\\mathrm{d}` as differentials.\r\n\r\n> LaTeX formal grammar (which is not ambiguous)\r\n\r\nIt doesn't matter if the (La)TeX formal grammar is ambiguous or not. We are, in essence, trying to extract mathematical meaning from a language meant for typesetting. Ambiguity is inevitable. TeX doesn't care what `d` is. All it cares about is whether to italicize it not. For TeX, the decision is simple: default to italicize, unless told otherwise.\r\n\r\nWe have the following ambiguities so far in the parser:\r\n* Do we parse `d` as a differential or as a variable?\r\n* Do we parse `e` and `\\pi` as the constants or are arbitrary variables and function names? (`\\pi` might refer to the constant or to the prime-counting function.)\r\n* Do we parse `f(x)` or, more generally and pathologically, something like `u(t)` as function applications or as a multiplication of two variables?\r\n\r\nAll of these decisions, ultimately, depend on the user. We as library writers cannot make these decisions, and as far as I understand, each of these require slightly different grammars. Once again, because TeX only cares about looks (i.e., visual output), it doesn't care about the mathematical meanings and is unfazed by these ambiguities. We cannot extract the user's intent from these LaTeX strings.\r\n\r\nWhat we _can_ do, however, as an initial measure, is to have a default which satisfies most use-cases. Non-standard or niche use cases come after that. What I have currently prevents the user from writing something like `dt` as a multiplication. That's it. Everything else works fine.\r\n\r\n> The difficulty you have right now in handling `d` demonstrates precisely the difficulties that future contributors will have when trying to build on this work to add or customise other features.\r\n\r\nI can make the behavior I described above happen even without adding another rule, if that's what you care about. I thought that doing it this way conveys the special nature of `d` in particular, and my intent as a programmer, better. Plus, as @sylee957 mentioned, it's best to have as much brancing logic in the grammar as possible instead of in the transformer class. That's why I broke up the `relation` rule in the grammar, even though one could argue that it complicated the grammar further."", 'comment_created': datetime.datetime(2023, 9, 5, 11, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315782395, 'comment_body': ""> I can make the behavior I described above happen even without adding another rule, if that's what you care about. I thought that doing it this way conveys the special nature of `d` in particular, and my intent as a programmer, better.\r\n\r\nI've gone ahead and removed the special casing. Everything still works the same way as before."", 'comment_created': datetime.datetime(2023, 9, 5, 11, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1315788049, 'comment_body': 'To be clear I am not objecting to the changes here but just commenting on the design decisions for future consideration.\r\n\r\nI realise that it would be difficult to change these things at this late stage in the project but when making any changes now we should still be aware of whether or not those changes now are compatible with how we might want to change or extend the code in future.\r\n\r\n> All of these decisions, ultimately, depend on the user. We as library writers cannot make these decisions,\r\n\r\nAgreed.\r\n\r\n> and as far as I understand, each of these require slightly different grammars.\r\n\r\nNo, this is not true. They only seem to require different ""grammars"" because you are mixing up grammar with other things in the parse phase. LaTeX has an unambiguous grammar and the best way to parse it is that the first pass parses that grammar in an unambiguous way. A parser that matches the actual grammar perfectly is a solid base on top of which any other LaTeX parsing functionality can be built. If the base parsing phase already makes any undesirable decisions then it is impossible to undo those in any code that builds on top.', 'comment_created': datetime.datetime(2023, 9, 5, 11, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315797481, 'comment_body': "">  LaTeX has an unambiguous grammar and the best way to parse it is that the first pass parses that grammar in an unambiguous way. A parser that matches the actual grammar perfectly is a solid base on top of which any other LaTeX parsing functionality can be built.\r\n\r\nThe only thing that can be very reusable and unambiguous, about LaTeX are tokens\r\nFor example, we can add everything in \r\nhttps://katex.org/docs/supported\r\nwithout much technical difficulty.\r\n\r\nHowever, I'm not very concluded about how to make the second phase (the CFG part) more reusable,\r\nif it is very much thin, it won't be much different than the tokenizer itself.\r\nAnd if we just attempt to parse every mathematical grammar users may need, it can likely be dead in ambiguity and complexity.\r\nSo at this stagge, I think that it is just important to focus on clarity of implementation, even if it is small, than having more rich set of features."", 'comment_created': datetime.datetime(2023, 9, 5, 12, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1316766834, 'comment_body': "" I would further argue that in the future we could add a Machine Learning stage after the transformer that applies advanced transformations based on statistical learning of real world use cases. Maybe we shouldn't customize the Lark parser too much."", 'comment_created': datetime.datetime(2023, 9, 6, 5, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Upabjojr', 'type': 'User'}]","[{'commit_sha': 'dc4e9db9084ba660d3e8b400d84cfe6112fa7e1c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d93d634fe7d61bda524b32fe550170f247f95d3', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '467f3521f47bf9210e8f5eab00b3844cb4b3485f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9921eccca43df483cfa516fd2b33501888c8d1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd70c6fcea22f543b6ce20e1252de826169da606', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8024e31c04b87687cc64f22a9d2881766447450', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9047d0587bb8e4f5ffbcc977c8077218a754ff2c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f36a596389c560c9e830c8081ea75bf2d718a9', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a5ae27452941820378dc33eab2aaf016b101d5a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16653cd05c338108f44c62e2a200de83b39fb4b2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cea4e14a3e42a3aaa20c235c2c93d13604f30d2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d92f31d16539d282b05a622dec37ae4ef617d66', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfede04329e250d36207f55d066a7853fec0002', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20bfa8482db4f7dc8be29dfb4250f340e7b219e0', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dfde00b6abc26268de0c00cc5328634b0f7d7e0', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37819646a72d3acef146cb394e8b1eb1f39d257', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa01b3165e1088228499b1ceca7aad94bbd805e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e012b4d6959c6a43e435ee19a47cd0cd12c856fc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f059d03c7e9437ca0632146b08a060b128bf1f0c', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '511adbe9a55c6267cf0b1beec0ee894f9fa62a83', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '453f1488c63adcf858d18277689e1dc2ce857763', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '284a9cde2137e73ec35dc2e70e2d31b5d4a97fcf', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe64c6c039ac2099f75235c431a803eec67f422', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d61b36ed741055709197c02ce5c4627f191d0ef', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6e308a3be74b452bae48037bd03f1e987be3b39', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70be04e26b33d448d18666980979372343dfd035', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e41f70f30c749b4abfc4498080e21a62db6fef0b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1370913829,Added a test for the unused array function parameter in the C code generator,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
As discussed in #16689, I added a regression test for the unused function parameter bug.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25189,https://api.github.com/repos/sympy/sympy/pulls/25189,https://github.com/sympy/sympy/pull/25189,closed,20,1,1,2,4,0,1,0,[{'name': 'codegen'}],2023-05-30 18:32:37+00:00,2023-05-31 08:16:31+00:00,49434.0,13:43:54,[],"[{'commit_sha': 'eb2d6f8025e9d04a1d77d30cd64ed4f115e98024', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1927e9eab826050a0281366b93431fdc8c4fd78b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1378178240,Fixed a small error in the docs.,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #25202 

#### Brief description of what is fixed or changed
Removed a sentence in the documentation for [`MatrixCalculus.diff`](https://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.matrices.MatrixCalculus) that had a copy-paste error and wasn't giving the reader any new insight.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->",True,25205,https://api.github.com/repos/sympy/sympy/pulls/25205,https://github.com/sympy/sympy/pull/25205,closed,0,1,1,1,4,0,0,0,[],2023-06-05 03:41:00+00:00,2023-06-12 08:45:32+00:00,623072.0,"7 days, 5:04:32",[],"[{'commit_sha': '753b02a37b897e938f5f84baba22b31c1c5e14ad', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1409112100,Remove unnecessary code in MathML printer,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
I removed the `apply_patch` and `restore_patch` functions. They were originally created to workaround [this issue in the Python `xml` module](https://bugs.python.org/issue4147).

However, the Python versions affected by this bug are listed to be Python 3.2 and 3.3. The bug is marked as resolved on the [issue page](https://bugs.python.org/issue4147), and the [SymPy documentation](https://docs.sympy.org/dev/install.html#installation) states that we support Python 3.8 and above, so this code is entirely unnecessary.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25292,https://api.github.com/repos/sympy/sympy/pulls/25292,https://github.com/sympy/sympy/pull/25292,closed,0,71,2,1,2,0,1,0,[{'name': 'printing.mathml'}],2023-06-27 05:01:23+00:00,2023-06-27 09:03:29+00:00,14526.0,4:02:06,[],"[{'commit_sha': '7007314bd7fac3619a9340ca0061a5759a535506', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1409998136,Added the logo to the docs,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->

Closes #25275. 

#### Brief description of what is fixed or changed
Added the SymPy logo to the docs, under the ""How-To Guides"" section.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25295,https://api.github.com/repos/sympy/sympy/pulls/25295,https://github.com/sympy/sympy/pull/25295,closed,47,16,4,9,15,4,0,0,[],2023-06-27 14:12:05+00:00,2023-07-15 15:14:53+00:00,1558968.0,"18 days, 1:02:48","[{'comment_id': 1247129346, 'comment_body': ""There's no reason to have this since the above image is basically the same thing. "", 'comment_created': datetime.datetime(2023, 6, 29, 20, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1247132317, 'comment_body': 'We should mention that this requires the `rsvg-convert` function. We can cross-link to the docs dependencies page for instructions on how to install it.', 'comment_created': datetime.datetime(2023, 6, 29, 20, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1247501680, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2023, 6, 30, 6, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1247571489, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 6, 30, 8, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': '93440d470ad0d16aa9688caf1eb21bf72f29f044', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a089c59f3fcf0b68a1afdb1651c73e5bce9c0be', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e967f35c70076b88886ec409a3a96a9a06724c32', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8350cf34bd3e00c1d02a07eec53c27d60ffe3906', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f05e7a0efbcfec6876348d363b28ab3551f03241', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef8b6640f75fc2adfe654c2018f026729e8746a7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eed5640eb6549603d1fd68337b05bae085c328e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '505696cb904f122402787598d27ebc9eca39aec1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbe12dd9a1c496b2477c08aa414d96c8b79aa21a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1370913829,Added a test for the unused array function parameter in the C code generator,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
As discussed in #16689, I added a regression test for the unused function parameter bug.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25189,https://api.github.com/repos/sympy/sympy/pulls/25189,https://github.com/sympy/sympy/pull/25189,closed,20,1,1,2,4,0,1,0,[{'name': 'codegen'}],2023-05-30 18:32:37+00:00,2023-05-31 08:16:31+00:00,49434.0,13:43:54,[],"[{'commit_sha': 'eb2d6f8025e9d04a1d77d30cd64ed4f115e98024', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1927e9eab826050a0281366b93431fdc8c4fd78b', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1285759916,Added the C parser to the CI and passed some tests,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Partially fixes #24813. 


#### Brief description of what is fixed or changed
The C parser was not being tested in the CI because the required optional dependencies were not installed. I added those dependencies to the install stage so now it _is_ being tested.

Other than that, 3 of the failing tests were marked as `XFAIL`, presumably during development of the C parser and were never updated. I removed the `XFAIL` decorator, thus increasing the number of passing tests from 5 to 9.

I also cleaned up some of the code and made it a bit simpler.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,24954,https://api.github.com/repos/sympy/sympy/pulls/24954,https://github.com/sympy/sympy/pull/24954,closed,91,84,4,12,31,12,1,0,[{'name': 'parsing'}],2023-03-22 12:11:24+00:00,2023-03-29 18:46:43+00:00,628519.0,"7 days, 6:35:19","[{'comment_id': 1149947232, 'comment_body': 'Any reason for removing the part where the type and namespace references here get skipped?', 'comment_created': datetime.datetime(2023, 3, 28, 1, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 1149951827, 'comment_body': ""I'm not sure if this is the right way to handle this. You don't necessarily always return a Symbol. \r\nBut it's fine for now if it works. We can look into it while fixing the tests. "", 'comment_created': datetime.datetime(2023, 3, 28, 2, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 1149951917, 'comment_body': 'Any good reason for removing the try block here? \r\nException handling is always good. Why remove it?', 'comment_created': datetime.datetime(2023, 3, 28, 2, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 1150120467, 'comment_body': ""You're right. I added it to see if it fixes the bug, but (unsurprisingly) it doesn't. I'll remove it, as it was accidentally committed."", 'comment_created': datetime.datetime(2023, 3, 28, 7, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1150259852, 'comment_body': ""Firstly, this is a C parser, and C has no concept of a namespace.\r\n\r\nApart from that, the namespace nodes come before the function node, so it makes no sense to check for it inside a function declaration.\r\n\r\nTake the following C++ code:\r\n```cpp\r\nnamespace N1::N2 {\r\n    int add(int, int);\r\n}\r\n\r\nint N1::N2::add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\nint main() {\r\n    return 5;\r\n}\r\n```\r\nThe Clang AST for it (generated using `clang -Xclang -ast-dump -fsyntax-only test.cpp -std=c++17`) is:\r\n```\r\n|-NamespaceDecl 0x558f84788ce0 <test.cpp:1:1, line:3:1> line:1:11 N1\r\n| `-NamespaceDecl 0x558f84788d50 <col:13, line:3:1> line:1:15 N2\r\n|   `-FunctionDecl 0x558f84788f30 <line:2:2, col:18> col:6 add 'int (int, int)'\r\n|     |-ParmVarDecl 0x558f84788dd8 <col:10> col:13 'int'\r\n|     `-ParmVarDecl 0x558f84788e58 <col:15> col:18 'int'\r\n|-FunctionDecl 0x558f84789148 parent 0x558f84788d50 prev 0x558f84788f30 <line:5:1, line:7:1> line:5:13 add 'int (int, int)'\r\n| |-ParmVarDecl 0x558f84789028 <col:17, col:21> col:21 used a 'int'\r\n| |-ParmVarDecl 0x558f847890a8 <col:24, col:28> col:28 used b 'int'\r\n| `-CompoundStmt 0x558f847892e8 <col:31, line:7:1>\r\n|   `-ReturnStmt 0x558f847892d8 <line:6:2, col:13>\r\n|     `-BinaryOperator 0x558f847892b8 <col:9, col:13> 'int' '+'\r\n|       |-ImplicitCastExpr 0x558f84789288 <col:9> 'int' <LValueToRValue>\r\n|       | `-DeclRefExpr 0x558f84789248 <col:9> 'int' lvalue ParmVar 0x558f84789028 'a' 'int'\r\n|       `-ImplicitCastExpr 0x558f847892a0 <col:13> 'int' <LValueToRValue>\r\n|         `-DeclRefExpr 0x558f84789268 <col:13> 'int' lvalue ParmVar 0x558f847890a8 'b' 'int'\r\n`-FunctionDecl 0x558f84789350 <line:9:1, line:11:1> line:9:5 main 'int ()'\r\n  `-CompoundStmt 0x558f84789490 <col:12, line:11:1>\r\n    `-ReturnStmt 0x558f84789480 <line:10:2, col:9>\r\n      `-IntegerLiteral 0x558f84789460 <col:9> 'int' 5\r\n```\r\nAs you can see, the `NamespaceDecl` nodes come before the `FunctionDecl` nodes.\r\n\r\nAs for the `TYPE_REF` node, try as I might, I couldn't make it show up in the AST no matter what test program I tried. As far as the C parser is concerned, none of the tests even generate a `TYPE_REF` node afaict.\r\n\r\nSince you wrote the code (for your GSoC 2019 if I'm not mistaken), could you perhaps shed some light on what exactly a `TYPE_REF` node is, and why the code was originally checking for it and skipping over it?\r\n\r\nI'd be happy to add the `TYPE_REF` code back in if I somehow missed something."", 'comment_created': datetime.datetime(2023, 3, 28, 8, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1150263750, 'comment_body': 'The `get_children()` function returns an iterator, which is traversed by the `for` loop until the `StopIteration` exception is raised. As far as I can tell, the `try...except` is doing the same thing that the `for` loop is doing, but manually.', 'comment_created': datetime.datetime(2023, 3, 28, 9, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1151071505, 'comment_body': ""I don't think that the original test cases should be changed without reason, if the test cases are going to be `xfail`d\r\n"", 'comment_created': datetime.datetime(2023, 3, 28, 19, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1151077592, 'comment_body': ""I changed the variable name because `sum` is a built-in function in Python, and this was causing a `SymPyDeprecationWarning` to show up:\r\n```\r\n/home/tirthankar/sympy/sympy/codegen/ast.py:211: SymPyDeprecationWarning:\r\n\r\n  The string fallback in sympify() is deprecated.\r\n\r\n  To explicitly convert the string form of an object, use\r\n  sympify(str(obj)). To add define sympify behavior on custom\r\n  objects, use sympy.core.sympify.converter or define obj._sympy_\r\n  (see the sympify() docstring).\r\n\r\n  sympify() performed the string fallback resulting in the following string:\r\n\r\n  '<built-in function sum>'\r\n\r\n  See https://docs.sympy.org/latest/explanation/active-deprecations.html#deprecated-sympify-string-fallback\r\n  for details.\r\n\r\n  This has been deprecated since SymPy version 1.6. It\r\n  will be removed in a future version of SymPy.\r\n\r\n    return cls._get_constructor(attr)(arg)\r\n```\r\nChanging the variable name prevents this deprecation warning from showing up, so I don't think the change is unwarranted."", 'comment_created': datetime.datetime(2023, 3, 28, 19, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1151096866, 'comment_body': ""That is weird because that is valid C code\r\nand users shouldn't be responsible for naming conflicts of C variables with python builtins. \r\n\r\nI think that the tests should be kept as is now because we can rather catch something suspicious happening with sympify there."", 'comment_created': datetime.datetime(2023, 3, 28, 20, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1151102063, 'comment_body': ""Okay, I'll revert this change."", 'comment_created': datetime.datetime(2023, 3, 28, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1151106120, 'comment_body': ""I'd also try to revert other changes that are in xfail tests"", 'comment_created': datetime.datetime(2023, 3, 28, 20, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1151115787, 'comment_body': 'This was an actual error in test. The C parser was producing the correct output, but the output being tested against was wrong.', 'comment_created': datetime.datetime(2023, 3, 28, 20, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': '6ef91233c881ee493bfce7dd624b6b164e1db9f5', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e19cf120e46d5c062391e05e3daf9b891591da2', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8a3ac20a254b60227565d07a1708ac3d3d0fd9e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb20f39ea0940e672ec9880af911c6380f65a5a6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd26bed8a0708e959387ee6c08838bab9821abe17', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '381f7dc1b3b1b42c71be3bf13a0d8a959cbf2bde', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5318a5d13978697643750d20fea39aca1c340cdc', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc98149777a1efb7de3a1d12ae24476ef3771b44', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a401bd5bf7a988ab3f8a606d58ff87d51e3172f', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '934bd7975de326c310ee14d02a54440d0ae275b0', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '619b4c28d946bd9421ffb7ebd569510b8efb5138', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40dc98151118ad3deb7d718c57d8854253f884b6', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1378178240,Fixed a small error in the docs.,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Fixes #25202 

#### Brief description of what is fixed or changed
Removed a sentence in the documentation for [`MatrixCalculus.diff`](https://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.matrices.MatrixCalculus) that had a copy-paste error and wasn't giving the reader any new insight.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->",True,25205,https://api.github.com/repos/sympy/sympy/pulls/25205,https://github.com/sympy/sympy/pull/25205,closed,0,1,1,1,4,0,0,0,[],2023-06-05 03:41:00+00:00,2023-06-12 08:45:32+00:00,623072.0,"7 days, 5:04:32",[],"[{'commit_sha': '753b02a37b897e938f5f84baba22b31c1c5e14ad', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1409112100,Remove unnecessary code in MathML printer,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
I removed the `apply_patch` and `restore_patch` functions. They were originally created to workaround [this issue in the Python `xml` module](https://bugs.python.org/issue4147).

However, the Python versions affected by this bug are listed to be Python 3.2 and 3.3. The bug is marked as resolved on the [issue page](https://bugs.python.org/issue4147), and the [SymPy documentation](https://docs.sympy.org/dev/install.html#installation) states that we support Python 3.8 and above, so this code is entirely unnecessary.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25292,https://api.github.com/repos/sympy/sympy/pulls/25292,https://github.com/sympy/sympy/pull/25292,closed,0,71,2,1,2,0,1,0,[{'name': 'printing.mathml'}],2023-06-27 05:01:23+00:00,2023-06-27 09:03:29+00:00,14526.0,4:02:06,[],"[{'commit_sha': '7007314bd7fac3619a9340ca0061a5759a535506', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34
1409998136,Added the logo to the docs,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->

Closes #25275. 

#### Brief description of what is fixed or changed
Added the SymPy logo to the docs, under the ""How-To Guides"" section.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25295,https://api.github.com/repos/sympy/sympy/pulls/25295,https://github.com/sympy/sympy/pull/25295,closed,47,16,4,9,15,4,0,0,[],2023-06-27 14:12:05+00:00,2023-07-15 15:14:53+00:00,1558968.0,"18 days, 1:02:48","[{'comment_id': 1247129346, 'comment_body': ""There's no reason to have this since the above image is basically the same thing. "", 'comment_created': datetime.datetime(2023, 6, 29, 20, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1247132317, 'comment_body': 'We should mention that this requires the `rsvg-convert` function. We can cross-link to the docs dependencies page for instructions on how to install it.', 'comment_created': datetime.datetime(2023, 6, 29, 20, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1247501680, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2023, 6, 30, 6, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}, {'comment_id': 1247571489, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 6, 30, 8, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'wermos', 'type': 'User'}]","[{'commit_sha': '93440d470ad0d16aa9688caf1eb21bf72f29f044', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a089c59f3fcf0b68a1afdb1651c73e5bce9c0be', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e967f35c70076b88886ec409a3a96a9a06724c32', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8350cf34bd3e00c1d02a07eec53c27d60ffe3906', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f05e7a0efbcfec6876348d363b28ab3551f03241', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef8b6640f75fc2adfe654c2018f026729e8746a7', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eed5640eb6549603d1fd68337b05bae085c328e', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '505696cb904f122402787598d27ebc9eca39aec1', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbe12dd9a1c496b2477c08aa414d96c8b79aa21a', 'committer_username': 'wermos', 'committer_name': 'Tirthankar Mazumder', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 13, 4, 55, 6, tzinfo=datetime.timezone.utc)}]",Tirthankar Mazumder,63574588,,User,,42,,31,34

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4367,12715,293,1320,58687,5125,14,718,"[{'id': 455346391, 'number': 19825, 'closed': datetime.datetime(2023, 6, 9, 21, 19, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 20, 45, 29, tzinfo=datetime.timezone.utc), 'time_taken': 90894833.0, 'time_delta': '1052 days, 0:33:53', 'additions': 2677, 'deletions': 4742, 'state': 'closed'}]"
