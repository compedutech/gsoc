pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
469608355,nfs: design nfs quota,"Signed-off-by: Ahmad Nurus S <prksu.sh@gmail.com>

<!-- Please take a look at our [Contributing](https://rook.io/docs/rook/master/development-flow.html)
documentation before submitting a Pull Request!
Thank you for contributing to Rook! -->

**Description of your changes:**

Design nfs quota

**Which issue is resolved by this Pull Request:**
Resolves #

**Checklist:**

- [ ] **Commit Message Formatting**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [ ] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [ ] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [ ] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [ ] Code generation (`make codegen`) has been run to update object specifications, if necessary.

[skip ci]",True,6112,https://api.github.com/repos/rook/rook/pulls/6112,https://github.com/rook/rook/pull/6112,closed,122,0,1,1,4,20,0,0,[],2020-08-18 16:29:01+00:00,2020-09-25 00:20:42+00:00,3225101.0,"37 days, 7:51:41","[{'comment_id': 472372237, 'comment_body': 'typo: specific', 'comment_created': datetime.datetime(2020, 8, 18, 17, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'richardelling', 'type': 'User'}, {'comment_id': 472786021, 'comment_body': 'whoops, thanks üòÅ', 'comment_created': datetime.datetime(2020, 8, 19, 7, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 474046573, 'comment_body': ""can we provide some more details about all the mechanics needed to make this work? i'm a bit confused about who is setting what, and where they are setting it.  Can you break it down more clearly, being specific about the various layering of volumes in play here?\r\n\r\ndoes the mounting of the PV into the pod by the kubelet have any responsibility here?\r\n"", 'comment_created': datetime.datetime(2020, 8, 20, 14, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 474048187, 'comment_body': 'how does this quota work with the scenario where 1 NFS export has 2 PVCs created for it? Is there any conflict for their quotas, esp. if they are different?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 474048950, 'comment_body': 'could this also work if the underlying volume is Ceph RBD? RBD has potential size (quota) enforcement too, right?', 'comment_created': datetime.datetime(2020, 8, 20, 14, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 474050525, 'comment_body': 'ah, this is the *underlying* volume that is underneath the NFS share/export, NOT the storageClass that is used for a NFS based PVC.  I was confused at first, even though you did mention ""underlying volume"" in the sentence before. \r\n\r\nthis may be helped from more clarity (or a little diagram), of the layering of volumes that are in play here\r\n* NFS PV\r\n* NFS share/export\r\n* underlying volume', 'comment_created': datetime.datetime(2020, 8, 20, 15, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 474066664, 'comment_body': 'what does it look like to ""create projects and set the quota limit"", can you add an example command that we will call?\r\n\r\ndo we need to update the container image to now also include this `xfs_quota` binary?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 477276529, 'comment_body': ""Who has the responsibility for setting a quota for requested PV is  `nfs-provisioner`. For underlying PV, Kubelet has a responsibility to mount the PV into the pod depend on `mountOptions` and `parameters.fsType` on storageclass.\r\n\r\nYup, I'll make this design more detail :bowing_man:"", 'comment_created': datetime.datetime(2020, 8, 26, 12, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 477299825, 'comment_body': ""Yes, they are different. each PVC which backed by NFS export will be a different `projects`. let's say PVC A will have projects id 1 and PVC B will have projects id 2 and so on. And each project has different size/capacity based on `.spec.resources.requests.storage`.\r\n\r\nThe mapping for PVC and `projects` will look like\r\n|PVC|project entries|\r\n|-|-|\r\n|A|1:/pv-a-path:size|\r\n|B|2:/pv-b-path:size|\r\n\r\nThe nfs-provisioner will also create a `projects` file for saving those project entries, so it will be persistent in case nfs-provisioner restarted/killed then nfs-provisioner can restore the state of quota for each directory (PV which backed by NFS export). "", 'comment_created': datetime.datetime(2020, 8, 26, 13, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 477307081, 'comment_body': ""I haven't tested yet, but it should work as well with condition `fstype` is xfs and with `prjquota` mount options in rbd storageclass.\r\n\r\nhttps://github.com/rook/rook/blob/24b0bdd119cf5cf453865af91bc81fe0ac88f5ff/cluster/examples/kubernetes/ceph/csi/rbd/storageclass.yaml#L53\r\n\r\nso the rbd volume will be mounted in nfs-server & nfs-provisioner look like\r\n```console\r\n/dev/rbd0 on /nfs-ceph-claim type xfs (rw,relatime,nouuid,attr2,inode64,logbufs=8,logbsize=64k,sunit=128,swidth=128,prjquota)\r\n``` "", 'comment_created': datetime.datetime(2020, 8, 26, 13, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 477308997, 'comment_body': ""yeah, I'll add the example command for creating projects and setting the quota limit that will be invoked by nfs-provisioner.\r\n\r\nyes, we need to update the container image to include the `xfs_quota` binary. will update it on the doc as well"", 'comment_created': datetime.datetime(2020, 8, 26, 13, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 477401965, 'comment_body': 'Thank you for clarifying.  where would this `projects` file be persisted to exactly?', 'comment_created': datetime.datetime(2020, 8, 26, 15, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 477402538, 'comment_body': 'This is good to know, that Ceph underlying volumes can support this as well.  It may be *nice* to include this in the instructions, but it is definitely not a requirement to do so :)', 'comment_created': datetime.datetime(2020, 8, 26, 15, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 487416505, 'comment_body': 'just looking at this storageClass, i was thinking that saying `xfs` implied it would result in an underlying volume that it tied to a single host node.  But many types of distributed storage providers (e.g. google PD or amazon AWS) support XFS too, so using XFS in the underlying volume does not mean that the NFS server is tied to a single host. Correct?\r\n\r\nis that worth adding a note about here (that many distributed volume types support XFS)?', 'comment_created': datetime.datetime(2020, 9, 12, 14, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 487416993, 'comment_body': 'this tree is super useful to understand the different cases and how quota will be set (or not set) and tracked for each!', 'comment_created': datetime.datetime(2020, 9, 12, 14, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 487417157, 'comment_body': ""does this need to be 3 (unique and not conflicting with the previous 2 projects?  This is on a separate underlying volume, so we could reuse 1 or 2 here right? I'm hoping we don't have to manage a unique set of project IDs across underlying volumes "", 'comment_created': datetime.datetime(2020, 9, 12, 14, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 487417458, 'comment_body': '```suggestion\r\nSince Rook NFS has the ability to create more than one NFS share/export that have different underlying volume directories, the *projects_file* will be saved on each underlying volume directory. So each NFS share/export will have different *projects_file* and each *project_file* will be persisted. The *projects_file* will only be created if underlying volume directory is mounted as `xfs` with `prjquota` mount options. This mean the existence of *project_file* will indicate if quota was enabled. The hierarchy of directory will look like:\r\n```', 'comment_created': datetime.datetime(2020, 9, 12, 14, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 494131376, 'comment_body': 'Yes, you are right. We should have a different set of project IDs across underlying volumes', 'comment_created': datetime.datetime(2020, 9, 24, 8, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 494132852, 'comment_body': '@jbw976 Do we still need some diagram to imagine this schema as we discussed in the last couple of weeks? or it will be enough by this tree?', 'comment_created': datetime.datetime(2020, 9, 24, 8, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 494353845, 'comment_body': 'This tree is sufficient, no other diagram is needed :)', 'comment_created': datetime.datetime(2020, 9, 24, 14, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}]","[{'commit_sha': '76c0bfd0c3093386b17c707eff7580744e70a3b4', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}]",Ahmad Nurus S.,43454825,,User,,61,,24,24
454428714,nfs: nfs provisioner controlled by operator,"Signed-off-by: Ahmad Nurus S <prksu.sh@gmail.com>

<!-- Please take a look at our [Contributing](https://rook.io/docs/rook/master/development-flow.html)
documentation before submitting a Pull Request!
Thank you for contributing to Rook! -->

**Description of your changes:**

Implementation of nfs provisioner controlled by the operator.
design docs https://github.com/rook/rook/pull/5830

**Which issue is resolved by this Pull Request:**
Resolves #4982 and Resolves #3074 

**Checklist:**

- [ ] **Commit Message Formatting**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [ ] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [ ] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [ ] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [ ] Code generation (`make codegen`) has been run to update object specifications, if necessary.

[test nfs]
",True,5863,https://api.github.com/repos/rook/rook/pulls/5863,https://github.com/rook/rook/pull/5863,closed,500,245,10,3,4,11,0,0,[],2020-07-21 11:50:52+00:00,2020-08-24 23:26:24+00:00,2979332.0,"34 days, 11:35:32","[{'comment_id': 459468640, 'comment_body': 'how about making export as a constant, since it is getting used at multiple places.', 'comment_created': datetime.datetime(2020, 7, 23, 13, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ashishranjan738', 'type': 'User'}, {'comment_id': 459468906, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 7, 23, 13, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ashishranjan738', 'type': 'User'}, {'comment_id': 459469048, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 7, 23, 13, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ashishranjan738', 'type': 'User'}, {'comment_id': 459469184, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 7, 23, 13, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ashishranjan738', 'type': 'User'}, {'comment_id': 459477082, 'comment_body': 'can we make these map keys as constant', 'comment_created': datetime.datetime(2020, 7, 23, 14, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ashishranjan738', 'type': 'User'}, {'comment_id': 459480745, 'comment_body': 'how about logging something if exportName is not matched, that would be helpful for debugging', 'comment_created': datetime.datetime(2020, 7, 23, 14, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ashishranjan738', 'type': 'User'}, {'comment_id': 459961896, 'comment_body': 'Can we have unit test for this function.', 'comment_created': datetime.datetime(2020, 7, 24, 10, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 459962487, 'comment_body': 'Unit test for this', 'comment_created': datetime.datetime(2020, 7, 24, 10, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 459962828, 'comment_body': 'Update the unit test to verify this', 'comment_created': datetime.datetime(2020, 7, 24, 10, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 460631195, 'comment_body': 'the current unit test already covered this function', 'comment_created': datetime.datetime(2020, 7, 27, 3, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 460653282, 'comment_body': 'updated, thanks', 'comment_created': datetime.datetime(2020, 7, 27, 5, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}]","[{'commit_sha': '45f0debd0004504908a4de9591df03f980cf548c', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92fffca1e429d611d03ada68ca161f339683923a', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc2ceda2da5642a965c82d8344adaec8f3d0979', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}]",Ahmad Nurus S.,43454825,,User,,61,,24,24
453017035,doc: update nfs openshift scc documentation,"Signed-off-by: Ahmad Nurus S <prksu.sh@gmail.com>

<!-- Please take a look at our [Contributing](https://rook.io/docs/rook/master/development-flow.html)
documentation before submitting a Pull Request!
Thank you for contributing to Rook! -->

**Description of your changes:**

This PR updates documentation for nfs openshift security context constraints as follow up of this [review](https://github.com/rook/rook/pull/5785#discussion_r454509677)

**Which issue is resolved by this Pull Request:**
Resolves #

**Checklist:**

- [x] **Commit Message Formatting**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [x] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [ ] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [ ] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [ ] Code generation (`make codegen`) has been run to update object specifications, if necessary.
",True,5854,https://api.github.com/repos/rook/rook/pulls/5854,https://github.com/rook/rook/pull/5854,closed,4,2,1,1,0,0,1,0,[{'name': 'docs'}],2020-07-20 03:55:01+00:00,2020-07-23 14:34:00+00:00,297539.0,"3 days, 10:38:59",[],"[{'commit_sha': '22574ac965f1941c0dcbd2f3d31f06852dd6a85f', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}]",Ahmad Nurus S.,43454825,,User,,61,,24,24
449536213,doc: design nfs provisioner controlled by operator,"Signed-off-by: Ahmad Nurus S <prksu.sh@gmail.com>

<!-- Please take a look at our [Contributing](https://rook.io/docs/rook/master/development-flow.html)
documentation before submitting a Pull Request!
Thank you for contributing to Rook! -->

**Description of your changes:**
Design implementation nfs provisioner controlled by operator to address the issue about nfs provisioner share the same directory between PV https://github.com/rook/rook/issues/4982

**Checklist:**

- [x] **Commit Message Formatting**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [x] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [ ] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [ ] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [ ] Code generation (`make codegen`) has been run to update object specifications, if necessary.
",True,5830,https://api.github.com/repos/rook/rook/pulls/5830,https://github.com/rook/rook/pull/5830,closed,115,0,1,1,2,19,1,0,[{'name': 'docs'}],2020-07-15 14:54:04+00:00,2020-08-04 14:57:22+00:00,1728198.0,"20 days, 0:03:18","[{'comment_id': 459485765, 'comment_body': '```suggestion\r\nThis proposal is to make NFS Provisioner controlled by the operator. So when NFS Server is created, the operator also creates its provisioner which mount each NFS share.\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 14, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ashishranjan738', 'type': 'User'}, {'comment_id': 459965097, 'comment_body': 'Why do we mount nfs share on the provisioner pod?', 'comment_created': datetime.datetime(2020, 7, 24, 10, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 460000147, 'comment_body': 'So that the provisioner can create the directory for each NFS PV.', 'comment_created': datetime.datetime(2020, 7, 24, 11, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 460055302, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2020, 7, 24, 13, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 461075359, 'comment_body': ""I think i'm missing something fundamental for this issue, and the mapping between NFSServer, shares/exports, and PVs.  That mapping (it doesn't have to be visual, it could just be textual) could perhaps make this issue and design more clear.\r\n\r\nIf a user creates a PVC to get a PV that is backed by a NFS export (share)...why is it a concern that another PVC/PV pointing to that same export is backed by the same directory in the provisioner?  NFS shares are read write many, so wouldn't you want them to all be sharing the same underlying data?\r\n\r\nThe mapping between all these concepts could help clear this up, or please add more background/info so this issue gets more clear about what the problem is and how this design fixes it. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 27, 18, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 461076175, 'comment_body': 'Maybe part of my confusion is that *perhaps* we are using language and descriptions that conflates the PVs that back the NFS server shares, and the PVs that a user gets from making a PVC that points (via a storageClass) to a NFS share?  ', 'comment_created': datetime.datetime(2020, 7, 27, 18, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 461350096, 'comment_body': ""> If a user creates a PVC to get a PV that is backed by a NFS export (share)...why is it a concern that another PVC/PV pointing to that same export is backed by the same directory in the provisioner? NFS shares are read write many, so wouldn't you want them to all be sharing the same underlying data?\r\n\r\nI think every PV (that is backed by NFS export and provisioned by our provisioner) should have its own data. The problem is when the user creates PV (through rook nfs dynamic provisioner) called PV-A and PV-B. Both of them use the same directory in the `nfs-server export`. Both PV-A and PV-B will have the same data. I mean if the user wants to share data, the user can just use that PVC instead of creating another PVC/PV.\r\n\r\nIn another case, we will add a deletion feature in our provisioner (which currently not implemented yet). The user creates two PV (from NFS export) called PV-A and PV-B. If both PV-A and PV-B use the same directory for their data and the user deletes the PV-A then what will happen with PV-B? Also about `disk-quota` how provisioner can provide specific storage capacity for each PV while its in one directory?\r\n\r\nYeah, I'll update this doc to be more clear."", 'comment_created': datetime.datetime(2020, 7, 28, 6, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 461458636, 'comment_body': ""I see, I was thinking of each user requested PV to map to the root of the share/export that is backing it.  But we're suggesting in this design that instead, each user requested PV should be an independent sub-directory within the share/export.  They are both backed by the same share/export, but they are independent sub-directories that do not overlap.  \r\n\r\nIs this hierarchy correct?\r\n\r\n* underlying PV (could be Ceph, HostPath, etc.)\r\n  * NFS share/export\r\n    * PV-A provisioned for user 1\r\n    * PV-B provisioned for user 2\r\n\r\nIn that hierarchy, PV-A and PV-B are backed by the same NFS share/export, but they are independent of each other and do not have any overlap or shared data. Is that correct? \r\n\r\nPlease @ mention me when you're updated this design doc. A visual to make these mappings/hierarchy clear would probably be very helpful and effective."", 'comment_created': datetime.datetime(2020, 7, 28, 9, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 462120082, 'comment_body': ""> In that hierarchy, PV-A and PV-B are backed by the same NFS share/export, but they are independent of each other and do not have any overlap or shared data. Is that correct?\r\n\r\nYup, that's correct."", 'comment_created': datetime.datetime(2020, 7, 29, 8, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 464662674, 'comment_body': '```suggestion\r\nNFS Provisioner is a built in dynamic provisioner for Rook NFS. The functionality works fine but has an issue where the provisioner uses the same underlying directory for each provisioned PV when provisioning two or more PV in the same share/export. This overlap means that each provisioned PV for a share/export can read/write each others data.\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 21, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 464673309, 'comment_body': '```suggestion\r\nThis proposal is to make Rook NFS Provisioner create a sub-directory for each provisioned PV when provisioning two or more PV in the same share/export. So it will have a hierarchy like:\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 21, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 464673951, 'comment_body': ""it says we'll create a sub-directory when provisioning 2 or more PV in the same share/export.  Is that implying that we will not create the sub-directory when there's only 1 PV? If so, when the 2nd one is created, do we go back and create a sub-directory for the first PV?\r\n\r\nI'm guessing we actually create the sub-directory for every single PV, even when there is only 1. Maybe we should clarify that here if it's truel."", 'comment_created': datetime.datetime(2020, 8, 3, 21, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 464674435, 'comment_body': '```suggestion\r\nSince those directories are not in the NFS Provisioner pod but in the NFS Server pod, NFS Provisioner cannot directly create sub-directories for them. The solution is to mount the whole underlying NFS share/export directory so that the NFS Provisioner can create a sub-directory for each provisioned PV.\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 21, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 464674675, 'comment_body': '```suggestion\r\n- Make NFS Provisioner use the sub-directory for each provisioned PV instead of using underlying directory.\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 21, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 464675324, 'comment_body': ""```suggestion\r\nThe approach will be similar to [Kubernetes NFS Client Provisioner](https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client), where the provisioner mounts the whole of NFS share/export into the provisioner pod (by kubelet), so that the provisioner can then create the appropriate sub-directory for each provisioned PV. Currently Rook NFS Provisioner is deployed independently and before the NFS Server itself, so we cannot mount the NFS share because we don't know the NFS Server IP or the share/export directory. \r\n```"", 'comment_created': datetime.datetime(2020, 8, 3, 21, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 464675947, 'comment_body': '```suggestion\r\nThe idea is to make NFS Provisioner controlled by the operator. So when an NFS Server is created, the operator also then creates its provisioner, which mounts each NFS share/export. Then, the NFS Provisioner can create a sub-directory for each provisioned PV.\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 21, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 464677033, 'comment_body': '```suggestion\r\nThe provisioner deployment will be created in the same namespace as the NFS server and with the same privileges. Since the provisioner is automatically created by the operator, the provisioner deployment name and provisioner name flag (`--provisioner`) value will depend on NFSServer name. The provisioner deployment name will have an added suffix of `-provisioner` and the provisioner name will start with `nfs.rook.io/`.\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 21, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 464677460, 'comment_body': '```suggestion\r\nThe other possible approach is NFS Provisioner mounts the NFS Server share manually (by executing `mount` command) before creating an appropriate directory for each PV. But in my humble opinion, NFS Provisioner would be lacking reliability under several conditions like NFSServer getting its exports updated, the cluster has two or more NFSServer, etc.\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 21, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 464797464, 'comment_body': 'We create sub-directory for every PV. I think i need to edit this sentence. thanks!', 'comment_created': datetime.datetime(2020, 8, 4, 4, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}]","[{'commit_sha': 'f3352d44de29ac8fe34f2495a1bc9bfec1f4fc91', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}]",Ahmad Nurus S.,43454825,,User,,61,,24,24
446085584,nfs: fix nfs issue on openshift,"Signed-off-by: Ahmad Nurus S <prksu.sh@gmail.com>

<!-- Please take a look at our [Contributing](https://rook.io/docs/rook/master/development-flow.html)
documentation before submitting a Pull Request!
Thank you for contributing to Rook! -->

**Description of your changes:**
This PR fix nfs issue on openshift

**Which issue is resolved by this Pull Request:**
Resolves #2721

**Checklist:**

- [x] **Commit Message Formatting**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [ ] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [ ] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [x] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [ ] Code generation (`make codegen`) has been run to update object specifications, if necessary.

[test nfs]",True,5785,https://api.github.com/repos/rook/rook/pulls/5785,https://github.com/rook/rook/pull/5785,closed,106,1,6,1,0,12,0,0,[],2020-07-08 08:36:21+00:00,2020-07-14 17:06:48+00:00,549027.0,"6 days, 8:30:27","[{'comment_id': 452993833, 'comment_body': 'nit: A shorter title is preferred. You can put ""Required for Openshift"" in the paragraph.\r\n```suggestion\r\n## Create Openshift Security Context Constraints\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 18, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 452996362, 'comment_body': ""Instead of adding the serivce account name to the CR settings, I would recommend just requiring the service account with a specific name such as `rook-nfs-server`. In the ceph provider we also make assumptions on the service account names rather than exposing them as settings. We just haven't found it necessary."", 'comment_created': datetime.datetime(2020, 7, 10, 18, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 452996488, 'comment_body': '```suggestion\r\n\t\t\t\t\tServiceAccountName: ""rook-nfs-server"",\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 18, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 452997019, 'comment_body': 'A service account will typically need cluster bindings or cluster role bindings to grant privileges. In this case, does the service account only require the SCC privs?', 'comment_created': datetime.datetime(2020, 7, 10, 18, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 453425247, 'comment_body': 'aright, this service account is only for scc.', 'comment_created': datetime.datetime(2020, 7, 13, 4, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 453425338, 'comment_body': 'updated, thanks!', 'comment_created': datetime.datetime(2020, 7, 13, 4, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 453426361, 'comment_body': ""make sense, if so i would prefer the `default` service account instead of creating a new service account since it's already scoped by namespace. what do you think @travisn "", 'comment_created': datetime.datetime(2020, 7, 13, 4, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 454507769, 'comment_body': 'Consider adding ""(Optional)"" to the end of this section header, similar to how we do for the preceding section of ""Deploy NFS Admission Webhook (Optional)"", to help people understand they don\'t have to do this section', 'comment_created': datetime.datetime(2020, 7, 14, 17, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 454509677, 'comment_body': ""I would also add language here to make it clear that folks ONLY need to do this for OpenShift and that they can skip to the next section if they aren't running OpenShift.  Consider adding a link that they can click and jump to the next section.\r\n\r\nSuggested text:\r\n\r\nOn OpenShift clusters, we will need to create some additional security context constraints.  If you are **not** running in OpenShift you can skip this and go to the [next section](/FILL_IN_LINK_TO_NEXT_SECTION.md).\r\n\r\nTo create the security context constraints for nfs-server pods, we can use the following yaml, which is also found in `scc.yaml` under `/cluster/examples/kubernetes/nfs`.\r\n"", 'comment_created': datetime.datetime(2020, 7, 14, 17, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 454511477, 'comment_body': 'will this example work for both cases where the user is on OpenShift and on vanilla upstream k8s?', 'comment_created': datetime.datetime(2020, 7, 14, 17, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 454513795, 'comment_body': 'Do you think this is the right approach to hard code the service account name within the operator?  If a user modifies the example yamls to use a different service account name besides ""rook-nfs-server"", then this operator will be telling the pods to use a service account that doesn\'t exist, right?\r\n\r\nit looks like we were taking in the service account name via a spec field on the NFSServer object...should we just use that field still, so that it\'s entirely within the user\'s control to keep in sync the name of the service account that is **created** and the name of the service account that is **used**?', 'comment_created': datetime.datetime(2020, 7, 14, 17, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 454517004, 'comment_body': ""In [this comment](https://github.com/rook/rook/pull/5785#discussion_r452996362) I pointed out that in the ceph operator we haven't found it necessary to configure the service account name, so you can blame me if you disagree. :)"", 'comment_created': datetime.datetime(2020, 7, 14, 17, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}]","[{'commit_sha': '1659687d3738e684eac49d91fddda8cef7d350b2', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}]",Ahmad Nurus S.,43454825,,User,,61,,24,24
433842508,nfs: implement controller-runtime in nfs operator,"Signed-off-by: Ahmad Nurus S <prksu.sh@gmail.com>

<!-- Please take a look at our [Contributing](https://rook.io/docs/rook/master/development-flow.html)
documentation before submitting a Pull Request!
Thank you for contributing to Rook! -->

**Description of your changes:**

This PR to implement controller-runtime in nfs operator.

design #5567

**Which issue is resolved by this Pull Request:**
Resolves #4950

**Checklist:**

- [x] **Commit Message Formatting**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [ ] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [ ] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [x] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [x] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [x] Code generation (`make codegen`) has been run to update object specifications, if necessary.

[test nfs]",True,5650,https://api.github.com/repos/rook/rook/pulls/5650,https://github.com/rook/rook/pull/5650,closed,1840,707,22,4,3,41,0,0,[],2020-06-12 19:10:16+00:00,2020-07-03 09:15:35+00:00,1778719.0,"20 days, 14:05:19","[{'comment_id': 443415887, 'comment_body': '```suggestion\r\nInstall cert-manager (if not installed yet). You can install cert-manager as like in the cert-manager [installation](https://cert-manager.io/docs/installation/kubernetes/) documentation. Or simply\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 9, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 443424111, 'comment_body': '`ValidateUpdate` will also register a webhook?\r\nthis comment is similar to the comment for `ValidateCreate` in line 44.', 'comment_created': datetime.datetime(2020, 6, 22, 9, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 443424293, 'comment_body': 'this comment is similar to the comment for ValidateCreate in line 44.', 'comment_created': datetime.datetime(2020, 6, 22, 9, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 443425762, 'comment_body': '```suggestion\r\n\t\terrList := field.ErrorList{}\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 443428347, 'comment_body': '```suggestion\r\n\t\terrList := field.ErrorList{}\r\n```', 'comment_created': datetime.datetime(2020, 6, 22, 9, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 443438345, 'comment_body': 'Can we move the functions that generate spec to a new file called spec.go', 'comment_created': datetime.datetime(2020, 6, 22, 9, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 443439692, 'comment_body': 'Unit tests needs to be added.', 'comment_created': datetime.datetime(2020, 6, 22, 9, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 444268501, 'comment_body': ""initially i planned to add unit test as follow up later, but if needed as part of this PR i'll add the unit test soon"", 'comment_created': datetime.datetime(2020, 6, 23, 14, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 444268892, 'comment_body': 'updated, thanks!', 'comment_created': datetime.datetime(2020, 6, 23, 14, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 444269147, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 6, 23, 14, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 444269276, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 6, 23, 14, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 444711347, 'comment_body': 'i recommend adding a sentence about ""why"" the user would want to do this.  This is likely their first introduction into what to do with NFS and how to use it, so we should give them some information on why they would want to install the webhook (what benefits does it provide them?)', 'comment_created': datetime.datetime(2020, 6, 24, 7, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 444719677, 'comment_body': ""This is another location where we are defining a CRD, so we should make sure it's consistent with the other locations we define it too.  This is just for tests, but it's good to be consistent all around.\r\n\r\nI make this comment specifically thinking about the suggestion I gave to add the AGE printer column :)"", 'comment_created': datetime.datetime(2020, 6, 24, 8, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 444724897, 'comment_body': '```suggestion\r\nFirst, ensure that `cert-manager` is installed.  If it is not installed yet, you can install it as described in the `cert-manager` [installation](https://cert-manager.io/docs/installation/kubernetes/) documentation. Alternatively, you can simply just run the single command below:\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 8, 19, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 444725527, 'comment_body': '```suggestion\r\nThis will easily get the latest version (`v0.15.1`) of `cert-manager`  installed. After that completes, make sure the cert-manager component deployed properly and is in the `Running` status:\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 8, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 444725785, 'comment_body': '```suggestion\r\nOnce `cert-manager` is running, you can now deploy the NFS webhook:\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 8, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 444727615, 'comment_body': 'did you add this manually, i.e. it was not generated from kubebuilder directives?\r\n\r\ni have found that when you add additionalPrinterColumns, you lose the default Age column which is a useful one.  If we are specifying these by hand here, I recommend adding this one too:\r\n\r\n```\r\n - JSONPath: .metadata.creationTimestamp\r\n    name: AGE\r\n    type: date\r\n```\r\n\r\nIf we are generating these, then a kubebuilder directive can be added to types.go like so:\r\n```\r\n// +kubebuilder:printcolumn:name=""AGE"",type=""date"",JSONPath="".metadata.creationTimestamp""\r\n```\r\n\r\nThis same comment applies to any place we are defining CRDs, we should have consistent printer columns no matter where the CRD is defined/installed from.', 'comment_created': datetime.datetime(2020, 6, 24, 8, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 444728750, 'comment_body': 'similarly, was this open API v3 schema created by hand, or generated with kubebuilder directives? ', 'comment_created': datetime.datetime(2020, 6, 24, 8, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 444730667, 'comment_body': 'help remind me why the provisioner moved into its own deployment, i forgot üòä ', 'comment_created': datetime.datetime(2020, 6, 24, 8, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 444793528, 'comment_body': ""actually this is generated using [controller-gen](https://github.com/kubernetes-sigs/controller-tools/tree/master/cmd/controller-gen) and also i use kubebuilder markers but i remove it after this is generated.\r\n\r\nyeah, i just realized the default Age column was gone after additionalPrinterColumns added (i've reproduced this one). I'll adding Age as additionalPrinterColumns.\r\n\r\nI'll also keep kubebuilder markers (eg: validation, subresource, printcolumn) instead removing it, what do you think @jbw976 ?"", 'comment_created': datetime.datetime(2020, 6, 24, 10, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 444825625, 'comment_body': '+1', 'comment_created': datetime.datetime(2020, 6, 24, 11, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ashishranjan738', 'type': 'User'}, {'comment_id': 444839835, 'comment_body': 'A key/value list of annotations', 'comment_created': datetime.datetime(2020, 6, 24, 11, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ashishranjan738', 'type': 'User'}, {'comment_id': 444908247, 'comment_body': 'i just want to separate this from operator manifest :grinning: should i bring back to operator manifest as before?', 'comment_created': datetime.datetime(2020, 6, 24, 13, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 444911272, 'comment_body': 'updated, thanks!', 'comment_created': datetime.datetime(2020, 6, 24, 13, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 446130022, 'comment_body': 'consider also updating the below section to include the new state column:\r\n\r\n```\r\n> kubectl -n rook-nfs get nfsservers.nfs.rook.io\r\nNAME       AGE   STATE\r\nrook-nfs   32s   Running\r\n```', 'comment_created': datetime.datetime(2020, 6, 26, 11, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 446134469, 'comment_body': 'Also add an instruction that explicitly tells the user to create the storage class file, e.g.:\r\n```\r\n> k apply -f sc.yaml\r\n```\r\n\r\nnote an instruction is also needed that tells them to save it to a file called sc.yaml', 'comment_created': datetime.datetime(2020, 6, 26, 11, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 446255492, 'comment_body': ""noted, i'll update it"", 'comment_created': datetime.datetime(2020, 6, 26, 15, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 446627501, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 6, 28, 9, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 446627589, 'comment_body': 'updated, thanks', 'comment_created': datetime.datetime(2020, 6, 28, 9, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 446627601, 'comment_body': 'updated, thanks', 'comment_created': datetime.datetime(2020, 6, 28, 9, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 446627683, 'comment_body': ""@rohan47 @jbw976 \r\ni've just added new commit for unit test"", 'comment_created': datetime.datetime(2020, 6, 28, 9, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 446628986, 'comment_body': 'answered in this conversation https://github.com/rook/rook/pull/5650#discussion_r444793528', 'comment_created': datetime.datetime(2020, 6, 28, 9, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 446629196, 'comment_body': 'already added AGE column and also i keep kubebuilder markers there instead of removing it.\r\n\r\nit can be generated with this command\r\n```\r\ncontroller-gen paths=./pkg/apis/nfs.rook.io/... crd:trivialVersions=true output:stdout\r\n```', 'comment_created': datetime.datetime(2020, 6, 28, 9, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 446629581, 'comment_body': 'addressed https://github.com/rook/rook/pull/5650#discussion_r446629196', 'comment_created': datetime.datetime(2020, 6, 28, 10, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 448466452, 'comment_body': 'already added, thanks', 'comment_created': datetime.datetime(2020, 7, 1, 16, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 448470165, 'comment_body': 'we can have a helper function that can generate `nfsv1alpha1.NFSServer{}` and update the Exports.', 'comment_created': datetime.datetime(2020, 7, 1, 16, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 448470502, 'comment_body': 'we can get this list using a helper function.', 'comment_created': datetime.datetime(2020, 7, 1, 16, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 448824788, 'comment_body': 'addressed, thanks @rohan47 ', 'comment_created': datetime.datetime(2020, 7, 2, 8, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 449384963, 'comment_body': ""This change reverts the version of `lib-bucket-provisioner` to an older commit from back in January.  Can you remove this change, run `go mod tidy` and rebuild? I don't think we want to change this library version to an older version unless there's a good reason that we understand."", 'comment_created': datetime.datetime(2020, 7, 3, 5, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 449427176, 'comment_body': 'seem it was conflict with this commit https://github.com/rook/rook/commit/e4fae54e3c24917e437f6fe850cea8b8b1fe2a03 before and i missed when rebasing my commit. fixed now. thanks @jbw976 ', 'comment_created': datetime.datetime(2020, 7, 3, 7, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 449474899, 'comment_body': 'ah, thanks for fixing that!', 'comment_created': datetime.datetime(2020, 7, 3, 9, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}]","[{'commit_sha': 'f7f8270f58d801cae9c30bdabb0622e1b2f17a57', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90da5ec7b9f805bc4a3525086eabb001f2c568fa', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd324f15ec473df34875708a6daa72aa54bdc454d', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441e5edc331480a1fd176934c0abda5995ed3295', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}]",Ahmad Nurus S.,43454825,,User,,61,,24,24
425198846,design: nfs operator using controller-runtime,"This commit is adding a design to implement controller-runtime in nfs operator

Signed-off-by: Ahmad Nurus S <prksu.sh@gmail.com>

<!-- Please take a look at our [Contributing](https://rook.io/docs/rook/master/development-flow.html)
documentation before submitting a Pull Request!
Thank you for contributing to Rook! -->

**Description of your changes:**

Add design to implement controller-runtime in NFS operator

**Which issue is resolved by this Pull Request:**
Resolves #

**Checklist:**

- [ ] **Commit Message Formatting**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [ ] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [ ] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [ ] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [ ] Code generation (`make codegen`) has been run to update object specifications, if necessary.

[skip ci]",True,5567,https://api.github.com/repos/rook/rook/pulls/5567,https://github.com/rook/rook/pull/5567,closed,181,0,3,1,3,15,0,0,[],2020-05-29 16:20:57+00:00,2020-06-15 19:05:50+00:00,1478693.0,"17 days, 2:44:53","[{'comment_id': 435826480, 'comment_body': 'The CRD design and the deployment process is going to be same right?\r\nIf yes then add a line stating that.', 'comment_created': datetime.datetime(2020, 6, 5, 10, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rohan47', 'type': 'User'}, {'comment_id': 436919529, 'comment_body': 'I just updated this section. please take a look. thanks!', 'comment_created': datetime.datetime(2020, 6, 8, 18, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 437470277, 'comment_body': 'To provide more useful context, we could link to the WatchCR function definition.  That way people will be able to easily click and see what is being referred to.\r\n\r\nhttps://github.com/rook/rook/blob/release-1.3/pkg/operator/k8sutil/customresource.go#L48', 'comment_created': datetime.datetime(2020, 6, 9, 14, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 437471899, 'comment_body': ""Let's link this first mention in this paragraph of controller-runtime to it's source repo, for easy access/context.\r\n\r\nhttps://github.com/kubernetes-sigs/controller-runtime"", 'comment_created': datetime.datetime(2020, 6, 9, 14, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 437475576, 'comment_body': 'i think the components and flow for validation, certificate management, webhook server, etc. are complicated enough to deserve an architecture diagram.  Can you add a simple block diagram that shows the components involved and how they interact?\r\n\r\nConsider in this diagram:\r\n* what components are involved? NFS operator, cert manager, a certificate CR, the webhook server (and its deployment/service)\r\n* what namespaces are they running in? does the webhook server run in the same namespace as the operator? Does certmanager run in that same namespace too?\r\n* what is the flow of objects through these components? \r\n\r\nI like to use draw.io, which is apparently now https://app.diagrams.net/, to make free and simple arch diagrams.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 437476254, 'comment_body': ""is this value `Cg==` special? i think you're saying it gets replaced because of `inject-ca-from` annotation, so does its value matter?"", 'comment_created': datetime.datetime(2020, 6, 9, 14, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 437478139, 'comment_body': 'What will the new installation experience look like if they want to include validation (and all its webhook/cert stuff) too? i.e. what will the new commands to deploy NFS look like, compared to the current installation experience at https://rook.io/docs/rook/v1.3/nfs.html?\r\n\r\nListing out the commands we expect the user to have to run will be very useful for understanding the new experience.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 437479967, 'comment_body': ""one of the things i'm particularly interested in is how this effort to get webhooks working for NFS can also be reused and leveraged for other storage providers in Rook.  Is there general (reusable) functionality, helpers, documentation, etc. that we can provide as part of this effort for NFS that will also be helpful for all the the other storage providers to simply reuse and not have to solve the same problem again that we are solving here for NFS?\r\n\r\nThis makes Rook all the more strong as a *framework* for multiple providers :)"", 'comment_created': datetime.datetime(2020, 6, 9, 14, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 437482146, 'comment_body': ""This is good to know that the reconciler logic doesn't require any deployment experience changes.  The same isn't true for the webhook stuff, so maybe we can clarify this sentence a bit:\r\n\r\n> Since this controller-runtime based reconciler implementation only changes the logic of the controller, the deployment process for the basic NFS operator will be like the current implementation.  If the user chooses to also install the optional validation webhook described in the next section, the deployment process will contain new steps to follow."", 'comment_created': datetime.datetime(2020, 6, 9, 14, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jbw976', 'type': 'User'}, {'comment_id': 438073517, 'comment_body': 'no, that value is no matter. it can be any value or even missing. cert-manager will still replace the value with the appropriate certificate authority\r\nref: https://cert-manager.io/docs/concepts/ca-injector/\r\n', 'comment_created': datetime.datetime(2020, 6, 10, 12, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 438217059, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 6, 10, 15, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 438217250, 'comment_body': 'updated', 'comment_created': datetime.datetime(2020, 6, 10, 15, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 438248109, 'comment_body': ""yeah, it's very possible to also implement admission webhooks similar to this implementation for other storage providers. since controller-runtime already provides anything stuff to create an admission webhook server. The thing that we need is:\r\n1. Provide a valid TLS certificate (can be done using cert-manager)\r\n1. Create *ValidatingWebhookConfiguration* or (and) *MutatingWebhookConfiguration* with the trusted certificate (can be done using cert-manager ca injector) and correct client config service path as controller-runtime [served](https://github.com/kubernetes-sigs/controller-runtime/blob/eb68324729c03f54d1ca49ee38ea0b56a5137e09/pkg/builder/webhook.go#L159-L167)  \r\n1. Construct controller-runtime webhook using [WebhookBuilder](https://godoc.org/sigs.k8s.io/controller-runtime/pkg/builder#WebhookBuilder)\r\n1. Implement [Validator](https://godoc.org/sigs.k8s.io/controller-runtime/pkg/webhook/admission#Validator) or (and) [Defaulter](https://godoc.org/sigs.k8s.io/controller-runtime/pkg/webhook/admission#Defaulter) interface that contains our logic to validate or (and) defaulting or doing other stuff.\r\n1. Deploy webhook-server (can be deployed alongside with the operator or standalone) with a certificate created by cert-manager and expose a service with https port (443). Controller runtime looking the certificate inside `/tmp/k8s-webhook-server/serving-certs` directory by default."", 'comment_created': datetime.datetime(2020, 6, 10, 16, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 438251648, 'comment_body': 'already added, thanks :grin: ', 'comment_created': datetime.datetime(2020, 6, 10, 16, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 438264632, 'comment_body': 'updated, thanks', 'comment_created': datetime.datetime(2020, 6, 10, 16, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}]","[{'commit_sha': 'f5f64848690603bec1cd8b89934510b9f79f4e4c', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}]",Ahmad Nurus S.,43454825,,User,,61,,24,24
422825227,design: rename nfs object kind,"<!-- Please take a look at our [Contributing](https://rook.io/docs/rook/master/development-flow.html)
documentation before submitting a Pull Request!
Thank you for contributing to Rook! -->

**Description of your changes:**
This commit rename nfs object kind with actually implemented name `NFSServer`
instead of `NetworkFileSystem`. This commit also fix some bad url.

Signed-off-by: Ahmad Nurus S. <prksu.sh@gmail.com>

**Checklist:**

- [x] **CommitLint Bot**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [x] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [x] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [x] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [ ] Code generation (`make codegen`) has been run to update object specifications, if necessary.

[skip ci]",True,5541,https://api.github.com/repos/rook/rook/pulls/5541,https://github.com/rook/rook/pull/5541,closed,4,4,1,1,4,0,0,0,[],2020-05-25 16:29:59+00:00,2020-06-05 05:38:31+00:00,911312.0,"10 days, 13:08:32",[],"[{'commit_sha': '714d654ec48f1439b3ac6991fbd5fb6a634e26db', 'committer_username': 'prksu', 'committer_name': 'Ahmad Nurus S.', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 20, 21, 10, 20, tzinfo=datetime.timezone.utc)}]",Ahmad Nurus S.,43454825,,User,,61,,24,24
432568561,nfs: changing the loglevel into INFO,"Reopen PR 5554, because I picked the wrong branch to PR into.

Implementing the changes @prksu mentioned in #4259

tested and build in docker aberfeldy/nfs:ganesha-fix

Signed-off-by: Andreas Feldmann an.feldmann@googlemail.com

Description of your changes:
implementing the changes @prksu mentioned regarding the memory leak of the nfs server

Which issue is resolved by this Pull Request:
Resolves #4259
**Description of your changes:**

**Which issue is resolved by this Pull Request:**
Resolves #

**Checklist:**

- [ ] **Commit Message Formatting**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [ ] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [ ] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [ ] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [ ] Code generation (`make codegen`) has been run to update object specifications, if necessary.
",True,5637,https://api.github.com/repos/rook/rook/pulls/5637,https://github.com/rook/rook/pull/5637,closed,1,2,1,1,2,0,0,0,[],2020-06-10 16:25:54+00:00,2020-06-11 16:57:09+00:00,88275.0,"1 day, 0:31:15",[],"[{'commit_sha': '05cfbf3dda277c635f98636aa459f966f4cd7d92', 'committer_username': 'aberfeldy', 'committer_name': 'Andreas Feldmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 13, 14, 27, 18, tzinfo=datetime.timezone.utc)}]",Andreas Feldmann,1640534,,User,,3,,4,4
423804572,nfs: changed cmd run,"implementing the changes @prksu mentioned in #4259

tested and build in docker aberfeldy/nfs:ganesha-fix

Signed-off-by: Andreas Feldmann <an.feldmann@googlemail.com>


**Description of your changes:**
implementing the changes @prksu mentioned regarding the memory leak of the nfs server 


**Which issue is resolved by this Pull Request:**
Resolves #4259

**Checklist:**

- [ ] **CommitLint Bot**: Commit titles and messages follow guidelines in the [developer guide](https://rook.io/docs/rook/master/development-flow.html#commit-structure).
- [ ] **Skip Tests for Docs**: Add the flag for skipping the build if this is only a documentation change. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for the flag.
- [ ] **Skip Unrelated Tests**: Add a flag to run tests for a specific storage provider. See [test options](https://github.com/rook/rook/blob/master/INSTALL.md#test-storage-provider).
- [ ] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [ ] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [ ] Code generation (`make codegen`) has been run to update object specifications, if necessary.
",True,5554,https://api.github.com/repos/rook/rook/pulls/5554,https://github.com/rook/rook/pull/5554,closed,1,2,1,1,2,4,0,0,[],2020-05-27 12:04:30+00:00,2020-06-10 15:25:11+00:00,1221641.0,"14 days, 3:20:41","[{'comment_id': 431581965, 'comment_body': 'IMO more cleaner approach is to change the log level using `ganeshaOptions` see lineno 28, set `ganeshaOptions = NIV_INFO`\r\n', 'comment_created': datetime.datetime(2020, 5, 28, 4, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'thotz', 'type': 'User'}, {'comment_id': 432331991, 'comment_body': 'make sense', 'comment_created': datetime.datetime(2020, 5, 29, 8, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 432333787, 'comment_body': ""since we already set debug level to `NIV_INFO`, i think it's safe now to use `CombineOutput` function"", 'comment_created': datetime.datetime(2020, 5, 29, 8, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 433673922, 'comment_body': '@aberfeldy can you please address this one?', 'comment_created': datetime.datetime(2020, 6, 2, 7, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}]","[{'commit_sha': 'fc0fb2c65789b97a0b2bf7e4b373ff40cbfc6a7f', 'committer_username': 'aberfeldy', 'committer_name': 'Andreas Feldmann', 'committer_email': None, 'commit_date': datetime.datetime(2012, 4, 13, 14, 27, 18, tzinfo=datetime.timezone.utc)}]",Andreas Feldmann,1640534,,User,,3,,4,4
391979734,convert the CockroachDB controller to the controller-runtime,"<!-- Please take a look at our [Contributing](https://rook.io/docs/rook/master/development-flow.html)
documentation before submitting a Pull Request!
Thank you for contributing to Rook! -->

**Description of your changes:**

This PR replaces CockroachDB cluster controller with the new controller-runtime
framework.
Although it's not directly related to this PR, I think we had better to implement `cockroachdb client` as with other controllers related to Ceph in the future to easily handle CockroachDB components.

**Which issue is resolved by this Pull Request:**
- https://github.com/rook/rook/issues/4942

**Checklist:**

- [x] Reviewed the developer guide on [Submitting a Pull Request](https://rook.io/docs/rook/master/development-flow.html#submitting-a-pull-request)
- [ ] Documentation has been updated, if necessary.
- [x] Unit tests have been added, if necessary.
- [ ] Integration tests have been added, if necessary.
- [ ] Pending release notes updated with breaking and/or notable changes, if necessary.
- [ ] Upgrade from previous release is tested and upgrade user guide is updated, if necessary.
- [x] Code generation (`make codegen`) has been run to update object specifications, if necessary.
- [x] Comments have been added or updated based on the standards set in [CONTRIBUTING.md](https://github.com/rook/rook/blob/master/CONTRIBUTING.md#comments)
- [ ] Add the flag for skipping the CI if this PR does not require a build. See [here](https://github.com/rook/rook/blob/master/INSTALL.md#skip-ci) for more details.

[test cockroachdb]",False,5064,https://api.github.com/repos/rook/rook/pulls/5064,https://github.com/rook/rook/pull/5064,closed,630,228,9,2,5,3,0,0,[],2020-03-22 09:52:29+00:00,2020-08-03 09:15:48+00:00,11575399.0,"133 days, 23:23:19","[{'comment_id': 429327937, 'comment_body': '`controller-runtime` have utility for doing create or update object [controllerutil.CreateOrUpdate](https://github.com/kubernetes-sigs/controller-runtime/blob/a2d55b5721ce735d0f43f955bf83df87db2ce1fe/pkg/controller/controllerutil/controllerutil.go#L192)\r\nis it possible to implement that? although in this PR we have not implemented the update yet, but in my opinion, we will be fine if use that utility.', 'comment_created': datetime.datetime(2020, 5, 22, 15, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 429330981, 'comment_body': ""why this line commented? if we don't need finalizer we don't have to remove the finalizer after the cluster is removed right?"", 'comment_created': datetime.datetime(2020, 5, 22, 16, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 429332303, 'comment_body': 'https://github.com/rook/rook/blob/ab8e6d26856338da7e52516aaea2563e2ca98aa4/pkg/operator/cockroachdb/cluster/controller.go#L160-L163', 'comment_created': datetime.datetime(2020, 5, 22, 16, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}]","[{'commit_sha': '8d1d343a85c8c0531fa391b99d2945d4c5db0941', 'committer_username': 'moricho', 'committer_name': 'morito', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 10, 4, 50, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab8e6d26856338da7e52516aaea2563e2ca98aa4', 'committer_username': 'moricho', 'committer_name': 'morito', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 10, 4, 50, 26, tzinfo=datetime.timezone.utc)}]",morito,20941064,,User,,23,,11,23
390592379,ceph: Adding support for admission controllers,"**Description of your changes:**
Adds various scripts and code changes to deploy admission controllers alongside rook. 

**What are admission controllers**
Admission controllers help in validating the CRDs at native kubernetes  level, accepting or rejecting an api request based on our custom criteria

For example, The PR here attempts to provide solution for one of the issues mentioned in  https://github.com/rook/rook/issues/4819

**Cannot change the dataDirHostPath after initial creation**

Our webhooks have the logic defined in them to to continuously check if an api request is an update for an existing ceph cluster and validates if the dataDirHostPath has been changed or not. 

If it has been changed from initial creation, it will reject the request and throw the below error

`for: ""cluster.yaml"": admission webhook ""webhook-server.rook-ceph.svc"" denied the request: Invalid Update : DataDirHostPath change from /var/lib/rook to /var/rook is not allowed
`


More such validations can be applied for any kind of resource

**How to test this PR** 
1. Clone
2. Create any cluster
3. Run the following commands
```
kubectl create -f common.yaml
./config-admission-controllers.sh
```
4. Now that the secrets have been deployed, we can deploy the operator and create a cluster using the following commands
```
kubectl create -f operator.yaml
kubectl create -f cluster.yaml
```
5. The operator on detecting the secrets will deploy the admission controllers and start listening for all validations
6. Make changes to cluster.yaml in spec.datadirhostpath 
  `kubectl apply -f cluster.yaml`

On doing all the above, we could see the request being rejected.

**Which issue is resolved by this Pull Request:**
https://github.com/rook/rook/issues/2363
https://github.com/rook/rook/issues/4819

[test ceph]",True,5045,https://api.github.com/repos/rook/rook/pulls/5045,https://github.com/rook/rook/pull/5045,closed,1088,19,27,1,14,624,2,0,"[{'name': 'feature'}, {'name': 'ceph'}]",2020-03-18 18:15:24+00:00,2020-06-25 15:56:40+00:00,8545276.0,"98 days, 21:41:16","[{'comment_id': 394893715, 'comment_body': ""This should use rook's quay account. "", 'comment_created': datetime.datetime(2020, 3, 19, 9, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394895748, 'comment_body': 'If this is not needed, remove it?', 'comment_created': datetime.datetime(2020, 3, 19, 9, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394898440, 'comment_body': '???', 'comment_created': datetime.datetime(2020, 3, 19, 9, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394898625, 'comment_body': '???', 'comment_created': datetime.datetime(2020, 3, 19, 9, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394899220, 'comment_body': ""This needs to be configurable and defaulted. Let's not hard code."", 'comment_created': datetime.datetime(2020, 3, 19, 9, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394901369, 'comment_body': 'We could use helpers to reduce redundant code below.', 'comment_created': datetime.datetime(2020, 3, 19, 9, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394901666, 'comment_body': 'What does this do? Please add appropriate comments.', 'comment_created': datetime.datetime(2020, 3, 19, 9, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394906065, 'comment_body': 'Will this data be persisted? If so, where?\r\nWhat happens in case of multiple Ceph Cluster?', 'comment_created': datetime.datetime(2020, 3, 19, 9, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394907007, 'comment_body': 'Add comments about what we are trying to validate.\r\nAnd, keep each validation in a separate function. Should be idempotent.', 'comment_created': datetime.datetime(2020, 3, 19, 9, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394907578, 'comment_body': 'Do not use special symbols in error logs.\r\nTry to give more context about the error as this will be sent back to user.', 'comment_created': datetime.datetime(2020, 3, 19, 9, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394908443, 'comment_body': 'Add this file under proper directory for Ceph manifests.', 'comment_created': datetime.datetime(2020, 3, 19, 9, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394909038, 'comment_body': 'do not use personal registry.', 'comment_created': datetime.datetime(2020, 3, 19, 9, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394909338, 'comment_body': 'Should be configurable?', 'comment_created': datetime.datetime(2020, 3, 19, 9, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394909726, 'comment_body': 'Move it under ceph directory.', 'comment_created': datetime.datetime(2020, 3, 19, 9, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394910116, 'comment_body': 'Move it under ceph directory.', 'comment_created': datetime.datetime(2020, 3, 19, 9, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394910227, 'comment_body': 'Move it under ceph directory.', 'comment_created': datetime.datetime(2020, 3, 19, 9, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394910375, 'comment_body': '```suggestion\r\n  name: rook-ceph-webhook\r\n```', 'comment_created': datetime.datetime(2020, 3, 19, 10, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394910754, 'comment_body': '???', 'comment_created': datetime.datetime(2020, 3, 19, 10, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394911329, 'comment_body': 'Remove it?', 'comment_created': datetime.datetime(2020, 3, 19, 10, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 394982273, 'comment_body': 'After logging the error, we have to return (or exit with an error code) from the main function', 'comment_created': datetime.datetime(2020, 3, 19, 12, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aruniiird', 'type': 'User'}, {'comment_id': 395435279, 'comment_body': 'Should we be creating a new directory in the root folder ? or adding it in cluster/examples/kubernetes/ceph', 'comment_created': datetime.datetime(2020, 3, 20, 4, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396517761, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396517884, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396517947, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396518005, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396518346, 'comment_body': 'Removed as it is no longer required.', 'comment_created': datetime.datetime(2020, 3, 23, 15, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396518479, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396518565, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396518638, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396518723, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396518887, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2020, 3, 23, 15, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396519113, 'comment_body': 'Added to exit with an error code', 'comment_created': datetime.datetime(2020, 3, 23, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396520721, 'comment_body': 'Added more helper funcs to make it cleaner and readable. ', 'comment_created': datetime.datetime(2020, 3, 23, 15, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396521015, 'comment_body': 'Added comments and helper funcs for readability. Let me know if anything is needed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396521445, 'comment_body': 'Changed the logic to fetch an existing ceph cluster and compare it to the updated one. Please check description in PR', 'comment_created': datetime.datetime(2020, 3, 23, 15, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396522291, 'comment_body': 'Separated validation into separate funcs.', 'comment_created': datetime.datetime(2020, 3, 23, 15, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396522730, 'comment_body': 'Changed the error message to show it is an invalid update and what is being changed.', 'comment_created': datetime.datetime(2020, 3, 23, 15, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396522880, 'comment_body': 'Added under ceph directory ', 'comment_created': datetime.datetime(2020, 3, 23, 15, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396522989, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396523698, 'comment_body': 'TODO.... Can we have the configurability in a separate PR later on ?', 'comment_created': datetime.datetime(2020, 3, 23, 15, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396523808, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 3, 23, 15, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 396987742, 'comment_body': 'unnecessary empty line', 'comment_created': datetime.datetime(2020, 3, 24, 8, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396988284, 'comment_body': 'What about merging all `.yaml` for admission controller into this one?', 'comment_created': datetime.datetime(2020, 3, 24, 8, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396988844, 'comment_body': 'unnecessary empty line\r\n\r\n', 'comment_created': datetime.datetime(2020, 3, 24, 8, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396988933, 'comment_body': 'unnecessary empty lines', 'comment_created': datetime.datetime(2020, 3, 24, 8, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396989034, 'comment_body': 'unnecessary empty lines', 'comment_created': datetime.datetime(2020, 3, 24, 8, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396989091, 'comment_body': 'unnecessary empty lines', 'comment_created': datetime.datetime(2020, 3, 24, 8, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396989156, 'comment_body': 'unnecessary empty lines', 'comment_created': datetime.datetime(2020, 3, 24, 8, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396989883, 'comment_body': 'missing header', 'comment_created': datetime.datetime(2020, 3, 24, 8, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396990170, 'comment_body': 'header', 'comment_created': datetime.datetime(2020, 3, 24, 8, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396990392, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 3, 24, 8, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 396992527, 'comment_body': 'What about having the validation logic into its own file like `validate.go`?', 'comment_created': datetime.datetime(2020, 3, 24, 8, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 397099192, 'comment_body': 'I thought it would be best to have the component files separated as some of the files are being modified in the script logic before being deployed. Let me know if a single would be a better approach ?', 'comment_created': datetime.datetime(2020, 3, 24, 12, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 397106098, 'comment_body': '`Please update the doc as well as the pending release note file.`\r\nCould you please point me towards these files ?', 'comment_created': datetime.datetime(2020, 3, 24, 12, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 397106543, 'comment_body': 'What do you mean by a header for these files ? Could you elaborate ?', 'comment_created': datetime.datetime(2020, 3, 24, 12, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 397175185, 'comment_body': ""Currently, we have a single file called `common.yaml` which has everything we need to create pre-requisite resources for the operator so I'd suggest we follow the same pattern. Also, for users, it's less file to inject."", 'comment_created': datetime.datetime(2020, 3, 24, 14, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 397175353, 'comment_body': 'The Rook header.', 'comment_created': datetime.datetime(2020, 3, 24, 14, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 397211460, 'comment_body': ""Instead of creating a new image, let's use the same `rook/ceph` image and start the pod with new arguments. Today the operator is started with `rook ceph operator`. The admission controller could be started with `rook ceph admissioncontroller`. This will cut down on the need to pull another image when starting the operator."", 'comment_created': datetime.datetime(2020, 3, 24, 14, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 397212720, 'comment_body': 'Instead of a new deployment, what if we start the admission controller as a sidecar to the operator? Then it can stay as an implementation detail of the operator rather than being exposed as another deployment/pod and we can also keep the RBAC simpler.', 'comment_created': datetime.datetime(2020, 3, 24, 14, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 397214880, 'comment_body': 'Does this mean we get the validating event every time a pod is created or updated? I thought we would only watch for the rook CRs.', 'comment_created': datetime.datetime(2020, 3, 24, 14, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 397221461, 'comment_body': ""This is a big enough feature that I'd ask that we have a [design doc](https://github.com/rook/rook/tree/master/design/ceph) to describe the overall approach. For example, here are some questions that need to be answered:\r\n- How will the admission controller be deployed? An operator side car?\r\n- Certificate management\r\n   - Deploying in a test env can work with a self signed cert?\r\n   - A cert must be deployed for this to work in production? How is it managed?\r\n- Can we always deploy the admission controller? Or should it be optional?"", 'comment_created': datetime.datetime(2020, 3, 24, 15, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 398078505, 'comment_body': '```suggestion\r\nCopyright 2020 The Rook Authors. All rights reserved.\r\n```', 'comment_created': datetime.datetime(2020, 3, 25, 18, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 398078655, 'comment_body': '```suggestion\r\nCopyright 2020 The Rook Authors. All rights reserved.\r\n```', 'comment_created': datetime.datetime(2020, 3, 25, 18, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 398078845, 'comment_body': 'need an empty line before the package name', 'comment_created': datetime.datetime(2020, 3, 25, 18, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 398078928, 'comment_body': 'need an empty line before the package name', 'comment_created': datetime.datetime(2020, 3, 25, 18, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 398079045, 'comment_body': 'need an empty line before the package name', 'comment_created': datetime.datetime(2020, 3, 25, 18, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 398079124, 'comment_body': '```suggestion\r\nCopyright 2020 The Rook Authors. All rights reserved.\r\n```', 'comment_created': datetime.datetime(2020, 3, 25, 18, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 398079199, 'comment_body': '```suggestion\r\nCopyright 2020 The Rook Authors. All rights reserved.\r\n```', 'comment_created': datetime.datetime(2020, 3, 25, 18, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 398079250, 'comment_body': 'need an empty line before the package name', 'comment_created': datetime.datetime(2020, 3, 25, 18, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 398085477, 'comment_body': 'added all resources in webhook.yaml', 'comment_created': datetime.datetime(2020, 3, 25, 18, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398085562, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398086293, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398086339, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398086454, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398086533, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398086714, 'comment_body': 'Thanks ! Added the headers ', 'comment_created': datetime.datetime(2020, 3, 25, 18, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398086805, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398086865, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398087210, 'comment_body': 'added validate.go for the further addition of validation logic', 'comment_created': datetime.datetime(2020, 3, 25, 18, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398087318, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398087386, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398087440, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398087478, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398087534, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398087586, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398087630, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398087674, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 3, 25, 18, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398088468, 'comment_body': 'Was testing the webhooks with pods. Have removed them. Webhook will now only look for  cephcluster resources. ', 'comment_created': datetime.datetime(2020, 3, 25, 18, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398097300, 'comment_body': '@travisn Thank you for your suggestions. I will test out the feasibility of using an argument to start the webhook pod.', 'comment_created': datetime.datetime(2020, 3, 25, 18, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 398099258, 'comment_body': ""@travisn , I initially thought the webhook to be a separate pluggable (optional) component to our rook operator so people could add their own custom validations if needed be.On the optimization/RBAC side, it is definitely a plus but If we add the the container as a side-car; Would'nt that make it a mandatory component alonside rook. Please let me know your thoughts on this...."", 'comment_created': datetime.datetime(2020, 3, 25, 19, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 411117960, 'comment_body': 'https://github.com/rook/rook/pull/5151', 'comment_created': datetime.datetime(2020, 4, 20, 6, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 411295708, 'comment_body': 'why is this renaming required? Original package name `base64` is good enough.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411296972, 'comment_body': 'User proper names.\r\n```suggestion\r\n\tadmissionregistrationv1 ""k8s.io/api/admissionregistration/v1""\r\n```', 'comment_created': datetime.datetime(2020, 4, 20, 11, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411297120, 'comment_body': '```suggestion\r\n\tcorev1 ""k8s.io/api/core/v1""\r\n```', 'comment_created': datetime.datetime(2020, 4, 20, 11, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411297355, 'comment_body': 'Why is this required?', 'comment_created': datetime.datetime(2020, 4, 20, 11, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411297783, 'comment_body': '```suggestion\r\n\tapierrors ""k8s.io/apimachinery/pkg/api/errors""\r\n```', 'comment_created': datetime.datetime(2020, 4, 20, 11, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411298697, 'comment_body': ""Namespace can't be hardcoded.\r\nIf secret name is a Constant, define it as a constant before user."", 'comment_created': datetime.datetime(2020, 4, 20, 11, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411299620, 'comment_body': 'Log the message from the Caller. This is just a utility function.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411300202, 'comment_body': 'Do not hardocde namespace.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411300456, 'comment_body': 'What if this function fails?', 'comment_created': datetime.datetime(2020, 4, 20, 11, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411300737, 'comment_body': 'just use `err`.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411301256, 'comment_body': 'log from the caller.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411301764, 'comment_body': 'Remove hardcoded namespace.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411301863, 'comment_body': 'Remove hardcoded namespace.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411302427, 'comment_body': '`443` is generally busy.\r\nThis needs to be configurable.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411302923, 'comment_body': 'Remove hardcoded namespace.\r\n', 'comment_created': datetime.datetime(2020, 4, 20, 11, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411303134, 'comment_body': 'Do we have the RBAC permissions to create config in other namespace?', 'comment_created': datetime.datetime(2020, 4, 20, 11, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411303329, 'comment_body': 'use `err` instead.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411303653, 'comment_body': 'Why are we logging CA info?', 'comment_created': datetime.datetime(2020, 4, 20, 11, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411303761, 'comment_body': 'Remove hardcoded namespace.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411303871, 'comment_body': 'Remove hardcoded namespace.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411303988, 'comment_body': 'Remove hardcoded namespace.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411304364, 'comment_body': 'use `err`', 'comment_created': datetime.datetime(2020, 4, 20, 11, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411304529, 'comment_body': 'Remove hardcoded namespace.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411304628, 'comment_body': 'use `err`', 'comment_created': datetime.datetime(2020, 4, 20, 11, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411305017, 'comment_body': 'This might already be in use.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411305130, 'comment_body': 'use `err`', 'comment_created': datetime.datetime(2020, 4, 20, 11, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411305329, 'comment_body': 'what is `%v+` ?', 'comment_created': datetime.datetime(2020, 4, 20, 11, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411306068, 'comment_body': 'DO NOT USE PANIC.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411307324, 'comment_body': 'Try to use standard logger that we always use.', 'comment_created': datetime.datetime(2020, 4, 20, 11, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 411307698, 'comment_body': '```suggestion\r\n\tcephv1 ""github.com/rook/rook/pkg/apis/ceph.rook.io/v1""\r\n```', 'comment_created': datetime.datetime(2020, 4, 20, 11, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 412897478, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897503, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897522, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897531, 'comment_body': 'Fixed Typo', 'comment_created': datetime.datetime(2020, 4, 22, 11, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897553, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897609, 'comment_body': 'i have added a var for this.', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897627, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897647, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897667, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897683, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897703, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897719, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897761, 'comment_body': 'Removed ! ', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897779, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897866, 'comment_body': 'Fixed\r\nWe are not creating this in other namespace. Its provided by the kubernetes cluster itself', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897904, 'comment_body': 'i have added a var for this.', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897924, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897937, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897958, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897973, 'comment_body': 'Fixed ! I had different names to identify the type of error. Is it required for it to be err everywhere ? ', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412897997, 'comment_body': 'Updated this func to return an error', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412898016, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412898027, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412898043, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412898079, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412898162, 'comment_body': 'This is done to add necessary privileges in rook service account to create and update resources from admissionregistration.k8s.io', 'comment_created': datetime.datetime(2020, 4, 22, 11, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412898202, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412898209, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 412898222, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 22, 11, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 413923105, 'comment_body': '8443 is the port used by the dashboard... can you use another default port?', 'comment_created': datetime.datetime(2020, 4, 23, 16, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jmolmo', 'type': 'User'}, {'comment_id': 413924587, 'comment_body': '8443 used by dashboard by default', 'comment_created': datetime.datetime(2020, 4, 23, 16, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jmolmo', 'type': 'User'}, {'comment_id': 413926978, 'comment_body': '8443 used by dashboard, and it is hardcoded here', 'comment_created': datetime.datetime(2020, 4, 23, 16, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jmolmo', 'type': 'User'}, {'comment_id': 413951647, 'comment_body': 'I think maybe this could be commented out with instructions to uncomment if users want to enable the admission webhook? What do you think about that @travisn ?', 'comment_created': datetime.datetime(2020, 4, 23, 16, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 413952360, 'comment_body': 'Add more context here. Error while doing what?', 'comment_created': datetime.datetime(2020, 4, 23, 16, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 413952534, 'comment_body': 'Errors should be separated by periods `.`, not colons `:`\r\n```suggestion\r\n\t\t\tlogger.Errorf(""an error has occurred while initializing webhook. %+v"", err)\r\n```', 'comment_created': datetime.datetime(2020, 4, 23, 16, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 413952766, 'comment_body': '```suggestion\r\n\t\tlogger.Errorf(""error has occurred. %+v"", err)\r\n```', 'comment_created': datetime.datetime(2020, 4, 23, 16, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 413953035, 'comment_body': ""Use `Wrap` for errors that aren't logs."", 'comment_created': datetime.datetime(2020, 4, 23, 16, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 413953122, 'comment_body': 'Wrap error\r\n', 'comment_created': datetime.datetime(2020, 4, 23, 16, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 413953205, 'comment_body': 'wrap error', 'comment_created': datetime.datetime(2020, 4, 23, 16, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 413953305, 'comment_body': 'wrap error', 'comment_created': datetime.datetime(2020, 4, 23, 16, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 414440194, 'comment_body': ""It's a different service IP so it doesn't really matter IIRC unless everything runs on the same machine."", 'comment_created': datetime.datetime(2020, 4, 24, 9, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414440930, 'comment_body': ""This doesn't feel right to assume this. The namespace should be discovered."", 'comment_created': datetime.datetime(2020, 4, 24, 9, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414441707, 'comment_body': ""Rook is using `failed to ...` when reporting error so let's stick with that."", 'comment_created': datetime.datetime(2020, 4, 24, 9, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414442155, 'comment_body': 'Also do not print the full struct, use `%v`', 'comment_created': datetime.datetime(2020, 4, 24, 9, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414442344, 'comment_body': 'ditto, `failed to ...` and use `%v`', 'comment_created': datetime.datetime(2020, 4, 24, 9, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414442752, 'comment_body': 'No capital letters in error log message if possible', 'comment_created': datetime.datetime(2020, 4, 24, 9, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414443372, 'comment_body': ""discover operator's namespace instead.\r\n"", 'comment_created': datetime.datetime(2020, 4, 24, 9, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414444343, 'comment_body': ""Also, you  don't need to call the client as the interface has everything."", 'comment_created': datetime.datetime(2020, 4, 24, 9, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414444567, 'comment_body': 'just call `context.Clientset.CoreV1().Services(namespace).Create(` instead', 'comment_created': datetime.datetime(2020, 4, 24, 9, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414444726, 'comment_body': 'wrap error', 'comment_created': datetime.datetime(2020, 4, 24, 9, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414445084, 'comment_body': 'same, this is not needed', 'comment_created': datetime.datetime(2020, 4, 24, 9, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414445246, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 4, 24, 9, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414445289, 'comment_body': 'wrap err', 'comment_created': datetime.datetime(2020, 4, 24, 9, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414446152, 'comment_body': 'Typically we use `%q` instead of `%s` to print variables in logs.\r\nUse errors package instead of fmt.Error', 'comment_created': datetime.datetime(2020, 4, 24, 9, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414446654, 'comment_body': '```suggestion\r\n\t// Checks if CephCluster is being updated and rejects the request if the dataDirHostPath is changed from initial value\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 9, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414446772, 'comment_body': '```suggestion\r\n\t\t// Fetch the existing ceph cluster object\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 9, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414446906, 'comment_body': 'wrap err', 'comment_created': datetime.datetime(2020, 4, 24, 9, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414447012, 'comment_body': '```suggestion\r\n\t\t// Deserializing the incoming CephCluster object\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 9, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414447080, 'comment_body': 'wrap err', 'comment_created': datetime.datetime(2020, 4, 24, 9, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414447139, 'comment_body': 'wrap err', 'comment_created': datetime.datetime(2020, 4, 24, 9, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414447256, 'comment_body': 'wrap err', 'comment_created': datetime.datetime(2020, 4, 24, 9, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414447350, 'comment_body': '```suggestion\r\n// StartServer will start the server\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 9, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414447784, 'comment_body': '```suggestion\r\n\tlogger.Info(""starting the webhook"")\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 9, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414448066, 'comment_body': '```suggestion\r\n\t\tlogger.Errorf(""error loading certificate. %v"", err)\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 9, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414448439, 'comment_body': 'use logger package?', 'comment_created': datetime.datetime(2020, 4, 24, 9, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414448557, 'comment_body': '```suggestion\r\n\tlog.Print(""certificate reloaded"")\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 9, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414449177, 'comment_body': 'Exported function needs to be prefixed by a comment', 'comment_created': datetime.datetime(2020, 4, 24, 9, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414449501, 'comment_body': 'use fmt.Sprintf to format the concat instead', 'comment_created': datetime.datetime(2020, 4, 24, 9, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414449600, 'comment_body': '```suggestion\r\n\t\treturn errors.New(""invalid Update : DataDirHostPath change from "" + found.Spec.DataDirHostPath + "" to "" + updatedCephCluster.Spec.DataDirHostPath + "" is not allowed"")\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414449657, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 4, 24, 9, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 414465373, 'comment_body': 'yep, this could affect tests/labs/demos using one machine, taking into account that we have several thousand of other possibilities... why to temp fate?', 'comment_created': datetime.datetime(2020, 4, 24, 10, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jmolmo', 'type': 'User'}, {'comment_id': 414870428, 'comment_body': ""If the admission controller is something that just runs as part of the operator, even if an optional component, I'd say to leave it uncommented here. We have this pattern already of enabling all the RBAC needed for the operator even if the operator doesn't have the features requiring the RBAC enabled.\r\n"", 'comment_created': datetime.datetime(2020, 4, 24, 21, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414873506, 'comment_body': ""We have to allow things to work on a single machine by default. Assuming we can register any endpoint, let's pick a less common port, but still make it configurable here."", 'comment_created': datetime.datetime(2020, 4, 24, 21, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414875172, 'comment_body': '```suggestion\r\n\t\t\t\t""app"": ""rook-ceph-admission-controller"",\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 21, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414875525, 'comment_body': '```suggestion\r\n\t\t\t\tName: fmt.Sprintf(""%s.%s.svc"", acServiceName, namespace),\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 21, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414876048, 'comment_body': 'How about if we add all the rook CRDs to the list?', 'comment_created': datetime.datetime(2020, 4, 24, 21, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414878727, 'comment_body': 'You can get the namespace of the operator from this:\r\n```\r\nos.Getenv(k8sutil.PodNamespaceEnvVar)\r\n```', 'comment_created': datetime.datetime(2020, 4, 24, 21, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414881394, 'comment_body': ""Some suggestions on the code structure:\r\n1. We shouldn't need any changes under the `cmd/rook/ceph/` package.\r\n   - If we decide to run the admission controller as a separate daemon instead of part of the operator, there would only be small changes in this package for a new command line option (`rook ceph admission-controller`). The handler for this new option would call the code under `pkg` in the next bullet.\r\n1. The code under `cmd/rook/webhook-server` should be moved under `pkg/operator/ceph/admission`.\r\n1. All of the changes in this file likely should also move under `pkg/operator/ceph/admission`"", 'comment_created': datetime.datetime(2020, 4, 24, 21, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414883671, 'comment_body': ""Why would rook ever be watching something in the kube namespace? Would we get notifications for other types of resources? I hope we're only getting notifications for our own CRDs."", 'comment_created': datetime.datetime(2020, 4, 24, 21, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414884121, 'comment_body': ""The err should always be checked immediately after the line of code where it was returned, otherwise you might be processing a different error. For example, if `isKubeNamespace()` returns true, this `err` wouldn't correspond to that call."", 'comment_created': datetime.datetime(2020, 4, 24, 21, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414885040, 'comment_body': 'nit: `request` is preferred instead of `req` for readability', 'comment_created': datetime.datetime(2020, 4, 24, 21, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 414885549, 'comment_body': 'The package is most commonly named the same as the directory.', 'comment_created': datetime.datetime(2020, 4, 24, 21, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 416764147, 'comment_body': 'Per our discussion, there are two phases of implementation to consider:\r\n1. Changes to the operator that will launch the admission controller \r\n   - Check if the secret exists that signals the admission controller is expected to run. \r\n   - If the secret exists:\r\n     - Create the K8s service that directs the traffic to the admission controller daemon \r\n     - Create the admission controller deployment spec and start it. \r\n1. New `rook admission-controller ceph` command that implements running the admission controller daemon\r\n\r\nNote that all creation of k8s resources should be done in phase one. Phase two should not need to create resources, it just starts listening for the webhook events. \r\n   ', 'comment_created': datetime.datetime(2020, 4, 28, 16, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 417355567, 'comment_body': 'Fixed. Changed port to 8079', 'comment_created': datetime.datetime(2020, 4, 29, 14, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417355606, 'comment_body': 'Fixed. Changed port to 8079', 'comment_created': datetime.datetime(2020, 4, 29, 14, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417355641, 'comment_body': 'Fixed. Changed port to 8079', 'comment_created': datetime.datetime(2020, 4, 29, 14, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417355724, 'comment_body': 'fixed...', 'comment_created': datetime.datetime(2020, 4, 29, 14, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417355764, 'comment_body': 'Fixed @BlaineEXE @leseb ', 'comment_created': datetime.datetime(2020, 4, 29, 14, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417355809, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417355872, 'comment_body': 'Fixed. Will just return an error', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417355901, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417355941, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417355971, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356009, 'comment_body': 'Fixed. Thanks @travisn ', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356077, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356114, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356146, 'comment_body': 'context for this error has been provided in initWebhook func', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356184, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356208, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356264, 'comment_body': 'context for this error has been provided in initWebhook func which is why i have not wrapped it.', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356336, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356375, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356411, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356443, 'comment_body': 'context given in fetchExistingCephCluster function.', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356483, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356545, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356574, 'comment_body': 'context for this error given validateUpdatedCephCluster func', 'comment_created': datetime.datetime(2020, 4, 29, 14, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356624, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356664, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356709, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356757, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356812, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356835, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356875, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356917, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356950, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417356988, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417357048, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417357117, 'comment_body': 'I have added a few. Please let me know if there are more.', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417357324, 'comment_body': 'Removed the if', 'comment_created': datetime.datetime(2020, 4, 29, 14, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417357364, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 417357416, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 4, 29, 14, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 423371002, 'comment_body': ""I'm not a big fan of deep directory structure. I'd suggest including the yaml and the scripts all in the same `admission-controller` directory."", 'comment_created': datetime.datetime(2020, 5, 11, 23, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423371798, 'comment_body': ""nit: You're already in the admission folder, so you can call the file controller.go. Single word filenames are preferred if possible."", 'comment_created': datetime.datetime(2020, 5, 11, 23, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423372206, 'comment_body': 'how about naming it webhook.go?', 'comment_created': datetime.datetime(2020, 5, 11, 23, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423372465, 'comment_body': 'Is this used anymore or can be removed?', 'comment_created': datetime.datetime(2020, 5, 11, 23, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423372875, 'comment_body': 'You don\'t need the resource type on the name. \r\n```suggestion\r\n\tadmissionServiceName      = ""rook-admission-controller""\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 23, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423372923, 'comment_body': '```suggestion\r\n\tsecretName         = ""rook-admission-controller""\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 23, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423373157, 'comment_body': ""Is this used anywhere? I hope we don't need to worry about the kube-system namespace."", 'comment_created': datetime.datetime(2020, 5, 11, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423373378, 'comment_body': 'still used?', 'comment_created': datetime.datetime(2020, 5, 11, 23, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423373902, 'comment_body': ""The admission controller shouldn't use the same service account as the operator. It really shouldn't need all the privileges of the operator. First see if you can use the default service account (don't set it). If the permissions are not sufficient, let's create a new service account in common.yaml."", 'comment_created': datetime.datetime(2020, 5, 11, 23, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423374881, 'comment_body': 'I would expect everything in `pkg/operator/admission` to be independent from the storage provider. If there is something specific to ceph it should go under `pkg/operator/ceph/admission`. This separation will make it possible for other storage providers to implement the admission controller.', 'comment_created': datetime.datetime(2020, 5, 11, 23, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423375729, 'comment_body': 'Was there example code somewhere that we need to give credit to? Or was this purely from docs?', 'comment_created': datetime.datetime(2020, 5, 11, 23, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423376103, 'comment_body': 'If the webhook is configured to start, let\'s fail the operator from starting. \r\n```suggestion\r\n\t\treturn errors.Wrap(err, ""failed to start webhook"")\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 23, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423376485, 'comment_body': 'how about naming the folder `admission` instead of `validation`? ', 'comment_created': datetime.datetime(2020, 5, 11, 23, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423377093, 'comment_body': '```suggestion\r\nfunc fetchExistingCephCluster(request *v1beta1.AdmissionRequest) (*cephv1.CephCluster, error) {\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 23, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423378376, 'comment_body': '```suggestion\r\n\tcephclusterResource   = metav1.GroupVersionResource{Group: cephv1.CustomResourceGroupName, Version: cephv1.Version, Resource: ""cephclusters""}\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 23, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423378962, 'comment_body': ""Let's avoid setting package variables except perhaps for test scenarios. In this case, you could pass the `context` with the rookClientset, or else just pass the rookClientset to the methods where needed."", 'comment_created': datetime.datetime(2020, 5, 11, 23, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423379618, 'comment_body': 'nit: no blank line before a closing bracket', 'comment_created': datetime.datetime(2020, 5, 11, 23, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423380075, 'comment_body': 'For a func this simple that just compares two properties I would suggest not to define a function. For example, just compare the properties directly up on line 45.', 'comment_created': datetime.datetime(2020, 5, 11, 23, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423381458, 'comment_body': ""Another check that would be interesting to implement is if `external: true`. In that case, you can't specify anything in the mon, mgr, dashboard, monitoring, network, disruptionManagement, or storage section of the cluster CR."", 'comment_created': datetime.datetime(2020, 5, 11, 23, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423382319, 'comment_body': 'To implement, you may want to define an interface that the ceph admission controller would be the first to implement.', 'comment_created': datetime.datetime(2020, 5, 11, 23, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 423383112, 'comment_body': ""We will need documentation that instructs the admin how to enable an admission controller. I'm thinking we'll need a new .md file under the Documentation folder. You already have some of this in the design doc, but we need to turn it into a user-friendly doc that talks about how to configure it, rather than the implementation details."", 'comment_created': datetime.datetime(2020, 5, 11, 23, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 424402841, 'comment_body': 'Fixed ', 'comment_created': datetime.datetime(2020, 5, 13, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424404189, 'comment_body': 'It will be exactly as given in the PR details. I will add more generic information. Can we do it as another PR or how would you like it done ?', 'comment_created': datetime.datetime(2020, 5, 13, 12, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424404389, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 13, 12, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424405279, 'comment_body': 'Done ! I felt it was better as init.go as initialising was its goal. ', 'comment_created': datetime.datetime(2020, 5, 13, 12, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424406538, 'comment_body': 'Removed !', 'comment_created': datetime.datetime(2020, 5, 13, 12, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424406638, 'comment_body': 'Done ', 'comment_created': datetime.datetime(2020, 5, 13, 12, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424406702, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 13, 12, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424406818, 'comment_body': 'Removed !', 'comment_created': datetime.datetime(2020, 5, 13, 12, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424406939, 'comment_body': 'Nope... Removed !', 'comment_created': datetime.datetime(2020, 5, 13, 12, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424410683, 'comment_body': 'The idea of using rook service account was that ultimately the admission-controllers would want to access all rook resources ( cephclusters , pools, objectstores  etc ) in the cluster and perform different types of validations on these resources and also mutate them in future. If we use another service account, we will have to again add these same permissions . It would cause unnecssary repetition to what already is being provided. In any case, i would like to know your thoughts on this @travisn @leseb @BlaineEXE ', 'comment_created': datetime.datetime(2020, 5, 13, 12, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424413451, 'comment_body': 'This interface admitFunc has been defined in `pkg/operator/admission/controller.go`  and it is independent from the storage provider. For ceph specific implementation is under `pkg/operator/ceph/admission`. The type of storage provider is decided based on the flag (ceph, cassandra, cockroachdb etc.. )  being passed to our admission controller pods `pkg/operator/admission/server.go` ', 'comment_created': datetime.datetime(2020, 5, 13, 12, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424414178, 'comment_body': 'This utility package was picked from openshift multus project. Not sure if there is any is specific format i need to follow to provide credits to them. Could you let me know on this ?', 'comment_created': datetime.datetime(2020, 5, 13, 12, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424414284, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2020, 5, 13, 12, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424414362, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2020, 5, 13, 12, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424414859, 'comment_body': 'Fixed !', 'comment_created': datetime.datetime(2020, 5, 13, 12, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424415034, 'comment_body': 'Done ! Removed the two funcs', 'comment_created': datetime.datetime(2020, 5, 13, 12, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424416480, 'comment_body': 'Fixed !', 'comment_created': datetime.datetime(2020, 5, 13, 12, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424416598, 'comment_body': 'Fixed !', 'comment_created': datetime.datetime(2020, 5, 13, 12, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424417216, 'comment_body': 'Working on it', 'comment_created': datetime.datetime(2020, 5, 13, 13, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 424417732, 'comment_body': 'Fixed !', 'comment_created': datetime.datetime(2020, 5, 13, 13, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 425127559, 'comment_body': 'Added this validation ', 'comment_created': datetime.datetime(2020, 5, 14, 13, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 426896264, 'comment_body': 'We will want to add validation for all CRDs, right?\r\n```suggestion\r\n    resources: [""*""]\r\n```', 'comment_created': datetime.datetime(2020, 5, 18, 21, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 426897098, 'comment_body': 'This RBAC only needs to be created when the admission controller is configured. How about adding it to `webhook-config.yaml` instead of `common.yaml`?', 'comment_created': datetime.datetime(2020, 5, 18, 21, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 426898895, 'comment_body': 'Since there are two replicas, they should have pod anti-affinity to each other. See #5462 for an example of other pod anti-affinity recently added to the csi provisioner.', 'comment_created': datetime.datetime(2020, 5, 18, 21, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 426900204, 'comment_body': ""I believe the create event is raised every time a client starts watching. For example, if we restart the operator we get a create event when the operator starts up. I assume the admission controller doesn't follow that pattern, but can you confirm if the admission controller also sees a create if it is restarted? "", 'comment_created': datetime.datetime(2020, 5, 18, 21, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 426901352, 'comment_body': ""This deserializing looks like the same code as line 62. What if you move it up to line 51 so it is deserialized the same wehther it's an update or create?"", 'comment_created': datetime.datetime(2020, 5, 18, 21, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 426909797, 'comment_body': ""Another network check is that the `provider` name can't change"", 'comment_created': datetime.datetime(2020, 5, 18, 21, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 426910934, 'comment_body': 'Can you provide a link to their code? Was anything modified here for our purposes?', 'comment_created': datetime.datetime(2020, 5, 18, 21, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 426912668, 'comment_body': ""How about adding a doc as part of this PR? I'd suggest the header of the .md be this so that it will be between the Prereqs and Examples in the table of contents:\r\n```\r\n---\r\ntitle: Admission Controller\r\nweight: 2030\r\nindent: true\r\n---\r\n\r\n# Admission Controller\r\n\r\n...\r\n```"", 'comment_created': datetime.datetime(2020, 5, 18, 21, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 427891381, 'comment_body': ""I've provided a link to their code in the file. Only logger statements were modified. "", 'comment_created': datetime.datetime(2020, 5, 20, 10, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 427891586, 'comment_body': ""I've added this."", 'comment_created': datetime.datetime(2020, 5, 20, 10, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 427891683, 'comment_body': 'Added this validation ', 'comment_created': datetime.datetime(2020, 5, 20, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 427891822, 'comment_body': 'Discussed this in the call', 'comment_created': datetime.datetime(2020, 5, 20, 10, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 427892325, 'comment_body': '@travisn  Please review this documentation', 'comment_created': datetime.datetime(2020, 5, 20, 10, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 428351231, 'comment_body': 'Paths will change over time, so mentioning the repo should be fine.\r\n```suggestion\r\nOriginal code can be found at https://github.com/openshift/multus-admission-controller\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 22, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428351675, 'comment_body': 'Instead of the rook copyright, just copy the header from the multus copyright. It\'s also apache2.0 so it\'s fine. Similarly, you\'ll see ""Copyright The Kubernetes Authors."" in some places in the rook codebase.', 'comment_created': datetime.datetime(2020, 5, 20, 22, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428352748, 'comment_body': 'You need this header for the docs to get generated.\r\n```\r\n---\r\ntitle: Admission Controller\r\nweight: 2030\r\nindent: true\r\n---\r\n\r\n# Admission Controller\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 22, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428353767, 'comment_body': 'This document only needs to contain info for admins to setup the admission controller in their cluster. The comments below will be mostly suggestions on this approach.', 'comment_created': datetime.datetime(2020, 5, 20, 22, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428354056, 'comment_body': ""No need for information for how to add new validation rules. That's a developer task, not an admin task."", 'comment_created': datetime.datetime(2020, 5, 20, 22, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428356452, 'comment_body': ""The admin doesn't need this section in the docs. This is an implementation detail."", 'comment_created': datetime.datetime(2020, 5, 20, 23, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428358089, 'comment_body': '```suggestion\r\nTo deploy the Rook admission controllers we have a helper script that will automate the configuration.\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 23, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428358500, 'comment_body': '```suggestion\r\nkubectl create -f examples/kubernetes/ceph/common.yaml\r\nexamples/kubernetes/ceph/admission-controller/deploy.sh\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 23, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428358769, 'comment_body': '```suggestion\r\nAt this point the operator will start the admission controller deployment automatically and the webhook will start intercepting requests for Rook resources. \r\n\r\nThe operator will automatically manage upgrades of the admission controller.\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 23, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428359283, 'comment_body': ""Let's remove the Requirements section. I think this info will be useful later in the doc. I'll comment separately on that."", 'comment_created': datetime.datetime(2020, 5, 20, 23, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428359853, 'comment_body': 'After this line, add a few bullet points that describe what the script will do. (This is similar to the requirements section above that I suggested to remove.) For example:\r\n- Creates a Webhook server \r\n- Generates a self-signed certificate for the server and stores it in a secret\r\n- Creates the necessary RBAC components, including a ValidatingWebhookConfig\r\n- Creates a service account so the Webhook server will run with minimal privileges', 'comment_created': datetime.datetime(2020, 5, 20, 23, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 428360190, 'comment_body': 'After the header, how about a sentence or two that describes what an admission controller is and why we recommend they configure it.', 'comment_created': datetime.datetime(2020, 5, 20, 23, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 429192280, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 5, 22, 11, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 429193862, 'comment_body': 'Added a short description.', 'comment_created': datetime.datetime(2020, 5, 22, 11, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 429193901, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 5, 22, 11, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 429196721, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 5, 22, 11, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 429196772, 'comment_body': 'Added. ', 'comment_created': datetime.datetime(2020, 5, 22, 11, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 429197076, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 5, 22, 11, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 429197090, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 5, 22, 11, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 429432551, 'comment_body': '```suggestion\r\nAn admission controller intercepts requests to the Kubernetes API server prior to persistence of the object, but after the request is authenticated and authorized.\r\n```', 'comment_created': datetime.datetime(2020, 5, 22, 20, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 429432928, 'comment_body': '```suggestion\r\n1. Stores these certificates as a secret.\r\n```', 'comment_created': datetime.datetime(2020, 5, 22, 20, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 429433375, 'comment_body': 'This is a better paragraph for a design document, but I think better to remove it for the end user docs.', 'comment_created': datetime.datetime(2020, 5, 22, 20, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 429433878, 'comment_body': '```suggestion\r\nEnabling the Rook admission controller is recommended to provide an additional level of validation that Rook is configured correctly with the custom resource (CR) settings.\r\n```', 'comment_created': datetime.datetime(2020, 5, 22, 20, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 429434222, 'comment_body': '```suggestion\r\nThe script file creates a self signed kubernetes approved certificate and deploys it as a secret onto the cluster. It is mandatory that the secret is named ""rook-admission-controller"" as rook would try to detect a secret with such name before starting the admission controller servers. \r\n```', 'comment_created': datetime.datetime(2020, 5, 22, 20, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 429434397, 'comment_body': '```suggestion\r\nThe above approach of using self signed certificates is discouraged as it would be the job of the owner to maintain the certificates. The recommended approach would be to use a proper certificate manager and get signed certificates from a known Certificate authority. Once these are available, create the secrets using the following command \r\n```', 'comment_created': datetime.datetime(2020, 5, 22, 20, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 429435130, 'comment_body': ""If the self-signed cert is already created, they won't need to modify the script, right? Should we just tell them to restart the admission controller pod to pick it up? Or do they have to run the script again?"", 'comment_created': datetime.datetime(2020, 5, 22, 20, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 429782503, 'comment_body': '```suggestion\r\ncluster/examples/kubernetes/ceph/admission-controller/deploy.sh\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 7, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429790278, 'comment_body': 'This is essentially the same as https://github.com/rook/rook/blob/master/pkg/operator/ceph/csi/util.go#L224, have you tried exporting the function from the CSI code and re-use it here instead of duplicating?', 'comment_created': datetime.datetime(2020, 5, 25, 8, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429791165, 'comment_body': 'This does not seem to be working for me, I have a single machine and I got 2 replicas on the same machine. I would expect to have one `Running` and one `Pending`. Am I missing something?', 'comment_created': datetime.datetime(2020, 5, 25, 8, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429791443, 'comment_body': 'We need a Rook header.', 'comment_created': datetime.datetime(2020, 5, 25, 8, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429791794, 'comment_body': 'unnecessary blank line', 'comment_created': datetime.datetime(2020, 5, 25, 8, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429792157, 'comment_body': 'unnecessary blank line\r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 25, 8, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429792528, 'comment_body': 'You need to check if `err != nil`  before testing  `isPresent`', 'comment_created': datetime.datetime(2020, 5, 25, 8, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429792762, 'comment_body': 'Move this block before L75', 'comment_created': datetime.datetime(2020, 5, 25, 8, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429792886, 'comment_body': '```suggestion\r\n\t\treturn errors.Wrap(err, ""failed to create service.)\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429793274, 'comment_body': 'This function returns an error so you must look it up.\r\n', 'comment_created': datetime.datetime(2020, 5, 25, 8, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429793602, 'comment_body': 'Please use a helper function to return the secret volume', 'comment_created': datetime.datetime(2020, 5, 25, 8, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429793649, 'comment_body': 'Please use a helper function to return the secret volume mount', 'comment_created': datetime.datetime(2020, 5, 25, 8, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429793866, 'comment_body': 'Please use a helper function to return the ReplicaSet', 'comment_created': datetime.datetime(2020, 5, 25, 8, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429794254, 'comment_body': ""Use `rook-ceph-admission-controller` as a constant since it's called multiple times."", 'comment_created': datetime.datetime(2020, 5, 25, 8, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429794801, 'comment_body': '```suggestion\r\n\tappName = ""rook-admission-controller""\r\n```\r\n\r\nThen re-use it for the service, the replicat set etc', 'comment_created': datetime.datetime(2020, 5, 25, 8, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429795956, 'comment_body': '```suggestion\r\n\tcephclusterResource   = metav1.GroupVersionResource{Group: cephv1.CustomResourceGroup, Version: cephv1.Version, Resource: opcontroller.ClusterResource.Plural}\r\n```\r\n\r\n\r\nUse the `opcontroller ""github.com/rook/rook/pkg/operator/ceph/controller""`', 'comment_created': datetime.datetime(2020, 5, 25, 8, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429797208, 'comment_body': 'Do you need this? It looks like you are getting the context from `ValidateCephResource` caller already', 'comment_created': datetime.datetime(2020, 5, 25, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429797551, 'comment_body': '```suggestion\r\n\t\treturn &cephv1.CephCluster{}, errors.Wrap(err, ""failed to find existing cephcluster object."")\r\n```\r\n```suggestion\r\n\t\treturn &cephv1.CephCluster{}, errors.Wrap(err, ""failed to find existing cephcluster object"")\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429797673, 'comment_body': '```suggestion\r\n\t\treturn errors.Wrap(err, ""failed to deserialize pod object"")\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429798567, 'comment_body': ""I'm not sure if we should through an error if these fields are specified the cluster will deploy and they will be ignored."", 'comment_created': datetime.datetime(2020, 5, 25, 8, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429799789, 'comment_body': 'Please name the error with `errors.Wrap`', 'comment_created': datetime.datetime(2020, 5, 25, 8, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429799838, 'comment_body': 'Please name the error with `errors.Wrap`', 'comment_created': datetime.datetime(2020, 5, 25, 8, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429800356, 'comment_body': '```suggestion\r\n\t\treturn errors.New(fmt.Sprintf(""invalid update : Provider change from %q to %q is not allowed"", found.Spec.Network.Provider, updatedCephCluster.Spec.Network.Provider))\r\n```\r\n\r\nJust use `errors.Errorf` directly instead of wrapping with `fmt.Sprintf`.', 'comment_created': datetime.datetime(2020, 5, 25, 8, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429800473, 'comment_body': 'Just use `errors.Errorf` directly instead of wrapping with `fmt.Sprintf`.', 'comment_created': datetime.datetime(2020, 5, 25, 8, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429800561, 'comment_body': 'Just use `errors.Errorf` directly instead of wrapping with `fmt.Sprintf`.', 'comment_created': datetime.datetime(2020, 5, 25, 8, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429805201, 'comment_body': '```suggestion\r\necho ""$BASE_DIR""\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429805305, 'comment_body': '```suggestion\r\n\t""${BASE_DIR}""/admission-controller/webhook-create-signed-cert.sh --namespace ${NAMESPACE}\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429805507, 'comment_body': '```suggestion\r\nBASE_DIR=$(cd ""$(dirname ""$0"")""/..; pwd)\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429806023, 'comment_body': '```suggestion\r\n        ""${BASE_DIR}""/admission-controller/webhook-patch-ca-bundle.sh | \\\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429806482, 'comment_body': 'Why are these exports needed?', 'comment_created': datetime.datetime(2020, 5, 25, 8, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429807704, 'comment_body': '```suggestion\r\n[ -z ""${service}"" ] && service=rook-admission-controller\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429807788, 'comment_body': '```suggestion\r\n[ -z ""${secret}"" ] && secret=rook-admission-controller\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429807874, 'comment_body': '```suggestion\r\n[ -z ""${namespace}"" ] && namespace=kube-system\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429810327, 'comment_body': 'Do we really want to default to `kube-system`? Also it seems unnecessary since `deploy.sh` already sets default so this will never be triggered.', 'comment_created': datetime.datetime(2020, 5, 25, 8, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429810875, 'comment_body': ""shouldn't we log something since we loop forever? so that if the script hangs at least we know why."", 'comment_created': datetime.datetime(2020, 5, 25, 8, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429811095, 'comment_body': 'log something?', 'comment_created': datetime.datetime(2020, 5, 25, 8, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429811711, 'comment_body': '`ROOT` declared but unused?', 'comment_created': datetime.datetime(2020, 5, 25, 8, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429812226, 'comment_body': 'Missing Rook header', 'comment_created': datetime.datetime(2020, 5, 25, 8, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429814202, 'comment_body': 'unnecessary blank line', 'comment_created': datetime.datetime(2020, 5, 25, 8, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429814372, 'comment_body': 'use `errors.Errorf`', 'comment_created': datetime.datetime(2020, 5, 25, 8, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429814465, 'comment_body': '```suggestion\r\n\t\treturn nil, errors.Wrap(err, ""could not read request body"")\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429814530, 'comment_body': 'use `errors.Errorf`', 'comment_created': datetime.datetime(2020, 5, 25, 8, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429814609, 'comment_body': 'unnecessary blank line', 'comment_created': datetime.datetime(2020, 5, 25, 8, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429814710, 'comment_body': '```suggestion\r\n\t\treturn nil, errors.Wrap(err, ""failed to deserialize request"")\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429814815, 'comment_body': 'unnecessary blank line', 'comment_created': datetime.datetime(2020, 5, 25, 8, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429814890, 'comment_body': 'unnecessary blank line', 'comment_created': datetime.datetime(2020, 5, 25, 8, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429814988, 'comment_body': '```suggestion\r\n\t\treturn nil, errors.Wrap(err, ""failed to marshal response"")\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429815221, 'comment_body': '```suggestion\r\n\t\tlogger.Errorf(""failed to handle webhook request: %v"", err)\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429815390, 'comment_body': '```suggestion\r\n\tlogger.Info(""starting the webhook"")\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429815558, 'comment_body': '```suggestion\r\n\t\tlogger.Errorf(""failed to load certificate. %v"", err)\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429815597, 'comment_body': 'unnecessary blank line', 'comment_created': datetime.datetime(2020, 5, 25, 8, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429815852, 'comment_body': 'Please name the error', 'comment_created': datetime.datetime(2020, 5, 25, 8, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429816240, 'comment_body': '```suggestion\r\n\t\t\t\tlogger.Errorf(""failed to reload certificate. %v"", err)\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 8, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429816323, 'comment_body': 'Name the error', 'comment_created': datetime.datetime(2020, 5, 25, 8, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429816441, 'comment_body': 'name the error', 'comment_created': datetime.datetime(2020, 5, 25, 8, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429820674, 'comment_body': 'unnecessary blank line', 'comment_created': datetime.datetime(2020, 5, 25, 9, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429822294, 'comment_body': 'unnecessary blank line', 'comment_created': datetime.datetime(2020, 5, 25, 9, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429822940, 'comment_body': 'The function signature returns an `error` but we never check for errors. Return nothing instead?', 'comment_created': datetime.datetime(2020, 5, 25, 9, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429826857, 'comment_body': '```suggestion\r\n\treturn request.Resource == cephclusterResource && request.Operation == v1beta1.Create\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 9, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 429827175, 'comment_body': '```suggestion\r\n\treturn request.Resource == cephclusterResource && request.Operation == v1beta1.Update\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 9, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 430161743, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 5, 26, 5, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430161830, 'comment_body': 'Added to webhook-config.yaml', 'comment_created': datetime.datetime(2020, 5, 26, 5, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430161939, 'comment_body': 'Moved above ', 'comment_created': datetime.datetime(2020, 5, 26, 5, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430163187, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 5, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430163406, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 5, 26, 5, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430163611, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 5, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430163680, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 5, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430163806, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 5, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430163997, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 5, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430165730, 'comment_body': 'There are two cases here \r\n1. The self-signed cert is already created (by the user separately from the script) but the components have not been created then user will have to modify script parameter `INSTALL_SELF_SIGNED_CERT` to false to avoid creating another new self signed cert.\r\n2. The self-signed cert is created and the components have been deployed, in which case no need to modify the scripts. Restarting the admission controller pod will work fine.', 'comment_created': datetime.datetime(2020, 5, 26, 5, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430263777, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 9, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430269397, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 9, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430269478, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 9, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430269659, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 9, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430270485, 'comment_body': 'These exports are required for replacing the fields with appropriate values in webhook-config.yaml', 'comment_created': datetime.datetime(2020, 5, 26, 9, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430270572, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 9, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430271374, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 9, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430271682, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 5, 26, 9, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430325185, 'comment_body': ""It makes sense. We will always want it in same namespace as rook. I've made the default to be rook-ceph"", 'comment_created': datetime.datetime(2020, 5, 26, 10, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430920662, 'comment_body': 'Added logs ', 'comment_created': datetime.datetime(2020, 5, 27, 7, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 430921930, 'comment_body': 'Added logs ', 'comment_created': datetime.datetime(2020, 5, 27, 7, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431075895, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431076394, 'comment_body': 'Added header', 'comment_created': datetime.datetime(2020, 5, 27, 12, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431076769, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431077873, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431078503, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431079360, 'comment_body': 'Changed to Errorf', 'comment_created': datetime.datetime(2020, 5, 27, 12, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431079765, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431079910, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 31, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431080000, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431080113, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431080169, 'comment_body': 'removed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431080239, 'comment_body': 'removed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431080432, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431080720, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431081082, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431081227, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431081374, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431082032, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431082496, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431082719, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431083127, 'comment_body': 'added headers', 'comment_created': datetime.datetime(2020, 5, 27, 12, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431083968, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 27, 12, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431084294, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431085639, 'comment_body': 'this part is handled in the function InitWebhookIfSecretPresent', 'comment_created': datetime.datetime(2020, 5, 27, 12, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431086099, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431086277, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 5, 27, 12, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431086492, 'comment_body': 'moved', 'comment_created': datetime.datetime(2020, 5, 27, 12, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431086636, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 12, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431087684, 'comment_body': 'added error checks', 'comment_created': datetime.datetime(2020, 5, 27, 12, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431091562, 'comment_body': 'added helper func', 'comment_created': datetime.datetime(2020, 5, 27, 12, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431091582, 'comment_body': 'added helper func', 'comment_created': datetime.datetime(2020, 5, 27, 12, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431092324, 'comment_body': 'passed a constant in the func', 'comment_created': datetime.datetime(2020, 5, 27, 12, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431092421, 'comment_body': 'added helper func', 'comment_created': datetime.datetime(2020, 5, 27, 12, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431094750, 'comment_body': 'exported the function from CSI code ', 'comment_created': datetime.datetime(2020, 5, 27, 12, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431097434, 'comment_body': 'added', 'comment_created': datetime.datetime(2020, 5, 27, 12, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431105146, 'comment_body': 'need to set it as it is used in `fetchExistingCephCluster`', 'comment_created': datetime.datetime(2020, 5, 27, 13, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431106569, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 13, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431106679, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 13, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431106850, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 13, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431107373, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 13, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431107742, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 13, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431109214, 'comment_body': 'added', 'comment_created': datetime.datetime(2020, 5, 27, 13, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431109367, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 13, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431110959, 'comment_body': 'i did not get your statement. Could you elaborate on this ?', 'comment_created': datetime.datetime(2020, 5, 27, 13, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431111650, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 13, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431112276, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 13, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431112423, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 5, 27, 13, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431248230, 'comment_body': ""I meant that we don't need to enforce the condition from L81, if some parameters from let's say `cephv1.MonSpec` is applied, the external deployment will succeed anyways."", 'comment_created': datetime.datetime(2020, 5, 27, 15, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 431319521, 'comment_body': 'ok, you mean to say if even if MonSpec is specified when external mode is enabled, the CRD should be allowed to succeed ? Are there any more parameters from the list that i should remove ?', 'comment_created': datetime.datetime(2020, 5, 27, 17, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431325249, 'comment_body': 'Why not just use a `cert-manager`? rather than creating a certificate using shell script, we can create a certificate using `cert-manager` and add `cert-manager.io/inject-ca-from` annotation in `ValidatingWebhookConfiguration`', 'comment_created': datetime.datetime(2020, 5, 27, 17, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 431327611, 'comment_body': '@prksu I am not very well versed with the usage of cert-manager. Can you expand upon it and provide any links ?', 'comment_created': datetime.datetime(2020, 5, 27, 17, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 431341974, 'comment_body': 'should we create our own admission controller and server?\r\ni would suggest using [webhook](https://godoc.org/sigs.k8s.io/controller-runtime/pkg/webhook) package from `controller-runtime` considering we also (will) use `controller-runtime` in operator side.', 'comment_created': datetime.datetime(2020, 5, 27, 18, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 431370494, 'comment_body': 'we can create the certificate like this\r\n```yaml\r\napiVersion: cert-manager.io/v1alpha2\r\nkind: Issuer\r\nmetadata:\r\n  name: selfsigned-issuer\r\n  namespace: system\r\nspec:\r\n  selfSigned: {}\r\n---\r\napiVersion: cert-manager.io/v1alpha2\r\nkind: Certificate\r\nmetadata:\r\n  name: serving-cert\r\n  namespace: system\r\nspec:\r\n  dnsNames:\r\n  - $(SERVICE_NAME).$(SERVICE_NAMESPACE).svc\r\n  - $(SERVICE_NAME).$(SERVICE_NAMESPACE).svc.cluster.local\r\n  issuerRef:\r\n    kind: Issuer\r\n    name: selfsigned-issuer\r\n  secretName: webhook-server-cert\r\n```\r\n\r\nand the `ValidatingWebhookConfiguration` will looks like\r\n\r\n```yaml\r\napiVersion: admissionregistration.k8s.io/v1beta1\r\nkind: ValidatingWebhookConfiguration\r\nmetadata:\r\n  name: demo-webhook\r\n  annotations:\r\n    cert-manager.io/inject-ca-from: $(CERTIFICATE_NAMESPACE)/$(CERTIFICATE_NAME)\r\nwebhooks:\r\n  - name: webhook-server.webhook-demo.svc\r\n    clientConfig:\r\n      service:\r\n        name: webhook-server\r\n        namespace: rook-ceph\r\n        path: ""/validate""\r\n      caBundle: Cg==\r\n    rules:\r\n      - operations: [ ""CREATE"" ]\r\n        apiGroups: [""""]\r\n        apiVersions: [""v1""]\r\n        resources: [""pods""]\r\n```\r\n\r\nthe `cert-manager` will automatically replace `webhooks.clientConfig.caBundle` with appropriate `certificate`\r\n\r\nref:\r\nhttps://cert-manager.io/docs/configuration/selfsigned/\r\nhttps://cert-manager.io/docs/concepts/ca-injector/', 'comment_created': datetime.datetime(2020, 5, 27, 18, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 433101972, 'comment_body': '```suggestion\r\n```console\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 8, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433102031, 'comment_body': '```suggestion\r\n```console\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 8, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433102098, 'comment_body': '```suggestion\r\n```console\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 8, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433102291, 'comment_body': ""Let's keep it a single line too, that'd be easier to copy and paste"", 'comment_created': datetime.datetime(2020, 6, 1, 8, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433102744, 'comment_body': 'I think you need a blank line before the package name', 'comment_created': datetime.datetime(2020, 6, 1, 8, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433102937, 'comment_body': 'blank line before package name', 'comment_created': datetime.datetime(2020, 6, 1, 8, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433103137, 'comment_body': 'blank line before package name', 'comment_created': datetime.datetime(2020, 6, 1, 8, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433103648, 'comment_body': 'please make `rook-ceph-admission-controller` a constant `appName`', 'comment_created': datetime.datetime(2020, 6, 1, 8, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433103681, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 6, 1, 8, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433103805, 'comment_body': 'ditto make `webhook-api` a constant', 'comment_created': datetime.datetime(2020, 6, 1, 8, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 433423874, 'comment_body': 'Additionally, `""app""` is defined in `pkg/operator/k8sutil/pod.go`: `AppAttr`.', 'comment_created': datetime.datetime(2020, 6, 1, 18, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433424448, 'comment_body': 'Nit: `... from a known certificate authority.` -- certificate does not need to be capitalized.', 'comment_created': datetime.datetime(2020, 6, 1, 18, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433424735, 'comment_body': '```suggestion\r\n1. Creates a CSR for the certificate and gets it approved from the Kubernetes cluster.\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 18, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433424991, 'comment_body': 'Avoid undefined acronyms on first use. What is CSR?', 'comment_created': datetime.datetime(2020, 6, 1, 18, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433425192, 'comment_body': 'Kubernetes terms are capitalized in k8s docs. We should follow the same trends.\r\n\r\n```suggestion\r\n1. Creates a Service Account, ClusterRole and ClusterRoleBindings for running the Webhook server with minimal privileges.\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 18, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433426235, 'comment_body': ""I don't believe there are changes to `common.yaml` here. Is this the wrong filename?"", 'comment_created': datetime.datetime(2020, 6, 1, 18, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433427829, 'comment_body': '```suggestion\r\nThe script file creates a self-signed Kubernetes approved certificate and deploys it as a Secret onto the cluster. It is mandatory that the secret is named ""rook-admission-controller"" because Rook will look for the secret before starting the admission controller servers. \r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 18, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433428518, 'comment_body': '```suggestion\r\nIn the case of deploying from scratch, the script needs to be executed once without any modification, and certificates will be automatically created and deployed as a Secret.\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433428692, 'comment_body': '```suggestion\r\nThe above approach of using self signed certificates is discouraged as it would be the job of the owner to maintain the certificates. The recommended approach would be to use a proper certificate manager and get signed certificates from a known Certificate Authority. Once these are available, create the secrets using the following command \r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433429233, 'comment_body': '```suggestion\r\nOnce the Secrets are in the cluster, we can modify the parameter `INSTALL_SELF_SIGNED_CERT` to `false` and execute these scripts to deploy the components. This modification is required only when Secrets are created but the components (ValidatingWebhookConfig, RBAC) are yet to be deployed.\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433429631, 'comment_body': '```suggestion\r\nAt this point the operator will start the admission controller Deployment automatically and the Webhook will start intercepting requests for Rook resources. \r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433429738, 'comment_body': '```suggestion\r\nNow that the Secrets have been deployed, we can deploy the operator and create a cluster using the following commands:\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433429824, 'comment_body': '```suggestion\r\nRun the following commands:\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433429912, 'comment_body': '```suggestion\r\n1. Stores these certificates as a Kubernetes Secret.\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433431565, 'comment_body': 'Should use const for ""csi-rbdplugin-provisioner"". This const probably already exists in the CSI code.', 'comment_created': datetime.datetime(2020, 6, 1, 19, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433432250, 'comment_body': 'I think my editor normally separates stdlib includes from other includes such that stdlib includes are first and separated by a line. Do you also see that @leseb and @travisn ?', 'comment_created': datetime.datetime(2020, 6, 1, 19, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433432637, 'comment_body': ""Service account names don't need to end with `-sa`. It's redundant since k8s already keeps track of it as a service account."", 'comment_created': datetime.datetime(2020, 6, 1, 19, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433432916, 'comment_body': '""webhook-certificates"" is more clear', 'comment_created': datetime.datetime(2020, 6, 1, 19, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433433262, 'comment_body': 'This is already defined as a const (`secretMountPath`) with another name in a different file. Why here also? TBH, I would think `tlsDir` is the better named const, and we instruct the secret to use that dir.', 'comment_created': datetime.datetime(2020, 6, 1, 19, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433435739, 'comment_body': 'Would it be more clear as such?\r\n\r\n```suggestion\r\n\t\treturn nil, errors.Wrap(err, ""failed to marshal response to AdmissionReview"")\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433435884, 'comment_body': 'What request? This is very vague.', 'comment_created': datetime.datetime(2020, 6, 1, 19, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433436009, 'comment_body': '```suggestion\r\n\t\tlogger.Errorf(""failed to write response to webhook request. %v"", writeErr)\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433436242, 'comment_body': '```suggestion\r\n\t\tlogger.Errorf(""failed to handle webhook request. %v"", err)\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433438079, 'comment_body': '```suggestion\r\n\tlogger.Info(""starting the webhook for backend %q"", storage)\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433440082, 'comment_body': '```suggestion\r\n\tadmissionCmd.Flags().StringVar(&storageSystem, ""storage"", ""ceph"", ""Starts the admission controller for corresponding storage backend. Supported values are: \\""ceph\\"""")\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433441143, 'comment_body': 'More appropriate name is `storageBackend`.\r\n```suggestion\r\n\tstorageBackend        = ""ceph""\r\n```\r\n\r\nIn reality, this code is designed to support other backends in the future, not just Ceph, but Ceph is very hardcoded at the moment. This isn\'t necessarily bad, but it may actually be better to suggest this more with the naming.\r\n\r\n```suggestion\r\n\t// StorageBackendCeph is the value used to select the admission controller for Rook\'s Ceph backend.\r\n\tStorageBackendCeph        = ""ceph""\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 19, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'BlaineEXE', 'type': 'User'}, {'comment_id': 433813664, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433813929, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433814175, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433814304, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433814640, 'comment_body': 'added', 'comment_created': datetime.datetime(2020, 6, 2, 11, 46, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433815097, 'comment_body': 'There are no changes. These are set of commands we should run to setup the admission controllers. common.yaml needs to be run beforehand to create the namespace', 'comment_created': datetime.datetime(2020, 6, 2, 11, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433815340, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433815464, 'comment_body': 'added', 'comment_created': datetime.datetime(2020, 6, 2, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433815648, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 48, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433816285, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 49, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433816440, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433817151, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 433817535, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 2, 11, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434019112, 'comment_body': 'yeah @vbnrh, this is only a suggestion. feel free to go ahead with your current approach :grin: ', 'comment_created': datetime.datetime(2020, 6, 2, 16, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'prksu', 'type': 'User'}, {'comment_id': 434031779, 'comment_body': ""Hey @prksu, It was a good suggestion worth looking into. Thanks for it.\n\nMaybe we'll have some follow up on this in future.."", 'comment_created': datetime.datetime(2020, 6, 2, 16, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434188690, 'comment_body': '```suggestion\r\nThe above approach of using self-signed certificates is discouraged as it would be the job of the owner to maintain the certificates. The recommended approach would be to use a proper certificate manager and get signed certificates from a known Certificate Authority. Once these are available, create the secrets using the following command:\r\n```', 'comment_created': datetime.datetime(2020, 6, 2, 21, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 434189718, 'comment_body': 'Here you will need to update the deployment if it already exists in case the spec changed. \r\n\r\nBecause of this, right now if you restart the operator it is failing with this error:\r\n```\r\n: failed to start webhook: failed to initialize webhook: failed to create service: failed to create admission controller replica set: deployments.apps ""rook-admission-controller"" already exists\r\n```', 'comment_created': datetime.datetime(2020, 6, 2, 21, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 434190140, 'comment_body': 'Define this const at the top of the source file. \r\n```\r\n  appName = ""rook-ceph-admission-controller""\r\n```\r\n\r\n```suggestion\r\n\tantiAffinity := csi.GetPodAntiAffinity(k8sutil.AppAttr, appName)\r\n```\r\nThere are several places that you can make these changes to use `k8sutil.AppAttr` and `appName`.', 'comment_created': datetime.datetime(2020, 6, 2, 21, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 434191916, 'comment_body': 'Calling `k8sutil.CreateDeployment()` should take care of the update for you.', 'comment_created': datetime.datetime(2020, 6, 2, 21, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 434305996, 'comment_body': 'Implementation of cert-manager needs a wider discussion. We may use it sometime in the future after discussions.  Thanks for your suggestion', 'comment_created': datetime.datetime(2020, 6, 3, 4, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434327739, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 3, 6, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434328149, 'comment_body': 'changed', 'comment_created': datetime.datetime(2020, 6, 3, 6, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434328739, 'comment_body': 'Good suggestion for stating the supported values. Fixed !  Thanks', 'comment_created': datetime.datetime(2020, 6, 3, 6, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434330157, 'comment_body': 'Surely adds a level of clarity. Thanks ', 'comment_created': datetime.datetime(2020, 6, 3, 6, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434333487, 'comment_body': 'I\'ve changed it to ""handling the webhook request"" as given in the other lines below it', 'comment_created': datetime.datetime(2020, 6, 3, 6, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434333565, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 3, 6, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434333668, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 3, 6, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434333773, 'comment_body': 'added', 'comment_created': datetime.datetime(2020, 6, 3, 6, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434334569, 'comment_body': 'I have removed secretMountPath and used tlsDir instead. Thanks for this suggestion', 'comment_created': datetime.datetime(2020, 6, 3, 6, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434335095, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 3, 6, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434335316, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 6, 3, 6, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434346301, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 3, 6, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434347648, 'comment_body': ""All external serviceacccounts for the cephfs, rbd have been named with the suffix. I thought we may need to follow the same for admission-controllers. I'll change it."", 'comment_created': datetime.datetime(2020, 6, 3, 6, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434352675, 'comment_body': ""I've changed the name as per your suggestion. We will most likely be changing it once we add support for other backends"", 'comment_created': datetime.datetime(2020, 6, 3, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434354244, 'comment_body': 'fixed all places', 'comment_created': datetime.datetime(2020, 6, 3, 7, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434405987, 'comment_body': 'didnt know this. updated ! Thanks', 'comment_created': datetime.datetime(2020, 6, 3, 8, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434408940, 'comment_body': 'This should be resolved now. PodAntiAffinity is working as expected.', 'comment_created': datetime.datetime(2020, 6, 3, 8, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434409084, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 3, 8, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434409196, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 3, 8, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434409253, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 6, 3, 8, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434411162, 'comment_body': 'I just needed the GetPodAntiAffinity function exported. This is unrelated to admission-controllers PR. We could include the fixes for CSI code in another PR maybe ?', 'comment_created': datetime.datetime(2020, 6, 3, 8, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434521249, 'comment_body': ""I don't see it, before `package admission`"", 'comment_created': datetime.datetime(2020, 6, 3, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'leseb', 'type': 'User'}, {'comment_id': 434530859, 'comment_body': 'Sorry, I had added it initially but reverted the file later on. Now its fixed', 'comment_created': datetime.datetime(2020, 6, 3, 12, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 434848264, 'comment_body': '```suggestion\r\n- Added [admission controller](Documentation/admission-controller-usage.md) support for Ceph CRD validations.\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 20, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 434849724, 'comment_body': 'Each rook operator will need to deploy its own admission controller. in this PR only the admission controller for Ceph is being implemented. Wherever there is something specific to the ceph admission controller we should add it to the name. \r\n```suggestion\r\nSERVICE_NAME=""rook-ceph-admission-controller""\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 20, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 434854734, 'comment_body': 'Can we also log the name of the CR that was processed? Or else it would be good to add logging in another function where the CR is processed. ', 'comment_created': datetime.datetime(2020, 6, 3, 21, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 434857097, 'comment_body': 'I get an error here when restarting the operator:\r\n```\r\nfailed to start webhook: failed to initialize webhook: failed to create service: failed to create admission controller replica set: deployments.apps ""rook-admission-controller"" already exists\r\n```\r\nAfter you fix this, please verify that the operator can restart successfully. The operator is restarted by deleting the operator pod.', 'comment_created': datetime.datetime(2020, 6, 3, 21, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 434860452, 'comment_body': 'We really need some unit tests for the new admission package. These functions that create service, deployment, or pod specs are generally simple to test. You can see other operator unit tests for examples where services or other resources are created.', 'comment_created': datetime.datetime(2020, 6, 3, 21, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 434869784, 'comment_body': 'Integration tests will also confirm the admission controller can start and run successfully. I believe we could keep this fairly simple and get a lot of validation with these steps:\r\n- In the [CreateCephOperator()](https://github.com/rook/rook/blob/d8949ec945b036172588f587698e45633d5c392a/tests/framework/installer/ceph_installer.go#L81) method:\r\n   - Create the RBAC. The easiest thing might be to add the yaml to GetRookOperator() in the ceph_manifests.go.\r\n   - Call out to the script that generates the self-signed cert\r\n- After the tests start the operator around [this line](https://github.com/rook/rook/blob/d8949ec945b036172588f587698e45633d5c392a/tests/framework/installer/ceph_installer.go#L426), verify that the admission controller is in running state\r\n```\r\n\tif !h.k8shelper.IsPodInExpectedState(""rook-ceph-admission-controller"", onamespace, ""Running"") {\r\n\t\tlogger.Error(""admission controller is not running"")\r\n\t\treturn false, err\r\n\t}\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 3, 21, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 435026694, 'comment_body': '@travisn Could you please check if you\'re running the latest build for this PR. I restarted the operator pod and i did not see any errors for this.\r\n>  failed to create admission controller replica set \r\n>\r\nI already replaced this with ""failed to create admission controller deployment"". We should\'nt be seeing anything for the replica set ', 'comment_created': datetime.datetime(2020, 6, 4, 6, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 435308627, 'comment_body': 'Oops, something was stale in my build yesterday, it is working today thanks!', 'comment_created': datetime.datetime(2020, 6, 4, 14, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 435310068, 'comment_body': 'In case the service spec has changed between releases, the `k8sutils.CreateOrUpdateService()` method will help here.', 'comment_created': datetime.datetime(2020, 6, 4, 14, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 438447379, 'comment_body': ""Instead of returning false, I'd suggest and `assert.Fail()` and then allow the test to continue. This will raise an error to fail the test, but it won't prevent the test from running."", 'comment_created': datetime.datetime(2020, 6, 10, 22, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 438449780, 'comment_body': ""You're configuring the admission controller after the helm chart is installed, which means the operator will already be running. You need to configure the admission controller before launching the helm chart."", 'comment_created': datetime.datetime(2020, 6, 10, 22, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440468691, 'comment_body': '```suggestion\r\nNow that the Secrets have been deployed, we can deploy the operator:\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 21, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440468839, 'comment_body': 'There are at least a couple places where I still see `rook-admission-controller` as the name instead of the changed name.\r\n```suggestion\r\n    The script file creates a self-signed Kubernetes approved certificate and deploys it as a secret onto the cluster. It is mandatory that the Secret is named ""rook-ceph-admission-controller"" because Rook will look for the secret with such name before starting the admission controller servers. \r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 21, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440474025, 'comment_body': ""Instead of the command being `rook admission-controller storage=ceph`, I'm going to suggest we change it to make the admission controller a child of the storage provider so the command would be `rook ceph admission-controller`. The advantages of this approach:\r\n- This clearly implements that one admission controller is implemented per storage provider, if a provider chooses to implement it\r\n- There is a child command for the admission controller, with no arguments necessary\r\n- The call to `admission.StartServer()` on line 47 below would take the callback function such as `cephadmission.ValidateCephResource`, which makes it more strongly typed\r\n- This file would move to `cmd/rook/ceph/admission.go`"", 'comment_created': datetime.datetime(2020, 6, 15, 22, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440474268, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 6, 15, 22, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440474805, 'comment_body': '```suggestion\r\n\t\t\tlogger.Infof(""secret %q not found. proceeding without the admission controller"", appName)\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 22, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440475271, 'comment_body': 'No need for this namespace info, right? ', 'comment_created': datetime.datetime(2020, 6, 15, 22, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440475433, 'comment_body': ""Creating a service is already logged in the `CreateOrUpdateService()` func, although it's debug level, which is fine."", 'comment_created': datetime.datetime(2020, 6, 15, 22, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440475885, 'comment_body': ""let's remove all the logging for the namespace. If it's still needed, you could modify the line before to include it in the same message."", 'comment_created': datetime.datetime(2020, 6, 15, 22, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440476604, 'comment_body': '```suggestion\r\n\tlogger.Debug(""checking for admission controller secrets"")\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 22, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440477438, 'comment_body': ""Since you're done troubleshooting the CI we can remove this verbose output, right? This whole func can be deleted."", 'comment_created': datetime.datetime(2020, 6, 15, 22, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440484096, 'comment_body': ""Actually let's add the service account, clusterrole, and clusterrolebinding to the common.yaml. I know we had some discussion previously about just having them in this script, but here are the reasons for adding them to common.yaml:\r\n- The permissions granted to the service account are a small subset of the permissions the operator is already requesting. \r\n- Those resources are already added to the helm chart and the integration tests. We really should have consistency between common.yaml and the helm chart.\r\n- The ValidatingWebhookConfiguration resource is really the only resource we need to be careful creating only when needed."", 'comment_created': datetime.datetime(2020, 6, 15, 22, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440485745, 'comment_body': ""Why is `BASE_DIR` the parent directory? If it were the current directory of the test instead of the parent, this script wouldn't need to be different from the copy under `tests/scripts`, right?"", 'comment_created': datetime.datetime(2020, 6, 15, 22, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440486500, 'comment_body': 'If you change the BASE_DIR according to the other comment, could this script just call a symlink to the other one to avoid the duplication of the rest of the script after line 8?', 'comment_created': datetime.datetime(2020, 6, 15, 22, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440486753, 'comment_body': 'can this just be a symlink if the RBAC is moved to common.yaml as suggested?', 'comment_created': datetime.datetime(2020, 6, 15, 22, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440486972, 'comment_body': ""Can this just be a symlink? I don't see any differences from the original script."", 'comment_created': datetime.datetime(2020, 6, 15, 22, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440487063, 'comment_body': 'This script looks the same as well', 'comment_created': datetime.datetime(2020, 6, 15, 22, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 440598116, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 6, 16, 5, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 440598417, 'comment_body': 'Fixed at all places in this document', 'comment_created': datetime.datetime(2020, 6, 16, 5, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 440884070, 'comment_body': 'Added the RBACs to common.yam', 'comment_created': datetime.datetime(2020, 6, 16, 14, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441009825, 'comment_body': 'I have added the logs in doServeAdmitFunc `logger.Infof(""processing webhook request for resource type %s"", admissionReviewReq.Request.Kind.Kind)` ', 'comment_created': datetime.datetime(2020, 6, 16, 17, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441010299, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 6, 16, 17, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441010445, 'comment_body': 'Added integration tests', 'comment_created': datetime.datetime(2020, 6, 16, 17, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441010519, 'comment_body': 'Updated', 'comment_created': datetime.datetime(2020, 6, 16, 17, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441011390, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 6, 16, 17, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441011735, 'comment_body': 'Removed namespace logs', 'comment_created': datetime.datetime(2020, 6, 16, 17, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441012227, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 16, 17, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441012769, 'comment_body': ""I'll remove them once all the other updates  are done in cases there are CI failures"", 'comment_created': datetime.datetime(2020, 6, 16, 17, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441082801, 'comment_body': 'Moved to tests/scripts as wrapper script has been added ', 'comment_created': datetime.datetime(2020, 6, 16, 19, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441083550, 'comment_body': 'moved to tests/scripts as discussed', 'comment_created': datetime.datetime(2020, 6, 16, 19, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441083814, 'comment_body': 'Moved to tests/scripts as wrapper script has been added ', 'comment_created': datetime.datetime(2020, 6, 16, 19, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441084482, 'comment_body': ""It makes sense, i've changed the BASE_DIR to point to current dir"", 'comment_created': datetime.datetime(2020, 6, 16, 19, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441084959, 'comment_body': 'changed BASE_DIR to point to current dir... Have added a wrapper script', 'comment_created': datetime.datetime(2020, 6, 16, 19, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441327985, 'comment_body': 'I have added the command to ceph ', 'comment_created': datetime.datetime(2020, 6, 17, 7, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 441796836, 'comment_body': 'How about moving this script up a directory to the `ceph` folder? If this is the only script in the folder, no need for the folder. ', 'comment_created': datetime.datetime(2020, 6, 17, 19, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441797491, 'comment_body': ""What is the message if the deploy.sh isn't found? If they don't have the full directory structure, let's make sure there is a good error message about the missing script."", 'comment_created': datetime.datetime(2020, 6, 17, 19, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441797701, 'comment_body': '```suggestion\r\ncluster/examples/kubernetes/ceph/config-admission-controller.sh\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 19, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441797971, 'comment_body': 'and rename it `config-admission-controller.sh` since there is only one being configured', 'comment_created': datetime.datetime(2020, 6, 17, 19, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441799157, 'comment_body': ""`cephadmission.ValidateCephResource` should be a parameter to the `StartServer()` func. There shouldn't be anything ceph-specific in this admission controller package."", 'comment_created': datetime.datetime(2020, 6, 17, 19, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441799540, 'comment_body': '```suggestion\r\n\t\t\tlogger.Infof(""secret %q not found. proceeding without the admission controller"", appName)\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 20, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441800252, 'comment_body': 'As a follow-up PR, please also add unit tests in addition to the integration tests.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441800936, 'comment_body': 'The appName and service account names should also be parameters to the StartServer() so we can remove ceph from this package. (Perhaps there should be a struct for the settings required). Other storage providers should also be able to use this same admission controller package to start their controllers.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441802404, 'comment_body': ""How about renaming this file to admission.go and moving it up a directory? Let's think of this validation as part of the operator instead of a separate admission package."", 'comment_created': datetime.datetime(2020, 6, 17, 20, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441803329, 'comment_body': '```suggestion\r\n\t\treturn errors.Wrap(err, ""failed to create deployment"")\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 20, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441803437, 'comment_body': '```suggestion\r\nfunc createWebhookDeployment(context *clusterd.Context, admissionImage string) error {\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 20, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441804625, 'comment_body': 'Calling it the admission controller is more intuitive to me than calling it the webhook. What do you think?\r\n```suggestion\r\nfunc StartControllerIfSecretPresent(context *clusterd.Context, admissionImage string) error {\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 20, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441805143, 'comment_body': '```suggestion\r\nfunc (h *CephInstaller) startAdmissionController(namespace string) error {\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 20, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441812574, 'comment_body': 'The scripts should be named specifically for the admission controller. For example, this script could be deploy_admission_controller_test.sh and the other one (deploy.sh) could be deploy_admission_controller.sh', 'comment_created': datetime.datetime(2020, 6, 17, 20, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441819959, 'comment_body': ""The integration tests are not running in my local test environment. This really needs to be working in both developer environments and the CI. I was able to get it to successfully start in my environment by doing the following:\r\n- Comment out lines 5 and 6. \r\n   - It is important to remove `sudo` from this script so we don't prompt for the password. We're just running in the context of the logged in user.\r\n- Modify line 7 to pick up my default config: `export KUBECONFIG=~/.kube/config`\r\n\r\nWhat about the following approach to get it to work in both dev environments and the CI?\r\n1. If KUBECONFIG is set as an env var to the tests, use it\r\n1. Else if ~/.kube/config is found, set KUBECONFIG to that path\r\n1. Else set KUBECONFIG to admin.conf as you have already in this script"", 'comment_created': datetime.datetime(2020, 6, 17, 20, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 441820547, 'comment_body': ""My local tests also failed because the current working directory was github.com/rook/rook/tests/integration instead of github.com/rook/rook as these tests assume. We'll need this to work in both environments. "", 'comment_created': datetime.datetime(2020, 6, 17, 20, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 442088899, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 6, 18, 9, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 442088999, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 18, 9, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 442089118, 'comment_body': 'Added checks', 'comment_created': datetime.datetime(2020, 6, 18, 9, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 442133582, 'comment_body': 'The appName and serviceAccount are used for creating the pods. They are being used before `StartServer()`. I had initially named them as rook-admission-controller for the very reason.  I thought we were going with ceph implementation for now which is why i had changed it. How about i add configuraiblity of service-account and appName in a follow up PR?', 'comment_created': datetime.datetime(2020, 6, 18, 10, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 442133993, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 6, 18, 10, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 442135002, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 18, 10, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 442136907, 'comment_body': 'Works for me ! ', 'comment_created': datetime.datetime(2020, 6, 18, 10, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 442137130, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 18, 10, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 442161466, 'comment_body': ""I've moved it up as suggested."", 'comment_created': datetime.datetime(2020, 6, 18, 11, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 442161763, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 18, 11, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 443986372, 'comment_body': 'I have added findRookRoot func. It should now be able to find the scripts if the cwd is inside rook repo.', 'comment_created': datetime.datetime(2020, 6, 23, 6, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 443986464, 'comment_body': 'Added this condition on the file', 'comment_created': datetime.datetime(2020, 6, 23, 6, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 443986592, 'comment_body': 'Changed the file name.', 'comment_created': datetime.datetime(2020, 6, 23, 6, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 444411745, 'comment_body': 'Please check for all places in this package for references to Ceph. There should not be any references to ceph in this package. Anything ceph-specific should be passed as arguments like with `StartServer()`.', 'comment_created': datetime.datetime(2020, 6, 23, 18, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 444414628, 'comment_body': ""I'm thinking we need to define a struct that has all the provider-specific parameters. For example:\r\n```\r\ntype ProviderConfig struct {\r\n  // add fields for the app name, handler function (instead of passing it to `StartServer()`)\r\n  // also add fields for other context instead of using package vars, such as the `context` var that is defined in server.go\r\n}\r\n```\r\nThen we can finish this PR with everything needed for other storage providers to create an admission controller."", 'comment_created': datetime.datetime(2020, 6, 23, 18, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 444416129, 'comment_body': 'need to return the error here', 'comment_created': datetime.datetime(2020, 6, 23, 18, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'travisn', 'type': 'User'}, {'comment_id': 444484477, 'comment_body': 'Addressed as discussed in call', 'comment_created': datetime.datetime(2020, 6, 23, 20, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 444484543, 'comment_body': 'Done !', 'comment_created': datetime.datetime(2020, 6, 23, 20, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 444700759, 'comment_body': 'This is in the wrong place (Look at Line 258 and 289). Move it to the end of CRD section. Somewhere after Line 718.', 'comment_created': datetime.datetime(2020, 6, 24, 7, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 444702353, 'comment_body': ""Isn't this a generic feature that other components can use? In that case, I'd suggest something like\r\n```suggestion\r\n- Added [admission controller](Documentation/admission-controller-usage.md) support.\r\n  - Some Ceph CRD validations are added.\r\n  - Can be extended for use in other components.\r\n```"", 'comment_created': datetime.datetime(2020, 6, 24, 7, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 444703152, 'comment_body': '```suggestion\r\n    echo """"${BASE_DIR}""/deploy_admission_controller.sh not found!""\r\n```\r\nAvoid unnecessary spaces.', 'comment_created': datetime.datetime(2020, 6, 24, 7, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 444719926, 'comment_body': 'Why is it Multus Authors?', 'comment_created': datetime.datetime(2020, 6, 24, 8, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'umangachapagain', 'type': 'User'}, {'comment_id': 444762810, 'comment_body': 'Original file belongs to multus team. Hence their header', 'comment_created': datetime.datetime(2020, 6, 24, 9, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 444766355, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 24, 9, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 444766476, 'comment_body': 'Added more information. Thanks', 'comment_created': datetime.datetime(2020, 6, 24, 9, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}, {'comment_id': 444766505, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 6, 24, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vbnrh', 'type': 'User'}]","[{'commit_sha': 'ce1003aef8d7677062ff7bf9fb447d368e35cd2e', 'committer_username': 'vbnrh', 'committer_name': 'Vineet Badrinath', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 19, 6, 52, 14, tzinfo=datetime.timezone.utc)}]",Vineet Badrinath,57935785,,User,,15,,2,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
62921553,rook,rook/rook,Go,2674,12206,279,577,11407,133,24,19,"[{'id': 505648535, 'number': 6455, 'closed': datetime.datetime(2020, 10, 20, 19, 3, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 19, 3, 17, 59, tzinfo=datetime.timezone.utc), 'time_taken': 143134.0, 'time_delta': '1 day, 15:45:34', 'additions': 255, 'deletions': 86, 'state': 'closed'}, {'id': 504288173, 'number': 6440, 'closed': datetime.datetime(2020, 10, 17, 23, 33, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 15, 18, 12, 33, tzinfo=datetime.timezone.utc), 'time_taken': 192056.0, 'time_delta': '2 days, 5:20:56', 'additions': 255, 'deletions': 134, 'state': 'closed'}, {'id': 477126340, 'number': 6202, 'closed': datetime.datetime(2020, 11, 2, 16, 34, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 1, 14, 36, 32, tzinfo=datetime.timezone.utc), 'time_taken': 5363903.0, 'time_delta': '62 days, 1:58:23', 'additions': 525, 'deletions': 8, 'state': 'closed'}, {'id': 469608355, 'number': 6112, 'closed': datetime.datetime(2020, 9, 25, 0, 20, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 16, 29, 1, tzinfo=datetime.timezone.utc), 'time_taken': 3225101.0, 'time_delta': '37 days, 7:51:41', 'additions': 122, 'deletions': 0, 'state': 'closed'}, {'id': 454428714, 'number': 5863, 'closed': datetime.datetime(2020, 8, 24, 23, 26, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 11, 50, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2979332.0, 'time_delta': '34 days, 11:35:32', 'additions': 500, 'deletions': 245, 'state': 'closed'}, {'id': 453017035, 'number': 5854, 'closed': datetime.datetime(2020, 7, 23, 14, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 3, 55, 1, tzinfo=datetime.timezone.utc), 'time_taken': 297539.0, 'time_delta': '3 days, 10:38:59', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 449536213, 'number': 5830, 'closed': datetime.datetime(2020, 8, 4, 14, 57, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 14, 54, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1728198.0, 'time_delta': '20 days, 0:03:18', 'additions': 115, 'deletions': 0, 'state': 'closed'}, {'id': 446085584, 'number': 5785, 'closed': datetime.datetime(2020, 7, 14, 17, 6, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 8, 36, 21, tzinfo=datetime.timezone.utc), 'time_taken': 549027.0, 'time_delta': '6 days, 8:30:27', 'additions': 106, 'deletions': 1, 'state': 'closed'}, {'id': 433842508, 'number': 5650, 'closed': datetime.datetime(2020, 7, 3, 9, 15, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 19, 10, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1778719.0, 'time_delta': '20 days, 14:05:19', 'additions': 1840, 'deletions': 707, 'state': 'closed'}, {'id': 425198846, 'number': 5567, 'closed': datetime.datetime(2020, 6, 15, 19, 5, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 16, 20, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1478693.0, 'time_delta': '17 days, 2:44:53', 'additions': 181, 'deletions': 0, 'state': 'closed'}, {'id': 422825227, 'number': 5541, 'closed': datetime.datetime(2020, 6, 5, 5, 38, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 16, 29, 59, tzinfo=datetime.timezone.utc), 'time_taken': 911312.0, 'time_delta': '10 days, 13:08:32', 'additions': 4, 'deletions': 4, 'state': 'closed'}]"
