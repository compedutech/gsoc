pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1007488653,Typescript translator,,True,1,https://api.github.com/repos/alexisthedev/hephaestus/pulls/1,https://github.com/alexisthedev/hephaestus/pull/1,closed,1020,530,13,18,0,29,0,0,[],2022-07-25 15:55:18+00:00,2022-07-28 14:09:51+00:00,252873.0,"2 days, 22:14:33","[{'comment_id': 931854421, 'comment_body': 'does not have => does not support', 'comment_created': datetime.datetime(2022, 7, 28, 7, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931857321, 'comment_body': 'This line here have 4 whitespaces. Ensure that there no whitespaces in this line; just \\n.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931857717, 'comment_body': 'The same here. Please remove trailing whitespaces.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931858952, 'comment_body': 'add a newline here. There should be 2 newlines among top-level definitions, and one newline among class methods.\r\n', 'comment_created': datetime.datetime(2022, 7, 28, 7, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931859856, 'comment_body': 'add a whitespace after comma', 'comment_created': datetime.datetime(2022, 7, 28, 7, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931860779, 'comment_body': 'is this type used?', 'comment_created': datetime.datetime(2022, 7, 28, 7, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931861508, 'comment_body': 'Remove dead imports.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931861690, 'comment_body': 'add missing newline', 'comment_created': datetime.datetime(2022, 7, 28, 7, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931862685, 'comment_body': 'This method is the same with that included in the kotlin.py file. Please add this method to a utility module and import from there.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931863594, 'comment_body': 'this is a dead variable.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931864025, 'comment_body': 'Better use `TypeScriptBuiltinFactory().get_function_type().name`', 'comment_created': datetime.datetime(2022, 7, 28, 7, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931866877, 'comment_body': 'I think the following is simpler\r\n\r\n```python\r\nparam_types = t.type_args[:-1]\r\nret_type = t.type_args[-1]\r\nres = ""({}) => {}"".format(\r\n    "","".join([\r\n        ""p"" + str(i) + "": "" + str(pt) for i, pt in enumerate(param_types)\r\n    ]),\r\n    ret_type\r\n)\r\n```', 'comment_created': datetime.datetime(2022, 7, 28, 7, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931871025, 'comment_body': 'call `self._reset_state()` at this point. In this way, if we want to translate a new program using the same visitor, it is going to use a fresh state, and not the state from the previous translation.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931872001, 'comment_body': 'remove newline. Remember, only one newline among class methods.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931872485, 'comment_body': 'remove emptylines', 'comment_created': datetime.datetime(2022, 7, 28, 7, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931872702, 'comment_body': 'remove comments.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931873349, 'comment_body': 'you can write the above expression in one line.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931873664, 'comment_body': 'see below.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931874999, 'comment_body': 'remove the line above. `res = """"` is dead.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931875430, 'comment_body': 'remove one blank line.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931875962, 'comment_body': 'remove one whitespace after `=`', 'comment_created': datetime.datetime(2022, 7, 28, 7, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931876562, 'comment_body': 'I think we should represent characters a strings.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931876768, 'comment_body': 'remove the blank lines in this method.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931876981, 'comment_body': 'remove blank line', 'comment_created': datetime.datetime(2022, 7, 28, 7, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931877087, 'comment_body': 'same here.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931878430, 'comment_body': 'this line is too long. Please write it across multiple lines or even assign it to a variable.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931879851, 'comment_body': 'the same here. this line is too long.\r\n\r\nAlso, I noticed that the method `needs_this_prefix` is used in two different places. So, I think we should extract a top-level function from this nested function.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 931880383, 'comment_body': 'Always add a newline at the end of a file.', 'comment_created': datetime.datetime(2022, 7, 28, 7, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 932010746, 'comment_body': ""Don't forget to dump the return type of the lambda here."", 'comment_created': datetime.datetime(2022, 7, 28, 9, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}]","[{'commit_sha': '773718246be34eaedd665beeabf637d0fbcc0f78', 'committer_username': 'theosotr', 'committer_name': 'Thodoris Sotiropoulos', 'committer_email': 'theosotr@windowslive.com', 'commit_date': datetime.datetime(2014, 1, 18, 0, 23, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7919b1930c7447ded600ad3136bd056b7f336900', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49694df5dc3f4d4c9b9dd511916e7f6e162e3d1a', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a724e9ac211460df4289e1aa088d3c3e8c383c5', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c734c567dd132c8c7817fc22b85a5bb3d9731934', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1b1c1a890efd00cac2f3fa2bc73ef030242e023', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2846f722e16e0c4369cb59b1796d4b79c67daa62', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3514f21c244a4b441a94f42a0f76cc77a558f4b9', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8a6b684628170b16c6aa651637eadf54b0ee1d6', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85339567c785ad9cd903383858bcc6d829db9eb5', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3afbd2c7a7c8caab40d30e88baf84b3296aefe9', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbfcab367f0c48c71db8fff203c43dda3fed2a9f', 'committer_username': 'theosotr', 'committer_name': 'Thodoris Sotiropoulos', 'committer_email': 'theosotr@windowslive.com', 'commit_date': datetime.datetime(2014, 1, 18, 0, 23, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a796dbdd94706471d1669be5d87a1feaab8c2a00', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5a55c4723bfd911a152dd31f33fab690c7f989c', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14e064fd73706078a1e9c794ea102d1a915372c2', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a64850a979332ff7344eb7dd3ff0d61f81884c99', 'committer_username': 'theosotr', 'committer_name': 'Thodoris Sotiropoulos', 'committer_email': 'theosotr@windowslive.com', 'commit_date': datetime.datetime(2014, 1, 18, 0, 23, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06d06a74785e4f9198dcb3d237d7b49cc9777816', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44b30ed90c9c2a8b56a1f2a13040cb5c8e1ba7f8', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}]",Alex Papadopoulos,20843172,,User,,19,,18,13
1011865648,Add Null Type in TS and Kotlin. Add Null Constant and Undefined Type in Typescript,,True,3,https://api.github.com/repos/alexisthedev/hephaestus/pulls/3,https://github.com/alexisthedev/hephaestus/pull/3,closed,88,7,10,6,4,7,1,1,[{'name': 'enhancement'}],2022-07-29 11:14:28+00:00,2022-08-24 07:58:53+00:00,2234665.0,"25 days, 20:44:25","[{'comment_id': 938724773, 'comment_body': 'remove FIXME', 'comment_created': datetime.datetime(2022, 8, 5, 11, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 938724880, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 8, 5, 11, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 938725609, 'comment_body': 'I think the parent of `NullType` should be `AnyType`.', 'comment_created': datetime.datetime(2022, 8, 5, 11, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 938727194, 'comment_body': 'I think the object type should be the supertype of `NullType`.', 'comment_created': datetime.datetime(2022, 8, 5, 11, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 938727434, 'comment_body': 'I think the object type should be the supertype of `UndefinedType`.', 'comment_created': datetime.datetime(2022, 8, 5, 11, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 953450989, 'comment_body': 'Why `primitive=True`?', 'comment_created': datetime.datetime(2022, 8, 24, 7, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 953451142, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2022, 8, 24, 7, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}]","[{'commit_sha': 'da28a03cfa07511db22cfdfef06501ccddcafe28', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54f131a2a5153f49eb79bb26760c28d9991872ed', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec157a72b3de98765665b793b3d6c4d44219d134', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff23b5089b5f949d6d6909c4bf0bf0be2e372bf2', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e20be4f3a8dae7b19e178a90686bc6ed3d788173', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4453d0154be85da96072c1ef12aba6c1124c4cc4', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}]",Alex Papadopoulos,20843172,,User,,19,,18,13
1035090725,TypeScript Literal Types: String & Number,,True,12,https://api.github.com/repos/alexisthedev/hephaestus/pulls/12,https://github.com/alexisthedev/hephaestus/pull/12,closed,155,11,6,7,0,29,1,1,[{'name': 'enhancement'}],2022-08-24 07:32:55+00:00,2022-08-30 10:56:25+00:00,530610.0,"6 days, 3:23:30","[{'comment_id': 954682081, 'comment_body': 'This is condition here is not needed, as you rely on runtime polymorphism.', 'comment_created': datetime.datetime(2022, 8, 25, 8, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954685712, 'comment_body': 'It should inherit from `NumberType`, because a numeric literal type is subtype of `number`.', 'comment_created': datetime.datetime(2022, 8, 25, 8, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954687356, 'comment_body': 'It should inherit from  `StringType`, because a numeric literal type is subtype of `string`.', 'comment_created': datetime.datetime(2022, 8, 25, 8, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954688449, 'comment_body': 'add  a newline at the end of file.', 'comment_created': datetime.datetime(2022, 8, 25, 8, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954703762, 'comment_body': ""I think this method is dead, isn't it?"", 'comment_created': datetime.datetime(2022, 8, 25, 8, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954704010, 'comment_body': 'same as above.', 'comment_created': datetime.datetime(2022, 8, 25, 8, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954704261, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2022, 8, 25, 9, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954709523, 'comment_body': 'add constant variables to avoid magic numbers, e.g.,\r\n\r\n```python\r\nMAX_NUM_LITERAL_TYPES = 10\r\nMAX_STRING_LITERAL_TYPES = 10\r\nliteral_types = LiteralTypes(MAX_STRING_LITERAL_TYPES, MAX_NUM_LITERAL_TYPES)\r\n```\r\n\r\nAlso, add a `TODO` comment that the above limits should become user-configurable. \r\n', 'comment_created': datetime.datetime(2022, 8, 25, 9, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954711352, 'comment_body': ""Why don't we generate two types: one string literal and one number literal?"", 'comment_created': datetime.datetime(2022, 8, 25, 9, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954712423, 'comment_body': 'do you need this field (i.e., `self.literals`)? If not, remove it. ', 'comment_created': datetime.datetime(2022, 8, 25, 9, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954713159, 'comment_body': 'I think this method is not needed (see below about method `get_string_literals`)', 'comment_created': datetime.datetime(2022, 8, 25, 9, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954713655, 'comment_body': 'I think this method is not needed (see below about method `get_number_literals`)\r\n', 'comment_created': datetime.datetime(2022, 8, 25, 9, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954715790, 'comment_body': 'Assuming the following number literal type: ""1""\r\n\r\nIs the name of the above type `NumberLiteralType` or ""1""?. If it is the second case, this code is dead.', 'comment_created': datetime.datetime(2022, 8, 25, 9, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954867675, 'comment_body': 'Name of the type is ""1"". It is dead. Removed since we don\'t create actual constants, we just use the already generated names.', 'comment_created': datetime.datetime(2022, 8, 25, 11, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 954869484, 'comment_body': '> we just use the already generated names.\r\n\r\nwhere?', 'comment_created': datetime.datetime(2022, 8, 25, 11, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954878237, 'comment_body': 'For the `StringLiteralType`, get_name actually returns `"" + self.name + ""` as seen [here](https://github.com/alexisthedev/hephaestus/pull/12/files#diff-04b80108daf0258108951e40850a31fbcdb0f6a68f2b2b80c7b6aac184a63316R239).\r\n\r\nFor the `NumberLiteralType`, it just returns the name which is converted to a string in the translator (same as all other type names).\r\n\r\nSince the name is the identifier for the literal (generated [here](https://github.com/alexisthedev/hephaestus/pull/12/files#diff-04b80108daf0258108951e40850a31fbcdb0f6a68f2b2b80c7b6aac184a63316R267) for string literals and [here](https://github.com/alexisthedev/hephaestus/pull/12/files#diff-04b80108daf0258108951e40850a31fbcdb0f6a68f2b2b80c7b6aac184a63316R282) for number literals) we don\'t need to create any Constant AST nodes.', 'comment_created': datetime.datetime(2022, 8, 25, 12, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 954881027, 'comment_body': 'Yes, but imagine that we need to generate a `StringLiteralType`, how does the generator know that it needs to generate a string constant? e.g.,\r\n\r\n```\r\nvar x: ""5"" = ""5"" // the left-hand side is the type (`StringLiteralType`), but the right-hand side is an expression (`StringConstant`).\r\n```', 'comment_created': datetime.datetime(2022, 8, 25, 12, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 954890144, 'comment_body': 'True. Will get on that.', 'comment_created': datetime.datetime(2022, 8, 25, 12, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 958103688, 'comment_body': 'I think I was wrong yesterday.\r\nAdding only `NumberType` is sufficient.', 'comment_created': datetime.datetime(2022, 8, 30, 7, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 958103868, 'comment_body': 'The same here as above.', 'comment_created': datetime.datetime(2022, 8, 30, 7, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 958105359, 'comment_body': 'Could you please add a comment about when a type is a assignable to a string literal type?', 'comment_created': datetime.datetime(2022, 8, 30, 7, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 958105687, 'comment_body': 'Could you please add a comment about when a type is a assignable to a num literal type?\r\n', 'comment_created': datetime.datetime(2022, 8, 30, 7, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 958106772, 'comment_body': 'I think there was a misunderstanding here.\r\nI meant that `get_literal()` should return two types (instead of one): a string literal type, and num literal type.', 'comment_created': datetime.datetime(2022, 8, 30, 7, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 958288894, 'comment_body': '`is_assignable` returns True when the current (`self`) type is assignable to the `other`.\r\nRegardless, I am adding a comment to describe the method.', 'comment_created': datetime.datetime(2022, 8, 30, 10, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 958289953, 'comment_body': 'Refer to my comment above.', 'comment_created': datetime.datetime(2022, 8, 30, 10, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 958290864, 'comment_body': 'yes, indeed.\r\nBut can you comment about the specific case of num literal types (e.g., what does the condition below check?).', 'comment_created': datetime.datetime(2022, 8, 30, 10, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 958292988, 'comment_body': 'Will do, just noted the above for clarity.', 'comment_created': datetime.datetime(2022, 8, 30, 10, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 958322000, 'comment_body': 'rename `get_literal` to `get_literal_types()`', 'comment_created': datetime.datetime(2022, 8, 30, 10, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 958322528, 'comment_body': 'add a whitespace before and after `+`.', 'comment_created': datetime.datetime(2022, 8, 30, 10, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}]","[{'commit_sha': 'ecc77a37fc6b2e05fe3460971762bc740071749a', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b62fab90bca858687f0f4f7fe765f8f1430c9f', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10cc3904442887fe75faed33e93c27a3b66f6e27', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e455066064abb92d97e20ca4e2981fcb280076', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8484880fa21dc80cd41b28337c2fc6d9c09d4560', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8c4736ce52bd1a0eb591f3aa292579a37891f0c', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e5b7c71d4c835061dfe62c22d300fee1f910f7', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}]",Alex Papadopoulos,20843172,,User,,19,,18,13
1035812601,TypeScript Type Aliases,This is still a WIP. Opened PR for status reports and discussion on the progress of this feature since GitHub does not allow to reference already existing branches in Issues (#8).,True,13,https://api.github.com/repos/alexisthedev/hephaestus/pulls/13,https://github.com/alexisthedev/hephaestus/pull/13,closed,307,111,25,12,4,17,1,1,[{'name': 'enhancement'}],2022-08-24 17:52:34+00:00,2022-09-19 14:01:47+00:00,2232553.0,"25 days, 20:09:13","[{'comment_id': 971851486, 'comment_body': ""Ok let's do a quick trick here so that the core decl generators and the language-specific declarations are called in a similar manner.\r\n\r\n```python\r\ncandidates = [\r\n    lambda gen: gen.gen_variable_decl(),\r\n    lambda gen: gen.gen_class_decl(),\r\n    lambda gen: gen.gen_func_decl()\r\n]\r\n```\r\n\r\nthen you have\r\n\r\n```python\r\ngen_func = ut.random.choice(candidates)\r\ngen_func(self)\r\n```"", 'comment_created': datetime.datetime(2022, 9, 15, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 971853627, 'comment_body': 'I think we should follow a similar approach as above to eliminate the following, dirty if condition.', 'comment_created': datetime.datetime(2022, 9, 15, 11, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 971854684, 'comment_body': 'Should this method have a return value? If not, use `pass` instead.', 'comment_created': datetime.datetime(2022, 9, 15, 11, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 971856249, 'comment_body': 'Please implement the `__str__` and `is_equal` methods for completeness.', 'comment_created': datetime.datetime(2022, 9, 15, 11, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 971857473, 'comment_body': 'This list should also consider user types.', 'comment_created': datetime.datetime(2022, 9, 15, 11, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 971858118, 'comment_body': 'Fix indentation here (4 spaces instead of 8).', 'comment_created': datetime.datetime(2022, 9, 15, 11, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 971861148, 'comment_body': 'is `AliasType` a better name?', 'comment_created': datetime.datetime(2022, 9, 15, 11, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 971861952, 'comment_body': ""Why don't you call the `bt.gen_non_nothing_types()` method here?"", 'comment_created': datetime.datetime(2022, 9, 15, 11, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 971862574, 'comment_body': 'I suggest we generate a type with an upper case.', 'comment_created': datetime.datetime(2022, 9, 15, 11, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 971864138, 'comment_body': 'Simply do the following:\r\n\r\n```python\r\nvisitors = super().get_visitors()\r\nvisitors.update({...})\r\n```', 'comment_created': datetime.datetime(2022, 9, 15, 11, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 972981316, 'comment_body': 'Yes, it should return a value.', 'comment_created': datetime.datetime(2022, 9, 16, 12, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 973039092, 'comment_body': 'It is more clear', 'comment_created': datetime.datetime(2022, 9, 16, 13, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 974174295, 'comment_body': 'self.gen_variable_decl should become gen.gen_variable_decl().', 'comment_created': datetime.datetime(2022, 9, 19, 12, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 974174371, 'comment_body': 'same here', 'comment_created': datetime.datetime(2022, 9, 19, 12, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 974174442, 'comment_body': 'same here.', 'comment_created': datetime.datetime(2022, 9, 19, 12, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 974175219, 'comment_body': '`self.context` should replaced by `gen.context`.', 'comment_created': datetime.datetime(2022, 9, 19, 12, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 974175322, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 9, 19, 12, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}]","[{'commit_sha': '81a677abf243106544092e01052cdec35007e601', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '830c47c7122ad45dee8835b8dc437554c31c34c5', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9bc3f854a16b38eafa2c77c543fbe7179444ac0', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d266bfcb644ca33bde9b3e74a227a552e487df', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd50a30b6eafe20477221939fff8fff987ac1df8', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd45e0a47033475efcc09fc7e2ba704ed9b2f881', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cf7639fa92c561d5183417b6c14bec6c6c1f8b4', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25ca76487ce99efdbb6c15ebe2879fa029d6bb8', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53ac9b18ecd3a28c53738ef898278ae1704030d5', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3350e9ddbe254f78dc6b832d0b6dab806d726cb', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8f85b88d236aaf256eeb6f07e7f1b184e1f3fbd', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9020ff9de83dc4d3e4f7dc01ad6d6bf92acc9d4d', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}]",Alex Papadopoulos,20843172,,User,,19,,18,13
1040843046,Union Types in TypeScript,"Union Types checklist:

- [x] Pass types to generator
- [x] Translate union type representation to actual TypeScript
- [x] Assign constant values to union types through generator (replace bottom constant use)
- [x] Create union types with previously generated types passed from generator (eg. classes)",True,14,https://api.github.com/repos/alexisthedev/hephaestus/pulls/14,https://github.com/alexisthedev/hephaestus/pull/14,closed,798,100,13,31,5,11,1,1,[{'name': 'enhancement'}],2022-08-30 11:19:29+00:00,2022-11-23 14:54:35+00:00,7356906.0,"85 days, 3:35:06","[{'comment_id': 1023741309, 'comment_body': ""I don't like the name `dynamic_types`. Can we think of a better name? `compound types` maybe?"", 'comment_created': datetime.datetime(2022, 11, 16, 9, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 1023741757, 'comment_body': 'Move this function to the `type_utils.py` file.', 'comment_created': datetime.datetime(2022, 11, 16, 9, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 1023743497, 'comment_body': 'Again, can we think of a better name?', 'comment_created': datetime.datetime(2022, 11, 16, 9, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 1023745315, 'comment_body': 'Why do we have this method inside the generic class `Type`?. I mean a generic type has nothing to do with type arguments.', 'comment_created': datetime.datetime(2022, 11, 16, 9, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 1023747479, 'comment_body': 'Nice docs here!', 'comment_created': datetime.datetime(2022, 11, 16, 9, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 1023748129, 'comment_body': '`UnionTypeFactory` => `UnionTypeFactory(object)`.', 'comment_created': datetime.datetime(2022, 11, 16, 9, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 1023749262, 'comment_body': 'Remove this `return` statement.', 'comment_created': datetime.datetime(2022, 11, 16, 9, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 1023753596, 'comment_body': 'Can you add a comment (like that one) above each test case so that it is easier for us to determine what we test?', 'comment_created': datetime.datetime(2022, 11, 16, 9, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'theosotr', 'type': 'User'}, {'comment_id': 1030388258, 'comment_body': 'Not possible because of impassable circular import.', 'comment_created': datetime.datetime(2022, 11, 23, 12, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 1030388880, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 11, 23, 12, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}, {'comment_id': 1030458710, 'comment_body': 'Done as suggested by PEP8. The reason it is recommended is compatibility between Python 3 and 2. [Detailed explanation](https://stackoverflow.com/questions/4015417/why-do-python-classes-inherit-object).', 'comment_created': datetime.datetime(2022, 11, 23, 13, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alexisthedev', 'type': 'User'}]","[{'commit_sha': 'c6c34007f16ca198ec49ae95d241262996ffd9f3', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d511d8c82780b3e77706627871f5d8726518204', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b45a3789ab7642c12ddea9ea13f3715500efa661', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc62d3fb7c0db95d7da953d3980e5d0f68355f57', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f857345d21e14abadc964b0d8d51bd783b31ebf', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6087453ef26d97be38509d165a75663d3da95b69', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '557426f00fb7879d179767c4335460644b65b952', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ad4ec765b1f091ccb10634d57b23b9eeea3aac5', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc26f1df6c8e7b091539867a2004930a1c88ba6', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '873087c6eb992de867a342b2e2f963928bc72a6c', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a288c43ab0550c6eab7f26b74fc2cc3705a95a', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60b209103b2665a83f7bc7e8710b18252f85192f', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6817b8495ca7b3a9eab1572612733dffec5a00d2', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24c6eb9373baef86585e8d6ee4fd3072a7a68671', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '829d5f2b7d4431bcf64be92932c0256e655cd944', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8882b9478238825659719841ac1b0c3b954be922', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b1245d40ccce7323e1cdfc8f1310b5f34b2a36a', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e48f0c565f8c2edb4d923b624224eae6e2534444', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2dbad9b2cd52646e43a740be3a1de49be566e859', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fecc9aadd15527ceb612197073d00f48b1af2f9', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaeafef4fdd62e003487b05c3ec3e89c2c611d5e', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc3c47a85d48c80ae8005242d5fa9efc211451a', 'committer_username': 'theosotr', 'committer_name': 'Thodoris Sotiropoulos', 'committer_email': 'theosotr@windowslive.com', 'commit_date': datetime.datetime(2014, 1, 18, 0, 23, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eceb84af16f42938a56fcc71bff843492838dc69', 'committer_username': 'theosotr', 'committer_name': 'Thodoris Sotiropoulos', 'committer_email': 'theosotr@windowslive.com', 'commit_date': datetime.datetime(2014, 1, 18, 0, 23, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd682990b3ed262502b74e2297253eb36b810751', 'committer_username': 'theosotr', 'committer_name': 'Thodoris Sotiropoulos', 'committer_email': 'theosotr@windowslive.com', 'commit_date': datetime.datetime(2014, 1, 18, 0, 23, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6ca1e7ca308c5b4deea8f4e444160d5d56687ba', 'committer_username': 'theosotr', 'committer_name': 'Thodoris Sotiropoulos', 'committer_email': 'theosotr@windowslive.com', 'commit_date': datetime.datetime(2014, 1, 18, 0, 23, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe3e9da93e3b948a604adcd371f4e1c14dc074f6', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5db394a00d241bc56691ac6910dc5e0cc359c2d', 'committer_username': 'theosotr', 'committer_name': 'Thodoris Sotiropoulos', 'committer_email': 'theosotr@windowslive.com', 'commit_date': datetime.datetime(2014, 1, 18, 0, 23, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '524470aa34114a0b46b369b350080c92b5b7d4f4', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d5009b76bd02c27f4bde3a08db1361b302939a', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7af72749bc0a32ffd881d9887b3ad3f254d34c81', 'committer_username': 'alexisthedev', 'committer_name': 'Alex Papadopoulos', 'committer_email': None, 'commit_date': datetime.datetime(2016, 8, 4, 16, 13, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51c7e52d5a10d16da5e63859c47c93579288098b', 'committer_username': 'theosotr', 'committer_name': 'Thodoris Sotiropoulos', 'committer_email': 'theosotr@windowslive.com', 'commit_date': datetime.datetime(2014, 1, 18, 0, 23, 31, tzinfo=datetime.timezone.utc)}]",Alex Papadopoulos,20843172,,User,,19,,18,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
496896466,hephaestus,alexisthedev/hephaestus,Python,0,0,1,6,1657,5,3,0,"[{'id': 1040843046, 'number': 14, 'closed': datetime.datetime(2022, 11, 23, 14, 54, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 30, 11, 19, 29, tzinfo=datetime.timezone.utc), 'time_taken': 7356906.0, 'time_delta': '85 days, 3:35:06', 'additions': 798, 'deletions': 100, 'state': 'closed'}, {'id': 1035812601, 'number': 13, 'closed': datetime.datetime(2022, 9, 19, 14, 1, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 24, 17, 52, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2232553.0, 'time_delta': '25 days, 20:09:13', 'additions': 307, 'deletions': 111, 'state': 'closed'}, {'id': 1035090725, 'number': 12, 'closed': datetime.datetime(2022, 8, 30, 10, 56, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 24, 7, 32, 55, tzinfo=datetime.timezone.utc), 'time_taken': 530610.0, 'time_delta': '6 days, 3:23:30', 'additions': 155, 'deletions': 11, 'state': 'closed'}, {'id': 1011865648, 'number': 3, 'closed': datetime.datetime(2022, 8, 24, 7, 58, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 11, 14, 28, tzinfo=datetime.timezone.utc), 'time_taken': 2234665.0, 'time_delta': '25 days, 20:44:25', 'additions': 88, 'deletions': 7, 'state': 'closed'}, {'id': 1007488653, 'number': 1, 'closed': datetime.datetime(2022, 7, 28, 14, 9, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 15, 55, 18, tzinfo=datetime.timezone.utc), 'time_taken': 252873.0, 'time_delta': '2 days, 22:14:33', 'additions': 1020, 'deletions': 530, 'state': 'closed'}]"
