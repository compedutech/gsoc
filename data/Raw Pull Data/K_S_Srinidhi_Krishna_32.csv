pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
421336801,Science museum provider implementation ,"## Fixes
<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #302  by @annatuma 

## Description
<!-- Concisely describe what the pull request does. -->
The science museum provider has been implemented using the ImageStore and DelayedRequestor class. 

## Technical details
<!-- Add any other information or technical details about the implementation; or delete the section entirely. -->
Ran the script locally and there are duplicate images in the tsv.
```
total images in tsv : 18129
total distinct images :  17387
```

## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the `master` branch of the repository.
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,400,https://api.github.com/repos/cc-archive/cccatalog/pulls/400,https://github.com/cc-archive/cccatalog/pull/400,closed,652,0,15,6,0,0,0,0,[],2020-05-21 12:55:08+00:00,2020-05-28 14:53:21+00:00,611893.0,"7 days, 1:58:13",[],"[{'commit_sha': '6ae9a8f3fa9328acf85bf4ec9eec834039017731', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b294fa7e21d68377003677b186960413ad1169', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e5fdc668323af25478444ceb8a4626458bd5389', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f5fbe34dba12c05305d3cfa0f8fd739ff6ce856', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd098163fbb394edc1d6f1f4eca89db6d64fc271', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19bcc3d614aa85c668d3e0eb813c952541bc538d', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}]",Srinidhi Krishna,30746998,,User,,56,,60,41
424960779,Science museum workflow,"## Fixes
<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #408  by @mathemancer 

## Description
<!-- Concisely describe what the pull request does. -->
Airflow DAG script to run the science museum script

## Technical details
<!-- Add any other information or technical details about the implementation; or delete the section entirely. -->
Faced few errors while testing not sure of its origin . 
First occurrence of it was when the test passed and removed some comments  and then testing again failed . 
```
/tmp/pytest-of-airflow/pytest-0/test_dag_loads_with_no_errors7
[2020-05-29 07:45:54,791] {dagbag.py:403} INFO - Filling up the DagBag from /tmp/pytest-of-airflow/pytest-0/test_dag_loads_with_no_errors7
[2020-05-29 07:45:54,792] {dagbag.py:229} INFO - File /usr/local/airflow/dags/science_museum_workflow.py assumed to contain no DAGs. Skipping.
{}
```
Mentioning this problem since not sure why this occurred suddenly.
Now the test is passing.  
## Tests
<!-- Give steps for the reviewer to verify that this PR fixes the problem; or delete the section entirely. -->

## Screenshots
<!-- Add screenshots to show the problem and the solution; or delete the section entirely. -->

## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the `master` branch of the repository.
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,411,https://api.github.com/repos/cc-archive/cccatalog/pulls/411,https://github.com/cc-archive/cccatalog/pull/411,closed,47,0,2,5,1,0,0,0,[],2020-05-29 08:23:44+00:00,2020-05-29 09:09:51+00:00,2767.0,0:46:07,[],"[{'commit_sha': '2f9d72fb3284bc112d992963297d18ea9ab148c4', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f237aba67c3217e179a8fedee801c53c3ad1ed7f', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e511e413f0bd3293fa2282b1f6d13a8e4d23777', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '088da3cc5e03900ca32742b226b7d6c13a9f6973', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c820b2433a9fbfdbc20f61b6d4743a95837c410b', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}]",Srinidhi Krishna,30746998,,User,,56,,60,41
433033042,Smk provider,"## Fixes
<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #393  by @annatuma 

## Description
<!-- Concisely describe what the pull request does. -->
Implementation of provider API script and test suite.

## Technical details
<!-- Add any other information or technical details about the implementation; or delete the section entirely. -->
```
total images collected 39115
```

## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the `master` branch of the repository.
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,428,https://api.github.com/repos/cc-archive/cccatalog/pulls/428,https://github.com/cc-archive/cccatalog/pull/428,closed,586,0,12,4,0,0,0,0,[],2020-06-11 12:09:28+00:00,2020-06-18 18:24:25+00:00,627297.0,"7 days, 6:14:57",[],"[{'commit_sha': '6306448c73d3d705910c8f7afb9d9cba19350752', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af93046e24285baed1336fa990c8f0b370a79fab', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e543055a759bbf6406d9f0ec6ee6b0e30841f6', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dabe1722029de66752860d6c2220a695dab71f82', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}]",Srinidhi Krishna,30746998,,User,,56,,60,41
441061552,Museum victoria,"## Fixes
<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #291  by @akshgpt7 

## Description
<!-- Concisely describe what the pull request does. -->
Museum victoria provider has been implemented .
```
total id in the tsv : 142395
total images in tsv : 149423
total distinct images :  142395
```
## Technical details
<!-- Add any other information or technical details about the implementation; or delete the section entirely. -->
The image id represents the new image id field -- ```media/329745```


## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the `master` branch of the repository.
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,447,https://api.github.com/repos/cc-archive/cccatalog/pulls/447,https://github.com/cc-archive/cccatalog/pull/447,closed,540,0,14,15,0,1,0,0,[],2020-06-28 14:05:33+00:00,2020-07-10 09:24:25+00:00,1019932.0,"11 days, 19:18:52","[{'comment_id': 452714099, 'comment_body': 'Imported but unused', 'comment_created': datetime.datetime(2020, 7, 10, 8, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}]","[{'commit_sha': '4e8d40517ea569f1bc069f6202230293c103b2b5', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e350f4a3dfc861dbc7082f9c0b00bb2457107d6c', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e25369ac7e83debdb4ce91bcfacef2c245f9925a', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f3aec155459a896efb5d37f9141f187f9afd06d', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eba1a115f1ac5d8cb32eaabf65491f41e085c196', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d2fe409848183a4d808b30e08fe1d43f3e89231', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '625c670725b13efefa9df5020e6c3b0e2aea9c6f', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb2411387bfe1badabc880538c01fae2b38adbc', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb536cc6c41b09ae203bc3ad2a018be11472ff6', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5835beb4125e3599139d4ae9d5aaaae445e0c67', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db532afd138c924db81ed7cb021066527c42f68e', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d4502e605e551beb8bac16f94d674ac5af474f9', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2107bb628eaef395e937c7117abf8de19b22968a', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8584b5b5f2e7c36643e6b502dfc869ab01c2706', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67b670a6ae6fba8d6e28cec9b468caf2d9d4017a', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}]",Srinidhi Krishna,30746998,,User,,56,,60,41
448883643,Nypl implementation,"## Fixes
<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #147  by @janetpkr

## Description
<!-- Concisely describe what the pull request does. -->
NYPL provider API script implemented.
```
total id in the tsv : 1269
total images in tsv : 1497
total distinct images :  1269
```
## Technical details
<!-- Add any other information or technical details about the implementation; or delete the section entirely. -->
The script currently uses the ```imageID``` field as foreign identifier.
Currently the image dimensions are not available from the script.


## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the *default* branch of the repository (`main` or `master`).
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,462,https://api.github.com/repos/cc-archive/cccatalog/pulls/462,https://github.com/cc-archive/cccatalog/pull/462,closed,564,222,13,15,0,16,0,0,[],2020-07-14 13:33:00+00:00,2020-07-29 13:06:41+00:00,1294421.0,"14 days, 23:33:41","[{'comment_id': 459903513, 'comment_body': 'I\'d prefer to call this `NYPL_API_KEY` in the actual env var.  Please then add `NYPL_API_KEY=not_set` to the `env.template` file.\r\n```suggestion\r\nNYPL_API = os.getenv(""NYPL_API_KEY"")\r\nTOKEN = f""Token token={NYPL_API}""\r\n```\r\n\r\nThis ', 'comment_created': datetime.datetime(2020, 7, 24, 7, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 459910075, 'comment_body': 'defined but unused', 'comment_created': datetime.datetime(2020, 7, 24, 8, 9, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 459913140, 'comment_body': ""I'd prefer extracting this inner loop to its own method to avoid nesting.\r\n\r\nAlso, please see #446 .  It's no longer necessary (or desirable) to pass the image count around everywhere.  You can now get it from the property `ImageStore.total_images` (or `image_store.total_images` in this case)"", 'comment_created': datetime.datetime(2020, 7, 24, 8, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 459913967, 'comment_body': '```suggestion\r\n    if type(titleinfo) == list and len(titleinfo) > 0:\r\n        title = titleinfo[0].get(""title"", {}).get(""$"")\r\n```\r\npython\'s `and` short-circuits.  Thus, you can avoid this nested if.', 'comment_created': datetime.datetime(2020, 7, 24, 8, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 459923861, 'comment_body': 'Please log the case where no creator can be extracted as a warning.', 'comment_created': datetime.datetime(2020, 7, 24, 8, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 459928409, 'comment_body': ""I have a few questions here:\r\n1. Is the code in the JSON sometimes different from the response object's `status_code`?  If not, you could simplify this by just checking the actual HTTP status code of the response.\r\n2. If that's the case, why not use the `get_response_json` method of the `DelayedRequester`?"", 'comment_created': datetime.datetime(2020, 7, 24, 8, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 459928976, 'comment_body': 'This check is unnecessary.  The for loop below will simply exit with no iterations if the list has length zero.', 'comment_created': datetime.datetime(2020, 7, 24, 8, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 459943226, 'comment_body': 'An option for these would be:\r\n```suggestion\r\ndef _get_creators(creatorinfo):\r\n    if type(creatorinfo) == list:\r\n        primary_creator_generator = (\r\n            info.get(""namePart"", {}).get(""$"")\r\n            for info in creatorinfo if info.get(""usage"") == ""primary""\r\n        )\r\n        creator = next(primary_creator_generator, None)\r\n    else:\r\n        creator = None\r\n\r\n    if creator is None:\r\n        logger.warning(\r\n            f""No primary creator could be chosen from {creatorinfo}""\r\n        )\r\n    return creator\r\n```\r\nI think using generator expressions is preferable to breaking when you find the first instance of something.', 'comment_created': datetime.datetime(2020, 7, 24, 9, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 459949530, 'comment_body': 'Please use `urllib.parse.parse_qs` or `urllib.parse.parse_qsl` here.', 'comment_created': datetime.datetime(2020, 7, 24, 9, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 459953287, 'comment_body': 'Suggested refactoring:\r\n```suggestion\r\ndef _get_images(\r\n        images,\r\n        image_url_dimensions=IMAGE_URL_DIMENSIONS,\r\n        thumbnail_dimensions=THUMBNAIL_DIMENSIONS\r\n        ):\r\n    image_type = {\r\n        dict(parse_qsl(urlparse(img.get(""$"")).query))[\'t\']: img.get(""$"")\r\n        for img in images\r\n    }\r\n    image_url = _get_preferred_image(image_type, image_url_dimensions)\r\n    thumbnail_url = _get_preferred_image(image_type, thumbnail_dimensions)\r\n\r\n    return image_url, thumbnail_url\r\n\r\n\r\ndef _get_preferred_image(image_types, dimension_list):\r\n    preferred_image_generator = (\r\n        image_types.get(dimension).replace(""&download=1"", """")\r\n        for dimension in dimension_list\r\n        if dimension in image_types\r\n    )\r\n    return next(preferred_image_generator, None)\r\n```\r\n\r\nNote that to use `parse_qsl` in this way, you\'ll have to modify the dimension lists:\r\n```python\r\nIMAGE_URL_DIMENSIONS = [\r\n    ""g"", ""v"", ""q"", ""w"", ""r""\r\n]\r\n\r\nTHUMBNAIL_DIMENSIONS = [\r\n    ""w"", ""r"", ""q"", ""f"", ""v"", ""g""\r\n]\r\n```\r\nAlso, note the removal of the `dict.keys()` call.  While performance isn\'t exactly important here, it\'s a good habit to avoid using that method unless you actually need the dict keys object for some sort of merging operation.', 'comment_created': datetime.datetime(2020, 7, 24, 9, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 460136953, 'comment_body': '```suggestion\r\n    if (\r\n        type(type_of_resource) == list\r\n        and type_of_resource[0].get(""usage"") == ""primary""\r\n    ):\r\n```', 'comment_created': datetime.datetime(2020, 7, 24, 15, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 460140891, 'comment_body': ""I think wrapping these stringed gets in try-except blocks would be preferable to these statements.  It would be easier to understand for me, and you can specify that you're only catching whatever exception is produced when you try to `get` from a non-dict type."", 'comment_created': datetime.datetime(2020, 7, 24, 15, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 460407574, 'comment_body': ""I don't think there is a difference , I just didn't think about using HTTP status code when I saw the code in the json. \r\n"", 'comment_created': datetime.datetime(2020, 7, 25, 13, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kss682', 'type': 'User'}, {'comment_id': 460407611, 'comment_body': 'I shall change it accordingly .', 'comment_created': datetime.datetime(2020, 7, 25, 13, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kss682', 'type': 'User'}, {'comment_id': 461448385, 'comment_body': 'I think this is a bug.  It prevents ever finding creator info.', 'comment_created': datetime.datetime(2020, 7, 28, 9, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 461484110, 'comment_body': ""I didn't look carefully whether creator was ingested into the tsv or not ."", 'comment_created': datetime.datetime(2020, 7, 28, 10, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kss682', 'type': 'User'}]","[{'commit_sha': '2999ad18dfdd1708cb5c11a656414ba4719fc533', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c748751373e7992efebb390f5a1fe3f6c274ddf', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ddc9855ed17554beb1a2820921d0846efc2320a', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1380f7ed1532d0845739c0c4c6d81203bb488000', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11977cc68ee496e82bac87a2f563f86ed70bd5af', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2753121650d1eb85e11c122b3f71ecf5c2f29c9e', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57df7e0c86b03335e774d1591160042614df8333', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67050758f0887617f9af96b432e4894654d9c58c', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fce51ad5f441a6ea556ca14776d8acda2d75fc3', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ea22ec45e14dcb63b3270d728b7487000f017fb', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a80e0336d67935d900803a05ba12519d16054128', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e838c55dac41061998004f0602fa0e3e3b4eee', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a99cb758d06b7b184c818ec58ef1326b83ad079', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fafd45a3908b57c27743467e85bf7f2a7740c83', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cef091ee8ba0d6604f275410350df5c8347f71d5', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}]",Srinidhi Krishna,30746998,,User,,56,,60,41
399106894,brooklyn museum rewritten,"## Fixes
<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #348  by @kss682 

## Description
<!-- Concisely describe what the pull request does. -->
Brooklyn museum rewritten using ImageStore and DeyaledRequestor

## Technical details
<!-- Add any other information or technical details about the implementation; or delete the section entirely. -->
Limit is kept at 35 , maximum limit of api.
Ran the script locally with an offset 39225 to check the breaking condition of the while loop.


## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the `master` branch of the repository.
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,355,https://api.github.com/repos/cc-archive/cccatalog/pulls/355,https://github.com/cc-archive/cccatalog/pull/355,closed,555,184,21,14,1,26,0,1,[],2020-04-05 14:32:03+00:00,2020-08-03 08:51:18+00:00,10347555.0,"119 days, 18:19:15","[{'comment_id': 404757660, 'comment_body': '```suggestion\r\nAPI_KEY = os.getenv(""BROOKLYN_MUSEUM_API_KEY"", ""nokeyprovided"")\r\n```', 'comment_created': datetime.datetime(2020, 4, 7, 12, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 408705487, 'comment_body': 'Please extract this to some `_process_image_batch` function.', 'comment_created': datetime.datetime(2020, 4, 15, 9, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 408707810, 'comment_body': 'Rather than queuing the ids here, it would be more robust to process them before requesting the next batch.  See the main PR review comment.', 'comment_created': datetime.datetime(2020, 4, 15, 9, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 408711043, 'comment_body': 'Please refactor this function to have only one return statement.  \r\n```suggestion\r\ndef _get_response(headers=HEADERS,\r\n                  endpoint=ENDPOINT,\r\n                  retries=RETRIES,\r\n                  query_param=None):\r\n    response_json = None\r\n    for tries in range(retries):\r\n        try:\r\n            response = delay_request.get(\r\n                endpoint,\r\n                query_param,\r\n                headers=headers\r\n            )\r\n            data = response.json()\r\n            if data and data.get(""message"", """").lower() == ""success."":\r\n                response_json = data.get(""data"", """")\r\n        except Exception as e:\r\n            logger.warning(f""response not captured due to {e}"")\r\n    return response_json\r\n```\r\n(note this is an example.  It could be improved with better variable names.)', 'comment_created': datetime.datetime(2020, 4, 15, 9, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 408711558, 'comment_body': ""I'd also prefer if this was renamed to denote the fact that it's not returning the response object, but rather a json derived from the response object."", 'comment_created': datetime.datetime(2020, 4, 15, 9, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 408712593, 'comment_body': 'please use a more descriptive name than `data` (in general).  This name is used many times in the script for different objects.  Descriptive variable names would help alot.', 'comment_created': datetime.datetime(2020, 4, 15, 9, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 408713292, 'comment_body': ""please don't use `id` as a variable name in python.  You're overwriting the `id` function with this assignment."", 'comment_created': datetime.datetime(2020, 4, 15, 9, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 408713508, 'comment_body': 'One option would be to use the variable name `id_`.', 'comment_created': datetime.datetime(2020, 4, 15, 9, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 408716174, 'comment_body': ""Please try to use as few `return` statements per function as possible.  It makes it much easier to read the flow of the function.  Also, if the 'failure' or 'null' return is to be `Nonetype`, please set `image_count = None` at the top of the function rather than `image_count = 0`.  (This will help on your mission to have fewer return statements.  There's no point in setting a default if you're not using it.)"", 'comment_created': datetime.datetime(2020, 4, 15, 9, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 419586149, 'comment_body': 'This doesn\'t quite work, and is super brittle (even if it\'s fixed).  It currently leaves a trailing "" character on the URL.  But, I\'d also like to move away from using regular expressions to parse HTML in this repo, since [it doesn\'t work in general](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/). \r\n```suggestion\r\nimport lxml.html as html\r\n\r\ndef _get_license_url(rights_info):\r\n    if ""creative commons"" in rights_info.get(""name"").lower():\r\n        description_elem = html.fromstring(rights_info.get(\'description\'))\r\n        cc_links = {\r\n            a[2] for a in description_elem.iterlinks()\r\n            if \'https://creativecommons.org/licenses/\' in a[2]\r\n        }\r\n        if len(cc_links) == 1:\r\n            (license_url,) = cc_links\r\n        else:\r\n            logger.warning(f\'Invalid cc_links set:  {cc_links}\')\r\n            license_url = None\r\n\r\n        return license_url\r\n```', 'comment_created': datetime.datetime(2020, 5, 4, 17, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 419586380, 'comment_body': 'Note the import, and that a test will need to be changed', 'comment_created': datetime.datetime(2020, 5, 4, 17, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 419587090, 'comment_body': 'It would be better to use the default (Nonetype) fallback on these `get` calls.  Those will eventually be turned into `null` in the DB, and can be more easily cleaned up.', 'comment_created': datetime.datetime(2020, 5, 4, 17, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 419594116, 'comment_body': 'You can skip setting the `Nonetype` default, and just return response_json if you get one.  Also, the `get` calls are extraneous, since the whole thing is wrapped in a `try`, and you *want* to fail if something is missing.\r\n```suggestion\r\n    for tries in range(retries):\r\n        try:\r\n            response = delay_request.get(\r\n                endpoint,\r\n                query_param,\r\n                headers=headers\r\n            )\r\n            data = response.json()\r\n            assert data[""message""].lower() == ""success.""\r\n            return data[""data""]\r\n        except Exception as e:\r\n            logger.warning(f""response not captured due to {e}"")\r\n```', 'comment_created': datetime.datetime(2020, 5, 4, 17, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 419595084, 'comment_body': 'This style is more modifiable later (with smaller diffs):\r\n```suggestion\r\n            image_count = _handle_object_data(\r\n                data=complete_object_data,\r\n                license_url=license_url\r\n            )\r\n```', 'comment_created': datetime.datetime(2020, 5, 4, 17, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 420044632, 'comment_body': '@mathemancer how about this ? \r\nwe can avoid the ``try`` since the logger warnings are handled in ```requester module```. \r\n```\r\ndef _get_object_json(headers=HEADERS,\r\n                     endpoint=ENDPOINT,\r\n                     retries=RETRIES,\r\n                     query_param=None):\r\n   for tries in range(retries):\r\n\tresponse = delay_request.get(\r\n                endpoint,\r\n                query_param,\r\n                headers=headers\r\n            )\r\n        data = response.json()\r\n        if data and data.get(""message"", """").lower() == ""success."":\r\n        \tresponse_json = data.get(""data"", """")\r\n                break\r\n\telse:\r\n\t\tresponse_json = None\r\n   return response_json\r\n\r\n```', 'comment_created': datetime.datetime(2020, 5, 5, 11, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kss682', 'type': 'User'}, {'comment_id': 420047616, 'comment_body': 'Sure, this also works.  The default for `data.get(""data"", ...)` should be the default `None` in this case, no?  I.e., if we can\'t find the `response_json` we want, shouldn\'t we return `None` instead of an empty string?', 'comment_created': datetime.datetime(2020, 5, 5, 11, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 420048053, 'comment_body': 'The default for the `dict.get` method, that is', 'comment_created': datetime.datetime(2020, 5, 5, 11, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 420049486, 'comment_body': 'yes that needs to made to ```None```.', 'comment_created': datetime.datetime(2020, 5, 5, 11, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kss682', 'type': 'User'}, {'comment_id': 425322563, 'comment_body': ""Thanks for this change.  Unfortunately, the search term won't work in all cases.  Do you know if they have CC0 or PDM 'licensed' objects?  If so, they'd have the URL stub:  `https://creativecommons.org/publicdomain/`  I think we should be a little more sophisticated here.  See, for example, \r\n```\r\nhttps://creativecommons.org/publicdomain/zero/1.0/\r\n```\r\n- We don't care if the URL has a scheme.\r\n- We need to handle both `creativecommons.org/licenses/` and `creativecommons.org/publicdomain/`"", 'comment_created': datetime.datetime(2020, 5, 14, 17, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 425323631, 'comment_body': ""So, I think we should scoop up all Creative Commons links, then filter them for 'publicdomain' or 'licenses' being in them...then choose the first remaining."", 'comment_created': datetime.datetime(2020, 5, 14, 17, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 425324506, 'comment_body': 'Long line.\r\n```suggestion\r\n        foreign_url = (\r\n            f""https://www.brooklynmuseum.org/opencollection/objects/{id_}""\r\n        )\r\n```', 'comment_created': datetime.datetime(2020, 5, 14, 17, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 425327378, 'comment_body': 'Please use the following style to match the rest of the repo (the new code, anyway):\r\n```suggestion\r\ndef _get_query_param(\r\n        offset=0,\r\n        default_query_param=DEFAULT_QUERY_PARAM\r\n):\r\n```\r\nThis also has the advantage of smaller diffs later', 'comment_created': datetime.datetime(2020, 5, 14, 17, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 425327649, 'comment_body': 'Check other function definitions and calls for this.  They should be consistent.', 'comment_created': datetime.datetime(2020, 5, 14, 17, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 425331811, 'comment_body': ""I wasn't paying close enough attention in our previous conversation about this part; sorry about that.  This line needs to be wrapped in a `try`, since some errors will end up with `response` being a `NoneType`, or at least not having a valid JSON body.\r\n\r\nSee the `get_response_json` function in the `DelayedRequester` class, as that's intended to become the canonical example."", 'comment_created': datetime.datetime(2020, 5, 14, 18, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mathemancer', 'type': 'User'}, {'comment_id': 425606072, 'comment_body': '@mathemancer  So , I thought that would be handled by the if condition \r\n``` \r\ndata = response.json()\r\nif data and data.get(""message"", """").lower() == ""success."":\r\n           response_json = data.get(""data"")\r\n           break\r\nelse:\r\n           response_json = None\r\n```\r\nOnly if the JSON body has  ```message == ""success""```, we would know its the right JSON body and take the data, rest all the cases its ignored.  ', 'comment_created': datetime.datetime(2020, 5, 15, 7, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kss682', 'type': 'User'}, {'comment_id': 425906896, 'comment_body': '@mathemancer \r\nI had gone through all the objects in brooklyn and there is only one license type. \r\n```\r\n+-----------------+---------------------+---------+---------+\r\n| provider        | license_type        | license | version |\r\n+-----------------+---------------------+---------+---------+\r\n| brooklyn museum | creative commons 3d | by      | 3.0     |\r\n+-----------------+---------------------+---------+---------+\r\n\r\n```\r\nSo in their JSON the ```rights_type``` has different rights name possible currently we are only checking for ``` creative commons``` , this would miss types with name such as ```public domain ``` .(currently there isn\'t one but in case )\r\nInstead we could use \r\n```\r\ndef _get_license_url(rights_info):\r\n    elements = html.fromstring(rights_info.get(""description"", """"))\r\n    cc_links = [\r\n        elm[2]\r\n        for elm in elements.iterlinks()\r\n        if ""https://creativecommons.org/"" in elm[2]\r\n    ]\r\n    if len(cc_links) == 1:\r\n        (license_url,) = cc_links\r\n    else:\r\n        license_url = None\r\n    return license_url\r\n```\r\n', 'comment_created': datetime.datetime(2020, 5, 15, 16, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kss682', 'type': 'User'}]","[{'commit_sha': '3520b9eb6729f17744c5c4dbe635eac8502c78e5', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ea8554394dcc1f0855ecda7a0288dcfd54dec00', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e4179732d936a47570cd3217f5ea9f2b707c83', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '901d66d3db8fca7a93f56291b98703fe5ce738ef', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab6e5d80284c91a80ae59a9bb09ec39f5a8b464a', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f57ef1226f372b177ad917d363b429e28a8aec', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22842a72b5daa2f54208f33aec7fc932a315d5ea', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ade00f4416453a5ce4553ba79a71225722162af7', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '723aa8bffd46e0699de33fc1aa0bf6651240b523', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9dc9cbc9452141e5431f109c54f6d8935b45971', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1078807199d833b6073fca1bf63088d339bf7d47', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3da7a731f3ea87dca4012120681e906250e28cb', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480320266adb84fa44e4b4b448d7732b893fb8c2', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1893349c0ad85ccd0097e592198d529ccec56f2b', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}]",Srinidhi Krishna,30746998,,User,,56,,60,41
457121519,ingestion workflow,"## Fixes
<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #412 by @mathemancer 

## Description
<!-- Concisely describe what the pull request does. -->
This PR contains the ingestion workflow for europeana

## Technical details
<!-- Add any other information or technical details about the implementation; or delete the section entirely. -->
Based on the discussions , current plan is to ingest 59 days of data per day. 
```
DAILY_LIST_LENGTH = 7
ONE_MONTH_LIST_LENGTH = 12
THREE_MONTH_LIST_LENGTH = 40
```
Due to bulk nature of uploads by europeana, the architecture has to be such a way that there is no blockage for long running days. Hence maximum number of tasks have been scheduled in the final layer . 

The europeana script  ```DELAY``` has been increased to 30 and the concurrency of the tasks at 3. 
The ```INGESTION_TASK_TIMEOUT ``` has been set at 4 hours , assuming that the maximum upload in a day is 700,000. 

## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the *default* branch of the repository (`main` or `master`).
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [x] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [ ] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,473,https://api.github.com/repos/cc-archive/cccatalog/pulls/473,https://github.com/cc-archive/cccatalog/pull/473,closed,54,1,3,1,0,0,0,0,[],2020-07-27 12:09:31+00:00,2020-08-03 16:17:35+00:00,619684.0,"7 days, 4:08:04",[],"[{'commit_sha': '497e0301923d6b973cdff6263dc587f138277ab7', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}]",Srinidhi Krishna,30746998,,User,,56,,60,41
465902283,Common crawl tags merge,"## Fixes
<!-- If PR doesn't fully resolve the issue, replace 'Fixes' below with 'Related to'. -->
<!-- If there is no issue being resolved, open one before creating this pull request. -->
Fixes #468  by @mathemancer 

## Description
<!-- Concisely describe what the pull request does. -->
This script contains runs a query that merges the tags and metadata from the image table (provider API data ) and the CC table. 
Execution : ```python merge_cc_tags.py -t science_museum_2020_06_02``` 

## Technical details
<!-- Add any other information or technical details about the implementation; or delete the section entirely. -->
  After initial analysis it was understood that we need different logic to merge on for different providers. 
  Current script contains the merge logic for ```science_museum```, ```met museum ``` , ```museums victoria```.
   - In Science Museum,  API url in image table is like ```https://coimages.sciencemuseumgroup.org.uk/images/240/862/large_BAB_S_1_02_0017.jpg ``` and CC url is like ``` https://s3-eu-west-1.amazonaws.com/smgco-images/images/369/541/medium_SMG00096855.jpg``` . So the idea is to reduce the url to the last identifier like number ,  so after the modification of the url by ```modify_urls``` function it looks like ```gpj.1700_20_1_S_BAB_``` (API url) and ``` gpj.55869000GMS_``` (CC url) . 
 Similar kind of logic has been applied to ```met museum``` and ```museum victoria```.


## Checklist
<!-- Replace  the [ ] with [x] to check the boxes. --> 
- [x] My pull request has a descriptive title (not a vague title like `Update
  index.md`).
- [x] My pull request targets the *default* branch of the repository (`main` or `master`).
- [x] My commit messages follow [best practices][best_practices].
- [x] My code follows the established code style of the repository.
- [ ] I added tests for the changes I made (if applicable).
- [ ] I added or updated documentation (if applicable).
- [x] I tried running the project locally and verified that there are no
  visible errors.

[best_practices]:https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53

## Developer Certificate of Origin
<!-- You must read and understand the following attestation. -->

<details>
<summary>Developer Certificate of Origin</summary>

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

</details>
",True,478,https://api.github.com/repos/cc-archive/cccatalog/pulls/478,https://github.com/cc-archive/cccatalog/pull/478,closed,153,0,1,6,2,0,0,1,[],2020-08-11 06:41:09+00:00,2020-08-25 07:37:53+00:00,1213004.0,"14 days, 0:56:44",[],"[{'commit_sha': 'cdf089c97378832ef1cb00c58790b14c2f4c1c88', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e688d9511aa5bd248afe1b3bb88a85d29ab44d0', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b97545f3fbb9023926661fbd79a851a2afc75e0', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a8342f8d9a3aede00d8a03adabf04c1a65dd88e', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a78c98f4fa0387ae5fb5b74f06eb8de011c329d0', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '335f6258c945d70803623a1a223106a40f840cb4', 'committer_username': 'kss682', 'committer_name': 'Srinidhi Krishna', 'committer_email': None, 'commit_date': datetime.datetime(2017, 8, 5, 9, 1, 34, tzinfo=datetime.timezone.utc)}]",Srinidhi Krishna,30746998,,User,,56,,60,41

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
97037973,cccatalog,cc-archive/cccatalog,Python,60,63,21,33,924,0,6,0,"[{'id': 468703494, 'number': 485, 'closed': datetime.datetime(2020, 8, 21, 8, 56, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 9, 17, 13, tzinfo=datetime.timezone.utc), 'time_taken': 344353.0, 'time_delta': '3 days, 23:39:13', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 465902283, 'number': 478, 'closed': datetime.datetime(2020, 8, 25, 7, 37, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 6, 41, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1213004.0, 'time_delta': '14 days, 0:56:44', 'additions': 153, 'deletions': 0, 'state': 'closed'}, {'id': 457121519, 'number': 473, 'closed': datetime.datetime(2020, 8, 3, 16, 17, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 12, 9, 31, tzinfo=datetime.timezone.utc), 'time_taken': 619684.0, 'time_delta': '7 days, 4:08:04', 'additions': 54, 'deletions': 1, 'state': 'closed'}, {'id': 456646983, 'number': 469, 'closed': datetime.datetime(2020, 8, 14, 13, 57, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 18, 9, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1712893.0, 'time_delta': '19 days, 19:48:13', 'additions': 472, 'deletions': 0, 'state': 'closed'}, {'id': 451100004, 'number': 467, 'closed': datetime.datetime(2020, 7, 17, 13, 18, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 12, 46, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1909.0, 'time_delta': '0:31:49', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 448883643, 'number': 462, 'closed': datetime.datetime(2020, 7, 29, 13, 6, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 13, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1294421.0, 'time_delta': '14 days, 23:33:41', 'additions': 564, 'deletions': 222, 'state': 'closed'}, {'id': 441061552, 'number': 447, 'closed': datetime.datetime(2020, 7, 10, 9, 24, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 14, 5, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1019932.0, 'time_delta': '11 days, 19:18:52', 'additions': 540, 'deletions': 0, 'state': 'closed'}, {'id': 433033042, 'number': 428, 'closed': datetime.datetime(2020, 6, 18, 18, 24, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 12, 9, 28, tzinfo=datetime.timezone.utc), 'time_taken': 627297.0, 'time_delta': '7 days, 6:14:57', 'additions': 586, 'deletions': 0, 'state': 'closed'}, {'id': 426965629, 'number': 418, 'closed': datetime.datetime(2020, 6, 10, 11, 57, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 5, 9, 49, tzinfo=datetime.timezone.utc), 'time_taken': 629237.0, 'time_delta': '7 days, 6:47:17', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 424960779, 'number': 411, 'closed': datetime.datetime(2020, 5, 29, 9, 9, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 8, 23, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2767.0, 'time_delta': '0:46:07', 'additions': 47, 'deletions': 0, 'state': 'closed'}, {'id': 421336801, 'number': 400, 'closed': datetime.datetime(2020, 5, 28, 14, 53, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 12, 55, 8, tzinfo=datetime.timezone.utc), 'time_taken': 611893.0, 'time_delta': '7 days, 1:58:13', 'additions': 652, 'deletions': 0, 'state': 'closed'}, {'id': 410629246, 'number': 381, 'closed': datetime.datetime(2020, 4, 30, 10, 14, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 29, 10, 39, 13, tzinfo=datetime.timezone.utc), 'time_taken': 84905.0, 'time_delta': '23:35:05', 'additions': 2, 'deletions': 142, 'state': 'closed'}, {'id': 401323433, 'number': 359, 'closed': datetime.datetime(2020, 5, 14, 17, 32, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 9, 9, 49, 47, tzinfo=datetime.timezone.utc), 'time_taken': 3051787.0, 'time_delta': '35 days, 7:43:07', 'additions': 66, 'deletions': 4, 'state': 'closed'}, {'id': 399106894, 'number': 355, 'closed': datetime.datetime(2020, 8, 3, 8, 51, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 5, 14, 32, 3, tzinfo=datetime.timezone.utc), 'time_taken': 10347555.0, 'time_delta': '119 days, 18:19:15', 'additions': 555, 'deletions': 184, 'state': 'closed'}, {'id': 398965129, 'number': 353, 'closed': datetime.datetime(2020, 4, 5, 14, 19, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 5, 8, 24, 29, tzinfo=datetime.timezone.utc), 'time_taken': 21328.0, 'time_delta': '5:55:28', 'additions': 423, 'deletions': 0, 'state': 'closed'}, {'id': 395254192, 'number': 346, 'closed': datetime.datetime(2020, 4, 1, 12, 25, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 29, 13, 45, 22, tzinfo=datetime.timezone.utc), 'time_taken': 254436.0, 'time_delta': '2 days, 22:40:36', 'additions': 187, 'deletions': 46, 'state': 'closed'}, {'id': 393019668, 'number': 342, 'closed': datetime.datetime(2020, 3, 25, 12, 29, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 14, 19, 33, tzinfo=datetime.timezone.utc), 'time_taken': 79792.0, 'time_delta': '22:09:52', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 392556879, 'number': 339, 'closed': datetime.datetime(2020, 3, 24, 14, 11, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 23, 18, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 71627.0, 'time_delta': '19:53:47', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 389056952, 'number': 328, 'closed': datetime.datetime(2020, 3, 31, 9, 12, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 16, 8, 8, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1299874.0, 'time_delta': '15 days, 1:04:34', 'additions': 409, 'deletions': 148, 'state': 'closed'}]"
