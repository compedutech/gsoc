pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
894099868,consume i8042 device from vm-superio,"Signed-off-by: Ramyak Mehra <rmehra_be19@thapar.edu>

### Summary of the PR
* Added I8042 wrapper inside devices/legacy.
* add_i8042_deive func inside src/vmm/lib.rs on the vmm struct.
* handled VcpuExit::IoOut at address i8042 port, inside vm-vcpu/src/vcpu/mod.rs

issue: #198 

### Requirements

Before submitting your PR, please make sure you addressed the following
requirements:

- [x] All commits in this PR are signed (with `git commit -s`), and the commit
  message has max 60 characters for the summary and max 75 characters for each
  description line.
- [x] All added/changed functionality has a corresponding unit/integration
  test.",True,215,https://api.github.com/repos/rust-vmm/vmm-reference/pulls/215,https://github.com/rust-vmm/vmm-reference/pull/215,closed,108,10,5,1,9,7,0,0,[],2022-03-30 08:07:06+00:00,2022-04-06 10:54:52+00:00,614866.0,"7 days, 2:47:46","[{'comment_id': 838528961, 'comment_body': 'Can you also add the copyright?', 'comment_created': datetime.datetime(2022, 3, 30, 13, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 838582413, 'comment_body': ""This is not exactly correct. Even though for the writes that result in cpu exit, it is expected that `addr` will be 0x64, we shouldn't make any assumptions at this point about the exact value. A driver can also write to 0x60, see example [here](https://github.com/firecracker-microvm/firecracker/blob/main/src/devices/src/legacy/i8042.rs#L290), but we don't offer this support in vm-superio.\r\nIt is enough to just use `addr` instead of the hardcoded value below, and the i8042 logic will know how to handle different addresses (at this point it does nothing for addresses != 0x64)."", 'comment_created': datetime.datetime(2022, 3, 30, 14, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 838584668, 'comment_body': 'you can assign here `self.0.read(offset)`, and not use the auxiliary variable `read_data`.', 'comment_created': datetime.datetime(2022, 3, 30, 14, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 838591446, 'comment_body': 'By doing this, you always try to reset the cpu, even though the driver sent another command. Here we should just propagate the `offset` and `data[0]`.', 'comment_created': datetime.datetime(2022, 3, 30, 14, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 838592250, 'comment_body': 'We should also check the size of `data`, similarly to what we do for `write`.', 'comment_created': datetime.datetime(2022, 3, 30, 14, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 838609739, 'comment_body': 'The base of a device is where its range starts, i.e. 0x060, and its length should be 0x5 (0x60-0x64). [Here](https://wiki.osdev.org/%228042%22_PS/2_Controller) you can find the specification for i8042.', 'comment_created': datetime.datetime(2022, 3, 30, 14, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 839290295, 'comment_body': 'this should be 2022.', 'comment_created': datetime.datetime(2022, 3, 31, 7, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}]","[{'commit_sha': '13b68c497a01974246922c85a6bc0357966eee96', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}]",Ramyak Mehra,55009050,,User,,73,,28,62
973489134,Adding the system allocator POC,"closes #132
Signed-off-by: Ramyak mehra <rmehra_be19@thapar.edu>

### Summary of the PR

*Please summarize here why the changes in this PR are needed.*

### Requirements

Before submitting your PR, please make sure you addressed the following
requirements:

- [x] All commits in this PR are signed (with `git commit -s`), and the commit
  message has max 60 characters for the summary and max 75 characters for each
  description line.
- [x] All added/changed functionality has a corresponding unit/integration
  test.
- [x] Any newly added `unsafe` code is properly documented.
",True,219,https://api.github.com/repos/rust-vmm/vmm-reference/pulls/219,https://github.com/rust-vmm/vmm-reference/pull/219,closed,154,40,4,2,1,25,0,0,[],2022-06-21 12:05:58+00:00,2022-07-06 15:22:13+00:00,1307775.0,"15 days, 3:16:15","[{'comment_id': 904682903, 'comment_body': ""Why are you implementing a wrapper over the `AddressAllocator`? Do you think we will be using more than one allocator? If we don't use another one, it might be a good option to just use `AddressAllocator` directly so that we don't need the wrapper methods."", 'comment_created': datetime.datetime(2022, 6, 23, 7, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 904689370, 'comment_body': 'In future if we decide to use Id allocator too, it would be an easier refactor.', 'comment_created': datetime.datetime(2022, 6, 23, 7, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 905066975, 'comment_body': ""This is an early optimization, we don't know how the code will look like at that point in time, so I think it would be better instead to just use the AddressAllocator directly.\r\n\r\nOtherwise, the integration is going in the good direction, can you do the same for the serial console, and other devices? "", 'comment_created': datetime.datetime(2022, 6, 23, 14, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 905072500, 'comment_body': 'Ok will directly add the address allocator, some tests broke for x86 so gonna see to that and add all the other stuff', 'comment_created': datetime.datetime(2022, 6, 23, 14, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 911785220, 'comment_body': 'nit: type in defualt => default.\r\n\r\nYou need to leave a space after `///` before starting the text.', 'comment_created': datetime.datetime(2022, 7, 1, 9, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 911786647, 'comment_body': ""In the PR where we're also going to add support for multiple devices, we should also define the SystemAllocator, and simplify the calls to the functions by exporting the interface of the SystemAllocator to always use the DEFAULT_ADDRESS_ALIGNMENT and the DEFAULT_ALLOC_POLICY so that we don't need to pass them everywhere in the VMM code."", 'comment_created': datetime.datetime(2022, 7, 1, 9, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 911792488, 'comment_body': 'nit: I would find this easier to read if we just define the `start_addr` as being platform specific, and then use the same initialization for the allocator:\r\n\r\n```rust\r\n#[cfg(target_arch = ""x86_64"")]\r\nlet start_addr = MMIO_GAP_START;\r\n#[cfg(target_arch = ""aarch64"")]\r\nlet start_addr = AARCH64_MMIO_BASE;\r\n\r\nlet address_allocator = AddressAllocator::new(start_addr, mem_size);\r\n```\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 1, 9, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 911794969, 'comment_body': 'nit: I would find this easier to read if we just define the `start_addr` as being platform specific, and then use the same initialization for the allocator:\r\n\r\n```rust\r\n#[cfg(target_arch = ""x86_64"")]\r\nlet start_addr = MMIO_GAP_START;\r\n#[cfg(target_arch = ""aarch64"")]\r\nlet start_addr = AARCH64_MMIO_BASE;\r\n\r\nlet address_allocator = AddressAllocator::new(start_addr, mem_size);\r\n```\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 1, 9, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 911796733, 'comment_body': 'Can you leave this line as it was before.', 'comment_created': datetime.datetime(2022, 7, 1, 9, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 911808514, 'comment_body': ""nit: In Rust getters don't use `get_`. This should be named `mmio_from_range`."", 'comment_created': datetime.datetime(2022, 7, 1, 9, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 911809909, 'comment_body': 'We should write something like: ""The following unwrap is safe because the address allocator makes sure that the address is available and correct"".', 'comment_created': datetime.datetime(2022, 7, 1, 9, 51, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 911844307, 'comment_body': '```suggestion\r\n    /// AddressAllocatorError\r\n```\r\nA space is missing here and in some of the comments below.', 'comment_created': datetime.datetime(2022, 7, 1, 10, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gsserge', 'type': 'User'}, {'comment_id': 911845334, 'comment_body': 'Please add a new line to separate the impl.', 'comment_created': datetime.datetime(2022, 7, 1, 10, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gsserge', 'type': 'User'}, {'comment_id': 911845818, 'comment_body': 'Please add a new line.', 'comment_created': datetime.datetime(2022, 7, 1, 10, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gsserge', 'type': 'User'}, {'comment_id': 911847633, 'comment_body': 'Can we use `?` instead of `unwrap` similar to `fn add_block_device()`?', 'comment_created': datetime.datetime(2022, 7, 1, 10, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gsserge', 'type': 'User'}, {'comment_id': 911849549, 'comment_body': 'Are we sure this cannot fail?', 'comment_created': datetime.datetime(2022, 7, 1, 10, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gsserge', 'type': 'User'}, {'comment_id': 911849717, 'comment_body': 'Please add a new line.', 'comment_created': datetime.datetime(2022, 7, 1, 10, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gsserge', 'type': 'User'}, {'comment_id': 911852744, 'comment_body': 'To me this looks like a set of unit tests for the allocator itself, not the vmm integration testing. Therefore I do not think this belongs here; these kind of tests belong to the allocator crate itself.', 'comment_created': datetime.datetime(2022, 7, 1, 10, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gsserge', 'type': 'User'}, {'comment_id': 911859708, 'comment_body': ""Let's re-write this test to avoid duplication. To do that, we need to identify what are the things that are different on different platforms. Once we do that, we need to find a common name for the things that are different, and then just initialize them with separate values depending on the platform. We can also make some simplifications, so that we don't need to define a lot of variables.\r\n\r\nFor example, let's say we have a `start_addr` from which addresses are valid. Then, we can define an `invalid_addr` as being `start_addr - 100`. While `start_addr` needs to be defined once for each platform, the `invalid_addr` will just be defined once for both platforms."", 'comment_created': datetime.datetime(2022, 7, 1, 10, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 911864741, 'comment_body': 'I would like us to keep parts of this tests, specifically the negative ones where we try to allocate something that does not fit in the MMIO range defined for each platform. That one would test that we initialized the AddressAllocator properly, but it\'s also a bit of a simplistic test that I was considering to be a ""safety net"" testing that the allocator behaves as we expect it to.', 'comment_created': datetime.datetime(2022, 7, 1, 11, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 912360857, 'comment_body': 'since we are passing the range, which we get from the address allocator, address allocator takes care of making sure there is always address available.', 'comment_created': datetime.datetime(2022, 7, 2, 13, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 913127414, 'comment_body': ""We can write these lines as just:\r\n```rust\r\nlet mut address_alloc = Vmm::create_address_allocator(&memory_config).unwrap();\r\n```\r\nWe don't need to explicitly  check `is_ok` because `unwrap` will panic in case of an error."", 'comment_created': datetime.datetime(2022, 7, 4, 16, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 913128735, 'comment_body': 'We typically name these `something_err` (replacing something with the appropriate name) and call unwrap_err on the initialization line. Would you mind updating this so that we are consistent with the existing coding style?\r\n\r\n```rust\r\nlet alloc_err = \r\n     address_alloc.allocate(100, DEFAULT_ADDRESSS_ALIGNEMNT, AllocPolicy::ExactMatch(0)).unwrap_err();\r\nassert_eq!(alloc_err, vm_allocator::Error::ResourceNotAvailable);', 'comment_created': datetime.datetime(2022, 7, 4, 16, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 913150286, 'comment_body': 'nit: Can you add a white line between each test case? The code looks a bit crowded.', 'comment_created': datetime.datetime(2022, 7, 4, 16, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 913150709, 'comment_body': 'When doing the squash, please leave this change in a separate commit as it is only mildly related to the rest of the changes. You should add an explanation in the commit message why was this change added.', 'comment_created': datetime.datetime(2022, 7, 4, 16, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}]","[{'commit_sha': '19fde473d4e52b19d118269cea8d54b9f832133c', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0026685c75bb02744f68561a4c289253d5411021', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}]",Ramyak Mehra,55009050,,User,,73,,28,62
994649425,Adding virtio support for arm,"Closes #210

Signed-off-by: Ramyak mehra <rmehra_be19@thapar.edu>

### Summary of the PR

*Please summarize here why the changes in this PR are needed.*

### Requirements

Before submitting your PR, please make sure you addressed the following
requirements:

- [x] All commits in this PR are signed (with `git commit -s`), and the commit
  message has max 60 characters for the summary and max 75 characters for each
  description line.
- [x] All added/changed functionality has a corresponding unit/integration
  test.
- [x] Any newly added `unsafe` code is properly documented.
",True,223,https://api.github.com/repos/rust-vmm/vmm-reference/pulls/223,https://github.com/rust-vmm/vmm-reference/pull/223,closed,99,28,6,1,0,7,0,0,[],2022-07-12 18:23:15+00:00,2022-07-14 15:31:21+00:00,162486.0,"1 day, 21:08:06","[{'comment_id': 919844584, 'comment_body': 'typo: virito instead of virtio.', 'comment_created': datetime.datetime(2022, 7, 13, 9, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 919844935, 'comment_body': ""Please add a blank line after each function definition. This is needed for all function you're defining."", 'comment_created': datetime.datetime(2022, 7, 13, 9, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 919845825, 'comment_body': 'typo: virito -> virtio.\r\n\r\nSame typo on line 333.', 'comment_created': datetime.datetime(2022, 7, 13, 9, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 919847584, 'comment_body': ""Let's add more comments here: adding a dummy GIC V3 so that we can register the IRQ fds and thus test the virtio functionality in arm as well."", 'comment_created': datetime.datetime(2022, 7, 13, 9, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 919856750, 'comment_body': ""We should have this change in a separate commit. If that's too much hassle, we can keep it in this commit but we need to be explicit in the commit message to why this change is needed."", 'comment_created': datetime.datetime(2022, 7, 13, 9, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 919901082, 'comment_body': 'I think that adding this comment kinda suggests that there should be an internal utility struct named `DevConfig` or something like that, with the fields `addr`, `size` and `irq`. It gets confusing to keep track of things when tuples have more than two values. ', 'comment_created': datetime.datetime(2022, 7, 13, 10, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gsserge', 'type': 'User'}, {'comment_id': 921260841, 'comment_body': 'This test and the one above seem to be doing the same thing. Can you delete one of them?', 'comment_created': datetime.datetime(2022, 7, 14, 15, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}]","[{'commit_sha': 'c2ed3292f4173a0aea28c63895795e9415a6ecf4', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}]",Ramyak Mehra,55009050,,User,,73,,28,62
1001032230,Made relevant changes to generate resources for aarch64.,"Added support to generate deb based pe linux image.
Added support to genreate .ext4 disk to boot from.
Added v5 files to resoure_manifest.json.

Signed-off-by: Ramyak mehra <rmehra_be19@thapar.edu>

### Summary of the PR

*Please summarize here why the changes in this PR are needed.*

### Requirements

Before submitting your PR, please make sure you addressed the following
requirements:

- [x] All commits in this PR are signed (with `git commit -s`), and the commit
  message has max 60 characters for the summary and max 75 characters for each
  description line.
- [x] All added/changed functionality has a corresponding unit/integration
  test.
- [x] Any newly added `unsafe` code is properly documented.
",True,225,https://api.github.com/repos/rust-vmm/vmm-reference/pulls/225,https://github.com/rust-vmm/vmm-reference/pull/225,closed,3053,22,8,5,1,19,0,0,[],2022-07-19 17:00:53+00:00,2022-07-21 15:38:16+00:00,167843.0,"1 day, 22:37:23","[{'comment_id': 925525460, 'comment_body': 'We should add a comment here about why is it not working to use the definition from the `pipeline` dictionary.\r\n\r\nCan you also update the commit message to say ""Fixed the build resources pipeline"" in the summary, and then add details in the description as well with what was the problem (i.e. it was always running on main).', 'comment_created': datetime.datetime(2022, 7, 20, 12, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 925525865, 'comment_body': 'Can you keep the new line as it was before?', 'comment_created': datetime.datetime(2022, 7, 20, 12, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 925547312, 'comment_body': 'This needs to be renamed to ubuntu-focal-rootfs-aarch64.ext4 because otherwise it will have the same name as the x86_64 one and we cannot upload them to S3.', 'comment_created': datetime.datetime(2022, 7, 20, 12, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 925648630, 'comment_body': 'We should also say that we cannot use the variable names directly because `yaml.dump` does not escape the quotes properly.', 'comment_created': datetime.datetime(2022, 7, 20, 14, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 925650755, 'comment_body': ""Here we should just read the platform on which we're running and use that one instead. We can also do this in a subsequent PR in which we also update the tests. The goal would be to reuse as many functions as possible on both platforms."", 'comment_created': datetime.datetime(2022, 7, 20, 14, 5, 13, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 925811965, 'comment_body': 'I was planning to do it when we port of the tests from x86.\r\n', 'comment_created': datetime.datetime(2022, 7, 20, 16, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 926334556, 'comment_body': 'Sounds good.', 'comment_created': datetime.datetime(2022, 7, 21, 7, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 926561305, 'comment_body': 'I think you can construct KERNEL_CFG based on the arch value, instead of having this if else.', 'comment_created': datetime.datetime(2022, 7, 21, 11, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 926563874, 'comment_body': 'This if/elseif is missing formatting. The code inside the blocks should be aligned with one tab more to the right.', 'comment_created': datetime.datetime(2022, 7, 21, 11, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 926568573, 'comment_body': ""Do we need this one? I see that on x86, we don't keep the focal resources that are halting."", 'comment_created': datetime.datetime(2022, 7, 21, 11, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 926583134, 'comment_body': 'inside the make_test_resources.sh file it does make focal resources that are halting.', 'comment_created': datetime.datetime(2022, 7, 21, 11, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 926593220, 'comment_body': ""Yeah, I know that but I think we didn't also upload them to S3. I was asking if we need them somewhere in the tests."", 'comment_created': datetime.datetime(2022, 7, 21, 12, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 926596418, 'comment_body': 'We might need them in the future. It makes the upload process easier if all the files that are generated are also uploaded. Otherwise we need to update the script as to not generate them anymore. The aarch64 does not currently run all tests that run on x86_64. To stay on the safe side I would say to keep the pe-focal-halt image as well.', 'comment_created': datetime.datetime(2022, 7, 21, 12, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}, {'comment_id': 926606166, 'comment_body': 'there are some changes that was required in the default config.\r\nearlier also for x86 a pre made config file was present', 'comment_created': datetime.datetime(2022, 7, 21, 12, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 926614301, 'comment_body': 'ok then @ramyak-mehra can you update the manifest so that it also contains the x86 focal halt resources?', 'comment_created': datetime.datetime(2022, 7, 21, 12, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 926630633, 'comment_body': '@ramyak-mehra sorry, just synced with @andreeaflorescu and we think it would be better to simply not generate those resources anymore. Can you remove those lines in the script, i.e. [42](https://github.com/rust-vmm/vmm-reference/pull/225/files#diff-c413794def62eb2dee882a2eb41434b8df02bd1ee6d67417abf021037e4a4747R42), 44 and 62.', 'comment_created': datetime.datetime(2022, 7, 21, 12, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 926633334, 'comment_body': 'Sorry, I meant the KERNEL_CFG variable, not the file (something like microvm-kernel-5.4-{$arch}.config). Does it make sense now?', 'comment_created': datetime.datetime(2022, 7, 21, 12, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 926633516, 'comment_body': ""should I remove them in a different commit, stating the reason we don't actually need them?\r\nor in a previous commit itself\r\n"", 'comment_created': datetime.datetime(2022, 7, 21, 12, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 926637106, 'comment_body': ""Separate commit sounds good! It can be placed wherever, I don't have a strong preference about it."", 'comment_created': datetime.datetime(2022, 7, 21, 12, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}]","[{'commit_sha': 'b44c703cd1179bcc315f11cff1820d619972827e', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51ea8d8f43ab3b08f734d502f182bb161b02951d', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '285a01288a88108172f733f592467068cb5beffe', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76047888305e480b57bc24ec56648e8ba54585e9', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741709867b64cf3266c723f329a8e6f92a321e48', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}]",Ramyak Mehra,55009050,,User,,73,,28,62
1013595057,ported x86_64 python tests to be compatible with aarch64,"Added support to pull and set aach64 images
Changed how vcpus are checked. This is done because on
aarch64 /proc/cpuinfo doesn't directly return the number of
cpus.

Signed-off-by: Ramyak mehra <rmehra_be19@thapar.edu>

### Summary of the PR

*Please summarize here why the changes in this PR are needed.*

### Requirements

Before submitting your PR, please make sure you addressed the following
requirements:

- [x] All commits in this PR are signed (with `git commit -s`), and the commit
  message has max 60 characters for the summary and max 75 characters for each
  description line.
- [x] All added/changed functionality has a corresponding unit/integration
  test.
- [x] Any newly added `unsafe` code is properly documented.
",True,226,https://api.github.com/repos/rust-vmm/vmm-reference/pulls/226,https://github.com/rust-vmm/vmm-reference/pull/226,closed,56,22,2,2,1,2,0,0,[],2022-08-01 09:29:05+00:00,2022-08-11 13:22:24+00:00,877999.0,"10 days, 3:53:19","[{'comment_id': 937685238, 'comment_body': 'Why is this line changed?', 'comment_created': datetime.datetime(2022, 8, 4, 11, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andreeaflorescu', 'type': 'User'}]","[{'commit_sha': '7de432adebbaa78e49deef62ad983bc31a1add38', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '931441d4bd8519de5d369cb5883d26bb2ba45ea0', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}]",Ramyak Mehra,55009050,,User,,73,,28,62
1031903051,Implementing IRQAllocator in vmm,"We needed IRQAllocator for adding support
for multiple devices. IRQ_NUM for each platform is now passed
down through VMConfig. default value are used.

Signed-off-by: Ramyak mehra <rmehra_be19@thapar.edu>

### Summary of the PR

*Please summarize here why the changes in this PR are needed.*

### Requirements

Before submitting your PR, please make sure you addressed the following
requirements:

- [x] All commits in this PR are signed (with `git commit -s`), and the commit
  message has max 60 characters for the summary and max 75 characters for each
  description line.
- [x] All added/changed functionality has a corresponding unit/integration
  test.
- [x] Any newly added `unsafe` code is properly documented.
",True,229,https://api.github.com/repos/rust-vmm/vmm-reference/pulls/229,https://github.com/rust-vmm/vmm-reference/pull/229,closed,262,69,6,2,4,11,0,0,[],2022-08-20 22:15:41+00:00,2022-09-12 11:36:36+00:00,1948855.0,"22 days, 13:20:55","[{'comment_id': 954971988, 'comment_body': 'Can we add a test for this error?', 'comment_created': datetime.datetime(2022, 8, 25, 13, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 954978717, 'comment_body': 'Can we test this error?', 'comment_created': datetime.datetime(2022, 8, 25, 13, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 954997741, 'comment_body': ""I don't really understand this comment. We can reach the overflow here (it is actually the last assert you are doing in the tests here), but we are returning an error in that case, or what did you mean with this comment?"", 'comment_created': datetime.datetime(2022, 8, 25, 13, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 954998513, 'comment_body': 'Can we assert against the error value (as on line 93 for example)?', 'comment_created': datetime.datetime(2022, 8, 25, 13, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 955003570, 'comment_body': ""The `Error` part of `IrqAllocatorError` is already implied from the enum name, you don't have to repeat it in the error variant as well."", 'comment_created': datetime.datetime(2022, 8, 25, 13, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 955015587, 'comment_body': 'Can we check in some test (or add a new one) that the irq values are indeed the ones that were hardcoded before (e.g. check that after adding a block device, its irq is 5).', 'comment_created': datetime.datetime(2022, 8, 25, 14, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 955104565, 'comment_body': ""this wasn't possible because line 29 prevents to add the values required to test overflow thats why it checks for an error rather than exact error, ideally overflow should never be reached because of how IrqAllocator is initialised"", 'comment_created': datetime.datetime(2022, 8, 25, 15, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 955731160, 'comment_body': 'Hmm, but this check only happens when initializing an irq allocator, you can then call next_irq(), and it is possible for last_used_irq and last_irq to have the same values (u32::MAX in this case).\r\nIf you replace this line with `assert_eq!(irq_alloc.next_irq(), Err(Error::IRQOverflowed));`, everything compiles and works just fine.', 'comment_created': datetime.datetime(2022, 8, 26, 7, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}, {'comment_id': 956878731, 'comment_body': 'I think this was an old comment, which was true when the code was structured a bit differently. I am removing that and modified the test to check the overflow condition.', 'comment_created': datetime.datetime(2022, 8, 29, 4, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 960484329, 'comment_body': 'There is no direct way of confirming this, we need to expose mmio config, also it feels more appropriate to have that test in viritio-block that gsi passed is actually the one being used. ', 'comment_created': datetime.datetime(2022, 9, 1, 10, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ramyak-mehra', 'type': 'User'}, {'comment_id': 968240567, 'comment_body': 'The comment is not removed.', 'comment_created': datetime.datetime(2022, 9, 12, 10, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lauralt', 'type': 'User'}]","[{'commit_sha': '904d5f314d5f10bbf327eeeec6e01f91b8eb1982', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68767328c771f42f753f5fba050079d2a20e10fc', 'committer_username': 'ramyak-mehra', 'committer_name': 'Ramyak Mehra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 7, 2, 23, 10, tzinfo=datetime.timezone.utc)}]",Ramyak Mehra,55009050,,User,,73,,28,62

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
289866413,vmm-reference,rust-vmm/vmm-reference,Rust,60,143,20,21,250,38,4,7,"[{'id': 1048431648, 'number': 232, 'closed': None, 'created': datetime.datetime(2022, 9, 7, 8, 25, 25, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 101, 'deletions': 3, 'state': 'open'}, {'id': 1031903051, 'number': 229, 'closed': datetime.datetime(2022, 9, 12, 11, 36, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 20, 22, 15, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1948855.0, 'time_delta': '22 days, 13:20:55', 'additions': 262, 'deletions': 69, 'state': 'closed'}, {'id': 1018701429, 'number': 227, 'closed': datetime.datetime(2022, 8, 19, 20, 44, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 13, 41, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1234981.0, 'time_delta': '14 days, 7:03:01', 'additions': 186, 'deletions': 36, 'state': 'closed'}, {'id': 1013595057, 'number': 226, 'closed': datetime.datetime(2022, 8, 11, 13, 22, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 1, 9, 29, 5, tzinfo=datetime.timezone.utc), 'time_taken': 877999.0, 'time_delta': '10 days, 3:53:19', 'additions': 56, 'deletions': 22, 'state': 'closed'}, {'id': 1001032230, 'number': 225, 'closed': datetime.datetime(2022, 7, 21, 15, 38, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 17, 0, 53, tzinfo=datetime.timezone.utc), 'time_taken': 167843.0, 'time_delta': '1 day, 22:37:23', 'additions': 3053, 'deletions': 22, 'state': 'closed'}, {'id': 994649425, 'number': 223, 'closed': datetime.datetime(2022, 7, 14, 15, 31, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 18, 23, 15, tzinfo=datetime.timezone.utc), 'time_taken': 162486.0, 'time_delta': '1 day, 21:08:06', 'additions': 99, 'deletions': 28, 'state': 'closed'}, {'id': 973489134, 'number': 219, 'closed': datetime.datetime(2022, 7, 6, 15, 22, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 12, 5, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1307775.0, 'time_delta': '15 days, 3:16:15', 'additions': 154, 'deletions': 40, 'state': 'closed'}, {'id': 894099868, 'number': 215, 'closed': datetime.datetime(2022, 4, 6, 10, 54, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 30, 8, 7, 6, tzinfo=datetime.timezone.utc), 'time_taken': 614866.0, 'time_delta': '7 days, 2:47:46', 'additions': 108, 'deletions': 10, 'state': 'closed'}]"
