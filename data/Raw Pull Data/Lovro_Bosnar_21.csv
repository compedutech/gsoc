pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
467422364,Implement microfacet normal mapping,"## Intro

This PR contains the implementation of microfacet based normal mapping for more robust normal mapping. It is connected to the issue ""Investigate more robust normal mapping"" #2427. It is implemented during Google Summer of Code 2020. 

Implementation and further discussion is based on paper [Microfacet-based Normal Mapping for Robust Monte Carlo path Tracing](https://blogs.unity3d.com/2017/10/02/microfacet-based-normal-mapping-for-robust-monte-carlo-path-tracing/) V. Schussler, E. Heitz, J. Hanika, C. Dachsbacher.

PR contains complete code and test scenes:
1. Main source code in located in  `src/appleseed/renderer/modeling/bsdf/microacetbrdfwrapper.h`.
2. Test scenes are located in `sandbox/tests/test scenes/basis modifiers/`.

## Problem description
Regular normal mapping causes several problems for Monte Carlo path tracing:
1. Non-Symmetric BRDF due to basis construced using shading normals sampled from normal map.
2. Tilting of the positive hemisphere of outgoing directions due to shading normals (`ws`) sampled from normal map which cause inconsistencies with geometric (`wg`) hemisphere. This effect is visible as black fringes on final render.
3. Violation of energy conservation.
![hemisphere_tilt](https://user-images.githubusercontent.com/20316762/90234142-76ff0b80-de1f-11ea-9d43-e38b1a1a6d5f.png)

## Solution introduction
Authors introduced microfacet based surface model. Profile of this surface model contains two facets per shading point. Instead of just replacing geometric normal, the sampled shading normal (perturbed normal) from normal map determines the orientation of one of the facets (perturbed facet, `wp`). Other facet is used so that the average microfacet normal in shading point equals the geometric normal (tangent facet, `wt`).

![profile](https://user-images.githubusercontent.com/20316762/90234348-d8bf7580-de1f-11ea-90f8-ae89f5c767aa.png)

Other properties of this model are similar to microfacet models: distribution of normals, projected areas and intersection probabilities, masking and shadowing function. Using this properties macrosurface single and multiple scattering BRDF is derived with assumption of arbitrary perturbed and tangent facet BRDF.

Multiple scattering BRDF model evaluation and sapling is solved using random walk with arbitrary amount of scatterings. In shading point, perturbed facet has BRDF specified by the user. For example, if user decides on glossy BRDF with particular normal map, then perturbed facet will contain glossy BRDF and the direction of perturbed normal map will ne equal to sampled normal from that normal map. Tangent facet, on the other hand, can be more arbitrary. One choice is that tangent facet can contain same BRDF as perturbed facet. Other choice is that tangent facet has the specular BRDF (note that tangent facet has the little influence as possible, it is only used so that average normal in shading point equals to geometrical normal).

The case where tangent facet has specular BRDF is chosen in this implementation. There are several reasons for that:
1. Authors noted that tangent facet with specular BRDF removes most artefacts and produces results close to classical normal mapping.
1. Random walk algorithm can be simplified to the analytical model with 2nd order scattering which can be evaluated fast.

Analytical model with 2nd order scattering has three distinct cases due to two facets per shading normal:
1. Outgoing direction hitting perturbed facet and reflecting in incoming direction (IPO case).
2. Outgoing direction hitting perturbed facet, reflecting in tangent facet and reflecting in incoming direction (IPTO case).
3. Outgoing direction hitting tangent facet, reflecting in perturbed  facet and reflecting in incoming direction (ITPO case).

## Implementation
As discussed this PR contributes with analytical 2nd order scattering model for microfacet based normal mapping for more robust normal mapping. Implementation is based on:
1. Analytical single and double scattering given in Equation 23
2. Random walk on the microsurface with specular tangent facet given in Algorithm 2

Idea was that microfacet based normal mapping can be applied to arbitrary BRDF (note R for reflective materials). Therefore it is implemented as wrapper agnostic of particular BRDF. Main implementation is in `microfacetbrdfwrapper.h` as `MicrofacetBRDFWRapper` class located with other BRDFs in `src/appleseed/renderer/modeling/bsdf`. 

`MicrofacetBRDFWRapper` is a template class which can be specified with arbitrary BRDF. This class has access to `BRDF::sample()`, `BRDF::evaluate()` and `BRDF::evaluate_pdf()`. Using these BRDF functions it is reimplementing them in `MicrofacetBRDFWRapper::sample()`, `MicrofacetBRDFWRapper::evaluate()` and `MicrofacetBRDFWRapper::evaluate_pdf()` so that microfacet based normal mapping is applied. 

Microfacet normal mapping wrapper is currently (this PR) added to `metal`, `glossy`, `plastic`, `lambertian`, `blinn` and `sheen` BRDFs. 
To add microfacet normal mapping to new BRDF it is recommended to see how it is done in this PR. General steps are as follow (with metalBRDF as an example):
1. Add microfacet normal mapping wrapper to new BRDF: `typedef MicrofacetBRDFWrapper<MetalBRDFImpl> MicrofacetMetalBRDF;` (`metalbrdf.cpp`)
2. Add `MicrofacetMetalBRDFFactory` which is constructing `MicrofacetMetalBRDF` (`metalbrdf.h` and `metalbrdf.cpp`)
3. Register `MicrofacetMetalBRDFFactory` in `bsdffactoryregistar.cpp`
(steps, for now, enable usage of microfacet based normal mapping for `metal` BRDF in appleseed built-in system -- effectively new BRDF is added, but this BRDF is actually using metalBRDF with microfacet normal mapping wrapper. See test scenes for usage)
3. Register `MicrofacetMetalID` in closures.h
4. Add `MicrofacetMetalClosure` in closures.cpp
5. Add `as_microfacet_metal` closure in `as_osl_extensions.h.in`
5. Register `MicrofacetMetalBRDF` in `oslbsdf.cpp`
6. Create `as_microfacet_metal.osl` to use it in scene construction
(These steps allow using microfacet normal mapping wrapped `metalBRDF` as new closure: as_microfacet_metal.  See test scenes for usage)

## Results
With this contribution, black areas due to regular normal mapping are fixed. Authors have provided [code](https://drive.google.com/file/d/0BzvWIdpUpRx_NWZ1YlpyWHpoRTg/view) in Mitsuba which was used to compare the results.

Appleseed, original normal mapping:
![appleseed_circle2_original_area_metal](https://user-images.githubusercontent.com/20316762/90236841-97c96000-de23-11ea-99d1-a1a2c3f83837.png)

Appleseed, microfacet based normal mapping:
![appleseed_circle2_microfacet_area_metal](https://user-images.githubusercontent.com/20316762/90236868-a4e64f00-de23-11ea-9d74-208872ab1068.png)

Mitsuba, microfacet based normal mapping:
![mitsuba_metal_point_mirofacet_circl2](https://user-images.githubusercontent.com/20316762/90236955-c5160e00-de23-11ea-8e2a-658d28e00a53.png)

## Important note:
Issue: Double wrapping of child BSDFs in BSDFBlend, BSDFMix and OSLBSDF #1243 is also affecting the results when microfacet normal mapping OSL closure is used. 
This PR: Fixing double wrapping for OSLBRDF children #2889 is fixing the problem of double wrapping for OSLBSDF children.
Therefore, PR #2889 should be merged after the current PR.
",True,2886,https://api.github.com/repos/appleseedhq/appleseed/pulls/2886,https://github.com/appleseedhq/appleseed/pull/2886,closed,4678,0,61,11,2,111,1,0,[{'name': 'PR | Squash'}],2020-08-13 14:27:34+00:00,2020-12-06 18:00:12+00:00,9948758.0,"115 days, 3:32:38","[{'comment_id': 471444945, 'comment_body': 'Is there a reason you made this an instanciable class, while every other supportclass is static?', 'comment_created': datetime.datetime(2020, 8, 17, 12, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471448142, 'comment_body': ""Is it possible to have the call to do the cosine multiplication here and have it as a separate function in the `microfacetnormalmappinghelper.h`? That way, the flow of the bsdfwrapper isn't split."", 'comment_created': datetime.datetime(2020, 8, 17, 12, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471448622, 'comment_body': 'Same question as above.', 'comment_created': datetime.datetime(2020, 8, 17, 12, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471449319, 'comment_body': 'This can be shortened to something like\r\n`bool use_microfacet_normal_mapping = local_geometry.m_shading_point->get_material()->get_parameters().get_optional(""microfacet_normal_mapping"", false));`\r\nif you have the microfacet selector to be a boolean. See the comment on the materialfactory for how to do that.', 'comment_created': datetime.datetime(2020, 8, 17, 12, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471449422, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2020, 8, 17, 12, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471455648, 'comment_body': ""I'd like to keep the const here. You can either use the `?:` if here, or move the check from below into an `inline` function. @dictoon, what's your oppinion on that?"", 'comment_created': datetime.datetime(2020, 8, 17, 12, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471455760, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2020, 8, 17, 12, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471455933, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2020, 8, 17, 12, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471456021, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2020, 8, 17, 12, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471460245, 'comment_body': 'Please use `""boolean""` as a type here.\r\nAs an orientation for how to use it, check `src/appleseed/renderer/modeling/light/ilightfactory.cpp:70`.', 'comment_created': datetime.datetime(2020, 8, 17, 12, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471462396, 'comment_body': 'Adding\r\n```\r\n.insert(""visible_if"",\r\n                Dictionary()\r\n                    .insert(""displacement_method"", ""normal"")));\r\n```\r\nwill make this option only be visible if normal mapping is selected.', 'comment_created': datetime.datetime(2020, 8, 17, 13, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471463098, 'comment_body': 'For all test scenes:\r\nCan you use the `Plane001.binarymesh`, which is already present as well as the `light.obj`?', 'comment_created': datetime.datetime(2020, 8, 17, 13, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 471538185, 'comment_body': 'Thanks for the hint! It is done like this now.', 'comment_created': datetime.datetime(2020, 8, 17, 14, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 471538495, 'comment_body': 'Thanks for the hint! \r\nIt is done like that now.', 'comment_created': datetime.datetime(2020, 8, 17, 14, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 471538837, 'comment_body': 'Great hint, thanks!\r\nNow it is done like this. ', 'comment_created': datetime.datetime(2020, 8, 17, 14, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 472048658, 'comment_body': 'I think this is a good idea. I have implemented it like that. Now the `const` is kept and `?:` is used.\r\nI would only ask if you could check if the visual structure is OK.', 'comment_created': datetime.datetime(2020, 8, 18, 9, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 472048769, 'comment_body': 'I think this is a good idea. I have implemented it like that. Now the `const` is kept and `?:` is used.\r\nI would only ask if you could check if the visual structure is OK.\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 9, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 472134473, 'comment_body': ""I think it's fine."", 'comment_created': datetime.datetime(2020, 8, 18, 12, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472151877, 'comment_body': 'Please align', 'comment_created': datetime.datetime(2020, 8, 18, 12, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472156595, 'comment_body': 'Please align these arguments to the ones of the functions below.', 'comment_created': datetime.datetime(2020, 8, 18, 12, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472159461, 'comment_body': ""This file got created in 2020, so all the previous copyrights aren't needed.\r\nAlso, you can enter yourself as the author of the file, if you want to.\r\nCheck out the [copyright notes](https://github.com/appleseedhq/appleseed/wiki/Copyright-Notices) for what has to be where."", 'comment_created': datetime.datetime(2020, 8, 18, 12, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472167128, 'comment_body': ""Maybe it's worth it to rename those two functions to something like `abs_dot` and `clamped_dot`."", 'comment_created': datetime.datetime(2020, 8, 18, 12, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472202198, 'comment_body': 'Those two lambdas are very similar. Can you make them one function, e.g. with a template parameter, via an enum or as a wrapper?', 'comment_created': datetime.datetime(2020, 8, 18, 13, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472207204, 'comment_body': 'Could you rename that `w` to `wi` to match the papers terminology and the naming of the above functions? Also, `w_wp` could use a more meaningful name.\r\nAlso, could you change the order of wp and wi, to also match the order of parameters in the paper?', 'comment_created': datetime.datetime(2020, 8, 18, 13, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472210015, 'comment_body': 'This codepart (setting up `wt`, calculating all the `w*_dot_w*`s, ...) repeats quite a lot. Is there a way to reuse code here?', 'comment_created': datetime.datetime(2020, 8, 18, 13, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472211576, 'comment_body': 'The `ap`s and  `at`s are repeating as well. That also calls for an independent function.', 'comment_created': datetime.datetime(2020, 8, 18, 13, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472212189, 'comment_body': ""Please untabify the whole file and check the alignment afterwards. In this review-iteration, I didn't write all the alignment issues down, because they will change with this tabify anyways.\r\nThe tab size is 4, indent is 4 as well and all tabs have to be spaces."", 'comment_created': datetime.datetime(2020, 8, 18, 13, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472245317, 'comment_body': ""I'm quite sure this class can be implemented as a static class. All your functions are `const` and you don't have any classmembers."", 'comment_created': datetime.datetime(2020, 8, 18, 14, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472288512, 'comment_body': ""Please reformat this fuction (and it's body) into a smaller width."", 'comment_created': datetime.datetime(2020, 8, 18, 15, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472288774, 'comment_body': 'This line is too wide.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472288931, 'comment_body': 'This line is too wide.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472317304, 'comment_body': 'Too wide as well.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472322028, 'comment_body': 'If you refer to a Figure in a a paper, name it somewhere.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472322175, 'comment_body': 'Too wide.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472335446, 'comment_body': 'In the `if` and `else` block there is a lot of redundant code, which can be reused.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472336064, 'comment_body': 'Youre using this codepart a lot of times. It should be moved into a helper function (e.g. `reflect()`).', 'comment_created': datetime.datetime(2020, 8, 18, 16, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472336451, 'comment_body': 'Too wide.', 'comment_created': datetime.datetime(2020, 8, 18, 16, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472967445, 'comment_body': 'Too wide.', 'comment_created': datetime.datetime(2020, 8, 19, 11, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472971774, 'comment_body': ""These calculations repeat a lot (e.g. you're using lambda_p in two cases here). Would calling that function once be quicker?\r\nAs in\r\n```c++\r\nconst float lambda_p_value = lambda_p(pertubed_shading_normal, outgoing, original_shading_normal);\r\nconst float g1_value = G1(pertubed_shading_normal, incoming, original_shading_normal, true);\r\nvalue_ipo *= lambda_p_value\r\n    * shift_cos_in_fast(adot(incoming, perturbed_shading_normal), shadow_terminator_freq_mult)\r\n    * g1_value;\r\npdf_value *= lambda_p_value * g1_value;\r\n```\r\nThere are lots of places in this file where this comment applies."", 'comment_created': datetime.datetime(2020, 8, 19, 11, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472972892, 'comment_body': ""You're only using this variable within the `if` block. Please move it inside."", 'comment_created': datetime.datetime(2020, 8, 19, 11, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472981564, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2020, 8, 19, 12, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 472981642, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2020, 8, 19, 12, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 473004421, 'comment_body': ""Even though the paper wrote this function as `G1`, I'd rather stick to the convention of having functions start with a lower case letter `g1`."", 'comment_created': datetime.datetime(2020, 8, 19, 12, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 473006954, 'comment_body': ""This parameter isn't used at all. Please erase it."", 'comment_created': datetime.datetime(2020, 8, 19, 12, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 473009450, 'comment_body': 'The whole structure of this function and `evaluate` is very similar. Would it be possible to reuse some code parts here?', 'comment_created': datetime.datetime(2020, 8, 19, 12, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 473010930, 'comment_body': 'Small thing, but it bothers me a bit. The order here is different than in line 411. Maybe use the order of the paper, to have a common ground.', 'comment_created': datetime.datetime(2020, 8, 19, 13, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 473022244, 'comment_body': 'Good idea, done!', 'comment_created': datetime.datetime(2020, 8, 19, 13, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473032271, 'comment_body': 'Done, now are lambda_p and lambda_t merged into one function.', 'comment_created': datetime.datetime(2020, 8, 19, 13, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473054398, 'comment_body': '`w` is renamed to `wi` in `G1()`.\r\n`w_wp` is renamed to `perturbed_facet`.\r\nOrder of `wp` and `wi` is changed in `G1()` and `lambda()` to match the order given in the paper.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473069412, 'comment_body': 'Great note! I have reused the code. \r\nExplanation is in the next comment.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473071468, 'comment_body': 'I agree. \r\nI have created `projected_area()` function which encapsulates calculation of `ap_wi` `and at_wi` and reuses the:\r\n> (setting up wt, calculating all the w*_dot_w*s, ...)\r\n\r\ncode.\r\n`projected_area()` is used both in `G1` and `lambda` now.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473083568, 'comment_body': 'Done! I have also reformatted other helper functions in a smaller width.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473194967, 'comment_body': 'This should be OK now.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473195784, 'comment_body': 'Paper name and the link was at the beginning of the file, now I have referenced it in this comment.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473196310, 'comment_body': 'I have formatted `sample()` for width in general. This should be OK now.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473197303, 'comment_body': 'I have added `reflect()` function which is reusing code for reflection. Also, I have added `cosine_multiplier()` function which is reusing code for cosine multiplication.\r\nDo you have some other code reuse in mind?', 'comment_created': datetime.datetime(2020, 8, 19, 17, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473199038, 'comment_body': 'I have added `reflect()` and I have added it in `sample()`, `evaluate()` and `evaluate_pdf()`.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473199279, 'comment_body': 'I have formatted `sample() `for width in general. This should be OK now.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473199869, 'comment_body': 'I have formatted sample() for width in general. This should be OK now.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473199919, 'comment_body': 'I have formatted sample() for width in general. This should be OK now.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473199978, 'comment_body': 'I have formatted sample() for width in general. This should be OK now.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473200643, 'comment_body': 'This comment is connected with this one: https://github.com/appleseedhq/appleseed/pull/2886#discussion_r472245317\r\nI will discuss it there.', 'comment_created': datetime.datetime(2020, 8, 19, 17, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473227878, 'comment_body': 'Agree, done!', 'comment_created': datetime.datetime(2020, 8, 19, 18, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473228719, 'comment_body': 'Done. \r\nI have also moved reflected `outgoing` direction inside `evaluate` and `evaluate_pdf` call for ITPO case because it is only used there.', 'comment_created': datetime.datetime(2020, 8, 19, 18, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473228818, 'comment_body': 'Done.\r\n', 'comment_created': datetime.datetime(2020, 8, 19, 18, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473228878, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 19, 18, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473233429, 'comment_body': 'OK, thanks for the information!\r\nI have replaced these lines with:\r\n`Copyright (c) 2020 Lovro Bosnar, The appleseedhq Organization `\r\nAs it is explained in the copyright notes. I hope that is fine.\r\nShould I also change something in copyright notice in other files I have changed?', 'comment_created': datetime.datetime(2020, 8, 19, 18, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473747429, 'comment_body': 'I have been investigating this but I am not sure how to do it yet.\r\nJust to explain the design of this class a bit so others can follow. I have designed this class similar to the `bsdfwrapper.h`. If I am not mistaken, this is [policy-based design](https://stackoverflow.com/questions/23868740/c-inherit-class-from-template-parameter). This class is inheriting template parameter which is in this case arbitrary BRDF. All BRDFs in Appleseed are not ""static classes"" (e.g. [metalBRDF](https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/renderer/modeling/bsdf/metalbrdf.cpp)) therefore in order to use `BRDF::sample()`, `BRDF::evaluate()` and `BRDF::evaluate_pdf()`, base class has to have constructor in which specific BRDF is constructed. Because of this base class can not be ""static class"". \r\nSo, BSDFWrapper is not ""static class"" because it has to have constructor for calling the particular template class (BRDF) constructor. This is required because BRDFs are not static classes (e.g. metalBRDF). Similarly is for this class also.\r\nAs I have said, I am not sure how to create a ""static class"" which has to use arbitrary ""non-static"" class. I would appreciate any hint about this! @dictoon any ideas?', 'comment_created': datetime.datetime(2020, 8, 20, 8, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473776205, 'comment_body': 'I agree.\r\nI am using paper order: labda() * brdf() * cosine_mult() * (1-G1) * G1().\r\nI have checked the same in the other code parts but here was the only difference. It is fixed now.', 'comment_created': datetime.datetime(2020, 8, 20, 8, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473830244, 'comment_body': 'Great point! I have refactored it like that the whole file.', 'comment_created': datetime.datetime(2020, 8, 20, 9, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473863997, 'comment_body': 'Formatted in width.\r\nI have also formatted other long lines in sample, evaluate and evaluate_pdf.', 'comment_created': datetime.datetime(2020, 8, 20, 10, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473880236, 'comment_body': 'Done! \r\nI have also aligned arguments in other functions. ', 'comment_created': datetime.datetime(2020, 8, 20, 10, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473947239, 'comment_body': 'OK, done!\r\nI have also checked the trailing whitespaces.\r\nI will keep this comment in mind for later checks also.', 'comment_created': datetime.datetime(2020, 8, 20, 12, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473967388, 'comment_body': 'resolved: https://github.com/appleseedhq/appleseed/pull/2886#discussion_r471448142', 'comment_created': datetime.datetime(2020, 8, 20, 13, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473967753, 'comment_body': 'resolved: https://github.com/appleseedhq/appleseed/pull/2886#discussion_r471448142', 'comment_created': datetime.datetime(2020, 8, 20, 13, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473967890, 'comment_body': 'resolved: https://github.com/appleseedhq/appleseed/pull/2886#discussion_r471448142', 'comment_created': datetime.datetime(2020, 8, 20, 13, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 473992397, 'comment_body': 'Indeed, done!', 'comment_created': datetime.datetime(2020, 8, 20, 13, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 474761294, 'comment_body': 'I have investigated this a bit more. I have found out that appleseed has built-in `grid` `mesh_object`. \r\nI have refactored all test scenes so they use this built-in `mesh_object`.\r\n`_geometry/*` is now no longer needed.', 'comment_created': datetime.datetime(2020, 8, 21, 15, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 475545395, 'comment_body': 'I have created `microfacet_scattering_helper()` function which is reusing code from `evaluate()` and `evaluate_pdf()` in `IPO`, `IPTO` and `ITPO` cases.', 'comment_created': datetime.datetime(2020, 8, 24, 11, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 478383499, 'comment_body': 'Please remove this space.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 478468427, 'comment_body': 'Please untabify and align this comment', 'comment_created': datetime.datetime(2020, 8, 27, 14, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 478473715, 'comment_body': 'You can `inline` these very small functions.', 'comment_created': datetime.datetime(2020, 8, 27, 14, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 478476178, 'comment_body': ""This `if/then/else` construct isn't nice to read.\r\nYou can either go with\r\n```c++\r\nif (IPO)\r\n    return ...;\r\nif (IPTO)\r\n    return ...;\r\n```\r\nSince everything that's coming after an `if` with a `return` statement is implicitely an `else`.\r\nOr you can just use `switch`."", 'comment_created': datetime.datetime(2020, 8, 27, 14, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 478479847, 'comment_body': ""Since you're keeping the `cosine_multiplier` variable as a parameter of this function, you can also hand it over here, instead of a fixed `false`. (Also applies for other calls.)"", 'comment_created': datetime.datetime(2020, 8, 27, 14, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 478484842, 'comment_body': ""You could use the `cosine_mult` parameter here as a check and apply this multiplication depending on its value.\r\nAlso, you could move this multiplication out of the `if/else` block, since you're doing it in both pathes."", 'comment_created': datetime.datetime(2020, 8, 27, 14, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 478575086, 'comment_body': 'Also note that we require a space between `if` and the opening parenthesis:\r\nhttps://github.com/appleseedhq/appleseed/wiki/Coding-Philosophy-and-Guidelines', 'comment_created': datetime.datetime(2020, 8, 27, 17, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 478607404, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 478607471, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 478607709, 'comment_body': 'Function defined in class body is implicity inline.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 478608656, 'comment_body': 'Removed else.\r\nI have checked if all ""if-s"" have space between opening parenthesis.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 478608766, 'comment_body': 'Done for all.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 478609926, 'comment_body': 'I have moved cosine multiplication outside if-else block.\r\n\r\nUsing cosine_mult in a check for microfacet normal mapping parts should be yet discussed. According to the paper, it should be always used.\r\n**EDIT:** cosine_mult should be used for checking if cosine_multiplier() is performed. But the doubling mentioned here: https://github.com/appleseedhq/appleseed/issues/1243 is causing problems while OSL is used because BSDFWRapper is setting cosine_mult to false. Solution for this is to check if osl_bsdf is used and if it is, then it should only evaluate the child of OSLBSDFImpl with cosine_mult set to true. I would propose opening new PR for solving the doubling problem. **EDIT**. PR for that: #2889\r\n\r\nI am also keeping cosine_mult for compatibility with base BRDFs.', 'comment_created': datetime.datetime(2020, 8, 27, 18, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 478737323, 'comment_body': ""The three `if`s in this block don't, the others should be fine."", 'comment_created': datetime.datetime(2020, 8, 27, 22, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 479386702, 'comment_body': 'OK, fixed.\r\n', 'comment_created': datetime.datetime(2020, 8, 28, 15, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 479387955, 'comment_body': 'After the discussion, we decided to use false. Reasons:\r\n1) base BRDFs (BRDFImpl) are ignoring these values\r\n2) false implicates that cosine multiplication is done outside', 'comment_created': datetime.datetime(2020, 8, 28, 15, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 480295107, 'comment_body': ""The `*.png` file in the `ref/` folder needs to have the same name as this `.appleseed` file, otherwise the testsuit won't recognize it."", 'comment_created': datetime.datetime(2020, 8, 31, 18, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 480313541, 'comment_body': 'Please remove the trailing space.', 'comment_created': datetime.datetime(2020, 8, 31, 18, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 480314022, 'comment_body': 'The lambertian BRDF and Glossy BRDF got the same Label.', 'comment_created': datetime.datetime(2020, 8, 31, 18, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 480314941, 'comment_body': 'Somehow, there is no lambertian BRDF anymore here and below (`ll. 420`)', 'comment_created': datetime.datetime(2020, 8, 31, 18, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 480321126, 'comment_body': 'The Lambertian is missing here too.', 'comment_created': datetime.datetime(2020, 8, 31, 18, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 480322548, 'comment_body': 'Is there a reason we only got that selection of BRDFs and not all regular BRDFs as microfacet as well (e.g. the `OrenNayarBRDF`)?', 'comment_created': datetime.datetime(2020, 8, 31, 18, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 480324314, 'comment_body': 'This should be `MicrofacetLambertianBRDF`', 'comment_created': datetime.datetime(2020, 8, 31, 18, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 480326535, 'comment_body': 'What/where is this value used for?', 'comment_created': datetime.datetime(2020, 8, 31, 18, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'LZaw', 'type': 'User'}, {'comment_id': 480891014, 'comment_body': 'Fixed.\r\n', 'comment_created': datetime.datetime(2020, 9, 1, 6, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 480891272, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 9, 1, 6, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 480891529, 'comment_body': 'Fixed. Also, fixed the factory below.', 'comment_created': datetime.datetime(2020, 9, 1, 6, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 480891711, 'comment_body': 'My mistake. I have removed it now.', 'comment_created': datetime.datetime(2020, 9, 1, 6, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 480894409, 'comment_body': 'This goes for all OSL and Lambertian related comments.\r\nAppleseed is not providing Lambertian OSL (as far as I have seen).\r\nMicrofacet normal mapping is a wrapper around existing closures. Therefore, there is no wrapper around Lambertian closure.\r\n\r\nNOTE: microfacet normal mapping exists for built-in Lambertian.', 'comment_created': datetime.datetime(2020, 9, 1, 6, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 480894667, 'comment_body': 'Explaned here: https://github.com/appleseedhq/appleseed/pull/2886#discussion_r480894409', 'comment_created': datetime.datetime(2020, 9, 1, 6, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 480905553, 'comment_body': 'It was important for me to have metal and glossy wrappers.\r\n\r\nThe reason for other selection is that I think it is various enough. New microfacet wrappers can be added with steps described here: https://github.com/appleseedhq/appleseed/pull/2886#issue-467422364.\r\n\r\nMetal, Plastic, Glossy, Blinn are microfacet based BRDFs.\r\n\r\nLambertian is simple diffuse based.\r\n\r\nSheen has its own base: https://disney-animation.s3.amazonaws.com/library/s2012_pbs_disney_brdf_notes_v2.pdf\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 9, 1, 7, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}, {'comment_id': 480911589, 'comment_body': 'OK. Fixed now.', 'comment_created': datetime.datetime(2020, 9, 1, 7, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lorentzo', 'type': 'User'}]","[{'commit_sha': 'cbe4a0984c4559fe1d9750bf342a7778f819d135', 'committer_username': 'lorentzo', 'committer_name': 'Lovro', 'committer_email': 'lovro.bosnar1@gmail.com', 'commit_date': datetime.datetime(2016, 7, 6, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40044e1556e8b4ad7ad07cc17ea6574e6dcd7fa2', 'committer_username': 'lorentzo', 'committer_name': 'Lovro', 'committer_email': 'lovro.bosnar1@gmail.com', 'commit_date': datetime.datetime(2016, 7, 6, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c1e2415afed05fa3bd97b70cbff962839bfdf3', 'committer_username': 'lorentzo', 'committer_name': 'Lovro', 'committer_email': 'lovro.bosnar1@gmail.com', 'commit_date': datetime.datetime(2016, 7, 6, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91342fd39876267bd8734b4020d058b92208d690', 'committer_username': 'lorentzo', 'committer_name': 'Lovro', 'committer_email': 'lovro.bosnar1@gmail.com', 'commit_date': datetime.datetime(2016, 7, 6, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3672e524b386ba5f5d6d8d92c4d51ca089ae5d9', 'committer_username': 'lorentzo', 'committer_name': 'Lovro', 'committer_email': 'lovro.bosnar1@gmail.com', 'commit_date': datetime.datetime(2016, 7, 6, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37a4d404d2fb86e5f01c593430ff9f5c43efb615', 'committer_username': 'lorentzo', 'committer_name': 'Lovro', 'committer_email': 'lovro.bosnar1@gmail.com', 'commit_date': datetime.datetime(2016, 7, 6, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06dc8229c684e38061fa1c3ab8594b772e5cf198', 'committer_username': 'lorentzo', 'committer_name': 'Lovro', 'committer_email': 'lovro.bosnar1@gmail.com', 'commit_date': datetime.datetime(2016, 7, 6, 9, 1, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cea9b54b35476ea9d283ed236198992f38edd895', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f034bd15b17fcf5c53e3cf9c64021563c7231ed2', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8592eb570136c1ffeeb9bbc43b166907bfa34c', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c800191e2e526cf8e898cff82732f4ca93c309b6', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}]",Lovro,20316762,lovro.bosnar1@gmail.com,User,,63,,11,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
753784,appleseed,appleseedhq/appleseed,C++,328,2185,130,99,11152,456,6,35,"[{'id': 475506822, 'number': 2889, 'closed': datetime.datetime(2020, 11, 20, 15, 54, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 16, 28, 28, tzinfo=datetime.timezone.utc), 'time_taken': 7255565.0, 'time_delta': '83 days, 23:26:05', 'additions': 64, 'deletions': 9, 'state': 'closed'}, {'id': 467422364, 'number': 2886, 'closed': datetime.datetime(2020, 12, 6, 18, 0, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 14, 27, 34, tzinfo=datetime.timezone.utc), 'time_taken': 9948758.0, 'time_delta': '115 days, 3:32:38', 'additions': 4678, 'deletions': 0, 'state': 'closed'}, {'id': 403121531, 'number': 2841, 'closed': datetime.datetime(2020, 6, 7, 20, 0, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 14, 11, 15, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4697086.0, 'time_delta': '54 days, 8:44:46', 'additions': 16, 'deletions': 15, 'state': 'closed'}, {'id': 381311579, 'number': 2784, 'closed': datetime.datetime(2020, 3, 25, 21, 25, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 28, 10, 19, 23, tzinfo=datetime.timezone.utc), 'time_taken': 2286379.0, 'time_delta': '26 days, 11:06:19', 'additions': 505, 'deletions': 22, 'state': 'closed'}, {'id': 279948764, 'number': 2611, 'closed': datetime.datetime(2019, 6, 29, 10, 8, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 5, 17, 16, 2, 5, tzinfo=datetime.timezone.utc), 'time_taken': 3693983.0, 'time_delta': '42 days, 18:06:23', 'additions': 33, 'deletions': 0, 'state': 'closed'}, {'id': 270287158, 'number': 2552, 'closed': datetime.datetime(2019, 4, 25, 11, 44, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 4, 14, 10, 35, 43, tzinfo=datetime.timezone.utc), 'time_taken': 954525.0, 'time_delta': '11 days, 1:08:45', 'additions': 204, 'deletions': 0, 'state': 'closed'}]"
