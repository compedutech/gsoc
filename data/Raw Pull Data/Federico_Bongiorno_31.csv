pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
425966704,Quadratic sieve - Draft,Working version of sieve albeit untested,True,202,https://api.github.com/repos/Bodigrim/arithmoi/pulls/202,https://github.com/Bodigrim/arithmoi/pull/202,closed,210,1,6,57,3,30,0,0,[],2020-06-01 13:04:17+00:00,2020-06-25 21:18:45+00:00,2103268.0,"24 days, 8:14:28","[{'comment_id': 439655288, 'comment_body': 'Here `(j ^ (2 :: Int) - n)` need not be an integer when `t` and `n` are large.', 'comment_created': datetime.datetime(2020, 6, 12, 21, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 439680434, 'comment_body': 'BTW it would be simpler to write `j * j - n`.', 'comment_created': datetime.datetime(2020, 6, 12, 23, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 439680683, 'comment_body': 'Please do not commit `*.prof` files. You can add `*.prof` to `.gitignore` instead.', 'comment_created': datetime.datetime(2020, 6, 12, 23, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 440460582, 'comment_body': 'If this is a frequent operation perhaps doing it with manual zipping of two int sets will be faster?', 'comment_created': datetime.datetime(2020, 6, 15, 21, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sergv', 'type': 'User'}, {'comment_id': 440464157, 'comment_body': 'Extra space after `[`, please use one space', 'comment_created': datetime.datetime(2020, 6, 15, 21, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sergv', 'type': 'User'}, {'comment_id': 440469994, 'comment_body': 'I think it would make sense to make `Prime Int` strict to unbox it into the `PrimeInt` constructor.', 'comment_created': datetime.datetime(2020, 6, 15, 21, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sergv', 'type': 'User'}, {'comment_id': 440470332, 'comment_body': 'Typo `Parametres`.', 'comment_created': datetime.datetime(2020, 6, 15, 21, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sergv', 'type': 'User'}, {'comment_id': 440471006, 'comment_body': 'I think using `Data.List.find` can make this function smaller and clearer.', 'comment_created': datetime.datetime(2020, 6, 15, 22, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sergv', 'type': 'User'}, {'comment_id': 440474850, 'comment_body': 'Same comment as for `xor` - perhaps manual zipping will be faster if this is called frequently enough?', 'comment_created': datetime.datetime(2020, 6, 15, 22, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sergv', 'type': 'User'}, {'comment_id': 440476636, 'comment_body': 'Please swap space and  comma: `(indices ,pivotFact)`.', 'comment_created': datetime.datetime(2020, 6, 15, 22, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sergv', 'type': 'User'}, {'comment_id': 441791361, 'comment_body': 'Exclude all `*.prof` files please', 'comment_created': datetime.datetime(2020, 6, 17, 19, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 441795666, 'comment_body': ""Just to elaborate a little on what I have in mind: convert to both sets to lists, e.g. `PS.toList` and then traverse them booth at the same time kind of like we do during merge sort and then reconstruct the result as a set. There's `Data.IntSet.fromDistinctAscList` function which should do this with reasonably small overhead."", 'comment_created': datetime.datetime(2020, 6, 17, 19, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sergv', 'type': 'User'}, {'comment_id': 441833488, 'comment_body': ""I tried the optimization, which removes rows with primes, which does not appear in any other row. It seems to work quite well, actually. The example in the executable computes 32714 rows of `indexedFactorisations` and takes 842 seconds in total. But after removing rows with primes, which appear only once, we are left with only 13634 rows and factorisation completes in 270 seconds. \r\n\r\nHere is a draft implementation:\r\n\r\n```haskell\r\n...\r\n    indexedFactorisations' = V.toList (findSmoothNumbers sievingIntervalF)\r\n    onlyOnce = appearsOnlyOnce $ map (primeSet . snd) indexedFactorisations'\r\n    indexedFactorisations = filter (\\(_, SignedPrimeIntSet _ xs) -> PS.disjoint xs onlyOnce) indexedFactorisations'\r\n...\r\n\r\n-- | Find all primes, which appear only once in the input list.\r\nappearsOnlyOnce :: [PS.PrimeIntSet] -> PS.PrimeIntSet\r\nappearsOnlyOnce = fst . foldl' go (mempty, mempty)\r\n  where\r\n    go (onlyOnce, atLeastOnce) x =\r\n      ((onlyOnce PS.\\\\ PS.unPrimeIntSet x) <> (x PS.\\\\ PS.unPrimeIntSet atLeastOnce), atLeastOnce <> x)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 17, 21, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 442176795, 'comment_body': 'I must have done something wrong before. This seems to be faster', 'comment_created': datetime.datetime(2020, 6, 18, 12, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 442487046, 'comment_body': 'I tried today this approach, but it appeared to be slower. Seems, bitmasks in `IntSet` are quite efficient (even while `xor` is 3x slower than it could be, if it was a built-in operation).', 'comment_created': datetime.datetime(2020, 6, 18, 20, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 443115686, 'comment_body': '```suggestion\r\n-- the Quadratic Sieve attempts to decompose n into smaller factors p and q.\r\n```', 'comment_created': datetime.datetime(2020, 6, 20, 9, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 443115955, 'comment_body': '```suggestion\r\n-- Given a solution, the value of x^2 - n is computed again. By construction,\r\n```', 'comment_created': datetime.datetime(2020, 6, 20, 9, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 443412222, 'comment_body': 'So your return value is either n or p, can you please specify that explicitly.\r\nAlso can you specify under which values of n,b,t the algorithm succedes.', 'comment_created': datetime.datetime(2020, 6, 22, 8, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 443420978, 'comment_body': 'This function is exported, but does not have a Haddock documentation.\r\nAlso findPairs is a non-descriptive function name. Find pairs of what?\r\nJust saying pairs tells as much as the type signature.\r\nMost important, how are the two exported functions supposed to be used in conjunction?\r\n\r\nAssuming you only export it for the tests, you could seperate if from the actual interface in f.e. Math.NumberTheory.Primes.Factorisation.QuadraticSieve.Internal .', 'comment_created': datetime.datetime(2020, 6, 22, 9, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 444771311, 'comment_body': '```suggestion\r\nfindFactor _ [] = error ""Parameters are not large enough.""\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 9, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 444773686, 'comment_body': '```suggestion\r\n-- Returns the smooth numbers together with their index. This\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 9, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 444775127, 'comment_body': '```suggestion\r\n-- Given an odd positive composite Integer n and Int parameters b and t,\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 9, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 444808507, 'comment_body': 'Thank you for taking time to review the code. What do you mean by this? Do I need to create a separate file?', 'comment_created': datetime.datetime(2020, 6, 24, 10, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 444864706, 'comment_body': 'Well there are several possibilities, including using a preprocessor, but I think something like this would do:\r\nhttps://www.reddit.com/r/haskell/comments/8w90ia/test_non_public_functions/e1tocry?utm_source=share&utm_medium=web2x', 'comment_created': datetime.datetime(2020, 6, 24, 12, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 445166000, 'comment_body': '""contruction"" --> ""construction""', 'comment_created': datetime.datetime(2020, 6, 24, 20, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 445166733, 'comment_body': 'Eventually all these functions will be hidden behind `Math.NumberTheory.Primes.factorise`, but for the time being it is more convenient to have them exported.', 'comment_created': datetime.datetime(2020, 6, 24, 20, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 445386694, 'comment_body': '```suggestion\r\n    Nothing          -> if sign signedPrimeSet then Just (Bool True) else Nothing\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 8, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 445404536, 'comment_body': '```suggestion\r\n    Bool s  -> sign signedPrimeSet == s\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 8, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 445404673, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 8, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 445465583, 'comment_body': '```suggestion\r\n        add (a, u) (b, v) = ((a S.\\\\ b) <> (b S.\\\\ a), u `xor` v)\r\n```', 'comment_created': datetime.datetime(2020, 6, 25, 10, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}]","[{'commit_sha': 'ef8029de3e3e201e9cc15ac5f489e1bba82ae8fc', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '064284f0d9fc3fb4eba184519f41301d43686a0d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebaf723b0c2121bb98455a132202f9118f2d7bc0', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a44fdc8fd3bec943315a1268b2045127670c62', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8059830342cf393532d38904df6022ff25c88844', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25d1bc4f152898483a7defb972cf433cc1754e29', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf7d3ec7816bd2ae3d247e63235b48c54a501bda', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '634447c119ee9ea3844f8a560107745865835c42', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf503dfdf6f0f54393f3dd1da8eca4e5ba80a5c', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27afc2dc1e3245929ae8c3ec7c22265cde62c54f', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b343e2faec99f944b366417d2ebf2104e4921b', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e98ab096943d2680f16ad8adb9fcc6dc71f28c89', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f9c64ea45dc38b606b4e5ca9146c5c81d711b5c', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2d6b73dce3817ab9d96017830306440b45dff9', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34f1a06df2783a21d76d889c53f16e0b659ce45b', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31881c4286ff5b73b1a8a0c78cf72eb130dbdafa', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a53ae0025ea56c5815fd33788e7a539a6a42343', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c8b8247f85783ab1820b22de9fcf9bd603e072d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a57ad66d787d4edd5eb19c7c1228cce301eddc36', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ae1bd983f7c9bcde535d839af594413012646fc', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f61f3d4560c28366031e58190b3606c5cdd2575', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b32419110139c0e598023292d58ae70955e00256', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '867d5c04a975c6a9b9a1111952e755d3be67b577', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580046c91e0b69c5e73faff0f711135facda8f38', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bda60f5aed06913625ebb0757e62aa8e2deddbce', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eac7d5d7cc2112071e31d63b7b49d8f2161ef25', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe748e0f404af2e75de19a6d4f183f5be952e0c9', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6adf66f0d1dbf3533bc73eb6e2d36eadaec1c184', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47bfc56385a0f5a29708f02e8ea8da2596b4f038', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf0ae3d506cb4ef6b53189e6fa240dbb1bc16f3', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4beece5e85ab4cb84c95813691a29da8db078c5c', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cf461c10d7c3d2002399d814321f1ca2403ac82', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9f963fee9c50455960f72bc004e5ff2c7061d20', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5443a82cb22179b14cb541c06ef6d72ca546b63b', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c4b6893cae70e3b3d20038e81829cf818c7a1e', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0fd02b54901c53db5dec92a5942cea095e1b56a', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b47976fc3adda302a749d4f02a8862a36910d69', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0619c0d7276e6de26fe64f7960c730f269f7e1', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a510c9d2d66e88a9acccda5c4e29583b280f2cef', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4ab50ae47f514e6db2cd67c8775985017997a0', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '302dfec1e0c077e6c713720dc324ab00f516e941', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3074cd70e26446e689e3daa4170d04f4afadc75f', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b1f1a158ccb3eca274514803559fac9980efe53', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2fd469dd2bfd2f85643e059564270d873a8bdaf', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1298ad9c3ceae44da742fa86b8f3e2f3b8fff663', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df051ba37109e84478d053dec816b0601ac77e9d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98fbe01c5b8b351f13176c8647a0ece386a33af5', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537ad6dc0968c2519a9543ff29ee6ae7ffab53cd', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78baa6bf3824976107ded71561c2eac1e666a293', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaa43831f77c784de9add298e83f8444b68f1d1', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a1c77e609fa56e1400036bd16fe69126b6e7fe', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ce191c78fbffcde834fa000d54fd37bfb61b45', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db664289c84278d7e9646d51aafb75ddd76ed2e', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1edfb6e7e25308a1c5fcd0dfb1cc5a027037524b', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f125318d9e284127f7d5153071231568b64459fd', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f218a7aa08949e35c46c534d9ed7ef63ec8c81d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a79ba563ecd9f79ae07db55592eef32ec9fa491b', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}]",,62794914,,User,,5,,1,1
438259717,Binary Linear Algebra,An implementation of sparse binary vectors and matrices with linear algebra solver.,True,208,https://api.github.com/repos/Bodigrim/arithmoi/pulls/208,https://github.com/Bodigrim/arithmoi/pull/208,closed,389,86,9,59,4,45,0,0,[],2020-06-23 01:29:02+00:00,2020-08-05 23:34:23+00:00,3794721.0,"43 days, 22:05:21","[{'comment_id': 445875632, 'comment_body': 'Use ``fromInteger (1 `shiftL` (2*dim)) :: F2Poly`` or something similar.', 'comment_created': datetime.datetime(2020, 6, 25, 22, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 445876076, 'comment_body': '`U.length` is actually good performance-wise. ', 'comment_created': datetime.datetime(2020, 6, 25, 22, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 445890869, 'comment_body': 'It would be nice to state in comments an invariant relation between `oneBefore`, `twoBefore`, `a` and `b`.', 'comment_created': datetime.datetime(2020, 6, 25, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 446504878, 'comment_body': 'Formating', 'comment_created': datetime.datetime(2020, 6, 27, 9, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 446505437, 'comment_body': 'Why are you commiting with unused code?', 'comment_created': datetime.datetime(2020, 6, 27, 9, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MathiasBartl', 'type': 'User'}, {'comment_id': 446569350, 'comment_body': ""Just to clarify the process: I asked @folidota to dump a snapshot of his work every day, so sometimes he has to comment out unfinished work just to get everything else compiling. I'm fine with it as long as this PR is marked as a draft."", 'comment_created': datetime.datetime(2020, 6, 27, 21, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 448046051, 'comment_body': 'Nice! You can actually simplify it to `Bit (even (S.size ...))`', 'comment_created': datetime.datetime(2020, 7, 1, 0, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 448047187, 'comment_body': '`if unBit coeff ...`', 'comment_created': datetime.datetime(2020, 7, 1, 0, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 448047451, 'comment_body': 'It is better to use a guard here.\r\n```haskell\r\nfindSolution (_ : xs) matrix vector \r\n  | result == mempty = vector\r\n  | otherwise = findSolution xs matrix result\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 0, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 448048679, 'comment_body': 'Try `U.break`.\r\nhttp://hackage.haskell.org/package/vector-0.12.0.3/docs/Data-Vector-Unboxed.html#v:break', 'comment_created': datetime.datetime(2020, 7, 1, 0, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 448049081, 'comment_body': ""Shouldn't it be `[0..dim-1]`?"", 'comment_created': datetime.datetime(2020, 7, 1, 0, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 448050488, 'comment_body': 'Since you never insert or remove rows, I think it would work faster with `Data.Vector.Vector` instead of `I.IntMap`.', 'comment_created': datetime.datetime(2020, 7, 1, 0, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 449783702, 'comment_body': 'I think you vastly overestimate sparsity of matrices, relevant to quadratic sieve here. This may be the reason of your algorithm being slow. \r\n\r\nFor instance, `arithmoi-quadratic-sieve` generates 5621 equations over 1489 primes, where only 39701 elements are non-zero. This correponds to sparsity 0.005.', 'comment_created': datetime.datetime(2020, 7, 4, 15, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 449802769, 'comment_body': '`foldMap` will allocate a lot of intermediate sets in memory. Another approach is to flip bits in a bit vector and then convert it back to set:\r\n\r\n```haskell\r\nmult :: SBMatrix -> SBVector -> SBVector\r\nmult (SBMatrix matrix) (SBVector vector) = runST $ do\r\n  -- it would be better to cache maximal length somewhere\r\n  let len = getMax (fromJust (foldMap (fmap (Max . fst) . S.maxView . set) matrix)) + 1\r\n  vs <- MU.new len\r\n  traverse_ (traverse_ (unsafeFlipBit vs) . S.toList . set . (matrix V.!)) (S.toList vector)\r\n  ws <- U.unsafeFreeze vs\r\n  pure $ SBVector $ S.fromDistinctAscList $ listBits ws\r\n```', 'comment_created': datetime.datetime(2020, 7, 4, 20, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 449802837, 'comment_body': ""An established pattern is to call newtype's fields with a prefix `un`, so `unSBVector` in this case."", 'comment_created': datetime.datetime(2020, 7, 4, 20, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 449802886, 'comment_body': 'Please define a getter `unSBMatrix`.', 'comment_created': datetime.datetime(2020, 7, 4, 20, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 449802893, 'comment_body': '0.05 or 0.5?', 'comment_created': datetime.datetime(2020, 7, 4, 20, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 449803296, 'comment_body': 'Would that be very similar to implement dense matrices?', 'comment_created': datetime.datetime(2020, 7, 4, 20, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 449803481, 'comment_body': ""It could be interesting to use dense matrices to speed up multiplication, but I don't quite understand how to fit it into memory. In our toy example we have 5621 equations over 1489 primes, which is 8М bits and 1M bytes. This is easily doable. But AFAIU it is readily expected to have 1000 times more equations, isn't it? What number of equations is quoted in references?"", 'comment_created': datetime.datetime(2020, 7, 4, 20, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 449803724, 'comment_body': 'See my comment below: https://github.com/Bodigrim/arithmoi/pull/208#discussion_r449803481', 'comment_created': datetime.datetime(2020, 7, 4, 20, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 452856083, 'comment_body': ""I deleted the getter all together. I don't use it anywhere"", 'comment_created': datetime.datetime(2020, 7, 10, 13, 50, 24, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 452953640, 'comment_body': ""I am quoting from the slides.\r\nResearchers broke a 768 bits RSA key using NFS with Wiedemann's algorithm. The input binary matrix had 200 millions of rows and 150 non zeros elements by rows. It took 98 days of computations on a cluster of 576 cores."", 'comment_created': datetime.datetime(2020, 7, 10, 16, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 453098765, 'comment_body': 'In this case sparse representation would take 200*10^6 * 150 * 8 = 240 Gb, which is feasible for a cluster of their size. But dense representation would take something like 1250000 Gb, which is far beyond current capabilities.', 'comment_created': datetime.datetime(2020, 7, 10, 22, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 453105944, 'comment_body': '`Max` / `getMax` are from `Data.Semigroup`.\r\n`traverse_` is from `Data.Foldable`.', 'comment_created': datetime.datetime(2020, 7, 10, 22, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 455438031, 'comment_body': 'I found a bit cleaner way to do it:\r\n```haskell\r\n      v = SU.withVectorUnsafe (zipBits xor (SU.fromSized v1)) v2\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 0, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 455441398, 'comment_body': 'Running with `+RTS -h -L300` shows a spike of allocations in `randomEntries`. This is a red flag, because ideally it should not allocate at all, being fused with vector creation. Forcing `newVector` before appending it to a list fixes the issue:\r\n\r\n```haskell\r\n    go list = newVector `seq` newVector : go backOfList\r\n```\r\n\r\nFor `dim = 1000`:\r\n```\r\n  21,980,228,616 bytes allocated in the heap\r\n     196,614,656 bytes copied during GC\r\n       1,156,552 bytes maximum residency (162 sample(s))\r\n          38,368 bytes maximum slop\r\n               1 MB total memory in use (0 MB lost due to fragmentation)\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 0, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 455453889, 'comment_body': ""We can actually push this approach further (and it is a good exercise), encoding in types that the matrix is a square one. \r\n\r\n```haskell\r\nimport GHC.TypeNats hiding (Mod)\r\nimport Data.Mod.Word\r\nimport Unsafe.Coerce\r\n\r\n-- Sparse Binary Vector\r\nnewtype SBVector (k :: Nat) = SBVector { unSBVector :: U.Vector (Mod k) }\r\n  deriving (Show)\r\n\r\n-- Dense Binary Vector\r\nnewtype DBVector (k :: Nat) = DBVector { unDBVector :: SU.Vector k Bit }\r\n  deriving (Eq, Show)\r\n\r\n-- Sparse Binary Matrix\r\nnewtype SBMatrix (k :: Nat) = SBMatrix { unSBMatrix :: SV.Vector k (SBVector k) }\r\n  deriving (Show)\r\n\r\nlistBits' :: KnownNat k => DBVector k -> [Mod k]\r\nlistBits' = unsafeCoerce listBits\r\n\r\nflipBit' :: KnownNat k => MUS.MVector k s Bit -> Mod k -> ST s ()\r\nflipBit' = unsafeCoerce (unsafeFlipBit :: MU.MVector s Bit -> Int -> ST s ())\r\n\r\nindex' :: KnownNat k => SBMatrix k -> Mod k -> SBVector k\r\nindex' = unsafeCoerce SV.index\r\n```\r\n\r\n(There is nothing `unsafe` in these coercions, I'm just lazy to jump through all `newtype` hoops)\r\n\r\nPut these extra deps into `stack.yaml`:\r\n\r\n```yaml\r\nextra-deps:\r\n- random-1.2.0\r\n- smallcheck-1.2.0\r\n- splitmix-0.1\r\n- github: Bodigrim/mod\r\n  commit: 64e3b10\r\n```"", 'comment_created': datetime.datetime(2020, 7, 16, 1, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 456052622, 'comment_body': 'As discussed elsewhere, `seq` improves matters only for profile build. It seems that tuples are another source of thunks here, which can be easily eliminated:\r\n```haskell\r\ngetRandomSBVectors :: Int -> Double -> StdGen -> [SBVector]\r\ngetRandomSBVectors numberOfRows density gen = go randomEntries\r\n  where\r\n    randomEntries = map (< density) $ randomRs (0, 1) gen\r\n    go :: [Bool] -> [SBVector]\r\n    go list = newVector `seq` (newVector : go backOfList)\r\n      where\r\n        newVector = SBVector (U.fromList listOfEntries)\r\n        listOfEntries = map fst $ filter snd $ zip [0..] frontOfList\r\n        (frontOfList, backOfList) = L.splitAt numberOfRows list\r\n```\r\nFor `testLinearSolver 10000 0.01` it results in\r\n```\r\n  39,942,493,280 bytes allocated in the heap\r\n     375,558,312 bytes copied during GC\r\n      28,689,968 bytes maximum residency (33 sample(s))\r\n       3,348,944 bytes maximum slop\r\n              27 MB total memory in use (0 MB lost due to fragmentation)\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 20, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 456721928, 'comment_body': 'Unfortunately, `GHC.Clock` appeared only in `base-4.11` and so requires GHC >= 8.4. I suggest we use [`System.CPUTime.getCPUTime`](http://hackage.haskell.org/package/base-4.10.0.0/docs/System-CPUTime.html) as a source of entropy.', 'comment_created': datetime.datetime(2020, 7, 18, 0, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 460435404, 'comment_body': 'Please use `U.mapM_` instead of `traverse_ ... . U.toList`.', 'comment_created': datetime.datetime(2020, 7, 25, 19, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 460435566, 'comment_body': 'This function feels redundant to me, you can use `natVal` to demote size of the matrix from the type level to the term level.', 'comment_created': datetime.datetime(2020, 7, 25, 19, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 460435744, 'comment_body': 'Also `(== Bit True)` is just `unBit`.', 'comment_created': datetime.datetime(2020, 7, 25, 19, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 460435959, 'comment_body': 'It seems redundant to pass `numberOfColumns` as a separate argument, because you already have it as `k` on the type level. One can use `natVal` to demote it as a term.', 'comment_created': datetime.datetime(2020, 7, 25, 19, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 460436168, 'comment_body': ""Isn't `go` equivalent to `foldMap primeSet`?"", 'comment_created': datetime.datetime(2020, 7, 25, 19, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 460436379, 'comment_body': 'This is really unexpected semantics for a function, named `binarySearch`. If users of this function need indices starting from 1, they can apply `map (+1)` themselves. ', 'comment_created': datetime.datetime(2020, 7, 25, 19, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 460436411, 'comment_body': ""Shouldn't it be `len - 1`, similar to above?"", 'comment_created': datetime.datetime(2020, 7, 25, 19, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 463319640, 'comment_body': 'I added a comment to explain it better. Suppose I have Prime 2, Prime 3 and Prime 5. I want to send them respectively to 1,2,3. I use 0 to when the number is negative (its sign is true).', 'comment_created': datetime.datetime(2020, 7, 30, 23, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 463948341, 'comment_body': 'To make it clearer `30` would be given by `[1,2,3]` whereas `-30` by `[0,1,2,3]`.', 'comment_created': datetime.datetime(2020, 8, 1, 10, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 465877676, 'comment_body': ""I really do not see what good may come from generating random vectors with such bias. Let's use 0.5."", 'comment_created': datetime.datetime(2020, 8, 5, 17, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 465878568, 'comment_body': ""This function never uses values of its first arguments, only its length. That said, let's pass the length of singularities prefix as `Int` instead of `Bit`."", 'comment_created': datetime.datetime(2020, 8, 5, 17, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 465878887, 'comment_body': 'Please use `F2Poly` instead of `[Bit]` as an argument.', 'comment_created': datetime.datetime(2020, 8, 5, 17, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 465879238, 'comment_body': 'This comment literally repeats the next line of code and IMO is redundant.', 'comment_created': datetime.datetime(2020, 8, 5, 17, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 465881367, 'comment_body': ""As we are preparing for a merge, let's clean up `unsafeCoerce`. Unfortunately you'd have to change `Mod k` to just `Int` and import \r\n\r\n```haskell\r\nimport qualified Data.Vector.Generic.Sized.Internal as GSI\r\nimport qualified Data.Vector.Generic.Mutable.Sized.Internal as GMSI\r\n```"", 'comment_created': datetime.datetime(2020, 8, 5, 17, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 465882390, 'comment_body': ""Let's separate concerns. The caller of `linearSolve` does not neccessarily know which method of random generation is employed by `LinearAlgebra` and really should not care. Please refactor `linearSolve` to consume `seed :: Int` and construct `StdGen` internally."", 'comment_created': datetime.datetime(2020, 8, 5, 17, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 465883216, 'comment_body': 'It makes sense to factor out a helper `intVal = naturalToInt . natVal` and use it in three places.', 'comment_created': datetime.datetime(2020, 8, 5, 17, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}]","[{'commit_sha': '913e86e46e31d96d65f80a6c46960811add4e1c5', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f92995aa854e2aae3d605566caaa836d5a826b24', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeaf18ad61cf0af054b72ae55157d9a12866b230', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ceaec880030acd23c2b75a4752efa99228a7f7', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e75169a26e525e69931ae7e4354236f2bcdafbd', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '767a154804a8b90eedba8b1f432445e6617dbe74', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6cf046101438d6e52142255fc017edb5afd3878', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f947dc0b07b88b0b4693dc0656552d5ba2b63cfd', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01e73a06ceee8b5cec7f54bf880f4c446f7f0729', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '821caf48fd0b9c05049e678759ba5c210ed4fc21', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2fb50e6db28faf0786597020a589c4fd232f46', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58a0cde933664c1fe2335bda171ca07cda45b73c', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59fe10f43f66f92f6112b41abd4dc2093df31370', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a778369c3c2994c9523e3ac664d3d65a70b2d528', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3187cb05812f472c0bccf4f5bbcc351b9e2561a', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9618524ad8f8d4fd8b9ae736ce2a402b2019b71', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4364efe39f67620e51a47bb0b0dcfcdb71f4b7a', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6150eb834d5f6176b1a7e856515c958bf4a4615', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f38a4f624ad7884a45eb9af81e712cbbbd652759', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96c7fbeee72dcb6acf52458ffcda796a5662f0d4', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0daf928a86441192c64b1cc42c57d108ae7a0f2', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce57d6d87f145ad9a61749114b27e23d2f298dd', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f34096a495d580ea66262792ddf0d2b54daa0e', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8756b2046279371188f0a961429affbb10de3dee', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04d840b78be4d4ec733e36b50ba93f543d318613', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab221e8c5e344564781dde03b3c2ebede7fc9f99', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4caabd93629be40ea99bed99898e4a184ec29fc0', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3663d258cb0bfd25070e58fa9f22ac0cc1cd7862', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f63cf161853cadcf2be23f34dd33e20c923559c0', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a2e0e9a1e4aed9b63f9657c0094f527fa71dde', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2d34f143ae9d0b248be2022f0c907ea489d1376', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e1e84b90e689e29c34ad144134169f80e705662', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3fc6287c99d159d8272fd48e9611c1220185b9f', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55de8a4e62b3214ec857f5519cab9736d59f856', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f317d901a1c2d5335020308a231d7cc53184d8c0', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ec1d1022a502936cf56b4b78d6495f368434ab5', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd094801c1d87dd2afa859013d4e6b15be5cbfc54', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '742a54ebc1c94ed9bcea4ce16c67634bb4d815bb', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '617ac42a7ef7c5b6beb7981473e525dea01923fe', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465701a663d5f122a83cbfbc5921dbb40265d228', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b1a0354889a93e45afa37b2a7dcf7e84704a3cb', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea76e32472bce8043f740a4d5ae5cd963e4acff', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd33eb0d7793fc26334058bd363f965ccf796985d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6cfe0ccb1e49d0d02994f017a0f3b7655e86393', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd3e455001bd044385243c79118196b029d685d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb459f4ff9c1479e17dd627be36c5b1206da02a', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27e3fcb69b1fd26fe1bf039c3994e32bb8690bc1', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093e583b071f5f5b52a629550c3b16ccc88766b5', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3c93cf6c3c667a35fca23ca1c58add85c8be0a2', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e91deda2c5de0e093aeb9c9646e5a76165f83db', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a8a81cb188317c5a613c3c4d601aeccacc396d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c986636c34c7749b33810f9775d3928f89b3efc', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '134f5fbe89cfd032f3eb25d99fd367c641811e06', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81721d48cca5613e530ccfab157d1549bb9814ab', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '277b221fc2b7c78adf7d92bc1be535da2a32d229', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c765c977c94c6138194bb4902a572c3a149fc10', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47b29cdbd03b8d2a8f08d2bb24e34e42fc65c6e4', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee4164d95fe3cb323af3869fb3a0bd4ca550e3b3', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba040c6d98a086405aecd2b03a223cb77cf6eeac', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}]",,62794914,,User,,5,,1,1
466245908,Log sieve,Sieving after taking logarithms,True,210,https://api.github.com/repos/Bodigrim/arithmoi/pulls/210,https://github.com/Bodigrim/arithmoi/pull/210,closed,522,226,8,55,0,53,0,0,[],2020-08-11 17:25:15+00:00,2020-08-22 18:06:16+00:00,952861.0,"11 days, 0:41:01","[{'comment_id': 469491391, 'comment_body': ""Having three `Int`s is error-prone: one can easily swap them. Let's introduce\r\n```haskell\r\ndata QuadraticSieveConfig = QuadraticSieveConfig \r\n  { qscFactorBase :: Int \r\n  , qscSievingInterval :: Int \r\n  , qscNumberOfBlocks :: Int \r\n  }\r\n```\r\n(you can come up with better names, these are just for example)."", 'comment_created': datetime.datetime(2020, 8, 12, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 469492546, 'comment_body': 'Split the line into two - it is too long.', 'comment_created': datetime.datetime(2020, 8, 12, 19, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 469493001, 'comment_body': ""Isn't it [`factorBack`](http://hackage.haskell.org/package/arithmoi-0.11.0.0/docs/Math-NumberTheory-Primes.html#v:factorBack)?"", 'comment_created': datetime.datetime(2020, 8, 12, 19, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 469493487, 'comment_body': 'Probably does not make much sense to use `curry` - just pattern-match on a nested tuple `((b, c), x)`.', 'comment_created': datetime.datetime(2020, 8, 12, 19, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 469494634, 'comment_body': 'Again, pass `QuadraticSieveConfig`.', 'comment_created': datetime.datetime(2020, 8, 12, 19, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 469495844, 'comment_body': ""I'd rather define `generatePrimeForwards from = [nextPrime (max 3 from) ..]`"", 'comment_created': datetime.datetime(2020, 8, 12, 19, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 469498135, 'comment_body': 'Do not take alignment to such extremes. Better put `Just` / `Nothing` on a next line.', 'comment_created': datetime.datetime(2020, 8, 12, 19, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 469498835, 'comment_body': ""I'd rather filter `IntMap` by condition and use `I.keysSet` next."", 'comment_created': datetime.datetime(2020, 8, 12, 19, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 469499832, 'comment_body': ""This is a good idea, let's return `Mod n` instead of `Integer` here and in `findSecondSquare`."", 'comment_created': datetime.datetime(2020, 8, 12, 19, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 469862332, 'comment_body': 'Most of the line is tracing. It is going to go eventually. Should I still split it?', 'comment_created': datetime.datetime(2020, 8, 13, 10, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 469865517, 'comment_body': ""It's much better"", 'comment_created': datetime.datetime(2020, 8, 13, 10, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 469917195, 'comment_body': 'Probably no.', 'comment_created': datetime.datetime(2020, 8, 13, 12, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470797552, 'comment_body': 'What about ``k = max 1 (min 6 (l `div` 10))``?', 'comment_created': datetime.datetime(2020, 8, 14, 18, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470801061, 'comment_body': ""Let's avoid repetitions, please define a helper function."", 'comment_created': datetime.datetime(2020, 8, 14, 18, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470802695, 'comment_body': 'Nice!', 'comment_created': datetime.datetime(2020, 8, 14, 18, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470803667, 'comment_body': 'One can save some indirections, pattern-matching by `QuadraticSieveConfig t m k h` immediately.', 'comment_created': datetime.datetime(2020, 8, 14, 18, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470808533, 'comment_body': ""It should be fine for the expected range of `n`, `m` and `k`, but to be on the safe side let's stick to integer arithmetic and use [`integerRoot`](https://hackage.haskell.org/package/integer-roots-1.0/docs/Math-NumberTheory-Roots.html#v:integerRoot) to take 4k-th root of (2n/m^2)."", 'comment_created': datetime.datetime(2020, 8, 14, 18, 47, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470808772, 'comment_body': 'What does this comment mean?', 'comment_created': datetime.datetime(2020, 8, 14, 18, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470809244, 'comment_body': 'Instead of `zip xs (repeat 2)` one can `map (,2)`. Requires enabling `{-# LANGUAGE TupleSections #-}`.', 'comment_created': datetime.datetime(2020, 8, 14, 18, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470810730, 'comment_body': ""I think we should leave traces (but set `debug = False`) in production code, so let's split this line into two :)"", 'comment_created': datetime.datetime(2020, 8, 14, 18, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470813538, 'comment_body': ""You zip lists of equal length, but this is not immediately obvious to the reader. I'd rather define `factorBaseWithSquareRoots = map (\\p -> (p, ...)) factorBase` doing everything in one pass, instead of `squareRoots`."", 'comment_created': datetime.datetime(2020, 8, 14, 18, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470815163, 'comment_body': ""Generating a vector of pairs is expensive, if you mean to unzip it immediately. Let's probably change `generateLogInterval` to generate a pair of vectors (and make `sievingLogInterval` unboxed)."", 'comment_created': datetime.datetime(2020, 8, 14, 19, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470815414, 'comment_body': 'Could you possibly use `unsafeThaw` here? Is original `sievingLogInterval` used by someone else?', 'comment_created': datetime.datetime(2020, 8, 14, 19, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470816430, 'comment_body': ""This might be expensive. Let's probably make `previousSmoothNumbers, newSmoothNumbers, smoothNumbers :: SS.Set (Integer, I.IntMap Int)` instead of lists."", 'comment_created': datetime.datetime(2020, 8, 14, 19, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470816888, 'comment_body': 'You can factor out tracing:\r\n```haskell\r\nmatrixSmoothNumbers \r\n  | trace ... False = undefined \r\n  | numberOfContraints < length mat = ... \r\n  | otherwise = ...\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 19, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470817133, 'comment_body': ""Isn't it `foldMap I.keysSet`?"", 'comment_created': datetime.datetime(2020, 8, 14, 19, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470817431, 'comment_body': 'Use `Data.List.unzip` to unzip `squaresData` in one pass.', 'comment_created': datetime.datetime(2020, 8, 14, 19, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470818751, 'comment_body': 'There is an simpler way to do it, if we can sacrifice some precision. Use [`approxPrimeCount`](http://hackage.haskell.org/package/arithmoi-0.11.0.0/docs/Math-NumberTheory-Primes-Counting.html#v:approxPrimeCount) and [`nthPrimeApprox`](http://hackage.haskell.org/package/arithmoi-0.11.0.0/docs/Math-NumberTheory-Primes-Counting.html#v:nthPrimeApprox) to estimate the lower bound (assuming that half of primes are positive residues). Then generate `len` primes starting from this lower bound.', 'comment_created': datetime.datetime(2020, 8, 14, 19, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470819897, 'comment_body': ""`factorBase` is sorted, but since types itself does not guarantee it, I'd probably use `maximum` instead of `last` here."", 'comment_created': datetime.datetime(2020, 8, 14, 19, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470820296, 'comment_body': ""What's the reason to duplicate right-hand side?"", 'comment_created': datetime.datetime(2020, 8, 14, 19, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470821646, 'comment_body': 'Is `trialDivisionWith` taking a significant time? There are ways to speed up it a bit.', 'comment_created': datetime.datetime(2020, 8, 14, 19, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470822153, 'comment_body': 'Remove commented code?', 'comment_created': datetime.datetime(2020, 8, 14, 19, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470822294, 'comment_body': 'Remove commented code?', 'comment_created': datetime.datetime(2020, 8, 14, 19, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 470975585, 'comment_body': 'It makes sense, I left it this way so I could tweak it later. These are just provisional values', 'comment_created': datetime.datetime(2020, 8, 15, 13, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 470997420, 'comment_body': 'Is there a way for maximum to return a default value on an empty list?', 'comment_created': datetime.datetime(2020, 8, 15, 14, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 470997482, 'comment_body': ""It can take some time if the smoothness threshold is high. I think it's worth trying to speed it up"", 'comment_created': datetime.datetime(2020, 8, 15, 14, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 471007834, 'comment_body': 'Could you possibly just use `qscFactorBase`?', 'comment_created': datetime.datetime(2020, 8, 15, 15, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 471768548, 'comment_body': ""I haven't changed this yet because I am not sure it is what I want. We can discuss this later."", 'comment_created': datetime.datetime(2020, 8, 17, 20, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 472517472, 'comment_body': ""Let's probably move this helper to `M.NT.Utils`."", 'comment_created': datetime.datetime(2020, 8, 18, 21, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 472519079, 'comment_body': ""Again, let's avoid converting huge integers to `Double`. Approximate this calculation using [`integerLog2`](http://hackage.haskell.org/package/integer-logarithms-1.0.3/docs/Math-NumberTheory-Logarithms.html#v:integerLog2)."", 'comment_created': datetime.datetime(2020, 8, 18, 22, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 472519276, 'comment_body': '""thorugh"" -> ""through""', 'comment_created': datetime.datetime(2020, 8, 18, 22, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 472520263, 'comment_body': ""Let's define `isResidue :: Integer -> Prime Int -> Bool` as a separate helper function and use it here and below."", 'comment_created': datetime.datetime(2020, 8, 18, 22, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 472520795, 'comment_body': 'Do not use magic numbers. Something like `toInteger (maxBound :: Int)` will be better.', 'comment_created': datetime.datetime(2020, 8, 18, 22, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 473352764, 'comment_body': '`wordToInt` does not make any difference for the purposes of `show`.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 473353375, 'comment_body': 'Is it better than an auto-derived one?', 'comment_created': datetime.datetime(2020, 8, 19, 21, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 473356826, 'comment_body': '`map (,2) factorsOfA`, please.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 473357806, 'comment_body': 'What does it mean? It looks really suspicious to zip with `[2]`.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 473358539, 'comment_body': 'Or even `Map Integer (I.IntMap Int)`.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 473361801, 'comment_body': 'We can do a bit better here. Instead of calling `jacobi` with two `Integer` arguments, we can reduce `n` modulo `p`, cast to `Int` and call `jacobi` for two `Int`s, which should be faster.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 473363047, 'comment_body': 'If `primeInt` is not `Nothing` you can simply return `x`, avoiding extra operations: `primeInt >> pure x`.', 'comment_created': datetime.datetime(2020, 8, 19, 21, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 473364388, 'comment_body': 'Is it still desirable to reduce modulo 100000000 here?', 'comment_created': datetime.datetime(2020, 8, 19, 21, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 473372241, 'comment_body': 'Yes, but the tests will take longer', 'comment_created': datetime.datetime(2020, 8, 19, 22, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'federico-bongiorno', 'type': 'User'}, {'comment_id': 474917513, 'comment_body': 'I suggest changing this function to take `V.Vector Integer` and `U.Vector Int` separately, and return `Map Integer (I.IntMap Int)` immediately. ', 'comment_created': datetime.datetime(2020, 8, 21, 19, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}]","[{'commit_sha': '8bc2806ea76a49af06a160490f891b828369ba31', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87d116073bfd357bf97b54dc80926adf3361c177', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90a5498e4dd133d68ff2c9c45debb4a7f0b86d53', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b6104a37aa417a890b8aaf65d36c9a389364f82', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0895890a107613f4df99a6bfec7d826b7d92d87', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb1841649c7ecc48c9772984e2fa987488e97175', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9d0855aa42917e67d84063c7665f249f82b558', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ad6179e88f19c97e466b142a70feda5dae13a4', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3e6d085b5dc36996b2d518448e81d543f0f74cb', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93055bb6eb451ff47221ae9a0d2da9613e3ed4cb', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '999b31bb0984aa57d46dbdbc26168c0ce7fedb06', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc6265d3cafeeacc831fbc64b2c01b121da340b4', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1350c05f60a2e2e3a366397b37e2bb2cfebb0493', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5e282e7a45c9098a667e8d1d4be7a8cfff8aea0', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3025eb61e6f22b2ddd376b64e889b89ee413f638', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd96533a851deb3944728f528b23009b91fe2c260', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef9b678699d5234ecf318c8144579a9ad1c54540', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97f0c78e6dfcf4e549abf3467f8b346807b53d9e', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaf3ae9daba3aced11459ab9c4785d90b0f16081', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c473ff3c0d3f9ac28e68e2b2b610d2353d79fc4', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d279d70c014f9a9a0090d3d45de29699dfae04', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ed7e5475f5fc324bb93e17b24b36bc8d31f53a', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f3ef01708e7cd96f617b69afab4b893e08655bb', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3317f25c44ea3888aef9eb5d06365fa3af20f391', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fa4ff2ec821b83ffcc54e9fd20583aaaf4e4da', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b856a3cd65fc70751f61a7b7df3971ca577b6571', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f955f59d1b1f308d3baea8405014f29cdf5a80a8', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd23f6810a4aaf1d32d83012a35fdf16a6fbad416', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '024c6b1292070183a5c19831485b74bb39f38827', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4133750828848648061cadfee1c952e96ddf1a4', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a168b9fff51c6fa884d1fdac3fea53832ec793a2', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ca37d9c3c0b1ea062c00272948bf86cb925761f', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db1f2b04f35d38e0be3454e937a8b97c6cfa3620', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c05804c6003acd7714f8ad3412308ff8d56426a3', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16dcf850a580fbb26cd143f3571d6e19854bb683', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d9c43a58601cdf091c575eaab25d37c4f0cbf4f', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c562d7944c4381f3ecd7d7f42d958c79f200c68a', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f8b03041ac25b38885009ea6e3fb25322fa136d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faf93b95c4c7dcf1960c01c792432d8c397fa7b3', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ad731fefec908b32be643affbf7e28e143e63d1', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd602385d1d341f816209a6946d9f6a77a51d7321', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f06ad2147b01dce51907a56c2df025cd14775f2', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c2866304bb336f57355aee1268a858059ee7a20', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a391ebd268c8f9c29919f12c4e56b171b00e923', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b80416d2c6cce3def71f35d99f48860d91f4472', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c87216ff564ba657e7b6906848f02cb888765d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43e250f9c6b25df50c924e97541dc5fe530d380f', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc9d2859f2fd398749b30197201d40924f9d2c30', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9377f6e07d9d89f47a1663e9840d8f231b600a8f', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ab6f2769b94c915ae4dc09b192a11b306c8bab', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8893b6ae9bc998ad3ae1a2c4d8f84ed35b671f2f', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c054dd098d384d8bb7392d3df8877b106dc8e8db', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ad65e7a28e633a1a61c9fa59bc07993407e5c38', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d6044dbf1a602a68557a85a32ae2c78cf22714d', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd63fbcda9eaaa2bf120fdfbd7baf72392b31f179', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}]",,62794914,,User,,5,,1,1
467022011,Large prime variation,At the moment it is messy and buggy,True,211,https://api.github.com/repos/Bodigrim/arithmoi/pulls/211,https://github.com/Bodigrim/arithmoi/pull/211,closed,147,120,4,7,1,4,0,0,[],2020-08-12 21:39:21+00:00,2020-08-24 22:37:46+00:00,1040305.0,"12 days, 0:58:25","[{'comment_id': 475802264, 'comment_body': 'Use `(<>)` instead of `M.union`.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 475803485, 'comment_body': '`M.elems . M.map` does not make much sense, I think. It is better to extract elements first, and apply `setOddPower` later.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 475805692, 'comment_body': ""Let's define `disjoint` equal to `IS.disjoint` for newer `containers` and to `IS.null . IS.intersection` for older."", 'comment_created': datetime.datetime(2020, 8, 24, 18, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}, {'comment_id': 475806404, 'comment_body': 'Set it to `False` before merge.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Bodigrim', 'type': 'User'}]","[{'commit_sha': '36a40881f80b0934ab90652365e756b848e5e0a0', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be8aa1b34596a59d88edbacf51977204f21b5a3a', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0b4e0365593b5b25e6fbc66bf6185f9020dac69', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d818025b83af9b28a78c1d7e856503fc619c047', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bbcd606c1e939a93ef2adbc437b88fb357e6970', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '688cb9659be9a3b782a160d7c97a83e22f8a8d4c', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18ed1f4352ee2d94bd88637d74057fca74631ebb', 'committer_username': 'federico-bongiorno', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 3, 28, 11, 15, 31, tzinfo=datetime.timezone.utc)}]",,62794914,,User,,5,,1,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
33020002,arithmoi,Bodigrim/arithmoi,Haskell,40,146,11,34,1331,19,19,2,"[{'id': 467022011, 'number': 211, 'closed': datetime.datetime(2020, 8, 24, 22, 37, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 21, 39, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1040305.0, 'time_delta': '12 days, 0:58:25', 'additions': 147, 'deletions': 120, 'state': 'closed'}, {'id': 466245908, 'number': 210, 'closed': datetime.datetime(2020, 8, 22, 18, 6, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 17, 25, 15, tzinfo=datetime.timezone.utc), 'time_taken': 952861.0, 'time_delta': '11 days, 0:41:01', 'additions': 522, 'deletions': 226, 'state': 'closed'}, {'id': 462438264, 'number': 209, 'closed': datetime.datetime(2020, 8, 19, 21, 18, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 23, 5, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1376001.0, 'time_delta': '15 days, 22:13:21', 'additions': 157, 'deletions': 98, 'state': 'closed'}, {'id': 438259717, 'number': 208, 'closed': datetime.datetime(2020, 8, 5, 23, 34, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 1, 29, 2, tzinfo=datetime.timezone.utc), 'time_taken': 3794721.0, 'time_delta': '43 days, 22:05:21', 'additions': 389, 'deletions': 86, 'state': 'closed'}, {'id': 425988865, 'number': 204, 'closed': datetime.datetime(2020, 6, 1, 18, 20, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 13, 45, 46, tzinfo=datetime.timezone.utc), 'time_taken': 16508.0, 'time_delta': '4:35:08', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 425975656, 'number': 203, 'closed': datetime.datetime(2020, 6, 1, 13, 22, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 13, 22, 1, tzinfo=datetime.timezone.utc), 'time_taken': 20.0, 'time_delta': '0:00:20', 'additions': 102, 'deletions': 4, 'state': 'closed'}, {'id': 425966704, 'number': 202, 'closed': datetime.datetime(2020, 6, 25, 21, 18, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 13, 4, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2103268.0, 'time_delta': '24 days, 8:14:28', 'additions': 210, 'deletions': 1, 'state': 'closed'}, {'id': 425153064, 'number': 200, 'closed': datetime.datetime(2020, 6, 10, 20, 14, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 14, 53, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1056032.0, 'time_delta': '12 days, 5:20:32', 'additions': 85, 'deletions': 0, 'state': 'closed'}, {'id': 424635796, 'number': 198, 'closed': datetime.datetime(2020, 6, 10, 20, 14, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 17, 41, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1132396.0, 'time_delta': '13 days, 2:33:16', 'additions': 81, 'deletions': 0, 'state': 'closed'}, {'id': 424634986, 'number': 197, 'closed': datetime.datetime(2020, 6, 10, 20, 14, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 17, 39, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1132509.0, 'time_delta': '13 days, 2:35:09', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 424064639, 'number': 196, 'closed': datetime.datetime(2020, 5, 28, 17, 37, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 27, 19, 16, 57, tzinfo=datetime.timezone.utc), 'time_taken': 80412.0, 'time_delta': '22:20:12', 'additions': 55, 'deletions': 0, 'state': 'closed'}, {'id': 402257766, 'number': 194, 'closed': datetime.datetime(2020, 5, 2, 18, 53, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 11, 22, 50, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1800193.0, 'time_delta': '20 days, 20:03:13', 'additions': 252, 'deletions': 0, 'state': 'closed'}]"
