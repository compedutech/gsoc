pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
462708670,GSoC 2020: Mixxx Macros [Moved],"This is my main contribution for [Google Summer of Code 2020](https://summerofcode.withgoogle.com/projects/#4641898733502464). 1af3280fb557017f6c026906e8dd7c86e581ef7a is the last commit that is officially part of GSoC.

To test it, please refer to the [Control Specification](https://github.com/mixxxdj/mixxx/wiki/Macros) and have a look at the [usage instructions in the blog post](https://github.com/mixxxdj/website/pull/142).

## Overview

This Pull Request is a continuation of #2873 and is supported by other Pull Requests of mine, such as #2980 (for database tests) and #2969 (for the MacroManager, which has been disbanded in the late stages of the project). I also improved some documentation on classes while trying to understand them as seen and merged in #2885 #2925 #2997. [Other Pull Requests of mine in the time period of GSoC](https://github.com/search?q=author%3Axerus2000+user%3Amixxxdj+updated%3A%3E2020-05++merged%3A%3C2020-09) are often tangientally related contributions that helped me get a better understanding of Mixxx as a whole.

For technical documentation, design and a detailed work log visit the [project wiki page](https://github.com/mixxxdj/mixxx/wiki/Macros-Project).

## Features

### Core
- [x] Recording
- [x] Database Storage
- [x] Playback
  - [x] Looping
- [x] Channel-specific Control Objects

### GUI
- [ ] Waveform dimming when running (and potentially also when recording)
- [ ] Skin Integration
  - [x] Integrate for Testing (in LateNight)
  - [ ] Expose controls properly (similar to WTrackProperty, look into how it's done for cues)
  - [ ] Proper visuals
 
### Fixes
- [ ] Check [correct unloading on track change](https://github.com/mixxxdj/mixxx/pull/2989#issuecomment-753465755)
- [ ] Jumps while paused (e.g. via `GotoAndStop`) are not properly recorded since `process` isn't called
- [ ] Rework isDirty flag

### Future considerations
- Controller Integration
- Serato Ex- and Import
",False,2989,https://api.github.com/repos/mixxxdj/mixxx/pulls/2989,https://github.com/mixxxdj/mixxx/pull/2989,closed,1747,294,60,185,62,193,6,0,"[{'name': 'skins'}, {'name': 'library'}, {'name': 'engine'}, {'name': 'ui'}, {'name': 'build'}, {'name': 'code quality'}]",2020-08-04 11:34:33+00:00,2021-11-18 09:55:48+00:00,40688475.0,"470 days, 22:21:15","[{'comment_id': 464989878, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 8, 4, 11, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 464991054, 'comment_body': ""I still think this is does not belong into this PR and should be a separate PR if desired. I'm not sure we really need it."", 'comment_created': datetime.datetime(2020, 8, 4, 11, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 464992128, 'comment_body': 'maybe this would be helpful:\r\n\r\n```suggestion\r\n// static\r\nQVector<MacroAction> Macro::deserialize(const QByteArray& serialized) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 11, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 464992846, 'comment_body': '```suggestion\r\n    enum class Type : uint8_t {\r\n        Jump = 0\r\n    };\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 11, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 464996255, 'comment_body': ""I thought we wanted to postpone loop macros until the basic functionality has been implemented?\r\n\r\nIn any case I think it makes sense to use [`QFlags`](https://doc.qt.io/qt-5/qflags.html) here. Something like:\r\n\r\n```suggestion\r\n    Macro(QString label, QVector<MacroAction> actions, MacroFlags flags);\r\n```\r\n\r\nThat makes it a) easier to add new flags later and b) easier to see what's going on from the caller's side."", 'comment_created': datetime.datetime(2020, 8, 4, 11, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 464996791, 'comment_body': 'Add something like `// TODO: Implement this properly` here. Also, we should use an empty label as default IMHO.', 'comment_created': datetime.datetime(2020, 8, 4, 11, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 464997997, 'comment_body': '`LIKE` is for wildcard string matches.\r\n\r\n```suggestion\r\n            ""SELECT * FROM macros WHERE track_id=:trackId""));\r\n```', 'comment_created': datetime.datetime(2020, 8, 4, 11, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 464999115, 'comment_body': ""What are these magic values? It's non-obvious. If you use a single DB fields for storing flags anyway, it makes even more sense to use QFlags (see above)."", 'comment_created': datetime.datetime(2020, 8, 4, 12, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 465001754, 'comment_body': ""I don't think it's a good idea to hand out raw pointers to members to other code. The pointers may be stored longer than this class exists and cause a segfault. If we really need to hand out a pointer, maybe use a weak_ptr?"", 'comment_created': datetime.datetime(2020, 8, 4, 12, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 465004224, 'comment_body': 'Missing newline at EOF. Skipped pre-commit hook?', 'comment_created': datetime.datetime(2020, 8, 4, 12, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 465005867, 'comment_body': 'This is only used for tests, right? Unsure if it even makes sense to only return a single action. Instead, I suggest to make a method that returns a QVector or even a Macro instance from the current data and use that for business logic and testing. And the method should be private IMHO.', 'comment_created': datetime.datetime(2020, 8, 4, 12, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 465011534, 'comment_body': ""Just implented that, no need ;) I wouldn't use an empty label, because in the UI that might later be easily confused with an empty slot"", 'comment_created': datetime.datetime(2020, 8, 4, 12, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465012042, 'comment_body': ""Yeah it isn't implemented yet, just wanted to have some basics down - no need to perfect everything all ready, can we please ignore these flags for now :)"", 'comment_created': datetime.datetime(2020, 8, 4, 12, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465016621, 'comment_body': 'This class is to reduce the burden on MixxxMainWindow, which also stores and uses raw pointers. It is only deleted once Mixxx is shut down.', 'comment_created': datetime.datetime(2020, 8, 4, 12, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465017625, 'comment_body': ""Turned on EOF newline in CLion settings, shouldn't happen anymore. Why do you care so much? ^^"", 'comment_created': datetime.datetime(2020, 8, 4, 12, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465018351, 'comment_body': ""Yes it is, yes I only need a single Action. Returning a collection would defeat the point. I don't see any harm in having this public. I want to avoid test friends as much as possible to not accidentally test internals."", 'comment_created': datetime.datetime(2020, 8, 4, 12, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465018580, 'comment_body': 'See https://github.com/mixxxdj/mixxx/pull/2989#discussion_r465012042', 'comment_created': datetime.datetime(2020, 8, 4, 12, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465067822, 'comment_body': ""I think this makes sense to use QFlags regardless, because the purpose of `MacroFlag::Enabled` is obvious (in contrast to a plain `true`/`false`). As a bonus, we don't need any references to loops in the code at all and you can easily add a new enum value later on without touching the function signature."", 'comment_created': datetime.datetime(2020, 8, 4, 13, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 465070619, 'comment_body': 'Then the UI is problematic anyway. A filled slot should be highlighted by other means than just the label (e.g. colors).', 'comment_created': datetime.datetime(2020, 8, 4, 13, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 465073254, 'comment_body': ""Because my editor will auto-fix it when I edit the file, which will lead to unrelated lines in the diff. It's also annoying viewing the file using `cat`, because the shell prompt will appear on the same line. "", 'comment_created': datetime.datetime(2020, 8, 4, 14, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 465077292, 'comment_body': ""This is a test internal regardless if it's public or not, because it's not used in any production code. If you implement a method that returns a list of macros, you can use it in the production code too (i.e. the `stopRecording` method): https://github.com/mixxxdj/mixxx/pull/2989/files#diff-b739851afe957536ff71c1052002ccdfR73-R77\r\nIf you only need the first element, your test can do an additional check that the length of the list is correct."", 'comment_created': datetime.datetime(2020, 8, 4, 14, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 465346009, 'comment_body': 'Ah, now that is an excellent idea :)', 'comment_created': datetime.datetime(2020, 8, 4, 21, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465356591, 'comment_body': ""Yes, I am planning to use QFlags here, but I don't wanna bother with that right now ;)"", 'comment_created': datetime.datetime(2020, 8, 4, 22, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465356963, 'comment_body': 'Of course there will be other differentiators as well, but still, thinking of the Serato interface, if there is a label it is much more clear', 'comment_created': datetime.datetime(2020, 8, 4, 22, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465357862, 'comment_body': 'added a todo, please resolve the conversation unless you want to add something important - I find todos in code much easier to keep track of rather than keeping review comments open', 'comment_created': datetime.datetime(2020, 8, 4, 22, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465619021, 'comment_body': '8a0ca78', 'comment_created': datetime.datetime(2020, 8, 5, 10, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 465622959, 'comment_body': '#2995', 'comment_created': datetime.datetime(2020, 8, 5, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 466563596, 'comment_body': 'In Mixxx we have a toggle button. Take a look at Play or or [Shoutcast], enable \r\nhttps://github.com/mixxxdj/mixxx/blob/52c9145f3979d12866b0ee3e1a23eb19b72fb272/src/broadcast/broadcastmanager.cpp#L29\r\n\r\nAdopted to this use case, I think it is toggle button ""[MacroRecording], record""', 'comment_created': datetime.datetime(2020, 8, 6, 17, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 466564835, 'comment_body': 'Can this become just ""status""? ', 'comment_created': datetime.datetime(2020, 8, 6, 17, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 466566718, 'comment_body': 'I think this should become read only by m_CORecStatus->setReadOnly();\r\nYou need to use forceSet() to set it anyway. ', 'comment_created': datetime.datetime(2020, 8, 6, 17, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 466569807, 'comment_body': ""We don't need it. See my other comments. "", 'comment_created': datetime.datetime(2020, 8, 6, 17, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 467043517, 'comment_body': 'Peviously we considered to have more ""toplevel""-controls, but yeah probably\r\nand yes read only is correct', 'comment_created': datetime.datetime(2020, 8, 7, 13, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 467043831, 'comment_body': 'Ah, nice. I think I copied that from RecordingManager, so maybe we should change it there as well.', 'comment_created': datetime.datetime(2020, 8, 7, 13, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 467576847, 'comment_body': 'A single thread is only allowed to either act as a *consumer* or *producer* of a lock-free queue. Invoking both push() and pop() from the same thread is wrong and may cause undefined behavior.', 'comment_created': datetime.datetime(2020, 8, 9, 12, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 467577132, 'comment_body': 'You should avoid redundant calls to front()/pop() which involve memory barriers.', 'comment_created': datetime.datetime(2020, 8, 9, 12, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 467577393, 'comment_body': 'Please fix your #include directors by including the relative path as already mentioned repeatedly.', 'comment_created': datetime.datetime(2020, 8, 9, 12, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 467577568, 'comment_body': 'The constant is also used literally for the size of the SPSC queue -> DRY', 'comment_created': datetime.datetime(2020, 8, 9, 12, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 467577788, 'comment_body': 'Use a constexpr', 'comment_created': datetime.datetime(2020, 8, 9, 12, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 467578007, 'comment_body': 'Macro actions could be fetched periodically instead of accumulating them all until recording has been stopped.', 'comment_created': datetime.datetime(2020, 8, 9, 12, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 467578074, 'comment_body': 'Wrong naming', 'comment_created': datetime.datetime(2020, 8, 9, 12, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 467578406, 'comment_body': 'emplace() will enter a hot loop if the queue is full and the real-time thread gets stuck. Use try_emplace().', 'comment_created': datetime.datetime(2020, 8, 9, 12, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 467578823, 'comment_body': 'To verify that this function is invoked by any other thread and never by the event loop thread:\r\n\r\n```\r\nDEBUG_ASSERT(QThread::currentThread() != this->thread()); // Invoked from the real-time thread\r\n```', 'comment_created': datetime.datetime(2020, 8, 9, 12, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 467583019, 'comment_body': ""Also, I don't think we use `uint` in our code base. I think we should rather use either `unsigned int` or `quint`."", 'comment_created': datetime.datetime(2020, 8, 9, 13, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 467583469, 'comment_body': ""What would be the advantage? We could allocate a smaller queue and allow an unlimited number of actions in a queue, but on the other hand the code would become more complex and we'd need an additional thread to do that. I'm unsure if that's worth it, at least for the initial implementation."", 'comment_created': datetime.datetime(2020, 8, 9, 13, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 467586514, 'comment_body': ""To ensure that the fixed-capacity queue doesn't get full. No extra thread needed, just a timer on the event loop that consumes all buffered messages when triggered and moves them into a member variable. The final invocation happens after both recording and the polling timer have been stopped.\r\n\r\nNot strictly needed, but then the recorded steps would be already available/visible in the UI while recording which could provide helpful feedback to the user instead of performing the recording blindfolded."", 'comment_created': datetime.datetime(2020, 8, 9, 13, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 468658927, 'comment_body': '@uklotzde do you have ideas for how to make them visible in the UI while recording?', 'comment_created': datetime.datetime(2020, 8, 11, 15, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 468661995, 'comment_body': '@uklotzde then I need to move it back to a class constant, since this is in the cpp file?', 'comment_created': datetime.datetime(2020, 8, 11, 15, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 468667549, 'comment_body': ""May I ask where that information is from? The only related documentation I could find was this:\r\n> Only a single writer thread can perform enqueue operations and only a single reader thread can perform dequeue operations. Any other usage is invalid.\r\n\r\nWhich in my eyes doesn't seem to exclude the possibility of both being on the same thread.\r\n\r\n\r\nIn essence I need a queue here from which I can pop without reallocation. Alternatively I could use a simple list with a separate index counter since this creation is (to my understanding) not happening in the real-time thread.\r\nThough that could change if live looping is implemented, where the Macro is immediately queued after recording."", 'comment_created': datetime.datetime(2020, 8, 11, 15, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 468669255, 'comment_body': 'Oh, and I see one disadvantage:\r\nWhen looping is enabled, recorded actions need to be re-enqueued immediately after stopping recording - so if they are stored separately, they also need to be fetched appropriately (from the real-time thread!).', 'comment_created': datetime.datetime(2020, 8, 11, 15, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 468671407, 'comment_body': 'I think we should discuss this on Zulip, I think this might be difficult to get right. As a first idea, we could add add hotcue-like markers for the src/dest position of the last jump and additionally grey out the area between the last hotcue jumps source/dest position if src < dest. Doing this for all recorded jumps would be confusing. ', 'comment_created': datetime.datetime(2020, 8, 11, 15, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 468677817, 'comment_body': 'Why would I need forceSet anyway?', 'comment_created': datetime.datetime(2020, 8, 11, 15, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 468715264, 'comment_body': ""The synchronization with memory-barriers is only effective if enqueue and dequeue operations are strictly performed by the *same* threads respectively. Alternating between enqueuing and dequeuing within a thread is not permitted. If you want to know why then read the implementation.\r\n\r\nIf both of these threads are identical you wouldn't need a lock-free queue here ;)\r\n\r\nPS: In Rust this unsafe C++ code wouldn't even be possible, because you only have access to either the *producer* or *consumer* end of the queue in each thread, not both."", 'comment_created': datetime.datetime(2020, 8, 11, 16, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 468909528, 'comment_body': ""Of course. I assume basic C++ knowledge and will not describe individual steps on how to achieve a proposed goal. Often alternative solutions are possible and valid. It's your task to figure out the details."", 'comment_created': datetime.datetime(2020, 8, 11, 22, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 469078878, 'comment_body': ""My point is that you previously suggested to move it from the class constant into the namespace.\r\nI don't need step by step instructions, but apart from a class constant or a constant in the mixxx namespace I can't think of alternative solutions right now."", 'comment_created': datetime.datetime(2020, 8, 12, 8, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 470277357, 'comment_body': '```\r\nIn file included from /home/jan/Projects/mixxx/src/test/macros/macroplayback_test.cpp:1:\r\n/home/jan/Projects/mixxx/src/test/macros/macros_test.h:9:6: warning: ‘void {anonymous}::checkRecordedAction(MacroRecorder*, MacroAction)’ defined but not used [-Wunused-function]\r\n    9 | void checkRecordedAction(MacroRecorder* recorder, MacroAction action = s_action) {\r\n      |      ^~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\nProbably due to the two colons.', 'comment_created': datetime.datetime(2020, 8, 13, 22, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 470474463, 'comment_body': ""For me it didn't work without the colons"", 'comment_created': datetime.datetime(2020, 8, 14, 8, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 470501891, 'comment_body': 'Are you talking about the SPSCQueue initialized in EngineBuffer? That one is for *playback*, right? So these are two different things and the consts should be independent. If @xerus2000 implements the periodical fetching of actions, the recording queue can be much smaller.', 'comment_created': datetime.datetime(2020, 8, 14, 9, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 471742629, 'comment_body': 'I think ""Running"" doesn\'t really fit. Playing? Enabled?', 'comment_created': datetime.datetime(2020, 8, 17, 19, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 472160133, 'comment_body': '""Enabled"" is a really bad idea, as it already has a meaning in this context ;)\r\n""Playing"" sounds good', 'comment_created': datetime.datetime(2020, 8, 18, 12, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 472904020, 'comment_body': 'Please do not use relative include paths!\r\n\r\n```suggestion\r\n#include ""library/dao/macrodao.h""\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 9, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 472936712, 'comment_body': ""CLion does that automatically, and unfortunately I haven't yet found an option for the headers. I configured it correctly for all other includes though, but it sees the corresponding header as special."", 'comment_created': datetime.datetime(2020, 8, 19, 10, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 476307096, 'comment_body': ""Memory leak if you don't delete these in the destructor"", 'comment_created': datetime.datetime(2020, 8, 25, 9, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 476402227, 'comment_body': 'They are deleted, together with all other `m_engineControls` :)', 'comment_created': datetime.datetime(2020, 8, 25, 12, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479151748, 'comment_body': 'Should we use `number` here?', 'comment_created': datetime.datetime(2020, 8, 28, 11, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479156597, 'comment_body': 'Line too long. Please open the file in `vim`, navigate to line 67 and press `3Jgqq`.', 'comment_created': datetime.datetime(2020, 8, 28, 11, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479165366, 'comment_body': 'Race condition: If `macro_X_clear` in invoked between the `isPlaying` check and this, then `m_pMacro` might be nullptr and Mixxx crashes. I think you can save to pointer locally before the check to get around this without a lock.', 'comment_created': datetime.datetime(2020, 8, 28, 11, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479165969, 'comment_body': 'These pointers could also be null (see above).', 'comment_created': datetime.datetime(2020, 8, 28, 11, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479168970, 'comment_body': ""Do we really need an indicator? We don't have this for cues. It causes a lot of additional COs and could easily be implemented in JS."", 'comment_created': datetime.datetime(2020, 8, 28, 11, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479174700, 'comment_body': ""This will be the sample rate of the *new* track even though the macro was recorded for the old one when `stopRecording` was called from `trackLoaded`. Probably doesn't matter here, but maybe there should be a separate `abortRecording` method."", 'comment_created': datetime.datetime(2020, 8, 28, 11, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479175082, 'comment_body': '```suggestion\r\nMacroPointer MacroControl::getMacro() const {\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 11, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479175705, 'comment_body': 'Also, these should be constexprs.', 'comment_created': datetime.datetime(2020, 8, 28, 11, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479177035, 'comment_body': 'No need to transport unrelated info here. The macro is not set. Adding more states just makes it harder to map this in controller mappings.', 'comment_created': datetime.datetime(2020, 8, 28, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479182861, 'comment_body': 'Why not this?\r\n\r\n```suggestion\r\n    bool actionsRecorded = false;\r\n    while (MacroAction* action = m_recordedActions.front()) {\r\n        m_pMacro->addAction(*action);\r\n        m_recordedActions.pop();\r\n        actionsRecorded = true;\r\n    }\r\n    \r\n    if (actionsRecorded && getStatus() == Status::Armed) {\r\n        setStatus(Status::Recording);\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479183501, 'comment_body': 'Also, should we add a debug assertion at the start that the status is either armed or recording?', 'comment_created': datetime.datetime(2020, 8, 28, 11, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479186554, 'comment_body': '```suggestion\r\n    void slotMacroRecord();\r\n    void slotMacroToggle();\r\n    void slotMacroClear();\r\n    void slotMacroActivate();\r\n    void slotMacroGotoAndPlay();\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 11, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479191041, 'comment_body': '```suggestion\r\n        Empty = 0,\r\n        Set = 1,\r\n        PlaybackEnabled = 2,\r\n        RecordingArmed = 3,\r\n        Recording = 4,\r\n```\r\n\r\nAll other values are irrevelant to the user. We also need `RecordingEnded` when we have Channel-wide recording controls, but no need to add it now.', 'comment_created': datetime.datetime(2020, 8, 28, 11, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479192424, 'comment_body': ""We shouldn't put this code into EngineBuffer. There should be a single MacroControl object that instantiates a number of MacroSlotControl (like a single CueControl instantiates a number of HotcueControls)\r\n\r\nAlso, the naming of const is wrong:\r\n```suggestion\r\n    for (int i = 1; i <= kMacrosPerChannel; ++i) {\r\n```"", 'comment_created': datetime.datetime(2020, 8, 28, 11, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479195504, 'comment_body': 'Why not this?\r\n\r\n```suggestion\r\n    bool actionsRecorded = false;\r\n    while (MacroAction* action = m_recordedActions.front()) {\r\n        m_pMacro->addAction(*action);\r\n        m_recordedActions.pop();\r\n        actionsRecorded = true;\r\n    }\r\n    if (actionsRecorded && getStatus() == Armed) {\r\n        setStatus(Recording);\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 11, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479196314, 'comment_body': 'This needs to be an enum class.', 'comment_created': datetime.datetime(2020, 8, 28, 11, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479196848, 'comment_body': 'Please remove the default values.', 'comment_created': datetime.datetime(2020, 8, 28, 11, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479202850, 'comment_body': '~~These MacroControls are never deleted in the destructor.~~\r\n\r\nWhat is this list used for.', 'comment_created': datetime.datetime(2020, 8, 28, 12, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479205499, 'comment_body': 'Why are there still so many files in this branch with completely unrelated changes? This is really annoying. *Please* check the staging area before committing next time.', 'comment_created': datetime.datetime(2020, 8, 28, 12, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479207884, 'comment_body': '```suggestion\r\n    if (macro->getId() == kNoMacroId) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 12, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479210232, 'comment_body': ""```suggestion\r\n        if (slot == kAutoAssignNextFreeMacroSlot) {\r\n```\r\n\r\nBut this doesn't belong into MacroDAO IMHO! Also, this is dead code until we have channel-wide recording controls, right? Please remove if this is correct."", 'comment_created': datetime.datetime(2020, 8, 28, 12, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479216156, 'comment_body': 'What is `e`? Why to you create a standard map first?\r\n\r\nThe standard Qt way to iterate over the map is:\r\n\r\n```cpp\r\nauto it = map.constBegin();\r\nwhile (it != map.constEnd()) {\r\n    //qDebug() << it.key() << "": "" << it.value();\r\n    ++it;\r\n}\r\n```\r\n\r\nThat doesn\'t create a copy and is more readable than `.first`/`.second` IMHO.', 'comment_created': datetime.datetime(2020, 8, 28, 12, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479216443, 'comment_body': 'missing braces', 'comment_created': datetime.datetime(2020, 8, 28, 12, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479217762, 'comment_body': 'If this is not needed without channel-wide recording controls, please remove.', 'comment_created': datetime.datetime(2020, 8, 28, 12, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479219041, 'comment_body': 'please remove the default param. this should be explicit on the caller side.', 'comment_created': datetime.datetime(2020, 8, 28, 12, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479224230, 'comment_body': 'I think we should use names that also indicate the unit (samples/frames/milliseconds?)', 'comment_created': datetime.datetime(2020, 8, 28, 12, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479246878, 'comment_body': 'This test fails on my machine.\r\n\r\n```\r\n  1/639 Test #376: MacroRecordingTest.RecordSeekAndPlay ............................................***Failed    0.10 sec\r\nfaad2::LibLoader - Successfully loaded FAAD2 library ""libfaad.so"" version 2.9.2\r\nNote: Google Test filter = MacroRecordingTest.RecordSeekAndPlay\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from MacroRecordingTest\r\n[ RUN      ] MacroRecordingTest.RecordSeekAndPlay\r\n/home/jan/Projects/mixxx/src/test/macros/macrorecording_test.cpp:57: Failure\r\nExpected equality of these values:\r\n  m_pEngineBuffer1->getExactPlayPos()\r\n    Which is: 1000\r\n  kAction.target * mixxx::kEngineChannelCount\r\n    Which is: 30\r\n[  FAILED  ] MacroRecordingTest.RecordSeekAndPlay (46 ms)\r\n[----------] 1 test from MacroRecordingTest (46 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 1 test from 1 test case ran. (46 ms total)\r\n[  PASSED  ] 0 tests.\r\n[  FAILED  ] 1 test, listed below:\r\n[  FAILED  ] MacroRecordingTest.RecordSeekAndPlay\r\n\r\n 1 FAILED TEST\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 12, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479304001, 'comment_body': 'This should be VERIFY_OR_DEBUG_ASSERT IMHO.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479668517, 'comment_body': ""I think I copied that somewhere, I'll adjust it, didn't know about that :)"", 'comment_created': datetime.datetime(2020, 8, 29, 16, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479685667, 'comment_body': '1. This is a proto\r\n2. Yes, we can use FramePos when the other GSoC project finishes.', 'comment_created': datetime.datetime(2020, 8, 29, 20, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479687486, 'comment_body': 'What should be constexprs? Indicator on and off? Why?', 'comment_created': datetime.datetime(2020, 8, 29, 20, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479688371, 'comment_body': ""No, because I sometimes call them manually and don't care about the values then. They are _only_ relevant for ignoring button releases."", 'comment_created': datetime.datetime(2020, 8, 29, 20, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479691723, 'comment_body': 'We need a global constant for that, I have seen this in many places. Will file a separate PR after GSoC.', 'comment_created': datetime.datetime(2020, 8, 29, 21, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479692297, 'comment_body': '`DbId`', 'comment_created': datetime.datetime(2020, 8, 29, 21, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 479696475, 'comment_body': 'Applied in e9faded034', 'comment_created': datetime.datetime(2020, 8, 29, 22, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479696840, 'comment_body': 'f6c8f8f637', 'comment_created': datetime.datetime(2020, 8, 29, 22, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479705751, 'comment_body': ""Creating an instance of a MacroControl for each individual macro is different from how the single CueControl handles all cues for an EngineBuffer. This isn't necessarily a problem. Is this different design intentional?"", 'comment_created': datetime.datetime(2020, 8, 30, 0, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Be-ing', 'type': 'User'}, {'comment_id': 479710131, 'comment_body': ""It's not really different, but instantiating the individual hotcuecontrols is hidden in cuecontrol which creates a bunch of hotcuecontrol instances internally. I'd prefer a single instance of macrocontrol which creates a bunch of macroslotcontrols internally to move business logic out of the overcrowded engine buffer class. "", 'comment_created': datetime.datetime(2020, 8, 30, 1, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479771232, 'comment_body': 'As already talked over with @Holzhaus, then we would have a class for the sole purpose of running this loop. The big difference in CueControl is that it itself is also a cue.', 'comment_created': datetime.datetime(2020, 8, 30, 13, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479811372, 'comment_body': 'These changes are obsolete and should be removed, right?', 'comment_created': datetime.datetime(2020, 8, 30, 20, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479811452, 'comment_body': 'missing braces', 'comment_created': datetime.datetime(2020, 8, 30, 20, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479811456, 'comment_body': 'missing braces', 'comment_created': datetime.datetime(2020, 8, 30, 20, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479811489, 'comment_body': 'missing braces', 'comment_created': datetime.datetime(2020, 8, 30, 20, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479811514, 'comment_body': 'missing braces', 'comment_created': datetime.datetime(2020, 8, 30, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479811729, 'comment_body': 'Please don\'t ""resolve"" review comments without pushing a fix.', 'comment_created': datetime.datetime(2020, 8, 30, 20, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479812061, 'comment_body': 'Yes, I know that this is a proto so we need to use `uint64`. But my point was that it the member should be named appropriately, e.g.:\r\n\r\n```suggestion\r\n    optional uint64 sourcePositionMillis = 2;\r\n    optional uint64 targetPositionMillis = 3;\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 20, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479812326, 'comment_body': '```suggestion\r\n    if (!value) {\r\n        return;\r\n    }\r\n    if (isRecordingActive()) {\r\n        stopRecording();\r\n    } else {\r\n        startRecording();\r\n    }\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 30, 20, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479812898, 'comment_body': '```suggestion\r\nQByteArray Macro::serialize(const QList<MacroAction>& actions) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 20, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479812914, 'comment_body': '```suggestion\r\nQList<MacroAction> Macro::deserialize(const QByteArray& serialized) {\r\n```', 'comment_created': datetime.datetime(2020, 8, 30, 20, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479812933, 'comment_body': 'please remove', 'comment_created': datetime.datetime(2020, 8, 30, 20, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479813027, 'comment_body': 'I think in cuecontrol we use Cue::kNoPosition (= -1) for a non-existing position. Using 0 here would be inconsistent.', 'comment_created': datetime.datetime(2020, 8, 30, 20, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 479972006, 'comment_body': 'This interface still does not fit to Mixxx. All controls have a build in behavior, that should be used to be easily map-able to GUI buttons and midi controllers. \r\n\r\nI think this can become a ""play"" control with toggle button mode, a joined value with ""playing""\r\n\r\n\r\n ', 'comment_created': datetime.datetime(2020, 8, 31, 8, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479974672, 'comment_body': 'The same here, this should also become a toggle button. ', 'comment_created': datetime.datetime(2020, 8, 31, 8, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479978548, 'comment_body': ""Yeah, seems sensible. I wasn't quite sure what a toggle button really does.\r\nI thought it wouldn't work if the state can be changed by other controls."", 'comment_created': datetime.datetime(2020, 8, 31, 8, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479983118, 'comment_body': 'The problem here is that `toggle` can also record, so in a sense it is an alternative mapping for `activate`.', 'comment_created': datetime.datetime(2020, 8, 31, 8, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479984606, 'comment_body': ""This is not a valid state, only an emergency fallback. So I don't think that really matters."", 'comment_created': datetime.datetime(2020, 8, 31, 8, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479986116, 'comment_body': 'Oh sorry, I thought I had already pushed it.', 'comment_created': datetime.datetime(2020, 8, 31, 8, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479986819, 'comment_body': 'A full featured prototype you can look at is the normal play button.\r\nIt toggles and gives a feedback in turn.  I think something like this will work here as well. \r\nYou can even toggle through more than one state.\r\nThis can be sometimes tricky, see the broadcasting feature.\r\n ', 'comment_created': datetime.datetime(2020, 8, 31, 8, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 479993959, 'comment_body': 'Fixed in e9faded034', 'comment_created': datetime.datetime(2020, 8, 31, 9, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 479994855, 'comment_body': '`kInvalidValue` is private :/', 'comment_created': datetime.datetime(2020, 8, 31, 9, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 480099014, 'comment_body': 'fixed in d04d8d8453', 'comment_created': datetime.datetime(2020, 8, 31, 12, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 480100871, 'comment_body': ""you don't need to comment such things 4 times, I always have a look around after these things :)"", 'comment_created': datetime.datetime(2020, 8, 31, 12, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 480101010, 'comment_body': 'implicit sharing?', 'comment_created': datetime.datetime(2020, 8, 31, 12, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 480106499, 'comment_body': ""This requires some extra cpu cycles if the object is not yet shared. \r\nBecause we don't rely on that we pass Qt containers always as const reference, except it is stored internally."", 'comment_created': datetime.datetime(2020, 8, 31, 12, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 480138469, 'comment_body': 'What about the return types?', 'comment_created': datetime.datetime(2020, 8, 31, 13, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 480141513, 'comment_body': 'That the same, if you return a member variable use a const reference. If you return a local, return a copy. The copy is likely omitted in this case due to return value optimization.   ', 'comment_created': datetime.datetime(2020, 8, 31, 13, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'daschuer', 'type': 'User'}, {'comment_id': 480386237, 'comment_body': '```\r\nIn file included from /home/jan/Projects/mixxx/src/test/macros/macro_test.cpp:1:\r\n/home/jan/Projects/mixxx/src/test/macros/macro_test.h:12:6: error: ‘void {anonymous}::checkMacroAction(MacroPointer, MacroAction)’ defined but not used [-Werror=unused-function]\r\n   12 | void checkMacroAction(MacroPointer macro, MacroAction action = kAction) {\r\n      |      ^~~~~~~~~~~~~~~~\r\ncc1plus: all warnings being treated as errors\r\nmake[2]: *** [CMakeFiles/mixxx-test.dir/build.make:784: CMakeFiles/mixxx-test.dir/src/test/macros/macro_test.cpp.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nIn file included from /home/jan/Projects/mixxx/src/test/macros/macroplayback_test.cpp:1:\r\n/home/jan/Projects/mixxx/src/test/macros/macro_test.h:12:6: error: ‘void {anonymous}::checkMacroAction(MacroPointer, MacroAction)’ defined but not used [-Werror=unused-function]\r\n   12 | void checkMacroAction(MacroPointer macro, MacroAction action = kAction) {\r\n      |      ^~~~~~~~~~~~~~~~\r\ncc1plus: all warnings being treated as errors\r\nmake[2]: *** [CMakeFiles/mixxx-test.dir/build.make:771: CMakeFiles/mixxx-test.dir/src/test/macros/macroplayback_test.cpp.o] Error 1\r\nmake[1]: *** [CMakeFiles/Makefile2:1116: CMakeFiles/mixxx-test.dir/all] Error 2\r\nmake: *** [Makefile:182: all] Error 2\r\n```\r\n\r\nPlease always build with `-DWARNING_FATAL=ON` to catch these issues before committing.\r\n\r\nAnonymous namespaces do not belong into header files. I suggest you make subclass BaseMacroTest subclass of MixxxTest and make these static members.', 'comment_created': datetime.datetime(2020, 8, 31, 20, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 481405721, 'comment_body': ""I don't want a MixxxTest everywhere :) but I will find a solution"", 'comment_created': datetime.datetime(2020, 9, 1, 20, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 481405953, 'comment_body': 'Fixed in 4a03821', 'comment_created': datetime.datetime(2020, 9, 1, 20, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 492874668, 'comment_body': 'ping.', 'comment_created': datetime.datetime(2020, 9, 22, 16, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 492875471, 'comment_body': ""If it doesn't matter, then let's make this consistent and use -1 (ideally a named constant in the anonymous namespace)."", 'comment_created': datetime.datetime(2020, 9, 22, 16, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 493064754, 'comment_body': 'Sorry, pretty busy recently. But I still have this PR in the back of my head ;)', 'comment_created': datetime.datetime(2020, 9, 22, 22, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550279181, 'comment_body': ""Can't reproduce this warning/error with that flag, did something change?"", 'comment_created': datetime.datetime(2020, 12, 30, 18, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550286983, 'comment_body': 'Cmake is a big yikes. It has many different commands that take different arguments but are differentiated only by slight syntax differences: https://cmake.org/cmake/help/latest/manual/cmake.1.html#generate-a-project-buildsystem\r\n\r\nIn the end I edited the `CMakeCache.txt` by hand and now have it as well ^^', 'comment_created': datetime.datetime(2020, 12, 30, 18, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550496070, 'comment_body': 'Build fails because `MacroPointer` is not declared in scope.', 'comment_created': datetime.datetime(2020, 12, 31, 14, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550496329, 'comment_body': '```suggestion\r\nConfigKey MacroControl::getConfigKey(const QString& name) {\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550496364, 'comment_body': '```suggestion\r\nMacroControl::MacroControl(const QString group&, UserSettingsPointer pConfig, int slot)\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550496680, 'comment_body': '```suggestion\r\n    if (value == 0) {\r\n        if (isRecording()) {\r\n            stopRecording();\r\n        }\r\n        return;\r\n    }\r\n\r\n    switch (getStatus()) {\r\n    case Status::Empty:\r\n        setStatus(Status::Armed);\r\n        break;\r\n    case Status::Recorded:\r\n        setStatus(Status::Recording);\r\n        break;\r\n    default:\r\n        return;\r\n    }\r\n    DEBUG_ASSERT(m_updateRecordingTimer.thread() == QThread::currentThread());\r\n    m_updateRecordingTimer.start(kRecordingTimerInterval);\r\n    m_pMacro->setLabel(m_pMacro->getLabel().append(""[Recording]""));\r\n```\r\n', 'comment_created': datetime.datetime(2020, 12, 31, 14, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550496763, 'comment_body': '```suggestion\r\n    if (value != 0) {\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550496852, 'comment_body': '```suggestion\r\n    m_pMacro->setState(Macro::StateFlag::Enabled, value != 0);\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550496891, 'comment_body': '```suggestion\r\n    m_pMacro->setState(Macro::StateFlag::Looped, value != 0);\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550496963, 'comment_body': '```suggestion\r\n    if (value == 0) {\r\n        return;\r\n    }\r\n\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550497148, 'comment_body': '```suggestion\r\n    if (value == 0) {\r\n        return;\r\n    }\r\n\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550497270, 'comment_body': '```suggestion\r\n    if (value != 0 && getStatus() > Status::Recording) {\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550497553, 'comment_body': '```suggestion\r\n        auto* pMacroControl = new MacroControl(group, pConfig, i);\r\n        connect(this,\r\n                &EngineBuffer::cueJumpQueued,\r\n                pMacroControl,\r\n                &MacroControl::slotJumpQueued,\r\n                Qt::DirectConnection);\r\n        m_macroControls.append(pMacroControl);\r\n        addControl(pMacroControl);\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550497670, 'comment_body': '```suggestion\r\nvoid MacroDAO::saveMacros(TrackId trackId, const QMap<int, MacroPointer>& macros) const {\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550497765, 'comment_body': 'MacroPointer is not declared in scope.\r\n\r\nAlso:\r\n```suggestion\r\n    void saveMacros(TrackId trackId, const QMap<int, MacroPointer>& macros) const;\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550498074, 'comment_body': '```suggestion\r\n    if (value == 0) {\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550498247, 'comment_body': ""```\r\nError: /home/runner/work/mixxx/mixxx/src/track/macro.cpp:9:33: error: implicit conversion turns floating-point number into integer: 'const double' to '::google::protobuf::uint64' (aka 'unsigned long') [-Werror,-Wfloat-conversion]\r\n```"", 'comment_created': datetime.datetime(2020, 12, 31, 14, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550498714, 'comment_body': '```suggestion\r\n#include <memory>\r\n#include <QtCore>\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550498937, 'comment_body': '```suggestion\r\nvoid Track::setMacros(const QMap<int, MacroPointer>& macros) {\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550499262, 'comment_body': '```suggestion\r\n    for (const MacroPointer& pMacro : qAsConst(m_macros)) {\r\n        if (pMacro->isDirty()) {\r\n```', 'comment_created': datetime.datetime(2020, 12, 31, 14, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550501550, 'comment_body': ""huh, build doesn't fail for me?"", 'comment_created': datetime.datetime(2020, 12, 31, 15, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550501668, 'comment_body': 'that is nonsense, why would you create a const reference to a pointer?', 'comment_created': datetime.datetime(2020, 12, 31, 15, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550504018, 'comment_body': 'Check the CI. ', 'comment_created': datetime.datetime(2020, 12, 31, 15, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550509008, 'comment_body': 'The pointer should be immutable to prevent modification, i.e. unintended assignment. Some languages enforce this as the default, C++ does not.\r\n\r\nUsing a const-reference also is an optimization that prevents unneeded, internal book keeping caused by copying the smart pointer. Remember, there is an atomic involved, which requires a memory barrier, i.e. cache synchronization between CPU cores.\r\n\r\nPlease be careful by rejecting a recommendation as ""nonsense"" without being aware of some subtle details.', 'comment_created': datetime.datetime(2020, 12, 31, 15, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 550797534, 'comment_body': 'Sorry, it really confused me. That does seem to make sense.', 'comment_created': datetime.datetime(2021, 1, 1, 19, 17, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550797559, 'comment_body': 'oh, forgot to push the fix', 'comment_created': datetime.datetime(2021, 1, 1, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550797756, 'comment_body': 'could you elaborate why this is needed?', 'comment_created': datetime.datetime(2021, 1, 1, 19, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550797953, 'comment_body': 'Negative sample positions may be problematic. Just for the unthinkable case that this ever happens, I want to default to 0, i.e. beginning of the track.\r\nBringing it in line with an unpositioned cue does not seem sensible to me, since this is not supposed to ever be negative.', 'comment_created': datetime.datetime(2021, 1, 1, 19, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550798714, 'comment_body': 'IIRC the file uses `std::shared_ptr` which requires it. ', 'comment_created': datetime.datetime(2021, 1, 1, 19, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550890913, 'comment_body': '3aacc8099a', 'comment_created': datetime.datetime(2021, 1, 2, 15, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550891610, 'comment_body': 'but MacroPointer is declared in `macro.h` which is imported?', 'comment_created': datetime.datetime(2021, 1, 2, 15, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550894520, 'comment_body': 'For reference: https://en.cppreference.com/w/cpp/memory/shared_ptr\r\n\r\n> ## std::shared_ptr\r\n> Defined in header `<memory>`\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 1, 2, 15, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550894711, 'comment_body': 'https://github.com/mixxxdj/mixxx/pull/2989/checks?check_run_id=1636877691#step:17:457', 'comment_created': datetime.datetime(2021, 1, 2, 15, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550899755, 'comment_body': 'since this status is -1, it can simply be ignored in mappings by coercing to bool or checking `> 0`', 'comment_created': datetime.datetime(2021, 1, 2, 16, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550901215, 'comment_body': 'Sorry, this needs to go below QtCore, my fault.', 'comment_created': datetime.datetime(2021, 1, 2, 17, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 550902465, 'comment_body': ""what's the point of `qAsConst` though?"", 'comment_created': datetime.datetime(2021, 1, 2, 17, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 550903593, 'comment_body': 'https://github.com/KDE/clazy/blob/master/docs/checks/README-range-loop.md', 'comment_created': datetime.datetime(2021, 1, 2, 17, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 551084923, 'comment_body': 'Can you make this a class and add getters/setters? That makes it easier to extend it later on. Also, it might make sense to move it into a separate header file. ', 'comment_created': datetime.datetime(2021, 1, 4, 1, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 551087347, 'comment_body': 'Please implement this outside the class like this:\r\n\r\n```\r\nbool operator==(\r\n        const MacroAction& lhs,\r\n        const MacroAction& rhs)\r\n```', 'comment_created': datetime.datetime(2021, 1, 4, 2, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 551087395, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 1, 4, 2, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 551210689, 'comment_body': 'const members prevent copying', 'comment_created': datetime.datetime(2021, 1, 4, 9, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 551520533, 'comment_body': 'yep, but mutability is always a danger in OOP, so can we somehow eliminate the copying instead?', 'comment_created': datetime.datetime(2021, 1, 4, 19, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 552184275, 'comment_body': '@Holzhaus @uklotzde :)', 'comment_created': datetime.datetime(2021, 1, 5, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 552226978, 'comment_body': 'I think you need to implement a copy constructor. ', 'comment_created': datetime.datetime(2021, 1, 5, 22, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 552239238, 'comment_body': ""You should not need to implement a copy or move constructor manually, except for some very special cases. Declaring members as `const` doesn't work for value classes. The class could still be almost immutable if the only mutation is copy/move assignment. Remember, you could use always `const` in the outer context to make an instance immutable."", 'comment_created': datetime.datetime(2021, 1, 5, 22, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'uklotzde', 'type': 'User'}, {'comment_id': 552240669, 'comment_body': 'If you make this an actual class with private members and getters, you can also just not implement any setters.', 'comment_created': datetime.datetime(2021, 1, 5, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 552526099, 'comment_body': 'well, the Macro would have to be _stopped_ and _cleared_ in the same breath (clear is a noop while the macro is running), I am not sure whether this is a legitimate concern. And if it is, we would have to use a lock, because that could in theory happen almost everywhere.', 'comment_created': datetime.datetime(2021, 1, 6, 11, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 552585570, 'comment_body': 'getSourcePositionFrames?', 'comment_created': datetime.datetime(2021, 1, 6, 13, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 552592154, 'comment_body': 'maybe it makes sense to use the helper functions from `mixxx::audio::SignalInfo` instead of adding these methods? Not sure.', 'comment_created': datetime.datetime(2021, 1, 6, 13, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 552598083, 'comment_body': ""I'm questioning if we should really save sample/frame positions in the db. I don't want to run into the same problems we have with Cues/Beatmap/Beatgrid. I think Ideally, we'd have a lightweight MacroInfo class similar to CueInfo that stores positions in milliseconds, not samples/frames. It could have a method like:\r\n\r\n```cpp\r\nMacro macro = macroInfo.getMacroWithStreamInfo(streamInfo);\r\n```\r\n\r\nThis would definitely make it easier to handle import/export from/to Serato Metadata without having to postpone the import until the stream info is available.\r\n\r\n@xerus2000 @uklotzde What do you think?"", 'comment_created': datetime.datetime(2021, 1, 6, 13, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 552921663, 'comment_body': 'Frames should be the default measurement for positions, we discussed this on Zulip at some point. We should forget Samples for everything outside raw audio interaction.', 'comment_created': datetime.datetime(2021, 1, 6, 19, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 552929627, 'comment_body': 'I was referring to renaming the method to make it clear what unit is used.', 'comment_created': datetime.datetime(2021, 1, 6, 19, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 552942900, 'comment_body': ""oof, does make sense, but I wanted to merge this week and not introduce major architectural reworks ^^\r\nalso, these things should be brought up in Zulip where there's more room for such bigger discussions and they won't get lost, rather than a temporary Github review comment\r\n\r\nAnyways, why do you want to name it `MacroInfo` and not stay with `MacoAction`?"", 'comment_created': datetime.datetime(2021, 1, 6, 20, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 552961810, 'comment_body': ""That wasn't related to this class, I was talking about the macro class. Just to distinguish the time-based class from the frame-based one."", 'comment_created': datetime.datetime(2021, 1, 6, 21, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Holzhaus', 'type': 'User'}, {'comment_id': 553855450, 'comment_body': 'But we should have a default unit that needs no specification, or not?', 'comment_created': datetime.datetime(2021, 1, 8, 10, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}, {'comment_id': 553855715, 'comment_body': 'Yeah I intended to remove it, but it would introduce a lot of repetitious calls doing exactly what this method does, so in the end I decided to add it back in.', 'comment_created': datetime.datetime(2021, 1, 8, 10, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xeruf', 'type': 'User'}]","[{'commit_sha': '2d2eabae962fdf323b7cb1dbeb269423cd230013', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05038510cf8b4f785618a46713fba02d902a186a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de39da1e1bc6c1137a740ff5357f65914d35e9e1', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5554de8b89a13e879f4f3058062d4cee233e6d58', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32e1c2b646cc7e24c532f8c01f4eef888539d3aa', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc6389203adc0c3f97e6236d56646c97e2e21bbe', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577c151b14dd566b11b445bcb88bbb2b373c8a62', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa7ff8e764a132d8cc5ba7f6033b34294b8d1fe', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66a537d75a59c3559bb8478c65a5efc8eb11f194', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd70041ebdd3d38ff97edb1b9e01c461fa899f963', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '284c751f3b23c55a16f159446d0a2ac5c9c1d7e8', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ef13669c367081e6f67cd79e7f5e4aefe8ace39', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c623169caf97222ff3de430f21ab48dd76188d', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86125e5feda236e4a7cb56f521150bbbc60f3b9', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62d7e111ea24f330f4043b7610a77f45acba0112', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62c32dc3e6980ffb4db401bb46975ddc12bc3444', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0be66b162e93195cdbde4b58b57e21354a58d58f', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '228dcf8f54ac7766a3da548f6de605498251ab10', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '337e9c9a7b952ede83964591b43f94441a349acd', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2ed2a6c1088c10a33545940170b5aa3a5b71125', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53ad10d74a718a69103ab31a380c40c13c8e5d67', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1303369113120748c99e800ee3730bad37287dde', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '677c8945c2548609687005c543a0ad3e6e7b429c', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4b89b1fc4c5c6cc57c6191113282b608a9c8309', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129599aaadbd3d3cbf5c11e88fd516e34d29d88e', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90038993f30b88dde241194a2004800b75df15a1', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58bb1005e35232f9044127b69c38c5da17325743', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9acecb2c174152af0f70257ff4f3c373b6d34e', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec1deb3eb2a2b2a6fcbfd22a830e3f5b44dc596', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfc4276b9e44d3d3aac82d80dbbb2c5cc2226528', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5b060cb8b02b43d519ba21ca21d5b30d9a374b', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '696d9c1eca2d764c980764ebee1c229023dd480f', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1993b7da4296e8346a44e65e58020470c66df06b', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0cbb2835649b747472a064cf1080d53981259d', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b0d53b0ed2415602d865778e7248fb551380ec', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e817b3d55c6475b59c14e056daf128533aa9492f', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39ca8b1a10a6748f654365d0ac0b45bbb7986a4a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '864d30e166a8c304bc6b5173daa28e5487c33de6', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '320376b877eff4d5d8178b2b226a7439d4c5e939', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '822f56e48ef31717215d658e5bc359d7c9e11374', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbe2a00e7d25a619e190b1238cef2aab51735364', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eafb413880c6eb24b8593db03b5bb7aec92cb10c', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c1fcc936f0d48cf01626b21ab7f34ba5413f758', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f3a0d1bd5e62be774b20bd94ce7cf5e485519cb', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '757fd9aecdf877402f66e86b36a05a6c9bc2c504', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a39f69ee7115662d0a3357067a369959bc7faade', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc14dfe5e1bdec681d900d2e59067c2385c3e74', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3ed8ee3e5e48e4edb761314e8fb85b1bb2c0ca', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '899b11ae3769e38902e4a8a1dbd5a86d0703257e', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd03fdf38ea41f9701ec30092a646804db7f2d798', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea3ebfaf457e6470d4d1c3bc97116b813472c739', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '208de884bc8f7b9c59714ab2fa883858425764c1', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6a09ad802a13f1ceeff53b27ec340cd159d9a6', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37819743310f3c32867f82a86608ac94ca6da400', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8120bddce2ccd848f379822dcaaeae34e1996c31', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e9d266c501cbbeffd30e24212c757bbfafae26c', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63501126af1b338aa27af72b01ffbf8886feaa9d', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '306910e45894042cb8c79eddca097a73bd026bbc', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec124ee17ab0e061ce34acced9d557bb8a9b4b4a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4725429e0d8aa01506e6db2ebdd387f286b1360a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f6ff574be78aefb3437d755e2b37c84b1af7db6', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b76c58e222a0f71934a03194441b26a62628d80', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c975ae888ae1f6fca28d2a41be81e77fe6c918f0', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62e27a49999251d975e8c910cc17e8e5184c71ac', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf68285b9357969a7f215326ed2b2286004353d0', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd41538c2333923ebecfff13614e836991396e87d', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae8e15761d8c363201014112b3a1f6f04da1d966', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c87fda868fcd8710d8791a5343972e0afac1f87', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c38f34c40270ec4d030bffc06282dfc5c9127550', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1781c9048cbed7f323dade644c9bb89056ae7e6b', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aac374db36375d7cd86beb853a57e17cb965b011', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34473434a816489a2b0560f7addaf9e18d70bad4', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53ac82ccc385031f9e3d3bea94cfdfb1b1757b57', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a02bede12438721d91a35a91e9c19c1e2215abca', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e621b6b022ae454ea49898378b08401c4f14391', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50fead88bd416d4b1445ba23c9d8f17143b04d03', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a0ca780e5a7c9d13ff5d6b29f62cb2d0daba242', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f74ca75b05fdd1fe583e1131a8573389de1bcea', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278ba90e64c4b6c85e84d958f8e3b9e739dfc3b7', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b1abaa94c1a0f100cd911a17ddc8bb4be5ba61c', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86438f88e3d390fcd8b0bb2fc6fd4b7b011904d6', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a496b692443c19045b513cbb3c1fc86049cd7974', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '574799f7f4d19e15f02e4d025b6550b53307378f', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56080a31902a4931bc5a569cb72ec1afb50f1ecb', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb5500b61c8e277a3efa8e1151d1d260788a9939', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd54c6403e10671a32f8af0ab1ca2c8d1d5dee9ba', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96fe0ce4cf18fea18ffe35c68d75bbdb0b8076ef', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c4e7e59baa9c952d17696fbb7d719d6d26f0e1e', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a57d1837b9b813c7da2f3ea29e381898ae57d5', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f471502f13d93698a29a1028fb2aa745f03fa31', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd01c53e3bc0c73b65e120f4be2bf93431687fe8', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf6e3d3ac091f3af2efeaba25a31b0c0a1b927f7', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1ff6fac3790053bc8a64c935d733f415d8e2f9', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992598465cb4b49e465fd46cb9e9f623a207d1b0', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6421a2dfdce70333d684f6b1bcc18f89f685e6fb', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ae80913c3d38f82bbaeb6d7d9eb144d608de57', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0866071ec6f43e008868e2fb34b3d8df1d7e486', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80fc0f961b56ab452672d4ce793405aca8a595c6', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f86b3297c0077b320ea7b8da0692d2ef044606e2', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0198a97c0bd60600f4ca119d14fb1c763dfabe8', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44edcb28c654cea578a7a40684e3fcef859a5439', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a8cbf85723475bd06392dcbbb55dd9e54f67d16', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccb1b350fd98ac76d9c810ef7652e7e0b91546e3', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d7a2787644597b8bc13b40e3e5f4df09396ca4a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8684e8b0584fc7d564e3bcde4e0b791a2fb9d266', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39c49590aecf98ee0e43f8126f6771d7a475fc87', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a445dd6cef068a6a91071b411485629d563e83ca', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb83dceffebce4d338a2fe7b2a12c4a10671c696', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8960233e35e420855e865d90f83349c50cebb9a8', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92105a0d6eab11aa49825198273ca8db88c012ea', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1b14171a2af7a160a766a3f9d65f66854353ac2', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70f8f24713d1c86302114414119675a14846d98a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '821fe66f8e441ecd790a6394df34f3691652deaf', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e6176c097e43a561f6e172ff237e0740047d2de', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eb90cea7dec00295deb17ac5c6115bfc5703d45', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '669cee885592413bc0de5ee8baead3c083775f53', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d37432d3691180aa67d7c7a016156f1070b185', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce90ed8a828684c31e03d2660c33c84b7a7746ed', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0963c1fe7c09d07d1c113a63343cac6abdd8e302', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '086db7047e0ca52afb2eaabfecafa53c9aa7465a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fa7f2c33e1503503658746fa47f1932470ed482', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c9e09d210f45c1f1a1ac5d07d7a5502966ea415', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a706f9ae03c8b97c26592fe9dee8b42656a8439', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05ef822f088c9f0605f5c4b705eb9c3553548fc6', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0909e55b032656199bcbdd2ea5a723c17bb469a6', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '302bbbc7a5af4556c970f32678076785b92576b0', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9705284e9e831af3547445fece186ef231b26077', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9af21bec4911a09a8934d17ceb560ca003c29de1', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df2152da5e1bc9691418bcbdbc33088bb185a7b6', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbc5ac99c3a28979f3ea9d2da96e3859a801c498', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22548566135a4f1ce4abf0a9d95d8c979a494e5', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87d8000f587e64b34697fee415772300c492a748', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '396ec475f513a0066ad4d9b64a73cb23536ac469', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7de57937371a8aaa7b7dd12952fe7926a8d3c8bd', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '884d3087094353da376deb11f780bc0fb4c55ed1', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '664ccf2bf026da01e46801c471083bb5f8b31c73', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6be1b37b02ab4e70134fa5162afd5111d4b4011', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6c8f8f6376e77eb5e821181c427f4feeee5b220', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9faded03406f7d5e054361040545b0bda1a3da3', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd35c30455b5542514980e1d8692b71fb21235126', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd828abc85d0509051e3c53d651cf1183a00c7a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5995745cb60b13dbbb4c73a2ce2474d0a61c7cd3', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd243f583ae4e8a7d4fbe48d7a89e942260b4d568', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec29e2bf361ed64964255a00e9e0e485a2196a6a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcdd32f1cc1460d3c5e91989324ac7313a57d700', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63960c334d2b06da9c8991bdc3d2b0e457ba7560', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b2fdd8a029a47709631e0b61aa830f2a8ea6de5', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '542124a2725deae5e40631c6e6fae0a15da5198e', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df130defa142fb70bdb227e6a8f633cbb050e6a8', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd04d8d8453ab1824da825b4441e1dc32c88653a3', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aeca5b214744330255c952ac9a2bf3f4ca276af', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bdca5dbaa9e63fad572e7dc021469476f2bc561', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae0ceeb883ac17db691913cd7407f9a5c71d1f3', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d89195113cbe392ed46049e7380a625907afa45', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '522541956b47d68adcd5176aaca12ac79f5d092b', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb78c68ef043c9aef8d657cfd98229b2f247cc08', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a03821e43113b238e3ffe2f99384b4468a0adfb', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12306f81fa708a88f30413384a9880b66b9ab167', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce59015599d251d6c48f572337db7a2dc614fde9', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1af3280fb557017f6c026906e8dd7c86e581ef7a', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f66f9d6e38d4b9d80b318fd3c26d4f378361df9', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edd68a4119dbd30bf2784d7c3eb1593bcbf5c6e2', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d0b66d4eb965dce399204f7a497a5e3f2db041e', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '829acc68002bad8b5a2fed32e72a2df856761e7e', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1c23cb793c862659bbcb93084b3c1fd0141dbf0', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ebd32cb49ef9770df8f6cb7e3bfe06f2c65b0f', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa7e0621ff2a21992f65f83271197d126f16fbe8', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f79e27a84d213b8d980d3ee7ca2908ed6caa045', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c097e737aa034b25e7a63366d2c51fa3e47fbe8', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e38edb57e4a80acfe207eb6b3b47954ffc31191', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f3e07cddc65d34d66b1d3d2e59d80634edd0fb3', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '669d498930ed78764eef0f3e6cce8071d38dfd3d', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4176a658d380f8f6cd22341ea0df79875bf7e9f9', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a000115f98e755eecb1a098c62907266d12eedb1', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ce6eab48ff4cbc84c8599cecea5042f6e612e81', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43d5579db71a702216dc27ba2caaba7e7250b503', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0cdabfa8b60429e28521c783d468adb7919a655', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd986ce05724b26d5edfbba388a28e4232010e92', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cc1fd7dad03c4ed453e12534225d80221155a1d', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605d1acc78ba207ec77abca687951b7320d2d026', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eda782aba843f365a8de6aef8e8b6bb6a5d8efb', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29fe8a4d7aa05d5f3f82b61dc3d00a6d3825d501', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e88c8a8e539669591606cc25a56ebb9cd9c548ae', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc640a1f54e9af6ed76756fa2dc4c05ace7d221', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5209c0daad0d45b059cb7bff8b6729a6130e2bd5', 'committer_username': 'xeruf', 'committer_name': 'Janek', 'committer_email': '27jf@pm.me', 'commit_date': datetime.datetime(2015, 7, 15, 18, 20, 47, tzinfo=datetime.timezone.utc)}]",Janek,13354331,27jf@pm.me,User,,186,,12,50

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
10126031,mixxx,mixxxdj/mixxx,C++,1253,4340,137,357,48321,2135,16,250,"[{'id': 783563705, 'number': 4530, 'closed': datetime.datetime(2024, 5, 26, 21, 44, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 18, 9, 51, 38, tzinfo=datetime.timezone.utc), 'time_taken': 79530758.0, 'time_delta': '920 days, 11:52:38', 'additions': 233, 'deletions': 239, 'state': 'closed'}, {'id': 783545550, 'number': 4529, 'closed': None, 'created': datetime.datetime(2021, 11, 18, 9, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1580, 'deletions': 105, 'state': 'open'}, {'id': 783007955, 'number': 4528, 'closed': None, 'created': datetime.datetime(2021, 11, 17, 18, 32, 21, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1396, 'deletions': 62, 'state': 'open'}, {'id': 552170253, 'number': 3544, 'closed': datetime.datetime(2021, 1, 25, 22, 9, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 9, 18, 37, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1395106.0, 'time_delta': '16 days, 3:31:46', 'additions': 13, 'deletions': 27, 'state': 'closed'}, {'id': 517143577, 'number': 3275, 'closed': datetime.datetime(2020, 12, 2, 20, 29, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 7, 14, 17, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2182339.0, 'time_delta': '25 days, 6:12:19', 'additions': 599, 'deletions': 4297, 'state': 'closed'}, {'id': 517128088, 'number': 3274, 'closed': datetime.datetime(2020, 11, 10, 22, 6, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 7, 12, 3, 57, tzinfo=datetime.timezone.utc), 'time_taken': 295368.0, 'time_delta': '3 days, 10:02:48', 'additions': 16, 'deletions': 55, 'state': 'closed'}, {'id': 470078888, 'number': 3032, 'closed': datetime.datetime(2021, 7, 30, 0, 8, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 10, 41, 3, tzinfo=datetime.timezone.utc), 'time_taken': 29770061.0, 'time_delta': '344 days, 13:27:41', 'additions': 12, 'deletions': 55, 'state': 'closed'}, {'id': 468037327, 'number': 3016, 'closed': datetime.datetime(2020, 8, 18, 21, 24, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 15, 9, 51, tzinfo=datetime.timezone.utc), 'time_taken': 368069.0, 'time_delta': '4 days, 6:14:29', 'additions': 10, 'deletions': 57, 'state': 'closed'}, {'id': 467321108, 'number': 3013, 'closed': datetime.datetime(2021, 4, 5, 13, 37, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 11, 21, 10, tzinfo=datetime.timezone.utc), 'time_taken': 20312196.0, 'time_delta': '235 days, 2:16:36', 'additions': 430, 'deletions': 511, 'state': 'closed'}, {'id': 463441802, 'number': 2997, 'closed': datetime.datetime(2020, 8, 7, 12, 56, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 15, 2, 16, tzinfo=datetime.timezone.utc), 'time_taken': 165262.0, 'time_delta': '1 day, 21:54:22', 'additions': 118, 'deletions': 113, 'state': 'closed'}, {'id': 463288383, 'number': 2995, 'closed': datetime.datetime(2020, 8, 16, 11, 14, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 10, 17, 46, tzinfo=datetime.timezone.utc), 'time_taken': 953823.0, 'time_delta': '11 days, 0:57:03', 'additions': 12, 'deletions': 1, 'state': 'closed'}, {'id': 463041255, 'number': 2994, 'closed': datetime.datetime(2020, 8, 16, 11, 12, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 22, 23, 6, tzinfo=datetime.timezone.utc), 'time_taken': 996588.0, 'time_delta': '11 days, 12:49:48', 'additions': 1, 'deletions': 75, 'state': 'closed'}, {'id': 462708670, 'number': 2989, 'closed': datetime.datetime(2021, 11, 18, 9, 55, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 11, 34, 33, tzinfo=datetime.timezone.utc), 'time_taken': 40688475.0, 'time_delta': '470 days, 22:21:15', 'additions': 1747, 'deletions': 294, 'state': 'closed'}, {'id': 462409380, 'number': 2987, 'closed': datetime.datetime(2020, 11, 4, 12, 37, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 21, 36, 25, tzinfo=datetime.timezone.utc), 'time_taken': 8002884.0, 'time_delta': '92 days, 15:01:24', 'additions': 11, 'deletions': 9, 'state': 'closed'}, {'id': 460267512, 'number': 2980, 'closed': datetime.datetime(2020, 8, 1, 11, 21, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 15, 51, 7, tzinfo=datetime.timezone.utc), 'time_taken': 70194.0, 'time_delta': '19:29:54', 'additions': 52, 'deletions': 98, 'state': 'closed'}, {'id': 460233759, 'number': 2979, 'closed': datetime.datetime(2020, 8, 6, 13, 49, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 15, 10, 40, tzinfo=datetime.timezone.utc), 'time_taken': 513519.0, 'time_delta': '5 days, 22:38:39', 'additions': 60, 'deletions': 75, 'state': 'closed'}, {'id': 460219760, 'number': 2978, 'closed': datetime.datetime(2020, 8, 1, 9, 13, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 14, 53, 44, tzinfo=datetime.timezone.utc), 'time_taken': 66007.0, 'time_delta': '18:20:07', 'additions': 19, 'deletions': 25, 'state': 'closed'}, {'id': 460213016, 'number': 2977, 'closed': datetime.datetime(2020, 7, 31, 17, 27, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 14, 45, 55, tzinfo=datetime.timezone.utc), 'time_taken': 9675.0, 'time_delta': '2:41:15', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 459517831, 'number': 2976, 'closed': datetime.datetime(2020, 8, 5, 9, 25, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 19, 14, 19, tzinfo=datetime.timezone.utc), 'time_taken': 483068.0, 'time_delta': '5 days, 14:11:08', 'additions': 12, 'deletions': 13, 'state': 'closed'}, {'id': 459122414, 'number': 2975, 'closed': datetime.datetime(2020, 8, 1, 11, 3, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 12, 15, 56, tzinfo=datetime.timezone.utc), 'time_taken': 168432.0, 'time_delta': '1 day, 22:47:12', 'additions': 50, 'deletions': 13, 'state': 'closed'}, {'id': 459056265, 'number': 2973, 'closed': datetime.datetime(2020, 7, 31, 14, 44, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 10, 30, 35, tzinfo=datetime.timezone.utc), 'time_taken': 101632.0, 'time_delta': '1 day, 4:13:52', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 456989718, 'number': 2969, 'closed': datetime.datetime(2020, 7, 31, 11, 34, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 8, 13, 28, tzinfo=datetime.timezone.utc), 'time_taken': 357686.0, 'time_delta': '4 days, 3:21:26', 'additions': 330, 'deletions': 319, 'state': 'closed'}, {'id': 448214535, 'number': 2938, 'closed': datetime.datetime(2020, 7, 13, 19, 47, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 12, 10, 19, tzinfo=datetime.timezone.utc), 'time_taken': 27427.0, 'time_delta': '7:37:07', 'additions': 0, 'deletions': 72, 'state': 'closed'}, {'id': 446511452, 'number': 2925, 'closed': datetime.datetime(2020, 8, 16, 10, 37, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 22, 11, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3327947.0, 'time_delta': '38 days, 12:25:47', 'additions': 92, 'deletions': 106, 'state': 'closed'}, {'id': 441347721, 'number': 2905, 'closed': datetime.datetime(2020, 6, 29, 22, 8, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 11, 41, 44, tzinfo=datetime.timezone.utc), 'time_taken': 37622.0, 'time_delta': '10:27:02', 'additions': 226, 'deletions': 269, 'state': 'closed'}, {'id': 436780818, 'number': 2885, 'closed': datetime.datetime(2020, 6, 22, 22, 23, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 21, 51, 29, tzinfo=datetime.timezone.utc), 'time_taken': 347519.0, 'time_delta': '4 days, 0:31:59', 'additions': 13, 'deletions': 12, 'state': 'closed'}, {'id': 436406394, 'number': 2882, 'closed': datetime.datetime(2020, 6, 19, 21, 23, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 11, 22, 38, tzinfo=datetime.timezone.utc), 'time_taken': 122478.0, 'time_delta': '1 day, 10:01:18', 'additions': 157, 'deletions': 227, 'state': 'closed'}, {'id': 436389788, 'number': 2881, 'closed': datetime.datetime(2020, 6, 18, 13, 53, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 10, 50, tzinfo=datetime.timezone.utc), 'time_taken': 11032.0, 'time_delta': '3:03:52', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 434534907, 'number': 2873, 'closed': datetime.datetime(2020, 8, 4, 9, 45, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 13, 18, 28, tzinfo=datetime.timezone.utc), 'time_taken': 4307244.0, 'time_delta': '49 days, 20:27:24', 'additions': 832, 'deletions': 401, 'state': 'closed'}, {'id': 434515590, 'number': 2872, 'closed': datetime.datetime(2020, 7, 12, 15, 32, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 12, 43, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2342942.0, 'time_delta': '27 days, 2:49:02', 'additions': 85, 'deletions': 140, 'state': 'closed'}, {'id': 434457816, 'number': 2871, 'closed': datetime.datetime(2020, 10, 26, 17, 32, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 10, 55, 22, tzinfo=datetime.timezone.utc), 'time_taken': 11515041.0, 'time_delta': '133 days, 6:37:21', 'additions': 438, 'deletions': 438, 'state': 'closed'}, {'id': 434416749, 'number': 2870, 'closed': datetime.datetime(2020, 7, 2, 19, 48, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 9, 42, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1505147.0, 'time_delta': '17 days, 10:05:47', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 421358111, 'number': 2810, 'closed': datetime.datetime(2020, 6, 13, 21, 10, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 13, 40, 9, tzinfo=datetime.timezone.utc), 'time_taken': 2014192.0, 'time_delta': '23 days, 7:29:52', 'additions': 144, 'deletions': 152, 'state': 'closed'}, {'id': 409045409, 'number': 2717, 'closed': datetime.datetime(2020, 5, 21, 12, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 26, 8, 53, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2172543.0, 'time_delta': '25 days, 3:29:03', 'additions': 108, 'deletions': 147, 'state': 'closed'}, {'id': 408975201, 'number': 2715, 'closed': datetime.datetime(2020, 6, 11, 21, 17, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 25, 21, 48, 57, tzinfo=datetime.timezone.utc), 'time_taken': 4058937.0, 'time_delta': '46 days, 23:28:57', 'additions': 1367, 'deletions': 1358, 'state': 'closed'}, {'id': 405712479, 'number': 2687, 'closed': datetime.datetime(2020, 4, 20, 8, 2, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 19, 18, 38, tzinfo=datetime.timezone.utc), 'time_taken': 48241.0, 'time_delta': '13:24:01', 'additions': 6, 'deletions': 4, 'state': 'closed'}, {'id': 405532672, 'number': 2679, 'closed': datetime.datetime(2020, 5, 21, 21, 52, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 18, 17, 30, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2866971.0, 'time_delta': '33 days, 4:22:51', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 397794376, 'number': 2621, 'closed': datetime.datetime(2020, 4, 23, 19, 43, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 2, 20, 19, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1812270.0, 'time_delta': '20 days, 23:24:30', 'additions': 314, 'deletions': 391, 'state': 'closed'}, {'id': 397216854, 'number': 2617, 'closed': datetime.datetime(2020, 4, 19, 3, 6, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 1, 20, 30, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1492553.0, 'time_delta': '17 days, 6:35:53', 'additions': 84, 'deletions': 47, 'state': 'closed'}, {'id': 243525750, 'number': 1989, 'closed': datetime.datetime(2023, 12, 9, 19, 10, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 1, 10, 0, 8, 25, tzinfo=datetime.timezone.utc), 'time_taken': 155070098.0, 'time_delta': '1794 days, 19:01:38', 'additions': 267, 'deletions': 3, 'state': 'closed'}, {'id': 240276792, 'number': 1953, 'closed': datetime.datetime(2019, 1, 27, 20, 58, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 12, 20, 19, 24, 42, tzinfo=datetime.timezone.utc), 'time_taken': 3288826.0, 'time_delta': '38 days, 1:33:46', 'additions': 17354, 'deletions': 17376, 'state': 'closed'}]"
