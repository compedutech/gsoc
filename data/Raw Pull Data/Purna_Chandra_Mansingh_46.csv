pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
947470549,Deprecate remaining VI methods,Addressing https://github.com/pymc-devs/pymc/issues/5581,True,5806,https://api.github.com/repos/pymc-devs/pymc/pulls/5806,https://github.com/pymc-devs/pymc/pull/5806,closed,39,1432,6,15,10,39,0,0,[],2022-05-25 19:59:43+00:00,2022-06-02 16:05:04+00:00,677121.0,"7 days, 20:05:21","[{'comment_id': 883445133, 'comment_body': 'why changing this line?', 'comment_created': datetime.datetime(2022, 5, 27, 9, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883445659, 'comment_body': '`fit` should be also tested. What is the purpose of removing it?', 'comment_created': datetime.datetime(2022, 5, 27, 9, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883446395, 'comment_body': 'It would be better to replace normalizing flow group with e.g. `MeanFieldGroup`. The test checks initialization API', 'comment_created': datetime.datetime(2022, 5, 27, 9, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883446618, 'comment_body': 'Same suggestion here', 'comment_created': datetime.datetime(2022, 5, 27, 9, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883447261, 'comment_body': 'Should be just removed, not commented', 'comment_created': datetime.datetime(2022, 5, 27, 9, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883447406, 'comment_body': 'Should be just removed, not commented', 'comment_created': datetime.datetime(2022, 5, 27, 9, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883447536, 'comment_body': 'Should be just removed', 'comment_created': datetime.datetime(2022, 5, 27, 9, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883447680, 'comment_body': 'Should be just removed, not commented', 'comment_created': datetime.datetime(2022, 5, 27, 9, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883447742, 'comment_body': 'Should be just removed, not commented', 'comment_created': datetime.datetime(2022, 5, 27, 9, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883447987, 'comment_body': 'This is a valid test', 'comment_created': datetime.datetime(2022, 5, 27, 9, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883448989, 'comment_body': 'this is a valid test', 'comment_created': datetime.datetime(2022, 5, 27, 9, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883449531, 'comment_body': 'This is a valid test, just remove couple of test cases', 'comment_created': datetime.datetime(2022, 5, 27, 9, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883450289, 'comment_body': 'Should be just removed, not commented', 'comment_created': datetime.datetime(2022, 5, 27, 9, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883450628, 'comment_body': 'Should be just removed, rowwise is Deprecated as well', 'comment_created': datetime.datetime(2022, 5, 27, 9, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883450808, 'comment_body': 'This is a valid test', 'comment_created': datetime.datetime(2022, 5, 27, 9, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883450918, 'comment_body': 'Should be just removed, not commented', 'comment_created': datetime.datetime(2022, 5, 27, 9, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883453805, 'comment_body': 'NotImplementedInference should also be removed', 'comment_created': datetime.datetime(2022, 5, 27, 9, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883454649, 'comment_body': 'This comment is not outdated', 'comment_created': datetime.datetime(2022, 5, 27, 9, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883455183, 'comment_body': 'This docstring describes deprecated functionality', 'comment_created': datetime.datetime(2022, 5, 27, 9, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883457661, 'comment_body': 'I guess this change conflicts with the main branch, a rebase or merge should help to fix that', 'comment_created': datetime.datetime(2022, 5, 27, 9, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883458846, 'comment_body': 'This property (batched dimension) is not needed any more, just delete it', 'comment_created': datetime.datetime(2022, 5, 27, 9, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883459524, 'comment_body': 'this was an important abstract method, should not be deleted', 'comment_created': datetime.datetime(2022, 5, 27, 9, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883460842, 'comment_body': 'was only used for batched or local inference. Any occurrence usage of this property can be safely replaced with `symbolic_random`', 'comment_created': datetime.datetime(2022, 5, 27, 9, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883461792, 'comment_body': 'there is a single ""part"" choice `part=""total""` can be just removed', 'comment_created': datetime.datetime(2022, 5, 27, 9, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883462785, 'comment_body': 'symbolic_random2d is no more needed, no 3d tensor randoms to concatenate\r\n```suggestion\r\n        return at.concatenate(self.collect(""symbolic_random""), axis=-1)\r\n```', 'comment_created': datetime.datetime(2022, 5, 27, 9, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883464374, 'comment_body': '`+ def ignore_not_implemented_inference(...)` below should also be removed', 'comment_created': datetime.datetime(2022, 5, 27, 9, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 883513863, 'comment_body': 'This is a mistake, and I will correct it.', 'comment_created': datetime.datetime(2022, 5, 27, 11, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 883520995, 'comment_body': ""I removed fit to avoid a pre-commit error; I'll reintroduce it once I repair the test that uses the `fit`."", 'comment_created': datetime.datetime(2022, 5, 27, 11, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 883586198, 'comment_body': 'Hi @ferrine running `test_logq_globals` after replacing `NormalizingFlowGroup` with `MeanFieldGroup` gives the bellow error\r\n```\r\npymc.variational.opvi.GroupError: No approximation is specified for the rest variables\r\n```\r\ncan I removing this particular test case or there any way to fix this', 'comment_created': datetime.datetime(2022, 5, 27, 12, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 883589308, 'comment_body': 'Same for `test_pickle_approx`', 'comment_created': datetime.datetime(2022, 5, 27, 12, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 883600566, 'comment_body': 'I tried to replace with `MeanFieldGroup` but `test_init_groups` gave it an error `pymc.variational.opvi.GroupError: No approximation is specified for the rest variables`. Is there any other way to fix this ?', 'comment_created': datetime.datetime(2022, 5, 27, 13, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 883898030, 'comment_body': 'There is a use of `NotImplementedInference`  bellow should we also remove that ?\r\nhttps://github.com/pymc-devs/pymc/blob/4d2f3a8d5f99fc773bc0a1aad6d51e4f3f047698/pymc/variational/approximations.py#L274-L277', 'comment_created': datetime.datetime(2022, 5, 27, 18, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 883964909, 'comment_body': 'but it raise only `NotImplementedError` is that right ?', 'comment_created': datetime.datetime(2022, 5, 27, 20, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 883971016, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 5, 27, 20, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 884108230, 'comment_body': 'should we remove `deterministic` parameter ?', 'comment_created': datetime.datetime(2022, 5, 28, 9, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 884108359, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 5, 28, 9, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 886663983, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2022, 6, 1, 10, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'twiecki', 'type': 'User'}, {'comment_id': 888003191, 'comment_body': 'I\'ve checked that error. This is due to dictionary that uses duplicate keys. Here is the snippet to replace existing test with a refactored one\r\n```python\r\n@pytest.mark.parametrize(\r\n    [""raises"", ""grouping""],\r\n    [\r\n        (not_raises(), [(MeanFieldGroup, None)]),\r\n        (not_raises(), [(FullRankGroup, None), (MeanFieldGroup, [""one""])]),\r\n        (\r\n            pytest.raises(TypeError, match=""No approximation is specified""),\r\n            [(MeanFieldGroup, [""one"", ""two""])],\r\n        ),\r\n        (not_raises(), [(MeanFieldGroup, [""one""]), (FullRankGroup, [""two"", ""three""])]),\r\n        (\r\n            not_raises(),\r\n            [(MeanFieldGroup, [""one""]), (FullRankGroup, [""two""]), (MeanFieldGroup, [""three""])]\r\n        ),\r\n        (pytest.raises(TypeError, match=""Found duplicates""),\r\n            [\r\n                (MeanFieldGroup, [""one""]),\r\n                (FullRankGroup, [""two"", ""one""]),\r\n                (MeanFieldGroup, [""three""]),\r\n            ],\r\n        ),\r\n    ],\r\n)\r\ndef test_init_groups(three_var_model, raises, grouping):\r\n    with raises, three_var_model:\r\n        approxes, groups = zip(*grouping)\r\n        # the rest of the test is unchanged\r\n```', 'comment_created': datetime.datetime(2022, 6, 2, 14, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}, {'comment_id': 888060383, 'comment_body': 'this deterministic parameter makes sense, I guess this was an aesara issue', 'comment_created': datetime.datetime(2022, 6, 2, 15, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ferrine', 'type': 'User'}]","[{'commit_sha': '55af8f65c3c2fc9f2fc45755edd33d646f9da3cc', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66c1786415a755e2caa45105b0984e822066fbb4', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c693254cddfbfb2553a42951dad2c637bd43bfb8', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f25543e62386c764f570e41fec35f1d808e4212e', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c8d265e88c18e92f48fba9a3467b8443db08fd4', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddd68f97754eaceeb0dd77d5bf23da4b31fc0a16', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa2fbb3e7d2e05140a45781865e45c660aef5f28', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b202b7283bef3035ee85a5d81160f175b750722', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cfc4e08e44aabf5e1762a623437448d103565bc', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0fe0bed9e7d4b95a530ca05dbe6dccd21013787', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf93738aaa0ab74b797ba24d660f41ebfa9808f5', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40a2741686de482d1a8cf6db475f5114c04da1ad', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a3ab112dc04d8e9d50e5713329efaf0e42c62f4', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '188d555a6ee07845e938de8009fc0b07000d08f7', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0ef97c0e764dbc38a1563fc1712e87fc8023992', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
984707219,Generalize `tril` and `triu` beyond 2D arrays,This PR enables batch data (>2D data) support for `aesara.tensor.tril` and `aesara.tensor.triu`.,True,1026,https://api.github.com/repos/aesara-devs/aesara/pulls/1026,https://github.com/aesara-devs/aesara/pull/1026,closed,83,8,2,1,2,6,2,0,"[{'name': 'enhancement'}, {'name': 'tensor algebra'}]",2022-07-01 08:55:38+00:00,2022-07-07 13:36:43+00:00,535265.0,"6 days, 4:41:05","[{'comment_id': 912178958, 'comment_body': 'This is a bit costly as every check will compile a new function for a single evaluation. You can reuse the same function to test different values of `k`', 'comment_created': datetime.datetime(2022, 7, 1, 18, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 912180081, 'comment_body': 'I would not add defaults, they make the tests less readable if arguments are not specified explicitly. \n\nIn this case they are not even used, so you could actually have bugs/invalid values in the defaults and not know about it.', 'comment_created': datetime.datetime(2022, 7, 1, 18, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 912312957, 'comment_body': 'Can we use a `for` loop to check different value of `k` ? like:\r\n```python\r\ndef check_u_batch(m):\r\n    m_symb = tensor3(dtype=m.dtype)\r\n    k_symb = iscalar()\r\n    f = function([m_symb, k_symb], triu(m_symb, k_symb))\r\n    for k in [-1,0,1]:\r\n        result = f(m, k)\r\n        assert np.allclose(result, np.triu(m, k))\r\n        assert result.dtype == np.dtype(dtype)\r\n```', 'comment_created': datetime.datetime(2022, 7, 2, 3, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 912313510, 'comment_body': ""In order to pass `tensor3` and `tensor4` to the same function, I introduced this default value.\r\nIs it okay if we only check for `tensor3` and not `tensor4`? If so, I'll remove the default and make this function only check for `tensor3`."", 'comment_created': datetime.datetime(2022, 7, 2, 3, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 913408466, 'comment_body': 'sure ', 'comment_created': datetime.datetime(2022, 7, 5, 5, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 913408740, 'comment_body': 'yes that should be fine', 'comment_created': datetime.datetime(2022, 7, 5, 5, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': '241868bdd5eadaa5e539bf43a6cbe45071aa5905', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
984707219,Generalize `tril` and `triu` beyond 2D arrays,This PR enables batch data (>2D data) support for `aesara.tensor.tril` and `aesara.tensor.triu`.,True,1026,https://api.github.com/repos/aesara-devs/aesara/pulls/1026,https://github.com/aesara-devs/aesara/pull/1026,closed,83,8,2,1,2,6,2,0,"[{'name': 'enhancement'}, {'name': 'tensor algebra'}]",2022-07-01 08:55:38+00:00,2022-07-07 13:36:43+00:00,535265.0,"6 days, 4:41:05","[{'comment_id': 912178958, 'comment_body': 'This is a bit costly as every check will compile a new function for a single evaluation. You can reuse the same function to test different values of `k`', 'comment_created': datetime.datetime(2022, 7, 1, 18, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 912180081, 'comment_body': 'I would not add defaults, they make the tests less readable if arguments are not specified explicitly. \n\nIn this case they are not even used, so you could actually have bugs/invalid values in the defaults and not know about it.', 'comment_created': datetime.datetime(2022, 7, 1, 18, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 912312957, 'comment_body': 'Can we use a `for` loop to check different value of `k` ? like:\r\n```python\r\ndef check_u_batch(m):\r\n    m_symb = tensor3(dtype=m.dtype)\r\n    k_symb = iscalar()\r\n    f = function([m_symb, k_symb], triu(m_symb, k_symb))\r\n    for k in [-1,0,1]:\r\n        result = f(m, k)\r\n        assert np.allclose(result, np.triu(m, k))\r\n        assert result.dtype == np.dtype(dtype)\r\n```', 'comment_created': datetime.datetime(2022, 7, 2, 3, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 912313510, 'comment_body': ""In order to pass `tensor3` and `tensor4` to the same function, I introduced this default value.\r\nIs it okay if we only check for `tensor3` and not `tensor4`? If so, I'll remove the default and make this function only check for `tensor3`."", 'comment_created': datetime.datetime(2022, 7, 2, 3, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 913408466, 'comment_body': 'sure ', 'comment_created': datetime.datetime(2022, 7, 5, 5, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 913408740, 'comment_body': 'yes that should be fine', 'comment_created': datetime.datetime(2022, 7, 5, 5, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': '241868bdd5eadaa5e539bf43a6cbe45071aa5905', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
999633218,Add `Op` to solve batched linear matrix equation,"Addressing #791

This PR adds Op to `aesara.tensor.nlinalg` that wraps `numpy.linalg.solve` for solving linear matrix equations, or system of linear scalar equations, and computing the reverse-mode gradients.

Now, since there is already a `Solve` in `aesara.tensor.slinalg`, why do we need this Numpy `Solve` again?

Scipy doesn't appear to have anything that can be used to solve a linear equation with a batch of triangular matrices, but we can deal with the batched data by using the `np.vectorized` version of the Scipy `Solve`. Numpy, on the other hand, has [solve](https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html), which can **handle batches of matrices** but is expected to be slower.

So, to decide which one to look at, I create a vectorized version of `aesara.tensor.slinalg.cholesky` and compare its performance to another [cholesky](https://github.com/aesara-devs/aesara/compare/main...purna135:aesara:numpy_cholesky) method that deals with batched data using `numpy.linalg.solve`.

The detailed investigation can be found at the link below.
1. [Cholesky - Numpy vs Scipy for Large Array](https://github.com/purna135/GSoC-Learnings/blob/main/Cholesky%20-%20Numpy%20vs%20Scipy%20for%20Large%20Array.ipynb)
2. [Cholesky - Numpy vs Scipy for Small Array](https://github.com/purna135/GSoC-Learnings/blob/main/Cholesky%20-%20Numpy%20vs%20Scipy%20for%20Small%20Array.ipynb)

In short, I obtained the following result:
1. **Runtime of Numpy vs Scipy for Large Array**
<img src=""https://user-images.githubusercontent.com/42216008/182048963-0fae1b6b-2fc5-4d05-995b-ec3acb7e49c5.png"" alt=""Runtime of Numpy vs Scipy for Large Array"" width=""600""/>

2. **Runtime of Numpy vs Scipy for Small Array**
<img src=""https://user-images.githubusercontent.com/42216008/182048981-86b7cc16-42e5-4be3-a526-089fbdadca46.png"" alt=""Runtime of Numpy vs Scipy for Large Array"" width=""600""/>

As we can see, `cholesky` which uses numpy `solve` is more performant for reasonably sized arrays and has simpler code, so we decided to use `numpy.linalg.solve` instead of Scipy `solve`.",False,1060,https://api.github.com/repos/aesara-devs/aesara/pulls/1060,https://github.com/aesara-devs/aesara/pull/1060,open,269,2,2,2,17,0,0,0,[],2022-07-18 16:46:40+00:00,,0.0,,[],"[{'commit_sha': 'e95fa1217a9e63569a86a660f60c455b0d3f3f27', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e45bebfb7181625e1c116fdfc9f5367c1112b8', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
999633218,Add `Op` to solve batched linear matrix equation,"Addressing #791

This PR adds Op to `aesara.tensor.nlinalg` that wraps `numpy.linalg.solve` for solving linear matrix equations, or system of linear scalar equations, and computing the reverse-mode gradients.

Now, since there is already a `Solve` in `aesara.tensor.slinalg`, why do we need this Numpy `Solve` again?

Scipy doesn't appear to have anything that can be used to solve a linear equation with a batch of triangular matrices, but we can deal with the batched data by using the `np.vectorized` version of the Scipy `Solve`. Numpy, on the other hand, has [solve](https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html), which can **handle batches of matrices** but is expected to be slower.

So, to decide which one to look at, I create a vectorized version of `aesara.tensor.slinalg.cholesky` and compare its performance to another [cholesky](https://github.com/aesara-devs/aesara/compare/main...purna135:aesara:numpy_cholesky) method that deals with batched data using `numpy.linalg.solve`.

The detailed investigation can be found at the link below.
1. [Cholesky - Numpy vs Scipy for Large Array](https://github.com/purna135/GSoC-Learnings/blob/main/Cholesky%20-%20Numpy%20vs%20Scipy%20for%20Large%20Array.ipynb)
2. [Cholesky - Numpy vs Scipy for Small Array](https://github.com/purna135/GSoC-Learnings/blob/main/Cholesky%20-%20Numpy%20vs%20Scipy%20for%20Small%20Array.ipynb)

In short, I obtained the following result:
1. **Runtime of Numpy vs Scipy for Large Array**
<img src=""https://user-images.githubusercontent.com/42216008/182048963-0fae1b6b-2fc5-4d05-995b-ec3acb7e49c5.png"" alt=""Runtime of Numpy vs Scipy for Large Array"" width=""600""/>

2. **Runtime of Numpy vs Scipy for Small Array**
<img src=""https://user-images.githubusercontent.com/42216008/182048981-86b7cc16-42e5-4be3-a526-089fbdadca46.png"" alt=""Runtime of Numpy vs Scipy for Large Array"" width=""600""/>

As we can see, `cholesky` which uses numpy `solve` is more performant for reasonably sized arrays and has simpler code, so we decided to use `numpy.linalg.solve` instead of Scipy `solve`.",False,1060,https://api.github.com/repos/aesara-devs/aesara/pulls/1060,https://github.com/aesara-devs/aesara/pull/1060,open,269,2,2,2,17,0,0,0,[],2022-07-18 16:46:40+00:00,,0.0,,[],"[{'commit_sha': 'e95fa1217a9e63569a86a660f60c455b0d3f3f27', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e45bebfb7181625e1c116fdfc9f5367c1112b8', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
824139613,Add `Blockwise` `Op`,"This PR implements https://github.com/aesara-devs/aesara/issues/695.

It's currently just an outline.",False,757,https://api.github.com/repos/aesara-devs/aesara/pulls/757,https://github.com/aesara-devs/aesara/pull/757,closed,540,67,4,5,1,2,3,0,"[{'name': 'enhancement'}, {'name': 'important'}, {'name': 'Op implementation'}]",2022-01-17 03:57:09+00:00,2022-09-26 19:57:01+00:00,21830392.0,"252 days, 15:59:52","[{'comment_id': 957447657, 'comment_body': 'Hi @brandonwillard \r\nCan you explain what transform function is and how it is used in computing L_Op?', 'comment_created': datetime.datetime(2022, 8, 29, 14, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 957783168, 'comment_body': 'Just like its `Elemwise` counterpart, `transform` is supposed to use a ""template"" gradient graph for each input to construct broadcasted gradient graphs in which all the relevant `Op`s are `Elemwise`/`Blockwise` `Op`s applied to the original inputs.\r\n\r\nLet\'s take a look at what\'s happening in `Blockwise.L_op` in first `test_Blockwise_grad` test.\r\n\r\nFirst, the graph for which we want the L-op/gradient:\r\n```python\r\naesara.dprint(outputs)\r\n# Blockwise{op=<tests.tensor.test_blockwise.DotBW object at 0x7f5e8236fd90>, signature=(((\'m\', \'n\'), (\'n\', \'p\')), ((\'m\', \'p\'),))} [id A] <TensorType(float64, (None, None, None))>\r\n#  |input 0 [id B] <TensorType(float64, (None, None, None))>\r\n#  |input 1 [id C] <TensorType(float64, (None, None, None))>\r\n```\r\nIt\'s a `Blockwise` dot product node with two 3D inputs named `input 0` and `input 1`.\r\n\r\nA ""template"" graph of the gradient is produced for each input and stored in `core_inp_grads`.  Each element of `core_inp_grads` corresponds to the generic form of a single-block\'s gradient wrt. each input.\r\n```python\r\naesara.dprint(core_inp_grads, print_type=True)\r\n# dot [id A]\r\n#  |<TensorType(float64, (None, None))> [id B]\r\n#  |InplaceDimShuffle{1,0} [id C]\r\n#    |<TensorType(float64, (None, None))> [id D]\r\n# dot [id E]\r\n#  |InplaceDimShuffle{1,0} [id F]\r\n#  | |<TensorType(float64, (None, None))> [id G]\r\n#  |<TensorType(float64, (None, None))> [id B]\r\n```\r\nWe can see that the gradient of a `dot` in a single block is just another `dot`, and that the original inputs aren\'t present; instead some stand-in variables are used and they\'re 2D (i.e. `TensorType`s with `(None, None)` static shapes).  \r\nIn other words, we\'ve used the core dimensions specified by the `Blockwise` and its `Op` to remove the broadcasted dimensions (i.e. that determine each block) and produce the generic form of a single ""block""\'s L-op from an existing `Op.[grad|L_op]` implementation.\r\n\r\nNow, we can\'t simply replace those stand-in inputs with `input 0` and/or `input 1`, because the `dot`s in the gradient graphs don\'t work block-wise and, as a result, cannot take the original inputs as inputs.  Also, the `InplaceDimShuffle` applied to one of the inputs in each graph wouldn\'t work with an input containing an extra third dimension.\r\n\r\nThe idea is that we need to convert the templates\' `dot`s into `Blockwise(dot)`s and do something about the `InplaceDimShuffle`s.  My guess is that the first input\'s gradient graph would end up looking like the following after applying `transform`:\r\n```python\r\n# Blockwise{op=<tests.tensor.test_blockwise.DotBW object at 0x7f5e8236fd90>, signature=(((\'m\', \'n\'), (\'n\', \'p\')), ((\'m\', \'p\'),))} [id A]\r\n#  |input 0 [id B]\r\n#  |InplaceDimShuffle{1,0,2} [id C]\r\n#    |input 1 [id D]\r\n```\r\nThe `DimShuffle`ed dimensions will probably require a little bit of calculation involving `Blockwise.signature` (i.e. to transpose the correct, core dimensions), but most other `Op`s should be `Blockwise` amenable&mdash;at least after we formalize and attach the relevant signature information to our `Op`s.  `DimShuffle` is perhaps a special case in which we don\'t want to create a `Blockwise` `Op`, mostly because there\'s no point in literally applying a `DimShuffle` block-wise when a new, equivalent `DimShuffle` can be produced that accomplishes the same thing, but more succinctly.\r\n\r\nAny `Op`s that can\'t be converted to a `Blockwise` form (e.g. because they don\'t provide signature information in some way or another) should result in a no-gradient error.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'brandonwillard', 'type': 'User'}]","[{'commit_sha': 'b8f868b1b1d1b80b6ffff9bb693b0e3c6022baa8', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e79383c6841181fdeb01e870e5e5ce80aa79c959', 'committer_username': 'brandonwillard', 'committer_name': 'Brandon T. Willard', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 10, 14, 19, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf9affc85788c9cb06654a8f0135000bb867f628', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82a103b5d76262dc2643fed890a220f9fdc3e756', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '037f90fc42e65f6f38e303701a66221f34ee7f07', 'committer_username': 'kc611', 'committer_name': 'Kaustubh', 'committer_email': 'ckaustubhm06@gmail.com', 'commit_date': datetime.datetime(2019, 9, 15, 13, 33, 26, tzinfo=datetime.timezone.utc)}]",Brandon T. Willard,971601,,User,,154,,92,237
1021919781,Allow for batched `alpha` in `StickBreakingWeights`,"**What is this PR about?**
Addressing #5383
This enables `StickBreakingWeight`'s `alpha` to accept batched data (>2D), make the `infer_shape` work with batched data, and fix the `rng_fn` by broadcasting alpha to K.

**Checklist**
+ [x] Explain important implementation details 👆
+ [x] Make sure that [the pre-commit linting/style checks pass](https://docs.pymc.io/en/latest/contributing/python_style.html).
+ [x] Link relevant issues (preferably in [nice commit messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html))
+ [x] Are the changes covered by tests and docstrings?
+ [x] Fill out the short summary sections 👇

## Major / Breaking Changes
* ...

## Bugfixes / New features
- `StickBreakingWeights` now supports batched `alpha` parameters

## Docs / Maintenance
* ...",True,6042,https://api.github.com/repos/pymc-devs/pymc/pulls/6042,https://github.com/pymc-devs/pymc/pull/6042,closed,77,16,4,7,10,38,0,0,[],2022-08-09 19:55:12+00:00,2022-08-31 03:10:05+00:00,1840493.0,"21 days, 7:14:53","[{'comment_id': 941749572, 'comment_body': 'I need some assistance in writing a better test for testing multiple alphas. Can we use `@pytest.mark.parametrize` here?', 'comment_created': datetime.datetime(2022, 8, 9, 19, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 941753939, 'comment_body': 'Is there any wrong with using `@pytest.mark.parametrize` for `check_basic_properties` method?\r\nI tried the below code but got the error: `check_basic_properties() missing 2 required positional arguments: \'alpha\' and \'K\'`\r\n\r\n```python\r\n@pytest.mark.parametrize(\r\n  ""alpha, K"",\r\n  [\r\n      (np.array(1, dtype=""float64""), 3),\r\n      (np.array([1, 2, 3], dtype=""float64""), 3),\r\n      (np.arange(1, 10, dtype=""float64"").reshape(3, 3), 2),\r\n      (np.arange(1, 25, dtype=""float64"").reshape(2, 3, 4), 2),\r\n  ],\r\n)\r\ndef check_basic_properties(self, alpha, K):\r\n  default_rng = aesara.shared(np.random.default_rng(1234))\r\n  draws = pm.StickBreakingWeights.dist(\r\n      alpha=alpha,\r\n      K=K,\r\n      size=(2, 3, 5),\r\n      rng=default_rng,\r\n  ).eval()\r\n```', 'comment_created': datetime.datetime(2022, 8, 9, 20, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 941829459, 'comment_body': 'This is incorrect. Shape is always `size + (K + 1,), if size is provided. If size is not provided, the shape of alpha determines it. \n\nHowever a simpler solution is to remove this method and implement only `supp_shape_from_params` which should always return `(k + 1)` Aesara will then automatically know how the dimensions change with batched alpha or size info', 'comment_created': datetime.datetime(2022, 8, 9, 21, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 941831407, 'comment_body': 'Again, size should not simply be prepended to the shape of alpha. Size (when specified) must include (but can go beyond) any batched dimensions implied by alpha. This guide might make this point more clear: https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/dimensionality.html', 'comment_created': datetime.datetime(2022, 8, 9, 21, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 941831774, 'comment_body': 'tensor_like is the correct docstring', 'comment_created': datetime.datetime(2022, 8, 9, 21, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 942096826, 'comment_body': ""These tests don't have a right shape for value. More importantly I don't think the hard coded logp values is very maintainable. Since this PR is all about allowing for batching of alpha I suggest you test it with a np.vectorize function of the base logp, and make it a separate test. You can find some examples in the tests for batched Dirichlet and Multinomial."", 'comment_created': datetime.datetime(2022, 8, 10, 7, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 945602704, 'comment_body': 'This is still a bit incorrect, alpha is not allowed to broadcast size. Simply put `size = size if size is not None else alpha.shape`', 'comment_created': datetime.datetime(2022, 8, 15, 10, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 945624822, 'comment_body': 'Ok, Thank you ', 'comment_created': datetime.datetime(2022, 8, 15, 11, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 945805207, 'comment_body': '> alpha is not allowed to broadcast size\r\n\r\nHi @ricardoV94 \r\n\r\nConsidering the below snippet and assuming MvNormal works with batched covariance matrix, what is shape of resulting draws from MvNormal:\r\n\r\n```python\r\nmu = np.array([1, 2, 3])\r\ncov = np.eye(3)\r\nbatched_cov = np.full((10, 3, 3), cov)\r\npm.MvNormal.dist(mu=mu, cov=cov, size=(5, 1)).eval().shape\r\n```\r\n\r\nWill it be (5, 1, 10, 3) or (5, 10, 3)?\r\n\r\nI think the shape should be (5, 10, 3) as batches from alpha can broadcast with size.', 'comment_created': datetime.datetime(2022, 8, 15, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 945824926, 'comment_body': ""Deleted by mistake. The example is invalid, it should fail. Size can be either `None`, or some tuple that ends in `(10,)`. It can't contradict the batched shape already implied by the covariance. \n\nSimilar to `np.full`, where the shape can't broadcast to match the value, only the other way around. `np.full((5, 1), np.zeros((10,)))` also fails."", 'comment_created': datetime.datetime(2022, 8, 15, 14, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 945850374, 'comment_body': ""Got it. Thanks Ricardo. \r\n\r\nI think this behaviour (that size can't contradict the batched shape already implied) is a lot easier to work with, compared to PyMC v3."", 'comment_created': datetime.datetime(2022, 8, 15, 15, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 946918987, 'comment_body': ""Don't you need to expand alpha regardless of whether size is provided or not?"", 'comment_created': datetime.datetime(2022, 8, 16, 15, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946919634, 'comment_body': 'How can I determine the right shape for value? ', 'comment_created': datetime.datetime(2022, 8, 16, 15, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946923904, 'comment_body': 'What about a couple more?\n```suggestion\n    sizes_to_check = [None, (3,), (5, 3)]\n```\n', 'comment_created': datetime.datetime(2022, 8, 16, 15, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946928398, 'comment_body': 'Could you please provide a reference for a better way to calculate the logp here?', 'comment_created': datetime.datetime(2022, 8, 16, 15, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946933574, 'comment_body': 'You can replace this with:\n\n```python\n_value = at.vector()\n_alpha = at.scalar()\n_k = at.iscalar()\n_logp = logp(StickBreakingWeights.dist(_alpha, _k), _value)\n_stickbreakingweights_logpdf = compile_pymc([_value, _alpha, _k], _logp)\n```\n', 'comment_created': datetime.datetime(2022, 8, 16, 15, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946937870, 'comment_body': 'hmm got it thank you', 'comment_created': datetime.datetime(2022, 8, 16, 15, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946938421, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 16, 15, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946944530, 'comment_body': 'You can take a random draw from the distribution. Value should have the same shape as the distribution, that is `(*alpha.shape, k+1)` or `(*size, k+1)`\n\nSince you are already checking that the distribution has the right draw shapes, you can simply create a test value for the logp by taking a random draw from the distribution, instead of creating one manually. Thay why is enough to parametrize your logp tests by providing different alphas and sizes.', 'comment_created': datetime.datetime(2022, 8, 16, 15, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946954331, 'comment_body': 'Is this the case when alpha.shape == size[-1]? yes in that case we have to expand alpha.', 'comment_created': datetime.datetime(2022, 8, 16, 15, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946963040, 'comment_body': 'I think you need to expand always because you are feeding it into beta with (k+1) draws to the right and you want alpha to broadcast to those.', 'comment_created': datetime.datetime(2022, 8, 16, 15, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946994343, 'comment_body': 'yes got it', 'comment_created': datetime.datetime(2022, 8, 16, 16, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 947061421, 'comment_body': 'You should define this logpdf function outside of the test_function, no point in compiling it everytime.\n\nThe best is probably inside a module-level pytest fixture so that it does not slowdown unrelated tests.', 'comment_created': datetime.datetime(2022, 8, 16, 17, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947062641, 'comment_body': 'value still has a wrong shape. Did you see my other comment about how you could fix it?', 'comment_created': datetime.datetime(2022, 8, 16, 17, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947077676, 'comment_body': '@ricardoV94 Do we require `size` to be a tuple? If not, would we need `size = pm.distributions.shape_utils.to_tuple(size)`?', 'comment_created': datetime.datetime(2022, 8, 16, 17, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'larryshamalama', 'type': 'User'}, {'comment_id': 947078292, 'comment_body': 'In cases of `alpha = 3`, we probably need to wrap `alpha = np.array(array)`.', 'comment_created': datetime.datetime(2022, 8, 16, 17, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'larryshamalama', 'type': 'User'}, {'comment_id': 947106344, 'comment_body': 'Yes I got the comment, will fix this in the next commit', 'comment_created': datetime.datetime(2022, 8, 16, 18, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 947108217, 'comment_body': '> The best is probably inside a module-level pytest fixture so that it does not slowdown unrelated tests.\r\n\r\ndo you mean a function inside pymc\\tests\\test_distributions.py ?', 'comment_created': datetime.datetime(2022, 8, 16, 18, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 947187992, 'comment_body': '> > The best is probably inside a module-level pytest fixture so that it does not slowdown unrelated tests.\n> \n> do you mean a function inside pymc\\tests\\test_distributions.py ?\n\nYes', 'comment_created': datetime.datetime(2022, 8, 16, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947188875, 'comment_body': '`tuple(size)` like before should be fine', 'comment_created': datetime.datetime(2022, 8, 16, 19, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947190159, 'comment_body': 'alpha will be converted to an array by Aesara automatically, so that should be safe', 'comment_created': datetime.datetime(2022, 8, 16, 19, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 948921370, 'comment_body': 'Is it acceptable to combine `test_stickbreakingweights_logp` and `test_stickbreakingweights_vectorized` in a single test?', 'comment_created': datetime.datetime(2022, 8, 18, 9, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 948924660, 'comment_body': 'I now use distribution to generate value.', 'comment_created': datetime.datetime(2022, 8, 18, 9, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 954477495, 'comment_body': 'If `test_stickbreakingweights_vectorized` fails, it would point to shapes not being handled properly to form batches. So, lets keep them separate to have better isolation of tests. ', 'comment_created': datetime.datetime(2022, 8, 25, 3, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 954738378, 'comment_body': 'Now I separate the test for batched alpha', 'comment_created': datetime.datetime(2022, 8, 25, 9, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 954756880, 'comment_body': 'I am not sure if this is the one that should have the `pytest.fixture`, it seems like it should be a function that returns the vectorized `stickbreakingweights_logpdf`. The idea being that we only compile the Aesara function if the test that requires it, is run. Maybe it works like this already, if `np.vectorize` is lazy?\r\n\r\nOtherwise my gut feeling is that it should be something like:\r\n\r\n```suggestion\r\n@pytest.fixture(scope=""module"")\r\ndef stickbreakingweights_logpdf():\r\n   \r\n    _value = at.vector()\r\n    _alpha = at.scalar()\r\n    _k = at.iscalar()\r\n    _logp = logp(StickBreakingWeights.dist(_alpha, _k), _value)\r\n    core_fn = compile_pymc([_value, _alpha, _k], _logp)\r\n    \r\n    return np.vectorize(_stickbreakingweights_logpdf, signature=""(n),(),()->()"")\r\n```\r\n\r\nAlso it seems like you had too many parameters in the signature of np.vectorize? I removed one of the parenthesis.', 'comment_created': datetime.datetime(2022, 8, 25, 9, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 958939324, 'comment_body': 'Is `stickbreakingweights_logpdf` passed as an argument here via the fixture sharing decorator of the function?', 'comment_created': datetime.datetime(2022, 8, 30, 21, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'larryshamalama', 'type': 'User'}, {'comment_id': 959120272, 'comment_body': ""Yes, that's how fixtures work"", 'comment_created': datetime.datetime(2022, 8, 31, 3, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': '7fde39a210ec6b319c979e96d75900034a244ff8', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11cd987275be04d3e4e6c7dff5e0e9fb7dfd58cf', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdd31a41d92e20419c3486a83624c008c8c9811', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd933c070352deb3b1a3261e59cf07de9a511f93c', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a50281df7bd8fd5d9c2ea444f6bda07d34d758f', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe7c2b2d708fb4b2ec006bd0b2533175f42e81d5', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5df64899145cbb982db07ab77c5f14e91765b6', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
1021919781,Allow for batched `alpha` in `StickBreakingWeights`,"**What is this PR about?**
Addressing #5383
This enables `StickBreakingWeight`'s `alpha` to accept batched data (>2D), make the `infer_shape` work with batched data, and fix the `rng_fn` by broadcasting alpha to K.

**Checklist**
+ [x] Explain important implementation details 👆
+ [x] Make sure that [the pre-commit linting/style checks pass](https://docs.pymc.io/en/latest/contributing/python_style.html).
+ [x] Link relevant issues (preferably in [nice commit messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html))
+ [x] Are the changes covered by tests and docstrings?
+ [x] Fill out the short summary sections 👇

## Major / Breaking Changes
* ...

## Bugfixes / New features
- `StickBreakingWeights` now supports batched `alpha` parameters

## Docs / Maintenance
* ...",True,6042,https://api.github.com/repos/pymc-devs/pymc/pulls/6042,https://github.com/pymc-devs/pymc/pull/6042,closed,77,16,4,7,10,38,0,0,[],2022-08-09 19:55:12+00:00,2022-08-31 03:10:05+00:00,1840493.0,"21 days, 7:14:53","[{'comment_id': 941749572, 'comment_body': 'I need some assistance in writing a better test for testing multiple alphas. Can we use `@pytest.mark.parametrize` here?', 'comment_created': datetime.datetime(2022, 8, 9, 19, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 941753939, 'comment_body': 'Is there any wrong with using `@pytest.mark.parametrize` for `check_basic_properties` method?\r\nI tried the below code but got the error: `check_basic_properties() missing 2 required positional arguments: \'alpha\' and \'K\'`\r\n\r\n```python\r\n@pytest.mark.parametrize(\r\n  ""alpha, K"",\r\n  [\r\n      (np.array(1, dtype=""float64""), 3),\r\n      (np.array([1, 2, 3], dtype=""float64""), 3),\r\n      (np.arange(1, 10, dtype=""float64"").reshape(3, 3), 2),\r\n      (np.arange(1, 25, dtype=""float64"").reshape(2, 3, 4), 2),\r\n  ],\r\n)\r\ndef check_basic_properties(self, alpha, K):\r\n  default_rng = aesara.shared(np.random.default_rng(1234))\r\n  draws = pm.StickBreakingWeights.dist(\r\n      alpha=alpha,\r\n      K=K,\r\n      size=(2, 3, 5),\r\n      rng=default_rng,\r\n  ).eval()\r\n```', 'comment_created': datetime.datetime(2022, 8, 9, 20, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 941829459, 'comment_body': 'This is incorrect. Shape is always `size + (K + 1,), if size is provided. If size is not provided, the shape of alpha determines it. \n\nHowever a simpler solution is to remove this method and implement only `supp_shape_from_params` which should always return `(k + 1)` Aesara will then automatically know how the dimensions change with batched alpha or size info', 'comment_created': datetime.datetime(2022, 8, 9, 21, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 941831407, 'comment_body': 'Again, size should not simply be prepended to the shape of alpha. Size (when specified) must include (but can go beyond) any batched dimensions implied by alpha. This guide might make this point more clear: https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/dimensionality.html', 'comment_created': datetime.datetime(2022, 8, 9, 21, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 941831774, 'comment_body': 'tensor_like is the correct docstring', 'comment_created': datetime.datetime(2022, 8, 9, 21, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 942096826, 'comment_body': ""These tests don't have a right shape for value. More importantly I don't think the hard coded logp values is very maintainable. Since this PR is all about allowing for batching of alpha I suggest you test it with a np.vectorize function of the base logp, and make it a separate test. You can find some examples in the tests for batched Dirichlet and Multinomial."", 'comment_created': datetime.datetime(2022, 8, 10, 7, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 945602704, 'comment_body': 'This is still a bit incorrect, alpha is not allowed to broadcast size. Simply put `size = size if size is not None else alpha.shape`', 'comment_created': datetime.datetime(2022, 8, 15, 10, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 945624822, 'comment_body': 'Ok, Thank you ', 'comment_created': datetime.datetime(2022, 8, 15, 11, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 945805207, 'comment_body': '> alpha is not allowed to broadcast size\r\n\r\nHi @ricardoV94 \r\n\r\nConsidering the below snippet and assuming MvNormal works with batched covariance matrix, what is shape of resulting draws from MvNormal:\r\n\r\n```python\r\nmu = np.array([1, 2, 3])\r\ncov = np.eye(3)\r\nbatched_cov = np.full((10, 3, 3), cov)\r\npm.MvNormal.dist(mu=mu, cov=cov, size=(5, 1)).eval().shape\r\n```\r\n\r\nWill it be (5, 1, 10, 3) or (5, 10, 3)?\r\n\r\nI think the shape should be (5, 10, 3) as batches from alpha can broadcast with size.', 'comment_created': datetime.datetime(2022, 8, 15, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 945824926, 'comment_body': ""Deleted by mistake. The example is invalid, it should fail. Size can be either `None`, or some tuple that ends in `(10,)`. It can't contradict the batched shape already implied by the covariance. \n\nSimilar to `np.full`, where the shape can't broadcast to match the value, only the other way around. `np.full((5, 1), np.zeros((10,)))` also fails."", 'comment_created': datetime.datetime(2022, 8, 15, 14, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 945850374, 'comment_body': ""Got it. Thanks Ricardo. \r\n\r\nI think this behaviour (that size can't contradict the batched shape already implied) is a lot easier to work with, compared to PyMC v3."", 'comment_created': datetime.datetime(2022, 8, 15, 15, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 946918987, 'comment_body': ""Don't you need to expand alpha regardless of whether size is provided or not?"", 'comment_created': datetime.datetime(2022, 8, 16, 15, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946919634, 'comment_body': 'How can I determine the right shape for value? ', 'comment_created': datetime.datetime(2022, 8, 16, 15, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946923904, 'comment_body': 'What about a couple more?\n```suggestion\n    sizes_to_check = [None, (3,), (5, 3)]\n```\n', 'comment_created': datetime.datetime(2022, 8, 16, 15, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946928398, 'comment_body': 'Could you please provide a reference for a better way to calculate the logp here?', 'comment_created': datetime.datetime(2022, 8, 16, 15, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946933574, 'comment_body': 'You can replace this with:\n\n```python\n_value = at.vector()\n_alpha = at.scalar()\n_k = at.iscalar()\n_logp = logp(StickBreakingWeights.dist(_alpha, _k), _value)\n_stickbreakingweights_logpdf = compile_pymc([_value, _alpha, _k], _logp)\n```\n', 'comment_created': datetime.datetime(2022, 8, 16, 15, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946937870, 'comment_body': 'hmm got it thank you', 'comment_created': datetime.datetime(2022, 8, 16, 15, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946938421, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 16, 15, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946944530, 'comment_body': 'You can take a random draw from the distribution. Value should have the same shape as the distribution, that is `(*alpha.shape, k+1)` or `(*size, k+1)`\n\nSince you are already checking that the distribution has the right draw shapes, you can simply create a test value for the logp by taking a random draw from the distribution, instead of creating one manually. Thay why is enough to parametrize your logp tests by providing different alphas and sizes.', 'comment_created': datetime.datetime(2022, 8, 16, 15, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946954331, 'comment_body': 'Is this the case when alpha.shape == size[-1]? yes in that case we have to expand alpha.', 'comment_created': datetime.datetime(2022, 8, 16, 15, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946963040, 'comment_body': 'I think you need to expand always because you are feeding it into beta with (k+1) draws to the right and you want alpha to broadcast to those.', 'comment_created': datetime.datetime(2022, 8, 16, 15, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946994343, 'comment_body': 'yes got it', 'comment_created': datetime.datetime(2022, 8, 16, 16, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 947061421, 'comment_body': 'You should define this logpdf function outside of the test_function, no point in compiling it everytime.\n\nThe best is probably inside a module-level pytest fixture so that it does not slowdown unrelated tests.', 'comment_created': datetime.datetime(2022, 8, 16, 17, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947062641, 'comment_body': 'value still has a wrong shape. Did you see my other comment about how you could fix it?', 'comment_created': datetime.datetime(2022, 8, 16, 17, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947077676, 'comment_body': '@ricardoV94 Do we require `size` to be a tuple? If not, would we need `size = pm.distributions.shape_utils.to_tuple(size)`?', 'comment_created': datetime.datetime(2022, 8, 16, 17, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'larryshamalama', 'type': 'User'}, {'comment_id': 947078292, 'comment_body': 'In cases of `alpha = 3`, we probably need to wrap `alpha = np.array(array)`.', 'comment_created': datetime.datetime(2022, 8, 16, 17, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'larryshamalama', 'type': 'User'}, {'comment_id': 947106344, 'comment_body': 'Yes I got the comment, will fix this in the next commit', 'comment_created': datetime.datetime(2022, 8, 16, 18, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 947108217, 'comment_body': '> The best is probably inside a module-level pytest fixture so that it does not slowdown unrelated tests.\r\n\r\ndo you mean a function inside pymc\\tests\\test_distributions.py ?', 'comment_created': datetime.datetime(2022, 8, 16, 18, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 947187992, 'comment_body': '> > The best is probably inside a module-level pytest fixture so that it does not slowdown unrelated tests.\n> \n> do you mean a function inside pymc\\tests\\test_distributions.py ?\n\nYes', 'comment_created': datetime.datetime(2022, 8, 16, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947188875, 'comment_body': '`tuple(size)` like before should be fine', 'comment_created': datetime.datetime(2022, 8, 16, 19, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947190159, 'comment_body': 'alpha will be converted to an array by Aesara automatically, so that should be safe', 'comment_created': datetime.datetime(2022, 8, 16, 19, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 948921370, 'comment_body': 'Is it acceptable to combine `test_stickbreakingweights_logp` and `test_stickbreakingweights_vectorized` in a single test?', 'comment_created': datetime.datetime(2022, 8, 18, 9, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 948924660, 'comment_body': 'I now use distribution to generate value.', 'comment_created': datetime.datetime(2022, 8, 18, 9, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 954477495, 'comment_body': 'If `test_stickbreakingweights_vectorized` fails, it would point to shapes not being handled properly to form batches. So, lets keep them separate to have better isolation of tests. ', 'comment_created': datetime.datetime(2022, 8, 25, 3, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 954738378, 'comment_body': 'Now I separate the test for batched alpha', 'comment_created': datetime.datetime(2022, 8, 25, 9, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 954756880, 'comment_body': 'I am not sure if this is the one that should have the `pytest.fixture`, it seems like it should be a function that returns the vectorized `stickbreakingweights_logpdf`. The idea being that we only compile the Aesara function if the test that requires it, is run. Maybe it works like this already, if `np.vectorize` is lazy?\r\n\r\nOtherwise my gut feeling is that it should be something like:\r\n\r\n```suggestion\r\n@pytest.fixture(scope=""module"")\r\ndef stickbreakingweights_logpdf():\r\n   \r\n    _value = at.vector()\r\n    _alpha = at.scalar()\r\n    _k = at.iscalar()\r\n    _logp = logp(StickBreakingWeights.dist(_alpha, _k), _value)\r\n    core_fn = compile_pymc([_value, _alpha, _k], _logp)\r\n    \r\n    return np.vectorize(_stickbreakingweights_logpdf, signature=""(n),(),()->()"")\r\n```\r\n\r\nAlso it seems like you had too many parameters in the signature of np.vectorize? I removed one of the parenthesis.', 'comment_created': datetime.datetime(2022, 8, 25, 9, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 958939324, 'comment_body': 'Is `stickbreakingweights_logpdf` passed as an argument here via the fixture sharing decorator of the function?', 'comment_created': datetime.datetime(2022, 8, 30, 21, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'larryshamalama', 'type': 'User'}, {'comment_id': 959120272, 'comment_body': ""Yes, that's how fixtures work"", 'comment_created': datetime.datetime(2022, 8, 31, 3, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': '7fde39a210ec6b319c979e96d75900034a244ff8', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11cd987275be04d3e4e6c7dff5e0e9fb7dfd58cf', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdd31a41d92e20419c3486a83624c008c8c9811', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd933c070352deb3b1a3261e59cf07de9a511f93c', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a50281df7bd8fd5d9c2ea444f6bda07d34d758f', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe7c2b2d708fb4b2ec006bd0b2533175f42e81d5', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5df64899145cbb982db07ab77c5f14e91765b6', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
984707219,Generalize `tril` and `triu` beyond 2D arrays,This PR enables batch data (>2D data) support for `aesara.tensor.tril` and `aesara.tensor.triu`.,True,1026,https://api.github.com/repos/aesara-devs/aesara/pulls/1026,https://github.com/aesara-devs/aesara/pull/1026,closed,83,8,2,1,2,6,2,0,"[{'name': 'enhancement'}, {'name': 'tensor algebra'}]",2022-07-01 08:55:38+00:00,2022-07-07 13:36:43+00:00,535265.0,"6 days, 4:41:05","[{'comment_id': 912178958, 'comment_body': 'This is a bit costly as every check will compile a new function for a single evaluation. You can reuse the same function to test different values of `k`', 'comment_created': datetime.datetime(2022, 7, 1, 18, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 912180081, 'comment_body': 'I would not add defaults, they make the tests less readable if arguments are not specified explicitly. \n\nIn this case they are not even used, so you could actually have bugs/invalid values in the defaults and not know about it.', 'comment_created': datetime.datetime(2022, 7, 1, 18, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 912312957, 'comment_body': 'Can we use a `for` loop to check different value of `k` ? like:\r\n```python\r\ndef check_u_batch(m):\r\n    m_symb = tensor3(dtype=m.dtype)\r\n    k_symb = iscalar()\r\n    f = function([m_symb, k_symb], triu(m_symb, k_symb))\r\n    for k in [-1,0,1]:\r\n        result = f(m, k)\r\n        assert np.allclose(result, np.triu(m, k))\r\n        assert result.dtype == np.dtype(dtype)\r\n```', 'comment_created': datetime.datetime(2022, 7, 2, 3, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 912313510, 'comment_body': ""In order to pass `tensor3` and `tensor4` to the same function, I introduced this default value.\r\nIs it okay if we only check for `tensor3` and not `tensor4`? If so, I'll remove the default and make this function only check for `tensor3`."", 'comment_created': datetime.datetime(2022, 7, 2, 3, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 913408466, 'comment_body': 'sure ', 'comment_created': datetime.datetime(2022, 7, 5, 5, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 913408740, 'comment_body': 'yes that should be fine', 'comment_created': datetime.datetime(2022, 7, 5, 5, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': '241868bdd5eadaa5e539bf43a6cbe45071aa5905', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
999633218,Add `Op` to solve batched linear matrix equation,"Addressing #791

This PR adds Op to `aesara.tensor.nlinalg` that wraps `numpy.linalg.solve` for solving linear matrix equations, or system of linear scalar equations, and computing the reverse-mode gradients.

Now, since there is already a `Solve` in `aesara.tensor.slinalg`, why do we need this Numpy `Solve` again?

Scipy doesn't appear to have anything that can be used to solve a linear equation with a batch of triangular matrices, but we can deal with the batched data by using the `np.vectorized` version of the Scipy `Solve`. Numpy, on the other hand, has [solve](https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html), which can **handle batches of matrices** but is expected to be slower.

So, to decide which one to look at, I create a vectorized version of `aesara.tensor.slinalg.cholesky` and compare its performance to another [cholesky](https://github.com/aesara-devs/aesara/compare/main...purna135:aesara:numpy_cholesky) method that deals with batched data using `numpy.linalg.solve`.

The detailed investigation can be found at the link below.
1. [Cholesky - Numpy vs Scipy for Large Array](https://github.com/purna135/GSoC-Learnings/blob/main/Cholesky%20-%20Numpy%20vs%20Scipy%20for%20Large%20Array.ipynb)
2. [Cholesky - Numpy vs Scipy for Small Array](https://github.com/purna135/GSoC-Learnings/blob/main/Cholesky%20-%20Numpy%20vs%20Scipy%20for%20Small%20Array.ipynb)

In short, I obtained the following result:
1. **Runtime of Numpy vs Scipy for Large Array**
<img src=""https://user-images.githubusercontent.com/42216008/182048963-0fae1b6b-2fc5-4d05-995b-ec3acb7e49c5.png"" alt=""Runtime of Numpy vs Scipy for Large Array"" width=""600""/>

2. **Runtime of Numpy vs Scipy for Small Array**
<img src=""https://user-images.githubusercontent.com/42216008/182048981-86b7cc16-42e5-4be3-a526-089fbdadca46.png"" alt=""Runtime of Numpy vs Scipy for Large Array"" width=""600""/>

As we can see, `cholesky` which uses numpy `solve` is more performant for reasonably sized arrays and has simpler code, so we decided to use `numpy.linalg.solve` instead of Scipy `solve`.",False,1060,https://api.github.com/repos/aesara-devs/aesara/pulls/1060,https://github.com/aesara-devs/aesara/pull/1060,open,269,2,2,2,17,0,0,0,[],2022-07-18 16:46:40+00:00,,0.0,,[],"[{'commit_sha': 'e95fa1217a9e63569a86a660f60c455b0d3f3f27', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e45bebfb7181625e1c116fdfc9f5367c1112b8', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
978093014,Generalize `aesara.tensor.linalg.cholesky` beyond 2D arrays,"**Thank you for opening a PR!**

Here are a few important guidelines and requirements to check before your PR can be merged:
+ [ ] There is an informative high-level description of the changes.
+ [x] The description and/or commit message(s) references the relevant GitHub issue(s).
+ [ ] [`pre-commit`](https://pre-commit.com/#installation) is installed and [set up](https://pre-commit.com/#3-install-the-git-hook-scripts).
+ [x] The commit messages follow [these guidelines](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).
+ [x] The commits correspond to [_relevant logical changes_](https://wiki.openstack.org/wiki/GitCommitMessages#Structural_split_of_changes), and there are **no commits that fix changes introduced by other commits in the same branch/BR**.
+ [ ] There are tests covering the changes introduced in the PR.

Don't worry, your PR doesn't need to be in perfect order to submit it.  As development progresses and/or reviewers request changes, you can always [rewrite the history](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#_rewriting_history) of your feature/PR branches.

If your PR is an ongoing effort and you would like to involve us in the process, simply make it a [draft PR](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/about-pull-requests#draft-pull-requests).
",False,1012,https://api.github.com/repos/aesara-devs/aesara/pulls/1012,https://github.com/aesara-devs/aesara/pull/1012,open,58,120,2,1,4,5,3,0,"[{'name': 'enhancement'}, {'name': 'refactor'}, {'name': 'Op implementation'}]",2022-06-24 09:11:11+00:00,,0.0,,"[{'comment_id': 906633150, 'comment_body': 'Why is this test removed?', 'comment_created': datetime.datetime(2022, 6, 25, 4, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 906633261, 'comment_body': ""This needs some care, as it will simply break people's code."", 'comment_created': datetime.datetime(2022, 6, 25, 4, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 906634139, 'comment_body': 'We can do better than broadcastable. Have a look at https://aesara.readthedocs.io/en/latest/extending/type.html', 'comment_created': datetime.datetime(2022, 6, 25, 4, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 906756622, 'comment_body': 'Do we need `destructive` attribute here? \r\n\r\nAccording to the [Op docs](https://aesara.readthedocs.io/en/latest/extending/op.html#props__), `__props__`  lists the attributes which influence the computation performed. And I am not sure how `destructive` attribute is used in `perform` method.', 'comment_created': datetime.datetime(2022, 6, 26, 5, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 906758314, 'comment_body': ""My guess is that this was added for some functionality that was never implemented (e.g., a faster method that alters the input variables in place). Looking around the library I don't think this is being used anywhere so maybe we can remove it."", 'comment_created': datetime.datetime(2022, 6, 26, 5, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': 'ecb65df4e6530fc8d0a852de0eead460a4058d62', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
1021919781,Allow for batched `alpha` in `StickBreakingWeights`,"**What is this PR about?**
Addressing #5383
This enables `StickBreakingWeight`'s `alpha` to accept batched data (>2D), make the `infer_shape` work with batched data, and fix the `rng_fn` by broadcasting alpha to K.

**Checklist**
+ [x] Explain important implementation details 👆
+ [x] Make sure that [the pre-commit linting/style checks pass](https://docs.pymc.io/en/latest/contributing/python_style.html).
+ [x] Link relevant issues (preferably in [nice commit messages](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html))
+ [x] Are the changes covered by tests and docstrings?
+ [x] Fill out the short summary sections 👇

## Major / Breaking Changes
* ...

## Bugfixes / New features
- `StickBreakingWeights` now supports batched `alpha` parameters

## Docs / Maintenance
* ...",True,6042,https://api.github.com/repos/pymc-devs/pymc/pulls/6042,https://github.com/pymc-devs/pymc/pull/6042,closed,77,16,4,7,10,38,0,0,[],2022-08-09 19:55:12+00:00,2022-08-31 03:10:05+00:00,1840493.0,"21 days, 7:14:53","[{'comment_id': 941749572, 'comment_body': 'I need some assistance in writing a better test for testing multiple alphas. Can we use `@pytest.mark.parametrize` here?', 'comment_created': datetime.datetime(2022, 8, 9, 19, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 941753939, 'comment_body': 'Is there any wrong with using `@pytest.mark.parametrize` for `check_basic_properties` method?\r\nI tried the below code but got the error: `check_basic_properties() missing 2 required positional arguments: \'alpha\' and \'K\'`\r\n\r\n```python\r\n@pytest.mark.parametrize(\r\n  ""alpha, K"",\r\n  [\r\n      (np.array(1, dtype=""float64""), 3),\r\n      (np.array([1, 2, 3], dtype=""float64""), 3),\r\n      (np.arange(1, 10, dtype=""float64"").reshape(3, 3), 2),\r\n      (np.arange(1, 25, dtype=""float64"").reshape(2, 3, 4), 2),\r\n  ],\r\n)\r\ndef check_basic_properties(self, alpha, K):\r\n  default_rng = aesara.shared(np.random.default_rng(1234))\r\n  draws = pm.StickBreakingWeights.dist(\r\n      alpha=alpha,\r\n      K=K,\r\n      size=(2, 3, 5),\r\n      rng=default_rng,\r\n  ).eval()\r\n```', 'comment_created': datetime.datetime(2022, 8, 9, 20, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 941829459, 'comment_body': 'This is incorrect. Shape is always `size + (K + 1,), if size is provided. If size is not provided, the shape of alpha determines it. \n\nHowever a simpler solution is to remove this method and implement only `supp_shape_from_params` which should always return `(k + 1)` Aesara will then automatically know how the dimensions change with batched alpha or size info', 'comment_created': datetime.datetime(2022, 8, 9, 21, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 941831407, 'comment_body': 'Again, size should not simply be prepended to the shape of alpha. Size (when specified) must include (but can go beyond) any batched dimensions implied by alpha. This guide might make this point more clear: https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/dimensionality.html', 'comment_created': datetime.datetime(2022, 8, 9, 21, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 941831774, 'comment_body': 'tensor_like is the correct docstring', 'comment_created': datetime.datetime(2022, 8, 9, 21, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 942096826, 'comment_body': ""These tests don't have a right shape for value. More importantly I don't think the hard coded logp values is very maintainable. Since this PR is all about allowing for batching of alpha I suggest you test it with a np.vectorize function of the base logp, and make it a separate test. You can find some examples in the tests for batched Dirichlet and Multinomial."", 'comment_created': datetime.datetime(2022, 8, 10, 7, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 945602704, 'comment_body': 'This is still a bit incorrect, alpha is not allowed to broadcast size. Simply put `size = size if size is not None else alpha.shape`', 'comment_created': datetime.datetime(2022, 8, 15, 10, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 945624822, 'comment_body': 'Ok, Thank you ', 'comment_created': datetime.datetime(2022, 8, 15, 11, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 945805207, 'comment_body': '> alpha is not allowed to broadcast size\r\n\r\nHi @ricardoV94 \r\n\r\nConsidering the below snippet and assuming MvNormal works with batched covariance matrix, what is shape of resulting draws from MvNormal:\r\n\r\n```python\r\nmu = np.array([1, 2, 3])\r\ncov = np.eye(3)\r\nbatched_cov = np.full((10, 3, 3), cov)\r\npm.MvNormal.dist(mu=mu, cov=cov, size=(5, 1)).eval().shape\r\n```\r\n\r\nWill it be (5, 1, 10, 3) or (5, 10, 3)?\r\n\r\nI think the shape should be (5, 10, 3) as batches from alpha can broadcast with size.', 'comment_created': datetime.datetime(2022, 8, 15, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 945824926, 'comment_body': ""Deleted by mistake. The example is invalid, it should fail. Size can be either `None`, or some tuple that ends in `(10,)`. It can't contradict the batched shape already implied by the covariance. \n\nSimilar to `np.full`, where the shape can't broadcast to match the value, only the other way around. `np.full((5, 1), np.zeros((10,)))` also fails."", 'comment_created': datetime.datetime(2022, 8, 15, 14, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 945850374, 'comment_body': ""Got it. Thanks Ricardo. \r\n\r\nI think this behaviour (that size can't contradict the batched shape already implied) is a lot easier to work with, compared to PyMC v3."", 'comment_created': datetime.datetime(2022, 8, 15, 15, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 946918987, 'comment_body': ""Don't you need to expand alpha regardless of whether size is provided or not?"", 'comment_created': datetime.datetime(2022, 8, 16, 15, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946919634, 'comment_body': 'How can I determine the right shape for value? ', 'comment_created': datetime.datetime(2022, 8, 16, 15, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946923904, 'comment_body': 'What about a couple more?\n```suggestion\n    sizes_to_check = [None, (3,), (5, 3)]\n```\n', 'comment_created': datetime.datetime(2022, 8, 16, 15, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946928398, 'comment_body': 'Could you please provide a reference for a better way to calculate the logp here?', 'comment_created': datetime.datetime(2022, 8, 16, 15, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946933574, 'comment_body': 'You can replace this with:\n\n```python\n_value = at.vector()\n_alpha = at.scalar()\n_k = at.iscalar()\n_logp = logp(StickBreakingWeights.dist(_alpha, _k), _value)\n_stickbreakingweights_logpdf = compile_pymc([_value, _alpha, _k], _logp)\n```\n', 'comment_created': datetime.datetime(2022, 8, 16, 15, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946937870, 'comment_body': 'hmm got it thank you', 'comment_created': datetime.datetime(2022, 8, 16, 15, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946938421, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 16, 15, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946944530, 'comment_body': 'You can take a random draw from the distribution. Value should have the same shape as the distribution, that is `(*alpha.shape, k+1)` or `(*size, k+1)`\n\nSince you are already checking that the distribution has the right draw shapes, you can simply create a test value for the logp by taking a random draw from the distribution, instead of creating one manually. Thay why is enough to parametrize your logp tests by providing different alphas and sizes.', 'comment_created': datetime.datetime(2022, 8, 16, 15, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946954331, 'comment_body': 'Is this the case when alpha.shape == size[-1]? yes in that case we have to expand alpha.', 'comment_created': datetime.datetime(2022, 8, 16, 15, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 946963040, 'comment_body': 'I think you need to expand always because you are feeding it into beta with (k+1) draws to the right and you want alpha to broadcast to those.', 'comment_created': datetime.datetime(2022, 8, 16, 15, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 946994343, 'comment_body': 'yes got it', 'comment_created': datetime.datetime(2022, 8, 16, 16, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 947061421, 'comment_body': 'You should define this logpdf function outside of the test_function, no point in compiling it everytime.\n\nThe best is probably inside a module-level pytest fixture so that it does not slowdown unrelated tests.', 'comment_created': datetime.datetime(2022, 8, 16, 17, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947062641, 'comment_body': 'value still has a wrong shape. Did you see my other comment about how you could fix it?', 'comment_created': datetime.datetime(2022, 8, 16, 17, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947077676, 'comment_body': '@ricardoV94 Do we require `size` to be a tuple? If not, would we need `size = pm.distributions.shape_utils.to_tuple(size)`?', 'comment_created': datetime.datetime(2022, 8, 16, 17, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'larryshamalama', 'type': 'User'}, {'comment_id': 947078292, 'comment_body': 'In cases of `alpha = 3`, we probably need to wrap `alpha = np.array(array)`.', 'comment_created': datetime.datetime(2022, 8, 16, 17, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'larryshamalama', 'type': 'User'}, {'comment_id': 947106344, 'comment_body': 'Yes I got the comment, will fix this in the next commit', 'comment_created': datetime.datetime(2022, 8, 16, 18, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 947108217, 'comment_body': '> The best is probably inside a module-level pytest fixture so that it does not slowdown unrelated tests.\r\n\r\ndo you mean a function inside pymc\\tests\\test_distributions.py ?', 'comment_created': datetime.datetime(2022, 8, 16, 18, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 947187992, 'comment_body': '> > The best is probably inside a module-level pytest fixture so that it does not slowdown unrelated tests.\n> \n> do you mean a function inside pymc\\tests\\test_distributions.py ?\n\nYes', 'comment_created': datetime.datetime(2022, 8, 16, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947188875, 'comment_body': '`tuple(size)` like before should be fine', 'comment_created': datetime.datetime(2022, 8, 16, 19, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 947190159, 'comment_body': 'alpha will be converted to an array by Aesara automatically, so that should be safe', 'comment_created': datetime.datetime(2022, 8, 16, 19, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 948921370, 'comment_body': 'Is it acceptable to combine `test_stickbreakingweights_logp` and `test_stickbreakingweights_vectorized` in a single test?', 'comment_created': datetime.datetime(2022, 8, 18, 9, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 948924660, 'comment_body': 'I now use distribution to generate value.', 'comment_created': datetime.datetime(2022, 8, 18, 9, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 954477495, 'comment_body': 'If `test_stickbreakingweights_vectorized` fails, it would point to shapes not being handled properly to form batches. So, lets keep them separate to have better isolation of tests. ', 'comment_created': datetime.datetime(2022, 8, 25, 3, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sayam753', 'type': 'User'}, {'comment_id': 954738378, 'comment_body': 'Now I separate the test for batched alpha', 'comment_created': datetime.datetime(2022, 8, 25, 9, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'purna135', 'type': 'User'}, {'comment_id': 954756880, 'comment_body': 'I am not sure if this is the one that should have the `pytest.fixture`, it seems like it should be a function that returns the vectorized `stickbreakingweights_logpdf`. The idea being that we only compile the Aesara function if the test that requires it, is run. Maybe it works like this already, if `np.vectorize` is lazy?\r\n\r\nOtherwise my gut feeling is that it should be something like:\r\n\r\n```suggestion\r\n@pytest.fixture(scope=""module"")\r\ndef stickbreakingweights_logpdf():\r\n   \r\n    _value = at.vector()\r\n    _alpha = at.scalar()\r\n    _k = at.iscalar()\r\n    _logp = logp(StickBreakingWeights.dist(_alpha, _k), _value)\r\n    core_fn = compile_pymc([_value, _alpha, _k], _logp)\r\n    \r\n    return np.vectorize(_stickbreakingweights_logpdf, signature=""(n),(),()->()"")\r\n```\r\n\r\nAlso it seems like you had too many parameters in the signature of np.vectorize? I removed one of the parenthesis.', 'comment_created': datetime.datetime(2022, 8, 25, 9, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 958939324, 'comment_body': 'Is `stickbreakingweights_logpdf` passed as an argument here via the fixture sharing decorator of the function?', 'comment_created': datetime.datetime(2022, 8, 30, 21, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'larryshamalama', 'type': 'User'}, {'comment_id': 959120272, 'comment_body': ""Yes, that's how fixtures work"", 'comment_created': datetime.datetime(2022, 8, 31, 3, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}]","[{'commit_sha': '7fde39a210ec6b319c979e96d75900034a244ff8', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11cd987275be04d3e4e6c7dff5e0e9fb7dfd58cf', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdd31a41d92e20419c3486a83624c008c8c9811', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd933c070352deb3b1a3261e59cf07de9a511f93c', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a50281df7bd8fd5d9c2ea444f6bda07d34d758f', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe7c2b2d708fb4b2ec006bd0b2533175f42e81d5', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a5df64899145cbb982db07ab77c5f14e91765b6', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31
999633218,Add `Op` to solve batched linear matrix equation,"Addressing #791

This PR adds Op to `aesara.tensor.nlinalg` that wraps `numpy.linalg.solve` for solving linear matrix equations, or system of linear scalar equations, and computing the reverse-mode gradients.

Now, since there is already a `Solve` in `aesara.tensor.slinalg`, why do we need this Numpy `Solve` again?

Scipy doesn't appear to have anything that can be used to solve a linear equation with a batch of triangular matrices, but we can deal with the batched data by using the `np.vectorized` version of the Scipy `Solve`. Numpy, on the other hand, has [solve](https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html), which can **handle batches of matrices** but is expected to be slower.

So, to decide which one to look at, I create a vectorized version of `aesara.tensor.slinalg.cholesky` and compare its performance to another [cholesky](https://github.com/aesara-devs/aesara/compare/main...purna135:aesara:numpy_cholesky) method that deals with batched data using `numpy.linalg.solve`.

The detailed investigation can be found at the link below.
1. [Cholesky - Numpy vs Scipy for Large Array](https://github.com/purna135/GSoC-Learnings/blob/main/Cholesky%20-%20Numpy%20vs%20Scipy%20for%20Large%20Array.ipynb)
2. [Cholesky - Numpy vs Scipy for Small Array](https://github.com/purna135/GSoC-Learnings/blob/main/Cholesky%20-%20Numpy%20vs%20Scipy%20for%20Small%20Array.ipynb)

In short, I obtained the following result:
1. **Runtime of Numpy vs Scipy for Large Array**
<img src=""https://user-images.githubusercontent.com/42216008/182048963-0fae1b6b-2fc5-4d05-995b-ec3acb7e49c5.png"" alt=""Runtime of Numpy vs Scipy for Large Array"" width=""600""/>

2. **Runtime of Numpy vs Scipy for Small Array**
<img src=""https://user-images.githubusercontent.com/42216008/182048981-86b7cc16-42e5-4be3-a526-089fbdadca46.png"" alt=""Runtime of Numpy vs Scipy for Large Array"" width=""600""/>

As we can see, `cholesky` which uses numpy `solve` is more performant for reasonably sized arrays and has simpler code, so we decided to use `numpy.linalg.solve` instead of Scipy `solve`.",False,1060,https://api.github.com/repos/aesara-devs/aesara/pulls/1060,https://github.com/aesara-devs/aesara/pull/1060,open,269,2,2,2,17,0,0,0,[],2022-07-18 16:46:40+00:00,,0.0,,[],"[{'commit_sha': 'e95fa1217a9e63569a86a660f60c455b0d3f3f27', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e45bebfb7181625e1c116fdfc9f5367c1112b8', 'committer_username': 'purna135', 'committer_name': 'Purna Chandra Mansingh', 'committer_email': 'purnachandramansingh135@gmail.com', 'commit_date': datetime.datetime(2018, 8, 8, 16, 36, 58, tzinfo=datetime.timezone.utc)}]",Purna Chandra Mansingh,42216008,purnachandramansingh135@gmail.com,User,,126,,38,31

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
192904,pymc,pymc-devs/pymc,Python,1985,8598,224,503,10022,300,17,63,"[{'id': 1540279317, 'number': 6939, 'closed': datetime.datetime(2024, 3, 4, 10, 28, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 3, 16, 0, 1, tzinfo=datetime.timezone.utc), 'time_taken': 13199297.0, 'time_delta': '152 days, 18:28:17', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1021919781, 'number': 6042, 'closed': datetime.datetime(2022, 8, 31, 3, 10, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 19, 55, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1840493.0, 'time_delta': '21 days, 7:14:53', 'additions': 77, 'deletions': 16, 'state': 'closed'}, {'id': 947470549, 'number': 5806, 'closed': datetime.datetime(2022, 6, 2, 16, 5, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 25, 19, 59, 43, tzinfo=datetime.timezone.utc), 'time_taken': 677121.0, 'time_delta': '7 days, 20:05:21', 'additions': 39, 'deletions': 1432, 'state': 'closed'}, {'id': 891645513, 'number': 5661, 'closed': datetime.datetime(2022, 4, 15, 10, 13, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 28, 10, 48, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1553119.0, 'time_delta': '17 days, 23:25:19', 'additions': 76, 'deletions': 89, 'state': 'closed'}, {'id': 891635333, 'number': 5660, 'closed': datetime.datetime(2022, 11, 28, 18, 1, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 28, 10, 36, 58, tzinfo=datetime.timezone.utc), 'time_taken': 21194669.0, 'time_delta': '245 days, 7:24:29', 'additions': 30, 'deletions': 2, 'state': 'closed'}, {'id': 890491146, 'number': 5651, 'closed': datetime.datetime(2022, 10, 28, 18, 20, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 26, 17, 26, 30, tzinfo=datetime.timezone.utc), 'time_taken': 18665667.0, 'time_delta': '216 days, 0:54:27', 'additions': 1, 'deletions': 20, 'state': 'closed'}, {'id': 886027377, 'number': 5642, 'closed': datetime.datetime(2022, 5, 25, 19, 24, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 22, 13, 6, 19, tzinfo=datetime.timezone.utc), 'time_taken': 5552311.0, 'time_delta': '64 days, 6:18:31', 'additions': 139, 'deletions': 1428, 'state': 'closed'}, {'id': 884870958, 'number': 5637, 'closed': datetime.datetime(2022, 3, 21, 20, 40, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 21, 13, 59, 28, tzinfo=datetime.timezone.utc), 'time_taken': 24065.0, 'time_delta': '6:41:05', 'additions': 70, 'deletions': 6, 'state': 'closed'}, {'id': 880746687, 'number': 5600, 'closed': datetime.datetime(2022, 3, 22, 10, 51, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 15, 22, 8, 10, tzinfo=datetime.timezone.utc), 'time_taken': 564227.0, 'time_delta': '6 days, 12:43:47', 'additions': 47, 'deletions': 51, 'state': 'closed'}, {'id': 879439578, 'number': 5596, 'closed': datetime.datetime(2022, 3, 22, 10, 53, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 14, 19, 31, 32, tzinfo=datetime.timezone.utc), 'time_taken': 660098.0, 'time_delta': '7 days, 15:21:38', 'additions': 34, 'deletions': 25, 'state': 'closed'}, {'id': 879388487, 'number': 5595, 'closed': datetime.datetime(2022, 3, 22, 10, 47, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 14, 18, 29, 39, tzinfo=datetime.timezone.utc), 'time_taken': 663484.0, 'time_delta': '7 days, 16:18:04', 'additions': 42, 'deletions': 33, 'state': 'closed'}, {'id': 877679846, 'number': 5583, 'closed': datetime.datetime(2022, 3, 18, 11, 1, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 11, 17, 51, 51, tzinfo=datetime.timezone.utc), 'time_taken': 580203.0, 'time_delta': '6 days, 17:10:03', 'additions': 112, 'deletions': 337, 'state': 'closed'}, {'id': 872446479, 'number': 5556, 'closed': datetime.datetime(2022, 3, 10, 18, 42, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 12, 15, 24, tzinfo=datetime.timezone.utc), 'time_taken': 368820.0, 'time_delta': '4 days, 6:27:00', 'additions': 9, 'deletions': 6, 'state': 'closed'}, {'id': 872445392, 'number': 5555, 'closed': datetime.datetime(2022, 3, 12, 8, 22, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 12, 8, 39, tzinfo=datetime.timezone.utc), 'time_taken': 504818.0, 'time_delta': '5 days, 20:13:38', 'additions': 9, 'deletions': 8, 'state': 'closed'}, {'id': 872443806, 'number': 5554, 'closed': datetime.datetime(2022, 3, 12, 8, 22, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 11, 59, 54, tzinfo=datetime.timezone.utc), 'time_taken': 505334.0, 'time_delta': '5 days, 20:22:14', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 872442523, 'number': 5553, 'closed': datetime.datetime(2022, 3, 12, 8, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 11, 51, 30, tzinfo=datetime.timezone.utc), 'time_taken': 505830.0, 'time_delta': '5 days, 20:30:30', 'additions': 6, 'deletions': 5, 'state': 'closed'}, {'id': 872441582, 'number': 5552, 'closed': datetime.datetime(2022, 3, 12, 8, 21, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 11, 45, 13, tzinfo=datetime.timezone.utc), 'time_taken': 506170.0, 'time_delta': '5 days, 20:36:10', 'additions': 11, 'deletions': 9, 'state': 'closed'}, {'id': 872439112, 'number': 5551, 'closed': datetime.datetime(2022, 3, 12, 8, 21, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 11, 28, 14, tzinfo=datetime.timezone.utc), 'time_taken': 507171.0, 'time_delta': '5 days, 20:52:51', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 872437782, 'number': 5550, 'closed': datetime.datetime(2022, 3, 8, 13, 54, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 11, 19, 2, tzinfo=datetime.timezone.utc), 'time_taken': 182138.0, 'time_delta': '2 days, 2:35:38', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 871914735, 'number': 5546, 'closed': datetime.datetime(2022, 3, 12, 8, 20, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 4, 18, 39, 33, tzinfo=datetime.timezone.utc), 'time_taken': 654076.0, 'time_delta': '7 days, 13:41:16', 'additions': 11, 'deletions': 8, 'state': 'closed'}, {'id': 871598370, 'number': 5543, 'closed': datetime.datetime(2022, 3, 6, 2, 39, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 4, 12, 0, 44, tzinfo=datetime.timezone.utc), 'time_taken': 139150.0, 'time_delta': '1 day, 14:39:10', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 866976701, 'number': 5530, 'closed': datetime.datetime(2022, 3, 3, 3, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 28, 16, 37, 26, tzinfo=datetime.timezone.utc), 'time_taken': 212014.0, 'time_delta': '2 days, 10:53:34', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 858848077, 'number': 5505, 'closed': datetime.datetime(2022, 2, 25, 15, 37, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 20, 15, 38, 58, tzinfo=datetime.timezone.utc), 'time_taken': 431884.0, 'time_delta': '4 days, 23:58:04', 'additions': 3, 'deletions': 3, 'state': 'closed'}]"
221231590,aesara,aesara-devs/aesara,Python,156,1174,20,596,30109,332,9,48,"[{'id': 1260344189, 'number': 1460, 'closed': datetime.datetime(2023, 8, 24, 10, 44, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 2, 12, 5, 4, tzinfo=datetime.timezone.utc), 'time_taken': 15115179.0, 'time_delta': '174 days, 22:39:39', 'additions': 81, 'deletions': 0, 'state': 'closed'}, {'id': 1067369830, 'number': 1215, 'closed': None, 'created': datetime.datetime(2022, 9, 26, 16, 0, 42, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 965, 'deletions': 76, 'state': 'open'}, {'id': 999633218, 'number': 1060, 'closed': None, 'created': datetime.datetime(2022, 7, 18, 16, 46, 40, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 269, 'deletions': 2, 'state': 'open'}, {'id': 984707219, 'number': 1026, 'closed': datetime.datetime(2022, 7, 7, 13, 36, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 8, 55, 38, tzinfo=datetime.timezone.utc), 'time_taken': 535265.0, 'time_delta': '6 days, 4:41:05', 'additions': 83, 'deletions': 8, 'state': 'closed'}, {'id': 978093014, 'number': 1012, 'closed': None, 'created': datetime.datetime(2022, 6, 24, 9, 11, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 58, 'deletions': 120, 'state': 'open'}]"
