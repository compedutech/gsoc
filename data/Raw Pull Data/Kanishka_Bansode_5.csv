pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1367819765,Adding Graphql-inspector for versioning(GSoC) 2023,"<!--
This section can be deleted after reading.

We employ the following branching strategy to simplify the development process and to ensure that only stable code is pushed to the `master` branch:

- `develop`: For unstable code: New features and bug fixes.
- `alpha-x.x.x`: For stability testing: Only bug fixes accepted.
- `master`: Where the stable production ready code lies. Only security related bugs.

-->

<!--
Thanks for submitting a pull request! Please provide enough information so that others can review your pull request.
-->

**What kind of change does this PR introduce?**

<!-- E.g. a bugfix, feature, refactoring, etcâ€¦ -->

**Issue Number:**

Fixes #1339

**Did you add tests for your changes?**

<!--Yes or No. Note: Add unit tests or automation tests for your code.-->

**Snapshots/Videos:**

<!--Add snapshots or videos wherever possible.-->

**If relevant, did you update the documentation?**

<!--Add link to Talawa-Docs.-->

**Summary**

<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->
<!-- Try to link to an open issue for more information. -->

**Does this PR introduce a breaking change?**

<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->

**Other information**

<!--Add extra information about this PR here-->

**Have you read the [contributing guide](https://github.com/PalisadoesFoundation/talawa-api/blob/master/CONTRIBUTING.md)?**

<!--Yes or No-->
",True,1340,https://api.github.com/repos/PalisadoesFoundation/talawa-api/pulls/1340,https://github.com/PalisadoesFoundation/talawa-api/pull/1340,closed,19908,1597,11,34,6,0,0,0,[],2023-05-28 08:05:13+00:00,2023-06-04 13:45:07+00:00,625194.0,"7 days, 5:39:54",[],"[{'commit_sha': '275820b51006d2894c0f62cd5408b81c53400d93', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63d4b8fe65734f4130a2d7639211ee72a6b41128', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80381c08c5923d977ffa1a34374ef2d1e29a8ac4', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f1aa0e33f7fe889a844badb8bba234bfc2f6e60', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a5ccc75782ef2a041912dd6047bd65713c9e254', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b61f1342e2bb8b6605b70d90a99e4607016bd18d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79388ba27b7ed72feffb3fb7c651a39c81c14e08', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61a099f6627d0188f4c4178176e7381547abda1', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e6eb950e3e7aa552ee21e8982e08051dea0a46', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed332ed1d25c026bf52b45a2289815d3eba1ad5', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6a0e730678674fa35c7368e6568401df97c4681', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01bbad2f446ebbd11d492f4bd2899afe815f51c1', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5979a50c5fa61438199bd5d302661772aeb1148', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b9b85ae6410fe4742ba0aa5a16322678c3489a7', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28f0e1ee0da87e975445906d1bfd2d73eec046b6', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95a5ad5f7f40c673bc6b3fa426ccdd038aaf7b06', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25e2703d129cc7eca8203e8ce83e54adbbbf10d9', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580325c71524bf28e90c69fa86f7ea69b93a94ad', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f4fa26dd53065e24db105a9bc69c57ff3af479', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ac4b6e6757afb5be52b6172c9ea195dd280ed1', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d09ec68858ade7a2383631a210be3d73115ddea', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e64a212d20537b011368cfcd2862bb1240fa0a80', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd74ccabb65036e8cf5f8dd00179322eef84fc9c', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cf12a857e9923a59969ed9122b2387d5d370c7f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '333f5186f442e804e57e313b2c549e3d55733825', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f812c4008aad1866632af9f77c972b5a7fd6c9e', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f28c4a6ec8cea573ba16e32d87aa0125e0bb0c7d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dcfa417071ac3184a1115ad3969829f54380edf', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9547be1c32013d544755353561b586e7b435aa', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26f5dd849dc1eb1985ff973e8d00a25d570993b9', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d045dcb6c5778f8492afc8061c47484b614835d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08412f6b9611d39cf9e3325da70849f563a9622b', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afc91deca23a0c2d445756b7469b631b4b010bb5', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a37c4851f31872cd5d0af88d3b5c6bd99777301e', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}]",Kanishka Bansode,96020697,,User,,56,,37,36
1411154924,Apollo v4 ,"<!--
This section can be deleted after reading.

We employ the following branching strategy to simplify the development process and to ensure that only stable code is pushed to the `master` branch:

- `develop`: For unstable code: New features and bug fixes.
- `alpha-x.x.x`: For stability testing: Only bug fixes accepted.
- `master`: Where the stable production ready code lies. Only security related bugs.

-->

<!--
Thanks for submitting a pull request! Please provide enough information so that others can review your pull request.
-->

**What kind of change does this PR introduce?**
This PR upgrades the current version of Apollo Server to v4(latest) from v2. 
<!-- E.g. a bugfix, feature, refactoring, etcâ€¦ -->

**Issue Number:**

Fixes #1350 

**Did you add tests for your changes?**
Yes.
<!--Yes or No. Note: Add unit tests or automation tests for your code.-->

**Snapshots/Videos:**

<!--Add snapshots or videos wherever possible.-->

**If relevant, did you update the documentation?**

<!--Add link to Talawa-Docs.-->

**Summary**

<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->
<!-- Try to link to an open issue for more information. -->

**Does this PR introduce a breaking change?**

<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->

**Other information**

<!--Add extra information about this PR here-->

**Have you read the [contributing guide](https://github.com/PalisadoesFoundation/talawa-api/blob/master/CONTRIBUTING.md)?**

<!--Yes or No-->
",True,1351,https://api.github.com/repos/PalisadoesFoundation/talawa-api/pulls/1351,https://github.com/PalisadoesFoundation/talawa-api/pull/1351,closed,18982,7683,39,25,7,0,0,0,[],2023-06-28 07:31:14+00:00,2023-06-29 20:22:03+00:00,132649.0,"1 day, 12:50:49",[],"[{'commit_sha': 'dd64a79b4838fcfde37a3230a89459ab3c331c44', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e8b1bc5aca553efa09778ff045b9682e50219e', 'committer_username': 'EshaanAgg', 'committer_name': 'Eshaan Aggarwal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 25, 9, 22, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391216f4294ffcaf1e7c95f6fc936a239068ae7d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b043502cfe48ba65bb5749cd92a4da24337c4863', 'committer_username': 'EshaanAgg', 'committer_name': 'Eshaan Aggarwal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 25, 9, 22, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0209a88f244988c4b669240aebda18273ac8182', 'committer_username': 'EshaanAgg', 'committer_name': 'Eshaan Aggarwal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 25, 9, 22, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c7143069681676bb60ec09b674c0b16e49077b', 'committer_username': 'EshaanAgg', 'committer_name': 'Eshaan Aggarwal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 25, 9, 22, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7425cbf8564b4ad391679982d5e3fe57c90ef31', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bf52da72b6bd052a92090f6f675d0eb95111239', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c26ceaafab39c73df6026743bc7f5d1001b3d87a', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3df91ea6b06e5271e20600ca8c0a2fc9c181517', 'committer_username': 'EshaanAgg', 'committer_name': 'Eshaan Aggarwal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 25, 9, 22, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ab885373230181a21c1701d335a7595992e5cbc', 'committer_username': 'EshaanAgg', 'committer_name': 'Eshaan Aggarwal', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 25, 9, 22, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e34b374bffdce43fcbda98291832e7b7953d956', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faa824d0a09f3e18f0726e2b76bb5776c0898fe4', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78026223cdad5f065e13e53bcd734c195fdf4103', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a569f6950c3bf7896e1ab51c2afc9ccb0f53b193', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc6cf296ca24484cf94af7f6332f4512a08c0b3f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66cdb0cd5dc12e74407a933ab22924ffbd33cbc', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7d7a2ef76af2b1b84a267b72446bf6fe87ec1a8', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd506312615a43ae21d0d77d0e58af278632496ac', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '764bfaa78b120d2091208f040fc56fb8d7eb26d7', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3138f1879767d73cacf13f2ec268ca7cbd2fd7a7', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ca8544e92ecaa81a781a1dc02c0142ae9b2eba1', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41ad62ad1db634f0a6550c2c412df85b83957057', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdb6f6df3fa53bf08e93e17b752ab61c7532cd0', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6f7dce91dd39343a8629d7a64b8db6d464bcc97', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}]",Kanishka Bansode,96020697,,User,,56,,37,36
1292372662,Graphql Error Handling," <!--
Thanks for submitting a pull request! Please provide enough information so that others can review your pull request.
-->

**What kind of change does this PR introduce?**

<!-- E.g. a bugfix, feature, refactoring, etcâ€¦ -->

**Issue Number:**

Fixes #567

**Did you add tests for your changes?**

<!--Yes or No. Note: Add unit tests or automation tests for your code.-->

**Snapshots/Videos:**

<!--Add snapshots or videos wherever possible.-->

**If relevant, did you update the documentation?**

<!--Add link to Talawa-Docs.-->

**Summary**

<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->
<!-- Try to link to an open issue for more information. -->

**Does this PR introduce a breaking change?**

<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->

**Other information**

<!--Add extra information about this PR here-->

**Have you read the [contributing guide](https://github.com/PalisadoesFoundation/talawa-docs/blob/develop/CONTRIBUTING.md)?**

<!--Yes or No-->
",True,593,https://api.github.com/repos/PalisadoesFoundation/talawa-docs/pulls/593,https://github.com/PalisadoesFoundation/talawa-docs/pull/593,closed,1117,7,2,22,21,15,0,0,[],2023-03-28 05:40:26+00:00,2023-07-20 19:14:44+00:00,9898458.0,"114 days, 13:34:18","[{'comment_id': 1161105084, 'comment_body': 'This is wrong. The nested resolver returning null only affects the parent resolver if the nested resolver\'s type in schema is defined as non-null. Since you\'ve defined in schema that the nested resolver will never return null, when it does return null that\'s an error according to graphql engine. Since by the promise of schema it cannot return null for that nested resolver, the error traverses up to the parents until the engine finds a field which is defined as nullable in the schema.\r\n\r\nBy default the root `data` field is nullable in graphql, it\'s implemented in graphql engine core. So, null value for a nested resolver results in the whole data object being returned as null.\r\n\r\nThis situation can easily be avoided if you declare nested resolvers as nullable in schema.\r\n\r\n```graphql\r\ntype User {\r\n  posts: PostsConnection!\r\n}\r\n```\r\n\r\n```graphql\r\ntype User {\r\n  posts: PostsConnection\r\n}\r\n```\r\n\r\nNotice the difference? The difference is `!` exclamation sign which makes it nullable/non-nullable. The concept of partial data is exactly this. If a nested resolver is nullable, you can return null or throw an error inside that resolver, and it will have no effect on the other fields. In case of throwing error the nested resolver field will have a value of null and in root errors array the error you threw in nested resolver will be present. The error will also exactly mention which field the error occured in, in its path field. Something like this:-\r\n```ts\r\n{\r\n  path: [""user"", ""posts""]\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 4, 8, 12, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xoldd', 'type': 'User'}, {'comment_id': 1161105233, 'comment_body': ""This response is incorrect. If email is taken or password is not according to constraints the returned user object should be null. The user object you're returning is to return the user you created, here no user will be created because the constraints are never fullfilled. This is not an example of partial errors."", 'comment_created': datetime.datetime(2023, 4, 8, 12, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'xoldd', 'type': 'User'}, {'comment_id': 1161108296, 'comment_body': ""@xoldyckk Oh, I had no idea that error could be avoided by making the return type nullable for nested resolver. \r\n\r\nShould I remove that sentence regarding nested resolver?\r\n\r\n>By that this means even if some nested resolver fails, that has the impact on the result of the root parent resolver (contradicts Introduction point 4).Essentially failure of a related node leads to the failure of parent node.This can potentially be a deal breaker if you're wanting to have errors returned as part of a mutation, but want to query for data on the result anyways. A common example is returning an error with some partial data for private Organization(name , location etc) even if a lot of background details like members , admins etc should not be returned.\r\n"", 'comment_created': datetime.datetime(2023, 4, 8, 12, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1161109035, 'comment_body': '@xoldyckk Yes you are right. Although that example was meant as an example of field errors primarily. Will correct that response and remove mention of partial data there. \r\n\r\nSo basically the nested resolver nullability and partial data concept are basically the same, right? So should I mention that in the nested resolver error section ? or make a new example with another connection for that (although I doubt it would be necessary)?', 'comment_created': datetime.datetime(2023, 4, 8, 12, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1161109170, 'comment_body': 'Also regarding the scalar fields I think we should send errors within the nested resolver itself since then it will be easier to query for the clients since all errors would be in that respective resolver. What do you think?\r\n\r\nAlso, could you tell me what example nested query from talawa-api could be used in the doc here to show scalar field error handling?', 'comment_created': datetime.datetime(2023, 4, 8, 12, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1161118787, 'comment_body': ""@kb-0311 If you had no idea about it then you should learn more about it and it's workings. Might change the mental model of how you're currently perceiving things, will probably let you think of more flexible approaches.\r\n\r\nAnd yeah of course you need to get rid of those lines, you're giving out incorrect knowledge to the readers."", 'comment_created': datetime.datetime(2023, 4, 8, 14, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'xoldd', 'type': 'User'}, {'comment_id': 1161120842, 'comment_body': '@kb-0311 Think of nested resolver as just a field. The field can be scalar or a complex objects. Whether you choose to implement a seperate resolver for scalar fields or not depends on your implementation.\r\n\r\nSince, you return most of the scalars in the parent resolver itself graphql doesn\'t throw out errors to resolve the fields which are asked for in schema. This is because the fields in schema and fields in database have the same name and data type.\r\n\r\nSame is not true for custom scalar and complex object fields. Example for custom scalar is `postsCount`, there\'s no database field named `postCount` in database, you implement a seperate resolver for `postsCount` and return the `postsCount` according to the parent object. Example for complex object you already know, `posts` is one example. You\'re not restricted to resolve all scalar values in parent resolver and all complex objects in nested resolvers. Nested resolvers work for anything. \r\n\r\nSomething as stupid as this is possible too:-\r\n```\r\nQuery: {\r\n  parentResolver: () => {\r\n    return { name: ""test"" }\r\n  }\r\n},\r\n\r\nParent: {\r\n  name: (parent) => {\r\n    return parent.name.toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\nThe nested resolver here transforms the parent.name. This could\'ve been done in the parent resolver itself, but this is just an example, you\'re free to do whatever you want with the values parent resolver returns in the nested resolvers. When graphql resolves parent.name field, it won\'t take the name you returned from parentResolver, it\'ll make use of the custom resolver you defined for parent.name. So, custom resolver take more precedence over the values you simply returned in parent resolver. If there\'s no custom resolver graphql will simply return the parent.name you returned in parent resolver. All it cares about is that the name and type of field you return matches with what\'s defined in the schema. \r\n\r\nNow whether you choose to implement data/errors object for each of these field(scalar or object) resolvers is up to you. This is something I\'ve explained to you many times now.  This is one of the problems with errors in schema approach, too much boilerplate. In root response object errors list, you just throw the error in any resolver and it lands in the list.\r\n\r\nDo keep in mind, some scalar fields are database intensive to compute. I don\'t need to give an example here, you can probably think of many scalar fields like these. If you implement them in parent resolver, you\'re computing those scalar fields each time someone makes a request. That\'s bad for the database and server.\r\n\r\nImplementing things in nested resolvers is one way of making sure computationally expensive fields don\'t get triggered unnecessarily. There\'s another way, it\'s called `look ahead` pattern. In this you take the graphql info object, parse it and only compute the specific fields asked by the clients. But this is high level complexity, because doing this manually would be braindead. Automating this is only possible if your graphql schema and database schema can be mapped and interconverted using some kind of compiler or something. This is something only tech giants would do.', 'comment_created': datetime.datetime(2023, 4, 8, 14, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'xoldd', 'type': 'User'}, {'comment_id': 1161121948, 'comment_body': '@xoldyckk Yeah that is the tricky part there is not much info or a universally agreed upon approach regarding Graphql Error handling other than the stage 6a one and stage 5 one and a lot of stuff regarding best practises for error handling keeps changing. \r\n\r\nEven if we consider the nullable point you raised  I doubt it would be enough to completely change the approach ->\r\n>In case of throwing error the nested resolver field will have a value of null and in root errors array the error you threw in nested resolver will be present. The error will also exactly mention which field the error occured in, in its path field. \r\n\r\nThere is the matter of Apollo client since the default graphql errors array in there specifies the path and considers that as the differentiating factor , what happens when we are destructuring `data` and `error` object from a `useQuey` hook?  \r\n\r\nThe client apps will show an error for the whole query since any error in the root error array will cause it to fail.\r\n\r\nThere are ways around this on the client apps ofc but I cannot think one which would be simpler than this one currently.\r\n\r\n\r\nThough I am not here to discuss about the apollo client again, just that I do think right now the 6a approach is looking kinda attractive ngl. But will think about more approaches\r\n', 'comment_created': datetime.datetime(2023, 4, 8, 14, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1161124251, 'comment_body': '@xoldyckk Ohh alright got it , thanks for explaining that so clearly and in detail.\r\n\r\nlike One possible organizationMemberConnection and its email field (which can be a custom resolver/scalar) for members be a good example to demonstrate the scalar field error in a nested resolver, right?\r\n\r\nBecause in the future that field is a PII field and will be encrypted in the Database and in transit even within the SSL layer, as asked by Peter. So for that scalar, it would make a lot of sense to have it as a separate resolver for its decryption based on some form of access control.\r\n\r\nShould I use this example if it makes sense to you?\r\n\r\n \r\n\r\n\r\n \r\n', 'comment_created': datetime.datetime(2023, 4, 8, 15, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1161288326, 'comment_body': ""@kb-0311 The point is just to show that nested resolvers are not something magical, they're needed for properly organizing the code and having a clean architecture, delegating computation of expensive or custom fields which are ephimeral i.e., only exist at the graphql level not the database. `email` is a good example for this, but you can use whatever you want like `bank_account_number`, `bank_balance`, `phone_number`, `postsCount` etc. "", 'comment_created': datetime.datetime(2023, 4, 9, 13, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'xoldd', 'type': 'User'}, {'comment_id': 1161289984, 'comment_body': ""@kb-0311 When you resolve custom/complex fields within the parent resolver, you have the freedom to return errors related to those fields within the errors field of that parent resolver. It's possible to resolve your whole graphql schema and all the relations within a single resolver, but that's anti graphql. You see this is only different  from the root errors approach in that here errors will be type-safe, in root errors list they're not type-safe, you'll still be resolving errors for all fields/nested fields within the parent resolver, and that'll make a big list of possible errors that parent resolver can return.\r\n\r\nExtracting data and errors into resolvers is a modular approach and isolates information of a field to that field's resolver, the resolvers can be for scalar or complex objects. But this does result in the graphql schema not representing the relations directly, instead you have `{success,errors}` objects for many fields(scalar or complex) which looks weird.\r\n\r\nSo, the tradeoffs are:-\r\n1. **_non type safe errors_** -> cleaner graphql schema, harder to colocate errors to where they occured as all of them are dumped in the root errors list, no type safety, harder to handle them\r\n2. _**type safe errors**_ -> weird/complex graphql schema, errors are colocated with the field they occured for, type safe, easier to handle them"", 'comment_created': datetime.datetime(2023, 4, 9, 13, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'xoldd', 'type': 'User'}, {'comment_id': 1161293139, 'comment_body': 'Oh yeah, I agree with you completely. In talawa, in the future, we can even introduce fields that are not necessarily defined cut to cut in the database but could be valuable data to be sent back to the client. The example you stated yourself included.\r\n\r\nI could not agree more with the tradeoff points you made. Ultimately I will also need to talk to the client app devs to discuss how the corresponding UI elements will be developed for this 6a approach too since a lot of the motive behind this was to allow more customization in errors within the apps.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 4, 9, 14, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1264428140, 'comment_body': 'Here make signUpData return null.', 'comment_created': datetime.datetime(2023, 7, 15, 14, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'xoldd', 'type': 'User'}, {'comment_id': 1264431838, 'comment_body': ""Empty object(array) in javascript is considered a truthy value, this would trigger the if block it even though there might be no errors. Instead of this make the check on whether the array is empty or not. Similarly, in schema make the errors list non nullable, that way an array is always returned but client has to check if it is empty or not to determine whether an error occured.\r\n\r\nOther choice is to only return an array for errors field when it has at least one item inside it, otherwise just return null. This wouldn't require changes to the schema."", 'comment_created': datetime.datetime(2023, 7, 15, 14, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'xoldd', 'type': 'User'}, {'comment_id': 1264437493, 'comment_body': ""Again this is wrong at the schema level, you've defined the fields inside signUpData to be non nullable, but you're returning null for those fields here. Instead you should return null for the signUpData field as a whole.\r\n\r\nMake sure the schema you use and the resolvers you implement map to each other correctly. Applies for all the examples you've used in this doc."", 'comment_created': datetime.datetime(2023, 7, 15, 14, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xoldd', 'type': 'User'}]","[{'commit_sha': '181c273f637528d176d04ebdd85ba1832574d338', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f16944c5288f4b38da1a534e370a87df9ac9ae', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98358105011d22be28e01854df91cec8e971f9c5', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ca955fb687dcc38f4ae3f1fb0ead1e3ca6a5766', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f78ce6020ec40af7a1d84929e38a95d9c161dc2', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40577f138c71a8087491095dd25998180084550a', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6336c0d95aad18cd5d0f6f6836d10db20b3eadf6', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a0849206126ce8af7ee7a1a47d38088940fb5f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbb0627286c5c4750d867d67ebee37db4e03854b', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9c4b6b944f38fdcd6ea7fbde642d1fee800a98b', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b919318539fb55f34ed3660198dc5ded959a16e', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f71d76a7fbc8c7cfb0f5e8801dddc2b7a2c4fa9f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b0408a6b873e38c8c1e4ba4113efef12d0d97bc', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c592d7c0b49ada97b946f28a1e33d5908da73901', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d4e38989ab43c6e8b69934a87a2417562b06897', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4882b317eaf9093dd4f90016fa3fbd5792a18e3', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '084d2411ee94ad57e354d370b33ab97e7e18901f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6de5015341d40c0cf57da3524cdaf1bdd6b3caeb', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7be6f7dd9ed336cace0a0dc798423e3d6f06d60', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '353ed82d755c1e3ae8dd0cf024141a69ea5f6550', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c85376dfea52e57da6787056ba4b558e54492f11', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e86d87e466d7f8e747f9fb1e20534eea379e1a99', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}]",Kanishka Bansode,96020697,,User,,56,,37,36
1479436818,Added the Redis cache to Cache Organization objects,"<!--
This section can be deleted after reading.

We employ the following branching strategy to simplify the development process and to ensure that only stable code is pushed to the `master` branch:

- `develop`: For unstable code: New features and bug fixes.
- `alpha-x.x.x`: For stability testing: Only bug fixes accepted.
- `master`: Where the stable production ready code lies. Only security related bugs.

-->

<!--
Thanks for submitting a pull request! Please provide enough information so that others can review your pull request.
-->

**What kind of change does this PR introduce?**

<!-- E.g. a bugfix, feature, refactoring, etcâ€¦ -->

**Issue Number:**

Fixes #1374 (part 1)

**Did you add tests for your changes?**

<!--Yes or No. Note: Add unit tests or automation tests for your code.-->
Yes
**Snapshots/Videos:**

<!--Add snapshots or videos wherever possible.-->

**If relevant, did you update the documentation?**

<!--Add link to Talawa-Docs.-->

**Summary**

<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->
<!-- Try to link to an open issue for more information. -->

**Does this PR introduce a breaking change?**
Yes. I have added the doc for the same as well.
<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->

**Other information**

<!--Add extra information about this PR here-->

**Have you read the [contributing guide](https://github.com/PalisadoesFoundation/talawa-api/blob/master/CONTRIBUTING.md)?**

<!--Yes or No-->
Yes.",True,1377,https://api.github.com/repos/PalisadoesFoundation/talawa-api/pulls/1377,https://github.com/PalisadoesFoundation/talawa-api/pull/1377,closed,1352,158,65,33,8,6,0,0,[],2023-08-17 17:38:39+00:00,2023-08-27 13:43:50+00:00,849911.0,"9 days, 20:05:11","[{'comment_id': 1298387092, 'comment_body': 'Do a null check in these instances instead of the ""!"" operator', 'comment_created': datetime.datetime(2023, 8, 18, 12, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1298389053, 'comment_body': 'Remove console log', 'comment_created': datetime.datetime(2023, 8, 18, 12, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1299208836, 'comment_body': 'Since all these are REDIS Variables you can group them  like this\r\n\r\nexport const REDIS {\r\nHost:\r\nPOST:\r\nPASSWORD:\r\n}\r\n', 'comment_created': datetime.datetime(2023, 8, 19, 14, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Kevonia', 'type': 'User'}, {'comment_id': 1299377068, 'comment_body': 'I agree with the current implementation, this would create an unnecessary object', 'comment_created': datetime.datetime(2023, 8, 20, 13, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1304974716, 'comment_body': 'why is these value hard-coded? ', 'comment_created': datetime.datetime(2023, 8, 24, 23, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Kevonia', 'type': 'User'}, {'comment_id': 1306436486, 'comment_body': 'Ohhh no, that is not the config file that is the workflow file in CI/CD. Basically to test the application in the CI/CD, we have to provide the env variables for connection to a MongoDb database and redis instance. Otherwise the server will crash in the container.\r\n\r\nI started the redis service inside the testing container and passed the env variables to connect to those services.\r\n\r\nThey need to be hard-coded because we have to pass the actual value for the connection to happen in the application within the container.', 'comment_created': datetime.datetime(2023, 8, 26, 13, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}]","[{'commit_sha': '350f9fc0be1942bc0d8e70782980cdd23e077ff0', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac171e40bc988cd337c1772573330b804f24b4e1', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb02275005cf652d01cbb7fb9106b97f9efece3', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a84b64d395856f3436ee1e7b8ba4ecff3fca30f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7f420ab2346ea3d759e58581109d60273b64deb', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76634ef88783d95ceffd7b742d24c03911e52cc6', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7c528f5d82a67729aa3ef7f2776e2c630e003c9', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff83e23fc029bbeb12f09107b92c51e1b410031', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6961651692820134db1b57f58676eb76ad6f9a62', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a1d8873ccf8e2bc0db549d441aa20681b8ec4a', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb91dcd7a47a34a66f5e102c5cdd8464f501032', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc0e529ee1cbfe9d694b767606363416e20c15ae', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7abe74d1de9d4dec42c4ae31d4dcf3d3d90f8437', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a0143ab4cf527ea3c3e71a30dad24e5708bcfd8', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '934b1de4bd66fc95e25e79c8f0932782c19b18ac', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a28e7da942328ddb866ba14d87a3a4858be2715', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffab1ca86ff9564594ebf9b487b620df4737d5d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2c9d7711d6a6748ba217a6574ab04dfa41522f2', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0f1b838d0c1471e475213a4251afcbdcd8df41', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb50bda594bc5bc5fed4dd8b2ca72165d46759b0', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c6c72d6092557e203715c5d8ea796a11967eb94', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b091f96bfccf16cde29f5622615a8f25e71026d4', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd05a64a5ca8211501f83b6596475f375f07cff', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b283f24c18a5f2ab8645b6abe225fb9da2827d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec0774323f4e41e2ba6edeffd139649e736b6d4d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4374551d03ec9a40756331209470ac644df8acfd', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12615b453815f63b2b8e4c82352f58bc23f8d672', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54437b0b566246473cf355863cd68c384044a237', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eee8fe24d54060e71b4a30a5a29aab34c8b6ea2', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7ae52e6cf998645af259f8cf6755b126118cfd8', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b27983b1ce298f4e0efdb462f8d00f150efbb67', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee33795a84bf944f631c08b4a530371482e1f835', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc0d60809646598c5642f04251f40382b303503', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}]",Kanishka Bansode,96020697,,User,,56,,37,36
1517876780,"`Post` , `Comment` and `Event` Cache","<!--
This section can be deleted after reading.

We employ the following branching strategy to simplify the development process and to ensure that only stable code is pushed to the `master` branch:

- `develop`: For unstable code: New features and bug fixes.
- `alpha-x.x.x`: For stability testing: Only bug fixes accepted.
- `master`: Where the stable production ready code lies. Only security related bugs.

-->

<!--
Thanks for submitting a pull request! Please provide enough information so that others can review your pull request.
-->

**What kind of change does this PR introduce?**
This PR implements the Redis cache for the collections ->
1. `Post`
2. `Comment`
3. `Event`

Previously a PR to implement caching modules for Organization collections had been merged. This PR aims to do exactly that but for other collections where read operations will be significantly higher than write operations.

<!-- E.g. a bugfix, feature, refactoring, etcâ€¦ -->

**Issue Number:**

Fixes #1374 

**Did you add tests for your changes?**
Yes.
<!--Yes or No. Note: Add unit tests or automation tests for your code.-->

**Snapshots/Videos:**

<!--Add snapshots or videos wherever possible.-->

**If relevant, did you update the documentation?**
I will be making a commit within this PR itself as installation guide has to be updated for MacOS too.
<!--Add link to Talawa-Docs.-->

**Summary**

<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->
<!-- Try to link to an open issue for more information. -->

**Does this PR introduce a breaking change?**

<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->

**Other information**

<!--Add extra information about this PR here-->

**Have you read the [contributing guide](https://github.com/PalisadoesFoundation/talawa-api/blob/master/CONTRIBUTING.md)?**

<!--Yes or No-->
Yes",True,1388,https://api.github.com/repos/PalisadoesFoundation/talawa-api/pulls/1388,https://github.com/PalisadoesFoundation/talawa-api/pull/1388,closed,936,124,44,59,7,15,0,0,[],2023-09-15 20:11:20+00:00,2023-09-23 16:52:10+00:00,679250.0,"7 days, 20:40:50","[{'comment_id': 1327871004, 'comment_body': 'Both test cases seem similar how do you assert that the data is coming from cache?', 'comment_created': datetime.datetime(2023, 9, 16, 0, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1327871380, 'comment_body': 'What do you use to determine the required size of the cache or is this a standard size?', 'comment_created': datetime.datetime(2023, 9, 16, 0, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1327871549, 'comment_body': 'Why is REDIS_HOST potential nullable?', 'comment_created': datetime.datetime(2023, 9, 16, 0, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1327871994, 'comment_body': 'Not sure I understand by this was done like this', 'comment_created': datetime.datetime(2023, 9, 16, 0, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1327872181, 'comment_body': 'While is `ids` potentially an `any[]`?', 'comment_created': datetime.datetime(2023, 9, 16, 0, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1327872330, 'comment_body': 'Remove console log. Do we have a dedicated logging tool for the API?', 'comment_created': datetime.datetime(2023, 9, 16, 0, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1327872491, 'comment_body': 'Do we use console log for all our logging. If so then this is fine for now but we should look into a new logging tool such as Bunyan.', 'comment_created': datetime.datetime(2023, 9, 16, 0, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1327902522, 'comment_body': '@Rumone Well The size of the cache for now is basically a placeholder value. In production, we will obviously have to account for the size of the actual real data  in our DB as well as the total size of the mainframe where the API is hosted since this is going to be an in-memory cache to determine the size of the Cache. \r\n\r\na few months back @palisadoes had suggested that a 100GB VPS can be used for hosting the API. So around 0.1 percent of that is 100MB and that is basically the size of the placeholder value\r\n\r\nDo you think I should make the size a global variable so that it can be changed later?', 'comment_created': datetime.datetime(2023, 9, 16, 4, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1327902978, 'comment_body': 'Well, the assertion is a little naive but basically, we can say that the data is coming from cache from the code coverage of the file in the tests. \r\n\r\n\r\n\r\nFor the second test case -> If the returned data was from the db query (instead of the cache) again like the first test case then that would mean the conditional statement to check whether the comment exists in the cache -> if true returning the given comment from cache would not be hit and that would have reflected in the code coverage.\r\n\r\nThe fact that in the second case, we hit those lines specifically and the returned comment from the cache has an expected structure tells us that comments are indeed being returned from the cache.\r\n', 'comment_created': datetime.datetime(2023, 9, 16, 4, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1327903433, 'comment_body': ""Yeah Sorry, that's actually my bad, WIll make changes to remove console.log. It was only for my debugging purpose.\r\n\r\nI think we do use a logger library but I think that is more for errors for now.\r\n\r\nused the logger library currently being used instead of `console.error` . Removed `console.log`.\r\n"", 'comment_created': datetime.datetime(2023, 9, 16, 4, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1327903946, 'comment_body': ""Yeah so basically in the cache we are storing our data in JSON format as values, the problem is when we parse the JSON object after fetching a post, comment, org , event etc the values for fields after parsing an object are all converted to primitive data types. \r\n\r\nSo in the resolvers/model there are certain types like Mongoose Object ID or JS date-time type which are all converted to string values. This was causing the tests to fail due to runtime errors and that's why this extra step was needed. "", 'comment_created': datetime.datetime(2023, 9, 16, 4, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1327903965, 'comment_body': 'Ohh good catch , its not needed, will fix', 'comment_created': datetime.datetime(2023, 9, 16, 4, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1327907377, 'comment_body': 'the `any[]` type is also not needed, removed it.', 'comment_created': datetime.datetime(2023, 9, 16, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kb-0311', 'type': 'User'}, {'comment_id': 1327915093, 'comment_body': 'The value is used in one location so no need to make it a global variable.', 'comment_created': datetime.datetime(2023, 9, 16, 6, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}, {'comment_id': 1327915371, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2023, 9, 16, 6, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TheJoshDotDev', 'type': 'User'}]","[{'commit_sha': '350f9fc0be1942bc0d8e70782980cdd23e077ff0', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac171e40bc988cd337c1772573330b804f24b4e1', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb02275005cf652d01cbb7fb9106b97f9efece3', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a84b64d395856f3436ee1e7b8ba4ecff3fca30f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7f420ab2346ea3d759e58581109d60273b64deb', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76634ef88783d95ceffd7b742d24c03911e52cc6', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7c528f5d82a67729aa3ef7f2776e2c630e003c9', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff83e23fc029bbeb12f09107b92c51e1b410031', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6961651692820134db1b57f58676eb76ad6f9a62', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a1d8873ccf8e2bc0db549d441aa20681b8ec4a', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb91dcd7a47a34a66f5e102c5cdd8464f501032', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc0e529ee1cbfe9d694b767606363416e20c15ae', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7abe74d1de9d4dec42c4ae31d4dcf3d3d90f8437', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a0143ab4cf527ea3c3e71a30dad24e5708bcfd8', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '934b1de4bd66fc95e25e79c8f0932782c19b18ac', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a28e7da942328ddb866ba14d87a3a4858be2715', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffab1ca86ff9564594ebf9b487b620df4737d5d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2c9d7711d6a6748ba217a6574ab04dfa41522f2', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b0f1b838d0c1471e475213a4251afcbdcd8df41', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb50bda594bc5bc5fed4dd8b2ca72165d46759b0', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c6c72d6092557e203715c5d8ea796a11967eb94', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b091f96bfccf16cde29f5622615a8f25e71026d4', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd05a64a5ca8211501f83b6596475f375f07cff', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b283f24c18a5f2ab8645b6abe225fb9da2827d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec0774323f4e41e2ba6edeffd139649e736b6d4d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4374551d03ec9a40756331209470ac644df8acfd', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12615b453815f63b2b8e4c82352f58bc23f8d672', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54437b0b566246473cf355863cd68c384044a237', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eee8fe24d54060e71b4a30a5a29aab34c8b6ea2', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7ae52e6cf998645af259f8cf6755b126118cfd8', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b27983b1ce298f4e0efdb462f8d00f150efbb67', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee33795a84bf944f631c08b4a530371482e1f835', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc0d60809646598c5642f04251f40382b303503', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef23192e63c4cf17ab10e082b8a8210bfa6df1da', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f63affd6af93de74f7f1cf3d6499e8e6f9266be1', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6ca172a1cba7349f42a36746a07d244f9c14051', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffe47622d7677e88806d0c37eb333a033e5397a5', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddd3da52a28ce4bac55d8e0e4fd52e7147a750cd', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24c0b5b6f229ff7c5f46239d388a7817361e9c65', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ad9c9b23adc905f71a342c29bade266d5504ad', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '046fd78e7428e5adb66ba42b8beaf15553630a9f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b823434fd6685184c7bd23a9694cb965cec65760', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5aa6e9bb22623f6ab0d9caccca95926b910b7ce', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2419d50073f35736d58c73dc1a443cb977ab38f6', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e45980a080bca6c19e4f4d2c1d0859198f1854a', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bbbf9f7d831bce3945c34b92be50a4fb7be2287', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3978b533e1c77cf7c1ceb59c1aac3a8a8641b3e', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47e32bf447ffeb1df6c30715d755ee27965aa79b', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32bfbd41f6bd2a02226b0f27e73d2fa6947607ab', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6cfd8f5ac69a4d7fa23d9873a47b614812f03d', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b90f8f78ae027a7c8f3bd8c1cb87b87c3a852c', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b01e98ab4eabf9293036ea754c8648588a606e4e', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd963e31672ab67ccdba4c3dcca24c71294314f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c070cc2ee25dc36fc0510fd92ca6dcec0e940a3', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09779f20b884d8bd1cff031b9e3d4410cc4e000f', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0908bbfdb4dfa7d0215637480fcb694878b6c42', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2e29b8d263a489d744c45e36836e6475048d7f9', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fe0630912128e1f3f143c5b040ec8201336d552', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98979084fceff4e9685a4ebbe4a504078d578d8c', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}]",Kanishka Bansode,96020697,,User,,56,,37,36
1246254775,Enforces stricter access control and fixes a lot of related Mutation bugs ,"<!--
This section can be deleted after reading.

This PR implements access control for the API based on user role and send back appropriate error messages.

Complete details can be found here ->
https://thepalisa for the other bugfixes related to access control can be-dyb6419.slack.com/archives/CSWH4PN0M/p1676716699158889
We employ the following branching strategy to simplify the development process and to ensure that only stable code is pushed to the `master` branch:

- `develop`: For unstable code: New features and bug fixes.
- `alpha-x.x.x`: For stability testing: Only bug fixes accepted.
- `master`: Where the stable production ready code lies. Only security related bugs.

-->

<!--
Thanks for submitting a pull request! Please provide enough information so that others can review your pull request.
-->

**What kind of change does this PR introduce?**

<!-- E.g. a bugfix, feature, refactoring, etcâ€¦ -->
bugfix
**Issue Number:**

Fixes #1066 

**Did you add tests for your changes?**
Yes
<!--Yes or No. Note: Add unit tests or automation tests for your code.-->

**Snapshots/Videos:**

<!--Add snapshots or videos wherever possible.-->

**If relevant, did you update the documentation?**

<!--Add link to Talawa-Docs.-->

**Summary**
THe PR aims to - 
1. Implement a form of access control for specific mutations based on user role (superadmin , admin etc) with an appropriate error message when needed.
2. Fix the bug in blocking users from a organization where in the admin could block himself. After this PR that will not be possible.
3. Fix the logic for `removeAdmin` , `rejectAdmin` and `acceptAdmin` mutations.
<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->
<!-- Try to link to an open issue for more information. -->

**Does this PR introduce a breaking change?**

<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->

**Other information**

<!--Add extra information about this PR here-->

**Have you read the [contributing guide](https://github.com/PalisadoesFoundation/talawa-api/blob/master/CONTRIBUTING.md)?**

<!--Yes or No-->
",True,1073,https://api.github.com/repos/PalisadoesFoundation/talawa-api/pulls/1073,https://github.com/PalisadoesFoundation/talawa-api/pull/1073,closed,906,282,36,20,10,0,0,0,[],2023-02-19 10:29:42+00:00,2023-02-20 16:28:48+00:00,107946.0,"1 day, 5:59:06",[],"[{'commit_sha': 'f6657b32fe26680f194e5b55c304729ed2ab84cc', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b13dd9ddb87e9ae9e81c23eb7989de3b0e7c16', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a69692fc35ba45217e3bc2b66a5e8e3b2f50ac9', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a818c1e752914d88d4aae7a75cb49dcdc46a16a0', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ef4223b6078069a25c474d9fd71b4af8df6aea6', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36985520347d219ed3813a1c98ab3e9c72aaaeaf', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525be9a206979c1727c28791c463411e9342dff8', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '155b4434c37ff5aa3c73db1e86271ec9e4f2df21', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08b5d28a3299e82d0724cab25e58463a43397325', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a336ac5680ec679af1701aa39a050e15aa981d1a', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbb3e43ac3c6ed08fb020e1527dec8b27684c33a', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d7fd068ba7722e94a627eeb4ac8fbcde2e24345', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7342cc1837e6f4abd5fe767a6e391fd71b82aace', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60b79f4e913b1496a3a22e60a3cf0dc1148acf6c', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0bdf0757a17cec23e6a6b92de1ab72fbc976468', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02926a3f0d6212f7287b07f3f2f6b6fd28229ab2', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '114a4bb562406c470a2fc674317ad6719bb06d80', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d95594ea8aaaa1e404ceb74412dd2786064576', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42dfe4f730bd070797e7967093bec69cc92cfd29', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e68bfaab9e2504f626937ecb2383c9cfd7bb78', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}]",Kanishka Bansode,96020697,,User,,56,,37,36
1557007361,SSL + Encryption helpers,"<!--
This section can be deleted after reading.

We employ the following branching strategy to simplify the development process and to ensure that only stable code is pushed to the `master` branch:

- `develop`: For unstable code: New features and bug fixes.
- `alpha-x.x.x`: For stability testing: Only bug fixes accepted.
- `master`: Where the stable production ready code lies. Only security related bugs.

-->

<!--
Thanks for submitting a pull request! Please provide enough information so that others can review your pull request.
-->

**What kind of change does this PR introduce?**

<!-- E.g. a bugfix, feature, refactoring, etcâ€¦ -->
feature
1. Configures SSL and HTTPS in production
2. Wrote helper text encryption functions
**Issue Number:**

Fixes #1406 

**Did you add tests for your changes?**

<!--Yes or No. Note: Add unit tests or automation tests for your code.-->

**Snapshots/Videos:**

<!--Add snapshots or videos wherever possible.-->

**If relevant, did you update the documentation?**

<!--Add link to Talawa-Docs.-->

**Summary**

<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->
<!-- Try to link to an open issue for more information. -->

**Does this PR introduce a breaking change?**

<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->

**Other information**

<!--Add extra information about this PR here-->

**Have you read the [contributing guide](https://github.com/PalisadoesFoundation/talawa-api/blob/master/CONTRIBUTING.md)?**

<!--Yes or No-->
",True,1407,https://api.github.com/repos/PalisadoesFoundation/talawa-api/pulls/1407,https://github.com/PalisadoesFoundation/talawa-api/pull/1407,closed,72,4,7,5,6,0,0,0,[],2023-10-14 16:10:31+00:00,2023-10-18 18:49:06+00:00,355115.0,"4 days, 2:38:35",[],"[{'commit_sha': '3cb22d93d39eb86bf72ace3534f6b96d4b022836', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db95dfe3b32e0f855abd4f8ab7714a4ff5a63431', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4224b9b2354cae781b418353b736e6a423064c8b', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ca68c06905a4146417ae5fe40086d37e360ce8', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cd0e6773da6efa3e1690b802860fd0c23e55b54', 'committer_username': 'kb-0311', 'committer_name': 'Kanishka Bansode', 'committer_email': None, 'commit_date': datetime.datetime(2021, 12, 12, 18, 32, 29, tzinfo=datetime.timezone.utc)}]",Kanishka Bansode,96020697,,User,,56,,37,36

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
228531332,talawa-api,PalisadoesFoundation/talawa-api,TypeScript,695,208,15,99,1332,39,6,8,"[{'id': 1567959245, 'number': 1414, 'closed': datetime.datetime(2023, 10, 22, 17, 13, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 22, 4, 20, 34, tzinfo=datetime.timezone.utc), 'time_taken': 46357.0, 'time_delta': '12:52:37', 'additions': 19, 'deletions': 0, 'state': 'closed'}, {'id': 1557007361, 'number': 1407, 'closed': datetime.datetime(2023, 10, 18, 18, 49, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 14, 16, 10, 31, tzinfo=datetime.timezone.utc), 'time_taken': 355115.0, 'time_delta': '4 days, 2:38:35', 'additions': 72, 'deletions': 4, 'state': 'closed'}, {'id': 1517876780, 'number': 1388, 'closed': datetime.datetime(2023, 9, 23, 16, 52, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 15, 20, 11, 20, tzinfo=datetime.timezone.utc), 'time_taken': 679250.0, 'time_delta': '7 days, 20:40:50', 'additions': 936, 'deletions': 124, 'state': 'closed'}, {'id': 1479436818, 'number': 1377, 'closed': datetime.datetime(2023, 8, 27, 13, 43, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 17, 17, 38, 39, tzinfo=datetime.timezone.utc), 'time_taken': 849911.0, 'time_delta': '9 days, 20:05:11', 'additions': 1352, 'deletions': 158, 'state': 'closed'}, {'id': 1445257181, 'number': 1365, 'closed': datetime.datetime(2023, 9, 24, 13, 57, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 22, 8, 48, 40, tzinfo=datetime.timezone.utc), 'time_taken': 5548113.0, 'time_delta': '64 days, 5:08:33', 'additions': 1260, 'deletions': 694, 'state': 'closed'}, {'id': 1411154924, 'number': 1351, 'closed': datetime.datetime(2023, 6, 29, 20, 22, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 7, 31, 14, tzinfo=datetime.timezone.utc), 'time_taken': 132649.0, 'time_delta': '1 day, 12:50:49', 'additions': 18982, 'deletions': 7683, 'state': 'closed'}, {'id': 1377791994, 'number': 1342, 'closed': datetime.datetime(2023, 6, 4, 20, 21, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 15, 2, 28, tzinfo=datetime.timezone.utc), 'time_taken': 19124.0, 'time_delta': '5:18:44', 'additions': 0, 'deletions': 11, 'state': 'closed'}, {'id': 1367819765, 'number': 1340, 'closed': datetime.datetime(2023, 6, 4, 13, 45, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 28, 8, 5, 13, tzinfo=datetime.timezone.utc), 'time_taken': 625194.0, 'time_delta': '7 days, 5:39:54', 'additions': 19908, 'deletions': 1597, 'state': 'closed'}, {'id': 1290349753, 'number': 1230, 'closed': datetime.datetime(2023, 6, 4, 13, 21, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 26, 13, 40, 28, tzinfo=datetime.timezone.utc), 'time_taken': 6046847.0, 'time_delta': '69 days, 23:40:47', 'additions': 1220, 'deletions': 530, 'state': 'closed'}, {'id': 1285799583, 'number': 1218, 'closed': datetime.datetime(2023, 3, 22, 14, 54, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 22, 12, 43, 57, tzinfo=datetime.timezone.utc), 'time_taken': 7809.0, 'time_delta': '2:10:09', 'additions': 0, 'deletions': 35, 'state': 'closed'}, {'id': 1272332644, 'number': 1168, 'closed': datetime.datetime(2023, 3, 19, 16, 58, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 12, 14, 6, 45, tzinfo=datetime.timezone.utc), 'time_taken': 615076.0, 'time_delta': '7 days, 2:51:16', 'additions': 690, 'deletions': 125, 'state': 'closed'}, {'id': 1267299191, 'number': 1137, 'closed': datetime.datetime(2023, 3, 8, 13, 16, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 8, 3, 51, 40, tzinfo=datetime.timezone.utc), 'time_taken': 33884.0, 'time_delta': '9:24:44', 'additions': 27, 'deletions': 273, 'state': 'closed'}, {'id': 1263165373, 'number': 1115, 'closed': datetime.datetime(2023, 3, 6, 6, 12, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 4, 18, 16, 14, tzinfo=datetime.timezone.utc), 'time_taken': 129365.0, 'time_delta': '1 day, 11:56:05', 'additions': 234, 'deletions': 410, 'state': 'closed'}, {'id': 1262274459, 'number': 1110, 'closed': datetime.datetime(2023, 3, 5, 13, 29, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 3, 15, 37, 34, tzinfo=datetime.timezone.utc), 'time_taken': 165110.0, 'time_delta': '1 day, 21:51:50', 'additions': 300, 'deletions': 2, 'state': 'closed'}, {'id': 1255125706, 'number': 1094, 'closed': datetime.datetime(2023, 2, 27, 21, 11, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 27, 9, 21, 57, tzinfo=datetime.timezone.utc), 'time_taken': 42551.0, 'time_delta': '11:49:11', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 1252145975, 'number': 1086, 'closed': datetime.datetime(2023, 2, 25, 20, 17, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 23, 18, 56, 49, tzinfo=datetime.timezone.utc), 'time_taken': 177631.0, 'time_delta': '2 days, 1:20:31', 'additions': 256, 'deletions': 18, 'state': 'closed'}, {'id': 1248974363, 'number': 1078, 'closed': datetime.datetime(2023, 2, 21, 19, 21, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 21, 16, 25, 21, tzinfo=datetime.timezone.utc), 'time_taken': 10594.0, 'time_delta': '2:56:34', 'additions': 229, 'deletions': 178, 'state': 'closed'}, {'id': 1246254775, 'number': 1073, 'closed': datetime.datetime(2023, 2, 20, 16, 28, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 19, 10, 29, 42, tzinfo=datetime.timezone.utc), 'time_taken': 107946.0, 'time_delta': '1 day, 5:59:06', 'additions': 906, 'deletions': 282, 'state': 'closed'}, {'id': 1238046507, 'number': 1065, 'closed': datetime.datetime(2023, 2, 13, 12, 36, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 12, 13, 14, 44, tzinfo=datetime.timezone.utc), 'time_taken': 84109.0, 'time_delta': '23:21:49', 'additions': 175, 'deletions': 56, 'state': 'closed'}, {'id': 1237755837, 'number': 1056, 'closed': datetime.datetime(2023, 2, 13, 12, 35, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 11, 15, 38, 42, tzinfo=datetime.timezone.utc), 'time_taken': 161781.0, 'time_delta': '1 day, 20:56:21', 'additions': 0, 'deletions': 10, 'state': 'closed'}, {'id': 1236891246, 'number': 1046, 'closed': datetime.datetime(2023, 2, 10, 18, 8, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 10, 15, 35, 47, tzinfo=datetime.timezone.utc), 'time_taken': 9135.0, 'time_delta': '2:32:15', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1235722187, 'number': 1042, 'closed': datetime.datetime(2023, 2, 10, 15, 11, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 9, 20, 41, 38, tzinfo=datetime.timezone.utc), 'time_taken': 66593.0, 'time_delta': '18:29:53', 'additions': 177, 'deletions': 176, 'state': 'closed'}, {'id': 1233126929, 'number': 1033, 'closed': datetime.datetime(2023, 2, 8, 20, 24, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 8, 7, 41, 17, tzinfo=datetime.timezone.utc), 'time_taken': 45779.0, 'time_delta': '12:42:59', 'additions': 56, 'deletions': 27, 'state': 'closed'}, {'id': 1232475336, 'number': 1031, 'closed': datetime.datetime(2023, 2, 7, 19, 53, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 7, 19, 13, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2409.0, 'time_delta': '0:40:09', 'additions': 141, 'deletions': 0, 'state': 'closed'}, {'id': 1231877873, 'number': 1028, 'closed': datetime.datetime(2023, 2, 7, 19, 48, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 7, 12, 7, 47, tzinfo=datetime.timezone.utc), 'time_taken': 27672.0, 'time_delta': '7:41:12', 'additions': 124, 'deletions': 5, 'state': 'closed'}, {'id': 1229097259, 'number': 998, 'closed': datetime.datetime(2023, 2, 5, 17, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 4, 12, 45, 48, tzinfo=datetime.timezone.utc), 'time_taken': 101832.0, 'time_delta': '1 day, 4:17:12', 'additions': 766, 'deletions': 1500, 'state': 'closed'}, {'id': 1226547557, 'number': 980, 'closed': datetime.datetime(2023, 2, 2, 17, 56, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 2, 12, 56, 38, tzinfo=datetime.timezone.utc), 'time_taken': 18011.0, 'time_delta': '5:00:11', 'additions': 36, 'deletions': 4, 'state': 'closed'}, {'id': 1224318128, 'number': 963, 'closed': datetime.datetime(2023, 2, 2, 18, 22, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 1, 5, 56, 19, tzinfo=datetime.timezone.utc), 'time_taken': 131148.0, 'time_delta': '1 day, 12:25:48', 'additions': 130, 'deletions': 0, 'state': 'closed'}, {'id': 1223598253, 'number': 959, 'closed': datetime.datetime(2023, 1, 31, 17, 29, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 16, 38, 7, tzinfo=datetime.timezone.utc), 'time_taken': 3099.0, 'time_delta': '0:51:39', 'additions': 195, 'deletions': 10, 'state': 'closed'}, {'id': 1221799436, 'number': 956, 'closed': datetime.datetime(2023, 1, 31, 12, 22, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 30, 15, 9, 30, tzinfo=datetime.timezone.utc), 'time_taken': 76376.0, 'time_delta': '21:12:56', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1220635029, 'number': 948, 'closed': datetime.datetime(2023, 1, 29, 15, 2, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 29, 13, 43, 11, tzinfo=datetime.timezone.utc), 'time_taken': 4761.0, 'time_delta': '1:19:21', 'additions': 14, 'deletions': 14, 'state': 'closed'}, {'id': 1220312068, 'number': 939, 'closed': datetime.datetime(2023, 1, 28, 16, 54, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 28, 15, 31, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4937.0, 'time_delta': '1:22:17', 'additions': 219, 'deletions': 51, 'state': 'closed'}, {'id': 1220183667, 'number': 936, 'closed': datetime.datetime(2023, 1, 28, 15, 39, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 28, 7, 35, 19, tzinfo=datetime.timezone.utc), 'time_taken': 29066.0, 'time_delta': '8:04:26', 'additions': 11, 'deletions': 7, 'state': 'closed'}, {'id': 1218870181, 'number': 931, 'closed': datetime.datetime(2023, 1, 29, 12, 22, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 27, 6, 44, 47, tzinfo=datetime.timezone.utc), 'time_taken': 193060.0, 'time_delta': '2 days, 5:37:40', 'additions': 317, 'deletions': 48, 'state': 'closed'}, {'id': 1217496092, 'number': 927, 'closed': datetime.datetime(2023, 1, 26, 13, 15, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 26, 7, 5, 8, tzinfo=datetime.timezone.utc), 'time_taken': 22231.0, 'time_delta': '6:10:31', 'additions': 312, 'deletions': 0, 'state': 'closed'}, {'id': 1212648433, 'number': 883, 'closed': datetime.datetime(2023, 1, 27, 16, 56, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 22, 16, 10, 55, tzinfo=datetime.timezone.utc), 'time_taken': 434748.0, 'time_delta': '5 days, 0:45:48', 'additions': 405, 'deletions': 12, 'state': 'closed'}, {'id': 1097478252, 'number': 774, 'closed': datetime.datetime(2022, 11, 1, 15, 51, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 24, 13, 28, 18, tzinfo=datetime.timezone.utc), 'time_taken': 699766.0, 'time_delta': '8 days, 2:22:46', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 966522268, 'number': 719, 'closed': datetime.datetime(2022, 7, 6, 18, 43, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 6, 52, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1943455.0, 'time_delta': '22 days, 11:50:55', 'additions': 1, 'deletions': 14, 'state': 'closed'}]"
346573761,talawa-docs,PalisadoesFoundation/talawa-docs,JavaScript,142,42,6,67,1530,0,3,0,"[{'id': 1292372662, 'number': 593, 'closed': datetime.datetime(2023, 7, 20, 19, 14, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 28, 5, 40, 26, tzinfo=datetime.timezone.utc), 'time_taken': 9898458.0, 'time_delta': '114 days, 13:34:18', 'additions': 1117, 'deletions': 7, 'state': 'closed'}, {'id': 1284528431, 'number': 549, 'closed': datetime.datetime(2023, 3, 22, 1, 25, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 21, 16, 7, 32, tzinfo=datetime.timezone.utc), 'time_taken': 33463.0, 'time_delta': '9:17:43', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 1254075797, 'number': 319, 'closed': datetime.datetime(2023, 3, 21, 16, 7, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 25, 4, 23, 51, tzinfo=datetime.timezone.utc), 'time_taken': 2115829.0, 'time_delta': '24 days, 11:43:49', 'additions': 6, 'deletions': 6, 'state': 'closed'}]"
