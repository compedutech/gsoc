pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
666524629,Add Semanticdb data models generated from semanticdb.proto,"Related issues
- https://github.com/lampepfl/dotty/issues/12766
- https://github.com/scalameta/scalameta/issues/2367

## Abstract
This PR adds Semanticdb's data models (e.g., SymbolInformation, ClassSignature, etc., see https://scalameta.org/docs/semanticdb/specification.html#data-model) generated from `semanticdb.proto`, and the first step to adding `Signature` information (and `Synthetics` section in the future) to SemanticDB extracted from Scala3.

## How these scala codes are generated
They (in package `dotty.tools.dotc.semanticdb`) are generated from https://github.com/tanishiking/semanticdb-for-scala3 that

- Automatically generates Scala code from [semanticdb.proto](https://github.com/tanishiking/semanticdb-for-scala3/blob/d0d04f068d9c39eec77b8d5c68bf96efd74cb8c7/generator/src/main/protobuf/scalameta.proto) which is basically copied from https://github.com/scalameta/scalameta/blob/main/semanticdb/semanticdb/semanticdb.proto using [ScalaPB](https://scalapb.github.io/)
- Adjust generated code using Scalafix
  - To remove dependencies to `scalapb-runtime` and `com.google.protobuf`
  - Add `derives CanEqual` to generated class and traits

And I copy-and-pasted generated codes.

## Why I decided to generate Scala code using Scalapb and Scalafix
See: https://github.com/scalameta/scalameta/issues/2367

### Possible alternative options
- Add `scalapb-runtime` dependency to `scala3`
  - and generate scala code using scalapb in this (lampepfl/dotty) project.
- If there's another possible option, let me know!",True,12780,https://api.github.com/repos/scala/scala3/pulls/12780,https://github.com/scala/scala3/pull/12780,closed,7550,557,23,4,1,4,1,1,[{'name': 'area:semanticdb'}],2021-06-10 05:31:49+00:00,2021-06-14 23:48:59+00:00,411430.0,"4 days, 18:17:10","[{'comment_id': 648883117, 'comment_body': 'Maybe I should comment it is generated from `tanishiking/semanticdb-for-scala3` ?', 'comment_created': datetime.datetime(2021, 6, 10, 6, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 649819030, 'comment_body': ""Where is this TODO coming from? Let's remove it if it's not needed."", 'comment_created': datetime.datetime(2021, 6, 11, 9, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 650454195, 'comment_body': 'Removed!\r\n\r\nActually this method come from https://android.googlesource.com/platform/external/protobuf/+/7fca48d8ce97f7ba3ab8eea5c472f1ad3711762f/java/src/main/java/com/google/protobuf/CodedInputStream.java#408 and cemented out the validation part, because the callees of `readStringRequireUtf8` is only from test https://github.com/tanishiking/dotty/blob/6a534f298b4c3b85af4bd19dc039a36473f0382b/compiler/src/dotty/tools/dotc/semanticdb/Tools.scala#L47 and we can safely parse Semanticdb without validation.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 13, 1, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 650454429, 'comment_body': 'I\'m not sure where they (the Scala codes under `semancidb.internal`  package) originally come from, if they are from https://android.googlesource.com/platform/external/protobuf/+/7fca48d8ce97f7ba3ab8eea5c472f1ad3711762f/java/src/main/java/com/google/protobuf , maybe we should add the copyright header \r\n\r\n```java\r\n// Protocol Buffers - Google\'s data interchange format\r\n// Copyright 2008 Google Inc.  All rights reserved.\r\n// https://developers.google.com/protocol-buffers/\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n//     * Redistributions of source code must retain the above copyright\r\n// notice, this list of conditions and the following disclaimer.\r\n//     * Redistributions in binary form must reproduce the above\r\n// copyright notice, this list of conditions and the following disclaimer\r\n// in the documentation and/or other materials provided with the\r\n// distribution.\r\n//     * Neither the name of Google Inc. nor the names of its\r\n// contributors may be used to endorse or promote products derived from\r\n// this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n```\r\n\r\nAs it says,\r\n\r\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n\r\n> //     * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.', 'comment_created': datetime.datetime(2021, 6, 13, 1, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}]","[{'commit_sha': '09046fefb53af1e413a7db75b1fa15a2b22bed8f', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2af77f63cd77935c9b2247cc719c890abcef6b2', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a534f298b4c3b85af4bd19dc039a36473f0382b', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c9b4fa10faaf48f9d62a2c8f4182bebe173e57', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
666524629,Add Semanticdb data models generated from semanticdb.proto,"Related issues
- https://github.com/lampepfl/dotty/issues/12766
- https://github.com/scalameta/scalameta/issues/2367

## Abstract
This PR adds Semanticdb's data models (e.g., SymbolInformation, ClassSignature, etc., see https://scalameta.org/docs/semanticdb/specification.html#data-model) generated from `semanticdb.proto`, and the first step to adding `Signature` information (and `Synthetics` section in the future) to SemanticDB extracted from Scala3.

## How these scala codes are generated
They (in package `dotty.tools.dotc.semanticdb`) are generated from https://github.com/tanishiking/semanticdb-for-scala3 that

- Automatically generates Scala code from [semanticdb.proto](https://github.com/tanishiking/semanticdb-for-scala3/blob/d0d04f068d9c39eec77b8d5c68bf96efd74cb8c7/generator/src/main/protobuf/scalameta.proto) which is basically copied from https://github.com/scalameta/scalameta/blob/main/semanticdb/semanticdb/semanticdb.proto using [ScalaPB](https://scalapb.github.io/)
- Adjust generated code using Scalafix
  - To remove dependencies to `scalapb-runtime` and `com.google.protobuf`
  - Add `derives CanEqual` to generated class and traits

And I copy-and-pasted generated codes.

## Why I decided to generate Scala code using Scalapb and Scalafix
See: https://github.com/scalameta/scalameta/issues/2367

### Possible alternative options
- Add `scalapb-runtime` dependency to `scala3`
  - and generate scala code using scalapb in this (lampepfl/dotty) project.
- If there's another possible option, let me know!",True,12780,https://api.github.com/repos/scala/scala3/pulls/12780,https://github.com/scala/scala3/pull/12780,closed,7550,557,23,4,1,4,1,1,[{'name': 'area:semanticdb'}],2021-06-10 05:31:49+00:00,2021-06-14 23:48:59+00:00,411430.0,"4 days, 18:17:10","[{'comment_id': 648883117, 'comment_body': 'Maybe I should comment it is generated from `tanishiking/semanticdb-for-scala3` ?', 'comment_created': datetime.datetime(2021, 6, 10, 6, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 649819030, 'comment_body': ""Where is this TODO coming from? Let's remove it if it's not needed."", 'comment_created': datetime.datetime(2021, 6, 11, 9, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 650454195, 'comment_body': 'Removed!\r\n\r\nActually this method come from https://android.googlesource.com/platform/external/protobuf/+/7fca48d8ce97f7ba3ab8eea5c472f1ad3711762f/java/src/main/java/com/google/protobuf/CodedInputStream.java#408 and cemented out the validation part, because the callees of `readStringRequireUtf8` is only from test https://github.com/tanishiking/dotty/blob/6a534f298b4c3b85af4bd19dc039a36473f0382b/compiler/src/dotty/tools/dotc/semanticdb/Tools.scala#L47 and we can safely parse Semanticdb without validation.\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 13, 1, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 650454429, 'comment_body': 'I\'m not sure where they (the Scala codes under `semancidb.internal`  package) originally come from, if they are from https://android.googlesource.com/platform/external/protobuf/+/7fca48d8ce97f7ba3ab8eea5c472f1ad3711762f/java/src/main/java/com/google/protobuf , maybe we should add the copyright header \r\n\r\n```java\r\n// Protocol Buffers - Google\'s data interchange format\r\n// Copyright 2008 Google Inc.  All rights reserved.\r\n// https://developers.google.com/protocol-buffers/\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n//     * Redistributions of source code must retain the above copyright\r\n// notice, this list of conditions and the following disclaimer.\r\n//     * Redistributions in binary form must reproduce the above\r\n// copyright notice, this list of conditions and the following disclaimer\r\n// in the documentation and/or other materials provided with the\r\n// distribution.\r\n//     * Neither the name of Google Inc. nor the names of its\r\n// contributors may be used to endorse or promote products derived from\r\n// this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n```\r\n\r\nAs it says,\r\n\r\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n\r\n> //     * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.', 'comment_created': datetime.datetime(2021, 6, 13, 1, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}]","[{'commit_sha': '09046fefb53af1e413a7db75b1fa15a2b22bed8f', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2af77f63cd77935c9b2247cc719c890abcef6b2', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a534f298b4c3b85af4bd19dc039a36473f0382b', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c9b4fa10faaf48f9d62a2c8f4182bebe173e57', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
674307015,Signature information in Semanticdb,"Related: https://github.com/lampepfl/dotty/issues/12766

This PR enables Scala3 to generate `Signature` information in Semanticdb. I have some questions for model some Scala3 types into Semanticdb types: 

### Future work? (in other PR)
- [ ] Do not encode `F[T][U]` to `F[T, U]` (need extending SemanticDB).
  - https://github.com/lampepfl/dotty/pull/12885#discussion_r677519839
  - https://github.com/scalameta/scalameta/issues/2450
- [ ] Traverse the symbol from `TypeTree`
  - https://github.com/lampepfl/dotty/pull/12885#discussion_r673328278
  - https://github.com/lampepfl/dotty/pull/13284
- [ ] Nested annotation
  - https://github.com/lampepfl/dotty/pull/12885#discussion_r665526261
  - https://github.com/lampepfl/dotty/issues/13291
- [ ] Use StringBuilder in pprint?
  - https://github.com/lampepfl/dotty/pull/12885#discussion_r663064909
- [x] Support inline property
  - https://github.com/lampepfl/dotty/pull/12885#discussion_r661607881
  - done https://github.com/lampepfl/dotty/pull/13239
- [ ] Support MatchType and LambdaType

### TODO (in this PR)
- [x] Exclude wildcard types in an existential type
  - https://github.com/lampepfl/dotty/pull/12885#discussion_r678361643
- [x] Remove synthetic symbols from occurrences
  - https://github.com/lampepfl/dotty/commit/fd3b71ca620c7e40dd36a004e614e49614219b44
  - [x] Add package object symbol to occurrences
    - https://github.com/lampepfl/dotty/commit/4f60d9f1828dc68cee40192993280e6af987950d
  - [x] Add secondary constructor to occurrences
    - https://github.com/lampepfl/dotty/commit/ba8140f03b360f869dc0e3695701647e2be107dc
- [x] Generate fake symbol for refinements
  - https://github.com/lampepfl/dotty/pull/12885#discussion_r677483330


---


### Overview
- [x] Generate Signature information for Types except `MatchType` and `TypeLambda`
  - There might be some bugs though
- [x] Add pretty-printer for signature and update metac.expect
  - Still, it's crappy... (might be better to just copy-and-paste from metap?)
- [x] Add test for Scala3 types
- [ ] Support `MatchType` and `TypeLambda` (won't support in this PR)

---

<details>
<summary>Solved Questions</summary>

## Can we retrieve declarations' symbols from RefinedType?
I'm trying to model `RefinedType` in Scala3 by `StructuralType` in Semanticdb. As `StructuralType`'s declarations are modeled as [Scope](https://scalameta.org/docs/semanticdb/specification.html#scope), I try to retrieve all the declarations' symbols of `RefinedType`.
For example, `{ def x: Int; def y: Int }` in `def m (x: {def x: Int; def y: Int})`, we need the symbols for `def x` and `def y`.

In Scala2, [RefinedTypes has their declarations as `Scope` directly](https://github.com/scala/scala/blob/15e005f324ab8634a2beb428ff2b15552c2af243/src/reflect/scala/reflect/internal/Types.scala#L1810-L1816), and therefore [scalameta can convert them to Semanticdb Scope](https://github.com/scalameta/scalameta/blob/ff2f5647f721c711bdac41e3d8dbc397fe0cc7cd/semanticdb/scalac/library/src/main/scala/scala/meta/internal/semanticdb/scalac/TypeOps.scala#L45).

However, in Scala3, [the information RefinedType have is only (declarations') type and names](https://github.com/lampepfl/dotty/blob/37d8d6c9ab367fb6e4dc090bb70eaf3abdccc666/compiler/src/dotty/tools/dotc/core/Types.scala#L2891-L2896), and it doesn't have its declarations' symbols.

For example, 
`{ def x: Int; def y: Int }` in `def m (x: {def x: Int; def y: Int})` has the following type:

```scala
RefinedType(
  parent = RefinedType(
    parent = TypeRef(..., Object)
    ...
  ),
  refinedName = x,
  refinedInfo = TypeRef(..., Int)
)
```

- Can we retrieve those symbols, from `RefinedType`? 
  - (`tpe.member(tpe.refinedName)` didn't work).
- If it's impossible to reconstruct those symbols from RefinedType
  - Is there a way to retrieve symbols for declarations, from the symbol (whose type is `RefinedType`)?
  - If it's difficult, maybe we can retrieve those symbols from AST.

## Reconstruct a symbol from `TypeParamRef` and `TermParamRef`
Trying to model `TypeParamRef` as `TypeRef`, for example:

```scala
def m[T]: T = ???

// `<def m>.info` is
PolyType(
    List(Z),
    List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))),
    TypeParamRef(Z)
)

// this should be modeled as
MethodSignature(
   ...
   returnType = TypeRef(..., Z)
)
```

- Is there a way to retrieve the symbol (of `Z` in the above case) from `TypeParamRef`?
- If not, I consider retrieving the symbol by `sym.rawParamss` and `TypeParamRef#paramNum`

## Use metap?
- To pretty-print the generated signature information in [metac.expect](https://github.com/lampepfl/dotty/blob/37d8d6c9ab367fb6e4dc090bb70eaf3abdccc666/tests/semanticdb/metac.expect) which is printed by [Tools#metac](https://github.com/lampepfl/dotty/blob/37d8d6c9ab367fb6e4dc090bb70eaf3abdccc666/compiler/src/dotty/tools/dotc/semanticdb/Tools.scala#L49-L69), we have to implement a `Signature`'s pretty-printer in Scala3.
- However, the pretty-printer is already implemented in [scalameta's metap](https://github.com/scalameta/scalameta/blob/ff2f5647f721c711bdac41e3d8dbc397fe0cc7cd/semanticdb/metap/src/main/scala/scala/meta/internal/metap/SymbolInformationPrinter.scala#L121-L227)
- Should we duplicate the pretty-printer in Scala3 for the testing? Or, another options: use `metap` for updating the `metac.expect` ?

</details>
",True,12885,https://api.github.com/repos/scala/scala3/pulls/12885,https://github.com/scala/scala3/pull/12885,closed,3501,2229,53,53,26,206,1,1,[{'name': 'area:semanticdb'}],2021-06-21 07:48:14+00:00,2021-08-12 13:31:03+00:00,4513369.0,"52 days, 5:42:49","[{'comment_id': 655154639, 'comment_body': 'Just moved to `SemanticSymbolBuilder.scala` because we want to use this method outside from `ExtractSemanticDB.scala`', 'comment_created': datetime.datetime(2021, 6, 21, 7, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 655166925, 'comment_body': 'This stuff could be merged with the `Scala3` object', 'comment_created': datetime.datetime(2021, 6, 21, 8, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 655175690, 'comment_body': 'this I think can be done by passing in a reference to the defining method symbol when you call `toSemanticType`, then you can call `paramName` and/or `paramNum` on the ParamRef to get the name that you can then use to look up their symbol, from `sym.paramSymss` which I see you suggested above. (`paramNum` is not aware of currying, it is only local to the specific parameter list)', 'comment_created': datetime.datetime(2021, 6, 21, 8, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 655176179, 'comment_body': '`IntersectionType` is only for use in Java methods, `WithType` should be used here', 'comment_created': datetime.datetime(2021, 6, 21, 8, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 655233173, 'comment_body': 'here the symbols can be looked up by collecting the refined names and infos into a list, and then look them up with `rt.findMember`, heres somethign that works\r\n```scala\r\nfor (name, info) <- refinedInfos yield\r\n  val pre = ctx.typeAssigner.maybeSkolemizePrefix(rt, name)\r\n  val denot = rt.findMember(name, pre)\r\n  assert(denot.info eq info, s""(${denot.info.show}) is not eq to (${info.show})"")\r\n  val sym =\r\n    if denot.symbol.exists then\r\n      println(s""refined ${denot.symbol.show} with ${info.show}"")\r\n      denot.symbol\r\n    else\r\n      ???\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 9, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 655320490, 'comment_body': ""Could you elaborate on it?\r\nI thought modeling [Scala3's IntersectionType](https://dotty.epfl.ch/docs/reference/new-types/intersection-types.html) by [Semanticdb's IntersetionType](https://scalameta.org/docs/semanticdb/specification.html#type) seems legid, and while `IntersectionType` is commutative `WithType` has a sense of non-commutative."", 'comment_created': datetime.datetime(2021, 6, 21, 12, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 655320507, 'comment_body': ""Thanks! I'll take a look :)"", 'comment_created': datetime.datetime(2021, 6, 21, 12, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 655335837, 'comment_body': 'So with semanticDB extraction we want to fit Scala 3 definitions within semanticDB\'s model of the world, semanticDB has no knowledge of Scala 3\'s intersection types, so we map it to the next best thing - Scala 2\'s compound types, (i.e. `WithType`). We already make some ""sacrifices"" in this way, e.g. there is no `given` flag in semanticDB, so we use `implicit` instead.\r\n\r\nIn the future we probably want to add more Scala 3 specialised definitions to the protobuf schema.', 'comment_created': datetime.datetime(2021, 6, 21, 12, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 655368654, 'comment_body': 'Hmm, sorry I still can\'t see the reason for using `WithType` here, I may be missing something...\r\nWhat do you think about this? @tgodzik \r\n\r\n> semanticDB has no knowledge of Scala 3\'s intersection types\r\n- In the sense of SemanticDB supports the model that can represent Scala3\'s intersection type, SemanticDB already supports `IntersectionType`.\r\n  - I think things are different from the case of `given`, while SemanticDB doesn\'t have an appropriate property for `given` and we have to ""sacrifice"" (or ""erase""?) the property down to `implicit`, we already have `IntersectionType` in Semanticdb and it has ""equivalent"" with Scala3\'s IntersetionType\r\n- If you mean the Semanticdb generated from Scala3 should be compatible with Scala2\r\n  - I don\'t think we need the compatibility, because unlike tasty, Semanticdb is basically generated and consumed for the same version of Scala.\r\n  - what about `UnionType`?\r\n  - I\'m planning to add some Scala3 specialized types to Semanticdb protobuf schema for `TypeLambda` and `MatchType` because I think current SemanticDB\'s Types are incapable of representing those Scala3 types.\r\n    - Should we also somehow encode them with Scala2 compatible type?', 'comment_created': datetime.datetime(2021, 6, 21, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 655372990, 'comment_body': 'It seems `UnionType` is never used, so it is free to interpret how you wish - My comment about `IntersectionType` was in case some tooling makes an assumption that it implies the definition must be a Java type, but maybe this is not the case in practise. It is true that a Java intersection type has different erasure to both a scala 3 intersection type or a Scala 2 `WithType`, so it might be worth treating separately', 'comment_created': datetime.datetime(2021, 6, 21, 13, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 655384846, 'comment_body': 'Ah! I got it, so the problem is the interpretation of `IntersectionType` could be ambiguous whether it is for Java methods or Intersection Type in Scala3.\r\nIndeed it could be better to use `WithType` instead... let me sleep on it 🤔 ', 'comment_created': datetime.datetime(2021, 6, 21, 13, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 655400391, 'comment_body': 'also worth noting that polymorphic function types are encoded as a refinement, e.g. `PolyFunction { def apply[T](t: T): T }`, but `apply` refers to no actual symbol, so what to do here? (we could invent a fake semanticDB symbol?)', 'comment_created': datetime.datetime(2021, 6, 21, 13, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 656814899, 'comment_body': 'Thank you for the comment! Tried to collect symbols by `Types#findMember` https://github.com/lampepfl/dotty/pull/12885/commits/ebdf90014f270a1ae9fed670ca7aa5193f4c307b\r\nI found `Types.findMember` can lookup the denotation with Type information, but it looks like those denotations always have `NoSymbol`.\r\n\r\nFor example, \r\n\r\n```scala\r\nval x: { val inner: Int } = new { val inner = 1 }\r\n\r\n// where <val x>.info is\r\nRefinedType(\r\n  parent = TypeRef(\r\n    prefix = ThisType(tref = TypeRef(prefix = NoPrefix, myDesignator = module class lang)),\r\n    myDesignator = class Object\r\n  ),\r\n  refinedName = inner,\r\n  refinedInfo = TypeRef(\r\n    prefix = TermRef(\r\n      prefix = ThisType(tref = TypeRef(prefix = NoPrefix, myDesignator = module class <root>)),\r\n      myDesignator = object scala\r\n    ),\r\n    myDesignator = class Int\r\n  )\r\n)\r\n\r\n// <val x>.info.findMember(<val x>, inner)\r\n// return denotaiton with info, but NoSymbol\r\n```\r\n\r\nBesides, for the polymorphic function type, as you mentioned `findMember` fails to find the symbol of the refinement `def apply`, and it instead finds `apply` method of `Function1`.\r\n\r\n```scala\r\npackage scala3types\r\n// with\r\ntrait Entry { type Key; val key: Key }\r\ndef extractKey(e: Entry): e.Key = e.key\r\n\r\n// Function1[Entry, Entry#Key] { def apply(e: Entry): Entry#Key  }\r\nval extractor: (e: Entry) => e.Key = extractKey\r\n```\r\n\r\n<details>\r\n\r\n```scala\r\nRefinedType(\r\n  parent = AppliedType(\r\n    tycon = TypeRef(\r\n      prefix = ThisType(tref = TypeRef(prefix = NoPrefix, myDesignator = module class scala)),\r\n      myDesignator = trait Function1\r\n    ),\r\n    args = List(\r\n      TypeRef(\r\n        prefix = ThisType(\r\n          tref = TypeRef(prefix = NoPrefix, myDesignator = module class scala3types)\r\n        ),\r\n        myDesignator = trait Entry\r\n      ),\r\n      TypeRef(\r\n        prefix = TypeRef(\r\n          prefix = ThisType(\r\n            tref = TypeRef(prefix = NoPrefix, myDesignator = module class scala3types)\r\n          ),\r\n          myDesignator = trait Entry\r\n        ),\r\n        myDesignator = type Key\r\n      )\r\n    )\r\n  ),\r\n  refinedName = apply,\r\n  refinedInfo = MethodType(paramNames = List(e))\r\n)\r\n```\r\n\r\n// =>\r\n\r\n\r\n\r\n```scala\r\nValueSignature(\r\n  tpe = StructuralType(\r\n    tpe = WithType(\r\n      types = List(\r\n        TypeRef(\r\n          prefix = Empty,\r\n          symbol = ""scala/Function1#"",\r\n          typeArguments = List(\r\n            TypeRef(prefix = Empty, symbol = ""scala3types/Entry#"", typeArguments = List()),\r\n            TypeRef(\r\n              prefix = TypeRef(\r\n                prefix = Empty,\r\n                symbol = ""scala3types/Entry#"",\r\n                typeArguments = List()\r\n              ),\r\n              symbol = ""scala3types/Entry#Key#"",\r\n              typeArguments = List()\r\n            )\r\n          )\r\n        )\r\n      )\r\n    ),\r\n    declarations = Some(\r\n      value = Scope(\r\n        symlinks = List(),\r\n        hardlinks = List(\r\n          SymbolInformation(\r\n            symbol = ""scala/Function1#apply()."",\r\n            language = SCALA,\r\n            kind = METHOD,\r\n            properties = 0,\r\n            displayName = ""apply"",\r\n            signature = MethodSignature(\r\n              typeParameters = Some(value = Scope(symlinks = List(), hardlinks = List())),\r\n              parameterLists = List(\r\n                Scope(\r\n                  symlinks = List(),\r\n                  hardlinks = List(\r\n                    SymbolInformation(\r\n                      symbol = ""scala/Function1#apply().(v1)"",\r\n                      language = SCALA,\r\n                      kind = PARAMETER,\r\n                      properties = 0,\r\n                      displayName = ""v1"",\r\n                      signature = ValueSignature(\r\n                        tpe = TypeRef(\r\n                          prefix = Empty,\r\n                          symbol = ""scala/Function1#[T1]"",\r\n                          typeArguments = List()\r\n                        )\r\n                      ),\r\n                      annotations = List(),\r\n                      access = Empty,\r\n                      overriddenSymbols = List(),\r\n                      documentation = None\r\n                    )\r\n                  )\r\n                )\r\n              ),\r\n              returnType = TypeRef(\r\n                prefix = Empty,\r\n                symbol = ""scala/Function1#[R]"",\r\n                typeArguments = List()\r\n              )\r\n            ),\r\n            annotations = List(),\r\n            access = Empty,\r\n            overriddenSymbols = List(),\r\n            documentation = None\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n```\r\n</details>\r\n\r\nI\'m wondering, it might be better to work around this problem by\r\n\r\n- (option1) Create dummy symbols for Semanticdb\r\n- (option2) Pass around the tree to `toSemanticSig` and `toSemanticType` and get refinements symbols from tree.\r\n\r\nand I\'m currently lean toward option2, because with option1 I guess we have to make up a lot of dummy information for the symbol to generate SymbolInformation from it (for [hardlinking](https://scalameta.org/docs/semanticdb/specification.html#scope)).\r\n\r\nupdated: I\'m on the fence, passing around the tree is unrealistic, and it might be better to create dummy symbols gibing up flags 🤔 \r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 23, 7, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 656820971, 'comment_body': ""BTW, at least in `ExtractSemanticDB` phase, `maybeSkolemizePrefix` seems not needed because it always returns `qualType` https://github.com/lampepfl/dotty/blob/ebdf90014f270a1ae9fed670ca7aa5193f4c307b/compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala#L115 outside of `Typer` phase. (because `isLegalPrefix` returns `true` outside of `Typer` phase)\r\n(I actually don't understand what exactly `SkolemType` for...)"", 'comment_created': datetime.datetime(2021, 6, 23, 7, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 657010952, 'comment_body': ""Here's rough implementation of generating dummy symbols for refinements in RefinedType https://github.com/lampepfl/dotty/pull/12885/commits/a46e4c7189c2a4eebfe985a7f651055d6432b747"", 'comment_created': datetime.datetime(2021, 6, 23, 11, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 658144848, 'comment_body': 'Copied from https://github.com/scalameta/scalameta/blob/ff2f5647f721c711bdac41e3d8dbc397fe0cc7cd/semanticdb/semanticdb/src/main/scala/scala/meta/internal/semanticdb/Scala.scala#L118', 'comment_created': datetime.datetime(2021, 6, 24, 17, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 658150249, 'comment_body': 'Basically copied from ExtractSemanticDB\r\nIt also removes the assertion on `span`, because when we generate a dummy symbol for `RefinedType`, those symbols don\'t have position information.\r\n\r\n```diff\r\n def localIdx(sym: Symbol)(using Context): Int =\r\n   val startPos =\r\n-    assert(sym.span.exists, s""$sym should have a span"")\r\n-    sym.span.start\r\n+    if sym.span.exists then Some(sym.span.start) else None\r\n+    // assert(sym.span.exists, s""$sym should have a span"")\r\n   @tailrec\r\n   def computeLocalIdx(sym: Symbol): Int = locals get sym match\r\n     case Some(idx) => idx\r\n-    case None      => symsAtOffset(startPos).find(_.name == sym.name) match\r\n+    case None      => (for {\r\n+      pos <- startPos\r\n+      samePosSyms <- symsAtOffset.get(pos)\r\n+      sameName <- samePosSyms.find(_.name == sym.name)\r\n+    } yield sameName) match\r\n       case Some(other) => computeLocalIdx(other)\r\n       case None =>\r\n         val idx = nextLocalIdx\r\n         nextLocalIdx += 1\r\n         locals(sym) = idx\r\n-        symsAtOffset(startPos) += sym\r\n+        startPos.foreach(pos => symsAtOffset(pos) += sym)\r\n         idx\r\n   end computeLocalIdx\r\n   computeLocalIdx(sym)\r\n```', 'comment_created': datetime.datetime(2021, 6, 24, 17, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 658150808, 'comment_body': 'Extracted semantic symbol builder logics from `ExtractSemanticDB`.', 'comment_created': datetime.datetime(2021, 6, 24, 17, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 658157639, 'comment_body': ""Since It seems like we have no way to collect the symbols of refinements from `RefinedType`, we create a dummy symbol for each refinement.\r\nIt leads to\r\n- we can't attach the exact flags for the symbol\r\n- the local symbol for the refinement will have different numbering\r\n\r\nsee: https://github.com/lampepfl/dotty/pull/12885#discussion_r656814899"", 'comment_created': datetime.datetime(2021, 6, 24, 17, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 658164486, 'comment_body': 'Since we create dummy symbol with another `localIdx` for refinements of structural types, the number of local symbols had incremented.', 'comment_created': datetime.datetime(2021, 6, 24, 17, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 658183094, 'comment_body': '- `noteSymtab` is for symbols that are hard-linked in structural types\r\n- `symtab` is SymbolTable for a TextDocument\r\n\r\nWe need symbol table, because when we convert `TypeRef` into Semanticdb Type, we have to lookup the actual symbol from sym-linked symbol.', 'comment_created': datetime.datetime(2021, 6, 24, 18, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 658616491, 'comment_body': ""> My comment about IntersectionType was in case some tooling makes an assumption that it implies the definition must be a Java type, but maybe this is not the case in practise. It is true that a Java intersection type has different erasure to both a scala 3 intersection type or a Scala 2 WithType, so it might be worth treating separately\r\n\r\n@bishabosha  I don't really think we need to treat them separately. We already have separate sections for Java and Scala in https://scalameta.org/docs/semanticdb/specification.html#type-2 and the reason for it is that same type in Scala file might mean something different. There is no need to model intersection types as WithType, since this is leaking the implementation details. When consuming semanticdb we only care about it being an intersection and we already know which file we are in. There is never an assumption that any type is java or scala specific. Semanticdb is intended to represent a lot of different languages (though it's Scala and Java only currently)"", 'comment_created': datetime.datetime(2021, 6, 25, 9, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 658744317, 'comment_body': ""Let're move these comments if they are not needed."", 'comment_created': datetime.datetime(2021, 6, 25, 12, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 658769494, 'comment_body': 'We discussed with @tanishiking that the alternative to having a duplicate semanticdb printer would be to run `metap` manually. We could use coursier boostrap and add a minimal jar, which can be run and printed to file. What do you think @bishabosha ?', 'comment_created': datetime.datetime(2021, 6, 25, 13, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 658772881, 'comment_body': ""@bishabosha any idea what's going on here?"", 'comment_created': datetime.datetime(2021, 6, 25, 13, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 659757461, 'comment_body': 'it seems in scala 2 implementation a local symbol is generated for each refinement, and in the case of a refinement where the denotation of `findMember` has a symbol then you record that the refinement is an override', 'comment_created': datetime.datetime(2021, 6, 28, 12, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 660679056, 'comment_body': ""Sry, there's some indent change..., pls see the diff with `?w=1`..."", 'comment_created': datetime.datetime(2021, 6, 29, 14, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 660690831, 'comment_body': 'Modified the `traverse` function so that it traverses **child nodes first**, and then tries to register the Symbol of the current node.\r\n\r\nThis is required because in `TypeOps`, we construct the symbol table for `LambdaType` and `RecOrRefined`, and when we resolve the symbols for `ParamRef` (in `LambdaType`) and `refinement` (in `RefinedType` or `RecType`) by looking up that symbol table.\r\n\r\nFor example, if we have\r\n\r\n```scala\r\ntype Person = Record {\r\n  val name: String\r\n  val age: Int\r\n}\r\n```\r\n\r\nTo convert the refinement type for `Person` (`RefinedType(RefinedType(..., name, ...), age, ...)`) to `StructuralType(...)`, we have to know the symbol for `name` and `age`, which we cannot obtain purely from that type information.\r\nTo know the symbols for `name` and `age`, we\r\n- traverse the child nodes of `type Person` to register the symbol of `name` and `age` to the symbol table\r\n- and then convert the `RefinedType` of `Person` with resolving the symbols for `name` and `age` by looking up the symbol table.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 661606547, 'comment_body': ""Not sure if we want `Case` for EnumCase. It's not a modifier in enums. \r\n```suggestion\r\n        if sym.isAllOf(Case | Module) || sym.is(CaseClass) then\r\n```"", 'comment_created': datetime.datetime(2021, 6, 30, 15, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 661607881, 'comment_body': 'Should we have an additional kind for `inline` ? We might need to update the modifiers in semanticdb. Also, should we recognize `inline` methods as macros? @bishabosha what do you think?', 'comment_created': datetime.datetime(2021, 6, 30, 15, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 661613696, 'comment_body': '```suggestion\r\n        else if sym.isOneOf(Method)) then\r\n```\r\nAre val/var set as methods in Scala 2?', 'comment_created': datetime.datetime(2021, 6, 30, 16, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662296311, 'comment_body': 'Should we set this instead for EnumCase ? Or should we have a separate kind?', 'comment_created': datetime.datetime(2021, 7, 1, 13, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662296901, 'comment_body': 'Do we need to remove the assert on span now?', 'comment_created': datetime.datetime(2021, 7, 1, 13, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662297529, 'comment_body': ""Let's change this back to Intersection"", 'comment_created': datetime.datetime(2021, 7, 1, 13, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662298941, 'comment_body': 'Why do we need to set this as given?', 'comment_created': datetime.datetime(2021, 7, 1, 13, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662300992, 'comment_body': 'This is already handle within `case ClassInfo`, is it needed here? Or maybe we could jsut recursively use `enterRefined` ?', 'comment_created': datetime.datetime(2021, 7, 1, 13, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662304465, 'comment_body': 'Do we get type parameters for `def method[T]` etc. ? Do I see correctly that they are handled underneath ?', 'comment_created': datetime.datetime(2021, 7, 1, 13, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662316682, 'comment_body': ""This change looks weird, we get double occurrence of Zero here. Though, it's probably unrelated, but we might want to raise an issue for the future."", 'comment_created': datetime.datetime(2021, 7, 1, 14, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662336556, 'comment_body': '`EnumCase` how we identify singleton enum values, so `case` should be there as it is part of the definition', 'comment_created': datetime.datetime(2021, 7, 1, 14, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 662428451, 'comment_body': ""Case is defined as: `CASE | Has a\xa0case\xa0modifier?`\r\n\r\nSo in reality, it doesn't have a case modifier, it's more akin to match cases. I think it would be best to have it as a EnumCase, separate from just Case"", 'comment_created': datetime.datetime(2021, 7, 1, 16, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662478398, 'comment_body': 'Im not sure what you mean,\r\n```scala\r\nenum Color {\r\n  case Red\r\n  ...\r\n}\r\n```\r\n\r\nhere `Red` is defined with the `case` modifier, which is what `sym.isAllOf(EnumCase)` is checking for', 'comment_created': datetime.datetime(2021, 7, 1, 17, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 662595005, 'comment_body': 'Is it a modifier though? With case class it is indeed a modifier, in enum those cases are obligatory, without case they do not exist. You cannot write just ""Red""', 'comment_created': datetime.datetime(2021, 7, 1, 21, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662611454, 'comment_body': 'I think it is important, `case` distinguishes `Red` from being any old val (like its desugared form), which plays into things like exhaustivity checking or the ""provably disjoint"" check for match types. I do see we do give them the `enum` modifier also at least.', 'comment_created': datetime.datetime(2021, 7, 1, 21, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 662612366, 'comment_body': 'Ok, I guess if we have both it is an EnumCase kind. Makes sense!', 'comment_created': datetime.datetime(2021, 7, 1, 21, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 662703980, 'comment_body': ""Sry for confustion, I reverted https://github.com/lampepfl/dotty/pull/12885/commits/58fd3d581bba5a5190d7a0f6a1f5ab538b1b8612 because it's not already needed 👍 "", 'comment_created': datetime.datetime(2021, 7, 2, 2, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 662708963, 'comment_body': 'Yeah, the polymorphic function can be handled with https://github.com/lampepfl/dotty/pull/12885/files/58fd3d581bba5a5190d7a0f6a1f5ab538b1b8612#diff-e6dd58e14443b7d0234a4897f9194839a1c52177c36b83691b9c4570410caa7aR126-R132\r\n\r\nand we can see it is handled: for `def locally[A](x: A): A = x`\r\nhttps://github.com/lampepfl/dotty/pull/12885/files/58fd3d581bba5a5190d7a0f6a1f5ab538b1b8612#diff-18e8342519c9145a646a9b86ca13f58300b3fff458b90420ef3bb7e3e8bdd56fR298\r\n\r\nand I found something is wrong because it prints as `example/Anonymous#locally(). => method locally [typeparam A ](typeparam A )(param x: A): A`, it should be example/Anonymous#locally(). => method locally [typeparam A ](param x: A): A`', 'comment_created': datetime.datetime(2021, 7, 2, 3, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 662710041, 'comment_body': 'This is needed because, for example the `tpe` is instance of `RecType`, it recursively call `enterRefined(rec.parent)` and `RecType#parent` should be always `RefinedType`. (this case is the base case of this recursive function).\r\n\r\nMaybe we can refactor it from\r\n```scala\r\ncase refined: RefinedType =>\r\n  val key = (refined, sym.name)\r\n  refinementSymtab(key) = sym\r\n```\r\n\r\nto \r\n\r\n```scala\r\ncase refined: RefinedType =>\r\n  enterRefined(refined)\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 3, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 662714548, 'comment_body': 'Because we pass the instance of `TypeOps` to `sscope` (which pass it to `symbolInfo`)\r\nMaybe we should give the instance of `TypeOps` explicitly because I use `given` for no big reason: I used `given` just because I was too lazy 😅 ', 'comment_created': datetime.datetime(2021, 7, 2, 3, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 662720106, 'comment_body': ""I think it's ok to add `Case` to EnumCase, since we can tell the symbols of EnumCase by checking if there're properties : `Enum` and `Case`"", 'comment_created': datetime.datetime(2021, 7, 2, 3, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 662803342, 'comment_body': 'agreed', 'comment_created': datetime.datetime(2021, 7, 2, 7, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663042413, 'comment_body': '```scala\r\nobject Foo {\r\n  val x = 23\r\n  var y = 47\r\n}\r\n```\r\ngives with Scala 2 `metac` and `metap`:\r\n```\r\nSymbols:\r\n_empty_/Foo. => final object Foo extends AnyRef { +3 decls }\r\n_empty_/Foo.`y_=`(). => var method y_=(x$1: Int): Unit\r\n_empty_/Foo.`y_=`().(x$1) => param x$1: Int\r\n_empty_/Foo.x. => val method x: Int\r\n_empty_/Foo.y(). => var method y: Int\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 14, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663046690, 'comment_body': 'have both Enum and Case', 'comment_created': datetime.datetime(2021, 7, 2, 14, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663058722, 'comment_body': ""I think it's better to keep all the extension methods in one place, so I think it would make more sense for `symbolName` and `funParamSymbol` to be extensions inside `Scala3.SymbolOps` that delegate to a given parameter of type `SemanticSymbolBuilder`."", 'comment_created': datetime.datetime(2021, 7, 2, 14, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663064909, 'comment_body': 'we can pass in `sb` to `pprintSymbolInformation` here for more efficiency', 'comment_created': datetime.datetime(2021, 7, 2, 14, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663066191, 'comment_body': 'we should try to reuse the current `StringBuilder` by passing it in as an argument, then either return the `StringBuilder` or `Unit`', 'comment_created': datetime.datetime(2021, 7, 2, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663067763, 'comment_body': 'again would be good to try and reuse `StringBuilder` where possible', 'comment_created': datetime.datetime(2021, 7, 2, 14, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663091022, 'comment_body': '`sym.paramSymss` has also the type parameters, not just the term parameters, so `stparams` should not be empty here.', 'comment_created': datetime.datetime(2021, 7, 2, 15, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663091822, 'comment_body': 'an extension method can also have type parameters after term parameters, so thats another thing to look out for', 'comment_created': datetime.datetime(2021, 7, 2, 15, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663342450, 'comment_body': 'Should we much priority on string concatenation efficiency?\r\n- I personally prefer returning String instead of passing `StringBuilder` (because of its code readability).\r\n- While I understand `StringBuilder` concatenation is generally faster, this pretty printer is used only for testing and the efficiency might be not a big deal?\r\n- btw, what do you think about this approach? https://github.com/lampepfl/dotty/pull/12885#discussion_r658769494', 'comment_created': datetime.datetime(2021, 7, 3, 9, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 663342529, 'comment_body': ':+1: done: https://github.com/lampepfl/dotty/pull/12885/commits/a3e1f538bf7ac2dc70a9591001887e007e864ba3', 'comment_created': datetime.datetime(2021, 7, 3, 9, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 663342563, 'comment_body': 'https://github.com/lampepfl/dotty/pull/12885/commits/3cad5f33d80a7bb7a6c8001bf4531ccb61c12d9d', 'comment_created': datetime.datetime(2021, 7, 3, 9, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 663346454, 'comment_body': ""Ah, that's right, fixed in https://github.com/lampepfl/dotty/pull/12885/commits/75bc739cbeae088a2a0604b924ce8c6eaeaa86cc by filtering out the type parameters here, and the type parameters are set in the case pattern for `PolyType`"", 'comment_created': datetime.datetime(2021, 7, 3, 10, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 663346475, 'comment_body': 'fixed https://github.com/lampepfl/dotty/pull/12885/commits/75bc739cbeae088a2a0604b924ce8c6eaeaa86cc', 'comment_created': datetime.datetime(2021, 7, 3, 10, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 663732906, 'comment_body': 'I think another alternative to try is you can load metap with reflection maybe, but if this works then fine', 'comment_created': datetime.datetime(2021, 7, 5, 8, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663736050, 'comment_body': 'I have found however that `Tools.metac` prints more information, for example in the occurrences we print the substring from the source file that matches the range, which metap does not do, this is useful to check that the range is actually correct', 'comment_created': datetime.datetime(2021, 7, 5, 8, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663742409, 'comment_body': 'Its true the efficiency is not the priority before the correctness of the actual output, so this would only be the last thing to address.\r\n\r\nI have addressed that other comment now.', 'comment_created': datetime.datetime(2021, 7, 5, 8, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663759349, 'comment_body': 'After 75bc739 there is still an issue for extension methods:\r\n\r\nif I add an extension method like this:\r\n```scala\r\n// tests/semanticdb/expect/Extension.scala\r\npackage ext\r\n\r\ntrait Read[+T]:\r\n  def fromString(s: String): Option[T]\r\n\r\nextension (s: String)\r\n  def readInto[T](using Read[T]): Option[T] = summon[Read[T]].fromString(s)\r\n```\r\nthe printed signature is missing the type parameter for `readInto` because it comes after term parameters:\r\n```\r\next/Extension$package.readInto(). => method readInto (param s: String)(implicit param x$2: Read[T]): <?>\r\n```\r\nThe type looks like this: `(s: String)[T](x$2: Read[T]): Option[T]`.\r\n\r\nWe can either lift the type parameters to the front, or change `MethodSignature` so it can mix term and type parameters arbitrarily cc/ @tgodzik ', 'comment_created': datetime.datetime(2021, 7, 5, 8, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663797616, 'comment_body': ""Existential Types don't exist at the source level but any time you see raw `TypeBounds` in a type that is not the rhs of a `TypeDef`, that is equivalent to a Scala 2 Existential type, this happens e.g. when you have `List[_]` in a return type, e.g. in the signature of `advanced/Test.e1.`, which currently prints as `List[<?>]`"", 'comment_created': datetime.datetime(2021, 7, 5, 9, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663869658, 'comment_body': 'It seems here that the `LocalPrefix` is being concatenated to the Symbol\'s `toString` value, e.g. `""localparam x$1""` rather than its local index `""local7""`\r\n```suggestion\r\n                    .fold(""<?>"")(Symbols.LocalPrefix + locals(_))\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 11, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663876264, 'comment_body': 'so the Scala 2 semanticdb implementation matches the old version exactly, whereas here the locals are in the opposite order. (I will look to see if there is a way to avoid reversing the traversal order in `ExtractSemanticDB`)', 'comment_created': datetime.datetime(2021, 7, 5, 12, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663884031, 'comment_body': 'this looks to be because of the inlining, if I change from `transparent inline` to `inline`, then there is no repetition (also need to add `""-Ystop-after:extractSemanticDB""` to the compiler args in `SemanticdbTests`)', 'comment_created': datetime.datetime(2021, 7, 5, 12, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663897505, 'comment_body': 'it seems to be a common occurrence for extension methods with two parameter lists to have an empty return type.', 'comment_created': datetime.datetime(2021, 7, 5, 12, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663899288, 'comment_body': 'it seems the type parameters for constructors are not initialised correctly, these are part of a `Template` object so whatever is done for `DefDef` probably needs to be copied to the ctor of a `Template`', 'comment_created': datetime.datetime(2021, 7, 5, 12, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663900079, 'comment_body': 'wildcard type arguments (`TypeBounds` in argument position) should be converted to `ExistentialType`, it seems that they are just unhandled presently', 'comment_created': datetime.datetime(2021, 7, 5, 12, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663907022, 'comment_body': 'it seems like singleton types are not being built using their prefix yet', 'comment_created': datetime.datetime(2021, 7, 5, 12, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663908097, 'comment_body': 'curiously empty type parameters here', 'comment_created': datetime.datetime(2021, 7, 5, 12, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663909160, 'comment_body': 'the return type is empty here, something to do with curried functions maybe?', 'comment_created': datetime.datetime(2021, 7, 5, 12, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663910147, 'comment_body': 'more empty type params here', 'comment_created': datetime.datetime(2021, 7, 5, 12, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663927461, 'comment_body': ""So it seems it's only a method for the var."", 'comment_created': datetime.datetime(2021, 7, 5, 13, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 663928130, 'comment_body': ""I would lift the type parameters to the front in this case. MethodInformation doesn't need to correspond to how the code is parsed."", 'comment_created': datetime.datetime(2021, 7, 5, 13, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 663963435, 'comment_body': 'it gets more tricky when you start having type parameters that have a dependent type on a previous term parameter, so would forward references break anything?', 'comment_created': datetime.datetime(2021, 7, 5, 14, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663982856, 'comment_body': '`TypeBounds` should be handled here and converted to a semanticDB Existential Type', 'comment_created': datetime.datetime(2021, 7, 5, 14, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663983791, 'comment_body': 'This should be an `IntersectionType`', 'comment_created': datetime.datetime(2021, 7, 5, 14, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663984740, 'comment_body': '```suggestion\r\n        case TypeRef(pre, desig: Symbol) =>\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 14, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663986112, 'comment_body': '```suggestion\r\n        case TypeRef(pre, desig: Symbol) =>\r\n```', 'comment_created': datetime.datetime(2021, 7, 5, 14, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663995593, 'comment_body': 'see my other comment, it is probably all curried functions acting this way', 'comment_created': datetime.datetime(2021, 7, 5, 15, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 663996757, 'comment_body': 'although I looked at `TypeOps` and this seems correct, and comparing to metac.expect in the scalameta repo, I guess it is just an issue with formatting', 'comment_created': datetime.datetime(2021, 7, 5, 15, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 664001268, 'comment_body': 'We can have curried type application with type lambdas so we need to support that, instead of just replacing the  previously applied type arguments ', 'comment_created': datetime.datetime(2021, 7, 5, 15, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 664002208, 'comment_body': ""might want to be careful of type aliases used as annotations here, which won't have `ClassInfo` as their info, maybe `annot.symbol` takes care of this"", 'comment_created': datetime.datetime(2021, 7, 5, 15, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 664006576, 'comment_body': 'maybe missing `PolyType` here?', 'comment_created': datetime.datetime(2021, 7, 5, 15, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 664359713, 'comment_body': 'we should use `finalResultType` here, this way we get the actual result type, and not a nested method type in the case of curried functions (a method type only has a single parameter list)\r\n```suggestion\r\n            mt.finalResultType.toSemanticType(sym)\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 8, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 664370948, 'comment_body': 'is this case only meant for the primary constructor?', 'comment_created': datetime.datetime(2021, 7, 6, 8, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 664463559, 'comment_body': ':+1: Addressed by https://github.com/lampepfl/dotty/pull/12885/commits/f509613cfd5ece7bd31789c57c907d2388040763\r\n\r\nFor example, when we compile the following code with Scala3 and Scala2 to semanticdb,\r\n```scala\r\nclass Wildcards {\r\n  def e1: List[_ <: Int] = ???\r\n}\r\n```\r\n\r\nThe semanticdb\'s SymbolInformation for `e1` looks like this:\r\n\r\n<details>\r\nFrom scala3\r\n```\r\n  symbols {\r\n    symbol: ""advanced/Wildcards#e1().""\r\n    kind: METHOD\r\n    display_name: ""e1""\r\n    language: SCALA\r\n    signature {\r\n      value_signature {\r\n        tpe {\r\n          by_name_type {\r\n            tpe {\r\n              existential_type {\r\n                tpe {\r\n                  type_ref {\r\n                    symbol: ""scala/collection/immutable/List#""\r\n                    type_arguments {\r\n                      type_ref {\r\n                        symbol: ""local0""\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                declarations {\r\n                  hardlinks {\r\n                    symbol: ""local0""\r\n                    kind: TYPE\r\n                    display_name: ""_""\r\n                    language: SCALA\r\n                    signature {\r\n                      type_signature {\r\n                        type_parameters {\r\n                        }\r\n                        lower_bound {\r\n                          type_ref {\r\n                            symbol: ""scala/Nothing#""\r\n                          }\r\n                        }\r\n                        upper_bound {\r\n                          type_ref {\r\n                            symbol: ""scala/Int#""\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nOn the other hand, generated from scalameta\'s metac with scalac 2.13.6\r\n\r\n```sh\r\n$ metac --version\r\nScala compiler version 2.13.6 -- Copyright 2002-2021, LAMP/EPFL and Lightbend, Inc.\r\n```\r\n\r\n```\r\n  symbols {\r\n    symbol: ""advanced/Wildcards#e().""\r\n    kind: METHOD\r\n    display_name: ""e""\r\n    language: SCALA\r\n    signature {\r\n      method_signature {\r\n        type_parameters {\r\n        }\r\n        return_type {\r\n          existential_type {\r\n            tpe {\r\n              type_ref {\r\n                symbol: ""scala/package.List#""\r\n                type_arguments {\r\n                  type_ref {\r\n                    symbol: ""local0""\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            declarations {\r\n              hardlinks {\r\n                symbol: ""local0""\r\n                kind: TYPE\r\n                properties: 4\r\n                display_name: ""_""\r\n                language: SCALA\r\n                signature {\r\n                  type_signature {\r\n                    type_parameters {\r\n                    }\r\n                    lower_bound {\r\n                      type_ref {\r\n                        symbol: ""scala/Nothing#""\r\n                      }\r\n                    }\r\n                    upper_bound {\r\n                      type_ref {\r\n                        symbol: ""scala/Int#""\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                access {\r\n                  public_access {\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    access {\r\n      public_access {\r\n      }\r\n    }\r\n  }\r\n```\r\n</details>\r\n\r\nand there\'s no big difference between them.\r\n\r\nNow, we again have a dummy symbol (for `_`), and some local symbol indexes have been updated.\r\n\r\n(The `metac.expect` looks like `List[local...] forSome { _ }` for `List[_]`, but it looks like just a printing issue.)\r\n', 'comment_created': datetime.datetime(2021, 7, 6, 11, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 664464001, 'comment_body': 'done https://github.com/lampepfl/dotty/pull/12885/commits/fa167bc38d29a2d67450f795744565f3fd828a6b', 'comment_created': datetime.datetime(2021, 7, 6, 11, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 664464071, 'comment_body': 'done https://github.com/lampepfl/dotty/pull/12885/commits/fa167bc38d29a2d67450f795744565f3fd828a6b', 'comment_created': datetime.datetime(2021, 7, 6, 11, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 664464458, 'comment_body': 'done https://github.com/lampepfl/dotty/pull/12885/commits/5af073764d338ae5ef5525c4f2803a6751f29936', 'comment_created': datetime.datetime(2021, 7, 6, 11, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 664466180, 'comment_body': 'Yes, I meant only for the primary constructor', 'comment_created': datetime.datetime(2021, 7, 6, 11, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 664468744, 'comment_body': ""As you may know, this is because of the change in traversing order. And I think this isn't a big deal for SemanticDB consumers as long as the same (compiler's) symbol has the same (semanticdb's) symbol."", 'comment_created': datetime.datetime(2021, 7, 6, 11, 25, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 664996812, 'comment_body': ""oh, I assumed that the type parameters always come before term parameters.\r\nTo handle this, I think I should change the way to collect parameters:\r\nCurrently, we're collecting parameters of MethodOrPoly by `paramSymss`, but we should gather the parameters as  other `TypeLambda`s does."", 'comment_created': datetime.datetime(2021, 7, 7, 2, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665003373, 'comment_body': ""And I think what we can do to this case is lifting the type parameters to the front because SemanticDB doesn't have the capability to express type parameters that depends on the first term parameters.\r\n- SemanticDB's MethodSignature doesn't care about the order of type params/term params.\r\n- SemanticDB can't express nested method signatures.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 7, 2, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665036098, 'comment_body': 'Fixed by https://github.com/lampepfl/dotty/pull/12885/commits/a8a137c36977125b3d65e2c2289268961ce2db14', 'comment_created': datetime.datetime(2021, 7, 7, 4, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665036446, 'comment_body': 'done https://github.com/lampepfl/dotty/pull/12885/commits/f509613cfd5ece7bd31789c57c907d2388040763', 'comment_created': datetime.datetime(2021, 7, 7, 4, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665036989, 'comment_body': 'Fixed by https://github.com/lampepfl/dotty/pull/12885/commits/139491bf42806215007d785d7995ae9e6615b402\r\nand then rewritten by https://github.com/lampepfl/dotty/pull/12885/commits/a8a137c36977125b3d65e2c2289268961ce2db14', 'comment_created': datetime.datetime(2021, 7, 7, 4, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665040378, 'comment_body': 'Addressed by https://github.com/lampepfl/dotty/pull/12885/commits/f509613cfd5ece7bd31789c57c907d2388040763\r\nMade a pattern match for `TypeBounds` inside the `AppliedType` because we have to convert `AppliedType` to `ExistentialType` in some cases, and I assume `TypeBounds` appears only in `AplliedType` afaik (and I confirmed at least in the expected tests, there are no `TypeBounds` outside of `AppliedType`).', 'comment_created': datetime.datetime(2021, 7, 7, 4, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665040963, 'comment_body': 'You are right! fixed https://github.com/lampepfl/dotty/pull/12885/commits/139491bf42806215007d785d7995ae9e6615b402', 'comment_created': datetime.datetime(2021, 7, 7, 4, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665042636, 'comment_body': 'Lifted the type parameter to ""front"" https://github.com/lampepfl/dotty/pull/12885/commits/a8a137c36977125b3d65e2c2289268961ce2db14', 'comment_created': datetime.datetime(2021, 7, 7, 4, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665042838, 'comment_body': '139491b', 'comment_created': datetime.datetime(2021, 7, 7, 4, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665043693, 'comment_body': ""As far as I know, `PolyType` shouldn't appear here as long as they're handled by toSemanticSig (at least I confirmed there're no appearance in `semanticdb/expect`) (and actually I'm not sure how to convert `PolyType` into SemanticDB types, if there exists)."", 'comment_created': datetime.datetime(2021, 7, 7, 4, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665044289, 'comment_body': 'Fixed by https://github.com/tanishiking/dotty/commit/a8a137c36977125b3d65e2c2289268961ce2db14', 'comment_created': datetime.datetime(2021, 7, 7, 5, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665044492, 'comment_body': 'Fixed by https://github.com/tanishiking/dotty/commit/a8a137c36977125b3d65e2c2289268961ce2db14', 'comment_created': datetime.datetime(2021, 7, 7, 5, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665095540, 'comment_body': ""Judging from the `Annotations.symbol` https://github.com/lampepfl/dotty/blob/601184787508d8fd655f1dc4e48ed19c418fa710/compiler/src/dotty/tools/dotc/core/Annotations.scala#L13-L15 I guess we can expect there should only be `ClassInfo`.\r\nSince I tried but couldn't find a counter-example for this, maybe we can go with it, and fix it in the future when we find a example here."", 'comment_created': datetime.datetime(2021, 7, 7, 6, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665110349, 'comment_body': ""You mean something like `def x[T](a: T): ([X] =>> List[X])[T] = ???` ?\r\nFor type lambdas, it looks in this phase, what we will have is just an already applied type: e.g. `List[T]` in the above example. There might be another type than `TypeRef` here, but I couldn't find the example...\r\n"", 'comment_created': datetime.datetime(2021, 7, 7, 7, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665111893, 'comment_body': ""That sounds reasonable and applied https://github.com/lampepfl/dotty/pull/12885/commits/9a0d3ac86b1e9d5ece056944bb9a53cc14241658 but it looks like there's no diff in metac.expect 🤔 "", 'comment_created': datetime.datetime(2021, 7, 7, 7, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665115632, 'comment_body': 'For the export clause\r\n\r\n```scala\r\nexport example.{Decoder, Encoder, Codec}\r\n```\r\n\r\nI found there\'s type argument `TypeParamRef(""T"")` for `Codec`, `Decoder`, and `Encoder`, whose binder is\r\n\r\n```scala\r\nHKTypeLambda(\r\n  List(T),\r\n  List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), \r\n  AppliedType(\r\n    TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class exports)),object example),trait Decoder),\r\n    List(TypeParamRef(T))\r\n  )\r\n)\r\n```\r\n\r\nwhere this `HKTypeLambda` never appears in the source level (which means we can\'t register this typeparamref to the symbol table).', 'comment_created': datetime.datetime(2021, 7, 7, 7, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 665291425, 'comment_body': 'here is an example I use to test the Scala 2 TASTy unpickler:\r\n```scala\r\nclass HKClass[F <: [T] =>> [U] =>> (U, T)] {\r\n  def foo[T,U](x: F[T][U]): String = x.toString()\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 11, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665301609, 'comment_body': 'I think it could be good to have a new `Inline` kind, and possibly `TransparentInline` `TransparentMacro` (due to the different semantics) but maybe they should be properties?', 'comment_created': datetime.datetime(2021, 7, 7, 11, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665328010, 'comment_body': 'my suggestion here would be `map` and `paramRefSymtab.apply(key)`, it should be a bug if the key is not present, (which is silently ignored when you use `get`)', 'comment_created': datetime.datetime(2021, 7, 7, 12, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665328475, 'comment_body': 'I much prefer this recursive version :)', 'comment_created': datetime.datetime(2021, 7, 7, 12, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665328894, 'comment_body': 'should this be `None` if `tparams` is empty?', 'comment_created': datetime.datetime(2021, 7, 7, 12, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665330799, 'comment_body': 'style\r\n```suggestion\r\n          val spre = if tpe.hasTrivialPrefix then s.Type.Empty else loop(pre)\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 12, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665390959, 'comment_body': 'it seems a bit heavyweight to create symbols here, but it would take some changes to refactor to not need it', 'comment_created': datetime.datetime(2021, 7, 7, 13, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665392957, 'comment_body': 'I think you are right, there should not be `TypeBounds` except as type arguments in applied type', 'comment_created': datetime.datetime(2021, 7, 7, 13, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665442012, 'comment_body': 'here you should first apply `notes.enter` to each of the `decls`, then they will print correctly when referenced within `utpe`. It would be nice to also print the bounds of each decl, not just the `displayName`', 'comment_created': datetime.datetime(2021, 7, 7, 14, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665460212, 'comment_body': 'could be good to test a polymorphic refinement, which is allowed if it is not structural:\r\n```scala\r\ntrait PolyHolder {\r\n  def foo[T](t: T): Any\r\n}\r\n\r\n...\r\n\r\ndef m4(x: PolyHolder { def foo[T](t: T): T }) = ???\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 15, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665464218, 'comment_body': 'btw, the refinements are printed as empty if the refinement type is the result of a polymorphic method:\r\n```scala\r\ndef m5[Z](x: Int): PolyHolder { def foo[T](t: T): T } = ???\r\n```\r\n\r\nprints as\r\n```\r\nmethod m5 [typeparam Z ](param x: Int): PolyHolder {}\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 15, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665466213, 'comment_body': 'see my comment here https://github.com/lampepfl/dotty/pull/12885#discussion_r665464218\r\nEdit: it does not seem to help by adding `PolyType` here, but still something is up', 'comment_created': datetime.datetime(2021, 7, 7, 15, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665474092, 'comment_body': 'this assumption breaks with this `Functor` example using two type parameter lists:\r\n```scala\r\n// tests/semanticdb/expect/Extension.scala\r\ntrait Functor[F[_]]:\r\n  extension [T](t: F[T]) def map[U](f: T => U): F[U]\r\n```\r\n\r\nHere, there should be two type parameters:\r\n```\r\next/Functor#map(). => abstract method map [typeparam U ](param t: F[T])(param f: Function1[T, U]): F[U]\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 15, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665526261, 'comment_body': 'I confirmed with testing it does not matter if the type is aliased, however it does not work for nested annotated types, e.g.\r\n```scala\r\n// tests/semanticdb/expect/InstrumentTyper.scala\r\ntype paramAlias = param\r\ntype paramRec = param @param\r\ntype AnnotatedType = Int @param\r\ntype AnnotatedType2 = Int @paramAlias\r\ntype AnnotatedType3 = Int @(param @param)\r\ntype AnnotatedType4 = Int @paramRec\r\n```\r\nIn these cases `AnnotatedType<3|4>` info is `Int @param` but scala 2 would have `Int @param @param`', 'comment_created': datetime.datetime(2021, 7, 7, 16, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665558345, 'comment_body': '```suggestion\r\n              case hi => sb.append(s"" <: ${pprint(hi)}"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 17, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665561701, 'comment_body': 'refinements will also be empty in the upper bound of type param `PickOneRefinement_1#[S]` (if you implement the change to `PPrint.scala`) for this example:\r\n```scala\r\ntrait SpecialRefinement {\r\n  def pickOne(as: String*): Option[Any]\r\n}\r\n\r\nclass PickOneRefinement_1[S <: SpecialRefinement { def pickOne(as: String*): Option[String] }] {\r\n  def run(s: S, as: String*): Option[String] = s.pickOne(as:_*)\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 7, 7, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 665573733, 'comment_body': 'perhaps `prefixBeforeTpe` in `PPrint.scala` could have an adjustment for when it is a Method that has `ValueSignature(tpe)` where `tpe` is not `ByNameType` ', 'comment_created': datetime.datetime(2021, 7, 7, 17, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 666094576, 'comment_body': ""I think so too, but yeah I couldn't find a work-around for that now.\r\nYou mean refactor the core compiler, not the semanticdb extractor, right?"", 'comment_created': datetime.datetime(2021, 7, 8, 11, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 666110595, 'comment_body': ""Yeah... that's right.\r\nThe problem here is that we don't have a way to express multiple type params for a \r\nMethodSignature https://scalameta.org/docs/semanticdb/specification.html#signature\r\n\r\nWhat we can do without extending SematnicDB would be grouping those type params into one type params like\r\n`abstract method map [typeparam T, typeparam U ](param t: F[T])(param f: Function1[T, U]): F[U]`, but the things will be complicated when type `U` depends on type `T` as extension method's term parameter doesn.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 8, 11, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 666124878, 'comment_body': 'I think all you should need to do is allow `SemanticSymbolBuilder` to create a local index for some other proxy class than a `Symbol`, which represents the wildcard, and then specialise the `symbolInfo` and `sscope` factories just for these wildcards, as you already know exactly the `properties`, `kind`, `displayName`, `signature`, `access`, etc, and then the `symbol` is just that local Id you generated', 'comment_created': datetime.datetime(2021, 7, 8, 11, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 666676968, 'comment_body': ""I found some bugs by making crush if we couldn't find the symbol from the table\r\n- https://github.com/lampepfl/dotty/pull/12885/commits/907a386bdf8331ea9312652d4759a391dee8df06\r\n- https://github.com/lampepfl/dotty/pull/12885/commits/08d2382f343d560b74127aa84b9d510b0fe771c6\r\n\r\nHowever, my concern is about there might be some potential bugs there and I'm afraid of crashing the compiler or the process of building SemanticDB just because of the bug here.\r\n(And we still have a problem with looking up the symbol for export clause https://github.com/lampepfl/dotty/pull/12885#discussion_r665115632 )\r\n\r\nWhat do you think about just showing a warning message instead of crashing when we failed to lookup symbol?"", 'comment_created': datetime.datetime(2021, 7, 9, 5, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 666767985, 'comment_body': 'a warning would be better I think - where the message should make it clear it is some internal implementation failure during SemanticDB analysis', 'comment_created': datetime.datetime(2021, 7, 9, 8, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 666772469, 'comment_body': ""we still don't want evidence parameters (desugared from context bounds) showing as a definition in the occurrences section I believe, as they are not visible in the source code, what do you think @tgodzik?"", 'comment_created': datetime.datetime(2021, 7, 9, 8, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 666776028, 'comment_body': '```suggestion\r\n          //   - self-type of enclosing class\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 8, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 666777276, 'comment_body': 'same comment as for the symbol lookup for method parameters, we should produce some sort of notification when there is a missing key', 'comment_created': datetime.datetime(2021, 7, 9, 8, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 666863203, 'comment_body': 'Yeah, that should ideally be on the synthetics section', 'comment_created': datetime.datetime(2021, 7, 9, 10, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 667035048, 'comment_body': ""I found we fail to retrieve the symbol for `pickOne` (of `SpecialRefinement { def pickOne(...) }`) because we don't traverse and generate the semanticdb symbol occurrence for `pickOne`.\r\n\r\nFor example, the `.expect.scala` for `PickOneRefinement_1` looks like:\r\n\r\n```scala\r\ntrait SpecialRefinement/*<-example::SpecialRefinement#*/ {\r\n  def pickOne/*<-example::SpecialRefinement#pickOne().*/(as/*<-example::SpecialRefinement#pickOne().(as)*/: String/*->scala::Predef.String#*/*): Option/*->scala::Option#*/[Any/*->scala::Any#*/]\r\n}\r\n\r\nclass PickOneRefinement_1/*<-example::PickOneRefinement_1#*/[S/*<-example::PickOneRefinement_1#[S]*/ <: SpecialRefinement { def pickOne(as: String*): Option[String] }] {\r\n  def run/*<-example::PickOneRefinement_1#run().*/(s/*<-example::PickOneRefinement_1#run().(s)*/: S/*->example::PickOneRefinement_1#[S]*/, as/*<-example::PickOneRefinement_1#run().(as)*/: String/*->scala::Predef.String#*/*): Option/*->scala::Option#*/[String/*->scala::Predef.String#*/] = s/*->example::PickOneRefinement_1#run().(s)*/.pickOne/*->example::SpecialRefinement#pickOne().*/(as/*->example::PickOneRefinement_1#run().(as)*/:_*)\r\n}\r\n```\r\n\r\nBecause the `TypeDef` for `S` looks like, and we don't traverse the `pickOne` inside `TypeTree`.\r\n\r\n```scala\r\nTypeDef(\r\n  S,\r\n  TypeTree[TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class example)),trait SpecialRefinement),pickOne,MethodType(List(as), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String)))), AppliedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Option),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String))))))]\r\n)\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2021, 7, 9, 15, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667038048, 'comment_body': 'Fixed https://github.com/lampepfl/dotty/pull/12885/commits/e68287a1229928ba27cae88e3f88d64ed30e0b70', 'comment_created': datetime.datetime(2021, 7, 9, 15, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667597135, 'comment_body': 'Done https://github.com/lampepfl/dotty/pull/12885/commits/05d31b85340c0c13985aecb5796b169e45d16c7f', 'comment_created': datetime.datetime(2021, 7, 12, 3, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667597683, 'comment_body': 'done:+1: https://github.com/lampepfl/dotty/pull/12885/commits/1622980bc234e6b5aa69ea04c69502d89fdf66c9', 'comment_created': datetime.datetime(2021, 7, 12, 3, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667598994, 'comment_body': 'done https://github.com/lampepfl/dotty/pull/12885/commits/82a504323e1c539182afa540e5ffd4d680343a96', 'comment_created': datetime.datetime(2021, 7, 12, 3, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667599918, 'comment_body': 'Emit a warning if symbol lookup failed https://github.com/lampepfl/dotty/pull/12885/commits/09e62eb35a607cce3c35ee3cd5442eb4fac46c5e\r\n\r\nThe warning looks like\r\n`Internal error in extracting SemanticDB while compiling /Users/tanishiking/src/github.com/tanishiking/dotty/tests/semanticdb/expect/exports-package.scala: Ignoring T of type HKTypeLambda(List(T), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), AppliedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class exports)),object example),trait Encoder),List(TypeParamRef(T))))`\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 12, 3, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667692852, 'comment_body': 'Ah right, I will exclude them from `occurrence` while keeping them in SymbolInformation section :+1:', 'comment_created': datetime.datetime(2021, 7, 12, 7, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667696470, 'comment_body': 'looks great, thank you', 'comment_created': datetime.datetime(2021, 7, 12, 7, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 667698510, 'comment_body': ""Currently, I suppress the warning of symbol lookup failure from this situation https://github.com/lampepfl/dotty/pull/12885/commits/d14cfa5b210ea3572eb6986c9d7b020e3b2f6309 because it's a known issue and I'm not sure how can we fix 🤔 \r\nI guess we can fix this by creating a symbol table across multiple TextDocuments, but I think it cost a ton of memory for a big project."", 'comment_created': datetime.datetime(2021, 7, 12, 7, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667702343, 'comment_body': 'marking resolved as this code has been replaced', 'comment_created': datetime.datetime(2021, 7, 12, 7, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 667715544, 'comment_body': '~Maybe we can retrieve the symbol of `pickOne` using `SymDenotaiton#member`~\r\ncreating a new symbol for pickOne here ?', 'comment_created': datetime.datetime(2021, 7, 12, 8, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667720504, 'comment_body': 'This is also the problem of `TypeTree`, maybe we can work-around this by creating new symbol.', 'comment_created': datetime.datetime(2021, 7, 12, 8, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667723926, 'comment_body': '(maybe in the future) Or maybe we can traverse inside the TypeTree and construct a symbol table associate between name and TypeTree?', 'comment_created': datetime.datetime(2021, 7, 12, 8, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 667743688, 'comment_body': 'in the scala 2 implementation, a wildcard type parameter of a type parameter is a global symbol in the TextDocument,\r\ne.g.\r\n```scala\r\nclass C {\r\n  def typeLambda1[M[_]] = ???\r\n}\r\n```\r\nwill generate\r\n\r\n```\r\nSymbols:\r\n_empty_/C# => class C extends AnyRef { +2 decls }\r\n_empty_/C#`<init>`(). => primary ctor <init>()\r\n_empty_/C#typeLambda1(). => method typeLambda1[M[_]]: Nothing\r\n_empty_/C#typeLambda1().[M] => typeparam M[_]\r\n_empty_/C#typeLambda1().[M][_] => typeparam _\r\n```\r\n\r\ncurrently this `newSymbol` call here will create a local symbol', 'comment_created': datetime.datetime(2021, 7, 12, 8, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 670170489, 'comment_body': ""Made it global 👍  (but it doesn't appear in the Symbols section) https://github.com/lampepfl/dotty/pull/12885/commits/95af95c262ffaa31b3e375136aaf80cd13677ed6\r\n\r\nBesides, if the scope contains a fake symbol (e.g. wildcard type symbol or fake symbol that represents type param), made it hard-link, because those fake symbols never appear in Symbol section, and if we symlink those fake symbols, we always alias to no symbol.\r\nhttps://github.com/lampepfl/dotty/pull/12885/commits/49250915e0d28f3450f03d16a24c14577bc17562\r\n\r\nI think hard-linking symbols are ok because\r\n- the only drawback of hard-link is an increased size of SemanticDB by duplicating symbols both in the Symbols section and hard-linked symbols.\r\n- However, since the fake symbol doesn't exist in Symbol section.\r\n\r\nwhat do you think about it? @tgodzik "", 'comment_created': datetime.datetime(2021, 7, 15, 6, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 670172145, 'comment_body': 'done https://github.com/lampepfl/dotty/pull/12885/commits/8801a69d1f382f688fdfca1ba02ca12874191db9', 'comment_created': datetime.datetime(2021, 7, 15, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 670177898, 'comment_body': ""`rt.member` works for this case :tada:\r\nhttps://github.com/lampepfl/dotty/pull/12885/commits/332609f7adb814c813ec3addfb78e896271f3703\r\n\r\n(However, I actually don't understand, which case it works and which case it doesn't...)"", 'comment_created': datetime.datetime(2021, 7, 15, 6, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 670183279, 'comment_body': 'It also works with `Type.member` https://github.com/lampepfl/dotty/pull/12885/commits/5913b023bd13ee84e03f78e8aee335295e088aef', 'comment_created': datetime.datetime(2021, 7, 15, 6, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 670183804, 'comment_body': 'fixed https://github.com/lampepfl/dotty/pull/12885/commits/26fc7ca4165e433df468ccfda14c3d6325f9ce13', 'comment_created': datetime.datetime(2021, 7, 15, 6, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 670185293, 'comment_body': 'done for wildcard symbol https://github.com/lampepfl/dotty/pull/12885/commits/605368532fe5c3479da92f50a255a243b2729adf\r\nand also create fake symbol for typeparam https://github.com/lampepfl/dotty/pull/12885/commits/95af95c262ffaa31b3e375136aaf80cd13677ed6', 'comment_created': datetime.datetime(2021, 7, 15, 6, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 672943091, 'comment_body': 'I think we should still try to replicate what Scala 2 does for what it considers global symbols, so all global symbols should appear in the symbols section, however deciding on this issue could be for a future PR', 'comment_created': datetime.datetime(2021, 7, 20, 9, 4, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 673285350, 'comment_body': '@tanishiking what about this comment? We could reuse the sam StringBuilder everywhere.', 'comment_created': datetime.datetime(2021, 7, 20, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 673306018, 'comment_body': ""@tanishiking maybe let's add this together with TypeLambda and MatchType PR?"", 'comment_created': datetime.datetime(2021, 7, 20, 16, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 673327139, 'comment_body': '`/*->example::Synthetic#J#evidence$1.*/ ` should not be added, did I skip comments disussing it?', 'comment_created': datetime.datetime(2021, 7, 20, 17, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 673328278, 'comment_body': 'We seems to be missing occurrences for `Txn[T]`', 'comment_created': datetime.datetime(2021, 7, 20, 17, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 673346909, 'comment_body': ""FYI @tanishiking `/*->scala::collection::MapOps#apply().*/` looks to be synthetic, it's something we would want to move to the synthetic section later on."", 'comment_created': datetime.datetime(2021, 7, 20, 17, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 673347792, 'comment_body': 'We are missing occurrences for `[T] =>> [U] =>> (U, T)]` but probably not part of this PR', 'comment_created': datetime.datetime(2021, 7, 20, 17, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 673987228, 'comment_body': 'Yeah... the part of `T <: Txn[T]` has the tree like:\r\n```scala\r\nTypeDef(T,TypeTree[TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),trait Txn),List(LazyRef(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),trait Txn)),type T)))))])\r\n```\r\nand not sure how can we traverse into the `Txn[T]` part and get those symbols 🤔 ', 'comment_created': datetime.datetime(2021, 7, 21, 13, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 673990610, 'comment_body': ""It's not important for this PR, but maybe we could raise a follow up issue?"", 'comment_created': datetime.datetime(2021, 7, 21, 13, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 674592363, 'comment_body': ""Thank you for the comment, maybe we should discuss the design in another issues but here's my opinion:\r\n\r\nIn terms of wildcard symbols, maybe we should change them to local symbols both in Scala2 and Scala3: because\r\n\r\n- Global Symbols are the symbols that can be referenced outside the document where the definition is located\r\n  - However, wildcard symbols are never referred by anything.\r\n  - Therefore, I think either (local or global) is fine for wildcard symbols\r\n- If we should replicate the SemanticDB from Scala3 to Scala2 as much as possible, I think it would be better to make wildcard symbols in Scala2 to local\r\n  - because they are never referred by others and it's easier to implement in Scala3"", 'comment_created': datetime.datetime(2021, 7, 22, 8, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 674592937, 'comment_body': 'This is the same issue with TypeTree stuff: https://github.com/lampepfl/dotty/pull/12885#discussion_r673987228', 'comment_created': datetime.datetime(2021, 7, 22, 8, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 674963638, 'comment_body': ""Excluded the symbols that don't present in source from symbol occurrences: https://github.com/lampepfl/dotty/pull/12885/commits/fd3b71ca620c7e40dd36a004e614e49614219b44\r\nIn addition to `evidence` occurrence, the commit removed some occurrences but it matches Scala2"", 'comment_created': datetime.datetime(2021, 7, 22, 16, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 676786718, 'comment_body': 'Followup: recover the symbol occurrence for package object https://github.com/lampepfl/dotty/pull/12885/commits/4f60d9f1828dc68cee40192993280e6af987950d', 'comment_created': datetime.datetime(2021, 7, 26, 17, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 677466355, 'comment_body': 'from this example test case in scalameta, it seems that secondary constructors should remain in the occurrences:\r\nhttps://github.com/scalameta/scalameta/blob/main/tests/jvm/src/test/resources/example/Flags.scala', 'comment_created': datetime.datetime(2021, 7, 27, 13, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 677483330, 'comment_body': 'looking up a symbol when it could not be extracted from a tree for refinements is incorrect, as we see in the example for `PickOneRefinement_1` the type of type parameter `S` is wrong, as it uses the type of the symbol being refined and not the type of the refinement - it should be\r\n```diff\r\n-typeparam S  <: SpecialRefinement { abstract method pickOne (param as: String*): Option[Any] }\r\n+typeparam S  <: SpecialRefinement { abstract method pickOne (param as: String*): Option[String] }\r\n```\r\n\r\nin this case the refinement type needs to be stored alongside the symbol so that it is used as the type information. So my suggestion would be to make a new `FakeSymbol` type.', 'comment_created': datetime.datetime(2021, 7, 27, 14, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 677514308, 'comment_body': 'These `T` type parameters should appear independently in the symbol section, maybe one idea here would be to whenever you have a `TypeTree` traverse it and create a symbol proxy for each interesting part of the type, such as lambda type parameters', 'comment_created': datetime.datetime(2021, 7, 27, 14, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 677519839, 'comment_body': ""We can't pretend that `F[T][U]` is `F[T, U]` as that breaks the arity of `F`, this will need a new semanticdb message to support, dotty captures this in `TypeRef` which just has the `prefix` and `symbol` fields, and then `AppliedType` has a `tycon` field, the type being applied and could be a nested `AppliedType`, and the `args` field,"", 'comment_created': datetime.datetime(2021, 7, 27, 14, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 677545772, 'comment_body': ""Also I don't think you would be able to extract any sensible spans from within a `TypeTree` without scanning source code - only trees have spans and the argument of `TypeTree` is a type."", 'comment_created': datetime.datetime(2021, 7, 27, 15, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 677561529, 'comment_body': 'I think instead of Hard Linking, they should just be registered in the symbols section (unless they are within a refinement)', 'comment_created': datetime.datetime(2021, 7, 27, 15, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 677580653, 'comment_body': 'I believe this still needs resolving', 'comment_created': datetime.datetime(2021, 7, 27, 15, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 678070661, 'comment_body': 'Fixed! https://github.com/lampepfl/dotty/pull/12885/commits/6529e8f64b6bb540e083d5eaa1e0765bea74eafe', 'comment_created': datetime.datetime(2021, 7, 28, 8, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 678283402, 'comment_body': 'Registered into symbols section :tada: https://github.com/lampepfl/dotty/pull/12885/commits/8e7e764685a8485f970cf01792d43e26ace782b4', 'comment_created': datetime.datetime(2021, 7, 28, 13, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 678284870, 'comment_body': 'done https://github.com/lampepfl/dotty/commit/8e7e764685a8485f970cf01792d43e26ace782b4', 'comment_created': datetime.datetime(2021, 7, 28, 13, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 678285135, 'comment_body': 'Fixed https://github.com/lampepfl/dotty/pull/12885/commits/ba8140f03b360f869dc0e3695701647e2be107dc', 'comment_created': datetime.datetime(2021, 7, 28, 13, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 678361643, 'comment_body': 'Sorry for all the complication, but I think you should only register `WildcardTypeSymbol` in the symbol section when it is the parameter of `TypeBounds`, and we are not inside the arguments of an `AppliedType` - as soon as you are in an `AppliedType` then the wildcard is local to the `ExistentialType` that binds it. For example a lot of no arg methods, or even vals, are getting these type parameters', 'comment_created': datetime.datetime(2021, 7, 28, 14, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 678501515, 'comment_body': ""No problem, thank you for the feedback! I agree we shouldn't add those wildcard symbols in ExistentialType to the symbols section :)\r\nFixed https://github.com/lampepfl/dotty/pull/12885/commits/114d4c2c8f44d85276e12f8ef441cefe0d328124"", 'comment_created': datetime.datetime(2021, 7, 28, 17, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 678933061, 'comment_body': ' discussion continues here ... https://github.com/lampepfl/dotty/pull/12885#discussion_r678361643', 'comment_created': datetime.datetime(2021, 7, 29, 8, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 684558390, 'comment_body': 'still could remove these comments', 'comment_created': datetime.datetime(2021, 8, 7, 0, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684559400, 'comment_body': 'style choice\r\n```suggestion\r\n    given s.SemanticSymbolBuilder = s.SemanticSymbolBuilder()\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 0, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684564307, 'comment_body': ""```suggestion\r\n          if content.lift(span.end - 1).exists(_ == '`') then\r\n```"", 'comment_created': datetime.datetime(2021, 8, 7, 1, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684566642, 'comment_body': '```suggestion\r\n          symbol = sname,\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 1, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684566738, 'comment_body': 'at this point you may as well remove `SymbolOps.symbolName` and have this as the only extension with that name\r\n```suggestion\r\n        case s: Symbol => builder.symbolName(s)\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 1, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684567501, 'comment_body': 'for consistency these extensions could be wrapped, e.g.\r\n```suggestion\r\n  given SemanticSymbolOps: AnyRef with\r\n    extension (sym: SemanticSymbol)\r\n```\r\nThis is just a choice so that extensions are only available when you have `import Scala3.given`', 'comment_created': datetime.datetime(2021, 8, 7, 1, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684567839, 'comment_body': 'Again here I suggest you could inline the definition from `SymbolOps.symbolInfo` here and remove the original, although that one is more complex', 'comment_created': datetime.datetime(2021, 8, 7, 1, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684570616, 'comment_body': 'could make use of `import scala.util.chaining.*`\r\n```suggestion\r\n                  TermParamRefSymbol(sym, name, info).tap(registerFakeSymbol)\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 2, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684570679, 'comment_body': '```suggestion\r\n                  TypeParamRefSymbol(sym, name, info).tap(registerFakeSymbol)\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 2, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684571086, 'comment_body': 'I was talking to @smarter and you may be able to resolve the `TypeTree` issue here by reusing the trees for the primary constructor type parameters (accessed through `sym.defTree`) - being careful to substitute symbols - maybe the same for exported type aliases (look in tree of rhs to get a type, but then exports of exports may pick up `TypeTree`)\r\n\r\nEdit - however looking at metac.expect it seems the fake symbols are solving this problem pretty well - so may not be worth investigating (although looking in these trees will help for extracting spans)', 'comment_created': datetime.datetime(2021, 8, 7, 2, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684571463, 'comment_body': '```suggestion\r\n                  WildcardTypeSymbol(sym, bounds).tap(registerFakeSymbol)\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 2, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684571474, 'comment_body': '```suggestion\r\n                    TypeParamRefSymbol(sym, paramName, bounds).tap(registerFakeSymbol)\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 2, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684572866, 'comment_body': 'not sure whats going on here in the upper bound', 'comment_created': datetime.datetime(2021, 8, 7, 2, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684573412, 'comment_body': 'we should probably have a new signature kind for the alias part of an opaque type definition, e.g this is `OpaqueB /* >: Nothing <: Any */ = Int`', 'comment_created': datetime.datetime(2021, 8, 7, 2, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 684974628, 'comment_body': ""Thanks! I'll take a look at it in another issue / PR.\r\nWhile the lack of symbol problem in TypeTree has been well resolved in terms of signature, I believe the lack of symbol occurrence in TypeTree is an issue to fix (it leads to the problem in rename feature in metals, and this kind of problem \r\nhttps://github.com/tanishiking/scalafix-unused/issues/5 in scalafix semantic rules)."", 'comment_created': datetime.datetime(2021, 8, 9, 7, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 685072536, 'comment_body': 'This is `<?>` because the upper bound is TypeLambda, which is not yet supported in this PR. This should be resolved in the later PR.\r\nhttps://github.com/lampepfl/dotty/blob/04464b9e2f3a67c5f42c608ea33d0f56cf223464/tests/semanticdb/expect/Advanced.scala#L48', 'comment_created': datetime.datetime(2021, 8, 9, 10, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 685074047, 'comment_body': 'Could you elaborate on it?', 'comment_created': datetime.datetime(2021, 8, 9, 10, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 685581318, 'comment_body': 'an opaque type RHS is a TypeBoundsTree which has three fields - lower bound, upper bound, and alias type - we should probably record the alias in the signature as well as its bounds', 'comment_created': datetime.datetime(2021, 8, 9, 23, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 685581638, 'comment_body': 'ah yes that makes sense', 'comment_created': datetime.datetime(2021, 8, 9, 23, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}]","[{'commit_sha': 'dcfa71708531d382f515b3c761d531e76f8e48b6', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1685387637a26ac8d45de688ffaf4feb5a7cff2', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a6da7fd59cc49fc814d2cc55bddf8688f900b1', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae5590b832b7f1cb86a73301dda5c77e44b9bacd', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9577d734b6492c1d5bb68f4988ef3305efe0fa6', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0233aac711c64ce32977583436fabea2060e9634', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d46a0fc7163cd989e92a01a2712afa30d7c9696', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e47a7f96be80a60050c65fd877ae18b287acc46f', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2985edc45ff2d4a999af6f96f3aa3a35f0f161f', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80271a899daf7f66e33e0db63e718417a3d1b6e8', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c0b14af84b9933fac5ba557de66bfdbb4fecc38', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebb0edeaf3162413fdb814bed128fc375ad3bb52', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af84cad01c280481a87841cd26dd31acf192e272', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8c6c12005da635ac3b4a3a275d4a21ecee0b16b', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60aac597363a6cf8d584802eac3e5b543bdf2504', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ee5d4ce0ae5c7db575621cb6e0a5d06afb54939', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4c9eb07a58b3ef7fd16cebd839e48fb6973c01', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a69a434f804370e019f41244167eb08d93718c8', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce730ccdd9d84387fccdabcbada24a7320691e7f', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bccc78db45d2dfeb5e0efa4f5c20309085ab8798', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab4ba376ee50adc64a828e4ee1cc14b65deacd4a', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e633017434619b057fa125463f0ea0170e865a70', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c887e168a6873aaa18b722eca3243fb7607e14a', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '855407bdeb9b8d6199a9cbf6fc8de3a0d36d24a6', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfeaab42ffaf8b82e7eb8e0ecdf201063e442a44', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b581e45ce10e741ecc164dc2397948c1fe05228b', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b144a73de774fbf2cc544f9e238c9cc901b7f39', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f13751314951decd9de788cd365131d9883bc35', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c06dc773095de00a7b769a3dcbd589dfc8960b', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a276ec0c0d5cddea5e3c0d7a0f447b7049583bc2', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfa43780a1eaa2144157516fa604c43b6d1c0b1b', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d8777e466cf79471b2dfcd54acc1a0d268ff684', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21e39e0577dd69f4399e8b3211e20ce164860680', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a69cc97b1cf5d7778c8737a8e8ce401c4e95ecec', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fdf6508c3bb414b04c10c6d72a1680cc249bc40', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aad48ea0eac4130572164227d58755265a865c8d', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c111a492c2aca456f501dec7372654ac9987c77a', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f9ce74e34f75f738278c732d343e3c2e0ad68e1', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c48941502b542cd5f43e46670df06563c6980f25', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '326e43ec86c01e8b883c69ada43047d90ed1038f', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f0063d365a27b17c787cc6dea33eaa046e9205f', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45c8cc114241e081124efbe46055b43ad4ef916c', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd75b365cc11d36c7908d43764a98adbd1688701', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e97e7613c12d3bdd8abf81058cfbe05f2c5bafa', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef5be020c9e7c02446772140910b9e6a03aeaa8', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adae1ff6103e05541b884b2ebe0dd7a79ad9e0de', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3bd0d5db85e29d0b31e604b8bbaa600b6b0aa54', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3c8ad399b35e76e86b046e5d1af10fb5d44bfa', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3548a1df8855cce35bbd8a82febcd2d11621d87', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4af72b9e5fffdda9ddc01a748a9978429a54e94b', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9838dfb119d695f83cf07740388749f1d08c0e0', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a82605fb5a592cd0cb285648d9414c6f296c7cc4', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '056f4a416d444f58a9f2e0ae2f4afc19cb56a95e', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
711183398,"[SemanticDB] Support synthetics: implicit params, context params, and implicit conversions","Related https://github.com/lampepfl/dotty/issues/13135

This PR adds initial support of [synthetics](https://scalameta.org/docs/semanticdb/specification.html#synthetic) to SemanticDB.

Extract synthetics for the following synthesized trees.

- Implicit params (application)
- Context params
  - context params application
  - Invented given name
  - Anonymous using clause

## Questions
- Should we add a compiler option to control whether the compiler should extract synthetics information or not
  - which is available in Scala2 https://scalameta.org/docs/semanticdb/guide.html#scalac-compiler-plugin and **default to off**
  - `-P:semanticdb:synthetics:<value>` in Scala2

## Added synthetics
### implicit / context params application
```scala
def foo(x: Int)(using Int) = ???
def m(using x: Int) = foo(0)

// synthetics
def m(using x: Int) = foo(0)<<(x)>>
```

```scala
Synthetic(
  <foo(0)>,
  ApplyTree(
    OriginalTree(<foo(0)>),
    List(
      IdTree(<x>),
    )
  )
)
```

Same with `Implicit parameters` synthetics in Scala2 https://scalameta.org/docs/semanticdb/specification.html#synthetic-1

</details>

### anonymous context params
```scala
def foo(using Int) = ???
 
// synthetic
def foo(using x$1: Int) = ???
```

```scala
Synthetic(
  <Int>,
  IdTree(<x$1>)
)
```

(Maybe `range` should be between `using` and `Int`, instead of overlaps with `Int`)?.

</details>

### Invented given value
```scala
given Int = 1

// synthetic
given given_Int: Int = 1
```

```scala
Synthetic(
  <given Int = 1>,
  IdTree(<given_Int>)
)
```

Maybe the range should be between `given` and `Int`?


### Implicit conversion

```scala
""fooo"".stripPrefix(""o"")

// synthetic
Synthetic(
  <""fooo"">,
  ApplyTree(
    IdTree(<Predef.augmentString>),
    List(OriginalTree(<""fooo"">)))
)
```
",True,13288,https://api.github.com/repos/scala/scala3/pulls/13288,https://github.com/scala/scala3/pull/13288,closed,433,64,11,7,7,30,1,1,[{'name': 'area:semanticdb'}],2021-08-12 16:07:39+00:00,2021-08-30 14:20:26+00:00,1548767.0,"17 days, 22:12:47","[{'comment_id': 689118292, 'comment_body': 'Basically copied from https://github.com/scalameta/scalameta/blob/7a6fb301264f5a1ec37e1b3ba4793f279f87095d/semanticdb/scalac/library/src/main/scala/scala/meta/internal/semanticdb/scalac/TextDocumentOps.scala#L453-L466', 'comment_created': datetime.datetime(2021, 8, 15, 17, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689118467, 'comment_body': 'implicit parameter or context parameter application', 'comment_created': datetime.datetime(2021, 8, 15, 17, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689118517, 'comment_body': 'implicit conversion', 'comment_created': datetime.datetime(2021, 8, 15, 17, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689118564, 'comment_body': 'anonymous using params or anonymous given\r\n`(using Int)` or `given Int`', 'comment_created': datetime.datetime(2021, 8, 15, 17, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689118657, 'comment_body': 'Just moved to Scala3', 'comment_created': datetime.datetime(2021, 8, 15, 17, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689118794, 'comment_body': '`!namePresentInSource` is needed in case `given given_foo: Int = ...` (explicitly name `given_` for given instance)', 'comment_created': datetime.datetime(2021, 8, 15, 17, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689119091, 'comment_body': '```scala\r\ndef bar(using Foo) = 42\r\n\r\n// synthetics\r\ndef bar(using x$1 Foo) = 42\r\n```\r\n\r\nhttps://github.com/lampepfl/dotty/blob/d2fd229490b558ff48f5b7c0ae6462d72d55b2af/tests/semanticdb/expect/AnonymousGiven.scala#L5', 'comment_created': datetime.datetime(2021, 8, 15, 17, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689119279, 'comment_body': '```scala\r\nextension (s: String)\r\n  def readInto[T](using Read[T]): Option[T] = summon[Read[T]].fromString(s)\r\n\r\n// synthetics\r\n  def readInto[T](using x$2 Read[T]): Option[T] = summon[Read[T]](x$2).fromString(s)\r\n\r\n```\r\n\r\nhttps://github.com/lampepfl/dotty/blob/d2fd229490b558ff48f5b7c0ae6462d72d55b2af/tests/semanticdb/expect/Extension.scala#L14-L15', 'comment_created': datetime.datetime(2021, 8, 15, 17, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689119433, 'comment_body': 'https://github.com/lampepfl/dotty/blob/d2fd229490b558ff48f5b7c0ae6462d72d55b2af/tests/semanticdb/expect/InventedNames.scala#L14-L42', 'comment_created': datetime.datetime(2021, 8, 15, 17, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 690472816, 'comment_body': 'looks like this change got overridden\r\n```suggestion\r\n    given s.SemanticSymbolBuilder = s.SemanticSymbolBuilder()\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 15, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 690478828, 'comment_body': 'style suggestion for the few places this is done\r\n```suggestion\r\n                    synth.tryFindSynthetic(tree).foreach(synthetics.addOne)\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 15, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 690483417, 'comment_body': 'it seems this check could be merged with the above case', 'comment_created': datetime.datetime(2021, 8, 17, 15, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 690497990, 'comment_body': ""this one I don't think should appear because it is part of the wrapper code generated from the `@main` desugaring, in which case there is a whole lot more generated code  - but it is kind of a mess because we still want the symbols the annotation generates to appear in the symbol section @tgodzik "", 'comment_created': datetime.datetime(2021, 8, 17, 15, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 690503112, 'comment_body': 'probably deal with in another PR', 'comment_created': datetime.datetime(2021, 8, 17, 15, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 693666639, 'comment_body': '👍 to drop this synthetic', 'comment_created': datetime.datetime(2021, 8, 23, 5, 19, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 693666676, 'comment_body': 'done https://github.com/lampepfl/dotty/pull/13288/commits/336ac1ffb17ffef7a879999d8608300ea20724ec ', 'comment_created': datetime.datetime(2021, 8, 23, 5, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 693666710, 'comment_body': ':+1: https://github.com/lampepfl/dotty/pull/13288/commits/336ac1ffb17ffef7a879999d8608300ea20724ec', 'comment_created': datetime.datetime(2021, 8, 23, 5, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 693666745, 'comment_body': '👍 https://github.com/lampepfl/dotty/pull/13288/commits/336ac1ffb17ffef7a879999d8608300ea20724ec', 'comment_created': datetime.datetime(2021, 8, 23, 5, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 695049709, 'comment_body': 'Oh looks like it is still there after https://github.com/lampepfl/dotty/pull/13288/commits/560fc18e96b2fd026e5178034990c656ccbd4b7a ', 'comment_created': datetime.datetime(2021, 8, 24, 17, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 695056466, 'comment_body': 'https://github.com/lampepfl/dotty/pull/13288/commits/4bce2ba1838e146dc00a5ef782f65a1feffb8ada removed', 'comment_created': datetime.datetime(2021, 8, 24, 17, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 695881818, 'comment_body': 'this isn\'t enough to cover all the `@main` boilerplate, e.g. a main method with varargs will call the `parseRemainingArguments` and insert implicit args e.g. :\r\n```scala\r\n@main def readInts(ints: Int*): Unit = println(ints.mkString("",""))\r\n```\r\nthis will produce the synthetic:\r\n```\r\n\r\nSynthetics:\r\n[6:0..6:0): => *(given_FromString_Int)\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 25, 15, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 695910624, 'comment_body': 'A way to avoid this and more is to add a case to `ExtractSemanticDB` for `case tree: TypeDef` where we do not traverse the children if the symbol is `Invisible` -\r\n\r\n```scala\r\ncase tree: TypeDef =>\r\n  if !tree.symbol.is(Invisible) then\r\n    traverseChildren(tree)\r\n```\r\nthis seems to only affect classes generated by `@main` so far - will need @tgodzik to verify this is ok as it will remove all occurrences', 'comment_created': datetime.datetime(2021, 8, 25, 16, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 695911807, 'comment_body': 'alternatively adding a case in the `Template` traversal where we avoid the body if the class symbol is `Invisible`', 'comment_created': datetime.datetime(2021, 8, 25, 16, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 697463516, 'comment_body': ""https://github.com/lampepfl/dotty/pull/13288/commits/14e9be90bb0304d496a8caea7afcd6923ffb16c4\r\nSo I did the latter option (adding a case for the `Template` whose owner is an `Invisible` and stop traverse for that), and excluded the synthetics of both `parseArgument` and `parseRemainingArguments` :tada:\r\n\r\nHowever, it ended up removing the constructor symbols and constructor arguments' symbol of the generated class from the Symbols section as @bishabosha mentioned.\r\nWhat do you think? @tgodzik \r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 27, 13, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 697482815, 'comment_body': '@dos65 also what do you think of the removed occurrences for the `@main` boilerplate - the class symbol still remains', 'comment_created': datetime.datetime(2021, 8, 27, 14, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 697623068, 'comment_body': 'im thinking this should be more like the following (with a new tree kind, or a using flag on `ApplyTree`?), otherwise applying the substitution here would not compile\r\n```suggestion\r\n[51:24..51:30):foo(0) => *(using x$1)\r\n```', 'comment_created': datetime.datetime(2021, 8, 27, 17, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 697627838, 'comment_body': ""Removing this synthetic is a good thing.\r\n\r\nWhat about class symbols, leaving them isn't a problem. Anyway, as I see there is no occurrences that refers to these symbols, so that's ok.\r\n"", 'comment_created': datetime.datetime(2021, 8, 27, 18, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dos65', 'type': 'User'}, {'comment_id': 697641040, 'comment_body': ""~I think it should be `synthetics` consumer's responsibility (e.g. when `metals` print context-param application, it should print `using x$1` instead of `x$1`), and they can check the `x$1` is `given instance` by looking up their symbol information.~\r\n↑ Nevermind, we can't necessarily look up the symbol information, for example, if the given instance is imported by wildcard import...\r\nI agree. we should add a new tree to SemanticDB so we can tell the difference between application and context-param application. (But adding a tree just for context-param application is too scala3 specific? 🤔 )"", 'comment_created': datetime.datetime(2021, 8, 27, 18, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 697670175, 'comment_body': ""I'm not so sure how it works for insertion of multiple implicit parameters, but i guess those are single argument applications also, so can't be applied together (making the using distinction maybe not a huge deal)"", 'comment_created': datetime.datetime(2021, 8, 27, 19, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 697870554, 'comment_body': ""Maybe we can go with this at this moment, and discuss in separate issue (in scalameta/scalameta?)\r\nIt's definitely good to have, but as far as I know, there're no scalameta based tools to use synthetics to insert the text directly. (metals just shows the implicit / context arguments).\r\n"", 'comment_created': datetime.datetime(2021, 8, 28, 13, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}]","[{'commit_sha': 'e07e7d0b6ddedf7727d205e035c0741ae0cf4de1', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28c384676b289549533cb854c4a8c31dac6aaa59', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9fbd0736d8b583ba7ba387c3a1efd107152f4a', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd67b6eca4c36d0a0988b59912f3e8d5fcc2e19b', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aef23bce20b273935a629b33ed36a3bb7e610b53', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4f14007d95233fccc1d43f30ccd32e829d3d354', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0edab1a57b04e5382b90b4ee5f95aab62f221776', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
713228981,[WIP] Add TypeApplication synthetics,,False,5,https://api.github.com/repos/tanishiking/scala3/pulls/5,https://github.com/tanishiking/scala3/pull/5,open,721,73,11,9,0,22,0,0,[],2021-08-16 08:32:50+00:00,,0.0,,"[{'comment_id': 689342592, 'comment_body': ""synthetic's range should be `(1,2,3)` ?"", 'comment_created': datetime.datetime(2021, 8, 16, 8, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689343276, 'comment_body': '`case IntTag extends Tag[Int][Int]` ????', 'comment_created': datetime.datetime(2021, 8, 16, 8, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689343685, 'comment_body': 'do we need this?', 'comment_created': datetime.datetime(2021, 8, 16, 8, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689345392, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 8, 16, 8, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689345984, 'comment_body': 'what?', 'comment_created': datetime.datetime(2021, 8, 16, 8, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689346208, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 8, 16, 8, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689346562, 'comment_body': 'perfect :100:', 'comment_created': datetime.datetime(2021, 8, 16, 8, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689346812, 'comment_body': 'why we have type application here', 'comment_created': datetime.datetime(2021, 8, 16, 8, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689347312, 'comment_body': ""tuple apply's range should contains tuple"", 'comment_created': datetime.datetime(2021, 8, 16, 8, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689348360, 'comment_body': ""for comprehension shouldn't emit at this moment."", 'comment_created': datetime.datetime(2021, 8, 16, 8, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689349267, 'comment_body': 'wanna test\r\n\r\n```scala\r\nextension [A](any: A)\r\n  def foo[B] = ...\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 8, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689349857, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 8, 16, 8, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689351314, 'comment_body': 'suppress revisit', 'comment_created': datetime.datetime(2021, 8, 16, 8, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689352113, 'comment_body': 'Methods[Int][Int]', 'comment_created': datetime.datetime(2021, 8, 16, 8, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689352209, 'comment_body': 'dit', 'comment_created': datetime.datetime(2021, 8, 16, 8, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689357727, 'comment_body': 'stop revisit', 'comment_created': datetime.datetime(2021, 8, 16, 8, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689359866, 'comment_body': 'tuple pattern should have unapply?', 'comment_created': datetime.datetime(2021, 8, 16, 9, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689360755, 'comment_body': 'revisit', 'comment_created': datetime.datetime(2021, 8, 16, 9, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689361325, 'comment_body': 'this => *[T, U, V]', 'comment_created': datetime.datetime(2021, 8, 16, 9, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689375045, 'comment_body': 'it should be `(1,2,3) => Tuple2.apply[Int, Int, Int](*)` ?? (even in scala2)', 'comment_created': datetime.datetime(2021, 8, 16, 9, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689752764, 'comment_body': 'this is not revisit\r\n\r\n```scala\r\n    private[this] val elems: Seq[(String, Any)] @Repeated\r\n    private[this] val fields: Map[String, Any] = \r\n      Record.this.elems.toMap[String, Any](<:<.refl[(String, Any)])\r\n    def selectDynamic(name: String): Any = this.fields.apply(name)\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 18, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689753897, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 8, 16, 18, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}]","[{'commit_sha': '753b3c485ad58df323cb781a41aac3b7564e61f3', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1a0eacd01facce51dced6206f76fc787f4ebbcd', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2fd229490b558ff48f5b7c0ae6462d72d55b2af', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e6056ec74daed4e34a7cb5e8da260c73bbfe646', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '221c490d81c68b43961bc5282407a4b651f49127', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a134a5a10d0dd5290fc8548a3c98c15047fe2cf', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c42c0a35809dc95a312c64a9478a01106363f1', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd108b48e0d5a9ddc45a81621a748326dfbe0f1c2', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5777e2d60103a4f5e3286ce9ca6896324018f0fe', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
678814274,Add access information to SymbolInformation,"https://github.com/lampepfl/dotty/issues/12963

This PR adds `access` information to `SymbolInformation`.  I confirm the diff is legit just by thoroughly check the diff in `metac.expect`.

(but, it might be better to have a script to verify the Scala2 and Scala3 will extract the same SemanticDB for the same program, so we can use the scala2's output as a test oracle 🤔 )(as long as the program compiles both in Scala2 and Scala3)",True,12964,https://api.github.com/repos/scala/scala3/pulls/12964,https://github.com/scala/scala3/pull/12964,closed,84,50,3,3,0,12,1,0,[{'name': 'area:semanticdb'}],2021-06-28 08:12:48+00:00,2021-07-01 11:41:53+00:00,271745.0,"3 days, 3:29:05","[{'comment_id': 659601763, 'comment_body': 'worth noting here that the official `metap` will print the `displayName` of the associated `SymbolInformation`, and we have been trying to replicate its output style as much as possible', 'comment_created': datetime.datetime(2021, 6, 28, 8, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 659605776, 'comment_body': 'Here I think printing `info.access` should come before printing `info.kind` (`private[example] val method foo` rather than `val method private[example] foo`)', 'comment_created': datetime.datetime(2021, 6, 28, 8, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 659612135, 'comment_body': 'if we look in `tests/semanticdb/expect/Access.scala` this should be `private` qualified not `protected` qualified', 'comment_created': datetime.datetime(2021, 6, 28, 9, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 659613583, 'comment_body': 'I think here that a private qualified symbol never gets the private flag, you should instead check if it is protected. See the other comment about the `metac.expect` output for `tests/semanticdb/expect/Access.scala`', 'comment_created': datetime.datetime(2021, 6, 28, 9, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 659620233, 'comment_body': ""I'm not sure this is right, in scala 2 semanticdb the access is printed as `private`, and the definition in  `tests/semanticdb/expect/semanticdb-Flags.scala` is `private lazy val x = 1`"", 'comment_created': datetime.datetime(2021, 6, 28, 9, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 659640978, 'comment_body': 'to debug you can try using this script I made.\r\n\r\nIf I run it with\r\n```\r\nscala3-compiler-bootstrapped/Test/runMain dotty.tools.printSymFlags ""package flags { package object p { private lazy val x = 1 }}"" ""x""\r\n```\r\n\r\nI get the output \r\n```\r\nval x => lazy <touched> private[module class p]\r\n```\r\n\r\n```scala\r\n// compiler/test/dotty/tools/DottySymbolStealer.scala\r\npackage dotty.tools\r\n\r\nimport dotc.ast.tpd\r\nimport dotc.core.Names._\r\nimport dotc.ast.tpd._\r\nimport dotc.core.Contexts.Context\r\nimport dotc.core.Symbols.Symbol\r\nimport dotc.core.Decorators._\r\nimport dotc.core.Types.Type\r\n\r\n@main def printSymFlags(source: String, termRefs: String*) = {\r\n  val (ctx, syms) = DottySymbolStealer.stealSymbol(source, termRefs*)\r\n  given Context = ctx\r\n  syms.map(sym =>\r\n    val priv = sym.privateWithin\r\n    s""$sym => ${sym.flags.flagStrings(if priv.exists then s""$priv"" else """").mkString("" "")}""\r\n  ).foreach(println)\r\n}\r\n\r\nobject DottySymbolStealer extends DottyTest {\r\n  def stealSymbol(source: String, termRefs: String*): (Context, List[Symbol]) = {\r\n    var scontext : Context = null\r\n    var tp: List[Symbol] = null\r\n    checkCompile(""typer"", source) {\r\n      (tree, context) =>\r\n        given Context = context\r\n        val remaining = scala.collection.mutable.Set.from(termRefs)\r\n        val findDef: (List[ValOrDefDef], tpd.Tree) => List[ValOrDefDef] =\r\n          (acc , tree) =>  tree match {\r\n            case t: ValOrDefDef =>\r\n              remaining.find(t.name.toString == _) match\r\n                case Some(name) =>\r\n                  remaining -= name\r\n                  t :: acc\r\n                case _ =>\r\n                  acc\r\n            case _ => acc\r\n          }\r\n        val d = new DeepFolder[List[ValOrDefDef]](findDef).foldOver(Nil, tree)\r\n        tp = d.map(_.symbol).reverse\r\n        scontext = context\r\n    }\r\n    (scontext, tp)\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 9, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 659647861, 'comment_body': 'so using scala 2 repl with the power mode it appears that private values in a package object do not get a `privateWithin` symbol, but I think its ok to keep it for scala 3, however it still needs to be `private[p]` not `protected[p]`', 'comment_created': datetime.datetime(2021, 6, 28, 9, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 660704546, 'comment_body': 'Yeah, the situation will be better with https://github.com/lampepfl/dotty/pull/12885 but I was just a bit lazy to duplicate the pretty printer to this PR... Can I go with this and prettify it in the future?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 660730710, 'comment_body': 'yep, this is fine for now', 'comment_created': datetime.datetime(2021, 6, 29, 15, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 661940556, 'comment_body': ""You're right, fixed in https://github.com/lampepfl/dotty/pull/12964/commits/fb6b679db92e46e8517f6590be4771d6f331ec34 👍 "", 'comment_created': datetime.datetime(2021, 7, 1, 3, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 661940724, 'comment_body': 'Fixed by https://github.com/lampepfl/dotty/pull/12964#discussion_r661940556', 'comment_created': datetime.datetime(2021, 7, 1, 3, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 661940880, 'comment_body': 'done https://github.com/lampepfl/dotty/pull/12964/commits/338e6d216b8271e19fad551c46d213d2e16ebf51', 'comment_created': datetime.datetime(2021, 7, 1, 3, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}]","[{'commit_sha': 'c6520b2e5ac4b1edd7ca84fde7126bc994d1e33a', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '338e6d216b8271e19fad551c46d213d2e16ebf51', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb6b679db92e46e8517f6590be4771d6f331ec34', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
713127497,[SemanticDB] Support overridden_symbols,"https://github.com/lampepfl/dotty/issues/12963

- This PR adds `overriddenSymbol` field to [SymbolInformation](https://scalameta.org/docs/semanticdb/specification.html#symbolinformation).
- Also extended `SymbolInformationPrinter` so it can pretty-print `overridden_symbol` as the same format with [scalameta/scalameta does](https://github.com/scalameta/scalameta/blob/7a6fb301264f5a1ec37e1b3ba4793f279f87095d/semanticdb/metap/src/main/scala/scala/meta/internal/metap/SymbolInformationPrinter.scala#L88-L91)

---

At this moment, `overridden_symbol` is not used by metals or scalafix rules as far as I know, but this field could be useful for

- Potentially, simplifying the implementation of SumerMethodLens feature of metals? https://github.com/scalameta/metals/blob/75355b207cf89943408d0726797b8a37f3aa1278/metals/src/main/scala/scala/meta/internal/implementation/SuperMethodProvider.scala#L15
- Check if the method is overriding something semantically. (from metals, scalafix, or whatever).",True,13295,https://api.github.com/repos/scala/scala3/pulls/13295,https://github.com/scala/scala3/pull/13295,closed,41,34,3,1,0,3,1,1,[{'name': 'area:semanticdb'}],2021-08-16 05:25:45+00:00,2021-08-17 16:16:49+00:00,125464.0,"1 day, 10:51:04","[{'comment_id': 689246815, 'comment_body': 'https://github.com/lampepfl/dotty/blob/9cd35cbf3adc633dad99efb4defb99f3f0b9fe67/tests/semanticdb/expect/Overrides.scala#L3-L4', 'comment_created': datetime.datetime(2021, 8, 16, 5, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689247213, 'comment_body': 'https://github.com/lampepfl/dotty/blob/9cd35cbf3adc633dad99efb4defb99f3f0b9fe67/tests/semanticdb/expect/RecOrRefined.scala#L24-L26', 'comment_created': datetime.datetime(2021, 8, 16, 5, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 689247755, 'comment_body': 'https://github.com/lampepfl/dotty/blob/9cd35cbf3adc633dad99efb4defb99f3f0b9fe67/tests/semanticdb/expect/exports-example-Codec.scala#L3-L12', 'comment_created': datetime.datetime(2021, 8, 16, 5, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}]","[{'commit_sha': '9cd35cbf3adc633dad99efb4defb99f3f0b9fe67', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
701440915,Support new Scala3 modifiers,"This PR adds the following new modifiers for Scala3 to SemanticDB specification.

- Given
  - https://docs.scala-lang.org/scala3/reference/contextual/givens.html
  - for `given x: Int`, `given Int`, `using ctx: Context` and `using Context`
- Inline
  - https://docs.scala-lang.org/scala3/reference/metaprogramming/inline.html
- Open
  - https://docs.scala-lang.org/scala3/reference/other-new-features/open-classes.html
- Transparent
  - https://docs.scala-lang.org/scala3/reference/other-new-features/transparent-traits.html
- Infix
  - https://docs.scala-lang.org/scala3/reference/changed-features/operators.html
- Opaque
  - https://docs.scala-lang.org/scala3/reference/other-new-features/opaques.html

FYI here's the generated code from this new SemanticDB schema https://github.com/tanishiking/semanticdb-for-scala3/pull/2

---

Maybe we should also support `extension` modifier in the future, but how to encode `extension` seems a bit complicated. Therefore let's start with simple modifiers first.

- https://github.com/lampepfl/dotty/issues/11690
- https://discord.com/channels/632642981228314653/632642981228314657/867097982860394526 

---

After this PR merged, we have to

- [ ] Support new modifiers in `metap`
- [ ] Extend `ExtracctSemanticDB` of Scala3

Or should we implement the Scala3 side first, before updating the schema?",True,2439,https://api.github.com/repos/scalameta/scalameta/pulls/2439,https://github.com/scalameta/scalameta/pull/2439,closed,49,0,4,2,2,0,0,0,[],2021-08-02 12:56:14+00:00,2021-08-04 09:18:55+00:00,159761.0,"1 day, 20:22:41",[],"[{'commit_sha': '45826fd05db874dece75e66ae27dd63de8e4a91b', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a6fb301264f5a1ec37e1b3ba4793f279f87095d', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
702103549,[SemanticDB]Support new Scala3 modifiers in SemanticDB,"Now we distinguish `implicit` and `given` in SemanticDB.

- Proposal to add new properties to SemanticDB schema
  - https://github.com/scalameta/scalameta/pull/2439
- Generated scala code copied from
  - https://github.com/tanishiking/semanticdb-for-scala3/pull/2

It might be better to wait merging until https://github.com/scalameta/scalameta/pull/2439 has merged.",True,13239,https://api.github.com/repos/scala/scala3/pulls/13239,https://github.com/scala/scala3/pull/13239,closed,114,34,5,1,0,5,1,1,[{'name': 'area:semanticdb'}],2021-08-03 09:15:24+00:00,2021-08-06 10:18:16+00:00,262972.0,"3 days, 1:02:52","[{'comment_id': 681709118, 'comment_body': ""It might be better to keep `implicit` property for `given`s for backward compatibility, and remove it may be in the next minor version release of Scala3?\r\n(Or we can go because I suppose there are quite a few consumers for this information: probably only metals? and it's controllable)"", 'comment_created': datetime.datetime(2021, 8, 3, 12, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 683503345, 'comment_body': 'Is this really given? Can they be lazy?\r\n```suggestion\r\n_empty_/Enums.Suits.derived$CanEqual. => lazy val given method derived$CanEqual\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 14, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tgodzik', 'type': 'User'}, {'comment_id': 684005651, 'comment_body': 'Yes, this is actually `Given`. This symbol is automatically generated `given` value by `drives CanEqual`\r\n\r\n```scala\r\nenum Suits derives CanEqual:\r\n  case Hearts, Spades, Clubs, Diamonds\r\n\r\n// `drives CanEuqual` will automatically generate given instance something like\r\nlazy given val derived$CanEqual: CanEqual[Enums.Suits, Enums.Suits] = \r\n   CanEqual.derived\r\n```\r\n\r\nhttps://dotty.epfl.ch/docs/reference/contextual/derivation.html', 'comment_created': datetime.datetime(2021, 8, 6, 7, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 684097772, 'comment_body': 'We tried that already, but it turned out that it was overall simplest the way it is now.', 'comment_created': datetime.datetime(2021, 8, 6, 9, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'odersky', 'type': 'User'}, {'comment_id': 684098955, 'comment_body': 'Yes, parameterless givens are mapped to lazyvals by default. Some of them are mapped to defs when we can prove that that does not change semantics, so that we can omit generating a field.', 'comment_created': datetime.datetime(2021, 8, 6, 9, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'odersky', 'type': 'User'}]","[{'commit_sha': 'e7a641c5ad61fa683423954fa9263079a890c809', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
709051763,[SemanticDB] Fix missing symbol occurrence of type params' type bounds for constructor,"Fix https://github.com/lampepfl/dotty/issues/13270

This PR fixes missing symbol occurrence of

- type parameters' upper bounds of constructor https://github.com/lampepfl/dotty/pull/13284/commits/5d3bdf3583ed04f401cd283f6f1c73d2e5ddff37
- TypeRef's symbol inside of TypeTree https://github.com/lampepfl/dotty/pull/13284/commits/06872697db9cf4b369be6835ee41b7c8dbacc028

---

For example:

```scala
// Missing symbol occurrence of `<: Txn[T]`
trait Txn/*<-_empty_::Txn#*/[T/*<-_empty_::Txn#[T]*/ <: Txn[T]]
```

The root problem is we are ignoring TypeDef's rhs of type parameters in the constructor. Once it traverses the trees (like `TypeBoundsTree` and `AppliedTypeTree`), the original traverser will look into `Ident(Txn)` and `Ident(T)` inside of `AppliedTypeTree` in the following case.

```scala
// AST of `trait Txn[T <: Txn[T]]`
TypeDef(
  Txn,
  Template(
    DefDef(
      name <init>,
      paramss = List(
        List(
          TypeDef(
            T,
            TypeBoundsTree(
              TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing)],
              AppliedTypeTree(Ident(Txn),List(Ident(T))),EmptyTree
            )
          )
        ),
        List()
      ),
   ...
)
```

---

Also registered symbol that appears inside of TypeRef (of TypeTree).
I understand TypeTree can contain any type, but as far as I know, `TypeRef` is the only type that is present in the source and we need to handle.",True,13284,https://api.github.com/repos/scala/scala3/pulls/13284,https://github.com/scala/scala3/pull/13284,closed,124,69,8,4,2,5,1,1,[{'name': 'area:semanticdb'}],2021-08-11 14:33:50+00:00,2021-08-20 12:51:38+00:00,771468.0,"8 days, 22:17:48","[{'comment_id': 690428029, 'comment_body': 'it looks like here that there are no occurrences for the parameters of `Repr`', 'comment_created': datetime.datetime(2021, 8, 17, 14, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 690453853, 'comment_body': 'although looking at the tree it seems maybe something else is hiding the occurrence:\r\n```scala\r\n-- Info: /Users/jamie/Workspace/dotty/tests/semanticdb/expect/i9782.scala:9:6 --\r\n9 |  def copyImpl[Repr[~ <: Txn[~]] <: Elem[~]](in: Repr[In]): Repr[Out]\r\n  |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |here is a defdef tree: DefDef(copyImpl,List(List(TypeDef(Repr,LambdaTypeTree(List(TypeDef(~,TypeBoundsTree(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing)],AppliedTypeTree(Ident(Txn),List(Ident(~))),EmptyTree))),TypeBoundsTree(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing)],AppliedTypeTree(Ident(Elem),List(Ident(~))),EmptyTree)))), List(ValDef(in,AppliedTypeTree(Ident(Repr),List(Ident(In))),EmptyTree))),AppliedTypeTree(Ident(Repr),List(Ident(Out))),EmptyTree)\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 14, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 690461077, 'comment_body': 'this could be addressed separately in a new PR', 'comment_created': datetime.datetime(2021, 8, 17, 15, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bishabosha', 'type': 'User'}, {'comment_id': 692718143, 'comment_body': ""Oh, right. I think we can fix it in this PR, I'll take a look :)"", 'comment_created': datetime.datetime(2021, 8, 20, 7, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 692847031, 'comment_body': ""Fixed https://github.com/lampepfl/dotty/pull/13284/commits/5a108dfc16cd7fe2072662f4bd18779d57b4ec2a\r\n\r\nI found type params are going to this branch:\r\nhttps://github.com/lampepfl/dotty/blob/28a671a71a3a5f6627a2db0c9cc5d9c0ec6218a2/compiler/src/dotty/tools/dotc/semanticdb/ExtractSemanticDB.scala#L168-L170\r\n\r\nand `excludeChildren` is true if the parameter is HKTypeLambda, and that's why those symbols are missing."", 'comment_created': datetime.datetime(2021, 8, 20, 10, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}]","[{'commit_sha': '86eabc716c729b1b9fe3ffe9a683c968353c6acc', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd358f9925decfdfdcd7577a26035773d8cda1c9', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a108dfc16cd7fe2072662f4bd18779d57b4ec2a', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28a671a71a3a5f6627a2db0c9cc5d9c0ec6218a2', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
713994284,Simplify super method lens using overriddenSymbols,"Potentially fix: https://github.com/scalameta/metals/issues/1645
This PR simplifies the implementation of the `super method lens` feature using `overriddenSymbols introduced in https://github.com/scalameta/scalameta/pull/2233
(`overriddenSymbols` in Scala3 is coming soon https://github.com/lampepfl/dotty/pull/13295 )",True,3045,https://api.github.com/repos/scalameta/metals/pulls/3045,https://github.com/scalameta/metals/pull/3045,closed,20,349,5,1,2,6,0,0,[],2021-08-17 07:40:18+00:00,2021-08-17 10:46:15+00:00,11157.0,3:05:57,"[{'comment_id': 690119308, 'comment_body': 'One concern is that the order of `overriddenSymbol` is semanticdb extractor implementation-dependent.\r\n\r\nAt least Scala2 (and Scala3 will) returns symbol in the order of direct parent -> grand-parent ..., but to be robust to the change in Scala2 and Scala3, it might be better to check the direct superclass of the `SymbolInformation` and pick the symbol from the direct parent class from `overriddenSymbol`.', 'comment_created': datetime.datetime(2021, 8, 17, 7, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 690121466, 'comment_body': 'Added `""java/lang/Object#""` because `toString` method of case classes overrides `java/lang/Object#toString()`', 'comment_created': datetime.datetime(2021, 8, 17, 7, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 690149515, 'comment_body': ""A nitpick: it seems that it should be enough only to take a headOption and check that it doesn't belong to stopSymbols.\r\nSmth like: `methodSymbolInformation.overriddenSymbols.headOption.filter(isNonStopSymbol)`"", 'comment_created': datetime.datetime(2021, 8, 17, 8, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'dos65', 'type': 'User'}, {'comment_id': 690152086, 'comment_body': 'Actually, this check is done inside of `getSuperMethodHierarchy` :)', 'comment_created': datetime.datetime(2021, 8, 17, 8, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}, {'comment_id': 690161210, 'comment_body': ""Yep, I've seen that.\r\nThe only difference that it will be just slightly effective as there is no need to filter a full hierarchy chain in this case"", 'comment_created': datetime.datetime(2021, 8, 17, 8, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dos65', 'type': 'User'}, {'comment_id': 690210458, 'comment_body': 'Ah, I got it!\r\naddressed in https://github.com/scalameta/metals/pull/3045/commits/0dbbabac20bd796c823abcdca597647299a4540e', 'comment_created': datetime.datetime(2021, 8, 17, 9, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tanishiking', 'type': 'User'}]","[{'commit_sha': '0dbbabac20bd796c823abcdca597647299a4540e', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84
687546917,Support LambdaType and MatchType for Scala3,"- Issue: https://github.com/scalameta/scalameta/issues/2403
- Here's a prototype implementation of Extracting Signature information for MatchType and TypeLambda from Scala3 
  - https://github.com/tanishiking/dotty/pull/1
  - https://github.com/tanishiking/semanticdb-for-scala3/pull/1/files


## LambdaType
```protobuf
message LambdaType {
  Scope parameters = 1;
  Type return_type = 2;
}
```

LambdaType represents the LambdaTypes for Scala3
http://dotty.epfl.ch/docs/reference/new-types/type-lambdas.html

for example `type Union = [A, B] =>> [C] =>> A | B | C`

```scala
LambdaType(
  parameters = Some(
    value = Scope(symlinks =
      List(
        ""....Union#[A]""
        ""....Union#[B]""
      ), hardlinks = List()
    )
  ),
  returnType = LambdaType(
    parameters = Some(
      value = Scope(symlinks = List(""....Union#[C]""), hardlinks = List())
    ),
    returnType = UnionType(
      types = List(
        TypeRef(
          prefix = Empty,
          symbol = ""....Union#[A]"",
          typeArguments = List()
        ),
        TypeRef(
          prefix = Empty,
          symbol = ""....Union#[B]"",
          typeArguments = List()
        ),
        TypeRef(
          prefix = Empty,
          symbol = ""....Union#[C]"",
          typeArguments = List()
        )
      )
    )
  )
)
```

- As you can see, for the TypeLambda who has multiple type params like `[X] =>> [Y] =>> X | Y`, we will have nested LambdaType.
- The type parameters are represented as Scope and they should be symlinked.

## MatchType
```protobuf
message MatchType {
  message CaseType {
    Type key = 1;
    Type body = 2;
  }
  Type scrutinee = 1;
  repeated CaseType cases = 2;
}
```

MatchType represents the MatchType in Scala3
http://dotty.epfl.ch/docs/reference/new-types/match-types.html

Each case are represented as `CaseType` and they have key and value
types.

For example

```scala
type Elem[X] <: Any = X match
  case String => Char
  case Array[t] => t
```

The type signature of Elem looks like

```scala
TypeSignature(
  Some(Scope(List(matchtype/MatchType$package.Elem#[X]),List())),
  MatchType(
    TypeRef(Empty,matchtype/MatchType$package.Elem#[X],List()),
    List(
      CaseType(
        TypeRef(Empty,scala/Predef.String#,List()),
        TypeRef(Empty,scala/Char#,List())
      ),
      CaseType(
        TypeRef(Empty,scala/Array#,List(TypeRef(Empty,local0,List()))),
        TypeRef(Empty,local0,List())
      )
    )
  ),
  TypeRef(Empty,scala/Any#,List())
)
```

where `local0` means the local symbol for `t` in `Array[t]`.",False,2414,https://api.github.com/repos/scalameta/scalameta/pulls/2414,https://github.com/scalameta/scalameta/pull/2414,closed,16,0,1,1,3,0,0,0,[],2021-07-12 06:22:13+00:00,2022-03-18 09:30:49+00:00,21524916.0,"249 days, 3:08:36",[],"[{'commit_sha': 'c516879d1e967831a6764b3d45110a03db67eaf3', 'committer_username': 'tanishiking', 'committer_name': 'Rikito Taniguchi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 10, 22, 15, 13, 58, tzinfo=datetime.timezone.utc)}]",Rikito Taniguchi,9353584,,User,,114,,53,84

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
7035651,scala3,scala/scala3,Scala,1039,5776,210,519,38921,1558,75,168,"[{'id': 1602124291, 'number': 18932, 'closed': datetime.datetime(2023, 11, 17, 12, 53, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 15, 8, 41, 45, tzinfo=datetime.timezone.utc), 'time_taken': 187901.0, 'time_delta': '2 days, 4:11:41', 'additions': 420, 'deletions': 413, 'state': 'closed'}, {'id': 1378447654, 'number': 17835, 'closed': datetime.datetime(2023, 10, 19, 12, 53, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 7, 36, 35, tzinfo=datetime.timezone.utc), 'time_taken': 11769421.0, 'time_delta': '136 days, 5:17:01', 'additions': 325, 'deletions': 69, 'state': 'closed'}, {'id': 1058578998, 'number': 16056, 'closed': datetime.datetime(2023, 4, 24, 15, 35, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 12, 28, 7, tzinfo=datetime.timezone.utc), 'time_taken': 19019224.0, 'time_delta': '220 days, 3:07:04', 'additions': 287, 'deletions': 7, 'state': 'closed'}, {'id': 1054589515, 'number': 16031, 'closed': datetime.datetime(2022, 9, 13, 14, 31, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 11, 52, 18, tzinfo=datetime.timezone.utc), 'time_taken': 9553.0, 'time_delta': '2:39:13', 'additions': 111, 'deletions': 27, 'state': 'closed'}, {'id': 1027172037, 'number': 15865, 'closed': datetime.datetime(2022, 9, 13, 16, 7, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 5, 37, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2456978.0, 'time_delta': '28 days, 10:29:38', 'additions': 63, 'deletions': 19, 'state': 'closed'}, {'id': 964676805, 'number': 15420, 'closed': datetime.datetime(2022, 6, 13, 8, 32, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 11, 5, 12, 29, tzinfo=datetime.timezone.utc), 'time_taken': 184797.0, 'time_delta': '2 days, 3:19:57', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 930932737, 'number': 15143, 'closed': datetime.datetime(2022, 5, 9, 13, 26, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 9, 9, 26, 58, tzinfo=datetime.timezone.utc), 'time_taken': 14370.0, 'time_delta': '3:59:30', 'additions': 40, 'deletions': 5, 'state': 'closed'}, {'id': 909778427, 'number': 14935, 'closed': datetime.datetime(2022, 4, 22, 8, 7, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 14, 9, 46, 50, tzinfo=datetime.timezone.utc), 'time_taken': 685242.0, 'time_delta': '7 days, 22:20:42', 'additions': 1, 'deletions': 9, 'state': 'closed'}, {'id': 869549287, 'number': 14608, 'closed': datetime.datetime(2022, 4, 3, 19, 19, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 13, 29, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2785808.0, 'time_delta': '32 days, 5:50:08', 'additions': 697, 'deletions': 108, 'state': 'closed'}, {'id': 867790105, 'number': 14591, 'closed': datetime.datetime(2022, 3, 1, 15, 23, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 1, 12, 0, 9, tzinfo=datetime.timezone.utc), 'time_taken': 12220.0, 'time_delta': '3:23:40', 'additions': 504, 'deletions': 449, 'state': 'closed'}, {'id': 742606854, 'number': 13609, 'closed': datetime.datetime(2021, 9, 27, 8, 12, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 25, 5, 11, 25, tzinfo=datetime.timezone.utc), 'time_taken': 183668.0, 'time_delta': '2 days, 3:01:08', 'additions': 43, 'deletions': 17, 'state': 'closed'}, {'id': 728064754, 'number': 13481, 'closed': datetime.datetime(2021, 11, 24, 11, 53, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 6, 15, 56, 57, tzinfo=datetime.timezone.utc), 'time_taken': 6811007.0, 'time_delta': '78 days, 19:56:47', 'additions': 175, 'deletions': 8, 'state': 'closed'}, {'id': 713127497, 'number': 13295, 'closed': datetime.datetime(2021, 8, 17, 16, 16, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 5, 25, 45, tzinfo=datetime.timezone.utc), 'time_taken': 125464.0, 'time_delta': '1 day, 10:51:04', 'additions': 41, 'deletions': 34, 'state': 'closed'}, {'id': 711183398, 'number': 13288, 'closed': datetime.datetime(2021, 8, 30, 14, 20, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 16, 7, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1548767.0, 'time_delta': '17 days, 22:12:47', 'additions': 433, 'deletions': 64, 'state': 'closed'}, {'id': 709051763, 'number': 13284, 'closed': datetime.datetime(2021, 8, 20, 12, 51, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 14, 33, 50, tzinfo=datetime.timezone.utc), 'time_taken': 771468.0, 'time_delta': '8 days, 22:17:48', 'additions': 124, 'deletions': 69, 'state': 'closed'}, {'id': 708328132, 'number': 13279, 'closed': datetime.datetime(2021, 8, 11, 6, 40, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 6, 39, 43, tzinfo=datetime.timezone.utc), 'time_taken': 39.0, 'time_delta': '0:00:39', 'additions': 3895, 'deletions': 2248, 'state': 'closed'}, {'id': 702103549, 'number': 13239, 'closed': datetime.datetime(2021, 8, 6, 10, 18, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 9, 15, 24, tzinfo=datetime.timezone.utc), 'time_taken': 262972.0, 'time_delta': '3 days, 1:02:52', 'additions': 114, 'deletions': 34, 'state': 'closed'}, {'id': 678814274, 'number': 12964, 'closed': datetime.datetime(2021, 7, 1, 11, 41, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 8, 12, 48, tzinfo=datetime.timezone.utc), 'time_taken': 271745.0, 'time_delta': '3 days, 3:29:05', 'additions': 84, 'deletions': 50, 'state': 'closed'}, {'id': 674307015, 'number': 12885, 'closed': datetime.datetime(2021, 8, 12, 13, 31, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 7, 48, 14, tzinfo=datetime.timezone.utc), 'time_taken': 4513369.0, 'time_delta': '52 days, 5:42:49', 'additions': 3501, 'deletions': 2229, 'state': 'closed'}, {'id': 670471762, 'number': 12833, 'closed': datetime.datetime(2021, 6, 16, 10, 6, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 14, 41, 53, tzinfo=datetime.timezone.utc), 'time_taken': 69857.0, 'time_delta': '19:24:17', 'additions': 25, 'deletions': 20, 'state': 'closed'}, {'id': 666524629, 'number': 12780, 'closed': datetime.datetime(2021, 6, 14, 23, 48, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 5, 31, 49, tzinfo=datetime.timezone.utc), 'time_taken': 411430.0, 'time_delta': '4 days, 18:17:10', 'additions': 7550, 'deletions': 557, 'state': 'closed'}, {'id': 652405067, 'number': 12599, 'closed': datetime.datetime(2021, 5, 26, 13, 34, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 25, 14, 27, 30, tzinfo=datetime.timezone.utc), 'time_taken': 83205.0, 'time_delta': '23:06:45', 'additions': 42, 'deletions': 2, 'state': 'closed'}, {'id': 652212998, 'number': 12594, 'closed': datetime.datetime(2021, 5, 25, 11, 30, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 25, 11, 26, 54, tzinfo=datetime.timezone.utc), 'time_taken': 233.0, 'time_delta': '0:03:53', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 556354620, 'number': 11140, 'closed': datetime.datetime(2021, 1, 18, 17, 32, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 17, 14, 19, 26, tzinfo=datetime.timezone.utc), 'time_taken': 97962.0, 'time_delta': '1 day, 3:12:42', 'additions': 30, 'deletions': 95, 'state': 'closed'}]"
7035651,scala3,scala/scala3,Scala,1039,5776,210,519,38921,1558,75,168,"[{'id': 1602124291, 'number': 18932, 'closed': datetime.datetime(2023, 11, 17, 12, 53, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 15, 8, 41, 45, tzinfo=datetime.timezone.utc), 'time_taken': 187901.0, 'time_delta': '2 days, 4:11:41', 'additions': 420, 'deletions': 413, 'state': 'closed'}, {'id': 1378447654, 'number': 17835, 'closed': datetime.datetime(2023, 10, 19, 12, 53, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 7, 36, 35, tzinfo=datetime.timezone.utc), 'time_taken': 11769421.0, 'time_delta': '136 days, 5:17:01', 'additions': 325, 'deletions': 69, 'state': 'closed'}, {'id': 1058578998, 'number': 16056, 'closed': datetime.datetime(2023, 4, 24, 15, 35, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 12, 28, 7, tzinfo=datetime.timezone.utc), 'time_taken': 19019224.0, 'time_delta': '220 days, 3:07:04', 'additions': 287, 'deletions': 7, 'state': 'closed'}, {'id': 1054589515, 'number': 16031, 'closed': datetime.datetime(2022, 9, 13, 14, 31, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 13, 11, 52, 18, tzinfo=datetime.timezone.utc), 'time_taken': 9553.0, 'time_delta': '2:39:13', 'additions': 111, 'deletions': 27, 'state': 'closed'}, {'id': 1027172037, 'number': 15865, 'closed': datetime.datetime(2022, 9, 13, 16, 7, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 5, 37, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2456978.0, 'time_delta': '28 days, 10:29:38', 'additions': 63, 'deletions': 19, 'state': 'closed'}, {'id': 964676805, 'number': 15420, 'closed': datetime.datetime(2022, 6, 13, 8, 32, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 11, 5, 12, 29, tzinfo=datetime.timezone.utc), 'time_taken': 184797.0, 'time_delta': '2 days, 3:19:57', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 930932737, 'number': 15143, 'closed': datetime.datetime(2022, 5, 9, 13, 26, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 9, 9, 26, 58, tzinfo=datetime.timezone.utc), 'time_taken': 14370.0, 'time_delta': '3:59:30', 'additions': 40, 'deletions': 5, 'state': 'closed'}, {'id': 909778427, 'number': 14935, 'closed': datetime.datetime(2022, 4, 22, 8, 7, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 14, 9, 46, 50, tzinfo=datetime.timezone.utc), 'time_taken': 685242.0, 'time_delta': '7 days, 22:20:42', 'additions': 1, 'deletions': 9, 'state': 'closed'}, {'id': 869549287, 'number': 14608, 'closed': datetime.datetime(2022, 4, 3, 19, 19, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 13, 29, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2785808.0, 'time_delta': '32 days, 5:50:08', 'additions': 697, 'deletions': 108, 'state': 'closed'}, {'id': 867790105, 'number': 14591, 'closed': datetime.datetime(2022, 3, 1, 15, 23, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 1, 12, 0, 9, tzinfo=datetime.timezone.utc), 'time_taken': 12220.0, 'time_delta': '3:23:40', 'additions': 504, 'deletions': 449, 'state': 'closed'}, {'id': 742606854, 'number': 13609, 'closed': datetime.datetime(2021, 9, 27, 8, 12, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 25, 5, 11, 25, tzinfo=datetime.timezone.utc), 'time_taken': 183668.0, 'time_delta': '2 days, 3:01:08', 'additions': 43, 'deletions': 17, 'state': 'closed'}, {'id': 728064754, 'number': 13481, 'closed': datetime.datetime(2021, 11, 24, 11, 53, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 6, 15, 56, 57, tzinfo=datetime.timezone.utc), 'time_taken': 6811007.0, 'time_delta': '78 days, 19:56:47', 'additions': 175, 'deletions': 8, 'state': 'closed'}, {'id': 713127497, 'number': 13295, 'closed': datetime.datetime(2021, 8, 17, 16, 16, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 5, 25, 45, tzinfo=datetime.timezone.utc), 'time_taken': 125464.0, 'time_delta': '1 day, 10:51:04', 'additions': 41, 'deletions': 34, 'state': 'closed'}, {'id': 711183398, 'number': 13288, 'closed': datetime.datetime(2021, 8, 30, 14, 20, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 16, 7, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1548767.0, 'time_delta': '17 days, 22:12:47', 'additions': 433, 'deletions': 64, 'state': 'closed'}, {'id': 709051763, 'number': 13284, 'closed': datetime.datetime(2021, 8, 20, 12, 51, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 14, 33, 50, tzinfo=datetime.timezone.utc), 'time_taken': 771468.0, 'time_delta': '8 days, 22:17:48', 'additions': 124, 'deletions': 69, 'state': 'closed'}, {'id': 708328132, 'number': 13279, 'closed': datetime.datetime(2021, 8, 11, 6, 40, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 6, 39, 43, tzinfo=datetime.timezone.utc), 'time_taken': 39.0, 'time_delta': '0:00:39', 'additions': 3895, 'deletions': 2248, 'state': 'closed'}, {'id': 702103549, 'number': 13239, 'closed': datetime.datetime(2021, 8, 6, 10, 18, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 9, 15, 24, tzinfo=datetime.timezone.utc), 'time_taken': 262972.0, 'time_delta': '3 days, 1:02:52', 'additions': 114, 'deletions': 34, 'state': 'closed'}, {'id': 678814274, 'number': 12964, 'closed': datetime.datetime(2021, 7, 1, 11, 41, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 8, 12, 48, tzinfo=datetime.timezone.utc), 'time_taken': 271745.0, 'time_delta': '3 days, 3:29:05', 'additions': 84, 'deletions': 50, 'state': 'closed'}, {'id': 674307015, 'number': 12885, 'closed': datetime.datetime(2021, 8, 12, 13, 31, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 7, 48, 14, tzinfo=datetime.timezone.utc), 'time_taken': 4513369.0, 'time_delta': '52 days, 5:42:49', 'additions': 3501, 'deletions': 2229, 'state': 'closed'}, {'id': 670471762, 'number': 12833, 'closed': datetime.datetime(2021, 6, 16, 10, 6, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 14, 41, 53, tzinfo=datetime.timezone.utc), 'time_taken': 69857.0, 'time_delta': '19:24:17', 'additions': 25, 'deletions': 20, 'state': 'closed'}, {'id': 666524629, 'number': 12780, 'closed': datetime.datetime(2021, 6, 14, 23, 48, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 5, 31, 49, tzinfo=datetime.timezone.utc), 'time_taken': 411430.0, 'time_delta': '4 days, 18:17:10', 'additions': 7550, 'deletions': 557, 'state': 'closed'}, {'id': 652405067, 'number': 12599, 'closed': datetime.datetime(2021, 5, 26, 13, 34, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 25, 14, 27, 30, tzinfo=datetime.timezone.utc), 'time_taken': 83205.0, 'time_delta': '23:06:45', 'additions': 42, 'deletions': 2, 'state': 'closed'}, {'id': 652212998, 'number': 12594, 'closed': datetime.datetime(2021, 5, 25, 11, 30, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 25, 11, 26, 54, tzinfo=datetime.timezone.utc), 'time_taken': 233.0, 'time_delta': '0:03:53', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 556354620, 'number': 11140, 'closed': datetime.datetime(2021, 1, 18, 17, 32, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 17, 14, 19, 26, tzinfo=datetime.timezone.utc), 'time_taken': 97962.0, 'time_delta': '1 day, 3:12:42', 'additions': 30, 'deletions': 95, 'state': 'closed'}]"
330339083,scala3,tanishiking/scala3,Scala,0,0,2,515,38428,5,49,5,"[{'id': 713228981, 'number': 5, 'closed': None, 'created': datetime.datetime(2021, 8, 16, 8, 32, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 721, 'deletions': 73, 'state': 'open'}, {'id': 708723158, 'number': 4, 'closed': datetime.datetime(2021, 8, 12, 18, 16, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 11, 3, 43, tzinfo=datetime.timezone.utc), 'time_taken': 112358.0, 'time_delta': '1 day, 7:12:38', 'additions': 86, 'deletions': 36, 'state': 'closed'}, {'id': 708332128, 'number': 3, 'closed': datetime.datetime(2021, 8, 12, 18, 16, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 6, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 128006.0, 'time_delta': '1 day, 11:33:26', 'additions': 385, 'deletions': 38, 'state': 'closed'}, {'id': 701185807, 'number': 2, 'closed': datetime.datetime(2021, 8, 11, 6, 39, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 7, 5, 57, tzinfo=datetime.timezone.utc), 'time_taken': 776034.0, 'time_delta': '8 days, 23:33:54', 'additions': 413, 'deletions': 38, 'state': 'closed'}, {'id': 683489132, 'number': 1, 'closed': None, 'created': datetime.datetime(2021, 7, 5, 8, 38, 31, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 3320, 'deletions': 1698, 'state': 'open'}]"
20903383,scalameta,scalameta/scalameta,Scala,224,1106,39,123,8652,144,2,7,"[{'id': 1271991968, 'number': 3096, 'closed': datetime.datetime(2023, 3, 15, 3, 8, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 11, 8, 38, 30, tzinfo=datetime.timezone.utc), 'time_taken': 325821.0, 'time_delta': '3 days, 18:30:21', 'additions': 35, 'deletions': 7, 'state': 'closed'}, {'id': 1120210665, 'number': 2966, 'closed': datetime.datetime(2022, 11, 24, 9, 41, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 13, 5, 27, 46, tzinfo=datetime.timezone.utc), 'time_taken': 965599.0, 'time_delta': '11 days, 4:13:19', 'additions': 36, 'deletions': 41, 'state': 'closed'}, {'id': 1058575165, 'number': 2867, 'closed': datetime.datetime(2022, 9, 16, 13, 17, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 12, 24, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3207.0, 'time_delta': '0:53:27', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 934601591, 'number': 2752, 'closed': datetime.datetime(2022, 5, 12, 10, 9, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 12, 9, 35, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2012.0, 'time_delta': '0:33:32', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 917687129, 'number': 2738, 'closed': datetime.datetime(2022, 7, 16, 8, 23, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 25, 4, 26, 1, tzinfo=datetime.timezone.utc), 'time_taken': 7099073.0, 'time_delta': '82 days, 3:57:53', 'additions': 86, 'deletions': 0, 'state': 'closed'}, {'id': 917667210, 'number': 2736, 'closed': datetime.datetime(2022, 4, 26, 10, 17, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 25, 3, 55, 29, tzinfo=datetime.timezone.utc), 'time_taken': 109303.0, 'time_delta': '1 day, 6:21:43', 'additions': 87, 'deletions': 5, 'state': 'closed'}, {'id': 884643568, 'number': 2690, 'closed': datetime.datetime(2022, 3, 21, 11, 36, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 21, 10, 22, 13, tzinfo=datetime.timezone.utc), 'time_taken': 4441.0, 'time_delta': '1:14:01', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 883253498, 'number': 2685, 'closed': datetime.datetime(2022, 3, 18, 13, 19, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 18, 9, 24, 5, tzinfo=datetime.timezone.utc), 'time_taken': 14107.0, 'time_delta': '3:55:07', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 882324612, 'number': 2681, 'closed': datetime.datetime(2022, 3, 17, 13, 36, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 17, 10, 47, 37, tzinfo=datetime.timezone.utc), 'time_taken': 10117.0, 'time_delta': '2:48:37', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 727355948, 'number': 2465, 'closed': datetime.datetime(2021, 9, 6, 15, 26, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 5, 7, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 113252.0, 'time_delta': '1 day, 7:27:32', 'additions': 35, 'deletions': 1, 'state': 'closed'}, {'id': 727354061, 'number': 2464, 'closed': datetime.datetime(2022, 5, 8, 3, 47, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 5, 7, 41, 28, tzinfo=datetime.timezone.utc), 'time_taken': 21153952.0, 'time_delta': '244 days, 20:05:52', 'additions': 54, 'deletions': 0, 'state': 'closed'}, {'id': 717267777, 'number': 2457, 'closed': datetime.datetime(2021, 8, 30, 15, 34, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 7, 57, 34, tzinfo=datetime.timezone.utc), 'time_taken': 718606.0, 'time_delta': '8 days, 7:36:46', 'additions': 59, 'deletions': 10, 'state': 'closed'}, {'id': 701440915, 'number': 2439, 'closed': datetime.datetime(2021, 8, 4, 9, 18, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 12, 56, 14, tzinfo=datetime.timezone.utc), 'time_taken': 159761.0, 'time_delta': '1 day, 20:22:41', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 687546917, 'number': 2414, 'closed': datetime.datetime(2022, 3, 18, 9, 30, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 6, 22, 13, tzinfo=datetime.timezone.utc), 'time_taken': 21524916.0, 'time_delta': '249 days, 3:08:36', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 579444043, 'number': 2258, 'closed': datetime.datetime(2021, 2, 24, 17, 0, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 24, 16, 40, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1215.0, 'time_delta': '0:20:15', 'additions': 35, 'deletions': 0, 'state': 'closed'}, {'id': 196940978, 'number': 1627, 'closed': datetime.datetime(2018, 7, 2, 3, 43, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 6, 24, 9, 26, 26, tzinfo=datetime.timezone.utc), 'time_taken': 670643.0, 'time_delta': '7 days, 18:17:23', 'additions': 21, 'deletions': 8, 'state': 'closed'}]"
109404123,metals,scalameta/metals,Scala,320,2061,47,195,8809,248,12,16,"[{'id': 1311911039, 'number': 5139, 'closed': datetime.datetime(2023, 4, 14, 3, 33, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 13, 5, 26, 4, tzinfo=datetime.timezone.utc), 'time_taken': 79627.0, 'time_delta': '22:07:07', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1281438796, 'number': 5066, 'closed': datetime.datetime(2023, 3, 20, 14, 42, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 19, 1, 7, 29, tzinfo=datetime.timezone.utc), 'time_taken': 135283.0, 'time_delta': '1 day, 13:34:43', 'additions': 9, 'deletions': 8, 'state': 'closed'}, {'id': 1182369131, 'number': 4794, 'closed': datetime.datetime(2023, 4, 17, 16, 0, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 2, 8, 2, 49, tzinfo=datetime.timezone.utc), 'time_taken': 9100665.0, 'time_delta': '105 days, 7:57:45', 'additions': 17, 'deletions': 0, 'state': 'closed'}, {'id': 1071206089, 'number': 4457, 'closed': datetime.datetime(2022, 9, 29, 13, 38, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 29, 11, 33, 24, tzinfo=datetime.timezone.utc), 'time_taken': 7480.0, 'time_delta': '2:04:40', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 1070820695, 'number': 4450, 'closed': datetime.datetime(2022, 9, 29, 8, 14, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 29, 5, 17, 32, tzinfo=datetime.timezone.utc), 'time_taken': 10647.0, 'time_delta': '2:57:27', 'additions': 10, 'deletions': 8, 'state': 'closed'}, {'id': 1064990367, 'number': 4429, 'closed': datetime.datetime(2022, 9, 23, 8, 15, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 23, 7, 39, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2138.0, 'time_delta': '0:35:38', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 1061546649, 'number': 4416, 'closed': datetime.datetime(2022, 9, 22, 13, 24, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 20, 12, 52, 25, tzinfo=datetime.timezone.utc), 'time_taken': 174712.0, 'time_delta': '2 days, 0:31:52', 'additions': 204, 'deletions': 16, 'state': 'closed'}, {'id': 1061337053, 'number': 4412, 'closed': datetime.datetime(2022, 9, 27, 12, 59, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 20, 9, 51, 10, tzinfo=datetime.timezone.utc), 'time_taken': 616121.0, 'time_delta': '7 days, 3:08:41', 'additions': 94, 'deletions': 64, 'state': 'closed'}, {'id': 1060506811, 'number': 4409, 'closed': datetime.datetime(2022, 9, 20, 8, 7, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 19, 15, 59, 47, tzinfo=datetime.timezone.utc), 'time_taken': 58043.0, 'time_delta': '16:07:23', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1060424321, 'number': 4407, 'closed': datetime.datetime(2022, 9, 19, 15, 38, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 19, 14, 52, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2732.0, 'time_delta': '0:45:32', 'additions': 20, 'deletions': 1, 'state': 'closed'}, {'id': 1059941028, 'number': 4404, 'closed': datetime.datetime(2022, 9, 19, 10, 28, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 19, 7, 41, 6, tzinfo=datetime.timezone.utc), 'time_taken': 10022.0, 'time_delta': '2:47:02', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 1058803806, 'number': 4396, 'closed': datetime.datetime(2022, 9, 19, 9, 22, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 15, 57, 20, tzinfo=datetime.timezone.utc), 'time_taken': 235532.0, 'time_delta': '2 days, 17:25:32', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1051541137, 'number': 4369, 'closed': datetime.datetime(2022, 9, 29, 7, 23, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 9, 12, 52, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1708263.0, 'time_delta': '19 days, 18:31:03', 'additions': 93, 'deletions': 51, 'state': 'closed'}, {'id': 1051111383, 'number': 4365, 'closed': datetime.datetime(2022, 9, 9, 16, 50, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 9, 5, 4, 16, tzinfo=datetime.timezone.utc), 'time_taken': 42386.0, 'time_delta': '11:46:26', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1045914623, 'number': 4346, 'closed': datetime.datetime(2022, 9, 7, 16, 24, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 5, 0, 20, tzinfo=datetime.timezone.utc), 'time_taken': 213849.0, 'time_delta': '2 days, 11:24:09', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 1045629638, 'number': 4342, 'closed': datetime.datetime(2022, 9, 4, 12, 35, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 4, 5, 54, 38, tzinfo=datetime.timezone.utc), 'time_taken': 24069.0, 'time_delta': '6:41:09', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1045151012, 'number': 4337, 'closed': datetime.datetime(2022, 9, 4, 14, 44, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 17, 42, 55, tzinfo=datetime.timezone.utc), 'time_taken': 162069.0, 'time_delta': '1 day, 21:01:09', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1045027276, 'number': 4336, 'closed': datetime.datetime(2022, 9, 3, 8, 19, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 15, 5, 45, tzinfo=datetime.timezone.utc), 'time_taken': 62014.0, 'time_delta': '17:13:34', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1043865884, 'number': 4329, 'closed': datetime.datetime(2022, 9, 2, 2, 49, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 1, 15, 4, 23, tzinfo=datetime.timezone.utc), 'time_taken': 42309.0, 'time_delta': '11:45:09', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1040765417, 'number': 4309, 'closed': datetime.datetime(2022, 9, 23, 14, 58, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 30, 10, 9, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2090901.0, 'time_delta': '24 days, 4:48:21', 'additions': 303, 'deletions': 0, 'state': 'closed'}, {'id': 1037711360, 'number': 4300, 'closed': datetime.datetime(2022, 8, 26, 12, 36, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 9, 5, 22, tzinfo=datetime.timezone.utc), 'time_taken': 12689.0, 'time_delta': '3:31:29', 'additions': 46, 'deletions': 22, 'state': 'closed'}, {'id': 1032490174, 'number': 4284, 'closed': datetime.datetime(2022, 8, 22, 17, 39, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 22, 8, 27, 35, tzinfo=datetime.timezone.utc), 'time_taken': 33128.0, 'time_delta': '9:12:08', 'additions': 44, 'deletions': 1, 'state': 'closed'}, {'id': 1031955657, 'number': 4282, 'closed': datetime.datetime(2022, 8, 22, 8, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 21, 3, 31, 55, tzinfo=datetime.timezone.utc), 'time_taken': 104285.0, 'time_delta': '1 day, 4:58:05', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 1022168793, 'number': 4241, 'closed': datetime.datetime(2022, 8, 10, 5, 10, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 3, 15, 49, tzinfo=datetime.timezone.utc), 'time_taken': 6858.0, 'time_delta': '1:54:18', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1022160226, 'number': 4240, 'closed': datetime.datetime(2022, 8, 10, 3, 2, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 3, 0, 17, tzinfo=datetime.timezone.utc), 'time_taken': 113.0, 'time_delta': '0:01:53', 'additions': 6, 'deletions': 378, 'state': 'closed'}, {'id': 1021477286, 'number': 4237, 'closed': datetime.datetime(2022, 8, 12, 12, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 12, 47, 39, tzinfo=datetime.timezone.utc), 'time_taken': 256521.0, 'time_delta': '2 days, 23:15:21', 'additions': 431, 'deletions': 130, 'state': 'closed'}, {'id': 1021360020, 'number': 4236, 'closed': datetime.datetime(2022, 8, 9, 11, 1, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 10, 54, 16, tzinfo=datetime.timezone.utc), 'time_taken': 449.0, 'time_delta': '0:07:29', 'additions': 130, 'deletions': 433, 'state': 'closed'}, {'id': 1021224978, 'number': 4235, 'closed': datetime.datetime(2022, 9, 1, 10, 34, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 8, 46, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1993656.0, 'time_delta': '23 days, 1:47:36', 'additions': 43, 'deletions': 41, 'state': 'closed'}, {'id': 1018312704, 'number': 4225, 'closed': datetime.datetime(2022, 8, 19, 10, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 6, 43, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1222526.0, 'time_delta': '14 days, 3:35:26', 'additions': 66, 'deletions': 7, 'state': 'closed'}, {'id': 1014647019, 'number': 4214, 'closed': datetime.datetime(2022, 8, 10, 2, 56, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 5, 51, 53, tzinfo=datetime.timezone.utc), 'time_taken': 680704.0, 'time_delta': '7 days, 21:05:04', 'additions': 378, 'deletions': 6, 'state': 'closed'}, {'id': 1010467125, 'number': 4199, 'closed': datetime.datetime(2022, 7, 29, 7, 5, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 7, 37, 54, tzinfo=datetime.timezone.utc), 'time_taken': 84479.0, 'time_delta': '23:27:59', 'additions': 81, 'deletions': 6, 'state': 'closed'}, {'id': 1008218675, 'number': 4191, 'closed': datetime.datetime(2022, 7, 27, 2, 46, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 8, 36, 31, tzinfo=datetime.timezone.utc), 'time_taken': 65374.0, 'time_delta': '18:09:34', 'additions': 217, 'deletions': 28, 'state': 'closed'}, {'id': 1005131010, 'number': 4183, 'closed': datetime.datetime(2022, 8, 1, 7, 39, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 5, 17, 34, tzinfo=datetime.timezone.utc), 'time_taken': 872517.0, 'time_delta': '10 days, 2:21:57', 'additions': 394, 'deletions': 18, 'state': 'closed'}, {'id': 1003684113, 'number': 4177, 'closed': datetime.datetime(2022, 9, 7, 5, 0, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 21, 5, 58, 4, tzinfo=datetime.timezone.utc), 'time_taken': 4143772.0, 'time_delta': '47 days, 23:02:52', 'additions': 56, 'deletions': 6, 'state': 'closed'}, {'id': 1001716208, 'number': 4169, 'closed': datetime.datetime(2022, 7, 20, 8, 14, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 20, 7, 24, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3016.0, 'time_delta': '0:50:16', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 994517332, 'number': 4141, 'closed': datetime.datetime(2022, 7, 20, 15, 12, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 16, 20, 46, tzinfo=datetime.timezone.utc), 'time_taken': 687102.0, 'time_delta': '7 days, 22:51:42', 'additions': 281, 'deletions': 36, 'state': 'closed'}, {'id': 993783343, 'number': 4134, 'closed': datetime.datetime(2022, 7, 12, 7, 56, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 3, 21, 14, tzinfo=datetime.timezone.utc), 'time_taken': 16525.0, 'time_delta': '4:35:25', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 987227738, 'number': 4100, 'closed': datetime.datetime(2022, 7, 5, 9, 52, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 9, 52, 17, tzinfo=datetime.timezone.utc), 'time_taken': 9.0, 'time_delta': '0:00:09', 'additions': 59, 'deletions': 7, 'state': 'closed'}, {'id': 984535774, 'number': 4090, 'closed': datetime.datetime(2022, 7, 1, 13, 45, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 5, 15, 14, tzinfo=datetime.timezone.utc), 'time_taken': 30635.0, 'time_delta': '8:30:35', 'additions': 43, 'deletions': 37, 'state': 'closed'}, {'id': 983547406, 'number': 4081, 'closed': datetime.datetime(2022, 7, 1, 8, 32, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 30, 8, 45, 16, tzinfo=datetime.timezone.utc), 'time_taken': 85611.0, 'time_delta': '23:46:51', 'additions': 171, 'deletions': 22, 'state': 'closed'}, {'id': 982629043, 'number': 4076, 'closed': datetime.datetime(2022, 7, 6, 8, 29, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 29, 13, 48, 35, tzinfo=datetime.timezone.utc), 'time_taken': 585639.0, 'time_delta': '6 days, 18:40:39', 'additions': 252, 'deletions': 33, 'state': 'closed'}, {'id': 976641611, 'number': 4058, 'closed': datetime.datetime(2022, 6, 23, 7, 51, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 5, 38, 7, tzinfo=datetime.timezone.utc), 'time_taken': 8007.0, 'time_delta': '2:13:27', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 975317396, 'number': 4055, 'closed': datetime.datetime(2022, 7, 14, 15, 47, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 15, 35, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1901505.0, 'time_delta': '22 days, 0:11:45', 'additions': 188, 'deletions': 28, 'state': 'closed'}, {'id': 974566529, 'number': 4051, 'closed': datetime.datetime(2022, 6, 22, 6, 21, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 5, 13, 4, tzinfo=datetime.timezone.utc), 'time_taken': 4099.0, 'time_delta': '1:08:19', 'additions': 4, 'deletions': 6, 'state': 'closed'}, {'id': 970730668, 'number': 4042, 'closed': datetime.datetime(2022, 6, 21, 13, 20, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 17, 15, 19, 56, tzinfo=datetime.timezone.utc), 'time_taken': 338430.0, 'time_delta': '3 days, 22:00:30', 'additions': 148, 'deletions': 29, 'state': 'closed'}, {'id': 968890211, 'number': 4037, 'closed': datetime.datetime(2022, 6, 23, 8, 34, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 16, 5, 19, 1, tzinfo=datetime.timezone.utc), 'time_taken': 616538.0, 'time_delta': '7 days, 3:15:38', 'additions': 160, 'deletions': 134, 'state': 'closed'}, {'id': 961334373, 'number': 4008, 'closed': datetime.datetime(2022, 7, 19, 11, 52, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 8, 8, 18, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3555201.0, 'time_delta': '41 days, 3:33:21', 'additions': 87, 'deletions': 0, 'state': 'closed'}, {'id': 957466745, 'number': 3979, 'closed': datetime.datetime(2022, 6, 3, 14, 24, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 3, 13, 25, 7, tzinfo=datetime.timezone.utc), 'time_taken': 3567.0, 'time_delta': '0:59:27', 'additions': 0, 'deletions': 164, 'state': 'closed'}, {'id': 957342121, 'number': 3978, 'closed': datetime.datetime(2022, 6, 3, 13, 4, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 3, 11, 4, 3, tzinfo=datetime.timezone.utc), 'time_taken': 7251.0, 'time_delta': '2:00:51', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 949070752, 'number': 3960, 'closed': datetime.datetime(2022, 6, 14, 14, 9, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 27, 8, 35, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1575227.0, 'time_delta': '18 days, 5:33:47', 'additions': 503, 'deletions': 24, 'state': 'closed'}, {'id': 947947528, 'number': 3958, 'closed': datetime.datetime(2022, 6, 4, 2, 19, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 26, 7, 12, 56, tzinfo=datetime.timezone.utc), 'time_taken': 759973.0, 'time_delta': '8 days, 19:06:13', 'additions': 14, 'deletions': 9, 'state': 'closed'}, {'id': 947909721, 'number': 3957, 'closed': datetime.datetime(2022, 6, 3, 11, 1, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 26, 6, 17, 20, tzinfo=datetime.timezone.utc), 'time_taken': 708254.0, 'time_delta': '8 days, 4:44:14', 'additions': 478, 'deletions': 0, 'state': 'closed'}, {'id': 935672596, 'number': 3913, 'closed': datetime.datetime(2022, 8, 2, 7, 2, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 13, 9, 11, 49, tzinfo=datetime.timezone.utc), 'time_taken': 6990651.0, 'time_delta': '80 days, 21:50:51', 'additions': 190, 'deletions': 26, 'state': 'closed'}, {'id': 935520886, 'number': 3912, 'closed': datetime.datetime(2022, 5, 13, 8, 25, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 13, 5, 59, 21, tzinfo=datetime.timezone.utc), 'time_taken': 8776.0, 'time_delta': '2:26:16', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 931048715, 'number': 3905, 'closed': datetime.datetime(2022, 5, 9, 12, 51, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 9, 11, 28, 10, tzinfo=datetime.timezone.utc), 'time_taken': 5014.0, 'time_delta': '1:23:34', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 927357840, 'number': 3897, 'closed': datetime.datetime(2022, 5, 26, 11, 33, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 4, 8, 26, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1912011.0, 'time_delta': '22 days, 3:06:51', 'additions': 688, 'deletions': 118, 'state': 'closed'}, {'id': 921613103, 'number': 3880, 'closed': datetime.datetime(2022, 4, 28, 13, 50, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 28, 9, 34, 6, tzinfo=datetime.timezone.utc), 'time_taken': 15388.0, 'time_delta': '4:16:28', 'additions': 37, 'deletions': 1, 'state': 'closed'}, {'id': 918070510, 'number': 3865, 'closed': datetime.datetime(2022, 4, 29, 9, 7, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 25, 12, 7, 56, tzinfo=datetime.timezone.utc), 'time_taken': 334771.0, 'time_delta': '3 days, 20:59:31', 'additions': 61, 'deletions': 70, 'state': 'closed'}, {'id': 914169785, 'number': 3854, 'closed': datetime.datetime(2022, 4, 28, 4, 5, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 20, 12, 40, 23, tzinfo=datetime.timezone.utc), 'time_taken': 660330.0, 'time_delta': '7 days, 15:25:30', 'additions': 246, 'deletions': 127, 'state': 'closed'}, {'id': 908810570, 'number': 3821, 'closed': datetime.datetime(2022, 4, 15, 3, 3, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 13, 11, 20, 12, tzinfo=datetime.timezone.utc), 'time_taken': 143006.0, 'time_delta': '1 day, 15:43:26', 'additions': 21, 'deletions': 0, 'state': 'closed'}, {'id': 905963211, 'number': 3814, 'closed': datetime.datetime(2022, 4, 18, 10, 54, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 11, 12, 51, 23, tzinfo=datetime.timezone.utc), 'time_taken': 597792.0, 'time_delta': '6 days, 22:03:12', 'additions': 165, 'deletions': 19, 'state': 'closed'}, {'id': 903557335, 'number': 3807, 'closed': datetime.datetime(2022, 4, 15, 6, 35, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 8, 8, 6, 9, tzinfo=datetime.timezone.utc), 'time_taken': 599379.0, 'time_delta': '6 days, 22:29:39', 'additions': 110, 'deletions': 59, 'state': 'closed'}, {'id': 903426221, 'number': 3806, 'closed': datetime.datetime(2022, 4, 8, 9, 2, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 8, 4, 59, 51, tzinfo=datetime.timezone.utc), 'time_taken': 14542.0, 'time_delta': '4:02:22', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 902359337, 'number': 3800, 'closed': datetime.datetime(2022, 4, 14, 12, 46, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 7, 6, 56, 28, tzinfo=datetime.timezone.utc), 'time_taken': 625807.0, 'time_delta': '7 days, 5:50:07', 'additions': 142, 'deletions': 54, 'state': 'closed'}, {'id': 900169174, 'number': 3792, 'closed': datetime.datetime(2022, 4, 6, 11, 0, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 5, 12, 41, 27, tzinfo=datetime.timezone.utc), 'time_taken': 80356.0, 'time_delta': '22:19:16', 'additions': 50, 'deletions': 23, 'state': 'closed'}, {'id': 899789159, 'number': 3787, 'closed': datetime.datetime(2022, 4, 8, 13, 12, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 5, 6, 6, 37, tzinfo=datetime.timezone.utc), 'time_taken': 284763.0, 'time_delta': '3 days, 7:06:03', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 891951427, 'number': 3765, 'closed': datetime.datetime(2022, 4, 1, 12, 15, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 28, 15, 23, 1, tzinfo=datetime.timezone.utc), 'time_taken': 334366.0, 'time_delta': '3 days, 20:52:46', 'additions': 44, 'deletions': 10, 'state': 'closed'}, {'id': 880086008, 'number': 3720, 'closed': datetime.datetime(2022, 3, 16, 12, 45, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 15, 11, 45, 31, tzinfo=datetime.timezone.utc), 'time_taken': 89975.0, 'time_delta': '1 day, 0:59:35', 'additions': 152, 'deletions': 5, 'state': 'closed'}, {'id': 876144082, 'number': 3694, 'closed': datetime.datetime(2022, 3, 15, 8, 39, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 10, 8, 40, 12, tzinfo=datetime.timezone.utc), 'time_taken': 431953.0, 'time_delta': '4 days, 23:59:13', 'additions': 33, 'deletions': 6, 'state': 'closed'}, {'id': 874127430, 'number': 3686, 'closed': datetime.datetime(2022, 3, 9, 18, 41, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 8, 12, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 109541.0, 'time_delta': '1 day, 6:25:41', 'additions': 44, 'deletions': 7, 'state': 'closed'}, {'id': 713994284, 'number': 3045, 'closed': datetime.datetime(2021, 8, 17, 10, 46, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 17, 7, 40, 18, tzinfo=datetime.timezone.utc), 'time_taken': 11157.0, 'time_delta': '3:05:57', 'additions': 20, 'deletions': 349, 'state': 'closed'}, {'id': 602262157, 'number': 2637, 'closed': datetime.datetime(2021, 4, 20, 14, 13, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 28, 15, 50, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1981382.0, 'time_delta': '22 days, 22:23:02', 'additions': 531, 'deletions': 288, 'state': 'closed'}, {'id': 573064808, 'number': 2504, 'closed': datetime.datetime(2021, 2, 18, 17, 39, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 14, 9, 41, 49, tzinfo=datetime.timezone.utc), 'time_taken': 374250.0, 'time_delta': '4 days, 7:57:30', 'additions': 273, 'deletions': 42, 'state': 'closed'}, {'id': 562457080, 'number': 2441, 'closed': datetime.datetime(2021, 1, 27, 13, 5, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 27, 12, 5, 51, tzinfo=datetime.timezone.utc), 'time_taken': 3591.0, 'time_delta': '0:59:51', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 549168481, 'number': 2369, 'closed': datetime.datetime(2021, 1, 15, 11, 42, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 5, 15, 23, 44, tzinfo=datetime.timezone.utc), 'time_taken': 850715.0, 'time_delta': '9 days, 20:18:35', 'additions': 195, 'deletions': 26, 'state': 'closed'}, {'id': 525519195, 'number': 2252, 'closed': datetime.datetime(2020, 11, 23, 15, 3, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 23, 7, 28, 20, tzinfo=datetime.timezone.utc), 'time_taken': 27290.0, 'time_delta': '7:34:50', 'additions': 36, 'deletions': 10, 'state': 'closed'}, {'id': 382012826, 'number': 1473, 'closed': datetime.datetime(2020, 3, 4, 15, 7, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 1, 8, 3, 52, tzinfo=datetime.timezone.utc), 'time_taken': 284606.0, 'time_delta': '3 days, 7:03:26', 'additions': 124, 'deletions': 0, 'state': 'closed'}, {'id': 376136436, 'number': 1444, 'closed': datetime.datetime(2020, 2, 17, 14, 2, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 17, 13, 28, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2043.0, 'time_delta': '0:34:03', 'additions': 12, 'deletions': 12, 'state': 'closed'}, {'id': 374598386, 'number': 1423, 'closed': datetime.datetime(2020, 2, 14, 11, 15, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 12, 23, 46, 59, tzinfo=datetime.timezone.utc), 'time_taken': 127688.0, 'time_delta': '1 day, 11:28:08', 'additions': 1716, 'deletions': 1639, 'state': 'closed'}, {'id': 370155459, 'number': 1379, 'closed': datetime.datetime(2020, 2, 11, 12, 59, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 3, 7, 5, 1, tzinfo=datetime.timezone.utc), 'time_taken': 712459.0, 'time_delta': '8 days, 5:54:19', 'additions': 1509, 'deletions': 261, 'state': 'closed'}, {'id': 363185953, 'number': 1309, 'closed': datetime.datetime(2020, 1, 15, 16, 1, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 15, 10, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3081.0, 'time_delta': '0:51:21', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 359209632, 'number': 1250, 'closed': datetime.datetime(2020, 1, 13, 14, 38, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 4, 12, 21, 38, tzinfo=datetime.timezone.utc), 'time_taken': 785816.0, 'time_delta': '9 days, 2:16:56', 'additions': 520, 'deletions': 3, 'state': 'closed'}, {'id': 355734830, 'number': 1213, 'closed': datetime.datetime(2019, 12, 20, 14, 24, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 20, 13, 40, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2672.0, 'time_delta': '0:44:32', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 350761308, 'number': 1174, 'closed': datetime.datetime(2019, 12, 16, 13, 46, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 9, 15, 0, 14, tzinfo=datetime.timezone.utc), 'time_taken': 600388.0, 'time_delta': '6 days, 22:46:28', 'additions': 293, 'deletions': 5, 'state': 'closed'}, {'id': 327361747, 'number': 987, 'closed': datetime.datetime(2019, 10, 13, 21, 35, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 11, 20, 47, 34, tzinfo=datetime.timezone.utc), 'time_taken': 175679.0, 'time_delta': '2 days, 0:47:59', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 317878204, 'number': 931, 'closed': datetime.datetime(2019, 9, 17, 15, 35, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 16, 13, 24, 33, tzinfo=datetime.timezone.utc), 'time_taken': 94277.0, 'time_delta': '1 day, 2:11:17', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 306724944, 'number': 863, 'closed': datetime.datetime(2019, 8, 13, 7, 58, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 8, 13, 2, 40, 19, tzinfo=datetime.timezone.utc), 'time_taken': 19068.0, 'time_delta': '5:17:48', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 289681951, 'number': 784, 'closed': datetime.datetime(2019, 6, 19, 14, 8, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 6, 19, 12, 29, 33, tzinfo=datetime.timezone.utc), 'time_taken': 5956.0, 'time_delta': '1:39:16', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 289409175, 'number': 781, 'closed': datetime.datetime(2019, 6, 19, 8, 46, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 6, 18, 18, 54, 5, tzinfo=datetime.timezone.utc), 'time_taken': 49951.0, 'time_delta': '13:52:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 289203451, 'number': 775, 'closed': datetime.datetime(2019, 6, 19, 8, 39, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 6, 18, 10, 20, 53, tzinfo=datetime.timezone.utc), 'time_taken': 80295.0, 'time_delta': '22:18:15', 'additions': 154, 'deletions': 34, 'state': 'closed'}]"
