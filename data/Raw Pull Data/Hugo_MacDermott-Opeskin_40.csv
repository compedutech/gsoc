pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
450620326,Update TNG sources and includes to reflect API bugfixes.,"I have updated all the sources and headers used to build the library.

@richardjgowers can you please et me know if you are not supposed to add some of these files to be tracked, as I am still pretty new to the Cython. The files in tng/lib/src were not tracked for some reason?

Cheers

Hugo",True,28,https://api.github.com/repos/MDAnalysis/pytng/pulls/28,https://github.com/MDAnalysis/pytng/pull/28,closed,21939,20077,42,4,3,0,0,0,[],2020-07-17 00:15:08+00:00,2020-07-17 07:07:29+00:00,24741.0,6:52:21,[],"[{'commit_sha': 'c49c2e7d0c09360f2fcb63d268d326aa810a0fd0', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efc449ee3d6b153fa4eeedc23187cf104008849f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ec805fe898967aff9e2e5a086429b4ace351ba', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b20a2e9ec90eedc88431346a1937d70d35c0d51', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}]",Hugo MacDermott-Opeskin,24581003,hugomacdermott@gmail.com,User,,99,,128,73
451625219,Change TNG calls.,"I've changed the calls to the tng library and added a whole bunch of testing files to match the tests I wrote for TNG itself.
~~The box reading is currently misbehaving I think i just have the cython part a bit off.~~

I have noted that a few of the read routines will need adjusting for when we deal with stride_length != 1 and added some todos.

I have also commented out a bunch of the tests, we will work them back in slowly?",True,29,https://api.github.com/repos/MDAnalysis/pytng/pulls/29,https://github.com/MDAnalysis/pytng/pull/29,closed,832,240,10,42,21,16,0,0,[],2020-07-18 02:01:54+00:00,2020-08-04 22:45:32+00:00,1543418.0,"17 days, 20:43:38","[{'comment_id': 456766339, 'comment_body': 'Did you add a test with frames > 1 to break it? That might be a start (perhaps with XFAIL(.', 'comment_created': datetime.datetime(2020, 7, 18, 8, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 456766914, 'comment_body': 'Normal assert is ok for scalar integer comparison... assert_equal is fine, too, but just wanted to note that I dont think that you need to make extra work for you replacing them.', 'comment_created': datetime.datetime(2020, 7, 18, 8, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 456767040, 'comment_body': 'Perhaps make them as XFAIL for right now instead of removing? In this way you know what should ultimately work again. Or is there a reason for not wanting slicing to work?', 'comment_created': datetime.datetime(2020, 7, 18, 8, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 456767163, 'comment_body': 'This is a big test file ... could be split into more manageable logical units.', 'comment_created': datetime.datetime(2020, 7, 18, 8, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 456770781, 'comment_body': ""I was going to say that this is gross and I'm not sure why we wanted it, but then I saw that tng does `realloc` calls, so we need to `malloc` the memory (and not PyMem_Malloc which is Pythons' memory manager call).\r\n\r\n@hmacdope does tng still do the reallocs if a buffer isn't large enough?\r\n\r\nI don't think we'll need unique_ptr as nobody else ever gets this pointer at the C level.  At the Python level, the `MemoryWrapper` class is reference counted by Python and `__dealloc__` called when it goes out of scope, so it's a little like a unique_ptr again.\r\n"", 'comment_created': datetime.datetime(2020, 7, 18, 9, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 456771063, 'comment_body': ""so reading the tng docs for `data_vector_interval_get` it says it'll do the malloc for you, and you're responsible for freeing it.  Is it instead that it'll `realloc` if it's not the right size?"", 'comment_created': datetime.datetime(2020, 7, 18, 9, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 456884882, 'comment_body': 'working on it now :)', 'comment_created': datetime.datetime(2020, 7, 19, 9, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 456884898, 'comment_body': 'okay noted. :)\r\n', 'comment_created': datetime.datetime(2020, 7, 19, 9, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 456884937, 'comment_body': 'They are all back in now.', 'comment_created': datetime.datetime(2020, 7, 19, 9, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 456885002, 'comment_body': 'split by example file could be a good option, or split by API segments ie static properties vs volatile trajectory data?', 'comment_created': datetime.datetime(2020, 7, 19, 9, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 456885101, 'comment_body': ""Noted on the unique ptr, on the reallocs i'm not sure but i can look in the src files."", 'comment_created': datetime.datetime(2020, 7, 19, 9, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 456885197, 'comment_body': ""I'll have a look."", 'comment_created': datetime.datetime(2020, 7, 19, 9, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 456901798, 'comment_body': ""@richardjgowers this finds the stride lengths in pos force and vel, so that then we can compute the actual number of frames as `nframes%stride_length` and not try and read when theres no data.\r\n\r\nHowever, this isn't a scalable option as there are loads of possible blocks with their own stride lengths and we can't keep track of all of them. Spooling them off one by one at the C level with `tng_util_trajectory_next_frame_present_data_blocks_find()` is probably the best option."", 'comment_created': datetime.datetime(2020, 7, 19, 12, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 456902298, 'comment_body': 'This hinges on what we mean by specifically by ""frames"". As currently stands there is nothing wrong with the current code other than that  `n_frames` is the number of md steps.', 'comment_created': datetime.datetime(2020, 7, 19, 12, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 457636396, 'comment_body': 'Split by API elements seems more logical than by test files unless one file are more ""integration tests"" (that look at the whole thing and check that everything works together) while others are more ""unit tests"" that check for specific functionality.', 'comment_created': datetime.datetime(2020, 7, 20, 19, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 457726668, 'comment_body': 'Ack :+1: ', 'comment_created': datetime.datetime(2020, 7, 20, 22, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}]","[{'commit_sha': 'c49c2e7d0c09360f2fcb63d268d326aa810a0fd0', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efc449ee3d6b153fa4eeedc23187cf104008849f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ec805fe898967aff9e2e5a086429b4ace351ba', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b20a2e9ec90eedc88431346a1937d70d35c0d51', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d54a924fc4affe513f3c94defe4bb7110fdae88', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c2208886401358fdf4ecd935776ad3183d9eee', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0a6b6da62952a64b1003e591bbd726dc5e0b069', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9317b9060ca3887479115844c62a1fb6f52b358', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddea553115da89cf48111544986f2cdb50d3e16c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c09bef6b08817f253bfe22c0a53bb7525c95d9e8', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a19bf7b9b47693814f11a2e97b423d4f8c4357b0', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d7fd16ae3295eda558a28062cfa4163483e78c7', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f24abaa6897b0397d0f1286653cdf9a3736d0707', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1713d68d6557291755d4ee1969790445c13880ba', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f25a0dd5b9e3e794968bb64df38b59414a95a2c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba6cfa4764bd0726ba5f13201f6da4d2b0459ed8', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dc7aad1839a71520898727ebe398d2c7730c1d2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f3412401e9122c26b71ac2ab4df0ad9155fb141', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c66e01facd212470091f9d8cdfc61a302b53ef2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4822666d33c67466acab3fcce4ea5889c13da800', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9acb8232cd745472ef5eb5de251d834fda32f6', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b4eb3ba9934dbc427faf181544d72bfe21f77f5', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '922b91b2842bc27eb4dd5abd083e8dab239e08fe', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c177aa30919a0a114c41eb10961cf4a64093550', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b4fe7d0ed951dcea88402b8475da0af900e0a51', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4e3fd68b665f0174ce723e8f0584ea0a1cffccb', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b57141207e771f04eeeb65151b2f7b0e46ae4c36', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da2970dc9ec43bd6000946c826640551fe35781', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '564bc7d62320f06d4e812955a3af84b6e6c75ddb', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afc7f0a3b747d8019e618c2472291333becc568b', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0af2c32e93cda1a2f2db3989b506ad2e2b3fef20', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a52e06f01017281cce181eaeef817aa2d2f05e', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afa0b996071c5fe8165f26d9409135688beb84fd', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e4489357aa3517591dea283c4137638f233a8a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512dd13420cc94a6bdc39248b25d6de9401fb872', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b5d45031aa67af6816740e49fe9b999e8daa277', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f127f525c858a22bd25af9802bbeb8bcc08d0c0', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60848db3c4f0de6d0e05454c5eaf9828c071d4e', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5a55fbf17817a125276f103c72d2f02a3166a3a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76cf6ab94a1de95782312ac4882e1d7127fb8674', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fe02219fcd8c1c85ad41489ccc4d75c61cb7c7', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ba586b4c7720cb990f758bf4fcbc27cb78de76b', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}]",Hugo MacDermott-Opeskin,24581003,hugomacdermott@gmail.com,User,,99,,128,73
455727687,Cython block reader,"Start of PR for Cython based block reader that will iterate through trajectory.

Mostly pretty standard boilerplate at this stage. Key will be correct calls to low level TNG objects and functions. Depends on #29.",True,32,https://api.github.com/repos/MDAnalysis/pytng/pulls/32,https://github.com/MDAnalysis/pytng/pull/32,closed,1450,167,5,110,24,25,0,0,[],2020-07-23 13:57:49+00:00,2020-08-23 02:25:45+00:00,2636876.0,"30 days, 12:27:56","[{'comment_id': 460354658, 'comment_body': ""@richardjgowers (possibly stupid) Cython question for you.\r\n\r\nThis doesn't appear to allow dereferencing of the pointer type `tng_gen_block_t`. Is this because of the typedef of tng_gen_block_t to tng_gen_block*  and if so how do we get around it? "", 'comment_created': datetime.datetime(2020, 7, 25, 2, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 460476248, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 26, 4, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 460496972, 'comment_body': 'I think we can assume that the file handle is private', 'comment_created': datetime.datetime(2020, 7, 26, 8, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 460497144, 'comment_body': 'I think you can just do `self._traj.input_file` and Cython knows you mean `self._traj->input_file`', 'comment_created': datetime.datetime(2020, 7, 26, 8, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 460497286, 'comment_body': 'Might be wrong but I think you can pass null terminated char* to python `str()` and it just works', 'comment_created': datetime.datetime(2020, 7, 26, 8, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 460497369, 'comment_body': ""Okay i'll change :)"", 'comment_created': datetime.datetime(2020, 7, 26, 8, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 460498047, 'comment_body': ""I think the signature for this should be that a numpy array gets passed in, shape checked then the pointer from it passed into TNG.  It's then the responsibility of the `TNGTrajectoryReader` to make appropriate (malloc'ed) ones for pos/vel/force."", 'comment_created': datetime.datetime(2020, 7, 26, 8, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 460499475, 'comment_body': ""Good to know! \r\nI'll have a look at conversion, but i'm hoping that this part of the code will not stay around forever."", 'comment_created': datetime.datetime(2020, 7, 26, 8, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 460499605, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2020, 7, 26, 8, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 462925185, 'comment_body': '@richardjgowers  not sure if im calling this right  but these raw memcpy calls were not giving me anything that made sense.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 463796866, 'comment_body': ""If this is the method that goes through the file long seek by long seek I'd rather not call it until required."", 'comment_created': datetime.datetime(2020, 7, 31, 19, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 463797576, 'comment_body': 'Can probably just have a char[1024] in the struct ', 'comment_created': datetime.datetime(2020, 7, 31, 19, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 465475058, 'comment_body': 'See here for how the interface looks currently.', 'comment_created': datetime.datetime(2020, 8, 5, 5, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 465599289, 'comment_body': 'is this the 10,000th frame in the file, or the 10,000th of the simulation?', 'comment_created': datetime.datetime(2020, 8, 5, 9, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'richardjgowers', 'type': 'User'}, {'comment_id': 465605369, 'comment_body': '10,000th of the simulation, the frame interface is one of the things I still think needs a fair bit of improvement.\r\n\r\nOne idea is possibly to iterate over the greatest common divisor of the data strides?', 'comment_created': datetime.datetime(2020, 8, 5, 9, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 466773511, 'comment_body': 'This one is fairly low overhead, just skimming a file header.', 'comment_created': datetime.datetime(2020, 8, 7, 1, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 469004462, 'comment_body': 'Instead of having a space gap in the string, use two simple strings and let Python concatenate, eg\r\n```python\r\nraise ValueError(""frame specified .... steps ""\r\n                            ""in input file {}"".format(self._n_frames))\r\n```\r\n(format or f-string interpolation happens _before_ strings are concatenated; if you need to interpolate afterwards, use parentheses(', 'comment_created': datetime.datetime(2020, 8, 12, 4, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469004867, 'comment_body': 'string has a newline/space gap', 'comment_created': datetime.datetime(2020, 8, 12, 4, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469004935, 'comment_body': 'newline/space gap', 'comment_created': datetime.datetime(2020, 8, 12, 4, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469005273, 'comment_body': 'We tend top avoid print (or printf) and rather use warning and logger. Is there a downside to using `warnings.warn` inside cython?\r\n', 'comment_created': datetime.datetime(2020, 8, 12, 4, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469022139, 'comment_body': 'This function is declared `nogil` for performance reasons, meaning the python GIL is released. As a consequence no python objects or methods can be called. Open to any other solutions or just removing.', 'comment_created': datetime.datetime(2020, 8, 12, 5, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 469024087, 'comment_body': 'addendum: you can use `raise`, `assert` and `print` but this requires Cython >= 3.0 ', 'comment_created': datetime.datetime(2020, 8, 12, 6, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 469440516, 'comment_body': 'Ok with `printf` – calling code should deal with `TNG_CRITICAL` anyway.\r\n\r\nPerhaps once the whole library stabilizes we comment out the printfs but for right now it will help. Maybe be consistent with the printf and always prefix them with ""pytng: "" or something like that?', 'comment_created': datetime.datetime(2020, 8, 12, 17, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 469592271, 'comment_body': 'Sounds good, as you said propagating errors up to the python level should be the end solution. :)', 'comment_created': datetime.datetime(2020, 8, 12, 22, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}]","[{'commit_sha': '3fbb8e2f64ecbc47e232d8b617ac14da47d6a444', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dee7442fd4b22ba7c4b9723b206d73123dcc6d9a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7783136c219ab04f51533763707da1101f3aa7b7', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '280df3f8f98642f62ebcd9462db8474c078f3d0f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de28abf7feed0cc8aacce120e07f03c48263d47f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cf3eccd78ef42e14c40625080a6e831c42b50c5', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf653d0531a6e8b0175de3f64811b18a9da464ff', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd5c6f1dfbddeffbb6aac26c43a4917617fe59ba', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22513f6d980ee619b025e6810e7440a6d2db0286', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75229a9503f7c17e9b175b813826c6fb0f0a40de', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eb2c69f1ae3f7734d08fe6d11221de9e32e1f9b', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80f8af66f3928cb7d1bbe701ca49cfe0969071b3', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab33de2664b5b6a241f7cb20001b406fac4fae5a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed0b3747bc33233aa60fd3b01c57da98b86caba', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28381fb11e1d303a02bb3761c9c4cc3d187f3f13', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c8b5bd407c78d991233d3e9df77b2639759ca8', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47dec7de022c5820fb51ae558d56cdda8d6f6621', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '070a9a93bf66073b468637c6476d602a14fcc304', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b81a9767519c5673f809fca1e9961bd6da09a48b', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19e7b08ab7ace4e1d5f22e8730e99a2878d8b6e8', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7cfc113b85f773fb6d5b5ae69619f299920f6cd', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ca00752eb7eabe5dccb324da8c202a69288cbf', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8008b465e390944e23e2cdccb54fcdf158b4b01d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deae8648819e6b636d3d5d13fd4751645c133a85', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87fda30e8de7edf3c2bfbed915d39a9559224800', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2504df92c376a4bb97ae854e21444876f768d38e', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b47e602b85e9cc86040f9724f59ddbbdb042ec13', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '988fd03221fe5dffbfb7b5d4322eb2899a216970', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf7b8c60de1d05a3d90c0dc2871996c37260b93', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27175363c1aa06a27c6335cdd0aac50899297dbe', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f04e86698948444d244f26fcebd6d1d56b3e1421', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6dd0ed3a9988e116ff81ce2e6ad00afbefa6686', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9e2552fdd2852947baee37090ba57fc012dbf15', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e22150b140d5dda675d7f3b2d78825925ef9e20', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2251ab674d03b2b56b3780deaed9344f7785cc15', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28b7f8673d8bfc7f467e9b9f44d672a4781e20ec', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d39a25a3572a9a1406e8207e4760d5d27725cd3', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c09c636696f0bde51244deab5183d56c65e1fae', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '117b14390f04af0ead1b8f71fec2dceecb388d29', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369a420d1fb81c19c752a461920d4c85edb80149', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f49dc6859858a63b27e98664086d4801f4c82f0', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e0f8462adf6781113cb5dd8980c5e9c03ee8708', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c0a11e30aef0ae14b5a192ab59bac5544e26978', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78dc2279616b0b63fca995512416afc04ebf7bc4', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11387a55d6613c10d404e8f07d1af71605c4b2ae', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6bf0afaa0c6a3b2261cb1e4995d589bba06e809', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c1058653040cb738a648c58665f3365342b6558', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8263b36affe26169ccfea785ae939aa1b6651988', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2483daf65caa393cfbf8bd1de50c9293cecd698f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ced74c7a8588e2035668787289555aacbbd42fe', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1439a45ffb26fece99f6cc0f57ae237f83f291d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55b6ab235270ab665a8796e00ff4989d6be8f5dc', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb78d6b46bdd1d188f27eae38675b7dd5955d555', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6dab86279369c38b769da3841537404c3bc49d4', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5a9fe70518244beabde380d2f337acb3dfabed3', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e536f6fe161b6141244bae33b647a2f4ca1b23ec', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99167445170996f9b4db6565ce72d3891d0338cf', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd544c6beb25c326df4467b207e4b38ea32ff86f8', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e554a474fe1aca34a921b710895eb16f03f1476', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0c3d27a26b1603a5ad8c15065ec576e473258d2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e5cf9f3219e49a3495eb4607c4dde715a8d791', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a150348b01cc4febbf40bd0d4e408b9ef917375', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0520db8cd1c758beb386ddabe9a3b649a93e43d4', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91bc853cbc559b9f6886c515725b122533df9be2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7b5a517001a09cb53842c7b0dabd7cf60adae83', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ea605e7bfadd998be1a76a596a359b67bf81b7c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6f44822991b20ca05120935c29e4cf29a5a9f9', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38c374b60d614be7fa5d8deca0dbbbb60e9ea67b', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b05112548baf7b1e29f2a5a94b23f9f3d99532', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09fa70cd016ca45d99b7aa3c0eb2e2225005c92', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b37ba0ea21708cc6d57f581936e8a6b83f40733c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f26858ec377aab8f6bb6e8551bc901851d18c90', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '573529736f195eaac577ff7d8eff19b163b80c82', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2e4c5ebb7b0920e49c06c4ef136126865defd50', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01b43a2a23c94a3c7a82520cff7ef4ddfd4c2020', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb42627ffcceef8b59a8b0b0bcb8658f6258197f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36bf8c5c8582181c6174fa9885691a9a4fb401ed', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a78a13fe3876052711baa95041d862ded642c108', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7d39e283033a199e46b09e203cb41f5fb25f956', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fab813455e90c1277682ea7f9beddc19c655d3a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '955d7585ff209c01ee4a770784454644d36f5204', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '493eed81d53c1ae3ab4ed37aa5192df027a84322', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dea0ded8f5fd91dd061ac7ce970f219aa5e97e13', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09a0ae23543dab22593035d0167e05d99c36b8e', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1998f2e12a6656be6e40fe5c31410048f72713f2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba29234b97ac3b3e97944dd080f437e17df6cf6c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4303aefda843829d6df15fce88078173648f6531', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043fe386ee7dd22a543bbc0833eba0eaaa2c5e0a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21485ac8afb5796c9da3b88b38fc3a703d5f554a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9002731e2bc48905294c3cbd5c77e6da6d88c74a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db0d0eb5bdddfb3b849dde30a24d318f355a4728', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b232c4b44b3d913366ecf70b84eab6424be0293', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c22c753474750b64e6aa26f9608d690e7afffcbc', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4b72a931be1fa7fd10aeb1fcf3370cff89ea700', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d7320650e078312de7a2a0f10c78211590b178', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa71695a07e83f62c8e30fdb9b67e1a9b2e0941', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b1124642837e4315e91d2d01360c2c68de2c24', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd06e664a6db5b04d3f3a43d775b231b5ebe0f38', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '876e6472a0d1ebe64da79714919ffac7609d9e74', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'febc67ad7c9c0c73f5ca8decc4a9565e017698ab', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a362ac0caeb91ccab1f066c2a1d8c43128d38aba', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5798bbeb36983b3f2713b5427e3ba97ea16d029', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5fd8a99da64bbf3e9fd62c5064d16dca385391c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e2b4e3b60dfff580944c03c9842f715fc979fdb', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ccf22289b0d043502f728df14c447e6f11124c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b39a566411836cc82491b526ae7c1c311cb7535f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61676df1c57486c6d7fa8bc96d54f9919ea35d3a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '424547fa5024e4ad92950a0d2a49750ab86facee', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3df4b8fedd514d2c9787f95718591d39efab0f50', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b13074687a06834ce193f6acec2a3ad7c50d78f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}]",Hugo MacDermott-Opeskin,24581003,hugomacdermott@gmail.com,User,,99,,128,73
468618155,Change BlockReader API,"This is an updated version of the CythonBlockReader API, incorporating some changes that @richardjgowers  suggested.

- Primary change is that you now need to provide a numpy array to read block data into rather than it being tied to the block instance.

Still not quite complete as I need to improve the array copying and add some memoryviews.",True,38,https://api.github.com/repos/MDAnalysis/pytng/pulls/38,https://github.com/MDAnalysis/pytng/pull/38,closed,895,508,6,73,11,104,0,0,[],2020-08-17 06:28:23+00:00,2020-09-15 23:25:44+00:00,2566641.0,"29 days, 16:57:21","[{'comment_id': 475993854, 'comment_body': 'Add text above or below stating that you need to pre-allocate the array and that `tng.current_integrator_step.get_pos(positions)` fills the array. \r\n\r\nFor consistency, can you make `tng.current_integrator_step.get_pos()` also return  (reference to) the array? Otherwise `get` sounds wrong and it should be something like `load_pos_into()`.', 'comment_created': datetime.datetime(2020, 8, 25, 0, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475995050, 'comment_body': 'Use reST markup\r\n```reST\r\n:attr:`TNGFileIterator.current_integrator_step`\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475995222, 'comment_body': 'getter method', 'comment_created': datetime.datetime(2020, 8, 25, 0, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475995608, 'comment_body': 'terrible name for a trajectory, maybe ""traj.tng"" for consistency', 'comment_created': datetime.datetime(2020, 8, 25, 0, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475998190, 'comment_body': 'Is the `len(tng)` the number of integrator time steps?\r\n\r\nExplain what `len(tng)`, especially as this is really odd in the context of all other readers. I see that one reason for wrapping tng into MDAnalysis is to make it so that users do not need to know the internals of TNG but if anyone were to write a reader for MDA then they should have this information without having to resort to source code reading.', 'comment_created': datetime.datetime(2020, 8, 25, 0, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475998707, 'comment_body': 'Does TNG require strides to be regular? Add a note.', 'comment_created': datetime.datetime(2020, 8, 25, 0, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476000103, 'comment_body': ""Comments that `read_step(ts)` and `tng.current_integrator_step.get_pos(positions)` do in-place updates of data structures (namely `tng.current_integrator_step` and the `positions` array).\r\n\r\nAs said above, I am not a fan of the name `get_pos()` when there's only in-place operation, at least in a python context it seems odd. Do @richardjgowers @kain88-de @jbarnoud have an opinion?"", 'comment_created': datetime.datetime(2020, 8, 25, 0, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476001177, 'comment_body': 'What does this do?? What is the shape of `positions`? Does it read _all_ pos-frames at once?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476001701, 'comment_body': 'Or can we use trajectories from the tests?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476004355, 'comment_body': 'remove prints?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476004680, 'comment_body': 'seek -> read_step', 'comment_created': datetime.datetime(2020, 8, 25, 0, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476005775, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476006021, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476008053, 'comment_body': 'Are we using old-style markup (like here) or NumPy style (as further below and in MDAnalysis)?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476008387, 'comment_body': 'This is NumPy-style markup. Should be consistent.', 'comment_created': datetime.datetime(2020, 8, 25, 0, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476008761, 'comment_body': 'Can you echo the block name here? Makes debugging a lot easier...', 'comment_created': datetime.datetime(2020, 8, 25, 0, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476009137, 'comment_body': 'Maybe a SeeAlso for a method to find out what block_id are present?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476009650, 'comment_body': 'retrieves', 'comment_created': datetime.datetime(2020, 8, 25, 0, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476010702, 'comment_body': 'Could this function return `self.current_step`? It seems more natural to do\r\n```python\r\ntngstep = tng.read_step(n)\r\ntngstep.get_pos(positions)\r\n```\r\nor is there a problem with this approach?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476012675, 'comment_body': 'retrieve', 'comment_created': datetime.datetime(2020, 8, 25, 0, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476014433, 'comment_body': ""I expect `get_*()` methods to return a value but maybe that's the wrong expectation for the TNG library. \r\n\r\nCould we add return values to all getters?"", 'comment_created': datetime.datetime(2020, 8, 25, 0, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476015128, 'comment_body': 'What are the box vectors?\r\n\r\nWhat is the _meaning_ of the 9 numbers? How do you reconstruct the box vectors?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476015462, 'comment_body': 'Can we use `get_positions()`, i.e., full names?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476015577, 'comment_body': 'Can we use `get_velocities()`, i.e., full names?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476016154, 'comment_body': 'Can we _please_ use `get_forces()`, i.e., readable/self-documenting names? \r\n\r\n(Bytes are not _that_ expensive anymore... ;-) )', 'comment_created': datetime.datetime(2020, 8, 25, 0, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476017578, 'comment_body': 'Can you raise a Python exception inside this cython function?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018118, 'comment_body': 'Why returning a status value instead of raising an exception?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018516, 'comment_body': 'exception vs `                 return TNG_CRITICAL`?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018637, 'comment_body': 'remove', 'comment_created': datetime.datetime(2020, 8, 25, 0, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018757, 'comment_body': 'exception vs return TNG_CRITICAL?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018815, 'comment_body': 'exception vs return TNG_CRITICAL?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476019258, 'comment_body': 'See also below. I mainly want to understand the philosophy here. How is a user supposed to do error handling with the library? Check return values or catch exceptions?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476019607, 'comment_body': 'and => an', 'comment_created': datetime.datetime(2020, 8, 25, 0, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476019967, 'comment_body': 'I assume this sucks as far as performance is concerned?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476912384, 'comment_body': 'Correct, perhaps @tylerjereddy would know If this can be done better?\r\n\r\nOther options are:\r\n* tying the C array to a `MemoryWrapper` instance and then using PyArray_SetBaseObject, meaning that we do the memory management for the caller (IMO bad idea).\r\n* Iterate over the C array and put it in the NumPy array (FLOP inefficent)\r\n* ??', 'comment_created': datetime.datetime(2020, 8, 26, 0, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 476913868, 'comment_body': 'My bad, hangover from this being nogil. Ill fix.', 'comment_created': datetime.datetime(2020, 8, 26, 0, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 476914054, 'comment_body': 'Yes as we have GIL here. :)', 'comment_created': datetime.datetime(2020, 8, 26, 0, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 477002143, 'comment_body': 'As simple as it sounds, it is worth trying something similar to `data = np.asarray(data_loc)` here, because that will actually coerce the data to NumPy array [without doing a copy](https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#coercion-to-numpy).\r\n\r\nDid you rule that out because `data` is a parameter? I think pass by reference can be made to work without too much trouble in Cython, at least with `cdef`. Similar to this maybe: https://stackoverflow.com/a/21721727/2942522\r\n\r\nMaybe even `data[:, :] = np.asarray..` or similar to avoid a local re-binding of `data`.', 'comment_created': datetime.datetime(2020, 8, 26, 2, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 477003794, 'comment_body': ""Are any of these typed memoryviews going to hold C-contiguous data? You've probably thought of that already, but can maybe use the `::1` notation to squeeze out a little more perf under the hood."", 'comment_created': datetime.datetime(2020, 8, 26, 3, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 477036381, 'comment_body': 'gone now as misleading and will only return last frame.', 'comment_created': datetime.datetime(2020, 8, 26, 5, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 477041128, 'comment_body': 'I think `traj.tng` should be clear enough.', 'comment_created': datetime.datetime(2020, 8, 26, 5, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 477045895, 'comment_body': 'There is a fair bit of junk hanging around to support the old API. Should I make a separate PR to strip it all out or clean up here?', 'comment_created': datetime.datetime(2020, 8, 26, 5, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 478203589, 'comment_body': 'I think new structure resolves this, but would be grateful if you could take a quick peek. :)', 'comment_created': datetime.datetime(2020, 8, 27, 7, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 478210231, 'comment_body': 'no problem, I think that is a sensible pattern for access?', 'comment_created': datetime.datetime(2020, 8, 27, 7, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 479854063, 'comment_body': 'we are now both reading in place and returning the value ie:\r\n\r\n`positions = ts.get_positions(positions)`\r\n\r\nand \r\n\r\n`ts.get_positions(positions)`\r\n\r\nboth work.\r\n\r\nIs this how we want the final product to look, or would we prefer just a single method to be canonical?', 'comment_created': datetime.datetime(2020, 8, 31, 2, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 479884987, 'comment_body': 'or do we want to rename the getter as well :)', 'comment_created': datetime.datetime(2020, 8, 31, 4, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 480244551, 'comment_body': 'I like the returning values in addition to the in-place. \r\n\r\nI can live with `get_*()` if you feel that this is the best name. After all, this is more your code than mine ;-).', 'comment_created': datetime.datetime(2020, 8, 31, 16, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480245922, 'comment_body': 'Additionally', 'comment_created': datetime.datetime(2020, 8, 31, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480246027, 'comment_body': 'e.g.,', 'comment_created': datetime.datetime(2020, 8, 31, 16, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480246488, 'comment_body': 'link \r\n```reST\r\n:class:`TNGFileIterator`\r\n```', 'comment_created': datetime.datetime(2020, 8, 31, 16, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480251743, 'comment_body': ""Just a question: is there a way to iterate over all steps that contain any data, e.g., if block_strides for positions are 100 and 1000 for velocities then we would automatically do stride 100 and for 9 out of 10 steps, we just don't get velocity data.\r\n\r\nMore weirdly, when positions are saved every 5 steps and velocities every 11 steps then we would get only a few steps that have both (at step = n * 5 * 11, n = 0, 1, ,2, ...).\r\n"", 'comment_created': datetime.datetime(2020, 8, 31, 16, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480252741, 'comment_body': 'Are there any specific exceptions that the user needs to be aware of?\r\n\r\nAre exceptions documented in the classes (sorry, I am short on time reviewing this)', 'comment_created': datetime.datetime(2020, 8, 31, 16, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480254406, 'comment_body': ""I think you're mixing doc styles here. I the `:rtype` line is superfluous."", 'comment_created': datetime.datetime(2020, 8, 31, 16, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480256371, 'comment_body': 'Is this supposed to be \r\n```reST\r\n:data:`TNG_CRITICAL`\r\n```\r\nNot clear from the docs how the user can check for the status code.', 'comment_created': datetime.datetime(2020, 8, 31, 16, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480256962, 'comment_body': 'remove? is the frame tuple still used?', 'comment_created': datetime.datetime(2020, 8, 31, 16, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480257816, 'comment_body': 'globals... really?', 'comment_created': datetime.datetime(2020, 8, 31, 16, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480258714, 'comment_body': 'What other data can be read? Explain velocity and forces. ', 'comment_created': datetime.datetime(2020, 8, 31, 16, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480258832, 'comment_body': 'Include box vectors in example.', 'comment_created': datetime.datetime(2020, 8, 31, 16, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480259688, 'comment_body': 'What happens if you go to a integrator step that does not contain data? How to deal with this case?', 'comment_created': datetime.datetime(2020, 8, 31, 16, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480260447, 'comment_body': ""Why numpy here? You're not using it (and presumably assume that `positions` is already allocated)"", 'comment_created': datetime.datetime(2020, 8, 31, 16, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480489869, 'comment_body': ""The easiest solution I thought of was to stride over the greatest common divisor of the strides.\r\nThis is already computed as `TngFileIterator._gcd`, but I haven't made use of it yet.\r\n\r\nDoes that sound reasonable?"", 'comment_created': datetime.datetime(2020, 9, 1, 0, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 480529744, 'comment_body': 'The GCD(5, 11) = 1 so what does this mean in terms of iterating? We get a lot of empty steps?', 'comment_created': datetime.datetime(2020, 9, 1, 1, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480537895, 'comment_body': 'For the likely more common case of 10,100 the GCD sounds pretty sane, i.e., when GCD(m, n) == m or n. In the case where we get empty steps then the calling code will need to decide what to do (such as not returning a step) and that will be rather costly.\r\n\r\nI\'d much prefer if TNGFileIterator never returned empty frames. It tags frames so user code will just have to work with the frame metadata.\r\n\r\nFrom MDAnalysis\' perspective I also want to know what `len(tng)` should mean; I think the only sensible interpretation is ""total number of non-empty frames"" (like TRR).\r\n\r\nAny opinions @richardjgowers @jbarnoud @kain88-de ?', 'comment_created': datetime.datetime(2020, 9, 1, 1, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480563529, 'comment_body': 'I will remove the old API once we get this one in I think?', 'comment_created': datetime.datetime(2020, 9, 1, 1, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 480579048, 'comment_body': 'Working with steps is closer to the way the format itself works. My suggestion is that working in the original units of the format is better, we can then provide the user the tools they need to iterate with the minimum of wasted steps (obviously with big improvements in docs required).\r\n\r\nI am happy to change it up though! No dramas.\r\n\r\nI see where your coming from in regards to the length, would this mean the total number of frames with any block attached would become the length? This would still result in blank reads although a lot fewer. The other option is to have a separate length in each block ""dimension"".\r\n\r\nOpen to suggestion!', 'comment_created': datetime.datetime(2020, 9, 1, 1, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 480581202, 'comment_body': 'see discussion above', 'comment_created': datetime.datetime(2020, 9, 1, 1, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 481254624, 'comment_body': 'I see your point of pytng working with the underlying format. So you convinced me that `TNGFileIterator` can just keep doing what it is currently doing. It\'s potentially cumbersome from a user\'s perspective but perhaps we address usability after correctness.\r\n\r\nSo my primary concern for thus concern is simply documentation and giving examples how to use what\'s presently available and mention potential problems and short-comings. We\'ll have to address usability in another issue/PR (like len and iterating efficiently).\r\n\r\nFor right now, stating what happens when you hit a step with no data blocks attached (""blank read"" — is this something we would want to include in your very useful glossary?) would be important. Also being clear about how flexible TNG is and that this brings challenges in processing the data, e.g., example with strides that have small GCDs. \r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 9, 1, 16, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 484007424, 'comment_body': 'Hey @orbeckst I have tried to clear this up a bit and add more info in the docs.\r\n\r\nFor blank reads we currently fill the array with np.nan. Not the most elegant solution but gets the point across.  I have added an example that demonstrates this to the docs.', 'comment_created': datetime.datetime(2020, 9, 6, 1, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484118127, 'comment_body': 'Is the use of the low-level `np.ndarray` instantiator actually required instead of `np.array` or chosen because of the convenience of providing the shape directly?\r\n\r\nI think the canonical suggestion would be to use `np.empty(shape=(tng.n_atoms, 3), dtype=np.float32`).\r\n\r\n', 'comment_created': datetime.datetime(2020, 9, 6, 21, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484118584, 'comment_body': 'typo ""effectivley""', 'comment_created': datetime.datetime(2020, 9, 6, 22, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484118757, 'comment_body': 'In simpler terms this means that PyTNG does not support trajectories where the number of particles varies between frames?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484118898, 'comment_body': ""One of the selling points of the TNG format when it was originally announced was that we wouldn't have to worry about keeping track of separate topology and trajectory files. Is the plan for MDAnalysis to eventually support a single TNG file as the source of both topology and trajectory?"", 'comment_created': datetime.datetime(2020, 9, 6, 22, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484119820, 'comment_body': '`np.empty` vs. the low-level instantiator?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484120081, 'comment_body': 'ok, so it looks like you can use the high-level NumPy array instantiators just fine then', 'comment_created': datetime.datetime(2020, 9, 6, 22, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484120237, 'comment_body': 'is it worth parametrizing the indices tested to include a `-1` for reverse index support to access the last element?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484120328, 'comment_body': 'will `-1`, `-9` indices work above as well?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484120623, 'comment_body': 'Is there a test for handling ""invalid"" `dtype` for the array used to store the data? If you feed in `np.complex128` or a unicode type or something?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484121254, 'comment_body': 'To clarify, when it says the shape should be `(n_atoms, n_values_per_frame)` is that different from `(n_atoms, ndim)`? I think when I was reading through the examples at the start I was under the impression this was the number of dims? Maybe it is meant to be the same thing.', 'comment_created': datetime.datetime(2020, 9, 6, 22, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484121426, 'comment_body': 'As I was looking through the tests I was wondering what the supported dtypes for these input arrays might be, and if an exception would be raised for i.e., non-numeric dtypes, etc.\r\n\r\nLooking farther down below--is this all routed through the dtype check in `get_blockid()` then?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484122503, 'comment_body': ""It certainly looks cleaner than the hard copy from before; I'll mark as resolved."", 'comment_created': datetime.datetime(2020, 9, 6, 22, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484134114, 'comment_body': 'Ok noted! ', 'comment_created': datetime.datetime(2020, 9, 7, 0, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484135098, 'comment_body': 'For sure thats the way forward. Issue raised to this effect in #44.\r\n\r\nThe file contains the whole gmx mtop, so would probably be able to leverage or adapt some existing MDA code. ', 'comment_created': datetime.datetime(2020, 9, 7, 0, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484137971, 'comment_body': 'I have tried to clarify available dtypes in the docs.\r\n\r\nYes you are right it all passes through that dtype check, and an exception is raised if incorrect. ', 'comment_created': datetime.datetime(2020, 9, 7, 0, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484141266, 'comment_body': 'Negative indices not currently supported. I should add them in.\r\n\r\nIs there a canonical way to do that with an Iterator or should I implement my own version?', 'comment_created': datetime.datetime(2020, 9, 7, 1, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484143203, 'comment_body': 'I think meant to be the same thing.\r\n\r\nI think name `n_values_per_frame` (used in the library itself) is meant to provide the idea that for non-particle dependent blocks e.g box vectors we should expect that many values.\r\n\r\nOpen to changing if you think it would be clearer :)', 'comment_created': datetime.datetime(2020, 9, 7, 1, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 485261000, 'comment_body': 'now they will.:)', 'comment_created': datetime.datetime(2020, 9, 9, 0, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 485261098, 'comment_body': 'Fixed for proper wraparound on the iterator.', 'comment_created': datetime.datetime(2020, 9, 9, 0, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 485272528, 'comment_body': 'Do you mean it should be removed as part of this PR or that once this PR is in you can work on other things to eventually remove it?', 'comment_created': datetime.datetime(2020, 9, 9, 0, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485273779, 'comment_body': ""Is processing np.nan expensive? \r\n\r\nIn any case, I don't have a better idea right away (I guess we can't temporarily set the whole array to NULL or None?) Is there a way for calling code to quickly learn what data are available – is it just `np.all(np.isnan())`, which would be expensive? Could you add an example that shows how calling code can find out efficiently which data it can pull out? "", 'comment_created': datetime.datetime(2020, 9, 9, 0, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485274772, 'comment_body': ""The example above is for the simple case when the strides coincide. That's good to introduce the basics.\r\n\r\n~Now add an example where the strides differ. If I don't know how to do this I have no idea how write a Reader for e.g. MDA.~ EDIT: I see that this had already been included."", 'comment_created': datetime.datetime(2020, 9, 9, 0, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485275202, 'comment_body': 'Stay consistent... I was confused ""What, this one returns a value and the other does in place?"" until I read the comment. Just make both code examples ""in place"" and then show in the comments the return value form.', 'comment_created': datetime.datetime(2020, 9, 9, 0, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485276431, 'comment_body': 'This is the example that I asked for in an earlier comment (when I hadn\'t seen this one). \r\n\r\nThe question remains how expensive `np.all(np.isnan(positions))` is. Doesn\'t the TNG iterator ""know"" that it filled the array with NaNs and couldn\'t it set a flag that could be queried by calling code? Then we wouldn\'t even have to fill the array, calling code would just have to check the flag.', 'comment_created': datetime.datetime(2020, 9, 9, 1, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485277118, 'comment_body': 'Add documentation, e.g. saying that standard Python slices are supported.\r\n\r\nAre `slice()` objects also supported?', 'comment_created': datetime.datetime(2020, 9, 9, 1, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485277968, 'comment_body': ""Sorry should have been clearer.\r\n\r\nI'll remove the old API in a separate PR once this PR is merged. There is a lot of stuff that can be cleaned up but we have to remove it all at once so it can all still compile."", 'comment_created': datetime.datetime(2020, 9, 9, 1, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 485283293, 'comment_body': 'Thank you!', 'comment_created': datetime.datetime(2020, 9, 9, 1, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485296260, 'comment_body': ""I can add a query-able flag on the integrator step, or alternatively we can possible return a `NamedTuple` with the read status contained as one of the elements.\r\n\r\n I'll play with a few options :)"", 'comment_created': datetime.datetime(2020, 9, 9, 2, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 486056352, 'comment_body': ""There is now a query-able flag for the success of the last read in `CurrentIntegratorStep.read_success`. Open to other suggestions :)\r\n\r\nI think we should still fill the target array with `np.nan` for blank reads, otherwise the current contents of the target array will be the last read step which is potentially misleading when iterating.\r\n\r\nI'll do some timings to see how costly filling with `np.nan` is. \r\n\r\n"", 'comment_created': datetime.datetime(2020, 9, 10, 4, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 486492158, 'comment_body': 'Explain what ""successful"" means. In particular, can it fail because (1) EOF, (2) file corruption, (3) no data stored for the step? Are these all equally unsuccessful?\r\n\r\nComment on reST: use double-backticks to format as code. Single backtick indicates a role in reST/sphinx (such as \r\n```reST\r\nThis indicates a class :class:`Universe` with the "":class:"" role.\r\nIf I write `Universe` then it assumes the default role (whatever that is).\r\nTo explicitly mark up code use double back-ticks, e.g., ``u = mda.Universe(...)``, or ``(True != False) == True`` is ``True``.\r\n```\r\n\r\nand it just uses the default role', 'comment_created': datetime.datetime(2020, 9, 10, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 486492887, 'comment_body': ""I'd be curious about the penalty for filling the array. It seems wasteful to do."", 'comment_created': datetime.datetime(2020, 9, 10, 16, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 486494677, 'comment_body': 'In MDA we have `has_positions`, `has_velocities`, `has_forces` flags on `Timesteps`. Would it make sense to have a bit array for all content in TNG trajectory that, for each queried step, just has a True or False for content present?', 'comment_created': datetime.datetime(2020, 9, 10, 16, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 487650731, 'comment_body': 'sorry for delay, will get to this asap.', 'comment_created': datetime.datetime(2020, 9, 14, 4, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 488381415, 'comment_body': ""Makes sense and could be part of enhancements surrounding iteration. I'll raise an issue."", 'comment_created': datetime.datetime(2020, 9, 15, 4, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 488382772, 'comment_body': 'see #47 ', 'comment_created': datetime.datetime(2020, 9, 15, 4, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 488822008, 'comment_body': 'long line and ""exception"", ""indicates"" (spell check ;-) )', 'comment_created': datetime.datetime(2020, 9, 15, 17, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': 'b02e53d94243e974d770ad982e397f1611a029cb', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe0e7b25c9e03c71fc6f5851aadc814c4e0a11b7', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3548ae1a5205168e18d0509ccea1959ca309fab', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03903f1bfe3928c60f41ddc975a77ec575e4c102', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb1801602bc958f99c772df456944f27b415ca72', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a371b4a570cf322a4b79abea5b04d8e9ee84f97', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '210bb6c2c58111fec011d700d07800984e941fcf', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1f2b4d920f52ae9fba0a6b3454496da37a1281', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a6d5b90d089e1f98d542e4675a1605a219cbef', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87cc253779646065944b0ac08c1529de788fe6c7', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1b5390bf61efec2d360f9ab1086ff18a983f3e1', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d993f97d24879812517adadc2182bc2359db15', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d5cd7b3984b3d1a2cf21bdc40b389728ea5ba98', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d15462497187901d3f7d9a485914d9137d01200', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8115161f7c8fecada316ba26d49015c60f5e64', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9531aaacd1192d096f78d12c1efb9be44a885845', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e479168b029dcab60579ffa931916db2ffa712d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b3ba1f4a21d89a098c5e2d6c4c4583d8caf3d3d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14b4a44a44150d7f6db9a6c3e6ad17dcad35ec5c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730521a750982e97570f15b6cc717b49da3e3290', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136819d7e173f08fb6724fc2f6c0efa478a77749', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157b8cfc5b878a11f3f3da40263e9f9c96273ba8', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c688af83b11852dd5aefedee5fefd6dfb6f76e51', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd22685ce98d8121fb52f6b9552eb9e9a6624011b', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd22a8283f84550267f334ae7fe9e68cd98dcb17e', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee00514d77abd1849efb7ebfd3d53f123a6fcd6', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7af2bd57f3a92c2acce9c9eaf04d868de614a829', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce0fa735aedd2f6ab2434eeab772cb38b04ad22', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b65818aec0456fee30daed532aa271363088e83', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba09525dcd36c5b4700da90dfe0e39684768f8f2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed0841665150f40de4674c8ff7bdd84a8a80548', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aac3320c5b64e47496b0685fa4fab3549369c2fc', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53eece87bd669fe1381d1a80670128e4e963189e', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331a2b764bc1eeaac662003931855afccbd40384', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d796d8ec594f5e999aedf79468d9ee1beabb265', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4de29ce652cbdde5d2471fbb07599e4dbc37317d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feef92e4b61eee627c97641239bacdc5fc606f9', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a1d857e58c6a718b6de19b2d5d60c40843fe8c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a721b0f465c955672513950742c9feab93d55823', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '378aa932a13a546d326eda73b481bbf9490157fb', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '215b722fbc00900d522418ecf4a984ae2a7a8cb3', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd98f3fa00b8d3896958286272913b27d979e119', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76ffbae3e8e1036e8603b1835cc11ecafc648bf', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e0b220cf9e6f0d9c9384264c102ccb1d8bf0e3', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4165d9172ef12690c9736069a6d7af5c7380aa42', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c358e29a798089de75e8cf3d998b8fdc9fc431a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf93d2c1f8c44604c1b3d2dfbcc765914c952c4', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '192d70a49259c30797e8ee8dca4e15c7c05998af', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0aa8555ce2fdc1c162d62324314f05e600b4795', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afec6c05d0686086d8bd0b28f58b0373f29eb35f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0de49c36a0e49b4549226afa9d1b76c1ee01a98d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f912b6d383aa1b8ada715edbead3b0d8c042df2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9691a1f332919a8ed138ae20a1314084cd9c1a06', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae4d51b3bda946177be8ba10df621a60629aea43', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c1f1d18fb452fe930b839e5606b4ce8747f3598', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39e7924ceba506014c0b12a987645ab02867e4d5', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a53830ea7d4ae7800b32384b614195f51f01a6', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '998f2abb0c2903ab1066735e7d26372f6015c187', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '275bf546227ff4b3fb5cc8dd6db6435fa096ecd9', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68532f1c9081d02d44119791bc2755491668cdb', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03527bbdb0933a0c4094c017f7310b14ca31ce29', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5bc0a4c48a9aa267622da2fc04960e94eef1675', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967416e84a9ae1e44aa5875934ac15378b7019b5', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c36c37f7e7b9866c82395ea0dad4cee2ec15ae23', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bad7fa2baf036d2baabbb64978eec223ad28cc3', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c21f19c259eb8d483bd7a92410bf779697de5aa', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e19a497f94840feb83f4d25282958a80f56461a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21213f9469819c072fe29badadc4cb359dd06178', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb33bd48374f183697747fd4393067cb23e284ff', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '022d957fbc68a737c1630783716d15ef741683db', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6338838a3c2e717f57a2ecdd5919993779756aa2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98d1c1d0eb02eca7a233690c4180f72f1f887d04', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a536089890343c4d9dbb0f48b23170644f7c88a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}]",Hugo MacDermott-Opeskin,24581003,hugomacdermott@gmail.com,User,,99,,128,73
468618155,Change BlockReader API,"This is an updated version of the CythonBlockReader API, incorporating some changes that @richardjgowers  suggested.

- Primary change is that you now need to provide a numpy array to read block data into rather than it being tied to the block instance.

Still not quite complete as I need to improve the array copying and add some memoryviews.",True,38,https://api.github.com/repos/MDAnalysis/pytng/pulls/38,https://github.com/MDAnalysis/pytng/pull/38,closed,895,508,6,73,11,104,0,0,[],2020-08-17 06:28:23+00:00,2020-09-15 23:25:44+00:00,2566641.0,"29 days, 16:57:21","[{'comment_id': 475993854, 'comment_body': 'Add text above or below stating that you need to pre-allocate the array and that `tng.current_integrator_step.get_pos(positions)` fills the array. \r\n\r\nFor consistency, can you make `tng.current_integrator_step.get_pos()` also return  (reference to) the array? Otherwise `get` sounds wrong and it should be something like `load_pos_into()`.', 'comment_created': datetime.datetime(2020, 8, 25, 0, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475995050, 'comment_body': 'Use reST markup\r\n```reST\r\n:attr:`TNGFileIterator.current_integrator_step`\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475995222, 'comment_body': 'getter method', 'comment_created': datetime.datetime(2020, 8, 25, 0, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475995608, 'comment_body': 'terrible name for a trajectory, maybe ""traj.tng"" for consistency', 'comment_created': datetime.datetime(2020, 8, 25, 0, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475998190, 'comment_body': 'Is the `len(tng)` the number of integrator time steps?\r\n\r\nExplain what `len(tng)`, especially as this is really odd in the context of all other readers. I see that one reason for wrapping tng into MDAnalysis is to make it so that users do not need to know the internals of TNG but if anyone were to write a reader for MDA then they should have this information without having to resort to source code reading.', 'comment_created': datetime.datetime(2020, 8, 25, 0, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 475998707, 'comment_body': 'Does TNG require strides to be regular? Add a note.', 'comment_created': datetime.datetime(2020, 8, 25, 0, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476000103, 'comment_body': ""Comments that `read_step(ts)` and `tng.current_integrator_step.get_pos(positions)` do in-place updates of data structures (namely `tng.current_integrator_step` and the `positions` array).\r\n\r\nAs said above, I am not a fan of the name `get_pos()` when there's only in-place operation, at least in a python context it seems odd. Do @richardjgowers @kain88-de @jbarnoud have an opinion?"", 'comment_created': datetime.datetime(2020, 8, 25, 0, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476001177, 'comment_body': 'What does this do?? What is the shape of `positions`? Does it read _all_ pos-frames at once?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476001701, 'comment_body': 'Or can we use trajectories from the tests?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476004355, 'comment_body': 'remove prints?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476004680, 'comment_body': 'seek -> read_step', 'comment_created': datetime.datetime(2020, 8, 25, 0, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476005775, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476006021, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476008053, 'comment_body': 'Are we using old-style markup (like here) or NumPy style (as further below and in MDAnalysis)?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476008387, 'comment_body': 'This is NumPy-style markup. Should be consistent.', 'comment_created': datetime.datetime(2020, 8, 25, 0, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476008761, 'comment_body': 'Can you echo the block name here? Makes debugging a lot easier...', 'comment_created': datetime.datetime(2020, 8, 25, 0, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476009137, 'comment_body': 'Maybe a SeeAlso for a method to find out what block_id are present?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476009650, 'comment_body': 'retrieves', 'comment_created': datetime.datetime(2020, 8, 25, 0, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476010702, 'comment_body': 'Could this function return `self.current_step`? It seems more natural to do\r\n```python\r\ntngstep = tng.read_step(n)\r\ntngstep.get_pos(positions)\r\n```\r\nor is there a problem with this approach?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476012675, 'comment_body': 'retrieve', 'comment_created': datetime.datetime(2020, 8, 25, 0, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476014433, 'comment_body': ""I expect `get_*()` methods to return a value but maybe that's the wrong expectation for the TNG library. \r\n\r\nCould we add return values to all getters?"", 'comment_created': datetime.datetime(2020, 8, 25, 0, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476015128, 'comment_body': 'What are the box vectors?\r\n\r\nWhat is the _meaning_ of the 9 numbers? How do you reconstruct the box vectors?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476015462, 'comment_body': 'Can we use `get_positions()`, i.e., full names?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476015577, 'comment_body': 'Can we use `get_velocities()`, i.e., full names?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476016154, 'comment_body': 'Can we _please_ use `get_forces()`, i.e., readable/self-documenting names? \r\n\r\n(Bytes are not _that_ expensive anymore... ;-) )', 'comment_created': datetime.datetime(2020, 8, 25, 0, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476017578, 'comment_body': 'Can you raise a Python exception inside this cython function?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018118, 'comment_body': 'Why returning a status value instead of raising an exception?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018516, 'comment_body': 'exception vs `                 return TNG_CRITICAL`?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018637, 'comment_body': 'remove', 'comment_created': datetime.datetime(2020, 8, 25, 0, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018757, 'comment_body': 'exception vs return TNG_CRITICAL?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476018815, 'comment_body': 'exception vs return TNG_CRITICAL?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476019258, 'comment_body': 'See also below. I mainly want to understand the philosophy here. How is a user supposed to do error handling with the library? Check return values or catch exceptions?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476019607, 'comment_body': 'and => an', 'comment_created': datetime.datetime(2020, 8, 25, 0, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476019967, 'comment_body': 'I assume this sucks as far as performance is concerned?', 'comment_created': datetime.datetime(2020, 8, 25, 0, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 476912384, 'comment_body': 'Correct, perhaps @tylerjereddy would know If this can be done better?\r\n\r\nOther options are:\r\n* tying the C array to a `MemoryWrapper` instance and then using PyArray_SetBaseObject, meaning that we do the memory management for the caller (IMO bad idea).\r\n* Iterate over the C array and put it in the NumPy array (FLOP inefficent)\r\n* ??', 'comment_created': datetime.datetime(2020, 8, 26, 0, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 476913868, 'comment_body': 'My bad, hangover from this being nogil. Ill fix.', 'comment_created': datetime.datetime(2020, 8, 26, 0, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 476914054, 'comment_body': 'Yes as we have GIL here. :)', 'comment_created': datetime.datetime(2020, 8, 26, 0, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 477002143, 'comment_body': 'As simple as it sounds, it is worth trying something similar to `data = np.asarray(data_loc)` here, because that will actually coerce the data to NumPy array [without doing a copy](https://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html#coercion-to-numpy).\r\n\r\nDid you rule that out because `data` is a parameter? I think pass by reference can be made to work without too much trouble in Cython, at least with `cdef`. Similar to this maybe: https://stackoverflow.com/a/21721727/2942522\r\n\r\nMaybe even `data[:, :] = np.asarray..` or similar to avoid a local re-binding of `data`.', 'comment_created': datetime.datetime(2020, 8, 26, 2, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 477003794, 'comment_body': ""Are any of these typed memoryviews going to hold C-contiguous data? You've probably thought of that already, but can maybe use the `::1` notation to squeeze out a little more perf under the hood."", 'comment_created': datetime.datetime(2020, 8, 26, 3, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 477036381, 'comment_body': 'gone now as misleading and will only return last frame.', 'comment_created': datetime.datetime(2020, 8, 26, 5, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 477041128, 'comment_body': 'I think `traj.tng` should be clear enough.', 'comment_created': datetime.datetime(2020, 8, 26, 5, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 477045895, 'comment_body': 'There is a fair bit of junk hanging around to support the old API. Should I make a separate PR to strip it all out or clean up here?', 'comment_created': datetime.datetime(2020, 8, 26, 5, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 478203589, 'comment_body': 'I think new structure resolves this, but would be grateful if you could take a quick peek. :)', 'comment_created': datetime.datetime(2020, 8, 27, 7, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 478210231, 'comment_body': 'no problem, I think that is a sensible pattern for access?', 'comment_created': datetime.datetime(2020, 8, 27, 7, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 479854063, 'comment_body': 'we are now both reading in place and returning the value ie:\r\n\r\n`positions = ts.get_positions(positions)`\r\n\r\nand \r\n\r\n`ts.get_positions(positions)`\r\n\r\nboth work.\r\n\r\nIs this how we want the final product to look, or would we prefer just a single method to be canonical?', 'comment_created': datetime.datetime(2020, 8, 31, 2, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 479884987, 'comment_body': 'or do we want to rename the getter as well :)', 'comment_created': datetime.datetime(2020, 8, 31, 4, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 480244551, 'comment_body': 'I like the returning values in addition to the in-place. \r\n\r\nI can live with `get_*()` if you feel that this is the best name. After all, this is more your code than mine ;-).', 'comment_created': datetime.datetime(2020, 8, 31, 16, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480245922, 'comment_body': 'Additionally', 'comment_created': datetime.datetime(2020, 8, 31, 16, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480246027, 'comment_body': 'e.g.,', 'comment_created': datetime.datetime(2020, 8, 31, 16, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480246488, 'comment_body': 'link \r\n```reST\r\n:class:`TNGFileIterator`\r\n```', 'comment_created': datetime.datetime(2020, 8, 31, 16, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480251743, 'comment_body': ""Just a question: is there a way to iterate over all steps that contain any data, e.g., if block_strides for positions are 100 and 1000 for velocities then we would automatically do stride 100 and for 9 out of 10 steps, we just don't get velocity data.\r\n\r\nMore weirdly, when positions are saved every 5 steps and velocities every 11 steps then we would get only a few steps that have both (at step = n * 5 * 11, n = 0, 1, ,2, ...).\r\n"", 'comment_created': datetime.datetime(2020, 8, 31, 16, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480252741, 'comment_body': 'Are there any specific exceptions that the user needs to be aware of?\r\n\r\nAre exceptions documented in the classes (sorry, I am short on time reviewing this)', 'comment_created': datetime.datetime(2020, 8, 31, 16, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480254406, 'comment_body': ""I think you're mixing doc styles here. I the `:rtype` line is superfluous."", 'comment_created': datetime.datetime(2020, 8, 31, 16, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480256371, 'comment_body': 'Is this supposed to be \r\n```reST\r\n:data:`TNG_CRITICAL`\r\n```\r\nNot clear from the docs how the user can check for the status code.', 'comment_created': datetime.datetime(2020, 8, 31, 16, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480256962, 'comment_body': 'remove? is the frame tuple still used?', 'comment_created': datetime.datetime(2020, 8, 31, 16, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480257816, 'comment_body': 'globals... really?', 'comment_created': datetime.datetime(2020, 8, 31, 16, 51, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480258714, 'comment_body': 'What other data can be read? Explain velocity and forces. ', 'comment_created': datetime.datetime(2020, 8, 31, 16, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480258832, 'comment_body': 'Include box vectors in example.', 'comment_created': datetime.datetime(2020, 8, 31, 16, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480259688, 'comment_body': 'What happens if you go to a integrator step that does not contain data? How to deal with this case?', 'comment_created': datetime.datetime(2020, 8, 31, 16, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480260447, 'comment_body': ""Why numpy here? You're not using it (and presumably assume that `positions` is already allocated)"", 'comment_created': datetime.datetime(2020, 8, 31, 16, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480489869, 'comment_body': ""The easiest solution I thought of was to stride over the greatest common divisor of the strides.\r\nThis is already computed as `TngFileIterator._gcd`, but I haven't made use of it yet.\r\n\r\nDoes that sound reasonable?"", 'comment_created': datetime.datetime(2020, 9, 1, 0, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 480529744, 'comment_body': 'The GCD(5, 11) = 1 so what does this mean in terms of iterating? We get a lot of empty steps?', 'comment_created': datetime.datetime(2020, 9, 1, 1, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480537895, 'comment_body': 'For the likely more common case of 10,100 the GCD sounds pretty sane, i.e., when GCD(m, n) == m or n. In the case where we get empty steps then the calling code will need to decide what to do (such as not returning a step) and that will be rather costly.\r\n\r\nI\'d much prefer if TNGFileIterator never returned empty frames. It tags frames so user code will just have to work with the frame metadata.\r\n\r\nFrom MDAnalysis\' perspective I also want to know what `len(tng)` should mean; I think the only sensible interpretation is ""total number of non-empty frames"" (like TRR).\r\n\r\nAny opinions @richardjgowers @jbarnoud @kain88-de ?', 'comment_created': datetime.datetime(2020, 9, 1, 1, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 480563529, 'comment_body': 'I will remove the old API once we get this one in I think?', 'comment_created': datetime.datetime(2020, 9, 1, 1, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 480579048, 'comment_body': 'Working with steps is closer to the way the format itself works. My suggestion is that working in the original units of the format is better, we can then provide the user the tools they need to iterate with the minimum of wasted steps (obviously with big improvements in docs required).\r\n\r\nI am happy to change it up though! No dramas.\r\n\r\nI see where your coming from in regards to the length, would this mean the total number of frames with any block attached would become the length? This would still result in blank reads although a lot fewer. The other option is to have a separate length in each block ""dimension"".\r\n\r\nOpen to suggestion!', 'comment_created': datetime.datetime(2020, 9, 1, 1, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 480581202, 'comment_body': 'see discussion above', 'comment_created': datetime.datetime(2020, 9, 1, 1, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 481254624, 'comment_body': 'I see your point of pytng working with the underlying format. So you convinced me that `TNGFileIterator` can just keep doing what it is currently doing. It\'s potentially cumbersome from a user\'s perspective but perhaps we address usability after correctness.\r\n\r\nSo my primary concern for thus concern is simply documentation and giving examples how to use what\'s presently available and mention potential problems and short-comings. We\'ll have to address usability in another issue/PR (like len and iterating efficiently).\r\n\r\nFor right now, stating what happens when you hit a step with no data blocks attached (""blank read"" — is this something we would want to include in your very useful glossary?) would be important. Also being clear about how flexible TNG is and that this brings challenges in processing the data, e.g., example with strides that have small GCDs. \r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 9, 1, 16, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 484007424, 'comment_body': 'Hey @orbeckst I have tried to clear this up a bit and add more info in the docs.\r\n\r\nFor blank reads we currently fill the array with np.nan. Not the most elegant solution but gets the point across.  I have added an example that demonstrates this to the docs.', 'comment_created': datetime.datetime(2020, 9, 6, 1, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484118127, 'comment_body': 'Is the use of the low-level `np.ndarray` instantiator actually required instead of `np.array` or chosen because of the convenience of providing the shape directly?\r\n\r\nI think the canonical suggestion would be to use `np.empty(shape=(tng.n_atoms, 3), dtype=np.float32`).\r\n\r\n', 'comment_created': datetime.datetime(2020, 9, 6, 21, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484118584, 'comment_body': 'typo ""effectivley""', 'comment_created': datetime.datetime(2020, 9, 6, 22, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484118757, 'comment_body': 'In simpler terms this means that PyTNG does not support trajectories where the number of particles varies between frames?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484118898, 'comment_body': ""One of the selling points of the TNG format when it was originally announced was that we wouldn't have to worry about keeping track of separate topology and trajectory files. Is the plan for MDAnalysis to eventually support a single TNG file as the source of both topology and trajectory?"", 'comment_created': datetime.datetime(2020, 9, 6, 22, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484119820, 'comment_body': '`np.empty` vs. the low-level instantiator?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484120081, 'comment_body': 'ok, so it looks like you can use the high-level NumPy array instantiators just fine then', 'comment_created': datetime.datetime(2020, 9, 6, 22, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484120237, 'comment_body': 'is it worth parametrizing the indices tested to include a `-1` for reverse index support to access the last element?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484120328, 'comment_body': 'will `-1`, `-9` indices work above as well?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484120623, 'comment_body': 'Is there a test for handling ""invalid"" `dtype` for the array used to store the data? If you feed in `np.complex128` or a unicode type or something?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484121254, 'comment_body': 'To clarify, when it says the shape should be `(n_atoms, n_values_per_frame)` is that different from `(n_atoms, ndim)`? I think when I was reading through the examples at the start I was under the impression this was the number of dims? Maybe it is meant to be the same thing.', 'comment_created': datetime.datetime(2020, 9, 6, 22, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484121426, 'comment_body': 'As I was looking through the tests I was wondering what the supported dtypes for these input arrays might be, and if an exception would be raised for i.e., non-numeric dtypes, etc.\r\n\r\nLooking farther down below--is this all routed through the dtype check in `get_blockid()` then?', 'comment_created': datetime.datetime(2020, 9, 6, 22, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484122503, 'comment_body': ""It certainly looks cleaner than the hard copy from before; I'll mark as resolved."", 'comment_created': datetime.datetime(2020, 9, 6, 22, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tylerjereddy', 'type': 'User'}, {'comment_id': 484134114, 'comment_body': 'Ok noted! ', 'comment_created': datetime.datetime(2020, 9, 7, 0, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484135098, 'comment_body': 'For sure thats the way forward. Issue raised to this effect in #44.\r\n\r\nThe file contains the whole gmx mtop, so would probably be able to leverage or adapt some existing MDA code. ', 'comment_created': datetime.datetime(2020, 9, 7, 0, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484137971, 'comment_body': 'I have tried to clarify available dtypes in the docs.\r\n\r\nYes you are right it all passes through that dtype check, and an exception is raised if incorrect. ', 'comment_created': datetime.datetime(2020, 9, 7, 0, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484141266, 'comment_body': 'Negative indices not currently supported. I should add them in.\r\n\r\nIs there a canonical way to do that with an Iterator or should I implement my own version?', 'comment_created': datetime.datetime(2020, 9, 7, 1, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 484143203, 'comment_body': 'I think meant to be the same thing.\r\n\r\nI think name `n_values_per_frame` (used in the library itself) is meant to provide the idea that for non-particle dependent blocks e.g box vectors we should expect that many values.\r\n\r\nOpen to changing if you think it would be clearer :)', 'comment_created': datetime.datetime(2020, 9, 7, 1, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 485261000, 'comment_body': 'now they will.:)', 'comment_created': datetime.datetime(2020, 9, 9, 0, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 485261098, 'comment_body': 'Fixed for proper wraparound on the iterator.', 'comment_created': datetime.datetime(2020, 9, 9, 0, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 485272528, 'comment_body': 'Do you mean it should be removed as part of this PR or that once this PR is in you can work on other things to eventually remove it?', 'comment_created': datetime.datetime(2020, 9, 9, 0, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485273779, 'comment_body': ""Is processing np.nan expensive? \r\n\r\nIn any case, I don't have a better idea right away (I guess we can't temporarily set the whole array to NULL or None?) Is there a way for calling code to quickly learn what data are available – is it just `np.all(np.isnan())`, which would be expensive? Could you add an example that shows how calling code can find out efficiently which data it can pull out? "", 'comment_created': datetime.datetime(2020, 9, 9, 0, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485274772, 'comment_body': ""The example above is for the simple case when the strides coincide. That's good to introduce the basics.\r\n\r\n~Now add an example where the strides differ. If I don't know how to do this I have no idea how write a Reader for e.g. MDA.~ EDIT: I see that this had already been included."", 'comment_created': datetime.datetime(2020, 9, 9, 0, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485275202, 'comment_body': 'Stay consistent... I was confused ""What, this one returns a value and the other does in place?"" until I read the comment. Just make both code examples ""in place"" and then show in the comments the return value form.', 'comment_created': datetime.datetime(2020, 9, 9, 0, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485276431, 'comment_body': 'This is the example that I asked for in an earlier comment (when I hadn\'t seen this one). \r\n\r\nThe question remains how expensive `np.all(np.isnan(positions))` is. Doesn\'t the TNG iterator ""know"" that it filled the array with NaNs and couldn\'t it set a flag that could be queried by calling code? Then we wouldn\'t even have to fill the array, calling code would just have to check the flag.', 'comment_created': datetime.datetime(2020, 9, 9, 1, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485277118, 'comment_body': 'Add documentation, e.g. saying that standard Python slices are supported.\r\n\r\nAre `slice()` objects also supported?', 'comment_created': datetime.datetime(2020, 9, 9, 1, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485277968, 'comment_body': ""Sorry should have been clearer.\r\n\r\nI'll remove the old API in a separate PR once this PR is merged. There is a lot of stuff that can be cleaned up but we have to remove it all at once so it can all still compile."", 'comment_created': datetime.datetime(2020, 9, 9, 1, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 485283293, 'comment_body': 'Thank you!', 'comment_created': datetime.datetime(2020, 9, 9, 1, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 485296260, 'comment_body': ""I can add a query-able flag on the integrator step, or alternatively we can possible return a `NamedTuple` with the read status contained as one of the elements.\r\n\r\n I'll play with a few options :)"", 'comment_created': datetime.datetime(2020, 9, 9, 2, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 486056352, 'comment_body': ""There is now a query-able flag for the success of the last read in `CurrentIntegratorStep.read_success`. Open to other suggestions :)\r\n\r\nI think we should still fill the target array with `np.nan` for blank reads, otherwise the current contents of the target array will be the last read step which is potentially misleading when iterating.\r\n\r\nI'll do some timings to see how costly filling with `np.nan` is. \r\n\r\n"", 'comment_created': datetime.datetime(2020, 9, 10, 4, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 486492158, 'comment_body': 'Explain what ""successful"" means. In particular, can it fail because (1) EOF, (2) file corruption, (3) no data stored for the step? Are these all equally unsuccessful?\r\n\r\nComment on reST: use double-backticks to format as code. Single backtick indicates a role in reST/sphinx (such as \r\n```reST\r\nThis indicates a class :class:`Universe` with the "":class:"" role.\r\nIf I write `Universe` then it assumes the default role (whatever that is).\r\nTo explicitly mark up code use double back-ticks, e.g., ``u = mda.Universe(...)``, or ``(True != False) == True`` is ``True``.\r\n```\r\n\r\nand it just uses the default role', 'comment_created': datetime.datetime(2020, 9, 10, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 486492887, 'comment_body': ""I'd be curious about the penalty for filling the array. It seems wasteful to do."", 'comment_created': datetime.datetime(2020, 9, 10, 16, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 486494677, 'comment_body': 'In MDA we have `has_positions`, `has_velocities`, `has_forces` flags on `Timesteps`. Would it make sense to have a bit array for all content in TNG trajectory that, for each queried step, just has a True or False for content present?', 'comment_created': datetime.datetime(2020, 9, 10, 16, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 487650731, 'comment_body': 'sorry for delay, will get to this asap.', 'comment_created': datetime.datetime(2020, 9, 14, 4, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 488381415, 'comment_body': ""Makes sense and could be part of enhancements surrounding iteration. I'll raise an issue."", 'comment_created': datetime.datetime(2020, 9, 15, 4, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 488382772, 'comment_body': 'see #47 ', 'comment_created': datetime.datetime(2020, 9, 15, 4, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 488822008, 'comment_body': 'long line and ""exception"", ""indicates"" (spell check ;-) )', 'comment_created': datetime.datetime(2020, 9, 15, 17, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}]","[{'commit_sha': 'b02e53d94243e974d770ad982e397f1611a029cb', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe0e7b25c9e03c71fc6f5851aadc814c4e0a11b7', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3548ae1a5205168e18d0509ccea1959ca309fab', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03903f1bfe3928c60f41ddc975a77ec575e4c102', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb1801602bc958f99c772df456944f27b415ca72', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a371b4a570cf322a4b79abea5b04d8e9ee84f97', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '210bb6c2c58111fec011d700d07800984e941fcf', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1f2b4d920f52ae9fba0a6b3454496da37a1281', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a6d5b90d089e1f98d542e4675a1605a219cbef', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87cc253779646065944b0ac08c1529de788fe6c7', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1b5390bf61efec2d360f9ab1086ff18a983f3e1', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d993f97d24879812517adadc2182bc2359db15', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d5cd7b3984b3d1a2cf21bdc40b389728ea5ba98', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d15462497187901d3f7d9a485914d9137d01200', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8115161f7c8fecada316ba26d49015c60f5e64', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9531aaacd1192d096f78d12c1efb9be44a885845', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e479168b029dcab60579ffa931916db2ffa712d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b3ba1f4a21d89a098c5e2d6c4c4583d8caf3d3d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14b4a44a44150d7f6db9a6c3e6ad17dcad35ec5c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730521a750982e97570f15b6cc717b49da3e3290', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136819d7e173f08fb6724fc2f6c0efa478a77749', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157b8cfc5b878a11f3f3da40263e9f9c96273ba8', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c688af83b11852dd5aefedee5fefd6dfb6f76e51', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd22685ce98d8121fb52f6b9552eb9e9a6624011b', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd22a8283f84550267f334ae7fe9e68cd98dcb17e', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee00514d77abd1849efb7ebfd3d53f123a6fcd6', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7af2bd57f3a92c2acce9c9eaf04d868de614a829', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce0fa735aedd2f6ab2434eeab772cb38b04ad22', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b65818aec0456fee30daed532aa271363088e83', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba09525dcd36c5b4700da90dfe0e39684768f8f2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed0841665150f40de4674c8ff7bdd84a8a80548', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aac3320c5b64e47496b0685fa4fab3549369c2fc', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53eece87bd669fe1381d1a80670128e4e963189e', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '331a2b764bc1eeaac662003931855afccbd40384', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d796d8ec594f5e999aedf79468d9ee1beabb265', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4de29ce652cbdde5d2471fbb07599e4dbc37317d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0feef92e4b61eee627c97641239bacdc5fc606f9', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a1d857e58c6a718b6de19b2d5d60c40843fe8c', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a721b0f465c955672513950742c9feab93d55823', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '378aa932a13a546d326eda73b481bbf9490157fb', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '215b722fbc00900d522418ecf4a984ae2a7a8cb3', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd98f3fa00b8d3896958286272913b27d979e119', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76ffbae3e8e1036e8603b1835cc11ecafc648bf', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e0b220cf9e6f0d9c9384264c102ccb1d8bf0e3', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4165d9172ef12690c9736069a6d7af5c7380aa42', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c358e29a798089de75e8cf3d998b8fdc9fc431a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abf93d2c1f8c44604c1b3d2dfbcc765914c952c4', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '192d70a49259c30797e8ee8dca4e15c7c05998af', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0aa8555ce2fdc1c162d62324314f05e600b4795', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afec6c05d0686086d8bd0b28f58b0373f29eb35f', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0de49c36a0e49b4549226afa9d1b76c1ee01a98d', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f912b6d383aa1b8ada715edbead3b0d8c042df2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9691a1f332919a8ed138ae20a1314084cd9c1a06', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae4d51b3bda946177be8ba10df621a60629aea43', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c1f1d18fb452fe930b839e5606b4ce8747f3598', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39e7924ceba506014c0b12a987645ab02867e4d5', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a53830ea7d4ae7800b32384b614195f51f01a6', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '998f2abb0c2903ab1066735e7d26372f6015c187', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '275bf546227ff4b3fb5cc8dd6db6435fa096ecd9', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd68532f1c9081d02d44119791bc2755491668cdb', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03527bbdb0933a0c4094c017f7310b14ca31ce29', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5bc0a4c48a9aa267622da2fc04960e94eef1675', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967416e84a9ae1e44aa5875934ac15378b7019b5', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c36c37f7e7b9866c82395ea0dad4cee2ec15ae23', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bad7fa2baf036d2baabbb64978eec223ad28cc3', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c21f19c259eb8d483bd7a92410bf779697de5aa', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e19a497f94840feb83f4d25282958a80f56461a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21213f9469819c072fe29badadc4cb359dd06178', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb33bd48374f183697747fd4393067cb23e284ff', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '022d957fbc68a737c1630783716d15ef741683db', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6338838a3c2e717f57a2ecdd5919993779756aa2', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98d1c1d0eb02eca7a233690c4180f72f1f887d04', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a536089890343c4d9dbb0f48b23170644f7c88a', 'committer_username': 'hmacdope', 'committer_name': 'Hugo MacDermott-Opeskin', 'committer_email': 'hugomacdermott@gmail.com', 'commit_date': datetime.datetime(2016, 12, 15, 4, 40, 54, tzinfo=datetime.timezone.utc)}]",Hugo MacDermott-Opeskin,24581003,hugomacdermott@gmail.com,User,,99,,128,73

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
92180386,pytng,MDAnalysis/pytng,C,5,13,8,7,417,10,14,1,"[{'id': 1171630216, 'number': 102, 'closed': datetime.datetime(2022, 12, 20, 3, 38, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 20, 3, 26, 19, tzinfo=datetime.timezone.utc), 'time_taken': 706.0, 'time_delta': '0:11:46', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1160667015, 'number': 101, 'closed': datetime.datetime(2022, 12, 20, 3, 18, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 12, 11, 52, 34, tzinfo=datetime.timezone.utc), 'time_taken': 660373.0, 'time_delta': '7 days, 15:26:13', 'additions': 68, 'deletions': 17, 'state': 'closed'}, {'id': 1029821390, 'number': 96, 'closed': datetime.datetime(2022, 8, 19, 3, 10, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 18, 10, 33, 33, tzinfo=datetime.timezone.utc), 'time_taken': 59792.0, 'time_delta': '16:36:32', 'additions': 101, 'deletions': 9, 'state': 'closed'}, {'id': 831373533, 'number': 94, 'closed': datetime.datetime(2022, 1, 26, 9, 14, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 25, 11, 47, 43, tzinfo=datetime.timezone.utc), 'time_taken': 77215.0, 'time_delta': '21:26:55', 'additions': 11, 'deletions': 7, 'state': 'closed'}, {'id': 831360188, 'number': 93, 'closed': datetime.datetime(2022, 3, 28, 10, 36, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 25, 11, 30, 31, tzinfo=datetime.timezone.utc), 'time_taken': 5353546.0, 'time_delta': '61 days, 23:05:46', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 742782227, 'number': 87, 'closed': datetime.datetime(2022, 1, 26, 9, 13, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 26, 1, 5, 26, tzinfo=datetime.timezone.utc), 'time_taken': 10570103.0, 'time_delta': '122 days, 8:08:23', 'additions': 30, 'deletions': 15, 'state': 'closed'}, {'id': 742639331, 'number': 86, 'closed': datetime.datetime(2021, 9, 26, 1, 3, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 25, 7, 20, 24, tzinfo=datetime.timezone.utc), 'time_taken': 63787.0, 'time_delta': '17:43:07', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 621654976, 'number': 84, 'closed': datetime.datetime(2021, 4, 23, 0, 33, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 23, 0, 10, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1402.0, 'time_delta': '0:23:22', 'additions': 20, 'deletions': 27, 'state': 'closed'}, {'id': 621051604, 'number': 83, 'closed': datetime.datetime(2021, 4, 22, 14, 22, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 22, 12, 38, 8, tzinfo=datetime.timezone.utc), 'time_taken': 6286.0, 'time_delta': '1:44:46', 'additions': 10168, 'deletions': 12, 'state': 'closed'}, {'id': 620971188, 'number': 82, 'closed': datetime.datetime(2021, 4, 22, 11, 0, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 22, 10, 41, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1169.0, 'time_delta': '0:19:29', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 620748340, 'number': 81, 'closed': datetime.datetime(2021, 4, 22, 5, 52, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 22, 4, 30, 15, tzinfo=datetime.timezone.utc), 'time_taken': 4922.0, 'time_delta': '1:22:02', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 509514852, 'number': 79, 'closed': datetime.datetime(2020, 10, 25, 0, 29, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 25, 0, 26, 24, tzinfo=datetime.timezone.utc), 'time_taken': 164.0, 'time_delta': '0:02:44', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 507172084, 'number': 78, 'closed': datetime.datetime(2020, 10, 21, 0, 33, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 21, 0, 30, 43, tzinfo=datetime.timezone.utc), 'time_taken': 176.0, 'time_delta': '0:02:56', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 505234544, 'number': 77, 'closed': datetime.datetime(2020, 10, 17, 7, 37, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 17, 7, 34, 46, tzinfo=datetime.timezone.utc), 'time_taken': 136.0, 'time_delta': '0:02:16', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 501993863, 'number': 75, 'closed': datetime.datetime(2020, 10, 13, 5, 35, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 13, 5, 31, 27, tzinfo=datetime.timezone.utc), 'time_taken': 220.0, 'time_delta': '0:03:40', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 501991883, 'number': 74, 'closed': datetime.datetime(2020, 10, 17, 1, 55, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 13, 5, 26, 25, tzinfo=datetime.timezone.utc), 'time_taken': 332958.0, 'time_delta': '3 days, 20:29:18', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 501985839, 'number': 73, 'closed': datetime.datetime(2020, 10, 13, 5, 12, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 13, 5, 9, 17, tzinfo=datetime.timezone.utc), 'time_taken': 216.0, 'time_delta': '0:03:36', 'additions': 28, 'deletions': 15, 'state': 'closed'}, {'id': 501078178, 'number': 72, 'closed': datetime.datetime(2020, 10, 11, 4, 43, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 11, 4, 39, 29, tzinfo=datetime.timezone.utc), 'time_taken': 240.0, 'time_delta': '0:04:00', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 501073350, 'number': 71, 'closed': datetime.datetime(2020, 10, 11, 3, 47, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 11, 3, 43, 58, tzinfo=datetime.timezone.utc), 'time_taken': 224.0, 'time_delta': '0:03:44', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 500888147, 'number': 70, 'closed': datetime.datetime(2020, 10, 10, 1, 51, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 10, 1, 48, 33, tzinfo=datetime.timezone.utc), 'time_taken': 172.0, 'time_delta': '0:02:52', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 499228459, 'number': 66, 'closed': datetime.datetime(2020, 10, 7, 12, 56, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 7, 12, 53, 50, tzinfo=datetime.timezone.utc), 'time_taken': 142.0, 'time_delta': '0:02:22', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 498934152, 'number': 64, 'closed': datetime.datetime(2020, 10, 7, 2, 29, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 7, 2, 17, 15, tzinfo=datetime.timezone.utc), 'time_taken': 720.0, 'time_delta': '0:12:00', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 498425517, 'number': 63, 'closed': datetime.datetime(2020, 10, 6, 23, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 6, 10, 13, 23, tzinfo=datetime.timezone.utc), 'time_taken': 46357.0, 'time_delta': '12:52:37', 'additions': 13, 'deletions': 5, 'state': 'closed'}, {'id': 498396500, 'number': 62, 'closed': datetime.datetime(2020, 10, 6, 9, 42, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 6, 9, 24, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1081.0, 'time_delta': '0:18:01', 'additions': 2365, 'deletions': 3, 'state': 'closed'}, {'id': 494832302, 'number': 60, 'closed': datetime.datetime(2020, 10, 6, 5, 3, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 29, 13, 29, 58, tzinfo=datetime.timezone.utc), 'time_taken': 574421.0, 'time_delta': '6 days, 15:33:41', 'additions': 6, 'deletions': 11, 'state': 'closed'}, {'id': 491258457, 'number': 57, 'closed': datetime.datetime(2020, 9, 27, 23, 10, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 23, 0, 18, 8, tzinfo=datetime.timezone.utc), 'time_taken': 427956.0, 'time_delta': '4 days, 22:52:36', 'additions': 427, 'deletions': 184, 'state': 'closed'}, {'id': 487720291, 'number': 50, 'closed': datetime.datetime(2020, 9, 18, 0, 41, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 16, 4, 44, 40, tzinfo=datetime.timezone.utc), 'time_taken': 158232.0, 'time_delta': '1 day, 19:57:12', 'additions': 2, 'deletions': 515, 'state': 'closed'}, {'id': 471943484, 'number': 42, 'closed': datetime.datetime(2020, 8, 22, 9, 45, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 5, 56, 50, tzinfo=datetime.timezone.utc), 'time_taken': 13704.0, 'time_delta': '3:48:24', 'additions': 12, 'deletions': 5, 'state': 'closed'}, {'id': 468618155, 'number': 38, 'closed': datetime.datetime(2020, 9, 15, 23, 25, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 6, 28, 23, tzinfo=datetime.timezone.utc), 'time_taken': 2566641.0, 'time_delta': '29 days, 16:57:21', 'additions': 895, 'deletions': 508, 'state': 'closed'}, {'id': 466436155, 'number': 37, 'closed': datetime.datetime(2020, 8, 12, 10, 46, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 0, 55, 35, tzinfo=datetime.timezone.utc), 'time_taken': 35452.0, 'time_delta': '9:50:52', 'additions': 4307, 'deletions': 4453, 'state': 'closed'}, {'id': 463057877, 'number': 36, 'closed': datetime.datetime(2020, 8, 4, 23, 25, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 23, 17, 21, tzinfo=datetime.timezone.utc), 'time_taken': 515.0, 'time_delta': '0:08:35', 'additions': 832, 'deletions': 240, 'state': 'closed'}, {'id': 463051654, 'number': 34, 'closed': datetime.datetime(2020, 8, 4, 23, 0, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 22, 56, 26, tzinfo=datetime.timezone.utc), 'time_taken': 265.0, 'time_delta': '0:04:25', 'additions': 240, 'deletions': 832, 'state': 'closed'}, {'id': 455727687, 'number': 32, 'closed': datetime.datetime(2020, 8, 23, 2, 25, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 13, 57, 49, tzinfo=datetime.timezone.utc), 'time_taken': 2636876.0, 'time_delta': '30 days, 12:27:56', 'additions': 1450, 'deletions': 167, 'state': 'closed'}, {'id': 451625219, 'number': 29, 'closed': datetime.datetime(2020, 8, 4, 22, 45, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 2, 1, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1543418.0, 'time_delta': '17 days, 20:43:38', 'additions': 832, 'deletions': 240, 'state': 'closed'}, {'id': 450620326, 'number': 28, 'closed': datetime.datetime(2020, 7, 17, 7, 7, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 0, 15, 8, tzinfo=datetime.timezone.utc), 'time_taken': 24741.0, 'time_delta': '6:52:21', 'additions': 21939, 'deletions': 20077, 'state': 'closed'}]"
