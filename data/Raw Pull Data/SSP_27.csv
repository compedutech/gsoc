pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
960609151,Adding Metropolis Hasting sampler,"# Pull Request Template

This PR aims to add MCMC sampling class to deepchem for later use in Ferminet

Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.22.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2935,https://api.github.com/repos/deepchem/deepchem/pulls/2935,https://github.com/deepchem/deepchem/pull/2935,closed,358,0,3,2,6,14,0,0,[],2022-06-07 16:14:43+00:00,2022-07-01 16:46:32+00:00,2075509.0,"24 days, 0:31:49","[{'comment_id': 901157713, 'comment_body': 'Can you explain what the difference is between them?', 'comment_created': datetime.datetime(2022, 6, 19, 21, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 901158114, 'comment_body': ""Be sure to exactly follow the [numpy formatting guide](https://numpydoc.readthedocs.io/en/latest/format.html#parameters).  There shouldn't be a comma at the end of the first line, and the second line should be indented relative to the first.  Small inconsistencies like that can confuse documentation generators, IDEs, or other tools that are trying to parse the docstrings."", 'comment_created': datetime.datetime(2022, 6, 19, 21, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 901158348, 'comment_body': ""You're mixing tabs and spaces for indentation, which is leading to inconsistent indentation.  Yapf will fix that automatically in most places, but not inside triple-quoted strings."", 'comment_created': datetime.datetime(2022, 6, 19, 21, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 901158521, 'comment_body': ""I don't understand what this means.  How exactly does this value get used?"", 'comment_created': datetime.datetime(2022, 6, 19, 21, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 901158686, 'comment_body': 'Same here.  What exactly is meant by ""the data distribution"", and how is it represented by a list of integers?  And then you say it should have a four dimensional shape, when lists are inherently one dimensional.  Is it actually supposed to be an array?', 'comment_created': datetime.datetime(2022, 6, 19, 21, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 901159064, 'comment_body': 'I think you mean, ""the data for which to compute the harmonic mean""?  Saying it contains ""the data distribution"" is ambiguous, but usually implies some kind of parametric description of the distribution, not the data itself.', 'comment_created': datetime.datetime(2022, 6, 19, 21, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 901159198, 'comment_body': 'Remember to add type annotations (here and in the other methods below).', 'comment_created': datetime.datetime(2022, 6, 19, 21, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 901162109, 'comment_body': 'PyTest assumes any function whose name starts with ""test"" is a test case.  You can rename this to just `f`.', 'comment_created': datetime.datetime(2022, 6, 19, 21, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 902692597, 'comment_body': 'The batch number here I meant was the number of batches of the electrons to take when initialized.', 'comment_created': datetime.datetime(2022, 6, 21, 14, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 902695188, 'comment_body': 'I thought to use it for a general MCMC case, but should change this with respect to the context of electrons and change it electron coordinates. And yes, it should be an array here', 'comment_created': datetime.datetime(2022, 6, 21, 14, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 906852833, 'comment_body': 'Use >> instead of >>> to not trigger the doc test', 'comment_created': datetime.datetime(2022, 6, 26, 18, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 906853085, 'comment_body': 'Make sure to build the docs on your local machine to make sure that the documentation loads correctly. docs/readme.md has some instruction on how to do that. ', 'comment_created': datetime.datetime(2022, 6, 26, 18, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 906853262, 'comment_body': '> single-elctron \r\n\r\nspelling', 'comment_created': datetime.datetime(2022, 6, 26, 18, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 907752410, 'comment_body': 'Remember to rename the class as well as the file.', 'comment_created': datetime.datetime(2022, 6, 27, 20, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}]","[{'commit_sha': '1f8ce17b68d92dd2756b8cbd860c6a14eef91af3', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70c76264ad500e5a428d382890dc8ade2b39779d', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
985057913,Adding KFAC,"# Pull Request Template

## Description

Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.32.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2972,https://api.github.com/repos/deepchem/deepchem/pulls/2972,https://github.com/deepchem/deepchem/pull/2972,closed,677,109,4,13,7,16,0,0,[],2022-07-01 14:56:32+00:00,2022-07-31 17:39:23+00:00,2601771.0,"30 days, 2:42:51","[{'comment_id': 916824006, 'comment_body': 'We should preserve this `import torch` statement here.', 'comment_created': datetime.datetime(2022, 7, 8, 13, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'arunppsg', 'type': 'User'}, {'comment_id': 916825663, 'comment_body': ""This import statement depends on torch module. It is better to keep it's scope local to the test method. In this case, it will `test_KFAC` method"", 'comment_created': datetime.datetime(2022, 7, 8, 13, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'arunppsg', 'type': 'User'}, {'comment_id': 917423753, 'comment_body': ""Was this done by yapf? Doesn't seem right. I'm not sure if all these formatting changes are necessary."", 'comment_created': datetime.datetime(2022, 7, 10, 17, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 917424633, 'comment_body': ""Did you intend to add this?  I don't think you use it anywhere.  Since it requires JAX, it should only be imported inside functions that are marked for JAX only."", 'comment_created': datetime.datetime(2022, 7, 10, 17, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 917424927, 'comment_body': 'yea must have been added by the IDE by default and just slipped in. Will change it', 'comment_created': datetime.datetime(2022, 7, 10, 17, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 918216028, 'comment_body': 'The description line for each argument needs to be indented.  See https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard.', 'comment_created': datetime.datetime(2022, 7, 11, 18, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 918217735, 'comment_body': 'Comments inside functions should start with `#`.  Only docstrings are string literals.', 'comment_created': datetime.datetime(2022, 7, 11, 18, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 918218047, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2022, 7, 11, 18, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 918221019, 'comment_body': 'Logging should be done with the `logging` package rather than `print()` calls.  But is this really intended to be logged, or is it just debugging code that got left in?', 'comment_created': datetime.datetime(2022, 7, 11, 18, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 930500344, 'comment_body': 'Are you sure the indentation here is correct?  These lines are only supposed to be executed when `padding` is a string?', 'comment_created': datetime.datetime(2022, 7, 26, 23, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}]","[{'commit_sha': '8fe1a21d98d8337add1ffc12835c990c08c9050b', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6271504186295d6ac83c4bc1cd3284c51d7bbb5d', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48dd6f13dfd7bf7614d7e88675bd43b4b78c1b51', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b4339bff0eb0fdc7c153b7bea3f97bee430428b', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da4a807cab2bba1b4a199b296ece348c2fd9455', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5def465663050f18ee7f2fe5105efda2195025d1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91325511281e31398882b9c11ff4930e192cec9', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a866ff17de8caaeb34f393e95983beae80fb467a', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda9c0ea1ad5d4bc5df75566d574bd41be33738a', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '569a5be5887308f4fbb59f07a00ce8afaba69bab', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7821f0f4ff81b4932cf11f16d13653fc5d5e967', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1197ff258234e47e9acfcebbf5d59cc3354d5801', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e49fb01720eef2d9ff4a4f4bb253b6768bf4e740', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
985057913,Adding KFAC,"# Pull Request Template

## Description

Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.32.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2972,https://api.github.com/repos/deepchem/deepchem/pulls/2972,https://github.com/deepchem/deepchem/pull/2972,closed,677,109,4,13,7,16,0,0,[],2022-07-01 14:56:32+00:00,2022-07-31 17:39:23+00:00,2601771.0,"30 days, 2:42:51","[{'comment_id': 916824006, 'comment_body': 'We should preserve this `import torch` statement here.', 'comment_created': datetime.datetime(2022, 7, 8, 13, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'arunppsg', 'type': 'User'}, {'comment_id': 916825663, 'comment_body': ""This import statement depends on torch module. It is better to keep it's scope local to the test method. In this case, it will `test_KFAC` method"", 'comment_created': datetime.datetime(2022, 7, 8, 13, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'arunppsg', 'type': 'User'}, {'comment_id': 917423753, 'comment_body': ""Was this done by yapf? Doesn't seem right. I'm not sure if all these formatting changes are necessary."", 'comment_created': datetime.datetime(2022, 7, 10, 17, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 917424633, 'comment_body': ""Did you intend to add this?  I don't think you use it anywhere.  Since it requires JAX, it should only be imported inside functions that are marked for JAX only."", 'comment_created': datetime.datetime(2022, 7, 10, 17, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 917424927, 'comment_body': 'yea must have been added by the IDE by default and just slipped in. Will change it', 'comment_created': datetime.datetime(2022, 7, 10, 17, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 918216028, 'comment_body': 'The description line for each argument needs to be indented.  See https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard.', 'comment_created': datetime.datetime(2022, 7, 11, 18, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 918217735, 'comment_body': 'Comments inside functions should start with `#`.  Only docstrings are string literals.', 'comment_created': datetime.datetime(2022, 7, 11, 18, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 918218047, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2022, 7, 11, 18, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 918221019, 'comment_body': 'Logging should be done with the `logging` package rather than `print()` calls.  But is this really intended to be logged, or is it just debugging code that got left in?', 'comment_created': datetime.datetime(2022, 7, 11, 18, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 930500344, 'comment_body': 'Are you sure the indentation here is correct?  These lines are only supposed to be executed when `padding` is a string?', 'comment_created': datetime.datetime(2022, 7, 26, 23, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}]","[{'commit_sha': '8fe1a21d98d8337add1ffc12835c990c08c9050b', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6271504186295d6ac83c4bc1cd3284c51d7bbb5d', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48dd6f13dfd7bf7614d7e88675bd43b4b78c1b51', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b4339bff0eb0fdc7c153b7bea3f97bee430428b', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da4a807cab2bba1b4a199b296ece348c2fd9455', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5def465663050f18ee7f2fe5105efda2195025d1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91325511281e31398882b9c11ff4930e192cec9', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a866ff17de8caaeb34f393e95983beae80fb467a', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda9c0ea1ad5d4bc5df75566d574bd41be33738a', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '569a5be5887308f4fbb59f07a00ce8afaba69bab', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7821f0f4ff81b4932cf11f16d13653fc5d5e967', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1197ff258234e47e9acfcebbf5d59cc3354d5801', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e49fb01720eef2d9ff4a4f4bb253b6768bf4e740', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
997877110,Adding electron input streams for Ferminet,"# Pull Request Template

## Description
This is a one of several PRs aimed at implementing Ferminet. This PR aims to implement the input stream function
which calculate the input needed for the model (one-electron and two-electron stream).

Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.32.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2997,https://api.github.com/repos/deepchem/deepchem/pulls/2997,https://github.com/deepchem/deepchem/pull/2997,closed,314,6,3,11,3,23,0,0,[],2022-07-15 15:30:16+00:00,2022-08-21 17:58:18+00:00,3205682.0,"37 days, 2:28:02","[{'comment_id': 922286826, 'comment_body': 'What is this needed for?  Adding a new dependency to DeepChem should be done only when absolutely necessary and needs to be carefully considered first.', 'comment_created': datetime.datetime(2022, 7, 15, 15, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 922290500, 'comment_body': 'Yeah I wanted to discuss this over in the developer calls as well. I thought this was necessary as ferminet needs a baseline solution of Hartree-Fock for pre-training which can be obtained from pySCF.', 'comment_created': datetime.datetime(2022, 7, 15, 15, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 922933203, 'comment_body': 'We can add it as a soft dependency, no? \r\n\r\nI think it may be better to use the pyscf conda channel to install over installing through pip.  ', 'comment_created': datetime.datetime(2022, 7, 18, 2, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 928289242, 'comment_body': 'Why not just assigned electron_no as an empty array?', 'comment_created': datetime.datetime(2022, 7, 24, 17, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 933634445, 'comment_body': 'It would be better to use `allclose()` for these assertions.  Very tiny changes, even just running on a different processor, can affect values at this level of precision.', 'comment_created': datetime.datetime(2022, 7, 29, 21, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933634883, 'comment_body': ""It's a list, not a dict."", 'comment_created': datetime.datetime(2022, 7, 29, 21, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933638040, 'comment_body': 'ElectronSampler calls these arguments `seed` and `batch_no`.  We should make the two classes consistent.', 'comment_created': datetime.datetime(2022, 7, 29, 21, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933638931, 'comment_body': 'Are they actually SMILES strings, or just element symbols as the docstring says?', 'comment_created': datetime.datetime(2022, 7, 29, 21, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933926313, 'comment_body': 'it should be just the elements symbol. Now, I have made changes such that works with element symbols', 'comment_created': datetime.datetime(2022, 7, 31, 5, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 933926578, 'comment_body': 'I didn\'t quite understand the ""class consistency"" here 😅. Did u mean like I should remove the seed_no and batch_number here in ferminet class to avoid redundancy? If so, then how will the user set the seed and batch number then?', 'comment_created': datetime.datetime(2022, 7, 31, 5, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 934015378, 'comment_body': 'I think he means the name of the arguments should be changed from `seed_no` to `seed` and `batch_number` to `batch_no`. ', 'comment_created': datetime.datetime(2022, 7, 31, 17, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 934015848, 'comment_body': 'There is no super class for Ferminet to call ', 'comment_created': datetime.datetime(2022, 7, 31, 17, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 934039432, 'comment_body': ""This is a very expensive way to look up the atomic number for a symbol.  A much cheaper way is\r\n\r\n```python\r\ntable = Chem.GetPeriodicTable()\r\n...\r\nnum = table.GetAtomicNumber(i[0])\r\n```\r\n\r\nThe formal charge will always be 0, because you don't specify a formal charge.  But should there be an argument somewhere for the user to specify the total charge of the system?"", 'comment_created': datetime.datetime(2022, 7, 31, 21, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 934039850, 'comment_body': ""Is this meant to be the total spin of the system, or is it something specific to the model?  Normally the user specifies the total spin, since the ground state isn't always the one with the smallest spin."", 'comment_created': datetime.datetime(2022, 7, 31, 21, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 935162518, 'comment_body': ""yeah, this is meant for a single atom, have changed it now to get the user's input"", 'comment_created': datetime.datetime(2022, 8, 2, 6, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 935164077, 'comment_body': ""Have changed it now. and for specifying the formal charge, I have allowed the user to input it with the element string itself, like 'H1+' or 'H1-', where the end of the string defines the charge type and the number before it defines the magnitude. Is this fine?"", 'comment_created': datetime.datetime(2022, 8, 2, 6, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 935947320, 'comment_body': ""Usually the way quantum chemistry programs handle this is that you specify the elements, the total charge, and the spin multiplicity.  See for example https://psicode.org/psi4manual/master/tutorial.html.  By specifying formal charges, you imply that you know where all the electrons are going to end up.  But generally you don't know, and it's the program's job to figure out where they'll go."", 'comment_created': datetime.datetime(2022, 8, 2, 19, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 937356691, 'comment_body': 'Since at the start we sample electrons around each atom, in case of a formal charge, an atom is randomly selected for the charge?(I am unsure on how the program will figure out at the start)', 'comment_created': datetime.datetime(2022, 8, 4, 5, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 945319060, 'comment_body': ""You probably mean spin multiplicity?  Spin isn't an integer."", 'comment_created': datetime.datetime(2022, 8, 14, 17, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 945319399, 'comment_body': ""I'm not familiar with this calculation.  But I'm also not a chemist.  What's the reason for it?"", 'comment_created': datetime.datetime(2022, 8, 14, 17, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 945319966, 'comment_body': ""Adding multiple extra electrons to a single atom probably won't work well.  Highly charged atoms are unusual and tend to have high energies.  For example, if the total charge is -2 you probably should assign -1 to each of the two most electronegative atoms, not -2 to a single atom."", 'comment_created': datetime.datetime(2022, 8, 14, 17, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 947293348, 'comment_body': ""Remember to remove the comment, since it doesn't apply anymore."", 'comment_created': datetime.datetime(2022, 8, 16, 22, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 947293615, 'comment_body': 'Remember to fix this.', 'comment_created': datetime.datetime(2022, 8, 16, 22, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}]","[{'commit_sha': '829bce9357e2231913c4be7a5dd158a30a8fcfb1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fb1fa74f27d2d370dd4e2c985f73f8595ccb82', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7607a36d6e641d075584af1cd5e099b0d1b1bbd1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88b588120fd7944e82ec7883604c05d7c2889049', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0106e4213c440e7b554733c8f16a06418b3a456', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6de2391077c5547a7cdcc663dc35e5bd93977d92', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf501d72833b790fbba9954263a894ccb70f13d', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda7bcfcffb35c9d2b1a65641480bafbbf389492', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fff9c52f3f70ccd46f333cbd58ef4b32a7a5285', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6535995bc49435b297829ca3011aa1232c78094', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22851f0e89fe6033f0f1c46290373226990ebf36', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
1034229230,ferminet model prototype,"# Pull Request Template

## Description
Ferminet model prototype
Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.32.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",False,3039,https://api.github.com/repos/deepchem/deepchem/pulls/3039,https://github.com/deepchem/deepchem/pull/3039,open,1158,730,4,21,5,10,0,0,[],2022-08-23 13:53:44+00:00,,0.0,,"[{'comment_id': 973223194, 'comment_body': 'As Bharath suggested, you can override whatver TorchModel method is preventing you from running ElectronSampler between iterations.', 'comment_created': datetime.datetime(2022, 9, 16, 17, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 973228430, 'comment_body': ""isn't self.spin[0] for up electrons? Is this correct for g_two_down?"", 'comment_created': datetime.datetime(2022, 9, 16, 17, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 973274931, 'comment_body': 'the two_stream tensor consists of both up-spin and down-spin, so we are going to divide it here for calculating g_two_up and g_two_down. So, using "":self.spin[0]"" ensures the index 0 to self.spin[0] will be in up-spin and ""self.spin[0]:"" will ensure the remaining electrons which are down-spin is taken into account', 'comment_created': datetime.datetime(2022, 9, 16, 18, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 991345124, 'comment_body': 'What does p_pre represent?', 'comment_created': datetime.datetime(2022, 10, 10, 14, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 1085653244, 'comment_body': ""Regarding the issue with the training not performing as expected. I see you are setting and modifying a lot of attributes. You should probably limit those attributes to those that are totally necessary. This may be causing unexpected behavior. \r\n\r\nCan you explain why you set the hamiltonian and pre_loss to an empty tensor? I would like to try to understand why the training doesn't seem to be working."", 'comment_created': datetime.datetime(2023, 1, 24, 17, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}]","[{'commit_sha': 'f85dace3a243dc2f764616ca5d9dd22bf932e2bc', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adecd5559302d6080a7ac2649d3ab3d887601251', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '480a06ec1be980fbb29a347ae85ae001270cf529', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '124411adb8545c1a8afbe3744edd8c621646e913', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c84e51d7a8cdbce75a677f98284d05fb12485996', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e2d48a9e645cb5aad9e0e1baf26a6a31162545', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cf6e487f5af01163354eb40c9ed5e756d53feab', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c64263bcbd646fb6e5bee9916e263e8076775129', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b8e2b310c24e9b6f53e2e79cb1ccc213ae1dbcf', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713cbf57dcdd0f1607acdb695d54404ceed94048', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b371182bab428c761f1be89d3303eb439fb7eff1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67e39d2fb978df57137e1e78fcb66f269b7a5abc', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e511cae3a1eb8b344b692b46a77ead875c7da1e4', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3268e175a2de74a0731a39fe03b231c4174fec3', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '818bde132d465d86299aba0f31be9c4a2180d03e', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a1bdd8505bbf0357ed7d64ce37169a063a3e5e', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '840b3719135a6cf497e5b56392eee39e12c33609', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf93fe10687261712d1c7da61c7ea4e9c56cd86a', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2af84c700e6fddd45f670f7b178a0e75d378bbf', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32fe97ba31983e69b5ff5296c6082a84bc29f891', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95cc27cb9efd1d8edbcccf9dc908abdff6b9323c', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
1019599532,[WIP]Ferminet loss function and model prototype,"# Pull Request Template
Adds the loss function for ferminet, which is the hamiltonian function of the wavefunction(kinetic energy + potential energy)

## Description

Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.32.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",False,3027,https://api.github.com/repos/deepchem/deepchem/pulls/3027,https://github.com/deepchem/deepchem/pull/3027,closed,3308,240,40,49,2,2,0,0,[],2022-08-07 17:48:25+00:00,2022-08-23 06:34:41+00:00,1341976.0,"15 days, 12:46:16","[{'comment_id': 951017302, 'comment_body': ""Doing a drive by review, so apologies if you've already discussed this. The usual convention we have is that classes ending in `Model` should inherit from `TorchModel`. So `FerminetModel` should inherit from `TorchModel`. Do you have a `TorchModel` wrapper in place yet?"", 'comment_created': datetime.datetime(2022, 8, 22, 5, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rbharath', 'type': 'User'}, {'comment_id': 952145723, 'comment_body': 'Thanks for the comment, I should interchange the 2 classes name here - Ferminet and FerminetModel', 'comment_created': datetime.datetime(2022, 8, 23, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}]","[{'commit_sha': '584f4167501da27935622b286b160a07597eea3a', 'committer_username': 'arunppsg', 'committer_name': 'Arun', 'committer_email': None, 'commit_date': datetime.datetime(2017, 3, 14, 3, 53, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac32a13b534e9b47d05c52dec91ece8c689e65d8', 'committer_username': 'arunppsg', 'committer_name': 'Arun', 'committer_email': None, 'commit_date': datetime.datetime(2017, 3, 14, 3, 53, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '418a23b15fd0ad925c9eb1bfaf8419041df14eac', 'committer_username': 'shivance', 'committer_name': 'Anshuman Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2019, 6, 12, 13, 29, 28, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d5c6dfaafd7d6ed7477ac10811da34ca5dc50c8', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7336de3733b1d8675dec8b2972c868d4a0fbd219', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '983419c38c27807b101414b0efda9aac422921f9', 'committer_username': 'arunppsg', 'committer_name': 'Arun', 'committer_email': None, 'commit_date': datetime.datetime(2017, 3, 14, 3, 53, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7591c870112683bd37d2aa37d900214b45ec98e', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6dbf785fbeb8d8da92fa1f2297b3644a263249f', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '395c4d76326316a5c85c230837060cf16827f015', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ac4a08b88ec33046bfb369937a5ee63f158eead', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e359d05942c637988f6779daaaf6a58d820002b', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12e268db14de5aa847c1c94498435d85948079f7', 'committer_username': 'TShimko126', 'committer_name': 'Tyler Shimko', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 29, 5, 12, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311fd3ff53ad811d6819987050a1a25f46b081c3', 'committer_username': 'TShimko126', 'committer_name': 'Tyler Shimko', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 29, 5, 12, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '223f81c0322204505ca641810cd9e1be0aa7996f', 'committer_username': 'TShimko126', 'committer_name': 'Tyler Shimko', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 29, 5, 12, 40, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20f728965f70765c682d327152d24689e9139839', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0873efa0de0ee0e29d38f3b5e66f9a1795693cf', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b759c84df31f50a61a04eaff0e3316142d04b860', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aadb5d46ce61777f75841c21b2eae3a0e3e3e63', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '279ae9c7a2fc8966474937c9b8feff2b9b06c616', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c44561b2f9c0a9c7a25099c7891e433ce97c5c', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd78a666957192d3f87d14cbe540566bdd2f8a8c2', 'committer_username': 'paupaiz', 'committer_name': 'Pau Paiz', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 10, 4, 41, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bd0a87a419c07bd5c1762c9b2553311f0e940c2', 'committer_username': 'Chahalprincy', 'committer_name': 'Princy Chahal', 'committer_email': 'princychahal68@gmail.com', 'commit_date': datetime.datetime(2021, 1, 22, 16, 4, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ab7f92a5dcef5ec2e5fac9d54f3f979d3dad221', 'committer_username': 'Chahalprincy', 'committer_name': 'Princy Chahal', 'committer_email': 'princychahal68@gmail.com', 'commit_date': datetime.datetime(2021, 1, 22, 16, 4, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2e6e76ea5d98396278fa777a65ac61a2cbb7e3', 'committer_username': 'Chahalprincy', 'committer_name': 'Princy Chahal', 'committer_email': 'princychahal68@gmail.com', 'commit_date': datetime.datetime(2021, 1, 22, 16, 4, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ecc95f837c8e7a77bcd92fd4e27e8e513c1cb2c', 'committer_username': 'Chahalprincy', 'committer_name': 'Princy Chahal', 'committer_email': 'princychahal68@gmail.com', 'commit_date': datetime.datetime(2021, 1, 22, 16, 4, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f4b7c4e6ec660de08932408df8e5ad7cf73018b', 'committer_username': 'ojeda-e', 'committer_name': 'Estefania Barreto-Ojeda', 'committer_email': 'estefania.b.ojeda@gmail.com', 'commit_date': datetime.datetime(2017, 4, 25, 3, 29, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0426b6202835074047c4224ab5123d5cf7385908', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92a1eab64bc395914cc25d2fbe5e87615b9595fd', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c12fd9ef1ee124e50623063ca469d17fb1bc616f', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7202867117fedd8e3e454905ec4814c93a7a4b0e', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af8dc61a2d0e3bd57de4740e631873d47dd1b682', 'committer_username': 'ARY2260', 'committer_name': 'Aryan Amit Barsainyan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 8, 13, 55, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00fe85a1ba033dea900152729c44d2c4d1b95c51', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ab318f5ae43d13ea05a2f8f67cf56c04cd221b3', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c9eeabca9dfc1d547228910690f346136332f0', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eba5bc274532d3397123fe0d70e44831af9bb8d0', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da96d93c4b1a669e1b542c35e3a40fd8dccb4b23', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ba4ad1805497725cfb32bb66370d4b7bde8d554', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30686cb65c293a3717c39b6472c967a74a8ebf48', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf612cc3bca3e429e3aeec21ade2e6fb711665f4', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21148c5793caf8b3002b7440b96a6de653444a6b', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe2848ca52f7d82750f0378ed702178b6b0c4727', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e4facd64aa439edc05fe24c6db51eb0df4075c6', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c80f271fb9a7cd3f9b08e00d0fc66466d82e565', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cfa2190d61e788fb7bf2c42634b5d15f21da4b2', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86eca1889fb00c647a090b25bb103e46b392e976', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '299a827726075cecd112141d0b3dbec7e76394c1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6784b38ea3d286fea0ec8b969b1381c7e97a118', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb11fc9ce8e943be34d43401ac775bc1ac2aceeb', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e10e43000b655e8d52c9fd6f6595d483f18a95', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
997877110,Adding electron input streams for Ferminet,"# Pull Request Template

## Description
This is a one of several PRs aimed at implementing Ferminet. This PR aims to implement the input stream function
which calculate the input needed for the model (one-electron and two-electron stream).

Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.32.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2997,https://api.github.com/repos/deepchem/deepchem/pulls/2997,https://github.com/deepchem/deepchem/pull/2997,closed,314,6,3,11,3,23,0,0,[],2022-07-15 15:30:16+00:00,2022-08-21 17:58:18+00:00,3205682.0,"37 days, 2:28:02","[{'comment_id': 922286826, 'comment_body': 'What is this needed for?  Adding a new dependency to DeepChem should be done only when absolutely necessary and needs to be carefully considered first.', 'comment_created': datetime.datetime(2022, 7, 15, 15, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 922290500, 'comment_body': 'Yeah I wanted to discuss this over in the developer calls as well. I thought this was necessary as ferminet needs a baseline solution of Hartree-Fock for pre-training which can be obtained from pySCF.', 'comment_created': datetime.datetime(2022, 7, 15, 15, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 922933203, 'comment_body': 'We can add it as a soft dependency, no? \r\n\r\nI think it may be better to use the pyscf conda channel to install over installing through pip.  ', 'comment_created': datetime.datetime(2022, 7, 18, 2, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 928289242, 'comment_body': 'Why not just assigned electron_no as an empty array?', 'comment_created': datetime.datetime(2022, 7, 24, 17, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 933634445, 'comment_body': 'It would be better to use `allclose()` for these assertions.  Very tiny changes, even just running on a different processor, can affect values at this level of precision.', 'comment_created': datetime.datetime(2022, 7, 29, 21, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933634883, 'comment_body': ""It's a list, not a dict."", 'comment_created': datetime.datetime(2022, 7, 29, 21, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933638040, 'comment_body': 'ElectronSampler calls these arguments `seed` and `batch_no`.  We should make the two classes consistent.', 'comment_created': datetime.datetime(2022, 7, 29, 21, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933638931, 'comment_body': 'Are they actually SMILES strings, or just element symbols as the docstring says?', 'comment_created': datetime.datetime(2022, 7, 29, 21, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933926313, 'comment_body': 'it should be just the elements symbol. Now, I have made changes such that works with element symbols', 'comment_created': datetime.datetime(2022, 7, 31, 5, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 933926578, 'comment_body': 'I didn\'t quite understand the ""class consistency"" here 😅. Did u mean like I should remove the seed_no and batch_number here in ferminet class to avoid redundancy? If so, then how will the user set the seed and batch number then?', 'comment_created': datetime.datetime(2022, 7, 31, 5, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 934015378, 'comment_body': 'I think he means the name of the arguments should be changed from `seed_no` to `seed` and `batch_number` to `batch_no`. ', 'comment_created': datetime.datetime(2022, 7, 31, 17, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 934015848, 'comment_body': 'There is no super class for Ferminet to call ', 'comment_created': datetime.datetime(2022, 7, 31, 17, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 934039432, 'comment_body': ""This is a very expensive way to look up the atomic number for a symbol.  A much cheaper way is\r\n\r\n```python\r\ntable = Chem.GetPeriodicTable()\r\n...\r\nnum = table.GetAtomicNumber(i[0])\r\n```\r\n\r\nThe formal charge will always be 0, because you don't specify a formal charge.  But should there be an argument somewhere for the user to specify the total charge of the system?"", 'comment_created': datetime.datetime(2022, 7, 31, 21, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 934039850, 'comment_body': ""Is this meant to be the total spin of the system, or is it something specific to the model?  Normally the user specifies the total spin, since the ground state isn't always the one with the smallest spin."", 'comment_created': datetime.datetime(2022, 7, 31, 21, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 935162518, 'comment_body': ""yeah, this is meant for a single atom, have changed it now to get the user's input"", 'comment_created': datetime.datetime(2022, 8, 2, 6, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 935164077, 'comment_body': ""Have changed it now. and for specifying the formal charge, I have allowed the user to input it with the element string itself, like 'H1+' or 'H1-', where the end of the string defines the charge type and the number before it defines the magnitude. Is this fine?"", 'comment_created': datetime.datetime(2022, 8, 2, 6, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 935947320, 'comment_body': ""Usually the way quantum chemistry programs handle this is that you specify the elements, the total charge, and the spin multiplicity.  See for example https://psicode.org/psi4manual/master/tutorial.html.  By specifying formal charges, you imply that you know where all the electrons are going to end up.  But generally you don't know, and it's the program's job to figure out where they'll go."", 'comment_created': datetime.datetime(2022, 8, 2, 19, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 937356691, 'comment_body': 'Since at the start we sample electrons around each atom, in case of a formal charge, an atom is randomly selected for the charge?(I am unsure on how the program will figure out at the start)', 'comment_created': datetime.datetime(2022, 8, 4, 5, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 945319060, 'comment_body': ""You probably mean spin multiplicity?  Spin isn't an integer."", 'comment_created': datetime.datetime(2022, 8, 14, 17, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 945319399, 'comment_body': ""I'm not familiar with this calculation.  But I'm also not a chemist.  What's the reason for it?"", 'comment_created': datetime.datetime(2022, 8, 14, 17, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 945319966, 'comment_body': ""Adding multiple extra electrons to a single atom probably won't work well.  Highly charged atoms are unusual and tend to have high energies.  For example, if the total charge is -2 you probably should assign -1 to each of the two most electronegative atoms, not -2 to a single atom."", 'comment_created': datetime.datetime(2022, 8, 14, 17, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 947293348, 'comment_body': ""Remember to remove the comment, since it doesn't apply anymore."", 'comment_created': datetime.datetime(2022, 8, 16, 22, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 947293615, 'comment_body': 'Remember to fix this.', 'comment_created': datetime.datetime(2022, 8, 16, 22, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}]","[{'commit_sha': '829bce9357e2231913c4be7a5dd158a30a8fcfb1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fb1fa74f27d2d370dd4e2c985f73f8595ccb82', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7607a36d6e641d075584af1cd5e099b0d1b1bbd1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88b588120fd7944e82ec7883604c05d7c2889049', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0106e4213c440e7b554733c8f16a06418b3a456', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6de2391077c5547a7cdcc663dc35e5bd93977d92', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf501d72833b790fbba9954263a894ccb70f13d', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda7bcfcffb35c9d2b1a65641480bafbbf389492', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fff9c52f3f70ccd46f333cbd58ef4b32a7a5285', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6535995bc49435b297829ca3011aa1232c78094', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22851f0e89fe6033f0f1c46290373226990ebf36', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
997877110,Adding electron input streams for Ferminet,"# Pull Request Template

## Description
This is a one of several PRs aimed at implementing Ferminet. This PR aims to implement the input stream function
which calculate the input needed for the model (one-electron and two-electron stream).

Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.32.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2997,https://api.github.com/repos/deepchem/deepchem/pulls/2997,https://github.com/deepchem/deepchem/pull/2997,closed,314,6,3,11,3,23,0,0,[],2022-07-15 15:30:16+00:00,2022-08-21 17:58:18+00:00,3205682.0,"37 days, 2:28:02","[{'comment_id': 922286826, 'comment_body': 'What is this needed for?  Adding a new dependency to DeepChem should be done only when absolutely necessary and needs to be carefully considered first.', 'comment_created': datetime.datetime(2022, 7, 15, 15, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 922290500, 'comment_body': 'Yeah I wanted to discuss this over in the developer calls as well. I thought this was necessary as ferminet needs a baseline solution of Hartree-Fock for pre-training which can be obtained from pySCF.', 'comment_created': datetime.datetime(2022, 7, 15, 15, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 922933203, 'comment_body': 'We can add it as a soft dependency, no? \r\n\r\nI think it may be better to use the pyscf conda channel to install over installing through pip.  ', 'comment_created': datetime.datetime(2022, 7, 18, 2, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 928289242, 'comment_body': 'Why not just assigned electron_no as an empty array?', 'comment_created': datetime.datetime(2022, 7, 24, 17, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 933634445, 'comment_body': 'It would be better to use `allclose()` for these assertions.  Very tiny changes, even just running on a different processor, can affect values at this level of precision.', 'comment_created': datetime.datetime(2022, 7, 29, 21, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933634883, 'comment_body': ""It's a list, not a dict."", 'comment_created': datetime.datetime(2022, 7, 29, 21, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933638040, 'comment_body': 'ElectronSampler calls these arguments `seed` and `batch_no`.  We should make the two classes consistent.', 'comment_created': datetime.datetime(2022, 7, 29, 21, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933638931, 'comment_body': 'Are they actually SMILES strings, or just element symbols as the docstring says?', 'comment_created': datetime.datetime(2022, 7, 29, 21, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 933926313, 'comment_body': 'it should be just the elements symbol. Now, I have made changes such that works with element symbols', 'comment_created': datetime.datetime(2022, 7, 31, 5, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 933926578, 'comment_body': 'I didn\'t quite understand the ""class consistency"" here 😅. Did u mean like I should remove the seed_no and batch_number here in ferminet class to avoid redundancy? If so, then how will the user set the seed and batch number then?', 'comment_created': datetime.datetime(2022, 7, 31, 5, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 934015378, 'comment_body': 'I think he means the name of the arguments should be changed from `seed_no` to `seed` and `batch_number` to `batch_no`. ', 'comment_created': datetime.datetime(2022, 7, 31, 17, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 934015848, 'comment_body': 'There is no super class for Ferminet to call ', 'comment_created': datetime.datetime(2022, 7, 31, 17, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tonydavis629', 'type': 'User'}, {'comment_id': 934039432, 'comment_body': ""This is a very expensive way to look up the atomic number for a symbol.  A much cheaper way is\r\n\r\n```python\r\ntable = Chem.GetPeriodicTable()\r\n...\r\nnum = table.GetAtomicNumber(i[0])\r\n```\r\n\r\nThe formal charge will always be 0, because you don't specify a formal charge.  But should there be an argument somewhere for the user to specify the total charge of the system?"", 'comment_created': datetime.datetime(2022, 7, 31, 21, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 934039850, 'comment_body': ""Is this meant to be the total spin of the system, or is it something specific to the model?  Normally the user specifies the total spin, since the ground state isn't always the one with the smallest spin."", 'comment_created': datetime.datetime(2022, 7, 31, 21, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 935162518, 'comment_body': ""yeah, this is meant for a single atom, have changed it now to get the user's input"", 'comment_created': datetime.datetime(2022, 8, 2, 6, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 935164077, 'comment_body': ""Have changed it now. and for specifying the formal charge, I have allowed the user to input it with the element string itself, like 'H1+' or 'H1-', where the end of the string defines the charge type and the number before it defines the magnitude. Is this fine?"", 'comment_created': datetime.datetime(2022, 8, 2, 6, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 935947320, 'comment_body': ""Usually the way quantum chemistry programs handle this is that you specify the elements, the total charge, and the spin multiplicity.  See for example https://psicode.org/psi4manual/master/tutorial.html.  By specifying formal charges, you imply that you know where all the electrons are going to end up.  But generally you don't know, and it's the program's job to figure out where they'll go."", 'comment_created': datetime.datetime(2022, 8, 2, 19, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 937356691, 'comment_body': 'Since at the start we sample electrons around each atom, in case of a formal charge, an atom is randomly selected for the charge?(I am unsure on how the program will figure out at the start)', 'comment_created': datetime.datetime(2022, 8, 4, 5, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shaipranesh2', 'type': 'User'}, {'comment_id': 945319060, 'comment_body': ""You probably mean spin multiplicity?  Spin isn't an integer."", 'comment_created': datetime.datetime(2022, 8, 14, 17, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 945319399, 'comment_body': ""I'm not familiar with this calculation.  But I'm also not a chemist.  What's the reason for it?"", 'comment_created': datetime.datetime(2022, 8, 14, 17, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 945319966, 'comment_body': ""Adding multiple extra electrons to a single atom probably won't work well.  Highly charged atoms are unusual and tend to have high energies.  For example, if the total charge is -2 you probably should assign -1 to each of the two most electronegative atoms, not -2 to a single atom."", 'comment_created': datetime.datetime(2022, 8, 14, 17, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 947293348, 'comment_body': ""Remember to remove the comment, since it doesn't apply anymore."", 'comment_created': datetime.datetime(2022, 8, 16, 22, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}, {'comment_id': 947293615, 'comment_body': 'Remember to fix this.', 'comment_created': datetime.datetime(2022, 8, 16, 22, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'peastman', 'type': 'User'}]","[{'commit_sha': '829bce9357e2231913c4be7a5dd158a30a8fcfb1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34fb1fa74f27d2d370dd4e2c985f73f8595ccb82', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7607a36d6e641d075584af1cd5e099b0d1b1bbd1', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88b588120fd7944e82ec7883604c05d7c2889049', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0106e4213c440e7b554733c8f16a06418b3a456', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6de2391077c5547a7cdcc663dc35e5bd93977d92', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf501d72833b790fbba9954263a894ccb70f13d', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fda7bcfcffb35c9d2b1a65641480bafbbf389492', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fff9c52f3f70ccd46f333cbd58ef4b32a7a5285', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6535995bc49435b297829ca3011aa1232c78094', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22851f0e89fe6033f0f1c46290373226990ebf36', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
950265911,Adding DeepQMC tutorial,"# Pull Request Template

## Description

Fix #(issue)

As part of issue #2907 , differential quantum chemistry tutorial- DeepQMC tutorial has been added,

## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.22.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2914,https://api.github.com/repos/deepchem/deepchem/pulls/2914,https://github.com/deepchem/deepchem/pull/2914,closed,21021,0,2,5,9,0,0,0,[],2022-05-29 13:32:10+00:00,2022-06-14 15:07:05+00:00,1388095.0,"16 days, 1:34:55",[],"[{'commit_sha': '4369760ed6594785f36c22485ca5faca8a7aa58e', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14b137f73b69f6bcd91833bc3387263652eeedd4', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae2642f704611392867ec2e0d5504a38e6f0596', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6513fbd536aeaf66444212cad8d329df468ba67e', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '977660da498157594609a903c6f57ec6df1f3713', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
950265911,Adding DeepQMC tutorial,"# Pull Request Template

## Description

Fix #(issue)

As part of issue #2907 , differential quantum chemistry tutorial- DeepQMC tutorial has been added,

## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.22.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2914,https://api.github.com/repos/deepchem/deepchem/pulls/2914,https://github.com/deepchem/deepchem/pull/2914,closed,21021,0,2,5,9,0,0,0,[],2022-05-29 13:32:10+00:00,2022-06-14 15:07:05+00:00,1388095.0,"16 days, 1:34:55",[],"[{'commit_sha': '4369760ed6594785f36c22485ca5faca8a7aa58e', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14b137f73b69f6bcd91833bc3387263652eeedd4', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ae2642f704611392867ec2e0d5504a38e6f0596', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6513fbd536aeaf66444212cad8d329df468ba67e', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '977660da498157594609a903c6f57ec6df1f3713', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
985525128,Minor fix for utils.rst,"This PR fixes the name change from MCMC class to ElectronSampler class which has not been reflected in the docs.

# Pull Request Template

## Description

Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.32.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2973,https://api.github.com/repos/deepchem/deepchem/pulls/2973,https://github.com/deepchem/deepchem/pull/2973,closed,1,1,1,1,0,0,0,0,[],2022-07-02 13:20:56+00:00,2022-07-02 16:15:14+00:00,10458.0,2:54:18,[],"[{'commit_sha': '890a69f4f58d01dbe18b3f66a3a200ceb2a6abd6', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6
985525128,Minor fix for utils.rst,"This PR fixes the name change from MCMC class to ElectronSampler class which has not been reflected in the docs.

# Pull Request Template

## Description

Fix #(issue)

<!-- Please include a summary of the change and which issue is fixed.
Please also include relevant motivation and context.
List any dependencies that are required for this change. -->


## Type of change

Please check the option that is related to your PR.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - In this case, we recommend to discuss your modification on GitHub issues before creating the PR
- [ ] Documentations (modification for documents)

## Checklist

- [ ] My code follows [the style guidelines of this project](https://deepchem.readthedocs.io/en/latest/development_guide/coding.html)
  - [ ] Run `yapf -i <modified file>` and check no errors (**yapf version must be  0.32.0**)
  - [ ] Run `mypy -p deepchem` and check no errors
  - [ ] Run `flake8 <modified file> --count` and check no errors
  - [ ] Run `python -m doctest <modified file>` and check no errors
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New unit tests pass locally with my changes
- [ ] I have checked my code and corrected any misspellings
",True,2973,https://api.github.com/repos/deepchem/deepchem/pulls/2973,https://github.com/deepchem/deepchem/pull/2973,closed,1,1,1,1,0,0,0,0,[],2022-07-02 13:20:56+00:00,2022-07-02 16:15:14+00:00,10458.0,2:54:18,[],"[{'commit_sha': '890a69f4f58d01dbe18b3f66a3a200ceb2a6abd6', 'committer_username': 'shaipranesh2', 'committer_name': 'Shaipranesh S', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 5, 4, 51, 52, tzinfo=datetime.timezone.utc)}]",Shaipranesh S,80086120,,User,,18,,6,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43098215,deepchem,deepchem/deepchem,Python,1649,5357,144,247,10527,621,15,162,"[{'id': 1721746266, 'number': 3829, 'closed': datetime.datetime(2024, 2, 21, 17, 33, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 12, 11, 18, 8, tzinfo=datetime.timezone.utc), 'time_taken': 800130.0, 'time_delta': '9 days, 6:15:30', 'additions': 27, 'deletions': 21, 'state': 'closed'}, {'id': 1712155590, 'number': 3819, 'closed': datetime.datetime(2024, 2, 8, 16, 17, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 5, 17, 28, 52, tzinfo=datetime.timezone.utc), 'time_taken': 254903.0, 'time_delta': '2 days, 22:48:23', 'additions': 755, 'deletions': 0, 'state': 'closed'}, {'id': 1685062135, 'number': 3791, 'closed': datetime.datetime(2024, 1, 22, 20, 15, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 18, 15, 26, 1, tzinfo=datetime.timezone.utc), 'time_taken': 362954.0, 'time_delta': '4 days, 4:49:14', 'additions': 9, 'deletions': 5, 'state': 'closed'}, {'id': 1674094390, 'number': 3776, 'closed': datetime.datetime(2024, 2, 3, 23, 15, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 11, 10, 13, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2034155.0, 'time_delta': '23 days, 13:02:35', 'additions': 46, 'deletions': 22, 'state': 'closed'}, {'id': 1673954747, 'number': 3775, 'closed': datetime.datetime(2024, 1, 12, 17, 19, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 11, 8, 46, 11, tzinfo=datetime.timezone.utc), 'time_taken': 117170.0, 'time_delta': '1 day, 8:32:50', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 1648569969, 'number': 3736, 'closed': datetime.datetime(2023, 12, 18, 17, 19, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 18, 13, 12, 45, tzinfo=datetime.timezone.utc), 'time_taken': 14805.0, 'time_delta': '4:06:45', 'additions': 72, 'deletions': 70, 'state': 'closed'}, {'id': 1617736494, 'number': 3689, 'closed': datetime.datetime(2023, 11, 30, 18, 19, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 27, 10, 55, 6, tzinfo=datetime.timezone.utc), 'time_taken': 285842.0, 'time_delta': '3 days, 7:24:02', 'additions': 151, 'deletions': 22, 'state': 'closed'}, {'id': 1594670756, 'number': 3671, 'closed': datetime.datetime(2023, 11, 10, 5, 50, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 9, 15, 42, 56, tzinfo=datetime.timezone.utc), 'time_taken': 50840.0, 'time_delta': '14:07:20', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1588698152, 'number': 3661, 'closed': datetime.datetime(2023, 11, 6, 17, 54, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 6, 14, 10, 21, tzinfo=datetime.timezone.utc), 'time_taken': 13450.0, 'time_delta': '3:44:10', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1575193226, 'number': 3637, 'closed': None, 'created': datetime.datetime(2023, 10, 26, 16, 35, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 0, 'state': 'open'}, {'id': 1572939847, 'number': 3633, 'closed': datetime.datetime(2023, 11, 3, 3, 47, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 25, 13, 22, 24, tzinfo=datetime.timezone.utc), 'time_taken': 743107.0, 'time_delta': '8 days, 14:25:07', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1566555243, 'number': 3624, 'closed': None, 'created': datetime.datetime(2023, 10, 20, 11, 53, 49, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 146, 'deletions': 47, 'state': 'open'}, {'id': 1566544870, 'number': 3623, 'closed': datetime.datetime(2023, 11, 8, 20, 30, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 20, 11, 45, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1673082.0, 'time_delta': '19 days, 8:44:42', 'additions': 46, 'deletions': 40, 'state': 'closed'}, {'id': 1543404595, 'number': 3596, 'closed': datetime.datetime(2023, 10, 6, 18, 13, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 5, 10, 45, 43, tzinfo=datetime.timezone.utc), 'time_taken': 113285.0, 'time_delta': '1 day, 7:28:05', 'additions': 132, 'deletions': 20, 'state': 'closed'}, {'id': 1500363347, 'number': 3553, 'closed': datetime.datetime(2023, 10, 2, 16, 40, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 3, 19, 41, 26, tzinfo=datetime.timezone.utc), 'time_taken': 2494767.0, 'time_delta': '28 days, 20:59:27', 'additions': 149, 'deletions': 16, 'state': 'closed'}, {'id': 1500360303, 'number': 3552, 'closed': datetime.datetime(2023, 9, 23, 22, 42, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 3, 19, 27, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1739688.0, 'time_delta': '20 days, 3:14:48', 'additions': 155, 'deletions': 86, 'state': 'closed'}, {'id': 1500355400, 'number': 3551, 'closed': datetime.datetime(2023, 9, 14, 19, 10, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 3, 19, 6, 19, tzinfo=datetime.timezone.utc), 'time_taken': 950664.0, 'time_delta': '11 days, 0:04:24', 'additions': 35, 'deletions': 31, 'state': 'closed'}, {'id': 1491026899, 'number': 3544, 'closed': datetime.datetime(2023, 8, 28, 5, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 27, 17, 34, 54, tzinfo=datetime.timezone.utc), 'time_taken': 44346.0, 'time_delta': '12:19:06', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 1489340909, 'number': 3541, 'closed': datetime.datetime(2023, 8, 30, 5, 49, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 25, 8, 34, 11, tzinfo=datetime.timezone.utc), 'time_taken': 422102.0, 'time_delta': '4 days, 21:15:02', 'additions': 156, 'deletions': 0, 'state': 'closed'}, {'id': 1486571792, 'number': 3539, 'closed': None, 'created': datetime.datetime(2023, 8, 23, 14, 48, 5, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 27, 'deletions': 0, 'state': 'open'}, {'id': 1486374418, 'number': 3538, 'closed': datetime.datetime(2023, 8, 23, 16, 2, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 12, 50, 39, tzinfo=datetime.timezone.utc), 'time_taken': 11505.0, 'time_delta': '3:11:45', 'additions': 159, 'deletions': 1, 'state': 'closed'}, {'id': 1479987090, 'number': 3530, 'closed': datetime.datetime(2023, 8, 23, 12, 44, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 18, 5, 2, 30, tzinfo=datetime.timezone.utc), 'time_taken': 459748.0, 'time_delta': '5 days, 7:42:28', 'additions': 1718, 'deletions': 580, 'state': 'closed'}, {'id': 1456461761, 'number': 3502, 'closed': None, 'created': datetime.datetime(2023, 7, 31, 15, 9, 39, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 290, 'deletions': 119, 'state': 'open'}, {'id': 1454879532, 'number': 3498, 'closed': datetime.datetime(2023, 9, 15, 11, 3, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 29, 19, 41, 52, tzinfo=datetime.timezone.utc), 'time_taken': 4116115.0, 'time_delta': '47 days, 15:21:55', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1427297162, 'number': 3471, 'closed': datetime.datetime(2023, 7, 12, 16, 20, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 11, 8, 11, tzinfo=datetime.timezone.utc), 'time_taken': 191547.0, 'time_delta': '2 days, 5:12:27', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 1424644354, 'number': 3466, 'closed': datetime.datetime(2023, 7, 26, 10, 20, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 7, 12, 56, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1632213.0, 'time_delta': '18 days, 21:23:33', 'additions': 186, 'deletions': 134, 'state': 'closed'}, {'id': 1411597912, 'number': 3447, 'closed': datetime.datetime(2023, 7, 5, 16, 20, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 12, 55, 18, tzinfo=datetime.timezone.utc), 'time_taken': 617117.0, 'time_delta': '7 days, 3:25:17', 'additions': 66, 'deletions': 28, 'state': 'closed'}, {'id': 1398499264, 'number': 3437, 'closed': None, 'created': datetime.datetime(2023, 6, 19, 16, 10, 52, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 717, 'deletions': 197, 'state': 'open'}, {'id': 1216788558, 'number': 3201, 'closed': None, 'created': datetime.datetime(2023, 1, 25, 16, 4, 44, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 42, 'deletions': 18, 'state': 'open'}, {'id': 1216785517, 'number': 3200, 'closed': None, 'created': datetime.datetime(2023, 1, 25, 16, 2, 39, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 488, 'deletions': 382, 'state': 'open'}, {'id': 1034229230, 'number': 3039, 'closed': None, 'created': datetime.datetime(2022, 8, 23, 13, 53, 44, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1158, 'deletions': 730, 'state': 'open'}, {'id': 1019599532, 'number': 3027, 'closed': datetime.datetime(2022, 8, 23, 6, 34, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 7, 17, 48, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1341976.0, 'time_delta': '15 days, 12:46:16', 'additions': 3308, 'deletions': 240, 'state': 'closed'}, {'id': 997877110, 'number': 2997, 'closed': datetime.datetime(2022, 8, 21, 17, 58, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 15, 30, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3205682.0, 'time_delta': '37 days, 2:28:02', 'additions': 314, 'deletions': 6, 'state': 'closed'}, {'id': 991202347, 'number': 2987, 'closed': datetime.datetime(2022, 7, 10, 17, 45, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 5, 18, 38, tzinfo=datetime.timezone.utc), 'time_taken': 217637.0, 'time_delta': '2 days, 12:27:17', 'additions': 7, 'deletions': 5, 'state': 'closed'}, {'id': 985525128, 'number': 2973, 'closed': datetime.datetime(2022, 7, 2, 16, 15, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 2, 13, 20, 56, tzinfo=datetime.timezone.utc), 'time_taken': 10458.0, 'time_delta': '2:54:18', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 985057913, 'number': 2972, 'closed': datetime.datetime(2022, 7, 31, 17, 39, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 14, 56, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2601771.0, 'time_delta': '30 days, 2:42:51', 'additions': 677, 'deletions': 109, 'state': 'closed'}, {'id': 960609151, 'number': 2935, 'closed': datetime.datetime(2022, 7, 1, 16, 46, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 7, 16, 14, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2075509.0, 'time_delta': '24 days, 0:31:49', 'additions': 358, 'deletions': 0, 'state': 'closed'}, {'id': 950265911, 'number': 2914, 'closed': datetime.datetime(2022, 6, 14, 15, 7, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 29, 13, 32, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1388095.0, 'time_delta': '16 days, 1:34:55', 'additions': 21021, 'deletions': 0, 'state': 'closed'}, {'id': 848574823, 'number': 2857, 'closed': datetime.datetime(2022, 3, 18, 17, 32, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 12, 5, 40, 38, tzinfo=datetime.timezone.utc), 'time_taken': 2980296.0, 'time_delta': '34 days, 11:51:36', 'additions': 214, 'deletions': 197, 'state': 'closed'}, {'id': 841103116, 'number': 2851, 'closed': datetime.datetime(2022, 2, 11, 19, 5, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 6, 16, 18, 49, tzinfo=datetime.timezone.utc), 'time_taken': 442005.0, 'time_delta': '5 days, 2:46:45', 'additions': 481, 'deletions': 0, 'state': 'closed'}, {'id': 819944343, 'number': 2814, 'closed': datetime.datetime(2022, 1, 27, 20, 9, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 12, 17, 51, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1304280.0, 'time_delta': '15 days, 2:18:00', 'additions': 153, 'deletions': 0, 'state': 'closed'}]"
