pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
884468625,Test for timeseries,"## PR Description
Creating a `GenericTimeseries` by passing a `numpy.array` to `sunpy.timeseries.TimeSeries` 
- closes #5864 

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->
- [x] I have followed the guidelines in the [Contributing document](https://docs.sunpy.org/en/latest/dev_guide/contents/newcomers.html)
- [x] Changes follow the coding style of this project
- [x] Changes have been formatted and linted
- [x] Changes pass pytest style unit tests (and `pytest` passes).
- [ ] Changes include any required corresponding changes to the documentation
- [ ] Changes have been rebased and squashed to the minimal number (typically 1) of relevant commits
- [ ] Changes have a descriptive commit message with a short title
- [x] I have added a `Fixes #XXXX -` or `Closes #XXXX -` comment to auto-close the issue that your PR addresses
",True,5980,https://api.github.com/repos/sunpy/sunpy/pulls/5980,https://github.com/sunpy/sunpy/pull/5980,closed,9,0,1,16,14,3,4,0,"[{'name': 'Tests'}, {'name': 'timeseries'}, {'name': 'No Changelog Entry Needed'}, {'name': 'No Backport'}]",2022-03-21 06:54:30+00:00,2022-04-01 16:42:06+00:00,985656.0,"11 days, 9:47:36","[{'comment_id': 830800867, 'comment_body': 'This should go into a test file: https://github.com/sunpy/sunpy/blob/main/sunpy/timeseries/tests/test_timeseriesbase.py', 'comment_created': datetime.datetime(2022, 3, 21, 7, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 830806531, 'comment_body': 'Sorry, by mistake.', 'comment_created': datetime.datetime(2022, 3, 21, 7, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 830811177, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 21, 7, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': '7a07f996ee5ab8f6efa259ac2c0ba2f152afdb50', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29cfc542c4a33a29a22e7bca298ba37faabe8b3e', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536e4e1eeda33b54d2166d8be64b99bfba4bfc30', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198c8e7295b730e73dc3eaecbd66280837315009', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44a6e3908efb76f5d4aef8161bce293f41cf298f', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d03c3f3f66a7752967d025e5c6a8da59278825', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ae463256e089320aad291f5273b0d3b6ff2654a', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f3c515372950ce9701ed1827a05069def6b59d7', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dec62a607bd1ab22299e5240fb9b638d08f20b6', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0afe58499564c68e01bcd68d9e895269ed6599c0', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b50a3aaac530f25700dc6492528a716543389aeb', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba860a9005649c083c465149e7876425aa52d787', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f8b4fd5ebe7cea5caef277602895f9408e34488', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9e907fa917d914350328abd0ba84a1d522e99a2', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2370d8787c997567d5710b4f6e9dd24a9dbf8c66', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b79aa4332febb2bb4416940f3e3a1d91a17745d6', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
897956694,Update Timeseries Docs ,"## PR Description

- Related to recently merged PR #5980, After adding the test for timeseries with numpy the only part left is updating documentation. This PR updates the documentation the same.
- Adds Pipfile to gitignore

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->
- [x] I have followed the guidelines in the [Contributing document](https://docs.sunpy.org/en/latest/dev_guide/contents/newcomers.html)
- [x] Changes follow the coding style of this project
- [x] Changes have been formatted and linted
- [x] Changes pass pytest style unit tests (and `pytest` passes).
- [x] Changes include any required corresponding changes to the documentation
- [ ] Changes have been rebased and squashed to the minimal number (typically 1) of relevant commits
- [x] Changes have a descriptive commit message with a short title
- [ ] I have added a `Fixes #XXXX -` or `Closes #XXXX -` comment to auto-close the issue that your PR addresses
",True,6024,https://api.github.com/repos/sunpy/sunpy/pulls/6024,https://github.com/sunpy/sunpy/pull/6024,closed,6,2,3,7,1,2,3,0,"[{'name': 'Documentation'}, {'name': 'timeseries'}, {'name': 'No Backport'}]",2022-04-02 05:12:59+00:00,2022-04-05 06:43:37+00:00,264638.0,"3 days, 1:30:38","[{'comment_id': 842367449, 'comment_body': '```suggestion\r\n    data : `~pandas.DataFrame` or `numpy.array`\r\n```', 'comment_created': datetime.datetime(2022, 4, 5, 5, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 842367944, 'comment_body': '```suggestion\r\nUpdated the timeseries documentation to make it clear that you can pass in a numpy array.\r\n```', 'comment_created': datetime.datetime(2022, 4, 5, 5, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': '182d2166af71366922adb4a22935821ea86a54d7', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdc893ce23348ea1cfcbd5418752742f818fadc4', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31a5745800e5a9ee5ff49729e6ec24644c6cd578', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f49b53953f578adfad3b71836b4d8525cf084f12', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9821138b1135d40fe006828048e9fb2819be756f', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95f89e113826115882bcef579fe9ffb5e47cee62', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '034e1ba675ed539c086aa7a0d9fb0fd637a23e9c', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
879842087,"Adds example for ""reproject a map to a map projection with a custom origin""","## PR Description

* Closes #5400 
* Adds an example to show ""How to reproject a map to a map projection with a
custom origin.""
* view it in docs [here](https://sunpy--5961.org.readthedocs.build/en/5961/generated/gallery/map_transformations/projection_custom_origin.html#sphx-glr-generated-gallery-map-transformations-projection-custom-origin-py)

## Output
![Screenshot from 2022-03-19 17-35-15](https://user-images.githubusercontent.com/53405133/159120394-c961497e-2828-4d93-acdf-d1d3ab3e3d4b.png)


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->
- [x] I have followed the guidelines in the [Contributing document](https://docs.sunpy.org/en/latest/dev_guide/contents/newcomers.html)
- [x] Changes follow the coding style of this project
- [x] Changes have been formatted and linted
- [x] Changes pass pytest style unit tests (and `pytest` passes).
- [ ] Changes include any required corresponding changes to the documentation
- [ ] Changes have been rebased and squashed to the minimal number (typically 1) of relevant commits
- [x] Changes have a descriptive commit message with a short title
- [x] I have added a `Fixes #XXXX -` or `Closes #XXXX -` comment to auto-close the issue that your PR addresses
",True,5961,https://api.github.com/repos/sunpy/sunpy/pulls/5961,https://github.com/sunpy/sunpy/pull/5961,closed,91,0,2,29,9,48,2,0,"[{'name': 'Examples'}, {'name': 'No Backport'}]",2022-03-15 07:27:50+00:00,2022-03-22 20:57:07+00:00,653357.0,"7 days, 13:29:17","[{'comment_id': 828304241, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 828305918, 'comment_body': 'This ref is incorrect, you will need to\r\n\r\n1. Rename the example to this file name.\r\n2. The way to get a gallery reference is not like this: https://sphinx-gallery.github.io/stable/advanced.html?highlight=reference#cross-referencing', 'comment_created': datetime.datetime(2022, 3, 16, 18, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 828306146, 'comment_body': 'I am pretty sure these need to be same length as the text.', 'comment_created': datetime.datetime(2022, 3, 16, 18, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 828306239, 'comment_body': 'This line is too long.', 'comment_created': datetime.datetime(2022, 3, 16, 18, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 828306524, 'comment_body': 'There should be a new line between each # block and any python code.', 'comment_created': datetime.datetime(2022, 3, 16, 18, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 828308936, 'comment_body': '```suggestion\r\n# Now, we can use the WCS of postel projection to reproject the AIA map.\r\nout_map = aia_map.reproject_to(out_wcs)\r\nout_map.plot_settings = aia_map.plot_settings\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 828312270, 'comment_body': ""```suggestion\r\n###############################################################################\r\n\r\n# sphinx_gallery_defer_figures\r\n\r\n# Finally, we'll plot both our original and reprojected images.\r\nfig = plt.figure(figsize=(8, 4))\r\n```"", 'comment_created': datetime.datetime(2022, 3, 16, 18, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 828312550, 'comment_body': '```suggestion\r\n###############################################################################\r\n\r\n# sphinx_gallery_defer_figures\r\n\r\n# Plot the original AIA map\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 828312810, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 828314175, 'comment_body': '```suggestion\r\n====================================\r\nAzimuthal Equidistant Projection with Reproject\r\n====================================\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 828316230, 'comment_body': '```suggestion\r\nIn this example, we will reproject an AIA image into an\r\n`azimuthal equidistant projection <https://en.wikipedia.org/wiki/Azimuthal_equidistant_projection>`__.\r\n\r\nYou will need v0.6 or higher  of the `reproject` package installed.\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 828317741, 'comment_body': '```suggestion\r\n# `~sunpy.map.Map` accepts a wide variety of inputs.\r\n# In this example we load the sample AIA image which we imported earlier from\r\n# `sunpy.data.sample`.\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 828318298, 'comment_body': '```suggestion\r\n# This can be fixed by setting the lower limit of the normalization.\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 828320099, 'comment_body': '```suggestion\r\n# Next, we define the origin of the postel projection using an `astropy.coordinates.SkyCoord` object.\r\n# `~astropy.coordinates.Skycoord` provides a flexible interface for celestial coordinate representation, manipulation, and transformation between systems.\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 828321974, 'comment_body': '```suggestion\r\n# We can then use our origin coordinate to create a FITS-WCS header.\r\n# From this new header, we can derive the world coordinate system (WCS)\r\n# of our postel projection.\r\n```', 'comment_created': datetime.datetime(2022, 3, 16, 18, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'wtbarnes', 'type': 'User'}, {'comment_id': 830433477, 'comment_body': '```suggestion\r\n=====================================================\r\nReprojecting to a Map Projection with a Custom Origin\r\n=====================================================\r\n\r\nIn this example, we show how to reproject a map to a map projection with a\r\ncustom origin.  Here, we choose the target map projection to be the\r\n`azimuthal equidistant projection <https://en.wikipedia.org/wiki/Azimuthal_equidistant_projection>`__,\r\nalso known as the Postel projection, which has useful properties relative to a\r\nspecified origin of the projection.  If a different map projection is desired,\r\nmodifying this example is straightforward.\r\n```\r\nAs I said, I want this example to be more general.  Also, you never actually explained that the azimuthal equidistant projection is the same thing as the Postel projection.', 'comment_created': datetime.datetime(2022, 3, 19, 3, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830433674, 'comment_body': ""```suggestion\r\n```\r\nI realize that this line is present in other examples, but it's vestigial now that `reproject` is a non-optional dependency."", 'comment_created': datetime.datetime(2022, 3, 19, 3, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830433718, 'comment_body': ""```suggestion\r\n```\r\nYou can reproject to a header, so you don't need to use `WCS` directly"", 'comment_created': datetime.datetime(2022, 3, 19, 3, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830433865, 'comment_body': ""```suggestion\r\n###############################################################################\r\n# We will use one of the AIA images from the sample data.  We fix the range of\r\n# values for the Map's normalizer for a prettier image.\r\n\r\naia_map = sunpy.map.Map(AIA_171_IMAGE)\r\naia_map.plot_settings['norm'].vmin = 0\r\naia_map.plot_settings['norm'].vmax = 10000\r\n```\r\nNo need to be so explanatory for a setup that is in a bunch of our examples"", 'comment_created': datetime.datetime(2022, 3, 19, 3, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830433955, 'comment_body': '```suggestion\r\n# Next, we create a `~astropy.coordinates.SkyCoord` to define the custom origin\r\n# of the map projection.  Here, we are going to center the projection at the\r\n# helioprojective coordinates of a particular active region.  We want our map\r\n# projection to be in heliographic Stonyhurst coordinates, so we transfrom the\r\n# origin coordinate accordingly.\r\n```', 'comment_created': datetime.datetime(2022, 3, 19, 3, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830433997, 'comment_body': '```suggestion\r\n# We then create a FITS-WCS header that includes our custom origin coordinate.\r\n# The azimuthal equidistant projection is specified by the code `""ARC""`.\r\n# See :ref:`astropy:supported_projections` for the projection codes for other\r\n# projections.\r\n```', 'comment_created': datetime.datetime(2022, 3, 19, 3, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830434018, 'comment_body': '```suggestion\r\n```\r\nNot necessary because we can reproject to a header', 'comment_created': datetime.datetime(2022, 3, 19, 3, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830434067, 'comment_body': '```suggestion\r\n# We reproject the map to our FITS-WCS header and copy over the plot settings.\r\n```', 'comment_created': datetime.datetime(2022, 3, 19, 3, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830434081, 'comment_body': '```suggestion\r\nout_map = aia_map.reproject_to(out_header)\r\n```', 'comment_created': datetime.datetime(2022, 3, 19, 3, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830434267, 'comment_body': ""```suggestion\r\n# Finally, we plot both the original and reprojected maps side by side.\r\n\r\nfig = plt.figure(figsize=(8, 4))\r\n\r\n# sphinx_gallery_defer_figures\r\n\r\n```\r\nIt's better to have the `# sphinx_gallery_defer_figures` at the end of a code block given how this will appear in non-rendered contexts."", 'comment_created': datetime.datetime(2022, 3, 19, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830434347, 'comment_body': '```suggestion\r\n# Plot the original AIA map, with the active region circled in red and the\r\n# heliographic grid and solar limb in blue.\r\n```', 'comment_created': datetime.datetime(2022, 3, 19, 3, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830434372, 'comment_body': '```suggestion\r\n\r\n# sphinx_gallery_defer_figures\r\n\r\n```', 'comment_created': datetime.datetime(2022, 3, 19, 3, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830434415, 'comment_body': '```suggestion\r\n# Plot the reprojected AIA map, again with the active region circled in red and\r\n# the heliographic grid and solar limb in blue.\r\n```', 'comment_created': datetime.datetime(2022, 3, 19, 3, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830434600, 'comment_body': '```suggestion\r\nout_map.plot(axes=ax)\r\n```\r\nThe `autoalign` keyword is detritus from a separate example for how to accomplish this without using reproject.  The `annotate` keyword is unnecessary in this specific example; it turns off the title, but the later `set_title()` turns the title back on.', 'comment_created': datetime.datetime(2022, 3, 19, 3, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830434669, 'comment_body': '```suggestion\r\n```\r\nThese are also detritus from a separate example for how to accomplish this without using reproject.  With the reprojected map, Matplotlib knows what the extent of the image is.', 'comment_created': datetime.datetime(2022, 3, 19, 3, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830546411, 'comment_body': ""```suggestion\r\n```\r\nPerhaps we can add this to our `.gitignore`, but it shouldn't be part of this PR."", 'comment_created': datetime.datetime(2022, 3, 20, 1, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830546457, 'comment_body': '```suggestion\r\nAdded the gallery example :ref:`sphx_glr_generated_gallery_map_transformations_projection_custom_origin.py`, which specifically showcases the azimuthal equidistant projection (also known as the Postel projection).\r\n```', 'comment_created': datetime.datetime(2022, 3, 20, 1, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830546471, 'comment_body': '```suggestion\r\n###############################################################################\r\n# Finally, we plot both the original and reprojected maps side by side.\r\n```\r\nThe extra line messes up the rendering', 'comment_created': datetime.datetime(2022, 3, 20, 1, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830546619, 'comment_body': '```suggestion\r\nfig = plt.figure(figsize=(8, 4))\r\n\r\n# sphinx_gallery_defer_figures\r\n\r\n###############################################################################\r\n# Plot the original AIA map, with the active region circled in red and the\r\n```', 'comment_created': datetime.datetime(2022, 3, 20, 1, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830548852, 'comment_body': ""```suggestion\r\nax.plot_coord(origin, 'o', color='red', fillstyle='none', markersize=20)\r\nax.set_title('Postel projection centered at ROI', y=-0.1)\r\n\r\n```\r\nI forgot this"", 'comment_created': datetime.datetime(2022, 3, 20, 2, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830549310, 'comment_body': ""```suggestion\r\n# See :doc:`astropy:/wcs/supported_projections` for the projection codes for\r\n# other projections.\r\n```\r\nSorry, I gave you a broken intersphinx link.  I think this fix will work, but I can't test locally right now."", 'comment_created': datetime.datetime(2022, 3, 20, 2, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830549903, 'comment_body': 'Should I open another PR? ', 'comment_created': datetime.datetime(2022, 3, 20, 2, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 830549981, 'comment_body': 'Ohh no, so sorry about that ', 'comment_created': datetime.datetime(2022, 3, 20, 2, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 830556186, 'comment_body': ""I told him to add it to this PR. I don't see the harm?"", 'comment_created': datetime.datetime(2022, 3, 20, 4, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 830556900, 'comment_body': ""\\<shrug\\>  I don't have strong feelings, just seems totally disconnected from this PR.  I also don't understand why `Pipfile` gets created within the local repository as opposed to outside of it, but I haven't used `pipenv` before."", 'comment_created': datetime.datetime(2022, 3, 20, 4, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 830557129, 'comment_body': 'Thats fair. We can move it to a new PR then.', 'comment_created': datetime.datetime(2022, 3, 20, 4, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 832251047, 'comment_body': '```suggestion\r\n# The azimuthal equidistant projection is specified by the code ``""ARC""``.\r\n```', 'comment_created': datetime.datetime(2022, 3, 22, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 832254466, 'comment_body': ""```suggestion\r\n# See :doc:`astropy:wcs/supported_projections` for the projection codes for\r\n```\r\nAnother attempt to get this intersphinx link to work (I still can't test locally, sorry)"", 'comment_created': datetime.datetime(2022, 3, 22, 14, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 832404464, 'comment_body': '```suggestion\r\nspecified origin of the projection. If a different map projection is desired,\r\n```', 'comment_created': datetime.datetime(2022, 3, 22, 16, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 832404570, 'comment_body': '```suggestion\r\ncustom origin. Here, we choose the target map projection to be the\r\n```', 'comment_created': datetime.datetime(2022, 3, 22, 16, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 832405802, 'comment_body': '```suggestion\r\n# We will use one of the AIA images from the sample data. We fix the range of\r\n```', 'comment_created': datetime.datetime(2022, 3, 22, 16, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 832406003, 'comment_body': '```suggestion\r\n# of the map projection. Here, we are going to center the projection at the\r\n```', 'comment_created': datetime.datetime(2022, 3, 22, 16, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 832406141, 'comment_body': '```suggestion\r\n# helioprojective coordinates of a particular active region. We want our map\r\n```', 'comment_created': datetime.datetime(2022, 3, 22, 16, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': '57e0c26b02a5ba0c242a5263187c36d7df9b5cb2', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7465ed70e11440e96fac3b0361284aa61748847', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30e17650202e29f63a7368e82d714057ab6ec139', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ff05d16d8fc4816a9889f18d58d446967b422c0', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddbdb2118aa8550a116ad4a65ff07a99f63d74fd', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0473fe0396b95514e2736f5594e98c0abe4df21b', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e99634131345cc95e31549caf2119c38473b80e9', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a6524341e77e3b7b1db075f1c9aa696d4c7de2c', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '265f6195c43f034cc45f421352d27b4b9d44d924', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad231a0dcb36c35f62b0cf72433649833db18627', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe4fc071c2147e96ed530151ffdef5992574fa12', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '185573c032874dc91875d579a1935f407004de86', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acc4f308788334cd43ae35b3ac3d4bd03eba71f9', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6198329cb9282411697c79b4e43c0805554294', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16c93c5f39605ae12bab3ef95584341eee6c2f31', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4cf70b0438b0895b7a5e927a2ea06de43ae5eb5', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '403bc3a0adb0ecf25853f918743ad20bd81faab3', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f716ccbe5f98e1795029895f4d6f4105b17450f', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0d75b91de756d6bea66d7d4378b2ccd04cc077a', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8b02ed0e2c27e8be39d31369e651db717b39417', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de7762481457869041c9f40f2559d790d835ebfd', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6028fef05ead69a76e06b84b77306eac25769a96', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ef3c4f88987e9e2236ee02f72a3c4e5e7efa93', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c91e80bee3956f9b000ffbd0ca6b2778cd075e', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e64efe68eea99cff852d6132a2592341ffed26b', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '989d7dccf6bdd5bc23d655fd9bc4ffb5452cec76', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b221ee1df0062787a23df89087b74af2b7e4b1', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb2daf2f75fa33a98a37885f96ba4eb29b5b1f03', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3ebaeb9cfccb5c6039bf7693be9746cef558a4', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
921398466,Memmap tests for io,"## PR Description
In the PR [#1750](https://github.com/sunpy/sunpy/pull/1750), to make SunPy use memory mapping for access to files, changes in the read functions of the `sunpy.io` were made. This PR adds test for those read functions, which are:
- ana.py
- file_tools.py
- fits.py
- jp2.py

Merging this PR:
* closes #1774 
<!--
Please include a summary of the changes and which issue will be addressed
Please also include relevant motivation and context.
-->
",True,6110,https://api.github.com/repos/sunpy/sunpy/pulls/6110,https://github.com/sunpy/sunpy/pull/6110,closed,67,29,4,25,8,57,3,0,"[{'name': 'Tests'}, {'name': 'No Changelog Entry Needed'}, {'name': 'No Backport'}]",2022-04-28 05:17:44+00:00,2022-05-10 17:39:51+00:00,1081327.0,"12 days, 12:22:07","[{'comment_id': 860500894, 'comment_body': 'Does the ana reader support memmap?', 'comment_created': datetime.datetime(2022, 4, 28, 5, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 861438845, 'comment_body': 'In the file ana.py with PR #1750, `**kwargs` was added in this line\r\n```py\r\ndef read(filename, debug=False, **kwargs):\r\n```\r\nSo I thought I have to add a test for that.', 'comment_created': datetime.datetime(2022, 4, 29, 3, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 861458905, 'comment_body': 'What happens to those kwargs in the read function?', 'comment_created': datetime.datetime(2022, 4, 29, 4, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 861460083, 'comment_body': 'So when `memmap` is passed as a Keyword Arguments in the read function, this test will make sure that everything will stay same using `assert`.', 'comment_created': datetime.datetime(2022, 4, 29, 4, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 861489994, 'comment_body': 'Where do they end up? ', 'comment_created': datetime.datetime(2022, 4, 29, 6, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 861569485, 'comment_body': ""Sorry, I don't understand what you mean?"", 'comment_created': datetime.datetime(2022, 4, 29, 8, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 861660229, 'comment_body': ""In the docs here, https://docs.sunpy.org/en/stable/code_ref/io.html?highlight=io#id3\r\nI don't find anything related to memmap, so do you think `ana.py` doesn't need this test?"", 'comment_created': datetime.datetime(2022, 4, 29, 9, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 861938061, 'comment_body': 'What happens to the keyword arguments inside the read function? Where are they evaluated?  ', 'comment_created': datetime.datetime(2022, 4, 29, 15, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 861939087, 'comment_body': ""ANA most likely does not support memmap (you would have to check), but it's good to see that it doesn't error with the keyword set. \r\n\r\nYou will need to replicate this for all the other readers and file types as well. \r\n\r\n"", 'comment_created': datetime.datetime(2022, 4, 29, 15, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 861958769, 'comment_body': 'In the PR [#1750](https://github.com/sunpy/sunpy/pull/1750) read function of 4 files was changed, they are:\r\n- ana.py\r\n- file_tools.py\r\n- fits.py\r\n- jp2.py\r\n\r\nSo, I will be writing tests for these four read functions.', 'comment_created': datetime.datetime(2022, 4, 29, 16, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 862269646, 'comment_body': 'The documentation for [`sunpy.io.read_file`](https://docs.sunpy.org/en/latest/generated/api/sunpy.io.read_file.html#sunpy.io.read_file) says that `memmap` ""is currently only supported by the FITS reader"", i.e., `sunpy.io._fits.read` for which you have added a test which should work very nicely! (Although that test is currently erroring, maybe double check the type of object that `sunpy.io._fits.read` returns to see why it says [`not enough values to unpack (expected 2, got 1)`](https://github.com/sunpy/sunpy/runs/6231810970?check_suite_focus=true#step:8:5137).)\r\n\r\nThe rest of the changes to the read functions in that PR were to allow `memmap=` to be passed to the [`sunpy.io.read_file`](https://docs.sunpy.org/en/latest/generated/api/sunpy.io.read_file.html#sunpy.io.read_file) function and not have an error raised by a `sunpy.io.*.read` function if `memmap=` was passed but wasn\'t supported in it. \r\n\r\nSo I guess the rest of the tests should just be to see that it doesn\'t raise an error if `memmap` is passed but unsupported. Although maybe sunpy should be presenting the user with a warning instead?', 'comment_created': datetime.datetime(2022, 4, 30, 0, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 862428119, 'comment_body': '> Although maybe sunpy should be presenting the user with a warning instead?\r\n\r\nHow do we know that the file supports memmap?', 'comment_created': datetime.datetime(2022, 5, 1, 6, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 862430481, 'comment_body': 'You should be able to check each reader and see if they support memory mapping. As Conor has said, I would assume only the FITS reader supports it.', 'comment_created': datetime.datetime(2022, 5, 1, 6, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 862721087, 'comment_body': 'The ValueError should be due to a bug in the test function itself, as using memmap is not expected to produce an error.', 'comment_created': datetime.datetime(2022, 5, 2, 9, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 862721637, 'comment_body': ""Don't think this import is used?"", 'comment_created': datetime.datetime(2022, 5, 2, 9, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 862862418, 'comment_body': ""We need 2 parameters in the `sunpy.io._fits.read()` function,\r\n\r\nfilepath : `str`\r\nThe fits file to be read.\r\n\r\nI passed `AIA_193_JP2`.\r\n\r\nCan you help me, I don't know how to get the second parameter for pytest, which is:\r\n\r\nhdus : `int` or iterable\r\nThe HDU indexes to read from the file."", 'comment_created': datetime.datetime(2022, 5, 2, 13, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 862868727, 'comment_body': ""The second parameter is optional. (It's for selecting a specific array of data inside the FITS file if it contains multiple but you only need some of them.) The unpack error is occurring when Python tries to unpack the output of the read function in the test: e.g. `a, b = [1, 2]` works but `a, b = [[1, 2]]` produces an error because the outer object has length 1."", 'comment_created': datetime.datetime(2022, 5, 2, 13, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 862920256, 'comment_body': 'Done!\r\nDo the assertion check looks good?\r\n', 'comment_created': datetime.datetime(2022, 5, 2, 14, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 862926724, 'comment_body': 'The test should verify that passing memmap=True to the read function opens the file as a memmap. By calling np.memmap explicitly, I don\'t think this actually tests the memmap functionally of the read function. Was the ""data"" variable not a subclass of some memmap class?', 'comment_created': datetime.datetime(2022, 5, 2, 15, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 862931122, 'comment_body': ""data = <class 'numpy.ndarray'>\r\nheader = <class 'sunpy.io.header.FileHeader'>\r\n\r\nSo we need to use the unpacked `data` and `header` to make a memmap and then test it?\r\n"", 'comment_created': datetime.datetime(2022, 5, 2, 15, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 862947626, 'comment_body': ""How about doing this?\r\n```py\r\n    # Test that memmap is passed correctly to the FITS reader\r\n    data, header = sunpy.io._fits.read(AIA_171_IMAGE, memmap=True)[0]\r\n\r\n    # Create memmap array with data and header\r\n    mm = np.memmap(AIA_171_IMAGE, dtype=data.dtype, mode='r', shape=data.shape)\r\n    assert isinstance(mm, np.memmap)\r\n\r\n    # Read the data and header from the memmap array\r\n    data2, header2 = sunpy.io._fits.read(mm)[0]\r\n\r\n    # Check that the data and header are the same\r\n    assert np.all(data == data2)\r\n    assert header == header2\r\n```"", 'comment_created': datetime.datetime(2022, 5, 2, 15, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 862949105, 'comment_body': 'I would suggest looking at this test and asking yourself, what are you testing?', 'comment_created': datetime.datetime(2022, 5, 2, 15, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 863065921, 'comment_body': ""Sorry for that, I admit that I am fairly new to testing that's why I choose this issue to solve, does it look good now?"", 'comment_created': datetime.datetime(2022, 5, 2, 18, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 863071210, 'comment_body': 'So this isnt a memory mapped array? ', 'comment_created': datetime.datetime(2022, 5, 2, 18, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 863071794, 'comment_body': 'Yes, much better.', 'comment_created': datetime.datetime(2022, 5, 2, 18, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 863073609, 'comment_body': 'I thought, data is a ndarray together with io.header it makes memmap.', 'comment_created': datetime.datetime(2022, 5, 2, 18, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 863076047, 'comment_body': 'data, header pair is what the reader returns. I had assumed that a correctly memory mapped array would have a different type? ', 'comment_created': datetime.datetime(2022, 5, 2, 18, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 863080011, 'comment_body': ""Not totally sure but the memmap may be part of the buffer that NDArray uses and not necessary a different class at the array level. Looking at the astropy test code for opening fits files, they don't seem to check whether a memmap was actually opened so maybe this isn't trivial to test for. They just test that `memmap=False` gives the same data as `memmap=True`. (Note that the default for memmap in FITS files is True.)"", 'comment_created': datetime.datetime(2022, 5, 2, 18, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 864475751, 'comment_body': '> They just test that memmap=False gives the same data as memmap=True\r\n\r\nI think, we can use [np.all](https://numpy.org/doc/stable/reference/generated/numpy.all.html) to check whether both gives same result, \r\nSo, the test will be like:\r\n ```py\r\n    # Test that memmap=False gives the same data as memmap=True\r\n    data, header = sunpy.io.read_file(AIA_171_IMAGE, memmap=False)[0]\r\n    data_memmap, header_memmap = sunpy.io.read_file(AIA_171_IMAGE, memmap=True)[0]\r\n    assert np.all(data == data_memmap)\r\n    assert np.all(header == header_memmap)\r\n```', 'comment_created': datetime.datetime(2022, 5, 4, 5, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 865083794, 'comment_body': ""Testing for value equality is not a useful test.  The way that memory mapping works in `astropy.io.fits` is that a `mmap.mmap` instance is created and then passed as a buffer to `np.ndarray()`.  What you need to do is to find and check the base buffer.  Here's a simple utility to check whether a `mmap.mmap` instance is being used:\r\n```python\r\ndef is_memmap(data):\r\n    if data.base is None:\r\n        return False\r\n    return isinstance(data.base, mmap.mmap) or is_memmap(data.base)\r\n```\r\nBe aware that reading in a FITS file that uses image compression or image scaling will – by default – defeat memory mapping and create the whole data array in memory.  To disable image compression, you'd pass in `disable_image_compression=True`.  To disable image scaling, you'd pass in `do_not_scale_image_data=True`.\r\n\r\n~As an aside, you shouldn't use sample data like `AIA_171_IMAGE` for unit tests.  We have specific test files.~"", 'comment_created': datetime.datetime(2022, 5, 4, 17, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 865087303, 'comment_body': 'Just to note (as I made the same assumption), the `AIA_171_IMAGE` is actually a test file. ', 'comment_created': datetime.datetime(2022, 5, 4, 17, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 865090341, 'comment_body': ""Oh, sorry, okay.  The variable shouldn't be named that to avoid confusion for code maintenance.  (But that's not the fault of this PR.)"", 'comment_created': datetime.datetime(2022, 5, 4, 17, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 865134645, 'comment_body': 'It does need to be renamed and we can do it in this PR.', 'comment_created': datetime.datetime(2022, 5, 4, 18, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 866109019, 'comment_body': ""> To disable image compression, you'd pass in `disable_image_compression=True`. To disable image scaling, you'd pass in `do_not_scale_image_data=True`\r\n\r\nPass them to the `sunpy.io._fits.read()` or `sunpy.io.read_file()` function? (I don't find anything related to these arguments in the sunpy documentation)"", 'comment_created': datetime.datetime(2022, 5, 5, 16, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 866131256, 'comment_body': ""\\<sigh\\>  Apparently neither.  For some reason, `sunpy.io._fits.read()` (which is called by `sunpy.io.read_file()`) fails to pass `kwargs` on to the `astropy.io.fits.open()` call.  \r\n\r\nFortunately, you don't need to disable either for the AIA test file, so it's not necessary for this PR."", 'comment_created': datetime.datetime(2022, 5, 5, 17, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 866155869, 'comment_body': 'I have a PR for this issue: https://github.com/sunpy/sunpy/pull/6123 ', 'comment_created': datetime.datetime(2022, 5, 5, 17, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 866496872, 'comment_body': '> def is_memmap(data):\r\n\r\nCan I add this function somewhere and then import it into the test files? (I will try to test the same thing without a util function.)', 'comment_created': datetime.datetime(2022, 5, 6, 5, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 866499631, 'comment_body': 'Yes that is ok.', 'comment_created': datetime.datetime(2022, 5, 6, 5, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 866530943, 'comment_body': '> It does need to be renamed and we can do it in this PR.\r\n\r\n\r\n- `RHESSI_IMAGE` to `TEST_RHESSI_IMAGE`\r\n- `AIA_171_IMAGE` to `TEST_AIA_IMAGE`\r\n- `EIT_195_IMAGE` to `TEST_EIT_HEADER`\r\n- `SWAP_LEVEL1_IMAGE` to `TEST_SWAP_HEADER` \r\n\r\nShould I do these renames?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 866532667, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 5, 6, 6, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867003009, 'comment_body': 'Do we need both asserts and the `or`?', 'comment_created': datetime.datetime(2022, 5, 6, 16, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867003237, 'comment_body': 'Do we not want to check the data is memory mapped? ', 'comment_created': datetime.datetime(2022, 5, 6, 16, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867007825, 'comment_body': ""Only the FITS reader supports the `memmap` kwarg, so whether the data is actually memory mapped or not doesn't depend on the value of `memmap` passed."", 'comment_created': datetime.datetime(2022, 5, 6, 16, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 867008597, 'comment_body': 'Right, I for some reason thought this was a fits file. ', 'comment_created': datetime.datetime(2022, 5, 6, 16, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867009819, 'comment_body': ""As the default for astropy's fits reader is to use memmap, this test would also pass if `memmap=True` was not included in this function call. Should we also be testing that `memmap=False` *doesn't* do memory mapping?"", 'comment_created': datetime.datetime(2022, 5, 6, 16, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 867061768, 'comment_body': 'Yes, we definitely should test `memmap=False` as well.', 'comment_created': datetime.datetime(2022, 5, 6, 18, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 867064208, 'comment_body': ""We don't need to check `isinstance(data.base, np.memmap)`.  `astropy.io.fits.open()` uses only `mmap.mmap`, so this unit test doesn't need to anticipate a possible future where `np.memmap` might be used."", 'comment_created': datetime.datetime(2022, 5, 6, 18, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ayshih', 'type': 'User'}, {'comment_id': 867304929, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 5, 7, 5, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 867306564, 'comment_body': 'Sure, I also added a test for FITS reader memory mapping by default i.e, without a `memmap` argument, is that good?', 'comment_created': datetime.datetime(2022, 5, 7, 5, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 867316047, 'comment_body': 'Can we check that this array is not memory mapped? ', 'comment_created': datetime.datetime(2022, 5, 7, 7, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867316058, 'comment_body': 'Do we need this?', 'comment_created': datetime.datetime(2022, 5, 7, 7, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867316078, 'comment_body': 'Do we need this?', 'comment_created': datetime.datetime(2022, 5, 7, 7, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867317476, 'comment_body': ""Oh, we don't need that, whenever the `data.base` is `None` the test will fail."", 'comment_created': datetime.datetime(2022, 5, 7, 7, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 867319350, 'comment_body': 'One question arises, Do we need memmap testing for `ana` and `jp2` readers if only the FITS reader supports it?', 'comment_created': datetime.datetime(2022, 5, 7, 7, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 867359382, 'comment_body': ""We should at at least check the keyword doesn't error and the array is not a memory map. "", 'comment_created': datetime.datetime(2022, 5, 7, 14, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867361356, 'comment_body': 'I added the following, is it correct?', 'comment_created': datetime.datetime(2022, 5, 7, 14, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 867364473, 'comment_body': 'Yeah', 'comment_created': datetime.datetime(2022, 5, 7, 15, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': '22930f3af55948d543338136569ed9c1fb97392f', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80a323093291cfe27a775a134670d24f04404722', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4b2f7144931e273b1576a96ae26033b835f599a', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59b201e3adb83862d707a4eb708665879a539ba5', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df36512b520be3efc9cc36ae44aacf7472c9b71e', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1258997ec257dd334ab4917d3c01b2f68ff3c6f1', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad0268d7c2086d0040dc3c8626176df25f6c95f8', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e0320defde6bbf3ecea4e2e51fe14560329f24b', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b14626f756bd7818b14e4176e42c466ed115ace4', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bf52549a278db3974d727408fc236703431fa34', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17d55ad2b3b811a2f8b17a672197020c4d470577', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e2e8a3313f6d4dbdaadf77f6aef51f29749f87', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '320a7e7318b3393b7de9e35b1ac8a4068bf2d39b', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af9e79a62785cd610a136e4ea3fde77cf6bef1ed', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f20ce4020007e54679e7c2221ed5eee17509d7a4', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ef8fc9b48c519881c473e08b99779e9bdf1484', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf652026bf020da9515f4d4d86da56ab41cfc6dc', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b6531fe7ea0a860132ac256df98ef1c4c357563', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfbc01119e48813a76ca2bcc04738faaaf039499', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aa307cc58168e0314a45a20a7bdbdf0243d39dc', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46ea4e8392df1c61950b0bf188443bc00af98dce', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bb2c73511fe5fb4fb4e660f27bc2c73579123d8', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea3b16ff8e9fd4b1ab5db822855fb02050865ffe', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0028aa936e7d9a72dedc42d5950107eaa3455ccf', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '685ff45941879a6f45b0c573681bda61c22b7016', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
929461663,Adds a script for updating vendored code in `sunpy/extern`,"## PR Description
This PR is an attempt to close #6094

This PR will add a script in the `sunpy/tools` that will be used to update vendor code automatically, by the person doing a release. Executing this script will update all python files in `sunpy/sunpy/extern`.",True,6127,https://api.github.com/repos/sunpy/sunpy/pulls/6127,https://github.com/sunpy/sunpy/pull/6127,closed,54,0,2,44,24,105,2,0,"[{'name': 'Infrastructure'}, {'name': 'No Backport'}]",2022-05-06 08:30:40+00:00,2022-05-25 14:44:45+00:00,1664045.0,"19 days, 6:14:05","[{'comment_id': 867441280, 'comment_body': 'Do we need one function per library? ', 'comment_created': datetime.datetime(2022, 5, 8, 6, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867441338, 'comment_body': 'Does this need to be seperate?', 'comment_created': datetime.datetime(2022, 5, 8, 6, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867441572, 'comment_body': 'What about using tags instead?', 'comment_created': datetime.datetime(2022, 5, 8, 6, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 867448260, 'comment_body': 'Earlier I thought the same thing. But the problem is, that the file which needs to be extracted from the source distribution is not the same for every package. \r\nFor example, in `appdirs`, we need `appdirs/appdirs.py` but in `inflect`, we need `inflect/inflect/__init__.py`.\r\nfor `distro` we need `src/distro/distro.py`, for `parse` we need `/parse.py`. \r\nI thought that having a different function to extract the required `.py` for each package will be better than having a single complicated function.\r\n\r\nIf there is any better way we can work out, I will do it.\r\n\r\nEdit: Yes I feel like repeating code so searching for a better way. I will push the solution soon. ', 'comment_created': datetime.datetime(2022, 5, 8, 7, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 867449059, 'comment_body': 'I am not sure what you mean, but this function returns the latest `version tag` of the package.\r\n```py\r\nreturn response.json()[""tag_name""]\r\n```\r\nFor example, using this endpoint: https://api.github.com/repos/sunpy/sunpy/releases/latest we can get `""tag_name"": ""v4.0.0""`', 'comment_created': datetime.datetime(2022, 5, 8, 7, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 867508745, 'comment_body': 'Sounds good.', 'comment_created': datetime.datetime(2022, 5, 8, 15, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869312165, 'comment_body': ""I am not sure, but this makes accessing authors easy otherwise we have to hardcode the author's name. "", 'comment_created': datetime.datetime(2022, 5, 10, 14, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 869327528, 'comment_body': ""Rather than having to write the package names twice, you can access them using the keys of the authors dictionary. My thinking is making sure it's easy to update this script when we add a new package to the extern directory."", 'comment_created': datetime.datetime(2022, 5, 10, 14, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 869355437, 'comment_body': 'Sure, I will do that.', 'comment_created': datetime.datetime(2022, 5, 10, 15, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 869369867, 'comment_body': 'Having the keys as part of the `PACKAGES` list still means two updates if adding another package as you would have to update the `PACKAGES` list and add a `PACKAGES[4]` key to the `AUTHORS` dictionary. What I\'m thinking is that, since we have single file packages maybe we could have a dictionary such as:\r\n\r\n```py\r\nPACKAGES = {\r\n    ""inflect"": [""jaraco"", ""inflect/__init__.py""],\r\n    ...\r\n}\r\n```\r\nThis tells us the package name, the author, and the file within the package that we want to copy to `sunpy/extern/<package name>.py`. If that works, it should mean that we could remove the package specific code from the script (i.e. remove `update_extern` and move that logic to `move_file`), and if we ever want to vendor a new package into extern it should be as simple as adding it to the `PACKAGES` dictionary and running this script.', 'comment_created': datetime.datetime(2022, 5, 10, 15, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 869372405, 'comment_body': 'If it does, we should delete it and redownload it. ', 'comment_created': datetime.datetime(2022, 5, 10, 15, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869375592, 'comment_body': ""I hadn't read this comment before the push, but I tried to use a single dictionary."", 'comment_created': datetime.datetime(2022, 5, 10, 15, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 869377657, 'comment_body': 'What does this do?', 'comment_created': datetime.datetime(2022, 5, 10, 15, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869384664, 'comment_body': '```suggestion\r\nAdded a script in the ``sunpy/tools`` that will update all the Python libraries in ``sunpy/extern``.\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869385216, 'comment_body': 'The file name should be `changelog/6127.trivial.rst`', 'comment_created': datetime.datetime(2022, 5, 10, 15, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869385561, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869386022, 'comment_body': '```suggestion\r\nUpdates all the libraries in ``sunpy/extern``\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869386149, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869386875, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869387357, 'comment_body': 'This seems like it can be one function or one block of code? \r\n\r\nIdeally we should reduce the number of functions. ', 'comment_created': datetime.datetime(2022, 5, 10, 15, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869388121, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869388228, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869388320, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869388409, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869388523, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869388612, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869389508, 'comment_body': 'This function as it stands is too complex, we need to simplify it. ', 'comment_created': datetime.datetime(2022, 5, 10, 15, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869399878, 'comment_body': ""I don't see why we need to check this? "", 'comment_created': datetime.datetime(2022, 5, 10, 15, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869401109, 'comment_body': 'I am with Conor on this, that we we store the information we need in the dict, the author, the files we need to copy over and it should make the script simpler. ', 'comment_created': datetime.datetime(2022, 5, 10, 15, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869408830, 'comment_body': 'Okay, I will explain what I tried to do.\r\n\r\n1. we check that this [dict](https://github.com/sunpy/sunpy/pull/6127/files#diff-bb5c4cdf80ea20b4ae8f8db4b6d8d12e88e1d32f16f2b545ca551accf32f70d4R18) has correct keys and value. If the key-value pair are wrong, show error to the user and exit. \r\n ```py\r\n # Check if the packages exist\r\n    if not package_exists():\r\n        print(""Exiting..."")\r\n        exit()\r\n```\r\n\r\n2. we make a download URL using `get_download_url()` and use that URL to download `.zip` with `download_package()` then unzip it in a temporary directory \r\n```py\r\n    for package in PACKAGES:\r\n        # get the url of the package\r\n        url = get_download_url(PACKAGES[package], package, get_latest_version(PACKAGES[package], package))\r\n\r\n        # download the package\r\n        download_package(url, package)\r\n\r\n        # Open the zip file\r\n        unzip(f""extern_pkg/{package}.zip"")\r\n```\r\n\r\n3. we get names of all the `top-folder` inside that temporary directory in a `list`.\r\nfor example,\r\n```\r\nTemporary Directory\r\n├── \uf115 appdirs-1.4.4\r\n│  ├── \ue606 appdirs.py\r\n│   ...\r\n├── \uf115 distro-1.7.0\r\n│  ├── \uf48a CHANGELOG.md\r\n│   ...\r\n├── \uf115 inflect-5.6.0\r\n│  ├── \uf016 CHANGES.rst\r\n│   ...\r\n└── \uf115 parse-1.19.0\r\n   ├── \uf016 LICENSE\r\n   ├── \ue606 parse.py\r\n    ...\r\n```\r\nIn this dir, we store to names of packages in a list. \r\nSo, the list `folders` will be \r\n`folders = [""appdirs-1.4.4"",""distro-1.7.0"",""inflect-5.6.0"",""parse-1.19.0""]`\r\n\r\n```py\r\n    folders = list()\r\n    for root, dirs, files in os.walk(""extern_pkg""):\r\n        folders = dirs\r\n        break\r\n```\r\nAnd we don\'t need to sort this. (This was something related to old code where I used PACKAGES and AUTHORS, but now it\'s a single dictionary, so I will remove this in the next commit.)\r\n```py\r\n    # Sort the packages in alphabetical order\r\n    folders.sort()\r\n```\r\n\r\nNow we use that `list` to extract (move) the required python files, that will be done with `update_extern()` function.\r\n\r\n```py\r\n    # Extract the files\r\n    for folder in folders:\r\n        update_extern(folder)\r\n```\r\n4. Finally remove the temporary directory.\r\n```py\r\n    # Remove the temporary directory\r\n    shutil.rmtree(""extern_pkg"")\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 15, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 869449193, 'comment_body': 'For `1.` it might be less code to verify the HTTP response code of the request that\'s already in `get_latest_version` instead, although as @nabobalis pointed out we should merge some of those functions.\r\n\r\nFor `3.` it may simplify things if we extracted directly into the `sunpy/extern` directory. For example, using [`extract`](https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.extract) instead of `extractall` you should be able to extract the single file only with `_______/sunpy/extern` as the path. Although you may need to delete the file if it exists, e.g.:\r\n\r\n```py\r\ndef update_package(package_name, author, src):\r\n    zip_filename = download_package(author, package_name)\r\n    dest = SUNPY_EXTERN_DIR / f""{package_name}.py""\r\n    if os.path.exists(dest):\r\n        os.remove(dest)\r\n    with ZipFile(zip_filename, ""r"") as zip_file:\r\n        zip_file.extract(src, path=SUNPY_EXTERN_DIR)\r\n\r\n\r\nfor package_name, (author, src) in PACKAGES.items():\r\n    update_package(package_name, author, src)\r\n```', 'comment_created': datetime.datetime(2022, 5, 10, 16, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 869463359, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2022, 5, 10, 16, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 869517693, 'comment_body': 'Yeah this is what we should do, to reduce the amount of code and the complexity of it. ', 'comment_created': datetime.datetime(2022, 5, 10, 17, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 869980938, 'comment_body': 'Yes, I will do that.', 'comment_created': datetime.datetime(2022, 5, 11, 7, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872208223, 'comment_body': 'Sorry for the late reply, I was busy with college assignments. \r\n\r\nIf we try to unzip particular files that would be great, and I wrote it!\r\n\r\nBut what if the `.py` file we unzipped is named `__init__.py`? \r\nFor example, In the case of `inflect` that would cause to replace the different file in `sunpy/extern`\r\nSo, can we extract it in the same temporary directory, rename and then move them?', 'comment_created': datetime.datetime(2022, 5, 13, 9, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872347974, 'comment_body': 'I doubt if it is possible to rename files during their extraction.', 'comment_created': datetime.datetime(2022, 5, 13, 12, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872409761, 'comment_body': 'Yeah, good point! That should work, if you extract without the path you should then be able to move the file separately to the extern directory. Updated example from above:\r\n```py\r\ndef update_package(package_name, author, src):\r\n    zip_filename = download_package(author, package_name)\r\n    with ZipFile(zip_filename, ""r"") as zip_file:\r\n        ext = zip_file.extract(src)\r\n    dest = SUNPY_EXTERN_DIR / f""{package_name}.py""\r\n    if os.path.exists(dest):\r\n        os.remove(dest)\r\n    shutil.move(ext, dest)\r\n\r\n\r\nfor package_name, (author, src) in PACKAGES.items():\r\n    update_package(package_name, author, src)\r\n```', 'comment_created': datetime.datetime(2022, 5, 13, 13, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 872424596, 'comment_body': '> \r\n```py\r\ndef update_package(package_name, author, src):\r\n    zip_filename = download_package(author, package_name)\r\n    with ZipFile(zip_filename, ""r"") as zip_file:\r\n        ext = zip_file.extract(src)\r\n    dest = SUNPY_EXTERN_DIR / f""{package_name}.py""\r\n    if os.path.exists(dest):\r\n        os.remove(dest)\r\n    shutil.move(ext, dest)\r\nfor package_name, (author, src) in PACKAGES.items():\r\n    update_package(package_name, author, src)\r\n```\r\n\r\nDo I have to use this exact or this is just an example?', 'comment_created': datetime.datetime(2022, 5, 13, 13, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872427336, 'comment_body': ""No, it's just an example. It would probably need some other things to make it work properly."", 'comment_created': datetime.datetime(2022, 5, 13, 13, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 872429536, 'comment_body': 'Yes, for some reason I thought you want me to use this code.', 'comment_created': datetime.datetime(2022, 5, 13, 13, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872499517, 'comment_body': ""I don't see why it wouldn't be simple enough to extract it and then rename it? We can also add that info to the DICT or a named tuple."", 'comment_created': datetime.datetime(2022, 5, 13, 15, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 872502420, 'comment_body': '> We can also add that info to the DICT\r\n\r\nShould I name them as the name of package?\r\n\r\n```py\r\n""inflect"": [""jaraco"", ""inflect/__init__.py""]\r\n```\r\nSo this will become, `inflect.py`\r\n', 'comment_created': datetime.datetime(2022, 5, 13, 15, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872511258, 'comment_body': 'Why not the same name as the files already in sunpy/extern?', 'comment_created': datetime.datetime(2022, 5, 13, 15, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 872519242, 'comment_body': 'Because for example, in case of inflect the file name is __init__.py and not inflect.py', 'comment_created': datetime.datetime(2022, 5, 13, 15, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872522230, 'comment_body': 'Right. But we already have names for them in sunpy. ', 'comment_created': datetime.datetime(2022, 5, 13, 15, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 872522521, 'comment_body': '@nabobalis, do you mean have e.g. `""inflect"": [""jaraco"", ""inflect/__init__.py"", ""inflect.py""]` in the dictionary, where the last value is the name of the file in extern to replace? I think they might all be the name of the package already but maybe it would be good to have the flexibility as the package name doesn\'t always need to be the import name.', 'comment_created': datetime.datetime(2022, 5, 13, 15, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 872524064, 'comment_body': '> @nabobalis, do you mean have e.g. `""inflect"": [""jaraco"", ""inflect/__init__.py"", ""inflect.py""]` in the dictionary, where the last value is the name of the file in extern to replace? I think they might all be the name of the package already but maybe it would be good to have the flexibility as the package name doesn\'t always need to be the import name.\r\n\r\nThat works, or we have renamed them in extern already and that is another possible choice. ', 'comment_created': datetime.datetime(2022, 5, 13, 15, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 872526232, 'comment_body': '> Right. But we already have names for them in sunpy.\r\n\r\nYes, doing this will give us the same result, because `__init__.py` will be renamed as `inflect.py` & `distro.py`, `parse.py`, and `appdirs.py` will remain the same.', 'comment_created': datetime.datetime(2022, 5, 13, 15, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872528639, 'comment_body': '> > Right. But we already have names for them in sunpy.\r\n> \r\n> Yes, doing this will give us the same result, because `__init__.py` will be renamed as `inflect.py` & `distro.py`, `parse.py`, and `appdirs.py` will remain the same.\r\n\r\nSure, is that a problem?', 'comment_created': datetime.datetime(2022, 5, 13, 15, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 872532631, 'comment_body': '> Sure, is that a problem?\r\n\r\nNo.', 'comment_created': datetime.datetime(2022, 5, 13, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872741749, 'comment_body': 'I think using `package` as the loop variable here will override the `package` given as an argument to the function. Does this work when you test the script? Also, `download_package` is checking all of the packages every time the function is called rather than just the package being downloaded.', 'comment_created': datetime.datetime(2022, 5, 13, 19, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 872747679, 'comment_body': 'If we wanted to include a new package, e.g. `foo`, and its file was called `bar.py`, we would also have to update this code to have `if file == ""__init__.py or file == ""bar.py"":`. However, I think this should work with all cases where the package to import has the same name as the GitHub repository:\r\n```suggestion\r\n                package = root.split(""/"")[-1]\r\n                move(os.path.join(root, file), os.path.join(\r\n                    SUNPY_DIR, ""sunpy"", ""extern"", f""{package}.py""))\r\n```', 'comment_created': datetime.datetime(2022, 5, 13, 19, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 872840680, 'comment_body': 'Hi @akash5100, sorry I have just realised in the original issue I forgot to mention that the `modest_image.py` file needs to be updated (as it was buried within the `glue` package). I tried including it in the list of packages although currently the script would have copied it to extern as `glue.py` rather than `modest_image.py`. \r\n\r\nI think the following convention for the dictionary of packages might make more sense going forward, i.e. keys are unique names for the files in the extern directory, and the values are lists of where to find the file: [user, repository, path]. That way it would be possible to update two separate files taken from the same GitHub repository.\r\n```suggestion\r\nPACKAGES = {\r\n    ""appdirs"": [""ActiveState"", ""appdirs"", ""appdirs.py""],\r\n    ""distro"": [""python-distro"", ""distro"", ""src/distro/distro.py""],\r\n    ""inflect"": [""jaraco"", ""inflect"", ""inflect/__init__.py""],\r\n    ""modest_image"": [""glue-viz"", ""glue"", ""glue/external/modest_image.py""],\r\n    ""parse"": [""r1chardj0n3s"", ""parse"", ""parse.py""],\r\n}\r\n```\r\n\r\nI do still think we should simplify the script by instead updating one file at a time. That way we wouldn\'t need to walk through directories to find the file we want to copy across, as we can keep track of everything inside the function based on the return values (see how I got the path to the extracted file in https://github.com/sunpy/sunpy/pull/6127#discussion_r872409761). What I\'m thinking is a function:\r\n\r\n```py\r\ndef download_github_file(user, repo, src, dest):\r\n```\r\n\r\nwhere `user` and `repo` are the GitHub username and repository where the file is present, `src` is the path to the file within the GitHub repository, and `dest` is where to download the file to (e.g. `/Users/username/sunpyrepo/sunpy/extern/name.py`). This function could then be called in a `for` loop for each entry in the `PACKAGES` dictionary as shown in https://github.com/sunpy/sunpy/pull/6127#discussion_r872409761. \r\n\r\nSorry for the last minute change, although I think this is a great opportunity to create a function that can grab a file from a GitHub repository and place it in any directory you like!! Therefore the function itself could be used by other projects and not just SunPy! 😀 ', 'comment_created': datetime.datetime(2022, 5, 13, 21, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 872875533, 'comment_body': ""I actually think in this case, we can remove `modest_image.py`, I can't find where it is imported anymore. I suspect it was needed when we had the animation source code in sunpy but now we dont."", 'comment_created': datetime.datetime(2022, 5, 13, 22, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 872952471, 'comment_body': ""Oh yes, That's a mistake by me."", 'comment_created': datetime.datetime(2022, 5, 14, 8, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 872978537, 'comment_body': ""I think modest image was only used by the animators and it's now in `mpl-animators` and I forgot to remove it from here."", 'comment_created': datetime.datetime(2022, 5, 14, 13, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Cadair', 'type': 'User'}, {'comment_id': 877766894, 'comment_body': 'Can we not just use Parfive (the sunpy downloader Fido uses it) instead of having to use requests and tqdm?', 'comment_created': datetime.datetime(2022, 5, 20, 6, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 877767078, 'comment_body': ""```suggestion\r\n```\r\nWe don't need this. "", 'comment_created': datetime.datetime(2022, 5, 20, 6, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 877767256, 'comment_body': '```suggestion\r\n# ""package_name"": [""user"", ""repository"", ""path_to_file""]\r\n```\r\n?', 'comment_created': datetime.datetime(2022, 5, 20, 6, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 877771859, 'comment_body': 'You can see how to use it here: https://github.com/Cadair/parfive#readme', 'comment_created': datetime.datetime(2022, 5, 20, 6, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878696415, 'comment_body': 'We should be able to replace this with:\r\n```suggestion\r\n    with ZipFile(zip_file, ""r"") as f:\r\n        folder = Path(f.namelist()[0]).parts[0]\r\n        ext = f.extract(Path(folder) / src, ""extern_pkg"")\r\n    dest = Path(dest)\r\n    if dest.exists() and dest.is_file():\r\n        os.remove(dest)\r\n    shutil.move(ext, dest)\r\n```\r\n\r\nAnd then delete the `def get_zip_file():` and `def move():` functions. To make this general, `f""{dest}/{package_name}.py""` should be set outside the function, which you are already doing at the end of the script.', 'comment_created': datetime.datetime(2022, 5, 21, 13, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878696704, 'comment_body': 'This should make it clearer what is being passed to the function:\r\n```suggestion\r\n    for package, (user, repo, src) in PACKAGES.items():\r\n        dest = SUNPY_EXTERN_DIR / f""{package}.py""\r\n        download_github_file(user, repo, src, dest)\r\n```\r\nI\'ve also updated `SUNPY_DIR` to `SUNPY_EXTERN_DIR` at the top of the script.', 'comment_created': datetime.datetime(2022, 5, 21, 13, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878696830, 'comment_body': 'This should make this the extern directory itself as it\'s the only directory we need here:\r\n```suggestion\r\nSUNPY_EXTERN_DIR = Path(__file__).parent / ""extern""\r\n```', 'comment_created': datetime.datetime(2022, 5, 21, 13, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878697033, 'comment_body': 'I don\'t think we need the `try` `except` here as we are catching all exceptions, printing them and then exiting, which is what python does by default.\r\n```suggestion\r\n        url = f""https://api.github.com/repos/{user}/{repo}/tags""\r\n        response = requests.get(url)\r\n        version = response.json()[0][""name""]\r\n```', 'comment_created': datetime.datetime(2022, 5, 21, 13, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878697537, 'comment_body': 'We can raise an error here. Calling `exit()` (rather than `exit(1)`) would exit with an exit code that suggests it the script ran successfully.\r\n```suggestion\r\n        raise ValueError(f""{user}/{repo} does not exist."")\r\n```', 'comment_created': datetime.datetime(2022, 5, 21, 13, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878697687, 'comment_body': 'Not needed inside a context manager:\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 21, 13, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878702600, 'comment_body': 'Yeah, `requests` is a third party packages that SunPy does not directly depend on, so ideally it would be better to use `parfive` to download the zip file and [`urllib.request`](https://docs.python.org/3/library/urllib.request.html#module-urllib.request) from the Python Standard Library for getting the HTTP response to parse as JSON.', 'comment_created': datetime.datetime(2022, 5, 21, 14, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878718914, 'comment_body': 'Is this something we should hit anyway? ', 'comment_created': datetime.datetime(2022, 5, 21, 16, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878719996, 'comment_body': ""Probably not. If the package doesn't exist the download will fail anyway."", 'comment_created': datetime.datetime(2022, 5, 21, 16, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878932895, 'comment_body': 'Why is this here? ', 'comment_created': datetime.datetime(2022, 5, 22, 22, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878932927, 'comment_body': ""Can't you return files here?"", 'comment_created': datetime.datetime(2022, 5, 22, 22, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878932936, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 22, 22, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878932937, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 22, 22, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878932963, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 22, 22, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878932973, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 5, 22, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878933073, 'comment_body': 'Oh, I missed that', 'comment_created': datetime.datetime(2022, 5, 22, 22, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878933091, 'comment_body': 'Should this not be in the main part at the bottom? ', 'comment_created': datetime.datetime(2022, 5, 22, 22, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878933151, 'comment_body': 'Do we need to remove it? Does `shutil.move` not just override it?', 'comment_created': datetime.datetime(2022, 5, 22, 22, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878933193, 'comment_body': '```suggestion\r\n        download_github_file(user, repo, src, SUNPY_EXTERN_DIR / f""{package}.py"")\r\n```', 'comment_created': datetime.datetime(2022, 5, 22, 22, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878933283, 'comment_body': ""I think they all have releases so the tags code isn't run. But we should probably keep it anyway."", 'comment_created': datetime.datetime(2022, 5, 22, 22, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878933644, 'comment_body': ""But this is only for one package? It isn't checking the tags for each project that I can see.\r\n\r\nMaybe we should fallback to tags if no release is found for each project?"", 'comment_created': datetime.datetime(2022, 5, 22, 22, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 878933655, 'comment_body': 'It raises an error if run on Windows I think.', 'comment_created': datetime.datetime(2022, 5, 22, 22, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878934934, 'comment_body': 'Just so we can double check we are not downloading a prerelease version:\r\n```suggestion\r\n\r\n    print(f""Downloading {user}/{repo}:refs/tags/{version}"")\r\n```', 'comment_created': datetime.datetime(2022, 5, 22, 22, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878935247, 'comment_body': 'It is doing that, just `f""https://api.github.com/repos/ActiveState/appdirs/tags""` should be `f""https://api.github.com/repos/{user}/{repo}/tags""`. I tried `raise ValueError()` in that code branch and the error wasn\'t raised so it found a release for all.', 'comment_created': datetime.datetime(2022, 5, 22, 22, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 878935888, 'comment_body': 'Should probably use a `tempfile.mkdtemp` instead inside the `download_package` function and then inside `download_github_file` do `ext = f.extract(f""{folder}/{src}"", zip_file.parent)`.', 'comment_created': datetime.datetime(2022, 5, 22, 22, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ConorMacBride', 'type': 'User'}, {'comment_id': 879057055, 'comment_body': 'If we need to fall back to tags, would using the tags not be a better place to start?', 'comment_created': datetime.datetime(2022, 5, 23, 6, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 879057267, 'comment_body': 'Fair enough.', 'comment_created': datetime.datetime(2022, 5, 23, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 880865644, 'comment_body': 'Can we combine both dictionaries? ', 'comment_created': datetime.datetime(2022, 5, 24, 19, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 880866237, 'comment_body': 'Package_name is now filename? ', 'comment_created': datetime.datetime(2022, 5, 24, 19, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 880867078, 'comment_body': 'So we need this block of code? ', 'comment_created': datetime.datetime(2022, 5, 24, 19, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': '2ae08ef8b3dd38a4a23cbf2bfbd1d5c30ac811ef', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8727c40542c9ae04395c2b60526c8f530ededf4b', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61b336340550a9aeb2ae22f17695dc3b7c818d54', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdb76a08afc957701f9c15760f63e123439a3d35', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8797f1e9cab254e31aa19c78092f00706fe76a59', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7fdbfc6fa484cefca3605683d09b5110222c229', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '658a3a7dc0560a49c953f06f15c656d0e61f209c', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb4505f0fa66a4f63d00f42512b5a8130fd6c4bf', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5cd65777496ff745700c352fc19897ba5a45665', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b115bb34a7f9e5b00c67fc41bc8d51695fbbc911', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e0675c3a0e24e77dac8e1bbcffcb5607026a73', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ffff42c6c8cbf6190c9bd95d9882e467aa04d9', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '118547c1235334fc62a081ddda0a8ace7db57e86', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d866f1d0c4dcbb9be202de08687caad3fbe81f7', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33ddc1086848257faddd293fb25c7d4b44652192', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f1954e15f8f9e0512913b7ed7d33f676901c6bd', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3606b405877cd4467230cfcf9b9151f7e09f98f', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '227e7df38e03520cda76981897e2da2fed34fb62', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b4d56531953270e7ac4a8814acac5b61951b85', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c9f6194720f1389cfe1599aa0845390bb221f26', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cd0a3cdcab56e823a86c258e0f86ddc253d8c5c', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bc763a61d57518b04190f4d6affdcf3a398f886', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e13f8690db8b778807f29ddddb870d95b921be4e', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89777c4d649f2c184e8f6690f037ece051d9da59', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b311e1c6c890893fc39780f746c399cb889c9c0', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd04300d373bcf9e6102d6e89ef25dcba267f6435', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c864f26ba9715b51865db354fcd10ae5fd3c5be2', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d8e0dff7e9f8099f8f995b3bd645def0dfe243c', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e825008b7dc00532fcc56a009e3549b53c8247e3', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76645db5bff11186e063ac4c6d75ee90d9a2530e', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c62334480cf40b045fb971582a00abee86738639', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c07d52c9ff1fc0406830204f15d0b8546674dd6', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ada224734d56ac5cc8495cb1a56535144b2c35c', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '130b5d5acbdeb202dd0b54d9ff268dbc0e1b22d8', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c5d2b9d4505ab96825f56444552ba3d33ed2788', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a528448e40b18fd6a3b21eb612033d07a4636094', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ed619621a31190d911a120f74f24b1594866982', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd97e0792ac643f8ce5dc932ada1d40f48730aaa5', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479438caa176e6b7d19eef098b02fad30ee3e7eb', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b13813bce48c9c2933c88df93e8a965bbede3275', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5b54ece635627806cc0fba4c51dd31231c804ff', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acd2b0676763cc9b3f946832781dcb066ac76893', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5eac9f6375ac0e020fbd65d46cf77106d6553d', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28983fc9cc3b73a7b160fc83588b63e2476688c1', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
1025721918,downloadMovie endpoint,* closes #12 ,True,57,https://api.github.com/repos/Helioviewer-Project/python-api/pulls/57,https://github.com/Helioviewer-Project/python-api/pull/57,closed,96,1,5,4,2,9,0,1,[],2022-08-14 04:41:40+00:00,2022-08-14 06:08:36+00:00,5216.0,1:26:56,"[{'comment_id': 945228507, 'comment_body': 'The api doc string has the values this can be set to.', 'comment_created': datetime.datetime(2022, 8, 14, 4, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 945228520, 'comment_body': 'This seems to be missing some of the text from the api page docs.', 'comment_created': datetime.datetime(2022, 8, 14, 4, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 945228602, 'comment_body': ""```suggestion\r\n    hq: bool = False\r\n```\r\n`Optional` is only if the value can be set to `None`, it does not mean if its optional from a user's point of view. "", 'comment_created': datetime.datetime(2022, 8, 14, 4, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 945228759, 'comment_body': '```suggestion\r\nfrom hvpy.api_groups.movies.download_movie import downloadMovieInputParameters\r\n```', 'comment_created': datetime.datetime(2022, 8, 14, 4, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 945228898, 'comment_body': 'Okay, understood\r\nBecause in the facade function we already have the Optional parameter, right?\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 14, 4, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 945232687, 'comment_body': '```suggestion\r\n        Movie Format (""mp4"", ""webm"", or ""flv"").\r\n```', 'comment_created': datetime.datetime(2022, 8, 14, 5, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 945232722, 'comment_body': '```suggestion\r\n        Download a higher-quality movie file (valid for ""mp4"" movies only, ignored otherwise).\r\n```', 'comment_created': datetime.datetime(2022, 8, 14, 5, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 945232844, 'comment_body': 'No. You set the default value, that makes it optional. ', 'comment_created': datetime.datetime(2022, 8, 14, 5, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 945233632, 'comment_body': '```suggestion\r\n    hq: bool = False,\r\n```', 'comment_created': datetime.datetime(2022, 8, 14, 5, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': 'faa3f598c2f168ff2baafe551bb06602a55b3f14', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd7ab2f2d0d6e807b930b494d137174e6457c42', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb4ef9e756baa987cc11bd0f2d91eb8d0595300', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '085b4091345085e853c1f7580d5caf8059d81750', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
1026814646,shortenURL and getNewsFeed endpoint,"* closes #19 
* closes #20 ",True,58,https://api.github.com/repos/Helioviewer-Project/python-api/pulls/58,https://github.com/Helioviewer-Project/python-api/pull/58,closed,154,0,8,2,1,7,0,1,[],2022-08-15 19:53:00+00:00,2022-08-16 05:14:50+00:00,33710.0,9:21:50,"[{'comment_id': 946175834, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 8, 15, 22, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 946175927, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 8, 15, 22, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 946178327, 'comment_body': 'Does it return bytes?', 'comment_created': datetime.datetime(2022, 8, 15, 22, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 946178362, 'comment_body': 'Does it return bytes?', 'comment_created': datetime.datetime(2022, 8, 15, 22, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 946339360, 'comment_body': 'It does not but mypy throws an error: \r\n```\r\nhvpy/facade.py:500: error: Incompatible return value type (got ""Union[bytes, str, Dict[str, Any]]"", expected ""Union[str, Dict[str, Any]]"")\r\nhvpy/facade.py:524: error: Incompatible return value type (got ""Union[bytes, str, Dict[str, Any]]"", expected ""Union[str, Dict[str, Any]]"")\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 5, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 946340222, 'comment_body': 'I wonder why, something to fix later on.', 'comment_created': datetime.datetime(2022, 8, 16, 5, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 946340425, 'comment_body': 'Oh I see why, thats ok. ', 'comment_created': datetime.datetime(2022, 8, 16, 5, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': '8d976033508ad4741a8031e0ca800799550ebbf5', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '342e1aa819a5c147ec9ed6b7443e41bde9034afd', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
1027867360,Get tile,* closes #18 ,True,59,https://api.github.com/repos/Helioviewer-Project/python-api/pulls/59,https://github.com/Helioviewer-Project/python-api/pull/59,closed,178,0,4,10,2,7,0,1,[],2022-08-16 16:58:25+00:00,2022-08-17 17:55:10+00:00,89805.0,"1 day, 0:56:45","[{'comment_id': 947045457, 'comment_body': 'We need to check that this renders correctly in the documentation. ', 'comment_created': datetime.datetime(2022, 8, 16, 17, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 947049998, 'comment_body': 'No its all collapsed: https://hvpy--59.org.readthedocs.build/en/59/api/hvpy.getTile.html\r\nThe same is for the other paramater `diffTime`\r\n\r\nThis needs to be changed before a merge.', 'comment_created': datetime.datetime(2022, 8, 16, 17, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 947967986, 'comment_body': 'I missed this comment yesterday, fixed now.', 'comment_created': datetime.datetime(2022, 8, 17, 13, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 948184428, 'comment_body': 'Do these new lines need to be there?', 'comment_created': datetime.datetime(2022, 8, 17, 16, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 948238118, 'comment_body': 'Without a new line, it will collapse into one line just like before. We can try `\\n` or `<br />`, but will it work with sphinx doc? ', 'comment_created': datetime.datetime(2022, 8, 17, 17, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 948244391, 'comment_body': 'It needs a new line in-between each subitem?', 'comment_created': datetime.datetime(2022, 8, 17, 17, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 948253933, 'comment_body': 'yes, I tried without a line break between subitems earlier and it fails. ', 'comment_created': datetime.datetime(2022, 8, 17, 17, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}]","[{'commit_sha': '2be4ef26014a02b6e6cba06554e148bf90724265', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e9c89705d295f52f6ef6d23fd98a69d692b0177', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '601507a3040291e4f7bed91d576bc07e4dfcfc9f', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e7c60f0978b6d027b382ed8b1f1164b2792824', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3237a6d1b09d78a232434fef64644ad4bb7e0697', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddbf35d4d8928f3bda3edc0ea4840dba712fba3c', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '812f15dd6a9382e84dc4a72cd94c16aa0d470de0', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2c63b23b2bf1055d5dca6a6ed02eff7c368d3e', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24fcedd6bc7480da028f73370df4bae46571891e', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cb2080fc624f88d81790848d9fbeec732e07162', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
1029516304,Enum for Datasources,* closes #50 ,True,61,https://api.github.com/repos/Helioviewer-Project/python-api/pulls/61,https://github.com/Helioviewer-Project/python-api/pull/61,closed,571,0,4,12,4,5,0,1,[],2022-08-18 04:44:45+00:00,2022-08-20 16:56:17+00:00,216692.0,"2 days, 12:11:32","[{'comment_id': 948644781, 'comment_body': '```suggestion\r\nclass DataSources(Enum):\r\n```', 'comment_created': datetime.datetime(2022, 8, 18, 4, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 949290374, 'comment_body': 'A few more to add that are much more recent\r\n\r\n|    88 | GOES-R SUVI 94                  |\r\n|    89 | GOES-R SUVI 131                 |\r\n|    90 | GOES-R SUVI 171                 |\r\n|    91 | GOES-R SUVI 195                 |\r\n|    92 | GOES-R SUVI 284                 |\r\n|    93 | GOES-R SUVI 304                 |\r\n', 'comment_created': datetime.datetime(2022, 8, 18, 15, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dgarciabriseno', 'type': 'User'}, {'comment_id': 949293186, 'comment_body': 'Add a test where you query getDataSources endpoint and confirm that each ID returned is in the enum.', 'comment_created': datetime.datetime(2022, 8, 18, 15, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dgarciabriseno', 'type': 'User'}, {'comment_id': 949297952, 'comment_body': ""I can't add a comment, but can you also add `:no-inheritance-diagram:` to `.. automodapi:: hvpy`"", 'comment_created': datetime.datetime(2022, 8, 18, 15, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 950713283, 'comment_body': '```suggestion\r\n    source_ids = []\r\n    enum_values = [s_id.value for s_id in DataSources]\r\n    response = getDataSources()\r\n    find_nested_keys(response, ""sourceId"", source_ids)\r\n    for source_id in source_ids:\r\n        assert source_id in enum_values\r\n```', 'comment_created': datetime.datetime(2022, 8, 20, 16, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': 'c54e9501870437cb281586be16d3c6f1a0cae911', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a91ec52a69aa91d84f10ad99f2fbade1eb020bc', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '235dd05ce76a7ec839e91f5b47b8ff9f9c447cdd', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1d943ab6299d92244db11892827c4b2b65a4c97', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3c9e44613c6bbffae4583724b52ebe3b5334aff', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eb20e0cccc4b378d0b6d0fa92bd9783f221e6d6', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db74a3979a34178fbfa924d737f900a580d4a4bf', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f689c15cf054e3e61125a4292e9c906c862f8c2', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e7508076853219e86216cd2913b6372042dc54', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df8e94467d3049161db0527cc111b2164444c3c', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd14f99b2bb26671fe8d01a21f0f2ec4b4b092b28', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8f66f1465892a08cdd1b112feb371e9b7b6c934', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
1032943015,Generate layers string with `create_layers` function,* closes #43 ,True,65,https://api.github.com/repos/Helioviewer-Project/python-api/pulls/65,https://github.com/Helioviewer-Project/python-api/pull/65,closed,101,20,5,3,1,5,0,1,[],2022-08-22 14:38:38+00:00,2022-08-23 08:16:44+00:00,63486.0,17:38:06,"[{'comment_id': 951546634, 'comment_body': 'Can you use 999 instead of 123, I feel like we might actually reach 123 soon', 'comment_created': datetime.datetime(2022, 8, 22, 14, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dgarciabriseno', 'type': 'User'}, {'comment_id': 951546760, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 8, 22, 14, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 951548398, 'comment_body': 'Can you also test 101 as an invalid opacity, to test both sides.', 'comment_created': datetime.datetime(2022, 8, 22, 14, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dgarciabriseno', 'type': 'User'}, {'comment_id': 951570940, 'comment_body': '```suggestion\r\n        A list of tuples of the form (``source_id``, ``opacity``).\r\n```', 'comment_created': datetime.datetime(2022, 8, 22, 15, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 951573638, 'comment_body': '```suggestion\r\n        raise ValueError(f""opacity ({opacity}) must be between 0 and 100"")\r\n```', 'comment_created': datetime.datetime(2022, 8, 22, 15, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': 'ef3235ecd0305be7602c6eb35f8125516e5d856b', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75c6b4f3687ad46da5127a9d7fccdf79c19be35a', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '848c0d5689e8959bc92b406c32dec5e442eb2b9a', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
1033969917,`EventType` enum,* closes #62 ,True,70,https://api.github.com/repos/Helioviewer-Project/python-api/pulls/70,https://github.com/Helioviewer-Project/python-api/pull/70,closed,64,2,4,6,3,0,0,0,[],2022-08-23 10:28:51+00:00,2022-08-24 13:11:20+00:00,96149.0,"1 day, 2:42:29",[],"[{'commit_sha': '7cbab94316317f3da0e02f22d2fcf2821b9a6cbe', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e6b700c7eff648d93d425a9d6eedaba37d8105', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce474dd32ac6f3c8bce80beaaadad3914ff5794', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1b5385d508ea5146fb783d1d690fcd29745322', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c97cab9b2e4855acba7468df64bc89602993035b', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96537ed540100d14ed4b1bf08fabd41290d30a24', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
1035652268,Add `create_event` function to create event string,* closes #42 ,True,71,https://api.github.com/repos/Helioviewer-Project/python-api/pulls/71,https://github.com/Helioviewer-Project/python-api/pull/71,closed,95,8,4,9,1,4,0,1,[],2022-08-24 15:33:01+00:00,2022-08-29 15:15:23+00:00,430942.0,"4 days, 23:42:22","[{'comment_id': 953974407, 'comment_body': '```suggestion\r\n    assert _to_event_type(EventType.ACTIVE_REGION) == _to_event_type(""AR"") == EventType.ACTIVE_REGION\r\n```', 'comment_created': datetime.datetime(2022, 8, 24, 15, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 955094598, 'comment_body': 'Let\'s update this to take a list of tuples so that if users want to specify an FRM, they can.\r\n\r\nTuple will be (EventType, FRM_Methods: str)\r\n\r\nSo if you want all FRMs, don\'t pass in the FRM.\r\nIf you do want the FRM, then you can specify (ActiveRegion, ""SPoCA"")\r\n', 'comment_created': datetime.datetime(2022, 8, 25, 15, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dgarciabriseno', 'type': 'User'}, {'comment_id': 956752276, 'comment_body': 'We might not want to do this but its really handy.', 'comment_created': datetime.datetime(2022, 8, 28, 16, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 957447098, 'comment_body': ""Interesting find, I'll allow it."", 'comment_created': datetime.datetime(2022, 8, 29, 14, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dgarciabriseno', 'type': 'User'}]","[{'commit_sha': 'd12c676955cda24e72fc3631f414227d07848124', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d89d4b723ca4e4e4f9a42a7a48c5fd475ec9c3d', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ea5f3673f526cb53553e5cbee95b3ad79ce3e6c', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75318051e907578560e4fde0db5a228fedeb3085', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68eedd96846b41293f9e099a8363e96a594e718a', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a2f3c9e2bfbfd0708a10749ad4e374d7f93e59', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31b8790c4a2b1d4773ea51e5e49b30d7f8e2d490', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b2bbf5b277a71f7d7ce15a27421370d331a10f1', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84e098fba16fb1374e6ff6dc571819f8912d069d', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
1039971566,Save binary response with `save_file` function,* closes #67 ,True,72,https://api.github.com/repos/Helioviewer-Project/python-api/pulls/72,https://github.com/Helioviewer-Project/python-api/pull/72,closed,51,1,2,7,1,8,0,1,[],2022-08-29 17:08:36+00:00,2022-09-01 15:05:26+00:00,251810.0,"2 days, 21:56:50","[{'comment_id': 958623557, 'comment_body': 'This should be condensed, you should do the logic check once, raise the error or then write the file.', 'comment_created': datetime.datetime(2022, 8, 30, 15, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 959322648, 'comment_body': ""Overwrite should be false by default. It isn't optional aka none"", 'comment_created': datetime.datetime(2022, 8, 31, 8, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 959323157, 'comment_body': 'We should also check that filename works with a Path object', 'comment_created': datetime.datetime(2022, 8, 31, 8, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 959324501, 'comment_body': 'This should be around three lines of code, with one write command.', 'comment_created': datetime.datetime(2022, 8, 31, 8, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 959396702, 'comment_body': 'We accept `filename` as an `str` and string works with Path, how can we check it?', 'comment_created': datetime.datetime(2022, 8, 31, 9, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 959405436, 'comment_body': 'You pass in a Path object in a test and will need to update the type hint as well.', 'comment_created': datetime.datetime(2022, 8, 31, 10, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 959454029, 'comment_body': '```suggestion\r\n    if filename.exists() and not overwrite:\r\n        raise ValueError(f""{filename} already exists. Use overwrite=True to overwrite."")\r\n    filename.write_bytes(data)\r\n```', 'comment_created': datetime.datetime(2022, 8, 31, 11, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 959454443, 'comment_body': '```suggestion\r\ndef save_file(data: bytearray, filename: Union[Path, str], overwrite: bool = False) -> None:\r\n```\r\nI think you will need to import Union', 'comment_created': datetime.datetime(2022, 8, 31, 11, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': '703eb432da7ccba6e4652115668bcd2778128d77', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9369bcb01d4459ef0a9637ff40a11261a5ff6158', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e9785b1d3444c0accb795aa71f3a2e3c7ca1bd', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14963d5619040d1e73b1aefbfe1073a0ba9113d3', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80a13b69f23751510d201ae8e82f8d5161409cbb', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ff4f84d4639599cae2d9157e04344a6c1090783', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee8e60e3a25d5373d252a494197ccde191844b91', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43
1045111725,Adds `createMovie` function to generate movie ,* closes #63 ,True,73,https://api.github.com/repos/Helioviewer-Project/python-api/pulls/73,https://github.com/Helioviewer-Project/python-api/pull/73,closed,227,24,7,16,5,37,0,1,[],2022-09-02 16:45:56+00:00,2022-09-06 14:48:34+00:00,338558.0,"3 days, 22:02:38","[{'comment_id': 962267458, 'comment_body': '```suggestion\r\n    save_file(\r\n        data=binary_data,\r\n        filename=f""{filename}.{format}"",\r\n        overwrite=overwrite,\r\n    )\r\n```\r\n\r\nThis does not need a while loop or a try block', 'comment_created': datetime.datetime(2022, 9, 4, 7, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962267858, 'comment_body': ""I don't have a better idea, but I am not a fan of passing all of them like this again, we \r\ncheck if we can pass in *args and **kwargs but remove the extra keyword args used for the function later on."", 'comment_created': datetime.datetime(2022, 9, 4, 7, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962267888, 'comment_body': 'What is the purpose for this?', 'comment_created': datetime.datetime(2022, 9, 4, 7, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962267965, 'comment_body': '```suggestion\r\n    if res.get(""error""):\r\n        raise RuntimeError(res[""error""])\r\n```', 'comment_created': datetime.datetime(2022, 9, 4, 7, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962269180, 'comment_body': 'Oh, just checked it and I can safely remove it now. \r\nEarlier when I was trying it with `queueMovieInputParameter` the return type of is [Union](https://docs.python.org/3/library/typing.html#typing.Union)[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes), [str](https://docs.python.org/3/library/stdtypes.html#str), [Dict](https://docs.python.org/3/library/typing.html#typing.Dict)[[str](https://docs.python.org/3/library/stdtypes.html#str), [Any](https://docs.python.org/3/library/typing.html#typing.Any)]] and `mypy` throws an error. (So to fix the mypy error, created a check that `res` is a `dict`)', 'comment_created': datetime.datetime(2022, 9, 4, 7, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 962271003, 'comment_body': 'Can you please explain this more? 😅 ', 'comment_created': datetime.datetime(2022, 9, 4, 8, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 962271493, 'comment_body': 'You should be able to pass `*args` and `**kwargs**` as a call to this function. ', 'comment_created': datetime.datetime(2022, 9, 4, 8, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962272137, 'comment_body': 'Ok, lets remove it.', 'comment_created': datetime.datetime(2022, 9, 4, 8, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962298672, 'comment_body': 'Nice suggestion. ', 'comment_created': datetime.datetime(2022, 9, 4, 11, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 962299417, 'comment_body': 'Why is this continue?', 'comment_created': datetime.datetime(2022, 9, 4, 11, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962299534, 'comment_body': '```suggestion\r\n    input_params = locals()\r\n    # These are used later on but we want to avoid passing\r\n    # them into queueMovie.\r\n    input_params.pop(""overwrite"")\r\n    input_params.pop(""filename"")\r\n    input_params.pop(""hq"")\r\n    res = queueMovie(**input_params)\r\n```', 'comment_created': datetime.datetime(2022, 9, 4, 11, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962299712, 'comment_body': '```suggestion\r\n        filename = f""{startTime.isoformat()}_{endTime.isoformat()}.{format}""\r\n    else:\r\n        filename = f""{filename}.{format}""\r\n```', 'comment_created': datetime.datetime(2022, 9, 4, 11, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962299791, 'comment_body': '```suggestion\r\n        filename=filename,\r\n```', 'comment_created': datetime.datetime(2022, 9, 4, 11, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962299815, 'comment_body': '```suggestion\r\n    return Path(filename)\r\n```', 'comment_created': datetime.datetime(2022, 9, 4, 11, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962299896, 'comment_body': ""Do we want to sleep, when it's queued?"", 'comment_created': datetime.datetime(2022, 9, 4, 11, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 962299980, 'comment_body': ""I don't see why we would want to not sleep for 0 but sleep for 1. "", 'comment_created': datetime.datetime(2022, 9, 4, 11, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962315404, 'comment_body': 'I think there needs to be a timeout for this while loop.', 'comment_created': datetime.datetime(2022, 9, 4, 13, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962315447, 'comment_body': '```suggestion\r\n        if status[""status""] in [0, 1]:\r\n```', 'comment_created': datetime.datetime(2022, 9, 4, 13, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962810789, 'comment_body': ""I am not sure how long it can take but I can't imagine the timeout needing to be longer than a few minutes, maybe a keyword argument? "", 'comment_created': datetime.datetime(2022, 9, 5, 11, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962823517, 'comment_body': 'So the user will decide the timeout period?\r\n', 'comment_created': datetime.datetime(2022, 9, 5, 11, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 962825563, 'comment_body': 'We set a default and let a user change if they want.', 'comment_created': datetime.datetime(2022, 9, 5, 11, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962828776, 'comment_body': 'sure', 'comment_created': datetime.datetime(2022, 9, 5, 11, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 962857606, 'comment_body': 'Should we remove this check `(status == 3)`? \r\nBecause this only occurs when we provide an invalid `movie_id`, in our case we directly get it from the response. So I think it is impossible to hit this line, or maybe I am wrong.', 'comment_created': datetime.datetime(2022, 9, 5, 12, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 962859592, 'comment_body': ""Hmm, maybe if that's the case then. I think there isn't any harm in it being there. But we can let Daniel decide."", 'comment_created': datetime.datetime(2022, 9, 5, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962862625, 'comment_body': 'What should I do to maintain 100% coverage for this function? 👀 ', 'comment_created': datetime.datetime(2022, 9, 5, 12, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 962869464, 'comment_body': 'You write a test to hit that line.', 'comment_created': datetime.datetime(2022, 9, 5, 12, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962877234, 'comment_body': 'This should import from the modules directly and not the top level namespace. ', 'comment_created': datetime.datetime(2022, 9, 5, 12, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962878697, 'comment_body': '```suggestion\r\n    Automatically creates a movie using `queueMovie`,\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 12, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962878741, 'comment_body': '```suggestion\r\n    `getMovieStatus` and `downloadMovie` functions.\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 12, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962955012, 'comment_body': ""I don't really care if we leave it untested. "", 'comment_created': datetime.datetime(2022, 9, 5, 14, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 962969346, 'comment_body': 'Okay.  ', 'comment_created': datetime.datetime(2022, 9, 5, 14, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 962999242, 'comment_body': 'This still needs more info, either source id, event or instrument name.', 'comment_created': datetime.datetime(2022, 9, 5, 15, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 963030359, 'comment_body': ""What is an example value of `res['id']`? "", 'comment_created': datetime.datetime(2022, 9, 5, 16, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 963032593, 'comment_body': 'It is the source id of the movie. Eg `h2n6n`', 'comment_created': datetime.datetime(2022, 9, 5, 16, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'akash5100', 'type': 'User'}, {'comment_id': 963033067, 'comment_body': 'I think that will be ok for now, but I think we need to consider a better way of creating filenames in future. ', 'comment_created': datetime.datetime(2022, 9, 5, 16, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}, {'comment_id': 963798935, 'comment_body': ""Helioviewer.org's movie file names aren't much better\r\n`2022_08_10_03_39_41_2022_08_10_14_19_41_AIA_304-hq.mp4` \r\n\r\nI think this is ok for now. If the user wants a clean filename, they can specify it. Having the ID here guarantees it will be unique, so that's a good call.\r\n"", 'comment_created': datetime.datetime(2022, 9, 6, 14, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dgarciabriseno', 'type': 'User'}, {'comment_id': 963830497, 'comment_body': 'That is a filename alright. ', 'comment_created': datetime.datetime(2022, 9, 6, 15, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nabobalis', 'type': 'User'}]","[{'commit_sha': 'd70695bf6a4b048ebbf54993a0c4e7048986717c', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1d3a91f39231b907ef64739338e9e70ff6cd7d2', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7591bd5c1a662ab2d6eadb71ad2d8b8e0ee8226', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bf6c8fb1b7b904c9362d136a81348f67a0203e9', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '263badd750399cabe0f2e981f38b173035b6ff32', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ff4e74a69ae083a5e81a3635c5966c38baeb363', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6c058996e510525de6d3356d4e71c463e32f135', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cd20ac48c282c372de376cdd4c87df4db0855a1', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8af46f2286051961b5f3493054711415262d9a73', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54a6aa35b63f624d55d4df83b3f90f7c4d943bd3', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fc3955b4a31d3e45afb0a87f3d8a03f083fd3a', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2aa59a77a695f1b7e69eaf9a160f134b50f909', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ed4553b0ed9ed1fc190ef32455e85f4e7632534', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2adf633924814c8e799dead7fb9b5c9ebb660892', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6722a862742f184e60fe51a3e4acab86647fcd7', 'committer_username': 'akash5100', 'committer_name': 'Akash Verma', 'committer_email': None, 'commit_date': datetime.datetime(2019, 7, 28, 16, 21, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceb22c8dd20cf521bd7baed5505fad070e9890a4', 'committer_username': 'nabobalis', 'committer_name': 'Nabil Freij', 'committer_email': 'nabil.freij@gmail.com', 'commit_date': datetime.datetime(2012, 1, 30, 17, 52, 11, tzinfo=datetime.timezone.utc)}]",Akash Verma,53405133,,User,,32,,32,43

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
2165383,sunpy,sunpy/sunpy,Python,582,902,48,238,18500,288,4,17,"[{'id': 929461663, 'number': 6127, 'closed': datetime.datetime(2022, 5, 25, 14, 44, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 6, 8, 30, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1664045.0, 'time_delta': '19 days, 6:14:05', 'additions': 54, 'deletions': 0, 'state': 'closed'}, {'id': 921398466, 'number': 6110, 'closed': datetime.datetime(2022, 5, 10, 17, 39, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 28, 5, 17, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1081327.0, 'time_delta': '12 days, 12:22:07', 'additions': 67, 'deletions': 29, 'state': 'closed'}, {'id': 897956694, 'number': 6024, 'closed': datetime.datetime(2022, 4, 5, 6, 43, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 2, 5, 12, 59, tzinfo=datetime.timezone.utc), 'time_taken': 264638.0, 'time_delta': '3 days, 1:30:38', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 884468625, 'number': 5980, 'closed': datetime.datetime(2022, 4, 1, 16, 42, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 21, 6, 54, 30, tzinfo=datetime.timezone.utc), 'time_taken': 985656.0, 'time_delta': '11 days, 9:47:36', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 879842087, 'number': 5961, 'closed': datetime.datetime(2022, 3, 22, 20, 57, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 15, 7, 27, 50, tzinfo=datetime.timezone.utc), 'time_taken': 653357.0, 'time_delta': '7 days, 13:29:17', 'additions': 91, 'deletions': 0, 'state': 'closed'}]"
495476907,python-api,Helioviewer-Project/python-api,Python,5,6,3,5,63,4,1,0,"[{'id': 1212278524, 'number': 89, 'closed': datetime.datetime(2023, 1, 21, 5, 17, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 21, 5, 2, 6, tzinfo=datetime.timezone.utc), 'time_taken': 913.0, 'time_delta': '0:15:13', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1073436245, 'number': 82, 'closed': datetime.datetime(2022, 10, 17, 22, 53, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 1, 6, 7, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1442741.0, 'time_delta': '16 days, 16:45:41', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1050253074, 'number': 80, 'closed': datetime.datetime(2022, 9, 8, 15, 45, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 13, 27, 44, tzinfo=datetime.timezone.utc), 'time_taken': 8256.0, 'time_delta': '2:17:36', 'additions': 74, 'deletions': 28, 'state': 'closed'}, {'id': 1048463208, 'number': 77, 'closed': datetime.datetime(2022, 9, 8, 15, 44, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 7, 8, 54, 7, tzinfo=datetime.timezone.utc), 'time_taken': 111047.0, 'time_delta': '1 day, 6:50:47', 'additions': 121, 'deletions': 4, 'state': 'closed'}, {'id': 1045111725, 'number': 73, 'closed': datetime.datetime(2022, 9, 6, 14, 48, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 2, 16, 45, 56, tzinfo=datetime.timezone.utc), 'time_taken': 338558.0, 'time_delta': '3 days, 22:02:38', 'additions': 227, 'deletions': 24, 'state': 'closed'}, {'id': 1039971566, 'number': 72, 'closed': datetime.datetime(2022, 9, 1, 15, 5, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 17, 8, 36, tzinfo=datetime.timezone.utc), 'time_taken': 251810.0, 'time_delta': '2 days, 21:56:50', 'additions': 51, 'deletions': 1, 'state': 'closed'}, {'id': 1035652268, 'number': 71, 'closed': datetime.datetime(2022, 8, 29, 15, 15, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 24, 15, 33, 1, tzinfo=datetime.timezone.utc), 'time_taken': 430942.0, 'time_delta': '4 days, 23:42:22', 'additions': 95, 'deletions': 8, 'state': 'closed'}, {'id': 1033969917, 'number': 70, 'closed': datetime.datetime(2022, 8, 24, 13, 11, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 10, 28, 51, tzinfo=datetime.timezone.utc), 'time_taken': 96149.0, 'time_delta': '1 day, 2:42:29', 'additions': 64, 'deletions': 2, 'state': 'closed'}, {'id': 1033864424, 'number': 69, 'closed': datetime.datetime(2022, 8, 23, 9, 14, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 8, 56, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1133.0, 'time_delta': '0:18:53', 'additions': 22, 'deletions': 22, 'state': 'closed'}, {'id': 1032943015, 'number': 65, 'closed': datetime.datetime(2022, 8, 23, 8, 16, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 22, 14, 38, 38, tzinfo=datetime.timezone.utc), 'time_taken': 63486.0, 'time_delta': '17:38:06', 'additions': 101, 'deletions': 20, 'state': 'closed'}, {'id': 1029516304, 'number': 61, 'closed': datetime.datetime(2022, 8, 20, 16, 56, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 18, 4, 44, 45, tzinfo=datetime.timezone.utc), 'time_taken': 216692.0, 'time_delta': '2 days, 12:11:32', 'additions': 571, 'deletions': 0, 'state': 'closed'}, {'id': 1027867360, 'number': 59, 'closed': datetime.datetime(2022, 8, 17, 17, 55, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 16, 58, 25, tzinfo=datetime.timezone.utc), 'time_taken': 89805.0, 'time_delta': '1 day, 0:56:45', 'additions': 178, 'deletions': 0, 'state': 'closed'}, {'id': 1026814646, 'number': 58, 'closed': datetime.datetime(2022, 8, 16, 5, 14, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 15, 19, 53, tzinfo=datetime.timezone.utc), 'time_taken': 33710.0, 'time_delta': '9:21:50', 'additions': 154, 'deletions': 0, 'state': 'closed'}, {'id': 1025721918, 'number': 57, 'closed': datetime.datetime(2022, 8, 14, 6, 8, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 4, 41, 40, tzinfo=datetime.timezone.utc), 'time_taken': 5216.0, 'time_delta': '1:26:56', 'additions': 96, 'deletions': 1, 'state': 'closed'}, {'id': 1021109888, 'number': 55, 'closed': datetime.datetime(2022, 8, 13, 15, 40, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 6, 49, 44, tzinfo=datetime.timezone.utc), 'time_taken': 377454.0, 'time_delta': '4 days, 8:50:54', 'additions': 166, 'deletions': 128, 'state': 'closed'}, {'id': 1017645859, 'number': 51, 'closed': datetime.datetime(2022, 8, 8, 14, 42, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 14, 45, 40, tzinfo=datetime.timezone.utc), 'time_taken': 345410.0, 'time_delta': '3 days, 23:56:50', 'additions': 207, 'deletions': 0, 'state': 'closed'}, {'id': 1012034148, 'number': 48, 'closed': datetime.datetime(2022, 8, 3, 14, 47, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 14, 19, 2, tzinfo=datetime.timezone.utc), 'time_taken': 433694.0, 'time_delta': '5 days, 0:28:14', 'additions': 173, 'deletions': 5, 'state': 'closed'}, {'id': 1008211338, 'number': 47, 'closed': datetime.datetime(2022, 7, 28, 15, 48, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 26, 8, 28, 47, tzinfo=datetime.timezone.utc), 'time_taken': 199181.0, 'time_delta': '2 days, 7:19:41', 'additions': 293, 'deletions': 0, 'state': 'closed'}, {'id': 998463908, 'number': 41, 'closed': datetime.datetime(2022, 7, 25, 15, 15, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 16, 17, 6, 15, tzinfo=datetime.timezone.utc), 'time_taken': 770934.0, 'time_delta': '8 days, 22:08:54', 'additions': 49, 'deletions': 5, 'state': 'closed'}, {'id': 996803343, 'number': 40, 'closed': datetime.datetime(2022, 7, 15, 12, 32, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 14, 15, 12, 21, tzinfo=datetime.timezone.utc), 'time_taken': 76794.0, 'time_delta': '21:19:54', 'additions': 92, 'deletions': 1, 'state': 'closed'}, {'id': 996278978, 'number': 39, 'closed': datetime.datetime(2022, 7, 14, 15, 2, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 14, 6, 42, 49, tzinfo=datetime.timezone.utc), 'time_taken': 29984.0, 'time_delta': '8:19:44', 'additions': 101, 'deletions': 1, 'state': 'closed'}, {'id': 995641775, 'number': 38, 'closed': datetime.datetime(2022, 8, 4, 4, 22, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 13, 15, 22, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1861153.0, 'time_delta': '21 days, 12:59:13', 'additions': 275, 'deletions': 1, 'state': 'closed'}, {'id': 992799654, 'number': 36, 'closed': datetime.datetime(2022, 7, 13, 16, 2, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 8, 15, 39, tzinfo=datetime.timezone.utc), 'time_taken': 200802.0, 'time_delta': '2 days, 7:46:42', 'additions': 175, 'deletions': 57, 'state': 'closed'}, {'id': 986541770, 'number': 34, 'closed': datetime.datetime(2022, 7, 8, 16, 56, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 4, 14, 27, 1, tzinfo=datetime.timezone.utc), 'time_taken': 354557.0, 'time_delta': '4 days, 2:29:17', 'additions': 355, 'deletions': 11, 'state': 'closed'}, {'id': 984772037, 'number': 33, 'closed': datetime.datetime(2022, 7, 7, 17, 29, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 10, 1, 22, tzinfo=datetime.timezone.utc), 'time_taken': 545279.0, 'time_delta': '6 days, 7:27:59', 'additions': 54, 'deletions': 35, 'state': 'closed'}, {'id': 984001581, 'number': 28, 'closed': datetime.datetime(2022, 6, 30, 19, 12, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 30, 15, 36, tzinfo=datetime.timezone.utc), 'time_taken': 12988.0, 'time_delta': '3:36:28', 'additions': 19, 'deletions': 0, 'state': 'closed'}, {'id': 960747027, 'number': 21, 'closed': datetime.datetime(2022, 6, 29, 16, 42, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 7, 18, 24, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1894643.0, 'time_delta': '21 days, 22:17:23', 'additions': 211, 'deletions': 23, 'state': 'closed'}]"
