pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
448143459,rgw: Add support for pushing bucket notifications to AWS,"<!--
Thank you for opening a pull request!  Here are some tips on creating
a well formatted contribution.

Please give your pull request a title like ""[component]: [short description]""

This is the format for commit messages:

""""""
[component]: [short description]

[A longer multiline description]

Fixes: [ticket URL on tracker.ceph.com, create one if necessary]
Signed-off-by: [Your Name] <[your email]>
""""""

The Signed-off-by line is important, and it is your certification that
your contributions satisfy the Developers Certificate or Origin.  For
more detail, see SubmittingPatches.rst.

The component is the short name of a major daemon or subsystem,
something like ""mon"", ""osd"", ""mds"", ""rbd, ""rgw"", etc. For ceph-mgr modules,
give the component as ""mgr/<module name>"" rather than a path into pybind.

For more examples, simply use ""git log"" and look at some historical commits.

This was just a quick overview.  More information for contributors is available here:
https://raw.githubusercontent.com/ceph/ceph/master/SubmittingPatches.rst

-->
## Checklist
- [ ] References tracker ticket
- [ ] Updates documentation if necessary
- [ ] Includes tests for new functionality or reproducer for bug

---

<details>
<summary>Show available Jenkins commands</summary>

- `jenkins retest this please`
- `jenkins test classic perf`
- `jenkins test crimson perf`
- `jenkins test signed`
- `jenkins test make check`
- `jenkins test make check arm64`
- `jenkins test submodules`
- `jenkins test dashboard`
- `jenkins test dashboard backend`
- `jenkins test docs`
- `jenkins render docs`
- `jenkins test ceph-volume all`
- `jenkins test ceph-volume tox`

</details>
",False,36062,https://api.github.com/repos/ceph/ceph/pulls/36062,https://github.com/ceph/ceph/pull/36062,closed,871,20,14,1,7,91,5,0,"[{'name': 'feature'}, {'name': 'rgw'}, {'name': 'needs-qa'}, {'name': 'needs-review'}, {'name': 'needs-rebase'}]",2020-07-13 09:50:33+00:00,2021-05-20 09:57:54+00:00,26870841.0,"311 days, 0:07:21","[{'comment_id': 453660488, 'comment_body': 'please add:\r\n```cmake\r\n set(AUTORUN_UNIT_TESTS OFF)\r\n```', 'comment_created': datetime.datetime(2020, 7, 13, 13, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 453660996, 'comment_body': 'please add:\r\n```cmake\r\ninclude_directories(SYSTEM ""${CMAKE_SOURCE_DIR}/src/aws-sdk-cpp/aws-cpp-sdk-iam/include"")\r\n\r\n```', 'comment_created': datetime.datetime(2020, 7, 13, 13, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 453667261, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 13, 13, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 453667416, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 7, 13, 13, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 457195630, 'comment_body': 'please use ldout instead of cout (in all places)', 'comment_created': datetime.datetime(2020, 7, 20, 8, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 457201303, 'comment_body': 'is there an actual error code we can pass to cb() ? e.g.\r\nnegative `GetStatusCode()`', 'comment_created': datetime.datetime(2020, 7, 20, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 457202438, 'comment_body': 'this could probably be const as well', 'comment_created': datetime.datetime(2020, 7, 20, 9, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 457213922, 'comment_body': ""you should keep a counter (could be an atomic int) which makes sure we don;t have too many pending requests.\r\ne.g. if aws connection is down\r\nif counter exceeds you can threat that as an internal error (don't forget to invoke the cb() with some error code)\r\nthis also apply to line 160"", 'comment_created': datetime.datetime(2020, 7, 20, 9, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 457216026, 'comment_body': 'don\'t use ""kafka-ack-level"" here. you can use ""aws-ack-level""', 'comment_created': datetime.datetime(2020, 7, 20, 9, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 457218353, 'comment_body': 'please use `None` and `Server`', 'comment_created': datetime.datetime(2020, 7, 20, 9, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 457218539, 'comment_body': 'please use `Server`', 'comment_created': datetime.datetime(2020, 7, 20, 9, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 457218743, 'comment_body': 'remove ""kafka"" from message', 'comment_created': datetime.datetime(2020, 7, 20, 9, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 457220818, 'comment_body': 'please remove this comment (apply only to amqp)', 'comment_created': datetime.datetime(2020, 7, 20, 9, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 458102957, 'comment_body': ""> you should keep a counter (could be an atomic int) which makes sure we don;t have too many pending requests.\r\n> e.g. if aws connection is down\r\n> if counter exceeds you can threat that as an internal error (don't forget to invoke the cb() with some error code)\r\n> this also apply to line 160\r\n\r\nafter further discussion with @prateek2211 , no need for that counter. messages will timeout if server is down/slow."", 'comment_created': datetime.datetime(2020, 7, 21, 13, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466151649, 'comment_body': 'please change to: ""... AWS lambda and AWS SNS ...""', 'comment_created': datetime.datetime(2020, 8, 6, 5, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466151797, 'comment_body': 'please number the attributes 8,9,...', 'comment_created': datetime.datetime(2020, 8, 6, 5, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466152032, 'comment_body': 'please change to: ""...value=<Secret Key>""', 'comment_created': datetime.datetime(2020, 8, 6, 5, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466152859, 'comment_body': 'it does not have to be these endpoints. don\'t we use the ""schema"" as an indication for the type of AWS endpoint.\r\ne.g. `sns://<fqdn>[:port]` ?', 'comment_created': datetime.datetime(2020, 8, 6, 5, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466153010, 'comment_body': 'please change: broker->server\r\nalso, what is the default?', 'comment_created': datetime.datetime(2020, 8, 6, 5, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466153217, 'comment_body': 'please change ""Access secret"" -> ""Secret Access Key""', 'comment_created': datetime.datetime(2020, 8, 6, 5, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466154752, 'comment_body': 'the first sentence only apply to amqp - please remove.\r\nhowever, we should probably add these clarifications:\r\n* in case of SNS message is considered delivered when pushed into SNS and does not have to be notified to the end recipients\r\n* in case of lambda, we ignore the success/fail of the execution of the function, and consider the message delivered when the function is successfully triggered', 'comment_created': datetime.datetime(2020, 8, 6, 5, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466250384, 'comment_body': 'why create a new shared_ptr? \r\nyou can just call ""get()"" and cast to your derived type.\r\n[nit] ""derived"" is not a good name', 'comment_created': datetime.datetime(2020, 8, 6, 8, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466251173, 'comment_body': 'please avoid c-style casting. what is the return type of `GetErrorType()`?', 'comment_created': datetime.datetime(2020, 8, 6, 8, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466254055, 'comment_body': 'is there error code for SNS?', 'comment_created': datetime.datetime(2020, 8, 6, 9, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466254753, 'comment_body': '`CephContext const* cct`', 'comment_created': datetime.datetime(2020, 8, 6, 9, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466254880, 'comment_body': '`const`', 'comment_created': datetime.datetime(2020, 8, 6, 9, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466310999, 'comment_body': 'please use: `aws://<fqdn>[:port]`', 'comment_created': datetime.datetime(2020, 8, 6, 10, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466311665, 'comment_body': 'please explain what are the valid ARNs: ""sns"" and ""lambda""', 'comment_created': datetime.datetime(2020, 8, 6, 10, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 466313845, 'comment_body': 'you can remove the `caPath` for now - please remove from all places (including doc)', 'comment_created': datetime.datetime(2020, 8, 6, 10, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 467950238, 'comment_body': 'please change to ""ON"".\r\nwe need to verify how this feature builds on various systems', 'comment_created': datetime.datetime(2020, 8, 10, 14, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 468493094, 'comment_body': '```suggestion\r\noption(WITH_RADOSGW_AWS_ENDPOINT ""Rados Gateway\'s pubsub support for AWS push endpoint"" ON)\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 10, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 475514020, 'comment_body': '@prateek2211 please provide a sample of valid sns and lambda ARNs we expect', 'comment_created': datetime.datetime(2020, 8, 24, 10, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 475514573, 'comment_body': 'same as https://github.com/ceph/ceph/pull/36062/files#r466251173', 'comment_created': datetime.datetime(2020, 8, 24, 10, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 475515315, 'comment_body': '[nit] please add space after "",""', 'comment_created': datetime.datetime(2020, 8, 24, 10, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 475516578, 'comment_body': '@prateek ping', 'comment_created': datetime.datetime(2020, 8, 24, 10, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 477045375, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 26, 5, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 477045428, 'comment_body': '`enum class LambdaErrors`', 'comment_created': datetime.datetime(2020, 8, 26, 5, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 477053274, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 26, 6, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 477098018, 'comment_body': 'please use reinterpret_cast (avoid c-style cast)', 'comment_created': datetime.datetime(2020, 8, 26, 7, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 477098648, 'comment_body': ""do you get an error if you dont cast to int?\r\ndon't think this is needed when casting from enum."", 'comment_created': datetime.datetime(2020, 8, 26, 7, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 477099023, 'comment_body': 'see https://github.com/ceph/ceph/pull/36062/files#r477098018', 'comment_created': datetime.datetime(2020, 8, 26, 7, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 477099207, 'comment_body': 'see https://github.com/ceph/ceph/pull/36062/files#r477098648', 'comment_created': datetime.datetime(2020, 8, 26, 7, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 477106352, 'comment_body': 'please put the imports inside the ""init_aws()"" function', 'comment_created': datetime.datetime(2020, 8, 26, 7, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 477108465, 'comment_body': 'why do you need to specify the ports (4444, 5555) here?', 'comment_created': datetime.datetime(2020, 8, 26, 7, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 477320494, 'comment_body': 'please drop this new line.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 477320779, 'comment_body': 'please avoid adding global `include_directories()` if these includes are only for certain targets.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 477321667, 'comment_body': 'add comment for this this macro is for.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 477323373, 'comment_body': 'what is this variable for?', 'comment_created': datetime.datetime(2020, 8, 26, 13, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 477328508, 'comment_body': 'it is used inside the aws-sdk submodule cmake - indicating it to build only sns and lambda libraries.\r\nwe set it from here instead of changing it in the submodule.', 'comment_created': datetime.datetime(2020, 8, 26, 14, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 477356857, 'comment_body': 'you are referencing `https://github.com/prateek2211/aws-sdk-cpp`, right? @prateek2211 could you update `aws-sdk-cpp` to ensure these variables (i assume they are cache entries) are prefixed with something like `AWS_SDK_` ? to avoid name conflicting and for better readability? the name of `BUILD_ONLY` is way too general.', 'comment_created': datetime.datetime(2020, 8, 26, 14, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 477357875, 'comment_body': 'ok', 'comment_created': datetime.datetime(2020, 8, 26, 14, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 477358990, 'comment_body': ""nit, i'd suggest export libraries like `AWS::Core`, `AWS::Lambda` ..."", 'comment_created': datetime.datetime(2020, 8, 26, 14, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 477362940, 'comment_body': 'if we are changing the submodule cmake anyway, we can just set it there?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 479793817, 'comment_body': 'https://stackoverflow.com/questions/11421432/how-can-i-output-the-value-of-an-enum-class-in-c11\r\nI have to use static_cast.', 'comment_created': datetime.datetime(2020, 8, 30, 17, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 479794504, 'comment_body': 'ok. so please use static_cast instead of c-style case', 'comment_created': datetime.datetime(2020, 8, 30, 17, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481032430, 'comment_body': 'my mistake, please use static_cast', 'comment_created': datetime.datetime(2020, 9, 1, 10, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481037229, 'comment_body': 'please add ""skip push tests"" condition here', 'comment_created': datetime.datetime(2020, 9, 1, 10, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481092545, 'comment_body': 'Do we want a more permanent/common upstream for this?', 'comment_created': datetime.datetime(2020, 9, 1, 12, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dang', 'type': 'User'}, {'comment_id': 481100314, 'comment_body': 'you are right, we should have  https://github.com/ceph/aws-sdk-cpp\r\n@mattbenjamin do you remember what was the process where we added s3select as a repo to the ceph org?', 'comment_created': datetime.datetime(2020, 9, 1, 12, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481197719, 'comment_body': 'nice use of variant', 'comment_created': datetime.datetime(2020, 9, 1, 14, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mattbenjamin', 'type': 'User'}, {'comment_id': 481204859, 'comment_body': 'is this hash combining efficient?  an alternative could be to use a hash interface that supports streaming--e.g., XXHash is fast and does support this', 'comment_created': datetime.datetime(2020, 9, 1, 14, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mattbenjamin', 'type': 'User'}, {'comment_id': 481205382, 'comment_body': 'also nice to see lock-free in use', 'comment_created': datetime.datetime(2020, 9, 1, 15, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mattbenjamin', 'type': 'User'}, {'comment_id': 481206598, 'comment_body': 'what sharing happens here?', 'comment_created': datetime.datetime(2020, 9, 1, 15, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mattbenjamin', 'type': 'User'}, {'comment_id': 481211096, 'comment_body': 'no sharing. \r\nbut this is needed for the aws-sdk API', 'comment_created': datetime.datetime(2020, 9, 1, 15, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481859655, 'comment_body': 'why are we getting 404 here? and why do you expect to get that in the assert?', 'comment_created': datetime.datetime(2020, 9, 2, 8, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481859874, 'comment_body': 'nit: add newline', 'comment_created': datetime.datetime(2020, 9, 2, 8, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481861579, 'comment_body': 'please add documentation in comment:\r\n* install moto\r\n* install docker\r\n* create the lambda function (please provide the actual `aws` cli command that matches the code)\r\n* create the sns topic (please provide the actual `aws` cli command that matches the code)', 'comment_created': datetime.datetime(2020, 9, 2, 8, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481861940, 'comment_body': 'please remove credentials, just pass empty strings', 'comment_created': datetime.datetime(2020, 9, 2, 8, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481862601, 'comment_body': 'please pass ""false"", false"" for `use-ssl` and `verify-ssl`', 'comment_created': datetime.datetime(2020, 9, 2, 8, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481862892, 'comment_body': 'please use `localhost`', 'comment_created': datetime.datetime(2020, 9, 2, 8, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 481863822, 'comment_body': '* please add a comment on that region has to be a valid aws region (e.g. ""us-east-1"")', 'comment_created': datetime.datetime(2020, 9, 2, 8, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 482055834, 'comment_body': '@tchaikov could you please help here? \r\nWe want to create an aws-sdk-cpp repo under the ceph org. This should be a fork of https://github.com/aws/aws-sdk-cpp.\r\nWe should add the changes we made in https://github.com/prateek2211/aws-sdk-cpp to the new repo, and then make it a submodule of ceph(pointing to the branch where we made the changes)', 'comment_created': datetime.datetime(2020, 9, 2, 13, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 482164233, 'comment_body': 'can we write a sample command that will give the ARN we expect?\r\neven a manual test should not require you to recompile the code :-)', 'comment_created': datetime.datetime(2020, 9, 2, 15, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484047881, 'comment_body': 'can we do all of that (including line 156) in the external ""publish"" function?\r\nif the ARN is malformed we should fail there.\r\neven better, can we do that in the ""connect"" function?\r\nI think that the ARN is constant per endpoint, and then we will do the parsing once per connection instead of once per record?', 'comment_created': datetime.datetime(2020, 9, 6, 9, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484059746, 'comment_body': 'please remove line 24', 'comment_created': datetime.datetime(2020, 9, 6, 11, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484059778, 'comment_body': 'please add a note on creating the file.zip file', 'comment_created': datetime.datetime(2020, 9, 6, 11, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 484062129, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 9, 6, 12, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 484062304, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 9, 6, 12, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'prateek2211', 'type': 'User'}, {'comment_id': 484063774, 'comment_body': '```suggestion\r\n    lambda_client = boto3.client(\'lambda\', endpoint_url=""http://localhost:5555"", region_name=\'us-east-1\')\r\n```', 'comment_created': datetime.datetime(2020, 9, 6, 12, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 485659231, 'comment_body': 'please refer https://github.com/ceph/ceph/blob/master/CodingStyle#L27 for our naming conventions.', 'comment_created': datetime.datetime(2020, 9, 9, 14, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 485791607, 'comment_body': 'these dont need to be mutable', 'comment_created': datetime.datetime(2020, 9, 9, 17, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'cbodley', 'type': 'User'}, {'comment_id': 485792253, 'comment_body': 'what happens when the queue is full?', 'comment_created': datetime.datetime(2020, 9, 9, 17, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cbodley', 'type': 'User'}, {'comment_id': 485794265, 'comment_body': 'it looks like these integers are being returned directly to code that expects errors as negative posix error codes', 'comment_created': datetime.datetime(2020, 9, 9, 17, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cbodley', 'type': 'User'}, {'comment_id': 486055009, 'comment_body': 'i forked aws/aws-sdk-cpp in ceph/aws-sdk-cpp.', 'comment_created': datetime.datetime(2020, 9, 10, 4, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 486076979, 'comment_body': '> i forked aws/aws-sdk-cpp in ceph/aws-sdk-cpp.\r\n\r\n@tchaikov thanks!\r\n\r\n@prateek2211 can you please create a PR there with your changes from your fork?', 'comment_created': datetime.datetime(2020, 9, 10, 5, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 486080859, 'comment_body': '@yuvalif @prateek2211 i checked https://github.com/prateek2211/aws-sdk-cpp/commits/aws-ceph-submodule. the commit of https://github.com/prateek2211/aws-sdk-cpp/commit/f0a53b0e71d451c56daad5342dc6db3057e32c39 contains **tons** of changes \r\n\r\n> Showing 50,311 changed files with 86 additions and 8,233,272 deletions.\r\n\r\nmost of which are not related to what is claimed in the commit message\r\n\r\n> Remove modules unusable for ceph and disable virtual overload function warning\r\n\r\n@prateek2211 could you help elaborate on this?', 'comment_created': datetime.datetime(2020, 9, 10, 5, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 486090225, 'comment_body': '@tchaikov since we need only lambda and sns from the aws sdk (together with some ""common"" libs), we wanted to avoid adding huge amount of code into the ceph codebase (IIRC the aws sdk has more LoC than ceph...).\r\ncompilation time (and even cloning time) of the entire aws sdk is very long, and unnecessary.', 'comment_created': datetime.datetime(2020, 9, 10, 6, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 486102799, 'comment_body': '@yuvalif to fork upstream in this way is not a sustainable approach to address this problem. for instance, how do we keep track of the upstream changes. how to do the rebase? also couple questions:\r\n\r\n1. does aws-sdk-cpp offer finer grained cmake target so we can selectively build part of it, instead of build all of them in a wholesale?\r\n1. regarding ""adding huge amount of code into the ceph codebase"", have you considered adding this project as an external project instead of including it as a submodule? so it\'s optional to our user?\r\n\r\n\r\nFWIW, since it\'s included as a submodule, the full history is included anyway, and we don\'t do a shallow clone. i don\'t think the time for cloning this project changes much even if the latest commit removes the unused files.', 'comment_created': datetime.datetime(2020, 9, 10, 6, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tchaikov', 'type': 'User'}, {'comment_id': 486518905, 'comment_body': '> @yuvalif to fork upstream in this way is not a sustainable approach to address this problem. for instance, how do we keep track of the upstream changes. how to do the rebase? \r\n\r\nhad discussion over that in the stand-up meeting (thanks @alimaredia @cbodley @mkogan1):\r\n* will investigate the option of building the necessary packages (for our CI and shaman targets) and storing them in shaman - similarly to what we did with boost\r\n* however, this will take more time, and as we want to merge this PR, and minimize the impact on CI, would like to keep the trimmed down branch for now\r\n* rebasing from upstream is expected only in case of severe bugs that we find (since we are using the SDK in a very specific way). I will own that\r\n\r\n> also couple questions:\r\n> \r\n> 1. does aws-sdk-cpp offer finer grained cmake target so we can selectively build part of it, instead of build all of them in a wholesale?\r\n\r\nyes, we set the option to build only what we need. so build time is not too bad\r\n\r\n> 2. regarding ""adding huge amount of code into the ceph codebase"", have you considered adding this project as an external project instead of including it as a submodule? so it\'s optional to our user?\r\n> \r\n\r\nwe are going to set the flag that include that to ""ON"" by default, so this won\'t help CI/shaman etc.\r\n\r\n> FWIW, since it\'s included as a submodule, the full history is included anyway, and we don\'t do a shallow clone. i don\'t think the time for cloning this project changes much even if the latest commit removes the unused files.\r\n\r\nI think we can configure [shallow clone](https://stackoverflow.com/questions/2144406/how-to-make-shallow-git-submodules) for that submodule\r\n\r\n', 'comment_created': datetime.datetime(2020, 9, 10, 17, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 491838024, 'comment_body': '> what happens when the queue is full?\r\n\r\nsame as in the cases of kafka and amqp. the notification fails.\r\nwith non-persistent notifications this is just logged as an error, with persistent notifications this will be retried later.\r\n(when the persistent retry queue is exhausted this will fail the operation that triggers the notification with 503)', 'comment_created': datetime.datetime(2020, 9, 21, 7, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}, {'comment_id': 507039381, 'comment_body': '```suggestion\r\n  set(AWS_DEPS_INSTALL_DIR ""${CMAKE_BINARY_DIR}/aws-sdk-cpp/.deps"" )\r\n```', 'comment_created': datetime.datetime(2020, 10, 18, 8, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'yuvalif', 'type': 'User'}]","[{'commit_sha': '21fa0579b350c2a04f7aed0b34367a30548ddcc2', 'committer_username': 'prateek2211', 'committer_name': 'Prateek Sachan', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 4, 8, 22, 26, tzinfo=datetime.timezone.utc)}]",Prateek Sachan,42961174,,User,,29,,16,43

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
2310495,ceph,ceph/ceph,C++,5926,13762,657,1921,147708,940,217,940,"[{'id': 448143459, 'number': 36062, 'closed': datetime.datetime(2021, 5, 20, 9, 57, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 9, 50, 33, tzinfo=datetime.timezone.utc), 'time_taken': 26870841.0, 'time_delta': '311 days, 0:07:21', 'additions': 871, 'deletions': 20, 'state': 'closed'}, {'id': 437833276, 'number': 35696, 'closed': datetime.datetime(2020, 7, 13, 9, 47, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 10, 11, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1812962.0, 'time_delta': '20 days, 23:36:02', 'additions': 542, 'deletions': 19, 'state': 'closed'}, {'id': 422255347, 'number': 35208, 'closed': datetime.datetime(2020, 6, 24, 15, 12, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 23, 10, 37, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2781334.0, 'time_delta': '32 days, 4:35:34', 'additions': 501, 'deletions': 503, 'state': 'closed'}]"
