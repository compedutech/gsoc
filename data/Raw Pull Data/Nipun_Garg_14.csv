pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
420572940,Add experiments directory for coverage experiments,This PR adds the experiments directory for conducting coverage experiments. It will be used to keep a track of the coverage experiments done under GSoC 2020,True,990,https://api.github.com/repos/google/graphicsfuzz/pulls/990,https://github.com/google/graphicsfuzz/pull/990,closed,64,0,2,7,5,8,1,0,[{'name': 'cla: yes'}],2020-05-20 07:52:03+00:00,2020-06-03 06:44:08+00:00,1205525.0,"13 days, 22:52:05","[{'comment_id': 427907845, 'comment_body': 'Please replace all `build-*.md` files (except `build-swiftshader.md`) with one bash script that builds every project (or one bash script per project) without coverage enabled. ', 'comment_created': datetime.datetime(2020, 5, 20, 10, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 427913164, 'comment_body': 'I suggest removing this (`The SwiftShader CMakeLists.txt file ... without these restrictions.`). The CL has been merged. You can now just clone SwiftShader and build it. ', 'comment_created': datetime.datetime(2020, 5, 20, 10, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 427913869, 'comment_body': 'You can build a more recent version of SwiftShader. I suggest picking a recent commit hash e.g.\r\nb6e8c3f0f4830887d69ba765a922ac3c40e81dd9\r\n\r\nand cloning that. ', 'comment_created': datetime.datetime(2020, 5, 20, 10, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 427915297, 'comment_body': 'I suggest including the exact commands. E.g.\r\n\r\n```\r\nmkdir -p out/build_coverage\r\ncd out/build_coverage\r\ncmake -G Ninja ../.. -DCMAKE_BUILD_TYPE=Debug -DSWIFTSHADER_EMIT_COVERAGE=1\r\ncmake --build . --config Debug\r\n# The SwiftShader ICD is here: Linux/{libvk_swiftshader.so,vk_swiftshader_icd.json}\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 10, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 427915815, 'comment_body': 'I suggest removing this (`In order to...run the Vulkan samples.`). We should not need to build the samples with coverage enabled. ', 'comment_created': datetime.datetime(2020, 5, 20, 10, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 427916996, 'comment_body': 'This is good. Again, I suggest providing the exact command used. E.g.\r\n\r\n```sh\r\nexport VK_ICD_FILENAMES=/path/to/SwiftShader/build/Linux/vk_swiftshader_icd.json\r\n./vulkan-app\r\n```\r\n\r\nThis especially useful because you put `VK_ICD_FILENAMEs` (with a lowercase ""s""). Maybe it would work though.', 'comment_created': datetime.datetime(2020, 5, 20, 10, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 427918101, 'comment_body': 'I think if you use backticks:\r\n\r\n```\r\nThe `SWIFTSHADER_EMIT_COVERAGE` flag...\r\n```\r\n\r\nyou will not need to escape the slashes.', 'comment_created': datetime.datetime(2020, 5, 20, 10, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 431026152, 'comment_body': 'I suggest removing all text between ""Building SwiftShader with Coverage Enabled"" and ""Steps:"". It is no longer true. `SWIFTSHADER_EMIT_COVERAGE` always works now.\r\n\r\nI suggest changing ""Clone the ..."" to:\r\n\r\n`git clone https://github.com/google/swiftshader.git 9e718f962f87c30d08e91053f0e9ce3467cbd488`\r\n\r\nI just picked the latest commit (9e718f). You do not need to clone CL 44728. \r\n', 'comment_created': datetime.datetime(2020, 5, 27, 10, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}]","[{'commit_sha': '6fbc17bb7dd7f65463ae9095710cc66c8648ac7e', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '949a7ac7bf4b4a5080e3cba689de6edccec59d28', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da6603c9cfe777dea28a59433863d24665d2616', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc5a4fed1166e4e3227ed31aeb2d4a51d6956495', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24a70c98281f2a5d00f2a43bbd1f93af8e6bc090', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b444ee3fdcd85aacbf61d8e4968d44b6f341ddb', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8371f87eb01ea978a2ba40425b0c6305fa1ce75a', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
427044404,Add demoChecker to run all demos and log return codes,It runs all the demo binaries built in `experiments` directory and logs the resulting return codes in a file in the current working directory.,True,998,https://api.github.com/repos/google/graphicsfuzz/pulls/998,https://github.com/google/graphicsfuzz/pull/998,closed,213,0,1,1,0,7,1,0,[{'name': 'cla: yes'}],2020-06-03 08:27:24+00:00,2020-06-08 19:35:50+00:00,472106.0,"5 days, 11:08:26","[{'comment_id': 434398561, 'comment_body': 'Please add a copyright + license header', 'comment_created': datetime.datetime(2020, 6, 3, 8, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 434400301, 'comment_body': 'Your default here is to create a hidden file in `$HOME`, I don\'t think it is a good idea because users would have a hard time to find it afterwards. I think a better default would be to create a ""demoChecker"" in the current directory:\r\n\r\n```\r\nOUTPUT_DIR=demoChecker\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 8, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 434401363, 'comment_body': ""I don't think this will work with the Khronos samples, which require the sample name as an argument?"", 'comment_created': datetime.datetime(2020, 6, 3, 8, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 434408501, 'comment_body': 'Hmmm, it is a bit tricky here.\r\n\r\nCan we assume all demo apps run indefinitely, until we stop them?\r\nIf we can assume this, then the only ""pass"" case would be for the app to timeout: if the apps terminates earlier (even with code 0), then it means that it did not run properly.\r\n\r\nIn any case, it\'s a good idea to store the return code alongside the file name. So I would transform this into:\r\n\r\n```\r\n# We expect apps to timeout, any other behavior is a failure\r\nif [ $returnCode -eq 124 ] || [ $returnCode -eq 137 ] ; then\r\n    echo $file $returnCode >> ""$OUTPUT_DIR/passFile""\r\nelse\r\n    echo $file $returnCode >> ""$OUTPUT_DIR/failFile""\r\nfi\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 8, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 434409085, 'comment_body': 'Add a `--help` flag that print an help message about how to use this script.', 'comment_created': datetime.datetime(2020, 6, 3, 8, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 434410776, 'comment_body': 'Added', 'comment_created': datetime.datetime(2020, 6, 3, 8, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 434411848, 'comment_body': ""I think we can assume that. Out of all the demos I've seen so far, the only ones that finished early were the Vulkan Compute demos. And even they requried a final confirmation to fully terminate."", 'comment_created': datetime.datetime(2020, 6, 3, 8, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}]","[{'commit_sha': '5054b9ec5f58ab10e6c7bd8164b2bf2ca436c163', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
428806225,Add build scripts for Vulkan Khronos Samples and Imagination Demos,"* Khronos Samples
* Imagination Demos",True,1005,https://api.github.com/repos/google/graphicsfuzz/pulls/1005,https://github.com/google/graphicsfuzz/pull/1005,closed,91,0,2,6,0,6,1,0,[{'name': 'cla: yes'}],2020-06-05 22:12:45+00:00,2020-06-06 13:38:37+00:00,55552.0,15:25:52,"[{'comment_id': 436251534, 'comment_body': 'These comments are not matching the intents of this script. Can you edit to be Imagination-specific?', 'comment_created': datetime.datetime(2020, 6, 6, 8, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 436251584, 'comment_body': 'Idem, please edit to be Khronos-samples specific.', 'comment_created': datetime.datetime(2020, 6, 6, 8, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 436252403, 'comment_body': 'For git submodules, it is best to update them after the checkout to a particular commit. Please update to:\r\n\r\n```\r\ngit clone https://github.com/KhronosGroup/Vulkan-Samples.git\r\n\r\n(\r\n  cd .....\r\n  git checkout .....\r\n \r\n  # update submodules after checking out a particular commit\r\n  git submodule update --init --recursive\r\n)\r\n```', 'comment_created': datetime.datetime(2020, 6, 6, 9, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 436252430, 'comment_body': 'Would it be possible to use Ninja rather than Makefiles here?', 'comment_created': datetime.datetime(2020, 6, 6, 9, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 436253885, 'comment_body': 'You can assume apt dependencies are installed already.\r\n\r\nWe should avoid calling ""sudo"" in a build script, because it typically requires the user to enter a password.', 'comment_created': datetime.datetime(2020, 6, 6, 9, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 436254042, 'comment_body': ""Got it. I'll remove that line then.\r\n"", 'comment_created': datetime.datetime(2020, 6, 6, 9, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}]","[{'commit_sha': '4dc9bd6ece6650665d9f48b8fc69c19f5fc85934', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b76fb653a86de5a0d1c3d6d9edb4a9348e52fb06', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e98eb9782914378436bfac49ee6b06d88f6538ee', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4130e7d0ed0bf16aa004430645b09ddc53188085', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09bba8c3839a064693d4613ae8e2f6579a2005bd', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '142051cfeadae912fe20484e930f9f91922a691a', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
431357371,Add find_uncovered_api.py,"It creates a list of the functions in swiftshader: libVulkan.cpp that have an execution count of 0
in the demo repos under the experiments directory",True,1006,https://api.github.com/repos/google/graphicsfuzz/pulls/1006,https://github.com/google/graphicsfuzz/pull/1006,closed,46,0,1,7,0,12,1,0,[{'name': 'cla: yes'}],2020-06-08 19:43:00+00:00,2020-06-09 12:57:17+00:00,62057.0,17:14:17,"[{'comment_id': 436966758, 'comment_body': 'Nice. Can you change the bash scripts to use `#!/usr/bin/env bash` as well?', 'comment_created': datetime.datetime(2020, 6, 8, 20, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 436968864, 'comment_body': 'I suggest not using `shell=True`. Instead, use the `cwd=` parameter to give the directory, and give the command using a list, like so:\r\n\r\n```py\r\n[shutil.which(""gcov""), ""-i"", ""-t"", ""libVulkan.cpp.o""]\r\n```\r\nIn fact, you probably don\'t even need to use the `cwd` parameter. You can just use `swiftshader/build-coverage/src/Vulkan/CMakeFiles/vk_swiftshader.dir/libVulkan.cpp.o`.\r\n\r\nI don\'t think you need to split the string; you can just use the entire string. Of course, this will fail if there are multiple JSON objects, but if there are multiple objects then something has gone wrong. You could add a comment to note that the output is one JSON object per line, but we only expect one object. ', 'comment_created': datetime.datetime(2020, 6, 8, 20, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 436971297, 'comment_body': 'I would do exit(1) (or some number other than 0, because 0 means success)', 'comment_created': datetime.datetime(2020, 6, 8, 20, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 436972992, 'comment_body': 'This is probably not very Pythonic, but I am no expert and I think it is fine for now.', 'comment_created': datetime.datetime(2020, 6, 8, 20, 14, 1, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 436975165, 'comment_body': 'Oh one more comment: Could you name the file something like `find_uncovered_api.py`? We tend to use this style for Python files. ', 'comment_created': datetime.datetime(2020, 6, 8, 20, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 437039511, 'comment_body': 'Sure. Should that be in this PR or a separate one?', 'comment_created': datetime.datetime(2020, 6, 8, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 437044533, 'comment_body': ""I'll make the change to using `cwd=`.\r\n\r\nThe reason I need to move into the specified directory is because gcov expects that the .gcda file will be in the current working directory. If we pass in a relative directory path instead of just a file name, it would complain that it cannot open the notes file.\r\n\r\nThe reason I was splitting the string was that pushd and popd emit the current state of their stack to standard output. This would be included in json_string, which doesn't make any sense. So I needed to split the json_string in order to get a valid JSON string. I think cwd will take care of it now, so I won't have to split it anymore."", 'comment_created': datetime.datetime(2020, 6, 8, 22, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 437051328, 'comment_body': 'Would this be an improvement?\r\n\r\n```python\r\nfiles_array = json.loads(json_string)[\'files\']\r\nlib_vulkan_record = None\r\n\r\n# We expect only one file_record to match\r\n# libVulkan\r\nfor file_record in files_array:\r\n    if ""libVulkan"" in file_record[\'file\']:\r\n        lib_vulkan_record = file_record\r\n\r\nif lib_vulkan_record == None:\r\n    print(""libVulkan.cpp not found in gcov data"")\r\n    sys.exit(1)\r\n\r\nfunctions = lib_vulkan_record[\'functions\']\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 23, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 437263997, 'comment_body': ""Let's do it in a separate PR"", 'comment_created': datetime.datetime(2020, 6, 9, 9, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 437270372, 'comment_body': 'This code is correct, but for readability I would prefer to clearly define the command and the working dir before calling subprocess.check_output(). Also, use long version of option flags for clarity, and  comment the reason why you need a particular directory:\r\n\r\n```\r\ncmd = [""gcov"", ""--json-format"", ""--stdout"", ""libVulkan.cpp.o""]\r\n# Gcov must be called in a precise location to find the gcda file\r\nworkdir = ""swiftshader/build-coverage/src/Vulkan/CMakeFiles/vk_swiftshader.dir""\r\njson_string = subprocess.check_output(cmd, cwd=workdir)\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 9, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 437299361, 'comment_body': 'Yeah looks good! Apparently, it is common to avoid `== None` and instead just do `if not lib_vulkan_record:`. Which is not exactly the same, but is preferred where possible, apparently. ', 'comment_created': datetime.datetime(2020, 6, 9, 10, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 437307602, 'comment_body': ""Okay, I've made the changes. Do these suffice?"", 'comment_created': datetime.datetime(2020, 6, 9, 10, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}]","[{'commit_sha': 'e32e7c5bd8d6d370f66dee74495a69092596968b', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a8dff313eb63a01487b21d3798985eb790218dc', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ae572ea81498e16da48c8cb48725d1429f90b24', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39cdd69dc95187317b3fb3ac9559f275f0f76201', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6018cc42c400a146b6d30b3ad6a9d529b4f98e28', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33491911334913eedcdb21a56828ff9372762513', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff9f4de99cf86023e7c83dc1b853d8e500b2a675', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
431670751,Replace the bash shebang with `#!/usr/bin/env bash`,This PR replaces the shebang in the build scripts with `#!/usr/bin/env bash`. This change removes any assumptions about the location of the bash executable.,True,1007,https://api.github.com/repos/google/graphicsfuzz/pulls/1007,https://github.com/google/graphicsfuzz/pull/1007,closed,6,6,6,1,0,0,1,0,[{'name': 'cla: yes'}],2020-06-09 09:46:08+00:00,2020-06-09 10:10:04+00:00,1436.0,0:23:56,[],"[{'commit_sha': '4ece14703d4cca236874a1cd7be5424978a0a34f', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
432637879,Modify find_uncovered_api.py into api_coverage.py,"Changes in find_uncovered_api.py

- Filter and sort the function nams in find_uncovered_api.py
- Print all the functions in find_uncovered_api.py with their execution counts
- Rename find_uncovered_api.py to api_coverage.py",True,1011,https://api.github.com/repos/google/graphicsfuzz/pulls/1011,https://github.com/google/graphicsfuzz/pull/1011,closed,7,3,1,3,0,0,1,0,[{'name': 'cla: yes'}],2020-06-10 18:52:12+00:00,2020-06-10 20:21:17+00:00,5345.0,1:29:05,[],"[{'commit_sha': '57f575674edb6e414d898564d7eae38cd95209fd', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90bec6c39ec4eff371b0f0bace95383566a5eb95', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '270af199bffbc01797e00c3226f83213d30b97b8', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
432904375,Fix swiftshader build config,,True,1012,https://api.github.com/repos/google/graphicsfuzz/pulls/1012,https://github.com/google/graphicsfuzz/pull/1012,closed,1,1,1,1,0,0,1,0,[{'name': 'cla: yes'}],2020-06-11 07:55:28+00:00,2020-06-11 09:23:11+00:00,5263.0,1:27:43,[],"[{'commit_sha': 'fc6917316630228fc5b10bb02ffea61486fa04f2', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
438546101,Add vkTrimCommandPool to GAPID Test,"This PR adds a vkTrimCommandPool call to the CreateResetDestroyCommandPool_test, renaming it to CreateTrimResetDestroyCommandPool_test. 

This PR currently does not modify the associated Python file for the vkTrimCommandPool call.",True,162,https://api.github.com/repos/google/vulkan_test_applications/pulls/162,https://github.com/google/vulkan_test_applications/pull/162,closed,112,7,12,1,3,19,0,0,[],2020-06-23 12:44:13+00:00,2020-07-21 13:22:58+00:00,2421525.0,"28 days, 0:38:45","[{'comment_id': 445363943, 'comment_body': 'Just add a comment here to say that we need `1.1` for VkTrimCommandPool', 'comment_created': datetime.datetime(2020, 6, 25, 7, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 445586359, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2020, 6, 25, 14, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 445593613, 'comment_body': 'Please also update the test cases at the bottom of this file.', 'comment_created': datetime.datetime(2020, 6, 25, 14, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 445595047, 'comment_body': 'This means this test now cannot run on any vulkan 1.0 device. We should split out the vkTrimCommandPool test to have its own instance (and possibly be in its own file)', 'comment_created': datetime.datetime(2020, 6, 25, 14, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 446547733, 'comment_body': ""If we're shifting the vkTrimCommandPool commands to a separate file, what would be a proper directory to put it? I don't know whether `gapid_tests/resource_creation_tests` would be appropriate for a test centered around vkTrimCommandPool."", 'comment_created': datetime.datetime(2020, 6, 27, 17, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 446567740, 'comment_body': 'Probably the command_buffer_control file.', 'comment_created': datetime.datetime(2020, 6, 27, 21, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 446575648, 'comment_body': ""I don't think I can find any file named command_buffer_control under the gapid_tests. Is it somewhere else?"", 'comment_created': datetime.datetime(2020, 6, 27, 22, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 446577639, 'comment_body': 'Sorry, command_buffer_tests.', 'comment_created': datetime.datetime(2020, 6, 27, 23, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 447553516, 'comment_body': 'Copyright year: 2020', 'comment_created': datetime.datetime(2020, 6, 30, 9, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 447553847, 'comment_body': 'The title should be: vkTrimCommandPool', 'comment_created': datetime.datetime(2020, 6, 30, 9, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 447553946, 'comment_body': '2020', 'comment_created': datetime.datetime(2020, 6, 30, 9, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 447554488, 'comment_body': 'You\'re missing the closing triple backquotes ""```"" ', 'comment_created': datetime.datetime(2020, 6, 30, 9, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 447555429, 'comment_body': 'Remove all changes to this file, including the file renaming.', 'comment_created': datetime.datetime(2020, 6, 30, 9, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 447555684, 'comment_body': 'You can keep this fix :)', 'comment_created': datetime.datetime(2020, 6, 30, 9, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 447555814, 'comment_body': 'Remove this change', 'comment_created': datetime.datetime(2020, 6, 30, 9, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 447557160, 'comment_body': 'You can probably remove some imports. For instance, `require_not_equal` does not seem to be used anywhere in this file. Can you try and cleanup the imports?', 'comment_created': datetime.datetime(2020, 6, 30, 9, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 447594131, 'comment_body': 'I guess you can remove `require_not_equal` ?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 447594285, 'comment_body': 'Also remove these two functions?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 448220849, 'comment_body': 'Keep an empty line between the imports and the test definition.', 'comment_created': datetime.datetime(2020, 7, 1, 8, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}]","[{'commit_sha': '92424763651bc63b195e4f9e6ed55772f38a8ef6', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
460054298,Overlapping frames,"This PR creates a simple overlapping frames sample where we first draw a triangle to a temporary Vulkan Image, and then invert its color in separate render passes.

The complete sample has been synchronized as follows:
... -> RenderPass1 -> Acquire Swapchain Image -> RenderPass2 -> Present Swapchain Image -> ...",True,169,https://api.github.com/repos/google/vulkan_test_applications/pulls/169,https://github.com/google/vulkan_test_applications/pull/169,closed,860,8,13,1,3,22,0,0,[],2020-07-31 11:25:42+00:00,2020-08-11 18:32:21+00:00,975999.0,"11 days, 7:06:39","[{'comment_id': 465051311, 'comment_body': '2020\r\n', 'comment_created': datetime.datetime(2020, 8, 4, 13, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465195976, 'comment_body': ""Don't pass by non-const reference.\r\nEither const reference or pointer."", 'comment_created': datetime.datetime(2020, 8, 4, 16, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465196152, 'comment_body': 'We arent using these default values anywhere, so can we remove them.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465196572, 'comment_body': 'Once we have a cube rendering you will need a depth buffer here as well.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 0, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465198271, 'comment_body': 'Might be nicer to put these into a namespace:\r\n\r\nnamespace gBuffer {\r\n    const uint32_t vert_shader[] = \r\n      #include ....\r\n   const uint32_t frag_shader[] = \r\n     #include ....\r\n}\r\n\r\nThen reference as gBuffer::vert', 'comment_created': datetime.datetime(2020, 8, 4, 17, 3, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465207914, 'comment_body': 'VulkanApplication should be passed by pointer.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465208135, 'comment_body': 'pass by pointer please.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465208444, 'comment_body': 'images.reserve(app.swapchain_images().size());', 'comment_created': datetime.datetime(2020, 8, 4, 17, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465208536, 'comment_body': 'Please run clang-format on this to get the formatting right.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465209270, 'comment_body': 'We should reserve the space for all values in the vector (saves re-allocation).', 'comment_created': datetime.datetime(2020, 8, 4, 17, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465209972, 'comment_body': 'Discussed offline, but this is not necessary (Also I think this is causing a hang)\r\nThere are 2 waits for any given fence, but only one signal.', 'comment_created': datetime.datetime(2020, 8, 4, 17, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 465234745, 'comment_body': 'I removed it and the hang went away. It must have been progress_post.', 'comment_created': datetime.datetime(2020, 8, 4, 18, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 465241693, 'comment_body': 'Should I implement proper getters and setters here?', 'comment_created': datetime.datetime(2020, 8, 4, 18, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 467879621, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 10, 12, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 467879658, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 10, 12, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 467879692, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 10, 12, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 467879736, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 10, 12, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 467879781, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 10, 12, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 467879816, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 10, 12, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 467879893, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 10, 12, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 468006409, 'comment_body': 'You are probably fine for now, If it gets any more complicated we should do SOMETHING to manage complexity.', 'comment_created': datetime.datetime(2020, 8, 10, 15, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 468021411, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2020, 8, 10, 16, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}]","[{'commit_sha': '94f5dd41c067080a35ebf8896009b684df03e227', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
474557927,Overlapping frames,"This PR modifies the overlapping_frames sample for different image each frame.

I think we'll need to rebase the google master branch on the staging branch before we can merge. ",True,184,https://api.github.com/repos/google/vulkan_test_applications/pulls/184,https://github.com/google/vulkan_test_applications/pull/184,closed,70,35,2,2,0,10,0,0,[],2020-08-27 09:03:57+00:00,2020-11-23 15:11:34+00:00,7625257.0,"88 days, 6:07:37","[{'comment_id': 490761102, 'comment_body': 'Do you precisely need `0.0083333` ? This looks like a ""magic value"", would `0.008` do a good-enough job?\r\n\r\nUsing `0.008`, or even `0.01`, would look more like an arbitrary choice, reflecting the fact that this variable can be set to various values around that range, and doesn\'t have to be a specific precise value like `0.00833333`.\r\n\r\nIn other words, if in some code you see `foo = 123.456789`, you might think ""Oh, it looks like they had to fine-tune this value to some precise number"", whereas if you see `foo = 100`, it feels more like ""OK, foo should be roughly around value 100, but we might try some other values there"".', 'comment_created': datetime.datetime(2020, 9, 18, 7, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 490761524, 'comment_body': 'Also, make it a `const` if you can.', 'comment_created': datetime.datetime(2020, 9, 18, 7, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 490762541, 'comment_body': 'Same remark, could these values be rounded to something less-precise like `2.5, 0.6, 4.7` ?', 'comment_created': datetime.datetime(2020, 9, 18, 7, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 490844043, 'comment_body': ""In this case, these values are fine-tuned but I don't think the fine-tuning is necessary. They are the angle values that correspond to the original triangle co-ordinates that we were using.\r\n\r\nSince the triangle is constantly rotating, it shouldn't matter what the original orientation of the triangle is."", 'comment_created': datetime.datetime(2020, 9, 18, 10, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 490844353, 'comment_body': ""Yeah, this value is not fine tuned. I just chose a desired speed on the basis on personal preference. I'll document this fact in the code."", 'comment_created': datetime.datetime(2020, 9, 18, 10, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 494338777, 'comment_body': 'Cool. Any code update to this PR ?', 'comment_created': datetime.datetime(2020, 9, 24, 13, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 494339479, 'comment_body': 'OK. Can we use the less-precise values there then?', 'comment_created': datetime.datetime(2020, 9, 24, 13, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 494793452, 'comment_body': 'Sorry for the delay. It had slipped my mind. Are these new values alright?', 'comment_created': datetime.datetime(2020, 9, 25, 7, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 528594074, 'comment_body': 'All good, thanks.', 'comment_created': datetime.datetime(2020, 11, 23, 10, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}, {'comment_id': 528594157, 'comment_body': 'All good, thanks.', 'comment_created': datetime.datetime(2020, 11, 23, 10, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hevrard', 'type': 'User'}]","[{'commit_sha': '969229ab28933505177e410382c49fc73694edc7', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9a29a78da22639da6118348f1d2da1e41a459bb', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
435807395,Fix Vulkan Version,Create11InstanceForApplication should create a Vulkan application with version 1.1.x,True,159,https://api.github.com/repos/google/vulkan_test_applications/pulls/159,https://github.com/google/vulkan_test_applications/pull/159,closed,1,1,1,1,3,0,0,0,[],2020-06-17 12:06:56+00:00,2020-06-17 13:46:10+00:00,5954.0,1:39:14,[],"[{'commit_sha': '1b3ce52e24d156083aabf6e0e721b7868659661d', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
437184188,Fix bug in GetMemoryIndex,This bug was causing compilation for the repo to fail. This should fix it.,True,161,https://api.github.com/repos/google/vulkan_test_applications/pulls/161,https://github.com/google/vulkan_test_applications/pull/161,closed,2,1,1,1,0,0,0,0,[],2020-06-19 16:09:06+00:00,2020-06-19 16:35:17+00:00,1571.0,0:26:11,[],"[{'commit_sha': '772d4e4a7f0edfbf2bcf0fd941c5cce5773e6b9f', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
466815916,Add support for Push Constants in PipelineLayout,"I want to use Push Constants in a sample I'm working on, and would like to add Push Constants to PipelineLayout for the same.

Are these changes sufficient for this?",True,172,https://api.github.com/repos/google/vulkan_test_applications/pulls/172,https://github.com/google/vulkan_test_applications/pull/172,closed,10,5,1,3,3,3,0,0,[],2020-08-12 14:40:09+00:00,2020-08-12 19:25:40+00:00,17131.0,4:45:31,"[{'comment_id': 469334388, 'comment_body': 'Looks reasonable, I would prefer this to be called push_constant_ranges.', 'comment_created': datetime.datetime(2020, 8, 12, 15, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 469367280, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 12, 15, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}, {'comment_id': 469450729, 'comment_body': 'I think this comment can be removed now.', 'comment_created': datetime.datetime(2020, 8, 12, 18, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'krmoule', 'type': 'User'}]","[{'commit_sha': '65d18fbd0513f1ca2bbf5b6b135f7340924ee3ff', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce15a4c4cffd6fb014151bb14e59563f7a18319f', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c496a0d791aadff92dcc0c9c231e3eba56232f', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
466994690,Add Push Constants to CreatePipelineLayout,"Fixes a mistake with https://github.com/google/vulkan_test_applications/pull/172

Currently Push Constants cannot be used with vulkan::PipelineLayout because it can only be created via CreatePipelineLayout which doesn't support the optional parameter for VkPushConstantRanges.",True,173,https://api.github.com/repos/google/vulkan_test_applications/pulls/173,https://github.com/google/vulkan_test_applications/pull/173,closed,3,2,1,1,0,0,0,0,[],2020-08-12 20:36:31+00:00,2020-08-14 17:20:55+00:00,161064.0,"1 day, 20:44:24",[],"[{'commit_sha': '7b8668e2f985b03f63f0f636124652c4c0fe77a4', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12
469291842,Fix missing allocator in PipelineLayout constructor,"The PipelineLayout constructor uses a vector of VkPushConstantRange. However, it wasn't declared with the required allocator and the program crashes whenever push constants are used with CreatePipelineLayout.

This PR fixes the problem. ",True,180,https://api.github.com/repos/google/vulkan_test_applications/pulls/180,https://github.com/google/vulkan_test_applications/pull/180,closed,2,2,1,1,2,3,0,0,[],2020-08-18 08:25:09+00:00,2020-08-25 15:40:02+00:00,630893.0,"7 days, 7:14:53","[{'comment_id': 472217862, 'comment_body': ""Isn't there a constructor that takes a begin, end and allocator?"", 'comment_created': datetime.datetime(2020, 8, 18, 13, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'krmoule', 'type': 'User'}, {'comment_id': 472288007, 'comment_body': 'There should be \r\n```\r\ntemplate< class InputIt >\r\nvector( InputIt first, InputIt last,\r\n        const Allocator& alloc = Allocator() );\r\n```', 'comment_created': datetime.datetime(2020, 8, 18, 15, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AWoloszyn', 'type': 'User'}, {'comment_id': 472316083, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 8, 18, 16, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nipunG314', 'type': 'User'}]","[{'commit_sha': '42b01a32a9d4e575d2dae7856bd42cc33bef80e4', 'committer_username': 'nipunG314', 'committer_name': 'Nipun Garg', 'committer_email': None, 'commit_date': datetime.datetime(2016, 12, 8, 14, 41, 57, tzinfo=datetime.timezone.utc)}]",Nipun Garg,24457793,,User,,30,,21,12

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
150133859,graphicsfuzz,google/graphicsfuzz,Java,117,561,24,21,720,106,36,18,"[{'id': 475965410, 'number': 1061, 'closed': datetime.datetime(2020, 8, 31, 16, 54, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 21, 23, 45, tzinfo=datetime.timezone.utc), 'time_taken': 70238.0, 'time_delta': '19:30:38', 'additions': 347, 'deletions': 0, 'state': 'closed'}, {'id': 432904375, 'number': 1012, 'closed': datetime.datetime(2020, 6, 11, 9, 23, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 7, 55, 28, tzinfo=datetime.timezone.utc), 'time_taken': 5263.0, 'time_delta': '1:27:43', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 432637879, 'number': 1011, 'closed': datetime.datetime(2020, 6, 10, 20, 21, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 18, 52, 12, tzinfo=datetime.timezone.utc), 'time_taken': 5345.0, 'time_delta': '1:29:05', 'additions': 7, 'deletions': 3, 'state': 'closed'}, {'id': 431670751, 'number': 1007, 'closed': datetime.datetime(2020, 6, 9, 10, 10, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 9, 46, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1436.0, 'time_delta': '0:23:56', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 431357371, 'number': 1006, 'closed': datetime.datetime(2020, 6, 9, 12, 57, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 19, 43, tzinfo=datetime.timezone.utc), 'time_taken': 62057.0, 'time_delta': '17:14:17', 'additions': 46, 'deletions': 0, 'state': 'closed'}, {'id': 428806225, 'number': 1005, 'closed': datetime.datetime(2020, 6, 6, 13, 38, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 22, 12, 45, tzinfo=datetime.timezone.utc), 'time_taken': 55552.0, 'time_delta': '15:25:52', 'additions': 91, 'deletions': 0, 'state': 'closed'}, {'id': 427044404, 'number': 998, 'closed': datetime.datetime(2020, 6, 8, 19, 35, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 8, 27, 24, tzinfo=datetime.timezone.utc), 'time_taken': 472106.0, 'time_delta': '5 days, 11:08:26', 'additions': 213, 'deletions': 0, 'state': 'closed'}, {'id': 420572940, 'number': 990, 'closed': datetime.datetime(2020, 6, 3, 6, 44, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 7, 52, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1205525.0, 'time_delta': '13 days, 22:52:05', 'additions': 64, 'deletions': 0, 'state': 'closed'}]"
94361588,vulkan_test_applications,google/vulkan_test_applications,C++,43,70,13,23,253,5,20,1,"[{'id': 474557927, 'number': 184, 'closed': datetime.datetime(2020, 11, 23, 15, 11, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 9, 3, 57, tzinfo=datetime.timezone.utc), 'time_taken': 7625257.0, 'time_delta': '88 days, 6:07:37', 'additions': 70, 'deletions': 35, 'state': 'closed'}, {'id': 469291842, 'number': 180, 'closed': datetime.datetime(2020, 8, 25, 15, 40, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 8, 25, 9, tzinfo=datetime.timezone.utc), 'time_taken': 630893.0, 'time_delta': '7 days, 7:14:53', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 466994690, 'number': 173, 'closed': datetime.datetime(2020, 8, 14, 17, 20, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 20, 36, 31, tzinfo=datetime.timezone.utc), 'time_taken': 161064.0, 'time_delta': '1 day, 20:44:24', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 466815916, 'number': 172, 'closed': datetime.datetime(2020, 8, 12, 19, 25, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 14, 40, 9, tzinfo=datetime.timezone.utc), 'time_taken': 17131.0, 'time_delta': '4:45:31', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 460054298, 'number': 169, 'closed': datetime.datetime(2020, 8, 11, 18, 32, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 11, 25, 42, tzinfo=datetime.timezone.utc), 'time_taken': 975999.0, 'time_delta': '11 days, 7:06:39', 'additions': 860, 'deletions': 8, 'state': 'closed'}, {'id': 438546101, 'number': 162, 'closed': datetime.datetime(2020, 7, 21, 13, 22, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 12, 44, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2421525.0, 'time_delta': '28 days, 0:38:45', 'additions': 112, 'deletions': 7, 'state': 'closed'}, {'id': 437184188, 'number': 161, 'closed': datetime.datetime(2020, 6, 19, 16, 35, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 16, 9, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1571.0, 'time_delta': '0:26:11', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 435807395, 'number': 159, 'closed': datetime.datetime(2020, 6, 17, 13, 46, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 12, 6, 56, tzinfo=datetime.timezone.utc), 'time_taken': 5954.0, 'time_delta': '1:39:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
