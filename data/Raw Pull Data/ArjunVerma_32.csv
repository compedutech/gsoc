pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1357980825,Test scikit.odes installation nightly,"# Description

- `run_periodic_tests.yml` will now run test for `pybamm_install_odes` on GNU/Linux

Fixes #2962 

## Type of change

- [ ] New feature (non-breaking change which adds functionality)
- [x] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,2973,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/2973,https://github.com/pybamm-team/PyBaMM/pull/2973,closed,10,3,3,13,15,13,0,0,[],2023-05-20 15:16:44+00:00,2023-06-12 15:35:15+00:00,1988311.0,"23 days, 0:18:31","[{'comment_id': 1199778467, 'comment_body': '```suggestion\r\n        run: pybamm_install_odes\r\n\r\n```', 'comment_created': datetime.datetime(2023, 5, 21, 14, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1199778524, 'comment_body': '```suggestion\r\n      - name: Test pybamm_install_odes\r\n```', 'comment_created': datetime.datetime(2023, 5, 21, 14, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1208389972, 'comment_body': 'Why was the `tox` installation reverted?', 'comment_created': datetime.datetime(2023, 5, 28, 7, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1208463611, 'comment_body': ""I was just checking if it could install odes here too as it worked on my local system but here it didn't, so I reverted back to tox."", 'comment_created': datetime.datetime(2023, 5, 28, 9, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1208577607, 'comment_body': ""Hardcoding the env variable will fail the script locally. Is this script passing locally?\r\n\r\nMy idea was to pass `HOME` in the `testenv` environment specified in `tox.ini`. Something like this - \r\n\r\nhttps://github.com/pybamm-team/PyBaMM/blob/57d06db6a6da0cf5a304639df29163dd8e2113fb/tox.ini#L36\r\n\r\nAlso, the tests are passing because the `testenv` environment is reading SUNDIALS and scikits.odes from `pybamm-requires`, as the logs say -\r\n```\r\nodes run-test-pre: PYTHONHASHSEED='645949218'\r\nodes run-test: commands[0] | sh -c pybamm_install_odes\r\nRequirement already satisfied: scikits.odes in ./.tox/odes/lib/python3.10/site-packages (2.7.0)\r\nRequirement already satisfied: scipy in ./.tox/odes/lib/python3.10/site-packages (from scikits.odes) (1.10.1)\r\nRequirement already satisfied: numpy<1.27.0,>=1.19.5 in ./.tox/odes/lib/python3.10/site-packages (from scipy->scikits.odes) (1.24.3)\r\n/home/runner/work/PyBaMM/PyBaMM/pybamm/scikits_odes_setup.log\r\n/home/runner/.local/lib was found in LD_LIBRARY_PATH.\r\n--> Not updating venv activate or .bashrc scripts\r\n```\r\nCan you maybe try removing them in the workflows or the tox environment before `pybamm_install_odes` is tested?"", 'comment_created': datetime.datetime(2023, 5, 28, 15, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1208623221, 'comment_body': ""My bad, I'm now passing `HOME` in the `passenv`. \\\r\n\\\r\nBut as I speak about  SUNDIALS & `scikit.odes` being in `pybamm-requires`,\r\nI cannot find these two locally inside `pybamm-requires` so that i could try removing them before testing, but in `odes` (which is being created while testing pybamm_install_odes only) I can find `scikit.odes` and it's other dependencies. \r\n\\\r\nIn the image the above folder is `pybamm-requires` & below is `odes`:\r\n![image](https://github.com/pybamm-team/PyBaMM/assets/104268427/8f03645b-8039-4c91-83cb-4376c1b2e2a3)\r\n\r\n"", 'comment_created': datetime.datetime(2023, 5, 28, 18, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1208633199, 'comment_body': 'You can simply do `pip uninstall --yes scikits.odes` to remove the python library. `SUNDIALS` is not a python library hence it will not be present in the `site-packages` directory; the path should be present in `scikits_odes_setup.log`.', 'comment_created': datetime.datetime(2023, 5, 28, 19, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1209049642, 'comment_body': '> You can simply do `pip uninstall --yes scikits.odes` to remove the python library. `SUNDIALS` is not a python library hence it will not be present in the `site-packages` directory; the path should be present in `scikits_odes_setup.log`.\r\n\r\nI have handled this, all tests are passing locally. I am now running scheduled tests to make sure things are right.\r\n\r\n', 'comment_created': datetime.datetime(2023, 5, 29, 8, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1209154695, 'comment_body': 'Here are the [tests](https://github.com/arjxn-py/PyBaMM/actions/runs/5109964949) @Saransh-cpp ', 'comment_created': datetime.datetime(2023, 5, 29, 10, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1210010820, 'comment_body': ' Is it possible to club these commands in a single line or as a list? If not, then this should be good too.', 'comment_created': datetime.datetime(2023, 5, 30, 9, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1210165597, 'comment_body': ""I've been able to do that, but now while i'm testing it using `tox -e odes` i'm getting the same error logs I was getting before. I would also verify this by running scheduled tests."", 'comment_created': datetime.datetime(2023, 5, 30, 11, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1210263741, 'comment_body': '@Saransh-cpp scheduled tests are having same [logs](https://github.com/arjxn-py/PyBaMM/actions/runs/5121164913), so it is not likely an issue with my local system.', 'comment_created': datetime.datetime(2023, 5, 30, 13, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1211875214, 'comment_body': 'That worked! We can revert this back to `6.5.0` now and trigger the scheduled run one last time. If everything passes after updating the version to `6.5.0` then this PR should be good to go.', 'comment_created': datetime.datetime(2023, 5, 31, 15, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': 'c6e1ddff57644411ea5a94eb44bbc0035b90fe81', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00d49b65acaeb71f9c306a33020d5692bc6dcf39', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5b984a9d337310e33db68cc4966c61c353d66a3', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '414969902fde411b4b231c4b579e06ac48403456', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb8e161057a4be31f13408daa27a9c10bad41d0d', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a54a48281ac57696f43d48c4bcc72aa01a20dc62', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b77b53ac1603f737791e05e9ed8f856c2cf010db', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34bab1c1f36a3bcf66c7cdde1c743ba28d09681f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b7386bb9b583ead991730ca694254012e2327fe', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '374c5b8cc12740e2c1a140870844e3ee296583f6', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '952294aa28312056bd7000aafb3db35def6588bb', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fb0ea770649ea2af41fe120161841e122166539', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffc0e6acb11b1d62a4bb5111eae58eb4364322f7', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1372638234,Migrate from `tox 3.28` to `nox`,"# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes # (issue)

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [x] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [x] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [x] All tests pass: `$ python run-tests.py --all`
- [x] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3005,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3005,https://github.com/pybamm-team/PyBaMM/pull/3005,closed,181,182,11,13,28,81,0,0,[],2023-05-31 17:45:55+00:00,2023-06-27 14:38:17+00:00,2321542.0,"26 days, 20:52:22","[{'comment_id': 1221827753, 'comment_body': 'I think this was repeated twice.', 'comment_created': datetime.datetime(2023, 6, 7, 15, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221829051, 'comment_body': '```suggestion\r\ndef run_unit(session):\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 15, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221835202, 'comment_body': '```suggestion\r\n        run: nox -s unit\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 15, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221835361, 'comment_body': '```suggestion\r\n        run: nox -s coverage\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 15, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221835536, 'comment_body': '```suggestion\r\n        run: nox -s integration\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 15, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221835680, 'comment_body': '```suggestion\r\n        run: nox -s mac-windows-unit\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 15, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221835879, 'comment_body': '```suggestion\r\n        run: nox -s mac-windows-integration\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 15, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221838347, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 15, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221838468, 'comment_body': '```suggestion\r\n          python -m pip install --upgrade pip wheel setuptools nox\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 15, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221839031, 'comment_body': 'We can remove this file now?', 'comment_created': datetime.datetime(2023, 6, 7, 15, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1221950377, 'comment_body': 'Oops! Yeah it was repeated. \r\nFixed it.', 'comment_created': datetime.datetime(2023, 6, 7, 17, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1221967588, 'comment_body': 'Removed for now', 'comment_created': datetime.datetime(2023, 6, 7, 17, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1223923028, 'comment_body': '```suggestion\r\n    session.run(""coverage"", ""run"", ""--rcfile=.coveragerc"", ""run-tests.py"", ""--nosub"")\r\n```\r\n\r\nJust to ensure that it reads from the file, not strictly needed though', 'comment_created': datetime.datetime(2023, 6, 9, 7, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1223970363, 'comment_body': ""Also, don't mind me barging in with a review lol—I suggested these changes because I received a review request notification on mobile, but I don't see it on web"", 'comment_created': datetime.datetime(2023, 6, 9, 7, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1224142533, 'comment_body': ""It's totally cool, you can always suggest changes if you feel like, i'm glad you took a look into it."", 'comment_created': datetime.datetime(2023, 6, 9, 10, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1224578085, 'comment_body': ""This should ideally go in the if statement below. We don't really want to install `scikits.odes` on every OS. Installing `coverage` here should be fine."", 'comment_created': datetime.datetime(2023, 6, 9, 17, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1224579404, 'comment_body': '`run_integration` and `run_mac_windows_integration` are same. Can we just use a single function for every OS? Given that the dependencies are being installed using a different function.', 'comment_created': datetime.datetime(2023, 6, 9, 17, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1224579677, 'comment_body': 'See the comment on `run_mac_windows_unit`', 'comment_created': datetime.datetime(2023, 6, 9, 17, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1224582423, 'comment_body': 'Can you refactor this step out as a new function? Maybe something like this -\r\n\r\n```py\r\n@nox.session(name=""install-jax"")\r\n    def run_install_jax(session):\r\n        if sys.platform != ""win32"":\r\n             session.run(""pybamm_install_jax"")\r\n```\r\n\r\nand then execute it only once in the workflows?\r\n', 'comment_created': datetime.datetime(2023, 6, 9, 17, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1224583499, 'comment_body': 'It would also be good to refactor the `[dev]` and `[doc]` installations to avoid installing stuff multiple times.', 'comment_created': datetime.datetime(2023, 6, 9, 17, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1224583900, 'comment_body': '```suggestion\r\n        run: nox -s integration\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1224584067, 'comment_body': '```suggestion\r\n        run: nox -s coverage\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1224584193, 'comment_body': '```suggestion\r\n        run: nox -s unit\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1224584461, 'comment_body': '```suggestion\r\n        run: nox -s mac-windows-unit\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1224584576, 'comment_body': '```suggestion\r\nconcurrency = multiprocessing\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 9, 17, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1225715985, 'comment_body': 'Now `scikits.odes` would only be installed in GNU/Linux.', 'comment_created': datetime.datetime(2023, 6, 11, 5, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1225992336, 'comment_body': ""I don't think this should be the case, since `scikits.odes` does get installed on macOS when one runs `tox -e coverage`. The difference is that on Linux, we should use the `pybamm_install_odes` command, and on macOS, we should use `pip install scikits.odes`"", 'comment_created': datetime.datetime(2023, 6, 12, 1, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1225997062, 'comment_body': '`tox -e coverage` never runs on MacOS, so we currently only test the solver on Linux. `pybamm_install_odes` is not really used anywhere in the CI, the script is only meant for users (see #2962).\r\n\r\n`pybamm_install_odes` calls `pip install scikits.odes` internally, and acts almost identical to `tox -e coverage`, the only difference being that it does not build `SUNDIALS` with `KLU`. We can use `pip install scikits.odes` on any OS, given that we have `SUNDIALS` installed correctly.', 'comment_created': datetime.datetime(2023, 6, 12, 1, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1226020857, 'comment_body': ""Thanks, I get it now – we shouldn't use `pybamm_install_odes` in the CI that way. However, though `tox -e coverage` does not run on macOS in the CI (it runs only for Linux), it is intended to be run locally too on all three platforms. So I suggest we install `scikits.odes` on macOS too with `nox -s coverage`, just to replicate the functionality of the local macOS `tox -e coverage`. \r\n\r\nOtherwise, we should have different `coverage` environments for CI and for running locally (which does not seem to be a good idea, obviously)"", 'comment_created': datetime.datetime(2023, 6, 12, 2, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1226023842, 'comment_body': ""```suggestion\r\n      - name: Run unit tests for GNU/Linux with Python 3.11 and generate coverage report\r\n        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11\r\n        run: nox -s coverage\r\n```"", 'comment_created': datetime.datetime(2023, 6, 12, 2, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1226024078, 'comment_body': ""```suggestion\r\n      - name: Run unit tests for GNU/Linux with Python 3.8, 3.9, and 3.10\r\n        if: matrix.os == 'ubuntu-latest' && matrix.python-version != 3.11\r\n        run: nox -s unit\r\n```\r\n\r\nMaybe these were reversed when merging changes from #3016 into your branch"", 'comment_created': datetime.datetime(2023, 6, 12, 2, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1226025224, 'comment_body': ""```suggestion\r\n      - name: Run unit tests for GNU/Linux with Python 3.8, 3.9, and 3.10\r\n        if: matrix.os == 'ubuntu-latest' && matrix.python-version != 3.11\r\n        run: nox -s unit\r\n```"", 'comment_created': datetime.datetime(2023, 6, 12, 2, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1226025398, 'comment_body': ""```suggestion\r\n      - name: Run unit tests for GNU/Linux with Python 3.11 and generate coverage report\r\n        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11\r\n        run: nox -s coverage\r\n```"", 'comment_created': datetime.datetime(2023, 6, 12, 2, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1226111709, 'comment_body': ""Now we've single function for `integration`"", 'comment_created': datetime.datetime(2023, 6, 12, 5, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1226114006, 'comment_body': 'Yes, actually `[pybamm_requires]` is enough for most of the sessions although `examples` do require `[dev]` installation.', 'comment_created': datetime.datetime(2023, 6, 12, 5, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1226123715, 'comment_body': 'Now we have single `unit` test for all OS in which `jax` is only being installed on linux.', 'comment_created': datetime.datetime(2023, 6, 12, 5, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1226130247, 'comment_body': 'I can do this but I would still have to install `jax` explicitely in requiring sessions due to `isolated_build`.\r\nThat being said we are executing `pybamm_install_jax` two times (only on linux) which barely takes 10-15 seconds on CI.', 'comment_created': datetime.datetime(2023, 6, 12, 6, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1226297997, 'comment_body': '`setup.py` does not define `[pybamm_requires]` as an extra (the only extras are `dev` and `docs`)—it also shows a warning in the [logs](https://github.com/pybamm-team/PyBaMM/actions/runs/5240025303/jobs/9460419988?pr=3005#step:10:19). This should be just `pip install -e .` (and similarly in other places too)', 'comment_created': datetime.datetime(2023, 6, 12, 8, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1226321881, 'comment_body': 'Thanks, made those changes.', 'comment_created': datetime.datetime(2023, 6, 12, 8, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1227334390, 'comment_body': ""Hmm, why aren't we setting these variables in `run_pybamm_requires`?"", 'comment_created': datetime.datetime(2023, 6, 12, 23, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1227335711, 'comment_body': ""Do we require setting these variables again? What I meant with dev -\r\n\r\nWe're installing the Pythonic dependencies in every session, which will slow down the CI. We should refactor that installation process in a single function and call that function in the CI before any tests (`nox -s dev`)."", 'comment_created': datetime.datetime(2023, 6, 12, 23, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1227336784, 'comment_body': 'We can use the `--concurrency` flag while executing coverage. Something like `--concurrency=multiprocessing`. We can then get rid of this file.', 'comment_created': datetime.datetime(2023, 6, 12, 23, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1227338983, 'comment_body': ""Note: this will change `git blame`. It would be better to fix the merge instead of manually committing the upstream changes. (If there are a lot of conflicts then manual commits might be a good idea, but I don't think there will be a lot of conflicts.)"", 'comment_created': datetime.datetime(2023, 6, 12, 23, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1227339103, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2023, 6, 12, 23, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1227339177, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2023, 6, 12, 23, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1227339880, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2023, 6, 12, 23, 33, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1227341626, 'comment_body': ""Actually, no we can't—we can specify `--concurrency=multiprocessing` as a command-line argument but not `--source=pybamm`. The `coverage` docs say it needs this in a config file which can be either `tox.ini` or `setup.cfg` or `.coveragerc` (as discussed above). So it would be better to have both of these options in one place/file, in that sense"", 'comment_created': datetime.datetime(2023, 6, 12, 23, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1227354288, 'comment_body': ""Ah, we can do `--source` but we can't do `--source` and `--concurrency` together."", 'comment_created': datetime.datetime(2023, 6, 13, 0, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1227355988, 'comment_body': 'Yes. I suppose an extra file should not be a problem until `coverage` adds support for `noxfile.py`', 'comment_created': datetime.datetime(2023, 6, 13, 0, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1227988419, 'comment_body': ""Since these were not also declared in `tox : [pybamm-requires]` I'm setting up these variables wherever required."", 'comment_created': datetime.datetime(2023, 6, 13, 11, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1228012333, 'comment_body': ""@Saransh-cpp I had tried doing that more than a couple of times before & just now too but since `isolated_build` is turned on every session is creating seperate `.nox/env/lib/python/site-packages` which means even if I ran a session to install all the deps say `dev` I'd still have to install the deps as another session wouldn't look for libraries in `.nox/dev/lib/python/site-packages` but in `.nox/session_name/lib/python/site-packages`."", 'comment_created': datetime.datetime(2023, 6, 13, 12, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1228021615, 'comment_body': 'About setting those variables again, I can globally declare the variables above but global declaration is not recommended.', 'comment_created': datetime.datetime(2023, 6, 13, 12, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1228082689, 'comment_body': 'Can you please simplify a bit if I need to do something in this regard?', 'comment_created': datetime.datetime(2023, 6, 13, 12, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1228187787, 'comment_body': 'I think it would be better to just add them in `run_pybamm_requires`.', 'comment_created': datetime.datetime(2023, 6, 13, 14, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1228188013, 'comment_body': ""Ah, that makes sense. I'll have a look at this PR today locally and make the final suggestions / approval."", 'comment_created': datetime.datetime(2023, 6, 13, 14, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1228312987, 'comment_body': ""I've added them in `run_pybamm_requires` as well. \r\nYou don't want me to set them globally, do you 👀."", 'comment_created': datetime.datetime(2023, 6, 13, 15, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1228418621, 'comment_body': 'Something left to be addressed in this PR is to update the CHANGELOG, and the documentation: to account for the change to `nox` wherever required and breaking changes in the installation and developer workflow processes (if any)', 'comment_created': datetime.datetime(2023, 6, 13, 16, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1228488183, 'comment_body': '> Something left to be addressed in this PR is to update the CHANGELOG, and the documentation: to account for the change to `nox` wherever required and breaking changes in the installation and developer workflow processes (if any)\r\n\r\nOn it.', 'comment_created': datetime.datetime(2023, 6, 13, 17, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1228621156, 'comment_body': 'Almost forgot the docs! Thanks for the reminder!', 'comment_created': datetime.datetime(2023, 6, 13, 19, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1229127114, 'comment_body': ""```suggestion\r\n      - name: Install nox and asv\r\n        run: pip install -U pip nox asv\r\n```\r\n\r\nWe can remove the double quotes since we don't need to install a specific version of `nox`"", 'comment_created': datetime.datetime(2023, 6, 14, 7, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1229127774, 'comment_body': '```suggestion\r\n\t  python3.X -m pip install --user nox\r\n```', 'comment_created': datetime.datetime(2023, 6, 14, 7, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1229135476, 'comment_body': 'This failed for me locally because changing to the `docs/` directory was trying to install `pybamm` there, rather than the root directory – it could not find `setup.py` inside `docs/`. Also, `sphinx-autobuild` wasn\'t able to find `conf.py` for building the documentation (it should run from within the `docs/` folder).\r\n\r\nWe probably don\'t need to make a `docs/` directory since it\'s not git-ignored and should never get deleted\r\n\r\n```suggestion\r\n@nox.session(name=""docs"", reuse_venv=True)\r\ndef build_docs(session):\r\n    envbindir = session.bin\r\n    session.run(""pip"", ""install"", ""-e"", ""."")\r\n    session.install(\r\n        ""sphinx>=1.5"",\r\n        ""pydata-sphinx-theme"",\r\n        ""sphinx-autobuild"",\r\n        ""sphinx_design"",\r\n        ""sphinx-copybutton"",\r\n        ""myst-parser"",\r\n        ""sphinx-inline-tabs"",\r\n    )\r\n    session.chdir(""docs/"")\r\n    session.run(\r\n        ""sphinx-autobuild"", ""--open-browser"", ""-qT"", ""."", f""{envbindir}/../tmp/html""\r\n    )\r\n```', 'comment_created': datetime.datetime(2023, 6, 14, 7, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1229147879, 'comment_body': 'Makes sense, thanks for the correction.', 'comment_created': datetime.datetime(2023, 6, 14, 7, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1229526987, 'comment_body': 'This should also install `scikits.odes`.', 'comment_created': datetime.datetime(2023, 6, 14, 12, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1229531583, 'comment_body': '`scikits.odes` should be installed here.', 'comment_created': datetime.datetime(2023, 6, 14, 12, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233069234, 'comment_body': '```suggestion\r\n          python -m pip install nox\r\n```', 'comment_created': datetime.datetime(2023, 6, 17, 14, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233069302, 'comment_body': ""```suggestion\r\n13. When you feel your code is finished, or at least warrants serious discussion, run the [pre-commit checks](#pre-commit-checks) and then create a [pull request](https://help.github.com/articles/about-pull-requests/) (PR) on [PyBaMM's GitHub page](https://github.com/pybamm-team/PyBaMM).\r\n```"", 'comment_created': datetime.datetime(2023, 6, 17, 14, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233072171, 'comment_body': ""We'll need to install `scikits.odes` here and set the env variables."", 'comment_created': datetime.datetime(2023, 6, 17, 14, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233072642, 'comment_body': '```suggestion\r\n.coveragerc\r\n```', 'comment_created': datetime.datetime(2023, 6, 17, 14, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233074777, 'comment_body': 'Thanks for the review @Saransh-cpp 😀, I have made the suggested changes.', 'comment_created': datetime.datetime(2023, 6, 17, 14, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1233147610, 'comment_body': 'I think this should work?\r\n```suggestion\r\n    session.run(""pip"", ""install"", ""-e"", "".[docs]"")\r\n```', 'comment_created': datetime.datetime(2023, 6, 17, 22, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233147647, 'comment_body': '```suggestion\r\n    session.run(""pip"", ""install"", ""-e"", "".[dev]"")\r\n```', 'comment_created': datetime.datetime(2023, 6, 17, 22, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233147990, 'comment_body': 'Should we also reuse this environment? Should make things a bit faster.\r\n```suggestion\r\n@nox.session(name=""coverage"", reuse_venv=True)\r\n```', 'comment_created': datetime.datetime(2023, 6, 17, 22, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233148031, 'comment_body': 'Ditto!\r\n```suggestion\r\n@nox.session(name=""pybamm-requires"", reuse_venv=True)\r\n```', 'comment_created': datetime.datetime(2023, 6, 17, 22, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233148273, 'comment_body': 'Also, looking at this again, it would be better to just replace all the `session.run(""pip"", ""install"", ""-e"", ""something"")` occurrences with `session.install(""-e"", ""something"")`.', 'comment_created': datetime.datetime(2023, 6, 17, 23, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1233192037, 'comment_body': 'Note: when I had re-run `pybamm-requires` locally, it failed because `pybind11` was already a directory in the source tree. We might need to wrap something like\n\n```python\nif os.path.exists(pybind11_path):\n    os.rmdir(pybind11_path)\n```\n\nor with `pathlib.Path.rmdir` or `shutil.rmtree` as necessary and catch related errors.', 'comment_created': datetime.datetime(2023, 6, 18, 5, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1233203411, 'comment_body': 'It would make no effect on time but yeah no harm to use it.', 'comment_created': datetime.datetime(2023, 6, 18, 6, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1233203504, 'comment_body': 'Sure, doing it this way.', 'comment_created': datetime.datetime(2023, 6, 18, 6, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1233204260, 'comment_body': 'Thanks @agriyakhetarpal, looking into it.', 'comment_created': datetime.datetime(2023, 6, 18, 6, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1236897124, 'comment_body': '```suggestion\r\n    if sys.platform == ""linux"":\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1242894548, 'comment_body': '```suggestion\r\n    session.install(""-e"", "".[dev]"")\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 22, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': 'b5372bebbe089b2759a3c0aa09a24f36518811d2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '961a6be65558a36e53658dd9fc14f8899cfd9fba', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa8b8ad5c6553bfbeed9c1ba608578a19fbb25e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31571da37212a6d14ca07b80df6d26f7bf86198d', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94d8feea818c6de3664f8d097d794a2f4af745a2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c358999879c1eaa32fd5af96f70a1f195cd74ba', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d8eaa64493fac162f5ee424c7b774dbe111ddff', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '213b9bf043df8e1c2c622b89cfff8f5a08379983', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33e1229b2319ef5fa4892a6406a1934789f477e2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd95e08756f3f7a040a9b9cf75e833fe5a20582b7', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca2aa25800f4a3a8be52f236755ff6e3b9e17c7c', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9339efe8322791fe0d42f2db397b30d8eeb40761', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd526dfc76246501206077fa6a4dde790cd7980a5', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1395730764,Create Optional Dependencies,"# Description

The goal of this PR is to make most of the dependencies optional & split them in specific group

Fixes #3035 

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [x] New feature (non-breaking change which adds functionality)
- [x] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [x] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [x] All tests pass: `$ python run-tests.py --all`
- [x] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [x] Code is commented, particularly in hard-to-understand areas
- [x] Tests added that prove fix is effective or that feature works
",True,3044,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3044,https://github.com/pybamm-team/PyBaMM/pull/3044,closed,194,24,6,34,16,34,0,0,[],2023-06-16 13:30:56+00:00,2023-07-06 14:43:32+00:00,1732356.0,"20 days, 1:12:36","[{'comment_id': 1236902532, 'comment_body': '```suggestion\r\n        ""examples"": [\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1236903003, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1236903757, 'comment_body': '```suggestion\r\n            ""matplotlib>=2.0"",\r\n            ""pre-commit"",\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1236906900, 'comment_body': 'We can remove these. Is pandas installing doc dependencies in the `[all]` section?', 'comment_created': datetime.datetime(2023, 6, 21, 12, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1241160677, 'comment_body': ""pandas do not have specified group for docs but they're installing each & every defined dependency in `[all]` section.\r\nBut yeah we can remove doc deps from all to reduce size."", 'comment_created': datetime.datetime(2023, 6, 25, 12, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1241321676, 'comment_body': 'I think pre-commit and black should only be a dev dependency', 'comment_created': datetime.datetime(2023, 6, 25, 23, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'valentinsulzer', 'type': 'User'}, {'comment_id': 1241321740, 'comment_body': 'these are not dev dependencies since they are always installed anyway', 'comment_created': datetime.datetime(2023, 6, 25, 23, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'valentinsulzer', 'type': 'User'}, {'comment_id': 1241321754, 'comment_body': 'not dev', 'comment_created': datetime.datetime(2023, 6, 25, 23, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'valentinsulzer', 'type': 'User'}, {'comment_id': 1241321764, 'comment_body': 'not dev', 'comment_created': datetime.datetime(2023, 6, 25, 23, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'valentinsulzer', 'type': 'User'}, {'comment_id': 1241321847, 'comment_body': ""does it really speed up loops?? I think it's just for logging loops"", 'comment_created': datetime.datetime(2023, 6, 25, 23, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'valentinsulzer', 'type': 'User'}, {'comment_id': 1242584821, 'comment_body': 'Thanks @tinosulzer got it, removed them from `[all]` as well.', 'comment_created': datetime.datetime(2023, 6, 26, 18, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1242585161, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 6, 26, 18, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1242586163, 'comment_body': '`scikit-fem` has to be in `[dev]` or any other recommended section as we are not installing it elsewhere.', 'comment_created': datetime.datetime(2023, 6, 26, 18, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1242587359, 'comment_body': 'I got it wrong, thanks for correction 😃 ', 'comment_created': datetime.datetime(2023, 6, 26, 18, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1242588753, 'comment_body': ""Sure, they're now being installed with `[dev]` only."", 'comment_created': datetime.datetime(2023, 6, 26, 18, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1243905814, 'comment_body': 'Should not be in `[dev]`. It should have its own section I think.', 'comment_created': datetime.datetime(2023, 6, 27, 15, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1245490617, 'comment_body': '@tinosulzer should I make a separate section for `autograd`, `anytree` & `scikits-fem`, if so what should be the name I may give it?', 'comment_created': datetime.datetime(2023, 6, 28, 16, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1247549927, 'comment_body': 'Replace the `-` by `\\-` so it renders as a dash', 'comment_created': datetime.datetime(2023, 6, 30, 7, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'brosaplanella', 'type': 'User'}, {'comment_id': 1248095637, 'comment_body': 'Done. 🙂 ', 'comment_created': datetime.datetime(2023, 6, 30, 17, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1251019493, 'comment_body': 'Should this be just `docs`?', 'comment_created': datetime.datetime(2023, 7, 3, 15, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1251020994, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 3, 15, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1251022124, 'comment_body': 'Should this also be just `docs`?', 'comment_created': datetime.datetime(2023, 7, 3, 15, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1251025013, 'comment_body': 'Great docs!!', 'comment_created': datetime.datetime(2023, 7, 3, 15, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1251026073, 'comment_body': 'This would have to go to the unreleased section.', 'comment_created': datetime.datetime(2023, 7, 3, 15, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1251156193, 'comment_body': 'These are also requiring other dependencies as well, i remember pybtex, tqdm and etc. so I ended up installing [all] too.\r\nPreviously it was `[dev,plot,cite,latexify,bpx,tqdm]`', 'comment_created': datetime.datetime(2023, 7, 3, 17, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1251156666, 'comment_body': '> Should this also be just `docs`?\r\n\r\n`[dev,docs]` could work here.', 'comment_created': datetime.datetime(2023, 7, 3, 17, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1251161392, 'comment_body': 'Thanks 😃 ', 'comment_created': datetime.datetime(2023, 7, 3, 17, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1251907333, 'comment_body': 'I tried that but [tests](https://github.com/pybamm-team/PyBaMM/actions/runs/5447374473/jobs/9909365784#step:15:24) were failing so currently installing `[all]`.', 'comment_created': datetime.datetime(2023, 7, 4, 11, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1252105988, 'comment_body': '@arjxn-py could you merge develop again? I think there were some merge issues here.', 'comment_created': datetime.datetime(2023, 7, 4, 14, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1252108262, 'comment_body': 'I think you ended up creating duplicate entries.', 'comment_created': datetime.datetime(2023, 7, 4, 14, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1252144050, 'comment_body': 'My bad, Sorry for that. Fixed it.', 'comment_created': datetime.datetime(2023, 7, 4, 15, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1252144680, 'comment_body': 'Yep 😅, fixed that.', 'comment_created': datetime.datetime(2023, 7, 4, 15, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1252150109, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 15, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1252151185, 'comment_body': 'To make it a bit more clear to the users\r\n```suggestion\r\n- PyBaMM now has optional dependencies that can be installed with the pattern `pip install pybamm[option]` e.g. `pybamm[plot]` ([#3044](https://github.com/pybamm-team/PyBaMM/pull/3044))\r\n```', 'comment_created': datetime.datetime(2023, 7, 4, 15, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': '0c14b094331ff0c3138b84f7c4d9377ed517a45d', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fa1311c57103ba6e3d443f73de92d76000cc97a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436184692b71f6f07500d3c897756b15c4d3690e', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b749f4afaf735a992872415319f1f354193534a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71232720a1f2275cbfe17caf50de93eeb7a171b0', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1381d39909fc4c465d428bbee276df0711b6619f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d99eb8cd4f1d5348f5cbfdc22a36b44e101a97a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '994db56f255f991a6918336261eaa54120419464', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87e11711bbf7eb8108b447ce228ab89bb9cd63f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72a889c8b91f3ba0c14b9a99644ce1e3c1dd4004', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3634661dd604a72ecc6e0de52985c7f0411e029f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad1d9b147d805abf46f956fe8bd74bfdef6cb433', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca20dbcb4f9d514898a71439336b3ad45e4891a8', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65a2650c46f251e0fa94aa459a48d3bbec2bfadf', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f8d5d3674bca98c6c88504214ab363c7cd90e7', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7a653688e0f3dd1a6c4c7d87023133635cd354f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee6b0708be4686e27cb777d560587d6393c0102', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b81bb9038c438822045f8c2d50b9863c71f63048', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14bcf3aeb7cc3782241ab22516ec0f9a9c474a9b', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '574c37ca080d9016947bf1a3673d01181344aed9', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '828aa05de38836a5d441155c8cdd9dd924c782dd', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52f41183fff8bf27dd777936bf6e8a2d8be45016', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe2449bef46b4a9e291c3ea6a47bbd38d9e242e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a6cbb7b90fb1fd60903b36d4470e8bc73f2b0f5', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5030f9aa556739cca9ceb5828ce034835b806ef', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a886250b2fc95e5f69e081eff3785a7887ccb16', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8101d3a86c50188ee2e13f2f599116736ee907c', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c25cab902080be73202dfb96833535899934a4e6', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50f20cc0c657a7d5fa31c7a25d0dc565a7c10742', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '876b8227d6241a733113b641ca51e9311cdeea5e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b75abeb2e9042076c64737bd40553d01a54f53f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '694322978be00be719371a3810e0549bbe470fe9', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '432b02b6ce75148ef2d9411310b173f1815e1572', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63524b4e424dd9bdea6921465735e12b805e50c1', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1413782314,Refactor env variables in a single function,"# Description

Currently environment variables in `noxfile.py` are being set in each session explicitely, This PR aims to refactor & reduce the repetations of setting those variables again & again.

Fixes # (issue)

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [x] Optimization (back-end change that speeds up the code)
- [x] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [x] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3082,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3082,https://github.com/pybamm-team/PyBaMM/pull/3082,closed,32,30,1,14,11,13,0,0,[],2023-06-29 18:49:51+00:00,2023-07-12 16:11:39+00:00,1113708.0,"12 days, 21:21:48","[{'comment_id': 1251110501, 'comment_body': 'pre-commit CI is erroring out here (correctly) -\r\n```\r\nnoxfile.py:87:28: F821 Undefined name `LD_LIBRARY_PATH`\r\nnoxfile.py:89:12: F821 Undefined name `envbindir`\r\n``` ', 'comment_created': datetime.datetime(2023, 7, 3, 16, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1253657292, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 21, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1253657527, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 21, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1253658583, 'comment_body': 'I think this should not have been removed?', 'comment_created': datetime.datetime(2023, 7, 5, 21, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1253658885, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 21, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1253682956, 'comment_body': '```python \r\n    homedir = os.getenv(""HOME"")\r\n    LD_LIBRARY_PATH = f""{homedir}/.local/lib:{session.env.get(\'LD_LIBRARY_PATH\')}""\r\n    envbindir = session.bin\r\n    session.install(""-e"", "".[dev]"")\r\n```\r\nAdded some extra as without this it is breaking locally with : \r\n```python \r\nNameError: name \'LD_LIBRARY_PATH\' is not defined\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 21, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1253695159, 'comment_body': 'Does this session really require the `run` line? I think the env variables can just be set using `set_environment_variables(session=session)`?', 'comment_created': datetime.datetime(2023, 7, 5, 21, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1253712921, 'comment_body': 'I believe it is required as we are using `bash` to export variables in the shell.', 'comment_created': datetime.datetime(2023, 7, 5, 22, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1253750259, 'comment_body': ""But we aren't doing this in other sessions?"", 'comment_created': datetime.datetime(2023, 7, 5, 23, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1254325065, 'comment_body': ""We are't doing it other sessions because we don't have to do `source .nox/session/bin/activate` with any other session.\r\nBut in case to dev it is required to activate the dev env further."", 'comment_created': datetime.datetime(2023, 7, 6, 11, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1254344725, 'comment_body': 'Makes sense, but we should not redefine the variables in `set_dev`, instead, we can read them from the environment and pass those values in the `run` command', 'comment_created': datetime.datetime(2023, 7, 6, 12, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1261314484, 'comment_body': '```suggestion\r\n        f""LD_LIBRARY_PATH={PYBAMM_ENV[\'LD_LIBRARY_PATH\']}"",\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 14, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1261318951, 'comment_body': '```suggestion\r\n    Parameters\r\n    -----------\r\n        session : nox.Session\r\n            The session to set the environment variables for.\r\n        env_dict : dict\r\n            A dictionary of environment variable names and values.\r\n```', 'comment_created': datetime.datetime(2023, 7, 12, 15, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': '323e3db93475ad14fd9207217f84d55cbb7ac5b5', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30ce9267b56419d1f65f967181f3a2f67fa40334', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3766b94472a28794c1ed75bd25cbebcea80a19e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64fbdde1b59bd07ddaf69180c1a50f00652498dc', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6114b97f1496760c193ecf3919a00f1313f9346a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e04153153b53f5077d7236a78fba40ee59e78f7', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346c3107232956e77c90f8d1c6c2d7ff8237d9c2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '306ad290c9d0bcff3b9fdd7194422a0a31d486c5', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efda8b160e9ff7a726067ed8bc2f6ec3f0a5c0d1', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f73f8a44fd7ec44114cc1682996e7979cde16d4f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4da57b874f1386f68f702379f1f4279af62b64', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa4fdb95c5c9baf9fd0847b898dcf599bdce04a0', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1de9a46e76a0a65fee3f00e3770e746812a49dd2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5c01e926c482dbc5d21a07d4809b29e2bf99dfd', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1414002439,Add pre-commit session & add default sessions,"# Description

This PR aims to add a pre-commit nox session.

Fixes # (issue)

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [x] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3084,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3084,https://github.com/pybamm-team/PyBaMM/pull/3084,closed,12,1,2,7,8,3,0,0,[],2023-06-29 21:59:02+00:00,2023-07-05 21:42:02+00:00,517380.0,"5 days, 23:43:00","[{'comment_id': 1253080610, 'comment_body': 'We might want to check if a user is on Linux, and then add `pybamm-requires` as a default session as well. This will also need some documentation 🙂 ', 'comment_created': datetime.datetime(2023, 7, 5, 13, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1253538082, 'comment_body': ""I did that, didn't felt modifying documentation much for this so modified `nox -s unit` section a bit. Please let me know if more is required."", 'comment_created': datetime.datetime(2023, 7, 5, 19, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1253653304, 'comment_body': 'This should actually go in the place of `nox -s tests` above this, with a minor modification in the test. Maybe we can have a table like structure for nox commands, just like we have for optional dependencies.', 'comment_created': datetime.datetime(2023, 7, 5, 21, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': '03fbc2c07063c00bbd9e33afb2f443992193ecca', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b6f6b8e0d40019809448b7ebd561c4648fd6be', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93131d68f2bc5a3c78c03b674ad104761795b8c1', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3715c03dbe0b3caf7e0a369411c67422a28f5364', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93d77e71adf35abac1f1ddbc9abd2ed94a405913', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '855604b6b0761d8b1ae1d5baabd23493099f8a32', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f4bf1f6836406bf113d8a05f649a84cbf340bed', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1420119981,Document other useful `nox` commands,"# Description

Make nox -s dev run like nox -s dev --verbose to so that all commands run is shown.

Fixes # (issue)

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3104,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3104,https://github.com/pybamm-team/PyBaMM/pull/3104,closed,15,0,1,7,6,3,0,0,[],2023-07-04 20:32:57+00:00,2023-07-05 21:43:24+00:00,90627.0,"1 day, 1:10:27","[{'comment_id': 1253582958, 'comment_body': '```suggestion\r\n.. note::\r\n    It is recommended to use ``--verbose`` or ``-v`` to see outputs of all commands run.\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 19, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1253583164, 'comment_body': 'Just some better formatting', 'comment_created': datetime.datetime(2023, 7, 5, 19, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'agriyakhetarpal', 'type': 'User'}, {'comment_id': 1253585076, 'comment_body': 'Thanks @agriyakhetarpal ', 'comment_created': datetime.datetime(2023, 7, 5, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}]","[{'commit_sha': '79c2da0cfa1a26e411fbe4af3926dcd9e8b62496', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6503ef41185df5b34a9b698b67121dca7620e174', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bec2996990c7d8ed3a04d96905a047fc79fffce', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07a88b8240f1a9f351ade9ee70565c0db7a23940', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c07fac69eae8bbcd60377d25873b6db3fc8f331c', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a6e6845c687cf739c6f30363e63155608e9bee3', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '181f7a25c0f88449ceebccb1e070f764af29b816', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1420128629,Installing `pybamm[all]` in jupyter notebooks,"# Description

After #3044 gets merged we'd be installing `pybamm[all]` in jupyter notebooks to avoid failures

Fixes # (issue)

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3105,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3105,https://github.com/pybamm-team/PyBaMM/pull/3105,closed,73,70,67,13,9,12,0,0,[],2023-07-04 20:42:52+00:00,2023-07-26 12:56:59+00:00,1872847.0,"21 days, 16:14:07","[{'comment_id': 1273598933, 'comment_body': 'I am nitpicking, but we should split this comment into 2 lines and get rid of the `noqa` comment.', 'comment_created': datetime.datetime(2023, 7, 25, 14, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273599295, 'comment_body': 'Ditto!', 'comment_created': datetime.datetime(2023, 7, 25, 14, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273604051, 'comment_body': 'This should not be removed. It adds a line between the PyBaMM logo and the badges. Makes the README looks good when rendered haha', 'comment_created': datetime.datetime(2023, 7, 25, 14, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273606196, 'comment_body': ""This should be reverted. IIRC NumFOCUS asked us to add this because their automated system scans look for this line in every sponsored project's README."", 'comment_created': datetime.datetime(2023, 7, 25, 14, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273609215, 'comment_body': 'We should not really modify this section (we might end up breaking the bot). The section already has comments in place to ignore the relevant pre-commits. Was this done by one of our pre-commit hooks?', 'comment_created': datetime.datetime(2023, 7, 25, 14, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273609501, 'comment_body': 'Ditto!', 'comment_created': datetime.datetime(2023, 7, 25, 14, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273613795, 'comment_body': ""(ruff's purpose is to let us know that we need to split up our long lines. Adding `noqa` to a line that can be split up defeats the purpose.)"", 'comment_created': datetime.datetime(2023, 7, 25, 14, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1274520255, 'comment_body': ""these mistakes might have made while merging with develop as I remember that I haven't made any changes other than colab badges in readme.\r\nStrange, will fix them. Sorry 😅 "", 'comment_created': datetime.datetime(2023, 7, 26, 7, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1274521232, 'comment_body': 'Noted, will do.\r\nAgain might be done while merging', 'comment_created': datetime.datetime(2023, 7, 26, 7, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1274767025, 'comment_body': ""Will keep this in mind \r\n\r\n> (ruff's purpose is to let us know that we need to split up our long lines. Adding `noqa` to a line that can be split up defeats the purpose.)\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 26, 10, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1274792742, 'comment_body': 'these might have done when I ran pre-commit locally without --ignore.\r\nI should have cross checked while commiting, sorry.', 'comment_created': datetime.datetime(2023, 7, 26, 11, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1274793179, 'comment_body': 'Splitted', 'comment_created': datetime.datetime(2023, 7, 26, 11, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}]","[{'commit_sha': 'b0afc0eb2dca2f1d320e032c045a088dcd94fd6a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a417ba467594e50ac4ee2c02e93317e59fce364', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db67b65bb98fd1eee0a1981f362fb9d4e5a9f23b', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bed070fa52ac8ff4be3588de082055186947ff9', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0b544eafab25408136c85059a25bdee74d2e412', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a17d8ac7c8c530260dae440d1bf5ee405cbd863', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06db054f75656d4c3b46da3510954b70f446feb2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da8c4e2ce368228c6226dd5e206caef680e7bcae', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbade77fc6d31b8a6301286e526aef0639c1036f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32151039d48f628d67a46a59dd6d74f341f1945e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dfe2dfccb69d681528d1502c8f4560037738c7f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7bf09b242330f124d9286c901cd648b82a89bbc', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5adaf2bb7e8a86cd1de397e9e8243d772251c32', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1421775264,Add `nbqa` support support for example notebooks,"# Description

Adding nbqa as pre-commit hook for jupyter notebooks.

Fixes #2813 

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3110,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3110,https://github.com/pybamm-team/PyBaMM/pull/3110,closed,3452,3428,31,7,4,6,0,0,[],2023-07-05 20:58:13+00:00,2023-07-22 02:13:25+00:00,1401312.0,"16 days, 5:15:12","[{'comment_id': 1261114056, 'comment_body': 'It would be better to keep the migration of `black` to `ruff --fix` in a separate PR.', 'comment_created': datetime.datetime(2023, 7, 12, 12, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1261114259, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2023, 7, 12, 12, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1267380332, 'comment_body': '```suggestion\r\n# activated pre-commit for notebooks - https://github.com/pybamm-team/PyBaMM/pull/3110\r\na63e49ece0f9336d1f5c2562f7459e555c6e6693\r\n```', 'comment_created': datetime.datetime(2023, 7, 18, 23, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1267380471, 'comment_body': 'Good practice 🙂 \r\n```suggestion\r\n        args: [""--fix"",""--ignore=E501,E402""]\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 18, 23, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1267382517, 'comment_body': 'This is an actual error and should not be ignored. It looks like `x_in_metres` is not defined in the notebook anywhere and `ruff` caught that. @brosaplanella might be able to help with this better 🙂 ', 'comment_created': datetime.datetime(2023, 7, 18, 23, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1268018683, 'comment_body': ""That is really weird! Locally the notebook doesn't run (both @arjxn-py and I checked) and obviously it shouldn't, as we are calling an undefined variable. @tinosulzer @rtimms do you have any ideas? I have opened #3165 for further discussion."", 'comment_created': datetime.datetime(2023, 7, 19, 12, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'brosaplanella', 'type': 'User'}]","[{'commit_sha': '61bf61d3eb99aa4001b3b3a7adcc9092ef907166', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a63e49ece0f9336d1f5c2562f7459e555c6e6693', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7d247aba099d4bd31fd2f572dfd3aeaea1deddf', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c1be1871df12b98f292ac7c59a4a76ec02cadb0', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4390165625d69bcfc8cf6d61fad9811b772ae3d', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77e085f1f7ad418108de6db4370e7ff4366e6458', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7b7caf552273d3b0bb49d649b4bc3c117e2b8c2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1431104964,Make `pandas` optional,"# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes # (issue)

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3144,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3144,https://github.com/pybamm-team/PyBaMM/pull/3144,closed,33,36,3,12,5,4,0,0,[],2023-07-12 11:30:18+00:00,2023-08-03 19:36:06+00:00,1929948.0,"22 days, 8:05:48","[{'comment_id': 1282084257, 'comment_body': 'Should we also make a ""pandas"" group? It looks like users would be needing `pandas` more frequently, and installing all the dependencies to get `pandas` might not be nice.', 'comment_created': datetime.datetime(2023, 8, 2, 15, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1282090669, 'comment_body': ""Yes, i feel it's a good idea. I'd create a group for `pandas` too & update the docs accordingly."", 'comment_created': datetime.datetime(2023, 8, 2, 15, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1283422388, 'comment_body': '```suggestion\r\nPandas dependencies\r\n^^^^^^^^^^^^^^^^^^^\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 16, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1283483717, 'comment_body': '```suggestion\r\n.. _install.pandas_dependencies:\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 17, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': '6edcc4891b5db6f559317e8c8c30153dd53ad2cd', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0ca4e46eb565e1d671940dbd2e008083d94d40a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e94a61e9dfb89f73d2689d7e03deffff75cbf0d2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a4346ae4a02cef7ad9dd43e34a7b5471a2c351', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a4f38a612a7bbdb2ad26b5ae01a0da7c49bbc8', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7368f2d847bfd38eea05624f436b49aeae60556b', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ad30c0a8712698fbf963c0173f5a771d1e15911', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '929c6b1b1b4703ac9f9544a556d22007a94cdcae', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa801df24b595acd8b8135f30fabba641d295a6', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd8871ddbed50a6eee96c8e7408797c70867fd61', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b19e79ca864a3185a825c659617f67da1c1e3cf1', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5e95d001edcec3767004443ee1cabf168545fe2', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1431147184,Fix Failing Benchmarks,"# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes #3124 

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3145,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3145,https://github.com/pybamm-team/PyBaMM/pull/3145,closed,10,1,1,2,1,0,0,0,[],2023-07-12 11:59:22+00:00,2023-07-18 23:28:47+00:00,559765.0,"6 days, 11:29:25",[],"[{'commit_sha': 'fd9da8f10ca0cc0d639723f42355b1a86cc3adaa', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8deb675c8bc3054bfb7da9843a2bc1dd83b69b78', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1440406079,Migrate from `black` to `ruff --fix`,"# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes # (issue)

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3162,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3162,https://github.com/pybamm-team/PyBaMM/pull/3162,closed,7,28,6,6,1,2,0,0,[],2023-07-19 06:28:11+00:00,2023-07-23 20:49:12+00:00,397261.0,"4 days, 14:21:01","[{'comment_id': 1271309240, 'comment_body': '```suggestion\r\nWhen you commit your changes they will be checked against ruff automatically (see [Pre-commit checks](#pre-commit-checks)).\r\n```', 'comment_created': datetime.datetime(2023, 7, 22, 15, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1271309368, 'comment_body': ""```suggestion\r\n13. When you feel your code is finished, or at least warrants serious discussion, run the [pre-commit checks](#pre-commit-checks) and then create a [pull request](https://help.github.com/articles/about-pull-requests/) (PR) on [PyBaMM's GitHub page](https://github.com/pybamm-team/PyBaMM).\r\n```"", 'comment_created': datetime.datetime(2023, 7, 22, 15, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': 'e7538a0f819b801da6b5412743cccdb35082d451', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbff01379792419977fe7e13927d173a5eb91ed6', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e01fb1dd6670465ed5a05fb38ba21ed80dc431bc', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f74c51caf40ffca60ba3d1652bf8b410521092', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2882a0c55e5793409447aa33b8472b2918ba90f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea8a873134a016122ca7f2189fe8ec3c702df80e', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1440769884,Make `jax` & `odes` optional,"# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes #3146 

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3163,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3163,https://github.com/pybamm-team/PyBaMM/pull/3163,closed,57,15,7,26,3,31,0,0,[],2023-07-19 10:29:24+00:00,2023-07-28 00:20:10+00:00,741046.0,"8 days, 13:50:46","[{'comment_id': 1268146509, 'comment_body': 'We rely on a particular version of these libraries -\r\n\r\nhttps://github.com/pybamm-team/PyBaMM/blob/02c56a2fea4bfb094b220609d0a34042d47340a6/pybamm/util.py#L25-L26', 'comment_created': datetime.datetime(2023, 7, 19, 14, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1271279680, 'comment_body': 'Specified them.', 'comment_created': datetime.datetime(2023, 7, 22, 10, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1271309704, 'comment_body': 'This should not be removed. The bash code should just change to `pip install ""pybamm[jax]""`', 'comment_created': datetime.datetime(2023, 7, 22, 15, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1271309900, 'comment_body': 'This might not be required as the functionality is not user-facing 🙂 ', 'comment_created': datetime.datetime(2023, 7, 22, 15, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1271310038, 'comment_body': 'I might have phrased it wrong. We need to add a deprecation warning for this and keep it in the codebase for at least a year.', 'comment_created': datetime.datetime(2023, 7, 22, 15, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1271310083, 'comment_body': 'Keep it, but deprecated.', 'comment_created': datetime.datetime(2023, 7, 22, 15, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1271310121, 'comment_body': 'You can split this into two points.', 'comment_created': datetime.datetime(2023, 7, 22, 15, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1271310154, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2023, 7, 22, 15, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1271310212, 'comment_body': 'This would require updating the optional dependencies table in docs', 'comment_created': datetime.datetime(2023, 7, 22, 15, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1271310625, 'comment_body': 'Technically, we can skip adding these to CHANGELOG too', 'comment_created': datetime.datetime(2023, 7, 22, 15, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273584619, 'comment_body': ""I don't think we are using `pybamm_install_jax` in `install_odes`?\r\n```suggestion\r\n```"", 'comment_created': datetime.datetime(2023, 7, 25, 13, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273584805, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 13, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273589594, 'comment_body': ""I meant using Python's standard `DeprecationWarning`. `print` statements are not usually great for logging stuff + not every shell will display those colours 🙂 \r\n\r\nSomething like this should be done -\r\n\r\nhttps://github.com/pybamm-team/PyBaMM/blob/79af68d8476c1d75512d570ff8e9c5e20e5af021/pybamm/parameters/parameter_sets.py#L83-L87\r\n\r\nAlso, using `time.sleep` will slow down the script. We should never slow down user-facing code intentionally."", 'comment_created': datetime.datetime(2023, 7, 25, 13, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273589795, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 13, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1273620349, 'comment_body': 'We could also keep the message a bit shorter - \r\n```py\r\n""pybamm_install_odes is deprecated, use \'pip install pybamm[jax]\' to install jax and jaxlib""\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 14, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1274507729, 'comment_body': 'Typo, sorry fixing it in next commit.', 'comment_created': datetime.datetime(2023, 7, 26, 7, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1274508967, 'comment_body': 'Sure would do that', 'comment_created': datetime.datetime(2023, 7, 26, 7, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1274516375, 'comment_body': ""> I meant using Python's standard `DeprecationWarning`. `print` statements are not usually great for logging stuff + not every shell will display those colours 🙂\r\n> Also, using `time.sleep` will slow down the script. We should never slow down user-facing code intentionally.\r\n\r\nI tried using standard `DeprecationWarning` before this but strangely it was not logging the deprecation warning locally.\r\nAlso used `time.sleep` just to make sure depcrecation warning doesn't get lost in user logs (tho it is unconventional 😬)\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 26, 7, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1274919571, 'comment_body': 'Not deprecating `pybamm_install_odes`\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 12, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1274921311, 'comment_body': ""But we don't use it for GPU and TPU compatibility, right?"", 'comment_created': datetime.datetime(2023, 7, 26, 12, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1274925188, 'comment_body': 'Scikits ODE and DAE', 'comment_created': datetime.datetime(2023, 7, 26, 13, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1276366447, 'comment_body': 'Omitted it with For JAX solvers.', 'comment_created': datetime.datetime(2023, 7, 27, 14, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1276395827, 'comment_body': 'You might have to rewrite this 🙂 \r\n\r\nand add a note here about `pybamm_install_jax` being deprecated.', 'comment_created': datetime.datetime(2023, 7, 27, 14, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1276400789, 'comment_body': 'I think it would be better to just link https://docs.pybamm.org/en/latest/source/user_guide/installation/GNU-linux.html#optional-scikits-odes-solver (`nox` is meant for developers and not users)', 'comment_created': datetime.datetime(2023, 7, 27, 14, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1276436820, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 7, 27, 15, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1276876448, 'comment_body': '```suggestion\r\n- `pybamm_install_jax` is deprecated. It is now replaced with `pip install pybamm[jax]` ([#3163](https://github.com/pybamm-team/PyBaMM/pull/3163))\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 22, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1276878201, 'comment_body': '```suggestion\r\n   system (under ``~/.local``), before installing ``scikits.odes``. (Alternatively, one can install SUNDIALS without this script and run ``pip install pybamm[odes]`` to install ``pybamm`` with ``scikits.odes``.)\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 22, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1276878711, 'comment_body': '```suggestion\r\nThe ``pip install ""pybamm[jax]""`` command automatically downloads and installs ``pybamm`` and the compatible versions of ``jax`` and ``jaxlib`` on your system. (``pybamm_install_jax`` is deprecated.)\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 22, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1276879528, 'comment_body': '```suggestion\r\n`JAX <https://jax.readthedocs.io/en/latest/notebooks/quickstart.html>`__  0.4.8              jax                For JAX solvers\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 22, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1276880101, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 22, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1276880548, 'comment_body': '```suggestion\r\n   Before running ``pip install ""pybamm[odes]""``, make sure to install ``scikits.odes`` build-time requirements as described `here <https://docs.pybamm.org/en/latest/source/user_guide/installation/GNU-linux.html#optional-scikits-odes-solver>`_ .\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 22, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': '3479337a1b2758de8eae272a4229c4ab293873ef', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50e9fc221710dcd217591dff4a0c6f2ddb43cf7', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e4e55affe6c7ed55c6c64720c5fd6424741d8dd', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3762c5d4b5dd64ef72ae2507e769c43b861f2a4', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe5f37d12ef536361c1a82edbd823b9f57aed776', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e91310179efde0a468b29c5a1964731d214bd00d', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5868d8436138de4e51f5399ef173bd4c6b8212e5', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b2714cd4937db2e7444ee517071a9d4228d487e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2eb4b013902b4274396b276e40864e325682010', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa423975dabdf334adc1ee3a0a1b1e4248f2144f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b83cd0427d1d509148a70075887f672bfc4c2b2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee358ae7c54bfbe45f09c1f506883255606164b1', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed76af926e26ccce335487a1b9a3122e9315ec0f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb49480858aaa6b50a18a7a17a8d8c19f1538c7b', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09159d00c45f55a01f4a018900cedc2ce5a263e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '190effd35eefdcd53c3d2eca4db12a2fa0be74d0', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45001492c630c8b587cf3ce8dae0e55549b4247c', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c03c1c47001d1b1ecd9ac1ae4ff0baafe09b131a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4254cfb3cf5f6e946bcbcfccb8e173f0d57dbbd', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de5fe3d897b30a8bd324802fc921e2289dbe351', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f98e8e52aac72fe5897d56788b569e51c768643', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d6665b5efbbf6c076a6dffebe7af4168fe34132', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605730859b72866cfa4bb50d727b9086f04cbfcc', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31f81d490edb24d98b55b426e4267ba9b74c9aa1', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eafed486eda5a57b37b7dfb43f8c60940f4c6ec', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe704bf6977023d466824ee7d903d68ae619d995', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1445314184,Add `blacken-docs` as pre-commit hook for code-blocks in docs,"# Description

This PR aims to add [`blacken-docs`](https://github.com/adamchainz/blacken-docs) as pre-commit hook to auto format python code in docs.

Fixes # (issue)

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [x] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [x] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [x] All tests pass: `$ python run-tests.py --all`
- [x] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3180,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3180,https://github.com/pybamm-team/PyBaMM/pull/3180,closed,46,25,6,5,8,2,0,0,[],2023-07-22 13:08:56+00:00,2023-07-24 20:01:48+00:00,197572.0,"2 days, 6:52:52","[{'comment_id': 1271337905, 'comment_body': '```suggestion\r\n  - repo: https://github.com/adamchainz/blacken-docs\r\n    rev: ""1.15.0""\r\n    hooks:\r\n       - id: blacken-docs\r\n         additional_dependencies:\r\n           - black==22.12.0\r\n```', 'comment_created': datetime.datetime(2023, 7, 22, 20, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1272372251, 'comment_body': 'Keeping things uniform in the file 🙂 \r\n```suggestion\r\n         additional_dependencies: [black==22.12.0]\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 14, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': '97a33608c1d1f65e9b991a195ce6947fd9ea921a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab32123127a89530954fcf4b477074f67536b25', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a1ec4812ace191844cd1620156aab827d8581f6', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3b78068b97f66f5da4713102c8097db86d2da02', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '373a824374ee94dc33c01f15b6628b302bb5ba08', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1450589013,Add more precommits,"# Description

Suggested in [#3180(comment)](https://github.com/pybamm-team/PyBaMM/pull/3180#issuecomment-1646698735) & [#3180(comment)](https://github.com/pybamm-team/PyBaMM/pull/3180#issuecomment-1648059280), this PR aims to add some more default pre-commit hooks.

Fixes # (issue)

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3192,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3192,https://github.com/pybamm-team/PyBaMM/pull/3192,closed,219,250,117,4,4,3,0,0,[],2023-07-26 16:33:00+00:00,2023-08-04 20:25:19+00:00,791539.0,"9 days, 3:52:19","[{'comment_id': 1278325816, 'comment_body': 'Why exclude workflows and docs?', 'comment_created': datetime.datetime(2023, 7, 29, 16, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1278326494, 'comment_body': 'This is maybe not required 🙂 \r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 29, 16, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1281522300, 'comment_body': 'Not excluding now.', 'comment_created': datetime.datetime(2023, 8, 2, 7, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}]","[{'commit_sha': '2f313fe8e72f1e0e41961925231381d65626d462', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '943dbf2df105d6cfff6b7f581902c80601eeefff', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5273214b585c5a4286609aed40e0b092d0e05f42', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a974edaea13dfd8d97df9ac619cfa08d38cd10b8', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1459566085,Dockerize PyBaMM,"# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes #1926 

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3223,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3223,https://github.com/pybamm-team/PyBaMM/pull/3223,closed,270,1,4,47,4,45,0,0,[],2023-08-02 10:48:17+00:00,2023-08-29 17:09:40+00:00,2355683.0,"27 days, 6:21:23","[{'comment_id': 1284545324, 'comment_body': '```suggestion\r\nCMD [""/bin/bash""]\r\n\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 15, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1284556286, 'comment_body': 'We should also have a `IDAKLU` here', 'comment_created': datetime.datetime(2023, 8, 4, 15, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1292330065, 'comment_body': '```suggestion\r\nRUN pip install --user -e "".[all]""\r\n```', 'comment_created': datetime.datetime(2023, 8, 12, 14, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1298910116, 'comment_body': '```suggestion\r\nPulling the Docker Image (will be supported soon)\r\n-------------------------------------------------\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 22, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1298910467, 'comment_body': '```suggestion\r\nInstall from source (Docker)\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 22, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1298910690, 'comment_body': 'Would it be possible to move this to a folder maybe? Maybe in `./scripts/`?', 'comment_created': datetime.datetime(2023, 8, 18, 22, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1298910921, 'comment_body': 'Also, a small section on VSCode integration and extensions would be nice!', 'comment_created': datetime.datetime(2023, 8, 18, 22, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1299684806, 'comment_body': 'Is this not available already?', 'comment_created': datetime.datetime(2023, 8, 21, 6, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'brosaplanella', 'type': 'User'}, {'comment_id': 1299686188, 'comment_body': 'Is there a shortcut that runs with all the extras? (like the `pip install pybamm[all]`)', 'comment_created': datetime.datetime(2023, 8, 21, 6, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'brosaplanella', 'type': 'User'}, {'comment_id': 1301391795, 'comment_body': ""Yes, it'd be possible. Will do it. 🙂 "", 'comment_created': datetime.datetime(2023, 8, 22, 9, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1301397378, 'comment_body': '> Is there a shortcut that runs with all the extras? (like the `pip install pybamm[all]`)\r\n\r\nYes there is, one can simply pull `pybamm:all` from docker hub and run that or build the docker image locally with all args enabled.', 'comment_created': datetime.datetime(2023, 8, 22, 9, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1301398994, 'comment_body': 'Yes, now all the initial versions of pybamm are available on Docker hub.', 'comment_created': datetime.datetime(2023, 8, 22, 9, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1302253595, 'comment_body': '```suggestion\r\nInstall from source (Docker)\r\n============================\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 22, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1302253769, 'comment_body': '```suggestion\r\nPulling the Docker Image\r\n------------------------\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 22, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1302253905, 'comment_body': '```suggestion\r\nExiting the Docker Container\r\n----------------------------\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 22, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1302254035, 'comment_body': '```suggestion\r\nBuilding Docker Image Locally from Source\r\n-----------------------------------------\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 22, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303621635, 'comment_body': '```suggestion\r\nPulling the Docker image\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 22, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303621740, 'comment_body': '```suggestion\r\nRunning the Docker container\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 22, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303621946, 'comment_body': '```suggestion\r\nExiting the Docker container\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 22, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303622075, 'comment_body': '```suggestion\r\nBuilding Docker image locally from source\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 22, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303622774, 'comment_body': '```suggestion\r\nBuilding Docker images with optional args\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 22, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303622965, 'comment_body': '```suggestion\r\n- ``IDAKLU``: For IDA solver provided by the SUNDIALS plus KLU.\r\n- ``ODES``: For scikits.odes solver for ODE & DAE problems.\r\n- ``JAX``: For Jax solver.\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 22, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303623751, 'comment_body': '```suggestion\r\nBuild Docker image with IDAKLU solver\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 23, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303624406, 'comment_body': '```suggestion\r\nBuild Docker image with Scikits.odes solvers\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 23, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303624506, 'comment_body': '```suggestion\r\nBuild Docker image with JAX solver\r\n```', 'comment_created': datetime.datetime(2023, 8, 23, 23, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303625728, 'comment_body': 'Could you also add the `ALL` arg here? I think it would make sense to add a new arg to the Dockerfile itself called `ALL` that installs every solver-specific dependency!', 'comment_created': datetime.datetime(2023, 8, 23, 23, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1303918660, 'comment_body': '> Could you also add the `ALL` arg here? I think it would make sense to add a new arg to the Dockerfile itself called `ALL` that installs every solver-specific dependency!\r\n\r\nSounds good to me, will do it.', 'comment_created': datetime.datetime(2023, 8, 24, 7, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1304929611, 'comment_body': '```suggestion\r\n.. tab:: All Solvers\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 22, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304929856, 'comment_body': '```suggestion\r\n.. tab:: All Solvers\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 22, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304930527, 'comment_body': '```suggestion\r\n- ``JAX``: For Jax solver.\r\n- ``ALL``: For all the optional solvers.\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 22, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304930916, 'comment_body': '```suggestion\r\nBuild Docker image with all solvers\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 22, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304931594, 'comment_body': 'Could you arrange these optional solver texts into tabs? Just like the ones above!', 'comment_created': datetime.datetime(2023, 8, 24, 22, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304931695, 'comment_body': '```suggestion\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 22, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304931823, 'comment_body': '```suggestion\r\n      docker run -it pybamm:all\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 22, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304950987, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 24, 23, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1304987537, 'comment_body': '```suggestion\r\n.. tab:: All solvers\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304987582, 'comment_body': '```suggestion\r\n.. tab:: IDAKLU solver\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304987660, 'comment_body': '```suggestion\r\n.. tab:: Scikits.odes solver\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304987695, 'comment_body': '```suggestion\r\n.. tab:: JAX solver\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304988016, 'comment_body': '```suggestion\r\nAfter building the Docker images with the desired solvers, use the ``docker run`` command followed by the desired image name. For example, to run a container from the image built with all optional solvers:\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304988255, 'comment_body': '```suggestion\r\n.. tab:: Scikits.odes solver\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304988303, 'comment_body': '```suggestion\r\n.. tab:: JAX solver\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304988336, 'comment_body': '```suggestion\r\n.. tab:: IDAKLU solver\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304988376, 'comment_body': '```suggestion\r\n.. tab:: All solvers\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304988551, 'comment_body': '```suggestion\r\n.. tab:: No optional solver\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 0, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}]","[{'commit_sha': '520750a8364952abf4bf9d9b2a87040e8a52da6c', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0521436b9e1f79383aca8750d6409af1e5742b59', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b757eccb94fc88269101076e89c5a96cb9c83a48', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10edb943ed681a0f3423f6678a381507921eef44', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94b3358d53d697ce5ed7a5dd656724ac6f6d00fd', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce86eb4f863405d3b374730bf3d1996c3fc0e502', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8428308dd7eafb7a13e1bf1645048468a860f685', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8965d240f18ad2f75c971e1b142929b937ee968', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ae2a937915d9fbc8dfa3fc7c67c71c806547d9', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed1fb10611da470331d31c91972e91fc79d1e5c3', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9d15d36f262e6cf5b4882492c0b30a6312bfc11', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be918c89498f1211a07f264e86aaf5eafaa451f4', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd97a57bfa33b41c7ae92ca497d9e094202b87e33', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f3f288d34f37335bd3497963a63d396e3fcb9a8', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ce9673b1d548d5a1747f9b1414bfa892949272b', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96cc0b17f9fe070cb790f02a0d70520a956cd71a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63337e3469d2aa1e466e10829e6a07602c4c25f3', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa4b83f1647b3a80588062ca444a72e29e0cd546', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9991cbce0e9837d309a2a082fed5cd77db2695fa', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83c7df01ec378d738214475ed06efa48d5399eb3', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89c2ba7ef677e1ffd3be0465d0546153ee28c09a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d35c8e71b7a8612c3cf7a81013763d4f7f3d6bb', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b520197d6eea642eb6401c9798c90c6cb5628cf5', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fda58fd433702126b864b695e0cbc935b6dfb0e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '701e45fcd8e9b1087e5a096dfe76960f7d89fea2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a226530e37378dde6e9d781286732e753d5308e9', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eca42de8b3c150c56e21867672b22d1f978042d', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e481b4a9eb38842b3dbebdc287a9f389bdbaf7d', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a3107e8799f801b4563999b42b90ec1d11924c6', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '769bf40865e0110b6b2c8a3fd19a1a63830f1591', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a285352234590df92c3398bcedd52acd7df732dd', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '589912f244847f43385183db13c3b0e56ba066a4', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e05aaa4241aa30c5640b4d9998c2995eefe9a8', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c0f1ccb11625a73767337315a53e19a8981dabc', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fd0f3f40d76f1314dd8b1ca58cc12dd0860e783', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1d41e04acec061f2834dbbfd631aee394a01a1e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e54d8f43ab59f4a0d46e41ab131250cbaef457f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64506fe53a8e9237604e1fae48151309997c112c', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd885cbe19f81deb562bbf54ce4f3426b3243f7dd', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea9b8a424ee43c96c8fc91a1496a0e689af623e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b0d4fa4981a88f1a3b7d2a86ad9377c9ca98f66', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e6f38116d81cfb6211380cb0fa947495e6668c', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d2a61a5076d6cb50c2b040c5f69d175e3935643', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb51e5cfe8bcb17796985d0673e4695fd097f31', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba883084454e0e1379da1b259d03f36d6902f1f6', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a058467cef9bb3722ca1e789e9b32be9e5a8fae2', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0d7abfa6d3d9ba92b3d06dd4c715eb1dfb22380', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1463074212,Clean up installation guides,"# Description

Since the developer and user installation docs are tangled with each other right now, this PR aims to simplify them.

Fixes #3195 

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (or `$ nox -s pre-commit`) (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all` (or `$ nox -s tests`)
- [ ] The documentation builds: `$ python run-tests.py --doctest` (or `$ nox -s doctests`)

You can run integration tests, unit tests, and doctests together at once, using `$ python run-tests.py --quick` (or `$ nox -s quick`).

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",True,3235,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3235,https://github.com/pybamm-team/PyBaMM/pull/3235,closed,81,189,4,11,2,8,0,0,[],2023-08-04 14:52:59+00:00,2023-08-29 17:08:08+00:00,2168109.0,"25 days, 2:15:09","[{'comment_id': 1298908794, 'comment_body': 'Is this required?', 'comment_created': datetime.datetime(2023, 8, 18, 22, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1298909007, 'comment_body': '```suggestion\r\nInstall from source (Windows Subsystem for Linux)\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 22, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1299589548, 'comment_body': ""No it is not, path doesn't affect performance in `WSL` now."", 'comment_created': datetime.datetime(2023, 8, 21, 4, 33, 30, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1299690428, 'comment_body': 'How did you get the plotting to work? Was it just running VS Code from Windows rather than Linux? Because for me it only works if I do the XServer thing, but I might do something wrong...', 'comment_created': datetime.datetime(2023, 8, 21, 7, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'brosaplanella', 'type': 'User'}, {'comment_id': 1301559059, 'comment_body': '> How did you get the plotting to work? Was it just running VS Code from Windows rather than Linux? Because for me it only works if I do the XServer thing, but I might do something wrong...\r\n\r\nIn my case I was able to plot with `python examples/scripts/run_simulation.py` straight without having to install Xserver. \r\n\r\nBut with `python examples/scripts/create-model.py` I am getting some attribute errors locally i.e. \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File ""/mnt/d/Arjun/PyBaMM/examples/scripts/create_model.py"", line 99, in <module>\r\n    param.process_geometry(geometry)\r\n  File ""/mnt/c/Users/Arjun/Desktop/PyBaMM/pybamm/parameters/parameter_values.py"", line 463, in process_geometry\r\n    for lim, sym in spatial_limits.items():\r\nAttributeError: \'Scalar\' object has no attribute \'items\'\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 12, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1304854452, 'comment_body': '```suggestion\r\nInstall from source (Windows Subsystem for Linux)\r\n==================================================\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 20, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1304894053, 'comment_body': 'Happy to merge once this conversation is resolved.', 'comment_created': datetime.datetime(2023, 8, 24, 21, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Saransh-cpp', 'type': 'User'}, {'comment_id': 1305076339, 'comment_body': ""> In my case I was able to plot with python examples/scripts/run_simulation.py straight without having to install Xserver.\r\n\r\nOk, then happy to proceed with the instructions as they are.\r\n\r\n> But with python examples/scripts/create-model.py I am getting some attribute errors locally i.e.\r\n\r\nThat's strange, as this seems to be an internal PyBaMM issue. This is not picked up by the tests so I would be tempted to say go ahead and merge this."", 'comment_created': datetime.datetime(2023, 8, 25, 2, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brosaplanella', 'type': 'User'}]","[{'commit_sha': 'f463546d397a6b91c0bbba73d9288dcc052ee54a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605fed6e994b3afb75e68491266e48ac85f949ee', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab00e8d111e047e42fd486f0b35a4fa5f0d93e0a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd1529829db7dc9146a07737dfc1fac3a06cb47', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ea85e5b69318a8f223c46c488b08f096582352', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5425210675fc03781ec76a0613c0b632ab54ab73', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4105c22a7d09db38ba5f89b2f70c48b4c0c2f845', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17657f2690f4aae89575c3c36cccea2468f96b68', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8a9b4f27f9ce837b769fae11b621d099f21b500', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2040dbebb66c40aa21686605eba74f0b6cb6f51', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cdecf1074859c1056c4c841d47708353d263cc6', 'committer_username': 'Saransh-cpp', 'committer_name': 'Saransh Chopra', 'committer_email': 'saransh0701@gmail.com', 'commit_date': datetime.datetime(2020, 11, 6, 12, 35, 19, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1420204306,Add `max_step` arg in `basesolver`,"# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes #2253 

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [x] New feature (non-breaking change which adds functionality)
- [ ] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [x] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [x] All tests pass: `$ python run-tests.py --all`
- [x] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [x] Code is commented, particularly in hard-to-understand areas
- [x] Tests added that prove fix is effective or that feature works
",False,3106,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3106,https://github.com/pybamm-team/PyBaMM/pull/3106,open,143,61,20,17,9,6,0,0,[],2023-07-04 22:54:36+00:00,,0.0,,"[{'comment_id': 1497345163, 'comment_body': 'This file also needs to be renamed.', 'comment_created': datetime.datetime(2024, 2, 21, 11, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1497349853, 'comment_body': 'Done in [`68c2925`](https://github.com/pybamm-team/PyBaMM/pull/3106/commits/68c29256797fd20fdef007f54264a1a48925d493)', 'comment_created': datetime.datetime(2024, 2, 21, 11, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}, {'comment_id': 1558030680, 'comment_body': ""the algebraic solver doesn't step in time so it doesn't make sense for it to be an argument here"", 'comment_created': datetime.datetime(2024, 4, 9, 17, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1558031703, 'comment_body': 'as above', 'comment_created': datetime.datetime(2024, 4, 9, 17, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1558033572, 'comment_body': ""we don't validate other arguments such as tolerances. my guess is that all the solvers will have their own check to make sure max step makes sense, so maybe we should remove this?"", 'comment_created': datetime.datetime(2024, 4, 9, 17, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}, {'comment_id': 1558034478, 'comment_body': 'I agree `dt_event` is a better name for this. Can you make it so that the solver also still accepts `dt_max` and raises a `DeprecationWarning`?', 'comment_created': datetime.datetime(2024, 4, 9, 17, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rtimms', 'type': 'User'}]","[{'commit_sha': 'c5f8b8a53048c1ee38d18c054b639d27d6775cdd', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9567e786afe1ef9501e284b2530029e7daf25e5d', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f153df430d3e9babaef4ac68c52b092b2faaa44a', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d706908061f8e8333acd55c958a44a5fdfa87b4', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '433cafbe9f748262b104911921c39428fc69b861', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c9007cf485e4fd0d35d53a44352f447a936896', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f5593653e613a780eb882ad71e9492979a6941', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5615b2f5b802e2fac1cd158ef23a1810db70f55', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cff7ae4ff5d63afbb2e5f446bc249f118703067', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f80bee74c76206cd713b7a7b02bff324acf27d4f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cc6fb1664dc466d3cab4380cccf5bf471e2941c', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ca2f964899220da9a0b0d8ef18b53167776b4a7', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da018274b34ef3ab850b659e32e9d3070c5c5ad9', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd23891d1dbeca0ed11d2abcb367127a9cd0b2e89', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3a612b2a0b5bb685f0a2804da274fa39196d10e', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68c29256797fd20fdef007f54264a1a48925d493', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e9bc12684c3a1e7aa726e2ebab49b8f7f9df2c1', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1400181894,Add `pyproject.toml` to the project,"# Description

This PR adds `pyproject.toml` to keep project up to date & also potentially handle PyBaMM packaging to further have pybamm[all] installation.

Note : This is subjected based on the complexity of this issue, I haven't done this before but will try my best to complete this PR with your help definitely.
Fixes #3049

## Type of change

Please add a line in the relevant section of [CHANGELOG.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md) to document the change (include PR #) - note reverse order of PR #s. If necessary, also add to the list of breaking changes.

- [x] New feature (non-breaking change which adds functionality)
- [x] Optimization (back-end change that speeds up the code)
- [ ] Bug fix (non-breaking change which fixes an issue)

# Key checklist:

- [ ] No style issues: `$ pre-commit run` (see [CONTRIBUTING.md](https://github.com/pybamm-team/PyBaMM/blob/develop/CONTRIBUTING.md#installing-and-using-pre-commit) for how to set this up to run automatically when committing locally, in just two lines of code)
- [ ] All tests pass: `$ python run-tests.py --all`
- [ ] The documentation builds: `$ python run-tests.py --doctest`

You can run unit and doctests together at once, using `$ python run-tests.py --quick`.

## Further checks:

- [ ] Code is commented, particularly in hard-to-understand areas
- [ ] Tests added that prove fix is effective or that feature works
",False,3053,https://api.github.com/repos/pybamm-team/PyBaMM/pulls/3053,https://github.com/pybamm-team/PyBaMM/pull/3053,closed,271,109,6,9,3,0,0,0,[],2023-06-20 16:37:57+00:00,2023-09-23 11:16:24+00:00,8188707.0,"94 days, 18:38:27",[],"[{'commit_sha': 'fc41f610c8cdf8f652cb6c0174ce102fa66398ed', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6604df2f4f0b28efc941f17085b5deb467d06af', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e742f514c7982f75a316ca00f021c0dbfcf2fd15', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d36f1419a067bf09bee0261689248ed497c8fd5', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc85830f20a74bfd312708a21d8e7496ce45a6c', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d272dfc0154c2eaaf7c376ae7cf6ca4f1cb89e9', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85bf3d8de93eae29497744206211dd58194cfb1a', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a869036204abddda0f3b816a2c8917b367d0c1b0', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0adf0c70fadd84348663506a774e6a73d9bbe133', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1429240304,Migrate to `Pydantic>2`,"Attempts to fix #38 
cc @agriyakhetarpal 
Initially we were getting around 7 failures which are down to 3 in this PR",False,39,https://api.github.com/repos/FaradayInstitution/BPX/pulls/39,https://github.com/FaradayInstitution/BPX/pull/39,closed,70,60,4,4,1,1,0,0,[],2023-07-11 11:08:41+00:00,2024-04-04 05:25:41+00:00,23134620.0,"267 days, 18:17:00","[{'comment_id': 1259587392, 'comment_body': 'Here @agriyakhetarpal & I were stuck trying to configure  bpx object to be parsed in `TypeAdapter`.', 'comment_created': datetime.datetime(2023, 7, 11, 11, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'arjxn-py', 'type': 'User'}]","[{'commit_sha': '62867e40a085a7eaa94870835ca8ae67af543707', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42dbfb9da6f86d22615576dec449bf89ff17e4b3', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6957d6a8db3f1f1b7a40e13511baa000127c092', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f72ac803175728ceddf7152eccfd687d347f5f', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28
1416042733,Temporarily pin `pydantic<2` to fix PyBaMM build,,True,35,https://api.github.com/repos/FaradayInstitution/BPX/pulls/35,https://github.com/FaradayInstitution/BPX/pull/35,closed,1,1,1,1,3,0,0,0,[],2023-07-01 12:16:36+00:00,2023-07-02 20:07:45+00:00,114669.0,"1 day, 7:51:09",[],"[{'commit_sha': '4679e27eb6ed0531840c61ba5c4454057519d6d4', 'committer_username': 'arjxn-py', 'committer_name': 'Arjun Verma', 'committer_email': 'arjxn.py@gmail.com', 'commit_date': datetime.datetime(2022, 4, 23, 15, 43, 9, tzinfo=datetime.timezone.utc)}]",Arjun Verma,104268427,arjxn.py@gmail.com,User,,66,,77,28

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
155538761,PyBaMM,pybamm-team/PyBaMM,Python,511,1026,29,117,15101,161,46,26,"[{'id': 1925060948, 'number': 4194, 'closed': datetime.datetime(2024, 6, 17, 22, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 17, 21, 2, 37, tzinfo=datetime.timezone.utc), 'time_taken': 3743.0, 'time_delta': '1:02:23', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1900695139, 'number': 4129, 'closed': datetime.datetime(2024, 6, 3, 15, 31, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 3, 12, 3, 29, tzinfo=datetime.timezone.utc), 'time_taken': 12501.0, 'time_delta': '3:28:21', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1837673157, 'number': 4040, 'closed': datetime.datetime(2024, 5, 13, 18, 44, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 23, 23, 58, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1709140.0, 'time_delta': '19 days, 18:45:40', 'additions': 139, 'deletions': 0, 'state': 'closed'}, {'id': 1776948741, 'number': 3900, 'closed': datetime.datetime(2024, 3, 18, 9, 48, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 18, 9, 41, 20, tzinfo=datetime.timezone.utc), 'time_taken': 410.0, 'time_delta': '0:06:50', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 1748202865, 'number': 3848, 'closed': datetime.datetime(2024, 3, 5, 14, 56, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 28, 17, 50, 20, tzinfo=datetime.timezone.utc), 'time_taken': 507946.0, 'time_delta': '5 days, 21:05:46', 'additions': 37, 'deletions': 90, 'state': 'closed'}, {'id': 1726243192, 'number': 3818, 'closed': datetime.datetime(2024, 2, 14, 21, 25, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 14, 18, 37, 37, tzinfo=datetime.timezone.utc), 'time_taken': 10083.0, 'time_delta': '2:48:03', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1680617521, 'number': 3732, 'closed': datetime.datetime(2024, 2, 20, 8, 59, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 16, 10, 26, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3018788.0, 'time_delta': '34 days, 22:33:08', 'additions': 5054, 'deletions': 366, 'state': 'closed'}, {'id': 1656175103, 'number': 3661, 'closed': None, 'created': datetime.datetime(2023, 12, 24, 17, 36, 57, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 88, 'deletions': 61, 'state': 'open'}, {'id': 1575078366, 'number': 3475, 'closed': datetime.datetime(2023, 11, 14, 19, 35, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 26, 15, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1657065.0, 'time_delta': '19 days, 4:17:45', 'additions': 234, 'deletions': 83, 'state': 'closed'}, {'id': 1545701415, 'number': 3417, 'closed': datetime.datetime(2024, 1, 6, 19, 4, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 6, 16, 35, 25, tzinfo=datetime.timezone.utc), 'time_taken': 7957733.0, 'time_delta': '92 days, 2:28:53', 'additions': 131, 'deletions': 42, 'state': 'closed'}, {'id': 1525713131, 'number': 3364, 'closed': datetime.datetime(2023, 9, 28, 13, 14, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 21, 23, 37, 10, tzinfo=datetime.timezone.utc), 'time_taken': 567452.0, 'time_delta': '6 days, 13:37:32', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 1508944686, 'number': 3316, 'closed': datetime.datetime(2023, 10, 8, 12, 42, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 9, 22, 8, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2471673.0, 'time_delta': '28 days, 14:34:33', 'additions': 75, 'deletions': 0, 'state': 'closed'}, {'id': 1502325225, 'number': 3310, 'closed': datetime.datetime(2023, 9, 5, 11, 7, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 5, 8, 2, 11, tzinfo=datetime.timezone.utc), 'time_taken': 11132.0, 'time_delta': '3:05:32', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 1463074212, 'number': 3235, 'closed': datetime.datetime(2023, 8, 29, 17, 8, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 4, 14, 52, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2168109.0, 'time_delta': '25 days, 2:15:09', 'additions': 81, 'deletions': 189, 'state': 'closed'}, {'id': 1459566085, 'number': 3223, 'closed': datetime.datetime(2023, 8, 29, 17, 9, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 2, 10, 48, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2355683.0, 'time_delta': '27 days, 6:21:23', 'additions': 270, 'deletions': 1, 'state': 'closed'}, {'id': 1450589013, 'number': 3192, 'closed': datetime.datetime(2023, 8, 4, 20, 25, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 26, 16, 33, tzinfo=datetime.timezone.utc), 'time_taken': 791539.0, 'time_delta': '9 days, 3:52:19', 'additions': 219, 'deletions': 250, 'state': 'closed'}, {'id': 1445314184, 'number': 3180, 'closed': datetime.datetime(2023, 7, 24, 20, 1, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 22, 13, 8, 56, tzinfo=datetime.timezone.utc), 'time_taken': 197572.0, 'time_delta': '2 days, 6:52:52', 'additions': 46, 'deletions': 25, 'state': 'closed'}, {'id': 1440769884, 'number': 3163, 'closed': datetime.datetime(2023, 7, 28, 0, 20, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 10, 29, 24, tzinfo=datetime.timezone.utc), 'time_taken': 741046.0, 'time_delta': '8 days, 13:50:46', 'additions': 57, 'deletions': 15, 'state': 'closed'}, {'id': 1440406079, 'number': 3162, 'closed': datetime.datetime(2023, 7, 23, 20, 49, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 6, 28, 11, tzinfo=datetime.timezone.utc), 'time_taken': 397261.0, 'time_delta': '4 days, 14:21:01', 'additions': 7, 'deletions': 28, 'state': 'closed'}, {'id': 1431147184, 'number': 3145, 'closed': datetime.datetime(2023, 7, 18, 23, 28, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 11, 59, 22, tzinfo=datetime.timezone.utc), 'time_taken': 559765.0, 'time_delta': '6 days, 11:29:25', 'additions': 10, 'deletions': 1, 'state': 'closed'}, {'id': 1431104964, 'number': 3144, 'closed': datetime.datetime(2023, 8, 3, 19, 36, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 11, 30, 18, tzinfo=datetime.timezone.utc), 'time_taken': 1929948.0, 'time_delta': '22 days, 8:05:48', 'additions': 33, 'deletions': 36, 'state': 'closed'}, {'id': 1421775264, 'number': 3110, 'closed': datetime.datetime(2023, 7, 22, 2, 13, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 20, 58, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1401312.0, 'time_delta': '16 days, 5:15:12', 'additions': 3452, 'deletions': 3428, 'state': 'closed'}, {'id': 1420204306, 'number': 3106, 'closed': None, 'created': datetime.datetime(2023, 7, 4, 22, 54, 36, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 143, 'deletions': 61, 'state': 'open'}, {'id': 1420128629, 'number': 3105, 'closed': datetime.datetime(2023, 7, 26, 12, 56, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 4, 20, 42, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1872847.0, 'time_delta': '21 days, 16:14:07', 'additions': 73, 'deletions': 70, 'state': 'closed'}, {'id': 1420119981, 'number': 3104, 'closed': datetime.datetime(2023, 7, 5, 21, 43, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 4, 20, 32, 57, tzinfo=datetime.timezone.utc), 'time_taken': 90627.0, 'time_delta': '1 day, 1:10:27', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 1414002439, 'number': 3084, 'closed': datetime.datetime(2023, 7, 5, 21, 42, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 29, 21, 59, 2, tzinfo=datetime.timezone.utc), 'time_taken': 517380.0, 'time_delta': '5 days, 23:43:00', 'additions': 12, 'deletions': 1, 'state': 'closed'}, {'id': 1413782314, 'number': 3082, 'closed': datetime.datetime(2023, 7, 12, 16, 11, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 29, 18, 49, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1113708.0, 'time_delta': '12 days, 21:21:48', 'additions': 32, 'deletions': 30, 'state': 'closed'}, {'id': 1400181894, 'number': 3053, 'closed': datetime.datetime(2023, 9, 23, 11, 16, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 20, 16, 37, 57, tzinfo=datetime.timezone.utc), 'time_taken': 8188707.0, 'time_delta': '94 days, 18:38:27', 'additions': 271, 'deletions': 109, 'state': 'closed'}, {'id': 1395730764, 'number': 3044, 'closed': datetime.datetime(2023, 7, 6, 14, 43, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 13, 30, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1732356.0, 'time_delta': '20 days, 1:12:36', 'additions': 194, 'deletions': 24, 'state': 'closed'}, {'id': 1372638234, 'number': 3005, 'closed': datetime.datetime(2023, 6, 27, 14, 38, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 31, 17, 45, 55, tzinfo=datetime.timezone.utc), 'time_taken': 2321542.0, 'time_delta': '26 days, 20:52:22', 'additions': 181, 'deletions': 182, 'state': 'closed'}, {'id': 1357980825, 'number': 2973, 'closed': datetime.datetime(2023, 6, 12, 15, 35, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 20, 15, 16, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1988311.0, 'time_delta': '23 days, 0:18:31', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 1304988425, 'number': 2865, 'closed': datetime.datetime(2023, 4, 30, 14, 47, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 16, 13, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2068429.0, 'time_delta': '23 days, 22:33:49', 'additions': 8, 'deletions': 10, 'state': 'closed'}, {'id': 1298614233, 'number': 2846, 'closed': datetime.datetime(2023, 4, 3, 22, 20, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 1, 7, 59, 44, tzinfo=datetime.timezone.utc), 'time_taken': 224468.0, 'time_delta': '2 days, 14:21:08', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 1290274753, 'number': 2812, 'closed': datetime.datetime(2023, 3, 30, 17, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 26, 8, 34, 46, tzinfo=datetime.timezone.utc), 'time_taken': 376634.0, 'time_delta': '4 days, 8:37:14', 'additions': 29, 'deletions': 20, 'state': 'closed'}, {'id': 1290009755, 'number': 2810, 'closed': datetime.datetime(2023, 3, 26, 8, 35, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 25, 11, 43, 56, tzinfo=datetime.timezone.utc), 'time_taken': 75123.0, 'time_delta': '20:52:03', 'additions': 29, 'deletions': 20, 'state': 'closed'}]"
543681412,BPX,FaradayInstitution/BPX,Python,12,23,10,7,131,27,4,2,"[{'id': 1429240304, 'number': 39, 'closed': datetime.datetime(2024, 4, 4, 5, 25, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 11, 11, 8, 41, tzinfo=datetime.timezone.utc), 'time_taken': 23134620.0, 'time_delta': '267 days, 18:17:00', 'additions': 70, 'deletions': 60, 'state': 'closed'}, {'id': 1416042733, 'number': 35, 'closed': datetime.datetime(2023, 7, 2, 20, 7, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 12, 16, 36, tzinfo=datetime.timezone.utc), 'time_taken': 114669.0, 'time_delta': '1 day, 7:51:09', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
