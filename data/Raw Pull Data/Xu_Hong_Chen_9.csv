pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1383129858,Add new code formatter Black,"Changes made in this Pull Request:
<!-- Summarise changes made with dot points below -->
 - Add new code formatter Black
 - Update CI details",False,3,https://api.github.com/repos/MDAnalysis/transport-analysis/pulls/3,https://github.com/MDAnalysis/transport-analysis/pull/3,closed,24,10,2,1,1,0,0,0,[],2023-06-07 17:54:02+00:00,2023-06-07 18:05:18+00:00,676.0,0:11:16,[],"[{'commit_sha': 'a4cd7e151582cd7c379b38c75051c0fd7b23fc01', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}]",Xu Hong Chen,110699064,,User,,5,,38,22
1415767972,Flatten module organization - remove analysis folder,"Fixes #21

Changes made in this Pull Request:
<!-- Summarise changes made with dot points below -->
 - Move all analysis modules up a directory
 - Update `codecov.yml`
 - Update path for docs
 - Move tests up a directory
 - Delete analysis folders
 - Update imports to use `transport_analysis.module_name` instead of `transport_analysis.analysis.module_name`
",True,22,https://api.github.com/repos/MDAnalysis/transport-analysis/pulls/22,https://github.com/MDAnalysis/transport-analysis/pull/22,closed,4,4,7,4,1,0,0,0,[],2023-07-01 06:02:52+00:00,2023-07-03 06:32:47+00:00,174595.0,"2 days, 0:29:55",[],"[{'commit_sha': 'c8cf8d713088c6a7d3543c6091a061b3843bc945', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e0e2b3af1c130b11485c1daa2aff6ffd60f6b86', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b5e81bda74ded9df2e6753d21d3a5459a159321', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '561efbe1692a0b9af97b2016400fc91c6cff0baf', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}]",Xu Hong Chen,110699064,,User,,5,,38,22
1372765480,Add VACF implementation,"This Pull Request will implement two methods for calculating a velocity autocorrelation function (VACF) from an `AtomGroup`. The default computation is a fast Fourier transform-based (FFT) Fast Correlation Algorithm (FCA) powered by the `tidynamics` package with $O(nlogn)$ running time. An alternative simple ""windowed"" calculation provides $O(n^2)$ running time.

Changes made in this Pull Request:
<!-- Summarise changes made with dot points below -->
 - Add items to `__init__()`
 - Write `_prepare()` and `_parse_dim_type()`
 - Write `_single_frame()`
 - Add MDAnalysisTests to access AMBER test data files with velocities
 - Provide exception handling
 - Implement VACF computation via FFT
 - Implement simple ""windowed"" algorithm for VACF calculation
 - Add tests for method signatures, VACF FFT implementation, and VACF simple ""windowed"" implementation",True,1,https://api.github.com/repos/MDAnalysis/transport-analysis/pulls/1,https://github.com/MDAnalysis/transport-analysis/pull/1,closed,636,178,14,23,1,46,1,0,[{'name': 'enhancement'}],2023-05-31 19:13:13+00:00,2023-06-15 16:18:38+00:00,1285525.0,"14 days, 21:05:25","[{'comment_id': 1212403534, 'comment_body': ""You could probably make it so that `yx` is ok, I think it would still make logical sense in that the dims don't have an order except by convention, would still follow the `xy` code-path"", 'comment_created': datetime.datetime(2023, 5, 31, 23, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1212404101, 'comment_body': 'Docstring? / what is `times` going to do?', 'comment_created': datetime.datetime(2023, 5, 31, 23, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1212404794, 'comment_body': 'Lets consider making a decorator that returns `u.atoms` if the input is a universe, that way you can accept both. ', 'comment_created': datetime.datetime(2023, 5, 31, 23, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1212405484, 'comment_body': 'Have a look at how this is done in `MSD` class. :)', 'comment_created': datetime.datetime(2023, 5, 31, 23, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1212422707, 'comment_body': 'Maybe instantiate these as empty version of the data type you intend them to be?', 'comment_created': datetime.datetime(2023, 5, 31, 23, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1212459830, 'comment_body': ""Yeah unfortunately `setup` doesn't support lists of strings. The only workaround is to make the whole thing one string, i.e. `'Xu Hong Chen, Hugo MacDermott-Opeskin, Orion Cohen'`, but it's probably easier to just keep `AUTHORS.md` up-to-date."", 'comment_created': datetime.datetime(2023, 6, 1, 1, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 1212601749, 'comment_body': 'So let it accept all possible permutations? Sure, that would be good.', 'comment_created': datetime.datetime(2023, 6, 1, 5, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1212602720, 'comment_body': '`times` likely will not be used explicitly in this class. Would it be best to remove it from the docstring then?', 'comment_created': datetime.datetime(2023, 6, 1, 5, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1212603210, 'comment_body': 'Probably. ', 'comment_created': datetime.datetime(2023, 6, 1, 5, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1212606839, 'comment_body': 'What do you mean by decorator? I was following the feedback in my proposal about avoiding having a `Universe` with a selection string and only using an `AtomGroup` instead.', 'comment_created': datetime.datetime(2023, 6, 1, 5, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1212608664, 'comment_body': 'I do that in `_prepare()`, just like in the MSD module. Would it be better to do it here? Have not tried it myself', 'comment_created': datetime.datetime(2023, 6, 1, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1212610569, 'comment_body': 'The code here is the same as in the `MSD` class, so it should work, right? Iirc it worked for VACF back when I tested it for the proposal and a week or two ago. Then I would just add support for more permutations in `keys`?', 'comment_created': datetime.datetime(2023, 6, 1, 5, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1212613815, 'comment_body': 'Yeah, but on reevaluation, lets hold off on all permutation support for now, this should do until we establish the functionality we want. ', 'comment_created': datetime.datetime(2023, 6, 1, 5, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1212616078, 'comment_body': 'Just a thought I have been throwing around, would look like \r\n\r\n```python\r\n@universe_to_atomgroup # decorator\r\ndef my_func_that_takes_u_or_ag(input):\r\n      # decorator converts input universe to `atomgroup` if it isnt one already\r\n      do_something_with_atomgroup(input)\r\n```\r\n\r\nBut tbh this is just a random nice to have, and should probably go in MDA-core, so ignore me for now hahahah. ', 'comment_created': datetime.datetime(2023, 6, 1, 5, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1220554233, 'comment_body': ""Hmm, IMO it's nicer in terms of readability to have it only in one place, your call on where it goes. Defining empty versions is also nice because the types are clear."", 'comment_created': datetime.datetime(2023, 6, 6, 23, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1222350095, 'comment_body': 'Does the `AtomGroup` type hint not work here once you have imported it?', 'comment_created': datetime.datetime(2023, 6, 8, 1, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1222350450, 'comment_body': 'Agree with @orionarcher, lets just allocate the arrays here rather than in _prepare. ', 'comment_created': datetime.datetime(2023, 6, 8, 1, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1222352886, 'comment_body': 'Can you also write a test that checks `characteristic_poly` vs `tidynamics.acf`', 'comment_created': datetime.datetime(2023, 6, 8, 1, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1223397339, 'comment_body': 'So I tried this and it seems like it does not work because `n_frames` is not accessible in `__init__()`', 'comment_created': datetime.datetime(2023, 6, 8, 18, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1223503246, 'comment_body': ""If you're very keen on having empty arrays there, one option is to set up `np.empty((0, ...), dtype=float)`. That could be confusing for users though."", 'comment_created': datetime.datetime(2023, 6, 8, 20, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lilyminium', 'type': 'User'}, {'comment_id': 1223707810, 'comment_body': 'If that is the only alternative, I feel the current setup would be a little nicer. @hmacdope @orionarcher What are your thoughts?', 'comment_created': datetime.datetime(2023, 6, 9, 1, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1227430101, 'comment_body': 'tidynamics should always be present for this test as it is a core dependency. ', 'comment_created': datetime.datetime(2023, 6, 13, 1, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1227431827, 'comment_body': 'Citations needed, have a look at the use of `duecredit` in  MDA core https://pypi.org/project/duecredit/', 'comment_created': datetime.datetime(2023, 6, 13, 2, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1227432823, 'comment_body': 'Make `start stop step` parameters ', 'comment_created': datetime.datetime(2023, 6, 13, 2, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1227433001, 'comment_body': 'Same here make `start stop step` parameters. ', 'comment_created': datetime.datetime(2023, 6, 13, 2, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1228445274, 'comment_body': 'It\'s mentioned above to include any ordering of `xyz`, which I think would be nice. A good way to implement that would be to convert the `dim_type` string to a set and then use sets as the keys here. That would give you flexibility without enumerating every option. e.g.\r\n\r\n```python\r\ndim_type = set(self.dim_type.split())\r\n\r\n        keys = {\r\n            {""x""}: [0],\r\n            {""y""}: [1],\r\n            {""z""}: [2],\r\n            {""x"", ""y""}: [0, 1],\r\n            {""x"", ""z""}: [0, 2],\r\n            {""y"", ""z""}: [1, 2],\r\n            {""x"", ""y"", ""z""}: [0, 1, 2],\r\n        }\r\n\r\nself._dim = keys[dim_type]\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 13, 17, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1228448837, 'comment_body': ""Current setup meaning allocating them in _prepare instead of in __init__? I'd be happy with that option too. I like what you have here once the redundant `None` assignments are removed. "", 'comment_created': datetime.datetime(2023, 6, 13, 17, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1228452172, 'comment_body': 'I fear that because you are using a triple quote the white space will be rendered in the error message and make it less readable. Could you check that? If so, you could replace these with a set of quotes in parentheses. e.g.\r\n\r\n```python\r\nlong_quote = (\r\n    "" text text text"",\r\n    "" text text text"",\r\n    "" text text text"",\r\n    "" text text text""\r\n)\r\n```\r\n\r\nI think thats the correct syntax, you may not even need the commas', 'comment_created': datetime.datetime(2023, 6, 13, 17, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1228455505, 'comment_body': ""If this were my code I'd only accept AtomGroup and not Universe. AtomGroup is significantly more flexible than Universe and feels conceptually like the right thing here as we are ultimately interested in the VACF of the particles. It's not much work to support Universe, but it's even less work to turn a universe into an atom group (`u.atoms`). Ultimately a personal preference."", 'comment_created': datetime.datetime(2023, 6, 13, 17, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1228484457, 'comment_body': ""This looks great! Would you be all right with me making this change in a separate PR? I'd like to get this one merged first to fix the CI (the check via Black is failing atm)."", 'comment_created': datetime.datetime(2023, 6, 13, 17, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1228642361, 'comment_body': ""Ah, you're right! They are redundant!"", 'comment_created': datetime.datetime(2023, 6, 13, 20, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1228652164, 'comment_body': ""So I've checked it on my machine (Fedora Linux 38) and it shows up fine in both the terminal and Jupyter Lab. Feel free to check it on yours as well and let me know if you see anything strange!"", 'comment_created': datetime.datetime(2023, 6, 13, 20, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1228655121, 'comment_body': 'Could you elaborate? Does that mean I should just remove the ""try"" and ""except"" part and only have the rest of the test?', 'comment_created': datetime.datetime(2023, 6, 13, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1228736673, 'comment_body': 'I noted this on Discord already but I just wanted to add it here so that the discussion is a bit more public. I tried to use mypy to check whether the `AtomGroup` type hint works, but I ran into some issues:\r\n```\r\nerror: Need type annotation for ""LONG_VERSION_PY"" (hint: ""LONG_VERSION_PY: Dict[<type>, <type>] = ..."")  [var-annotated]\r\nvelocityautocorr.py:10: error: Cannot find implementation or library stub for module named ""MDAnalysis.analysis.base""  [import]\r\nvelocityautocorr.py:10: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\r\nvelocityautocorr.py:154: error: Skipping analyzing ""tidynamics"": module is installed, but missing library stubs or py.typed marker  [import]\r\nFound 6 errors in 2 files (checked 1 source file)\r\n```\r\nI looked this up for a while but I got stuck. Will be leaving it for the time being to work on the other items, but will revisit it.', 'comment_created': datetime.datetime(2023, 6, 13, 21, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1228784106, 'comment_body': 'Got it, good to know. I am curious if there is any PEP guidance on triple quotes vs parenthetical single quotes, does anyone else have an opinion here? @hmacdope?\r\n\r\n(Admittedly, this is very pedantic)', 'comment_created': datetime.datetime(2023, 6, 13, 22, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1228784702, 'comment_body': 'Yep no problem. Maybe raise an issue and resolve this comment?', 'comment_created': datetime.datetime(2023, 6, 13, 22, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1228786245, 'comment_body': 'Done! I only need to cite the tidynamics package for now, right?', 'comment_created': datetime.datetime(2023, 6, 13, 22, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1228790501, 'comment_body': 'Yep!', 'comment_created': datetime.datetime(2023, 6, 13, 23, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1228807901, 'comment_body': 'tbh mypy is kinda cursed. Not sure there is anything much better, but be aware of the `# type: ignore` comment if you ever feel like you are wasting too much time with it.', 'comment_created': datetime.datetime(2023, 6, 13, 23, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1230112889, 'comment_body': 'You\'re right - I revisited it today and it has been too much trouble for something so minor. I went through a bunch of documentation, discussions, and even ChatGPT but had no luck. None of the errors mention the `AtomGroup` part and I wrote that part based on the cookiecutter template (only taking out the `Universe` part because it was unnecessary), so I think it is probably okay. I also ran it with the `# type: ignore` comment you mentioned. I think, at this point, I have done what I can.\r\n\r\nEdit for clarity: all the current ""errors"" are for the imports/module recognition. mypy did not identify any issues with the typing.', 'comment_created': datetime.datetime(2023, 6, 14, 20, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1230272762, 'comment_body': 'Sounds good. ', 'comment_created': datetime.datetime(2023, 6, 14, 23, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1230272843, 'comment_body': 'Done thanks', 'comment_created': datetime.datetime(2023, 6, 14, 23, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1230274126, 'comment_body': ""Yes as in you shouldn't be able to use the package without tidynamics tbh. I think we can be opinionated and insist. We didn't for MSD in MDAnalysis core because of the need to keep our dep list as short as possible"", 'comment_created': datetime.datetime(2023, 6, 14, 23, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1230274758, 'comment_body': 'Done in #13 ', 'comment_created': datetime.datetime(2023, 6, 14, 23, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1230275150, 'comment_body': 'Should be fine with triple quotes but see my  opinion on forcing tidynamics to be installed. ', 'comment_created': datetime.datetime(2023, 6, 14, 23, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1231250603, 'comment_body': ""So that would mean removing the exception and the corresponding test, along with the skip if no tidynamics parts in the tests, right? I've already added tidynamics in `devtools/conda-envs/test_env.yaml` and `pyproject.toml`. Would I add it to the `install_requires=` part of `setup.py` as well? (These are all from https://mdakits.mdanalysis.org/makingakit.html) Any other places?"", 'comment_created': datetime.datetime(2023, 6, 15, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}]","[{'commit_sha': '1957be5311f791aa8dd809dacaad25f4e4050097', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80af3b8a897353eb904295fec9de49db6283ef4b', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21404f50e7956bb701cb3c6feece3abd4a0ffe5c', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c65d215252407c76833a31f05f3326ebd13c2f8', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07764c8523dddff3a05d31203e046a08fca6fa69', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c762896459da380fd3481b9e87201963de3d13c', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceef9214ed9398ec5f7553363d581a6a1ca09762', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51074cf9f0131fe5f7eea4af07efd622a20a7172', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '171968c39fe928324d00701c29dcf41772ee3ee3', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c750013f055535529df0245abba753c97f9f354', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f8602f13071ffcbfa101d96a4aa1ed84574840f', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c61a5306f4238313cec38abb8050442a8f29b3', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b143cbfc40af5ae7af3809f682d7671f21847d', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8cb11166ad70e19c154fe92da90d1a1a080c673', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd79334f2c8058d06a389a440659b2201a47c91bb', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3614ee404a40ce10bab2dd2e2dcf5f9169ec13c1', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26216d013856f301f3346530727d4ef6ad584e56', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42fcef50ee52109a8aa940d270bfcd92f386b19e', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd09a7c86091bd8d8fad281406814b17dade2ac46', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dece7a3e7fdbdf27fcb0637e1fe8418ab3e4ce51', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6d123e374a224dc50ce345fec52f7b6518c81b4', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfad74b04ba25c498f84c85c57a281a0507db12a', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a968e5c013011e1c86e2a47f5b21440c81fd6002', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}]",Xu Hong Chen,110699064,,User,,5,,38,22
1427924041,Create plotting function for VACF,"Towards #7 

Changes made in this Pull Request:
 - Add `plot_vacf()` to easily plot VACFs via `Matplotlib`
 - Add tests to validate plot data, plot labels, and start, stop, step functionality",True,23,https://api.github.com/repos/MDAnalysis/transport-analysis/pulls/23,https://github.com/MDAnalysis/transport-analysis/pull/23,closed,74,3,2,9,3,2,0,0,[],2023-07-10 17:37:39+00:00,2023-07-12 02:48:44+00:00,119465.0,"1 day, 9:11:05","[{'comment_id': 1259089659, 'comment_body': 'If this takes a VACF object only it should be a method rather than standalone. ', 'comment_created': datetime.datetime(2023, 7, 11, 1, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1259090012, 'comment_body': 'can do type hint with a string  `vacf_obj: ""ObJType..."" but see above comment. ', 'comment_created': datetime.datetime(2023, 7, 11, 2, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}]","[{'commit_sha': 'af9be89f00bdcb850a40c841b581441fb090cc18', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fbeccf4bc44f6bd3d0596ed03c75ebd7dbbf688', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ff0cabf4c7adf02a86d610d63cb5edc16e1ad88', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88fa42409a9eb525c9f92e0bf622bfed7a6b41aa', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '581b1fbcfbe15b8c77134d3f21db10253059088a', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b9946d8a5a2c61b7b5e68df487dd289628dda3b', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '867514a9540c54360329a3153253ed723e94ff82', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23691b58ec8c0690150de1a1563855e6833d09f5', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ad681b8577f051661f4303384821970f5818f5', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}]",Xu Hong Chen,110699064,,User,,5,,38,22
1429993664,Add self-diffusivity calculation,"Fixes #7 

Changes made in this Pull Request:
 - Add self-diffusivity calculation method `sd()` in class `VelocityAutocorr`",True,24,https://api.github.com/repos/MDAnalysis/transport-analysis/pulls/24,https://github.com/MDAnalysis/transport-analysis/pull/24,closed,529,120,2,19,11,23,1,0,[{'name': 'enhancement'}],2023-07-11 18:27:34+00:00,2023-08-02 16:22:51+00:00,1893317.0,"21 days, 21:55:17","[{'comment_id': 1270320458, 'comment_body': 'Is this really the self diffusivity? Seems very high. Try with the equivalent trajectory in positions space with the existing MSD module from MDAnalysis and see what you get. ', 'comment_created': datetime.datetime(2023, 7, 21, 7, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1271755725, 'comment_body': 'You can separate all the tests that use this fixture into a separate class and then make the parameterization over  the class rather than repeat', 'comment_created': datetime.datetime(2023, 7, 24, 5, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1271757000, 'comment_body': 'This is a green Kubo integral of the VACF so we should use the proper name. ', 'comment_created': datetime.datetime(2023, 7, 24, 5, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1271757337, 'comment_body': ""Should raise an exception if .run hasn't already been called with some kind of cache variable. "", 'comment_created': datetime.datetime(2023, 7, 24, 5, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1271757621, 'comment_body': 'We will probably remove this IMHO as trapeziod or Gquad is the standard. Can keep it around for testing but I would make it a private method with a `_` prefix', 'comment_created': datetime.datetime(2023, 7, 24, 5, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1271764502, 'comment_body': 'Also will need citations.', 'comment_created': datetime.datetime(2023, 7, 24, 5, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1272672257, 'comment_body': 'Does `sd_gk()` sound good? I feel that `self-diffusivity_greenkubo()` is too long. I thought we were doing citations after we finish the bulk of the implementations? Or would it be better to do them now?', 'comment_created': datetime.datetime(2023, 7, 24, 19, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1272674844, 'comment_body': ""I thought Simpson's rule was better when appropriate? Here's a link to my source: https://math.dartmouth.edu/~m3cod/klbookLectures/406unit/trap.pdf\r\n\r\nIs keeping the standard more important than having an option for better accuracy?"", 'comment_created': datetime.datetime(2023, 7, 24, 19, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1272677473, 'comment_body': ""I'm not too sure where to start here. Do you think you'd be able to explain a bit more, or would you be good with setting up a meeting to go over this?"", 'comment_created': datetime.datetime(2023, 7, 24, 19, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1272730735, 'comment_body': 'Tests have been added (though they are very rough). Will try to make the separate class next!', 'comment_created': datetime.datetime(2023, 7, 24, 20, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1272731186, 'comment_body': 'Those tests would include the old ones for VACF too, right?', 'comment_created': datetime.datetime(2023, 7, 24, 20, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1272820965, 'comment_body': '`sd_gk` sounds good to me. Either is fine on citation, up to you, just make a note or issue. ', 'comment_created': datetime.datetime(2023, 7, 24, 22, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1272822969, 'comment_body': 'Yep happy to meet. \r\n\r\nSomething like the following should work. \r\n\r\n\r\n```python\r\n\r\ndef __init__(self,)\r\n    self._run_called = False\r\n   ...\r\n\r\n   def _conclude(self):\r\n   self._run_called = True\r\n   ...\r\n\r\n   def sd_gk(self):\r\n    if not self._run_called:\r\n        raise RunTimeError(""blah blah"")\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 22, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1272823444, 'comment_body': 'Need for an odd number of samples is a bit of a pain. ', 'comment_created': datetime.datetime(2023, 7, 24, 22, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1275428247, 'comment_body': 'Left a note in Issue #20.', 'comment_created': datetime.datetime(2023, 7, 26, 20, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1275433806, 'comment_body': 'I feel having the option available is better than not providing it, but I am no expert. Is it really preferable to remove it rather than just make it clear that trapezoid is the standard/default?', 'comment_created': datetime.datetime(2023, 7, 26, 20, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1275582580, 'comment_body': ""In general you want to aim for the lowest possible API surface so that people don't get confused and do the wrong thing. \r\n\r\nThe idea being you should plan for users to get frustrated as soon as the first thing goes wrong, meaning you should take away the ability for them to annoy themselves if that makes sense. "", 'comment_created': datetime.datetime(2023, 7, 26, 23, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1276591656, 'comment_body': 'Can we make the name here a bit more descriptive? Maybe `unit_velocity_traj`', 'comment_created': datetime.datetime(2023, 7, 27, 17, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1276597409, 'comment_body': 'Or `self._has_run`?\r\n\r\nSomething like, `""VelocityAutocorrelation.run() must be called before \'sd_gk\'""`', 'comment_created': datetime.datetime(2023, 7, 27, 17, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1276598835, 'comment_body': ""Another nitpick, but generally I'm not in favor of suber abbeviated naming. `sd_gk` means something to you now, as a developer, but it probably won't mean much to a new user. Maybe `self_diffusivity_gk` or `self_diffusivity_green_kubo` or `diffusivity_green_kubo`?"", 'comment_created': datetime.datetime(2023, 7, 27, 17, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1276852196, 'comment_body': ""If users do the wrong thing (use the method with an even number of samples), `scipy.integrate.simpson` actually handles it well by default using the equations in Cartwright's paper for the last interval. On second thought, considering that it is pretty much the same as trapezoid but better, what are your thoughts on using it as the default instead?\r\n\r\nSource: https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.simpson.html"", 'comment_created': datetime.datetime(2023, 7, 27, 21, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1278021960, 'comment_body': ""Good point, I'll go with `self_diffusivity_gk` then."", 'comment_created': datetime.datetime(2023, 7, 28, 19, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1278025279, 'comment_body': ""Does this matter enough to be worth the effort? It's used in a lot of places, so the change would be a little messy."", 'comment_created': datetime.datetime(2023, 7, 28, 19, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}]","[{'commit_sha': 'fde9cbfe84a049b02fe8fbec0c9512d530980896', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7e2dd3162371d45499bed8ae0e3edf13212bec1', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3542652a1cd5f65b8c4d621f2e9f4c6246a79986', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '796a1b54fa4fa697690c40643dad64b17ac4dfe4', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '560a9a391009e88145835b6081b2308020f1a430', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdf60950be86244ce2baf719b6d5158251063ead', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916cbd6eb5f71af88541d66333b054878a7abcd2', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29f28056b9d51b78fd99370d3c1ac5903b9e1c9e', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '067cb4030d67806068fc5f0168af94f5ed464dfa', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb661c65c5c02e4e45116a410eb831996431ca0d', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e39ecdc7cd439d1487676126dcb4d8ae25e7b96e', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdbde050fd5a48390b31b8e1afa8b3786a2618b1', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdbda5f49f8483efee1f6bdba7b4cded6424e225', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d7a32b8f49ac3f452c57f15581841fca7dd9f0', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dc6fd022a647c27ab48dc7978a2842db03263dc', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cf4a26ecf8748983afdc8fa9ad3dfa90aae853c', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3909512678357bcbbe1bac3dd13a75f8ca80851b', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd74977d47cfbba2c42469ea123b3225d128b638', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c66b5dfaa32c13afc6572520114259b3d19a3c0', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}]",Xu Hong Chen,110699064,,User,,5,,38,22
1435558670,Add Einstein-Helfand viscosity implementation,"<!-- Does this PR fix an issue or relate to an existing discussion? Please link it below after ""Fixes #"" -->

Fixes #17 and #9 

Changes made in this Pull Request:
<!-- Summarise changes made with dot points below -->
 - Use class `VelocityAutocorr` as template
 - Add items to `__init__()`
 - Write `_prepare()` and `_single_frame()`
 - Early work on `_conclude()`

Areas to work on:
- Complete `_conclude()`
- Units
- Boltzmann constant usage in Python

For later:
- Add FFT calculation? Check `tidynamics` source code to see how feasible this is (raised in #27)",True,25,https://api.github.com/repos/MDAnalysis/transport-analysis/pulls/25,https://github.com/MDAnalysis/transport-analysis/pull/25,closed,405,0,2,24,3,28,1,0,[{'name': 'enhancement'}],2023-07-14 23:42:12+00:00,2023-08-15 01:17:52+00:00,2684140.0,"31 days, 1:35:40","[{'comment_id': 1265761480, 'comment_body': ""I think this should be a static method.\r\n\r\n```python\r\nself.dim_type = dim_type\r\nself._parse_dim_type()\r\n```\r\n\r\nis much less clear than\r\n\r\n```python\r\nself.dim_type, self.dim_fac = self._parse_dim_type(dim_type)\r\n```\r\n\r\nThe latter makes it clearer what _parse_dim_type is doing. In the former, you don't even know that a self.dim_fac variable has been created."", 'comment_created': datetime.datetime(2023, 7, 17, 18, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1265761575, 'comment_body': ""Could we make this a static method that returns dim_type and dim_fac?\r\n\r\nGenerally, I am of the opinion that it's always best to use static methods when possible. It makes it much easier to inspect the function call and understand what's happening. \r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 17, 18, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1265765089, 'comment_body': 'I believe that the default float in python is already 64 bits, what will this do?', 'comment_created': datetime.datetime(2023, 7, 17, 18, 41, 34, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1265774311, 'comment_body': ""What's our plan for benchmarking the viscosity analysis?"", 'comment_created': datetime.datetime(2023, 7, 17, 18, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1266061255, 'comment_body': 'So do you mean we would set the instance variables `self._dim` and `self.dim_fac` in `__init__()`? ', 'comment_created': datetime.datetime(2023, 7, 18, 1, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1267192189, 'comment_body': 'Oh, I see what you mean now. Missed the comment above, my bad!', 'comment_created': datetime.datetime(2023, 7, 18, 19, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1276601417, 'comment_body': 'Can we break down this math to make it more understandable? something like \r\n\r\n```python\r\nsomething = self._masses_rs * self._velocities[:-lag, :, :] * self._positions[:-lag, :, :]\r\nsomething_else = self._masses_rs * self._velocities[:-lag, :, :] * self._positions[:-lag, :, :]\r\ndiff = something - something_else\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 17, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1276602648, 'comment_body': ""same as above here, I'd advocate for adding intermediate variables over putting a single term on each line. Ultimately a matter of taste though. I sense this will be a reoccuring thing so curious what @hmacdope thinks."", 'comment_created': datetime.datetime(2023, 7, 27, 17, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1276603799, 'comment_body': 'didn\'t we decide to make the keys sets? e.g. `set([""x"", ""y"", ""z""])`', 'comment_created': datetime.datetime(2023, 7, 27, 17, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1276886574, 'comment_body': ""Wouldn't adding intermediate variables take more memory and make the calculation scale worse with larger datasets? If the difference doesn't really matter, I would be good with adding them. I'm also curious what @hmacdope thinks."", 'comment_created': datetime.datetime(2023, 7, 27, 22, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1276888043, 'comment_body': ""Yeah, but I'd prefer to address it in a separate PR once we're done with these ones because the current PRs are getting a bit too bulky for my tastes."", 'comment_created': datetime.datetime(2023, 7, 27, 22, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1283736460, 'comment_body': ""I'm actually not sure. I suspect the difference is negligable if it exists at all. This could be something to try out with %timeit in a jupyter notebook."", 'comment_created': datetime.datetime(2023, 8, 3, 21, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orionarcher', 'type': 'User'}, {'comment_id': 1292056262, 'comment_body': 'No need to back this in as a fixtue, just use 5001 in place.', 'comment_created': datetime.datetime(2023, 8, 12, 4, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292056352, 'comment_body': 'Parametrize over fft=True and fft=False', 'comment_created': datetime.datetime(2023, 8, 12, 4, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292056466, 'comment_body': 'Link to the issue number.', 'comment_created': datetime.datetime(2023, 8, 12, 4, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292056518, 'comment_body': 'Grab the actual value here.', 'comment_created': datetime.datetime(2023, 8, 12, 4, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292056579, 'comment_body': 'Can remove this comment now.', 'comment_created': datetime.datetime(2023, 8, 12, 4, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292057568, 'comment_body': '@xhgchen you can benmark as part of your reproduction.', 'comment_created': datetime.datetime(2023, 8, 12, 4, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292059458, 'comment_body': 'If its not possibe raise exception or remove.', 'comment_created': datetime.datetime(2023, 8, 12, 4, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292060796, 'comment_body': 'Add plotting?', 'comment_created': datetime.datetime(2023, 8, 12, 4, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292070664, 'comment_body': 'I wanted to do that in a separate PR to avoid making this PR too bloated. Would it be better to add it here?', 'comment_created': datetime.datetime(2023, 8, 12, 4, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1292112555, 'comment_body': 'thats fine to do next PR', 'comment_created': datetime.datetime(2023, 8, 12, 6, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292842402, 'comment_body': 'Sure, just wondering why 5001 in place is better? I thought setting NSTEP as a fixture would be more maintainable in case we ever decide to test it with another value (and your MSD module uses the fixture too)?', 'comment_created': datetime.datetime(2023, 8, 13, 19, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1292842778, 'comment_body': ""I'll remove FFT for now then and raise an issue."", 'comment_created': datetime.datetime(2023, 8, 13, 19, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1292842996, 'comment_body': 'Was wondering also - why is grabbing the actual value better here?', 'comment_created': datetime.datetime(2023, 8, 13, 19, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1292871831, 'comment_body': 'fair enough I agree.', 'comment_created': datetime.datetime(2023, 8, 13, 23, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292871847, 'comment_body': ':+1: \r\n', 'comment_created': datetime.datetime(2023, 8, 13, 23, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1292871996, 'comment_body': 'Just to reduce code volume, you still have to index the dict later with this approach. ', 'comment_created': datetime.datetime(2023, 8, 13, 23, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}]","[{'commit_sha': '4537d455c496fd00e15863d3d0d66bfffd6a9383', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d4371b10c712e2a8547b55178a70428886a15c', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9187c4f82b47eb3aa31423591cb85192e52f832', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '329e17bad6f9ed133f4d172d68a6c2be928d01eb', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0405ff39bc75f9766e29735a37875a96ac0fba88', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e00bd8ab9ac49ed947d2e17ba4965eef3d85fe13', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e9e1498f07d66805afaba46410dcaadca34ed5', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7416979086d431dd15aefe952ae555b8926910c0', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512d57f57cf09a12ced17d0c31c82ca980074ce4', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98ad724748e17e9f3bddf0143de3f4132c0d38b0', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577e131c76b3e2b0a2b670ed492607880cc7bafe', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49216aaa0ee5ebe7e09843139bcf37b14ecd5153', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0e30330b22024bcb1a2f16fbf6288fde41d9d5d', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06539e772b5828b9faff6a7fa896b3e947be32f6', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '760bf9d7c574c4eaa102809aca41f5482060bf90', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '248a5c101ee88f86a0285e96fdb00fe39525e726', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4759a63066f446c16cd88df1fab3fc4c3cf9d129', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '016effef660fb37338cfbe2a198c4fd79fc56d56', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e9cf3882f717c7a7442f5d2bdfc8e2a5fd79df', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a35936e0e05137483fb22869a8fbf787ad1afb', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2a0c5b716bfbf84052153c61f8db77f853ab15', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e482765c056f87709e27ef4ef76a21c38d8e696c', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c7dee8f83cfe3318d5ffba606725fe7aacfd055', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b862476a5d1ce8461835d4df11d5fa2e8504574a', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}]",Xu Hong Chen,110699064,,User,,5,,38,22
1476518702,Create plotting functions for viscosity function and running viscosity,"Fixes #28 

Changes made in this Pull Request:
 - Add function to plot result of class `ViscosityHelfand`
 - Add function to plot running viscosity in class `ViscosityHelfand`
 - Write tests for both plotting functions",False,29,https://api.github.com/repos/MDAnalysis/transport-analysis/pulls/29,https://github.com/MDAnalysis/transport-analysis/pull/29,open,183,0,2,2,1,3,0,0,[],2023-08-15 21:33:17+00:00,,0.0,,"[{'comment_id': 1296533276, 'comment_body': 'What is meant by `function` in the name here?', 'comment_created': datetime.datetime(2023, 8, 16, 23, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 1300732527, 'comment_body': 'I was referring to eq. 5 of E M Kirova and G E Norman 2015 J. Phys.: Conf. Ser. 653 012106\r\n\r\nIt is actually the product of viscosity and time as a function of time. You take the slope of it to obtain viscosity. Here is a direct link to the article: https://iopscience.iop.org/article/10.1088/1742-6596/653/1/012106', 'comment_created': datetime.datetime(2023, 8, 21, 23, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'xhgchen', 'type': 'User'}, {'comment_id': 1300750553, 'comment_body': 'Okay you should add this info to the docs and also to the docstring.', 'comment_created': datetime.datetime(2023, 8, 21, 23, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}]","[{'commit_sha': 'b65d9488babe3a9303c086b7f2ae442fcea22885', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43f742495328d1587d389e8dc1f8e09978e4c782', 'committer_username': 'xhgchen', 'committer_name': 'Xu Hong Chen', 'committer_email': None, 'commit_date': datetime.datetime(2022, 8, 5, 22, 5, 53, tzinfo=datetime.timezone.utc)}]",Xu Hong Chen,110699064,,User,,5,,38,22

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
646603824,transport-analysis,MDAnalysis/transport-analysis,Python,2,9,11,4,147,19,3,1,"[{'id': 1599507122, 'number': 40, 'closed': datetime.datetime(2023, 11, 13, 20, 26, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 13, 19, 52, 37, tzinfo=datetime.timezone.utc), 'time_taken': 2011.0, 'time_delta': '0:33:31', 'additions': 22, 'deletions': 7, 'state': 'closed'}, {'id': 1489120141, 'number': 36, 'closed': datetime.datetime(2023, 8, 25, 6, 2, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 25, 5, 59, 46, tzinfo=datetime.timezone.utc), 'time_taken': 155.0, 'time_delta': '0:02:35', 'additions': 1487, 'deletions': 0, 'state': 'closed'}, {'id': 1489017812, 'number': 35, 'closed': datetime.datetime(2023, 8, 25, 4, 21, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 25, 4, 20, 19, tzinfo=datetime.timezone.utc), 'time_taken': 93.0, 'time_delta': '0:01:33', 'additions': 34, 'deletions': 17, 'state': 'closed'}, {'id': 1483707911, 'number': 33, 'closed': datetime.datetime(2023, 8, 21, 22, 56, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 22, 54, 3, tzinfo=datetime.timezone.utc), 'time_taken': 168.0, 'time_delta': '0:02:48', 'additions': 57, 'deletions': 8, 'state': 'closed'}, {'id': 1476652998, 'number': 31, 'closed': datetime.datetime(2023, 8, 16, 19, 33, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 16, 0, 3, tzinfo=datetime.timezone.utc), 'time_taken': 70250.0, 'time_delta': '19:30:50', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1476518702, 'number': 29, 'closed': None, 'created': datetime.datetime(2023, 8, 15, 21, 33, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 183, 'deletions': 0, 'state': 'open'}, {'id': 1435558670, 'number': 25, 'closed': datetime.datetime(2023, 8, 15, 1, 17, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 14, 23, 42, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2684140.0, 'time_delta': '31 days, 1:35:40', 'additions': 405, 'deletions': 0, 'state': 'closed'}, {'id': 1429993664, 'number': 24, 'closed': datetime.datetime(2023, 8, 2, 16, 22, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 11, 18, 27, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1893317.0, 'time_delta': '21 days, 21:55:17', 'additions': 529, 'deletions': 120, 'state': 'closed'}, {'id': 1427924041, 'number': 23, 'closed': datetime.datetime(2023, 7, 12, 2, 48, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 17, 37, 39, tzinfo=datetime.timezone.utc), 'time_taken': 119465.0, 'time_delta': '1 day, 9:11:05', 'additions': 74, 'deletions': 3, 'state': 'closed'}, {'id': 1415767972, 'number': 22, 'closed': datetime.datetime(2023, 7, 3, 6, 32, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 1, 6, 2, 52, tzinfo=datetime.timezone.utc), 'time_taken': 174595.0, 'time_delta': '2 days, 0:29:55', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1396369166, 'number': 19, 'closed': datetime.datetime(2023, 6, 20, 23, 37, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 21, 14, 10, tzinfo=datetime.timezone.utc), 'time_taken': 354197.0, 'time_delta': '4 days, 2:23:17', 'additions': 112, 'deletions': 10, 'state': 'closed'}, {'id': 1394603760, 'number': 16, 'closed': datetime.datetime(2023, 6, 16, 4, 41, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 15, 18, 45, 20, tzinfo=datetime.timezone.utc), 'time_taken': 35772.0, 'time_delta': '9:56:12', 'additions': 21, 'deletions': 52, 'state': 'closed'}, {'id': 1386703620, 'number': 11, 'closed': datetime.datetime(2023, 6, 9, 20, 49, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 20, 32, 44, tzinfo=datetime.timezone.utc), 'time_taken': 984.0, 'time_delta': '0:16:24', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 1383147569, 'number': 4, 'closed': datetime.datetime(2023, 6, 7, 21, 16, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 18, 7, 20, tzinfo=datetime.timezone.utc), 'time_taken': 11328.0, 'time_delta': '3:08:48', 'additions': 19, 'deletions': 5, 'state': 'closed'}, {'id': 1383129858, 'number': 3, 'closed': datetime.datetime(2023, 6, 7, 18, 5, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 17, 54, 2, tzinfo=datetime.timezone.utc), 'time_taken': 676.0, 'time_delta': '0:11:16', 'additions': 24, 'deletions': 10, 'state': 'closed'}, {'id': 1372765480, 'number': 1, 'closed': datetime.datetime(2023, 6, 15, 16, 18, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 31, 19, 13, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1285525.0, 'time_delta': '14 days, 21:05:25', 'additions': 636, 'deletions': 178, 'state': 'closed'}]"
