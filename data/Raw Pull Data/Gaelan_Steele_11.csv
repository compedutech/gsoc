pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
693284027,Initial vhost-user-scsi implementation,"Here's an initial implementation of vhost-user-scsi, as part of my GSoC project with @slp. Currently, it supports reading from up to 256 raw images.

For usage documentation and plans for future improvements, see [the README](https://github.com/rust-vmm/vhost-device/blob/da92bee292e1f4ba8683ee1288adeb0c67c04a65/src/scsi/README.md); for architectural documentation, see [ARCHITECTURE.md](https://github.com/rust-vmm/vhost-device/blob/da92bee292e1f4ba8683ee1288adeb0c67c04a65/src/scsi/ARCHITECTURE.md) and comments in the code.

Although a read-only disk driver is of limited usefulness, I believe this code should be more-or-less production-ready. I've left some TODO comments in the code; these are either for features we'll want to add in the future, or places I want feedback from code reviewers (especially who are familiar with SCSI).",False,4,https://api.github.com/repos/rust-vmm/vhost-device/pulls/4,https://github.com/rust-vmm/vhost-device/pull/4,closed,4149,4,21,10,15,14,0,0,[],2021-07-20 08:51:46+00:00,2023-06-05 09:26:39+00:00,59186093.0,"685 days, 0:34:53","[{'comment_id': 763899155, 'comment_body': 'is this a duplicate? Are we trying to ignore a file called target as well as the build directory?', 'comment_created': datetime.datetime(2021, 12, 7, 11, 28, 2, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 763929618, 'comment_body': 'We should generate this file in the build rather than have it in CI', 'comment_created': datetime.datetime(2021, 12, 7, 12, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 763929622, 'comment_body': 'With my testing it crapped out on me:\n\n    âžœ  ./target/debug/vhost-user-scsi -r /tmp/vhost-user-scsi.sock test.img\n    [2021-12-07T11:46:48Z ERROR vhost_user_scsi] Error running daemon: HandleRequest(InvalidParam)\n    [src/scsi/src/main.rs:391]', 'comment_created': datetime.datetime(2021, 12, 7, 12, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 763929624, 'comment_body': 'See previous comment about including test image in GIT repo.', 'comment_created': datetime.datetime(2021, 12, 7, 12, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 763929627, 'comment_body': 'Yes you probably want the full set:\n\n        1 << VIRTIO_F_VERSION_1\n            | 1 << VIRTIO_F_NOTIFY_ON_EMPTY\n            | 1 << VIRTIO_RING_F_INDIRECT_DESC\n            | 1 << VIRTIO_RING_F_EVENT_IDX\n            | VhostUserVirtioFeatures::PROTOCOL_FEATURES.bits()\n\ndrop the hardcoded 1 << 2', 'comment_created': datetime.datetime(2021, 12, 7, 12, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 763929632, 'comment_body': 'Any reason we need an explicit beta version? Comment?', 'comment_created': datetime.datetime(2021, 12, 7, 12, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'stsquad', 'type': 'User'}, {'comment_id': 785470761, 'comment_body': ""Not sure what I was thinking there. In any case, this gitignore seems to be an artifact from before I moved the crate into the `vhost-device` repo, and it doesn't do anything now, so I'll remove it."", 'comment_created': datetime.datetime(2022, 1, 16, 17, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Gaelan', 'type': 'User'}, {'comment_id': 785471149, 'comment_body': 'Hmm, not easily reproducing this (AlmaLinux 8.5 host, self-built QEMU 6.2, Debian 11 ""nocloud"" qcow2 image as guest). Some thoughts:\r\n\r\n* Setting `RUST_LOG=debug` will get you a better idea of when things go wrong.\r\n* Does this happen as soon as you start `vhost-user-scsi`, or after QEMU connects?\r\n* What QEMU version and guest OS are you running?', 'comment_created': datetime.datetime(2022, 1, 16, 17, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Gaelan', 'type': 'User'}, {'comment_id': 785471638, 'comment_body': ""This is from vhost-user-i2c, which [explicitly requests that version](https://github.com/rust-vmm/vhost-device/blob/f42e35e72c5661bb65b3c38356c67d67b69058bd/i2c/Cargo.toml#L15) (presumably because it wants 3.0, but 3.0 wasn't released at the time).\r\n\r\nvhost-user-scsi depends on clap v2 (via structopt), so adding it made Cargo rename vhost-device-i2c's clap dependency in the lockfile to disambiguate between the two versions in use."", 'comment_created': datetime.datetime(2022, 1, 16, 17, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Gaelan', 'type': 'User'}, {'comment_id': 785471818, 'comment_body': 'Good idea, done.', 'comment_created': datetime.datetime(2022, 1, 16, 17, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Gaelan', 'type': 'User'}, {'comment_id': 785699187, 'comment_body': ""We need to stick with this beta version for now as the next version needs a newer version of Rust (1.54 I think) and the container doesn't support that for now. It is going to be updated soon I heard. Once that is done, we can go to 3.0.7 then."", 'comment_created': datetime.datetime(2022, 1, 17, 7, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 787709877, 'comment_body': 'Hey, this repo is now using the latest rust-vmm-ci with Rust 1.54.', 'comment_created': datetime.datetime(2022, 1, 19, 12, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gsserge', 'type': 'User'}, {'comment_id': 788559935, 'comment_body': ""@Gaelan I moved to a non-beta version of clap now and it doesn't support the yaml stuff anymore, but it has a very simple interface available now. Please look at:\r\n\r\nhttps://github.com/rust-vmm/vhost-device/pull/93"", 'comment_created': datetime.datetime(2022, 1, 20, 9, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vireshk', 'type': 'User'}, {'comment_id': 788671566, 'comment_body': ""Oh, clap v3 has structopt built in? That's very cool, I'll look at migrating."", 'comment_created': datetime.datetime(2022, 1, 20, 11, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Gaelan', 'type': 'User'}]","[{'commit_sha': 'e3f4485a07840685f0984c99ffba4a05edba74ad', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7510f9179f4653bf24197aa9b88515ec6bce39e6', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f54e0eb2e8c34b76b9686869b6e9eb8de3fc684f', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b1305c11be1301b0c9cd7aa4a7ba3076fc72480', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65bcce3109c6e7d9dd157f4448574d262ce3fb66', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0792eb14efe8cfa9e341253e9837a4c3f28e3b0', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '052852485bb38393cc6771b7629c1cf74b840d9d', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865f3428d647c201a383a47ef414e831d96b9a23', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e831d1237092fecffeaedf038ad34092d7591ec', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd072e61abfcda7856b63b1a690b4e4654896023b', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}]",Gaelan Steele,4495750,gbs@canishe.com,User,,162,,18,38
683908101,Correct documentation of Address::unchecked_* methods.,"The ""unchecked"" arithmatic methods on the `Address` trait were documented to cause undefined behavior in the case of overflow or underflow. This is a strange claim; if that were truly the case, the methods should have been unsafe. It wasn't, though; every existing implementation of the trait used the `impl_address_ops!` macro, which just implements them with the standard Rust arithmatic operators, which follow this well-defined behavior:
 - In debug mode, overflow is checked for and results in a panic.
 - In release mode, overflow results in silent wrapping.

The wrapping behavior may be surprising or result in incorrect behavior, but it isn't undefined - we know exactly what will happen, and the optimizer is required to preserve that - so we shouldn't call it undefined.

It's also worth nothing that the names of these methods are a little confusing - the integer types in `std` have `unchecked_*` methods that actually invoke UB on overflow (and, accordingly, are unsafe). It might be worth renaming these methods to something more consistent with `std`'s naming. This is slightly complicated by the fact that `std` doesn't actually have a name for this behavior; it's just what the unqualified `+` operator or `.add()` method does. We may not want that, though, if we're trying to be more careful about overflow.

In any case, we don't have to know how it should work to document the current behavior.",True,156,https://api.github.com/repos/rust-vmm/vm-memory/pulls/156,https://github.com/rust-vmm/vm-memory/pull/156,closed,15,3,1,1,2,0,0,0,[],2021-07-05 20:00:29+00:00,2021-07-14 11:23:42+00:00,746593.0,"8 days, 15:23:13",[],"[{'commit_sha': 'ba1ea125e8cc4b4b06f74f786fcca2daefe08673', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}]",Gaelan Steele,4495750,gbs@canishe.com,User,,162,,18,38
671847048,Add some missing trait implementations.,"This PR:

* Derives `Debug` for a few types that were missing them. Also adds a manual implementation for `DescriptorChainRwIter`, because Rust doesn't seem to be able to generate the `M::T: Debug` constraint
* Adds `#![warn(missing_debug_implementations)]`, so we don't regress with missing Debug implementations in the future
* Derive Clone for DescriptorChainRwIter. This is useful in vhost-user-scsi: the virtio-scsi response includes some metadata at the beginning, so it's convenient to write the beginning of the response last. I accomplish this by cloning the DescriptorChainRwIter (or, actually, a higher-level wrapper), skipping forward past the header, writing the body; then using the original DescriptorChainRwIter to write the header.",True,65,https://api.github.com/repos/rust-vmm/vm-virtio/pulls/65,https://github.com/rust-vmm/vm-virtio/pull/65,closed,24,5,4,4,2,0,0,0,[],2021-06-16 20:03:40+00:00,2021-06-22 10:09:24+00:00,482744.0,"5 days, 14:05:44",[],"[{'commit_sha': '4631acca21a01fe08a62d043c44c6cdd1d690b25', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ee3fa4dd20519ded9d051a6879710df37ac9d6', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e22bb8a2964f7bb610340ab4a8645279e46f88c', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c00e8f111e2e8bffa19297ba99691cd22f67194a', 'committer_username': 'lauralt', 'committer_name': 'Laura Loghin', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 24, 10, 3, 23, tzinfo=datetime.timezone.utc)}]",Gaelan Steele,4495750,gbs@canishe.com,User,,162,,18,38
678661588,Minimally fix breakage from upstream changes.,"This PR does the minimum necessary to get things building after some breaking changes to the vm-virtio and vhost projects. There may be better ways to respond to some of these changesâ€”I detail these below and in the commit messagesâ€”but this PR aims to get things compiling and working again in a simple and bikeshed-free way while we figure out an eventual solution.

In particular, this PR:

- Renames vm-virtio to virtio-queue (the former was split into several crates; everything we use is in virtio-queue).
- Converts our VhostUserSlaveReqHandlerMut to the new signatures, which use File instead of RawFd.

  In most cases, we were converting the RawFd into a File anyway, and  the new code is trivial. In a few cases, though, we actually want an  EventFd, which now requires this nasty construction:

  ```
  unsafe { EventFd::from_raw_fd(file.as_raw_fd())
  ```

  This is safeâ€”EventFd::from_raw_fd is unsafe becuase it expects to  uniquely own its fd, an invariant File also hasâ€”but a little   inelegant.

  Ideally, we would either (a) change vmm-sys-util to provide a way to  safely create an EventFd from a File (this would be trivial; EventFd  actually stores its fd as a File internally), (b) pass around a  generic ""uniquely owned fd"" struct (like that propsed by Rust RFC)  #3128 instead of a File, or (c) change vhost to pass us an EventFd  instead of a File where appropriate (which, in practice, would mean  implementing (a) or (b) in vhost).
- ""Implements"" {get,set}_inflight_fd.

  This implementation just returns Err(InvalidOperation), which is the  correct response for a backend that hasn't negotiated the inflight  feature. Eventually, it'd be nice if we allowed the backend to  negotiate this feature; harshanavkis@8b44378 and slp@3346318 are two  attempts at this.
",True,16,https://api.github.com/repos/rust-vmm/vhost-user-backend/pulls/16,https://github.com/rust-vmm/vhost-user-backend/pull/16,closed,32,25,2,4,0,10,0,0,[],2021-06-28 03:02:48+00:00,2021-07-05 09:11:27+00:00,626919.0,"7 days, 6:08:39","[{'comment_id': 659648164, 'comment_body': ""This is not correct as the fd will be closed eventually when the `File` goes out of scope. You want to use `into_raw_fd()` instead.\r\nPlease have a look at https://github.com/cloud-hypervisor/cloud-hypervisor/pull/2798/commits/1f8da2719b3a1bc33608ae3e21fdc68000fb4515#diff-d9d98fa7bcc7d0bce7ebe922dd6464dd70ed72d5061005a77934bc028975a332 for reference on how I fixed this issue from Cloud Hypervisor's fork of `vhost_user_backend`."", 'comment_created': datetime.datetime(2021, 6, 28, 9, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 659648308, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 6, 28, 9, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 659648392, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 6, 28, 9, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 659649674, 'comment_body': ""This can be simply removed. It's not needed since `self.vrings.kick` is an `EventFd`, and as soon as it is replaced with another EventFd, the former will go out of scope and the fd will be automatically closed."", 'comment_created': datetime.datetime(2021, 6, 28, 10, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 659649790, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 659649873, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 659653513, 'comment_body': 'Good catch (and incredibly well timed! I got your message literally less than a minute after this bug caused my code to crash).', 'comment_created': datetime.datetime(2021, 6, 28, 10, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Gaelan', 'type': 'User'}, {'comment_id': 659655393, 'comment_body': ""I think you're right here as well, but wasn't broken even before?\r\n\r\nIn any case, happy to fix it while we're at it."", 'comment_created': datetime.datetime(2021, 6, 28, 10, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Gaelan', 'type': 'User'}, {'comment_id': 659658344, 'comment_body': ""Oh yes this wasn't needed even before. You can use a separate commit to fix this issue only, since it's not related to the API change."", 'comment_created': datetime.datetime(2021, 6, 28, 10, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sboeuf', 'type': 'User'}, {'comment_id': 659661857, 'comment_body': 'Will do.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Gaelan', 'type': 'User'}]","[{'commit_sha': '5f82c6b9be398c307a41ce4c4a6038ba5451a19f', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b8655cfe39fe66055607a33ad7be19367f3142b', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b109e4d0109824d1734e6ca1aaf9667bc85626f5', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db5f82812e8ab80f87e5f014c6842247a33dece', 'committer_username': 'Gaelan', 'committer_name': 'Gaelan Steele', 'committer_email': 'gbs@canishe.com', 'commit_date': datetime.datetime(2013, 5, 22, 4, 38, 19, tzinfo=datetime.timezone.utc)}]",Gaelan Steele,4495750,gbs@canishe.com,User,,162,,18,38

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
370942225,vhost-device,rust-vmm/vhost-device,Rust,46,65,14,35,1080,28,3,11,"[{'id': 693284027, 'number': 4, 'closed': datetime.datetime(2023, 6, 5, 9, 26, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 8, 51, 46, tzinfo=datetime.timezone.utc), 'time_taken': 59186093.0, 'time_delta': '685 days, 0:34:53', 'additions': 4149, 'deletions': 4, 'state': 'closed'}]"
173119716,vm-memory,rust-vmm/vm-memory,Rust,97,299,30,43,309,30,8,12,"[{'id': 683908101, 'number': 156, 'closed': datetime.datetime(2021, 7, 14, 11, 23, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 20, 0, 29, tzinfo=datetime.timezone.utc), 'time_taken': 746593.0, 'time_delta': '8 days, 15:23:13', 'additions': 15, 'deletions': 3, 'state': 'closed'}]"
184425423,vm-virtio,rust-vmm/vm-virtio,Rust,87,361,30,35,400,22,1,2,"[{'id': 671847048, 'number': 65, 'closed': datetime.datetime(2021, 6, 22, 10, 9, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 20, 3, 40, tzinfo=datetime.timezone.utc), 'time_taken': 482744.0, 'time_delta': '5 days, 14:05:44', 'additions': 24, 'deletions': 5, 'state': 'closed'}]"
296298772,vhost-user-backend,rust-vmm/vhost-user-backend,Rust,16,18,16,17,150,5,2,1,"[{'id': 678661588, 'number': 16, 'closed': datetime.datetime(2021, 7, 5, 9, 11, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 3, 2, 48, tzinfo=datetime.timezone.utc), 'time_taken': 626919.0, 'time_delta': '7 days, 6:08:39', 'additions': 32, 'deletions': 25, 'state': 'closed'}, {'id': 648335871, 'number': 12, 'closed': datetime.datetime(2021, 5, 20, 4, 53, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 2, 42, 7, tzinfo=datetime.timezone.utc), 'time_taken': 7857.0, 'time_delta': '2:10:57', 'additions': 2, 'deletions': 0, 'state': 'closed'}]"
