pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
385010932,Implementing Simple Radial Basis Function Layer,"Hey @zoq I am trying to add simple RBF network in mlpack. Task needed to be completed are as follows. It's not completed yet I will try to complete it. Please suggest if you have any inputs for this.
* [x]  Add Documentation for RBF
* [x]  Add Implementation of RBF
* [x]  Add Some Activation Functions  
* [x]  Tests for new Neural Network",True,2261,https://api.github.com/repos/mlpack/mlpack/pulls/2261,https://github.com/mlpack/mlpack/pull/2261,closed,477,3,10,23,24,81,3,0,"[{'name': 's: keep open'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-03-06 20:37:07+00:00,2020-06-16 15:05:24+00:00,8792897.0,"101 days, 18:28:17","[{'comment_id': 392635668, 'comment_body': 'Seems like you need to fix the documentation here', 'comment_created': datetime.datetime(2020, 3, 15, 2, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392635671, 'comment_body': 'I think you mean gaussian function\r\n', 'comment_created': datetime.datetime(2020, 3, 15, 2, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392635812, 'comment_body': 'I think you forgot to change the documentation here as well', 'comment_created': datetime.datetime(2020, 3, 15, 2, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392635823, 'comment_body': ""You'll have to align this"", 'comment_created': datetime.datetime(2020, 3, 15, 2, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392635832, 'comment_body': 'We need another newline here', 'comment_created': datetime.datetime(2020, 3, 15, 2, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392635845, 'comment_body': ""You should add documentation here sating it's the default parameter"", 'comment_created': datetime.datetime(2020, 3, 15, 2, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392635951, 'comment_body': ""I'm unable to select the area below this, but could you list yours and all the other typedefs below here?"", 'comment_created': datetime.datetime(2020, 3, 15, 2, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392635981, 'comment_body': 'A description of the class will be needed', 'comment_created': datetime.datetime(2020, 3, 15, 2, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392636671, 'comment_body': ""do you think you could use `x.each_row() = input.row(i)` to assign the values instead? (I think that's what you're going for here)."", 'comment_created': datetime.datetime(2020, 3, 15, 2, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392636716, 'comment_body': 'Same gere, we could just use `c.each_slice() = centres`', 'comment_created': datetime.datetime(2020, 3, 15, 2, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392636912, 'comment_body': ""This might just be me, so I'll leave this comment up to you. But in cases like these, as a reader it helps me visualize it as stacking up `input` matrices into a cube. So instead it seems more intuitive to have `outSize`  to be the number of slices. I'll leave this up to your judgement, since this could be my personal idiosyncrasy :)"", 'comment_created': datetime.datetime(2020, 3, 15, 3, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 392676550, 'comment_body': ""I didn't get it what are you trying to say here?"", 'comment_created': datetime.datetime(2020, 3, 15, 14, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 392676737, 'comment_body': 'Sure, after complementing the implementation I will add documentation also.', 'comment_created': datetime.datetime(2020, 3, 15, 14, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 392677185, 'comment_body': 'Maybe I will try to do that but it will be quite difficult to calculate distances after doing this.', 'comment_created': datetime.datetime(2020, 3, 15, 14, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 392677236, 'comment_body': 'Thanks for the suggestion.', 'comment_created': datetime.datetime(2020, 3, 15, 14, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 392677361, 'comment_body': 'Sure after completing implementation, I will try to do this.', 'comment_created': datetime.datetime(2020, 3, 15, 14, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 394462316, 'comment_body': 'I meant on line 38. List your typedef along with the others', 'comment_created': datetime.datetime(2020, 3, 18, 16, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'favre49', 'type': 'User'}, {'comment_id': 394558332, 'comment_body': 'Oh, got it many typedef are not there I will add all. Thanks for reviewing @favre49 ', 'comment_created': datetime.datetime(2020, 3, 18, 18, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 424101993, 'comment_body': ""Hey @saksham189 , @zoq is there any limitation in `boost::variant` we cannot give more than 50 parameters that's why my previous builds are failing but when I removed this I was successfully able to build FeedForwardNetwork."", 'comment_created': datetime.datetime(2020, 5, 13, 0, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 424102151, 'comment_body': '@saksham189 What do you think of this??', 'comment_created': datetime.datetime(2020, 5, 13, 0, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 424342597, 'comment_body': 'Hey @himanshupathak21061998 yes there is a limitation of 50. That is why we introduced `MoreTypes`. Can you try adding your layer under that?', 'comment_created': datetime.datetime(2020, 5, 13, 10, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 424351077, 'comment_body': 'I am not sure if there is any need for `c` because you could use centres everywhere. Let me know what you think', 'comment_created': datetime.datetime(2020, 5, 13, 11, 0, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 424358070, 'comment_body': 'Hey @himanshupathak21061998 I went through the implementation here. Are you sure that the implementation is based on column-major matrices?\r\n(Matrices in mlpack are column-major, meaning that each column should correspond to a point in the dataset in contrast to row-major which is used by most libraries)', 'comment_created': datetime.datetime(2020, 5, 13, 11, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 424379523, 'comment_body': 'No, right now it is in row-major format. I have to change this implementation to column-major it is not yet complete and giving the wrong predictions I want a piece of advice on what @favre49 is trying to suggest.', 'comment_created': datetime.datetime(2020, 5, 13, 11, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 424434321, 'comment_body': 'I think there is no need to create the cube `x`. \r\n```\r\nfor each column in the input c\r\narma::mat temp = - center.each_col() + c\r\n```\r\nLet me know what you think.', 'comment_created': datetime.datetime(2020, 5, 13, 13, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 424590992, 'comment_body': 'Yeah, I like this idea will try to use it.', 'comment_created': datetime.datetime(2020, 5, 13, 16, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 425562621, 'comment_body': 'I think we can implement this without creating the cube `x` as I previously suggested. It consumes extra memory. Let me know what you think.', 'comment_created': datetime.datetime(2020, 5, 15, 4, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 426190586, 'comment_body': '@saksham189 When I was doing sum along rows and using c,x variable which was a wrong implementation it was passing now it is failing??', 'comment_created': datetime.datetime(2020, 5, 16, 20, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 426215987, 'comment_body': 'You are not training the centres and scaling factors. For that you would not need to add a gradient method similar to the other layers. \r\nYou can take a look at the [linear layer](https://github.com/mlpack/mlpack/blob/4c1389fa32c7021b019c42399a744b3defe0c464/src/mlpack/methods/ann/layer/linear_impl.hpp).', 'comment_created': datetime.datetime(2020, 5, 17, 4, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 426217011, 'comment_body': 'I think the power here needs to be negative for the gaussian function', 'comment_created': datetime.datetime(2020, 5, 17, 4, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 426261696, 'comment_body': ""I was confused about this. I read  somwhere Gradient assisted RBFN which is different. So I thought in simple RBFN we don't need to find a gradient for the centre. I will implement it."", 'comment_created': datetime.datetime(2020, 5, 17, 13, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 426262438, 'comment_body': '@saksham189 In the RBFN layer, we are only calculating distance Gaussian is implemented as a separate function.', 'comment_created': datetime.datetime(2020, 5, 17, 13, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 426496352, 'comment_body': 'The activation function that is used is part of the `radial_basis_function` so, I think we should use it inside the layer itself. Do you think that you can a template parameter for the activation function?', 'comment_created': datetime.datetime(2020, 5, 18, 9, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 428076894, 'comment_body': 'why do we need regulariser?', 'comment_created': datetime.datetime(2020, 5, 20, 14, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 428077352, 'comment_body': 'Can you add reference to a paper here?', 'comment_created': datetime.datetime(2020, 5, 20, 14, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 428085638, 'comment_body': 'I will remove it in next commit added because of previous implementation.', 'comment_created': datetime.datetime(2020, 5, 20, 15, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 428134836, 'comment_body': 'Can you remove the sigma parameter for now?\r\nI am referencing this [paper](http://proceedings.mlr.press/v51/que16.pdf). They do not use this parameter. ', 'comment_created': datetime.datetime(2020, 5, 20, 16, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 428136109, 'comment_body': 'Can you add a template parameter for the activation function? That is a part of the radial basis function. ', 'comment_created': datetime.datetime(2020, 5, 20, 16, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 428852378, 'comment_body': 'RBF is hard to train, let see if this just needs a couple more iterations to train, what about using 20 instead of 10?', 'comment_created': datetime.datetime(2020, 5, 21, 19, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 428858212, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2020, 5, 21, 19, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 428860180, 'comment_body': ""I think 20 iteration was also helpful let's see now. What will happen now thanks for helping @zoq ."", 'comment_created': datetime.datetime(2020, 5, 21, 19, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 429535278, 'comment_body': 'can you add a template parameter like this in the rbfn layer?', 'comment_created': datetime.datetime(2020, 5, 23, 10, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 429580097, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 5, 23, 21, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 429600021, 'comment_body': ""Can you implement it how it is implemented in the BaseLayer ? I don't think we need to pass it through the constructor."", 'comment_created': datetime.datetime(2020, 5, 24, 5, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 431603498, 'comment_body': 'Do we need to create an instance here? can we do it how it is implemented in base layer?', 'comment_created': datetime.datetime(2020, 5, 28, 6, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 431603817, 'comment_body': '`ActivationFunction::Fn(distances, output)`', 'comment_created': datetime.datetime(2020, 5, 28, 6, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 431615094, 'comment_body': 'why do we need the backward function?', 'comment_created': datetime.datetime(2020, 5, 28, 6, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 431617465, 'comment_body': ""Yeah, we don't need this. I will remove it."", 'comment_created': datetime.datetime(2020, 5, 28, 6, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 431624512, 'comment_body': ""I don't think we need the LogSoftMax layer if we will use the `MeanSquaredError`"", 'comment_created': datetime.datetime(2020, 5, 28, 7, 7, 12, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 431625379, 'comment_body': 'hmm, I think we should avoid using `TestNetwork` and write our own implementation to compute accuracy because we will use `MeanSquaredError`', 'comment_created': datetime.datetime(2020, 5, 28, 7, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 432508346, 'comment_body': 'I think we need to compute the classification error (100 - accuracy) rather than `MeanSquaredError`.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 432510744, 'comment_body': 'Can you remove this function signature as well?', 'comment_created': datetime.datetime(2020, 5, 29, 14, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 432545644, 'comment_body': 'When I am removing Backward function it is causing an error. I think because of layer api.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 432547494, 'comment_body': 'Hey @saksham189 Is it the right way of calculating classification error. It is returning pretty bad values.', 'comment_created': datetime.datetime(2020, 5, 29, 15, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 435283701, 'comment_body': 'what are the values of labels for the predicted class and the other class?', 'comment_created': datetime.datetime(2020, 6, 4, 14, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 435285262, 'comment_body': 'The values of labels should be 1 for target class and 0 for all the other classes. ', 'comment_created': datetime.datetime(2020, 6, 4, 14, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 435289351, 'comment_body': 'yes looks correct to me.', 'comment_created': datetime.datetime(2020, 6, 4, 14, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 435291482, 'comment_body': 'Yes inside labels1 I am using 1 for Target class 0 for all other class. Same as you suggested.', 'comment_created': datetime.datetime(2020, 6, 4, 14, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 435296278, 'comment_body': 'Hey could you provide the link to the paper /implementation you are referring to for calculating these sigma values?', 'comment_created': datetime.datetime(2020, 6, 4, 14, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 435305582, 'comment_body': 'https://link.springer.com/chapter/10.1007/978-3-319-19620-6_27 . This might help\r\n', 'comment_created': datetime.datetime(2020, 6, 4, 14, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 435307041, 'comment_body': ""Actually, RBFN is a pretty versatile technique that's why too many experiments have done on this."", 'comment_created': datetime.datetime(2020, 6, 4, 14, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 435314038, 'comment_body': 'alright thanks for the clarification', 'comment_created': datetime.datetime(2020, 6, 4, 14, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 437121037, 'comment_body': 'x - > y', 'comment_created': datetime.datetime(2020, 6, 9, 3, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 437121688, 'comment_body': 'Could you just take the max here and avoid using the dis matrix?', 'comment_created': datetime.datetime(2020, 6, 9, 3, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 437121922, 'comment_body': 'sigmas should be size_t I think if it is just an integer. ', 'comment_created': datetime.datetime(2020, 6, 9, 3, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 437122159, 'comment_body': 'Can you lower the bound for the error to 0.1 since we were able to achieve 0.03?', 'comment_created': datetime.datetime(2020, 6, 9, 3, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 438270767, 'comment_body': 'In some builds it is showing error up-to 0.12 . So I set this to 0.15', 'comment_created': datetime.datetime(2020, 6, 10, 16, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 438308122, 'comment_body': 'I tried it with this code \r\n```\r\n  sigmas = 1;\r\n  if (betas == 0)\r\n  {\r\n    double max = 0;\r\n    for (size_t i = 0; i < centres.n_cols; i++)\r\n    {\r\n      arma::mat temp = centres.each_col() - centres.col(i);\r\n      max = arma::accu(arma::max(arma::pow(arma::sum(\r\n                              arma::pow((temp),\r\n                              2), 0), 0.5).t()));\r\n     if (max > sigmas)\r\n        {\r\n          sigmas = max;\r\n        } \r\n    }\r\n    this->betas = sigmas / std::pow(2 * outSize, 0.5);\r\n  }\r\n```\r\nBut it was not working. Have you any better idea for this??', 'comment_created': datetime.datetime(2020, 6, 10, 17, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 438574796, 'comment_body': 'can you do `sigmas += arma::max(... )`\r\nand avoid using the dis matrix. ', 'comment_created': datetime.datetime(2020, 6, 11, 6, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 438576115, 'comment_body': 'avoid having a variable name as `max` because it is also a function. ', 'comment_created': datetime.datetime(2020, 6, 11, 6, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 438576833, 'comment_body': 'can you try testing with random seed and report the results on the PR?\r\nhttps://github.com/mlpack/mlpack/wiki/Testing-Guidelines#tests-with-random-input', 'comment_created': datetime.datetime(2020, 6, 11, 6, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 438577437, 'comment_body': 'as far as I can understand you take the maximum in each column and add it to sigmas. Is that correct?', 'comment_created': datetime.datetime(2020, 6, 11, 6, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 438919147, 'comment_body': 'you should be able to run the tests locally.', 'comment_created': datetime.datetime(2020, 6, 11, 16, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 438938096, 'comment_body': 'Previously it was passing locally but when I updated the PR some online builds failed. Sorry for late reply.', 'comment_created': datetime.datetime(2020, 6, 11, 17, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 439097547, 'comment_body': 'It should be the maximum distance between two centres I changed the implementation respectively.\r\nAlso in a test, I am using the method of multiplying by constant to get a low error we can set beta values in two ways using this implementation.', 'comment_created': datetime.datetime(2020, 6, 11, 22, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 439230925, 'comment_body': 'Hey can you run the test locally with random seed and see the classification error it reports and then adjust the beta and number of centres accordingly to achieve the lowest error?', 'comment_created': datetime.datetime(2020, 6, 12, 6, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 439233667, 'comment_body': 'can you initialise betas and sigmas to 0 here. I think that should fix the static code analysis check.', 'comment_created': datetime.datetime(2020, 6, 12, 6, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 439644136, 'comment_body': 'I have tested with random seed locally.\r\nWhen without setting beta parameter\r\n```\r\nclassificationError = 0.174   for centroids = 10\r\nclassificationError = 0.13   for centroids = 20\r\nclassificationError = 0.092   for centroids = 30\r\nclassificationError = 0.092   for centroids = 40\r\nclassificationError = 0.092   for centroids = 50\r\nclassificationError = 0.078   for centroids = 60\r\nclassificationError = 0.068   for centroids = 70\r\nclassificationError = 0.088   for centroids = 80\r\nclassificationError = 0.072   for centroids = 90\r\nclassificationError = 0.07   for centroids = 100\r\nclassificationError = 0.074   for centroids = 110\r\nclassificationError = 0.09   for centroids = 120\r\nclassificationError = 0.084   for centroids = 130\r\nclassificationError = 0.06   for centroids = 140\r\nclassificationError = 0.094   for centroids = 150\r\n```\r\nWhen setting `betas=4.1`\r\n```\r\nclassificationError = 0.192   for centroids = 10\r\nclassificationError = 0.124   for centroids = 20\r\nclassificationError = 0.07   for centroids = 30\r\nclassificationError = 0.082   for centroids = 40\r\nclassificationError = 0.032   for centroids = 50\r\nclassificationError = 0.068   for centroids = 60\r\nclassificationError = 0.038   for centroids = 70\r\nclassificationError = 0.042   for centroids = 80\r\nclassificationError = 0.046   for centroids = 90\r\nclassificationError = 0.02   for centroids = 100\r\nclassificationError = 0.03   for centroids = 110\r\nclassificationError = 0.026   for centroids = 120\r\nclassificationError = 0.032   for centroids = 130\r\nclassificationError = 0.02   for centroids = 140\r\nclassificationError = 0.026   for centroids = 150\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 21, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 439836920, 'comment_body': '`GaussianFunction`', 'comment_created': datetime.datetime(2020, 6, 14, 14, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 439837038, 'comment_body': 'can you remove this? I think this should only for testing locally. ', 'comment_created': datetime.datetime(2020, 6, 14, 14, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 439987504, 'comment_body': ""```suggestion\r\n * @f{eqnarray*}{\r\n * f(x) &=& e^{-1 * x^2} \\\\\r\n * f'(x) &=& 2 * -x * f(x) \r\n * @f}\r\n```"", 'comment_created': datetime.datetime(2020, 6, 15, 7, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}]","[{'commit_sha': 'bf03b356a7dd64517e8953ddd75cd725d04a1dd8', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58dd54d8abb304aa73bf47cd2c49e82281f16a69', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd2dec8d2c720cc04d903f05b3636783f96e9c2', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3963fbffbeb2951d5ed94e300c8d9549580d7f8', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '923e025a86a0bb2aa13d57c64e798dc87cedf26a', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484d357ee9a89f8047144e5b346a2e19d96bfb9c', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3716f61f62021447193822ce00ac561c20b423a3', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb39a4e443e903247d0f463c2fab6a1509486a8e', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fa26b7a5f10620c0acb66d14cd1437fa92ad454', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a274533e930451432958b501e006ea6ea38ec494', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2354b0f754411a3ac031ba3c170dc85959726c87', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e85f0951e1e186cbf712ffb27b86cdc56058c65', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '179cee24701c32816f598b9fffbd9570315c5c47', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '184d3964592cc5bd1473a8b7de46ae4365757f45', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6499e0b12ab652a2ba8c5a8eb98a2a0b9ebabf8', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '968d38d3323bf05ed7b2ad3c2f57dee8af0a562a', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '267ff5f7c5e91615a698dc5c7ef1382c0fe569a6', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c7bd78b3120c043d6cf1b8a2360c2ae3fc6108', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2fe94759969af376d7c63cb1e79d5f71fc84ce2', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48f68b9d192f02aae7ca0dd87a41847e67287573', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '641fb2c0745ba28a8ca8fac3d87906b802f12095', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '462adbf9e07b84d987cc1e1b113b50f5208ce4bf', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c93c0aa8f39c8a65bb5a382f1ce2aa4e78a5b7f3', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}]",Himanshu Pathak,37804981,,User,,44,,15,8
422330047,Adding some activation functions for RBFN,"Related to  #2261 
I am trying to add some non-linear activation functions for rbf network in this PR.",True,2424,https://api.github.com/repos/mlpack/mlpack/pulls/2424,https://github.com/mlpack/mlpack/pull/2424,closed,515,0,7,7,2,17,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-05-23 21:35:13+00:00,2020-06-11 21:20:29+00:00,1640716.0,"18 days, 23:45:16","[{'comment_id': 430669020, 'comment_body': 'Do you mean` f(x)^-1 =` ?', 'comment_created': datetime.datetime(2020, 5, 26, 19, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 430669132, 'comment_body': '```suggestion\r\n    return 1  / ( 1 + x * x);\r\n```', 'comment_created': datetime.datetime(2020, 5, 26, 19, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 430669625, 'comment_body': ""Now I'm confused, spline function, I thought this is the inverse quadratic function, maybe I missed something?"", 'comment_created': datetime.datetime(2020, 5, 26, 19, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 430696502, 'comment_body': 'Sorry I just forgot to change docs here.', 'comment_created': datetime.datetime(2020, 5, 26, 20, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 432141355, 'comment_body': 'The Inverse Quadratic function is named as ```InvQuadFunction``` , whereas this is named as ```MultiquadFunction```. \r\nI think we should stick to either ```q``` or ```Q``` for the word quad in the naming of the functions.\r\nPersonally, I like ```Q``` better.', 'comment_created': datetime.datetime(2020, 5, 28, 21, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 432143351, 'comment_body': ""The comments in the other test cases you added don't have the part of the sentence ```using Python interpreter```. Maybe we can skip this part for this test case as well?"", 'comment_created': datetime.datetime(2020, 5, 28, 21, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 432559253, 'comment_body': 'Yeah, I also like `Q`.', 'comment_created': datetime.datetime(2020, 5, 29, 15, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 432886481, 'comment_body': 'The indentation is slightly off.', 'comment_created': datetime.datetime(2020, 5, 30, 20, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432886490, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2020, 5, 30, 20, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432886533, 'comment_body': ""```suggestion\r\n * f'(x) = 2 * x * log(1 + x) + x^2 / (1 + x)\\\\\r\n```"", 'comment_created': datetime.datetime(2020, 5, 30, 20, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432886604, 'comment_body': 'Not sure should we call this `QuadraticFunction`?', 'comment_created': datetime.datetime(2020, 5, 30, 20, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432886675, 'comment_body': 'Is there a second Poisson function?', 'comment_created': datetime.datetime(2020, 5, 30, 20, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 432972181, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 31, 18, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 432972238, 'comment_body': 'Yes, there is Poisson 2 function also', 'comment_created': datetime.datetime(2020, 5, 31, 18, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 436168796, 'comment_body': 'Ahh, okay, thanks for the clarification.', 'comment_created': datetime.datetime(2020, 6, 5, 21, 18, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 436169287, 'comment_body': ""I'm not sure doxygen can render that in a latex environment, so maybe we should use `\\sqrt` here."", 'comment_created': datetime.datetime(2020, 6, 5, 21, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 436283937, 'comment_body': 'Thanks for reviewing.', 'comment_created': datetime.datetime(2020, 6, 6, 17, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}]","[{'commit_sha': 'e93601faca72a7dc2d36f8995dfd4760e56375dc', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c4913c47a21e12bf3ff3682b72d05bd8ac80281', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bfd44cce40e91999d0fde21041af3a36d4f6c95', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69184d14636b96ec976da9f8ffd26483e3bb39f1', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd73943199232ced56e12661001b579ee2cba771', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf089b39af0d94d5c9e969d4efa68617905889da', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c3b741526595a09536248132dac6aacce12b15', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}]",Himanshu Pathak,37804981,,User,,44,,15,8
434218173,Adding Gaussian Kernel SVM implementation,"I am adding kernel SVM implementation. There is some task needed to complete this implementation.
* [ ]  Add Documentation for Kernel_SVM
* [ ]  Add Implementation of KernelSVM
* [ ]  Add julia python and cli bindings for kernel_svm (Handling in #2550)",False,2456,https://api.github.com/repos/mlpack/mlpack/pulls/2456,https://github.com/mlpack/mlpack/pull/2456,closed,988,0,8,75,49,122,4,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-06-14 23:28:24+00:00,2020-11-10 21:24:28+00:00,12866164.0,"148 days, 21:56:04","[{'comment_id': 443815406, 'comment_body': ""I case you are wondering why this doesn't build, this is missing a kernelType."", 'comment_created': datetime.datetime(2020, 6, 22, 20, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 443827647, 'comment_body': ""Yup, changed it also I haven't added CMake file. Now, all builds will fail because of my rough implementation :smile: "", 'comment_created': datetime.datetime(2020, 6, 22, 21, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 444718037, 'comment_body': 'I think we can work on the cli implementation later once the core implementation is complete. ', 'comment_created': datetime.datetime(2020, 6, 24, 8, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 447256614, 'comment_body': 'Can we use `const KernelType& kernel = KernelType()` here instead? That way we can reuse the existing kernel implementation, I think @rcurtin suggested this at some point.', 'comment_created': datetime.datetime(2020, 6, 29, 21, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 447257786, 'comment_body': ""If we use `KernelType` see comment above, we can probably replace the lines with `kernel.Evaluate(data)`, and don't have to test the kernel code again."", 'comment_created': datetime.datetime(2020, 6, 29, 21, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 447260671, 'comment_body': 'Accuracy 0 seems strange, did you print the actual predictions, are they Inf? Also might be a good strategy to plot the data as well to see if this is the right kernel.', 'comment_created': datetime.datetime(2020, 6, 29, 21, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 447264878, 'comment_body': '@zoq I tried to print `score` I am getting the desired result here.', 'comment_created': datetime.datetime(2020, 6, 29, 21, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 447266008, 'comment_body': 'But when I print `scores` here it turns out to be zero for all.\r\nIs it because of \r\n```\r\n  if (kernelFunction == ""linear"")\r\n  {\r\n    scores = data.t() * w.t() + b;\r\n    scores = scores.t();\r\n  }\r\n```\r\nOr not I don\'t know.', 'comment_created': datetime.datetime(2020, 6, 29, 21, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 447267082, 'comment_body': 'Yup, will change it once I got my code working.', 'comment_created': datetime.datetime(2020, 6, 29, 21, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 448291322, 'comment_body': 'Hey, can you make these changes first.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 448292778, 'comment_body': 'Can you print `b` and `w` here?', 'comment_created': datetime.datetime(2020, 7, 1, 11, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 448488945, 'comment_body': 'Added all changes and printed the value of `b` and `w` . So, `b = nan` and and `w` is very small value I think there is something wrong in the implementation and sorry for delay.', 'comment_created': datetime.datetime(2020, 7, 1, 16, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 449123137, 'comment_body': 'Hey @saksham189 , @zoq I checked some implementation everywhere other label is used as `-1`. So, I tried it locally I got the satisfactory result. So, if I get all the builds green with this method I will move forward with this implementation also it is only specific when using `LinearKernel` with `smo` :grin: not for other kernel.', 'comment_created': datetime.datetime(2020, 7, 2, 16, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 449792806, 'comment_body': 'Can you add this in a separate PR so that it is easy to review? I think we would also have to add the tests for these. ', 'comment_created': datetime.datetime(2020, 7, 4, 17, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 451019662, 'comment_body': ""Hey @saksham189  Can you help me understand. How can I calculate scores when using any kernel? I think we should do `kenel.Evaluate(x, y)` before multiplying with `parameters` but can't able to decide what should be the of value `y`. I tried multiple ways but didn't got better results."", 'comment_created': datetime.datetime(2020, 7, 7, 17, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 451584848, 'comment_body': 'can you provide me a link to the implementation that you are referring? ', 'comment_created': datetime.datetime(2020, 7, 8, 14, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 451659937, 'comment_body': '@saksham189  You can see this implementation https://github.com/kenextra/SVMAlgorithm/blob/master/SVM.py pretty much similar to our implementation :grin: ', 'comment_created': datetime.datetime(2020, 7, 8, 16, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 451773379, 'comment_body': 'Hey @rcurtin memory builds are failing because of this implementation. `x.col(i)` is pointing to `data.col(i)`. When execution of train function is complete then `data` is deleted from memory and `x.col(i)` is still pointing to `data.col(i)`. Can you suggest any better way to initialize this? ', 'comment_created': datetime.datetime(2020, 7, 8, 19, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 452145904, 'comment_body': 'can you use a more descriptive name than `x` ? \r\nalso you can create a copy of the data and try to use that instead?', 'comment_created': datetime.datetime(2020, 7, 9, 11, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 452147404, 'comment_body': 'so can you follow the implementation to create the scores in a way similar to the implementation above?', 'comment_created': datetime.datetime(2020, 7, 9, 11, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 452150818, 'comment_body': 'can you add a link to a paper here? ', 'comment_created': datetime.datetime(2020, 7, 9, 11, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 452151939, 'comment_body': 'can you explain why this is required. Do you think the user should be providing the labels as 0 1 or -1 1 ? ', 'comment_created': datetime.datetime(2020, 7, 9, 11, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 452152165, 'comment_body': 'can we use a more descriptive name for this?', 'comment_created': datetime.datetime(2020, 7, 9, 11, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 452152262, 'comment_body': 'Is there a more descriptive name for this?', 'comment_created': datetime.datetime(2020, 7, 9, 11, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 452152339, 'comment_body': 'Is there a more descriptive name for this?', 'comment_created': datetime.datetime(2020, 7, 9, 11, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 452152443, 'comment_body': 'can we have a more descriptive name for this?', 'comment_created': datetime.datetime(2020, 7, 9, 11, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 452152843, 'comment_body': 'can you explain what these values are for? can you leave more comments to explain the purpose of these?', 'comment_created': datetime.datetime(2020, 7, 9, 11, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 452185296, 'comment_body': ""Yup, already did that's why builds are passing now :+1: "", 'comment_created': datetime.datetime(2020, 7, 9, 12, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 452186001, 'comment_body': 'Sure will ad a description also will try to make copy but it will decrease the efficiency', 'comment_created': datetime.datetime(2020, 7, 9, 12, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 453916241, 'comment_body': ""Hey @saksham189 I tried to find the problem in my code but the isn't in my code. We are getting this error because it was not able to delete `dataset`. I also tried to run `KernelPCATest` with valgrind and got same error because we are using same dataset in `KernelPCATest`. Do you have any suggestion over this? I think we need to skip this error."", 'comment_created': datetime.datetime(2020, 7, 13, 20, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 454150269, 'comment_body': 'We cannot move ahead until memory checks pass. I think it is failing because you are illegally freeing memory. Can you try to find out where this is happening?\r\nAlso we seem to be having a lot of memory leaks that should ideally not be happening. \r\nTake a look here for more details:\r\nhttp://ci.mlpack.org/job/pull-requests%20mlpack%20memory/5719/valgrindResult/pid=2288559/', 'comment_created': datetime.datetime(2020, 7, 14, 7, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 454329899, 'comment_body': 'Hmm, pretty strange these errors were not there in previous builds.', 'comment_created': datetime.datetime(2020, 7, 14, 12, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 454608825, 'comment_body': ""There is definitely some strange happing here, I had to kill the memory job after 5 hours because it was using all cores.\r\n\r\nIt's currently running `/usr/bin/valgrind.bin --tool=memcheck --leak-check=full --track-origins=yes --num-callers=40 --error-exitcode=1 --xml=yes --xml-file=../reports/tests/KernelSVMTest_GaussianKernelSVMMnistDataset.valgrind.xml --log-file=../reports/tests/KernelSVMTest_Gaus`.\r\n\r\nLet me know if you need another hand to debug this."", 'comment_created': datetime.datetime(2020, 7, 14, 19, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 454615380, 'comment_body': '@zoq Yeah, Memory builds are talking too much time we have to look into that. Right now waiting for this to finish I have added some changes may be that solves the error.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456008230, 'comment_body': 'Probably we should use `0` and `1` here---the rest of mlpack generally uses `arma::Row<size_t>` to specify labels. :+1:', 'comment_created': datetime.datetime(2020, 7, 16, 19, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 456015170, 'comment_body': 'Will change it in next commit. :+1: ', 'comment_created': datetime.datetime(2020, 7, 16, 19, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456778705, 'comment_body': 'can you just do `saved_data = data` ', 'comment_created': datetime.datetime(2020, 7, 18, 11, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456778722, 'comment_body': '`prediction`', 'comment_created': datetime.datetime(2020, 7, 18, 11, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456778875, 'comment_body': 'can we rename this to `trainingData`? Also use camelCase for all variable names', 'comment_created': datetime.datetime(2020, 7, 18, 11, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456778904, 'comment_body': '@himanshupathak21061998 can you please address this?', 'comment_created': datetime.datetime(2020, 7, 18, 11, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456779129, 'comment_body': 'Can you complete this citation? Also is this a research paper?', 'comment_created': datetime.datetime(2020, 7, 18, 11, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456793020, 'comment_body': 'Sure will change it in next commit.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 18, 14, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456793126, 'comment_body': '> can you just do `saved_data = data`\r\n\r\nI tried that but memory builds were failing\r\n\r\n\r\n> can we rename this to `trainingData`? Also use camelCase for all variable names\r\n\r\nSure will do it in the next commit.', 'comment_created': datetime.datetime(2020, 7, 18, 14, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456798887, 'comment_body': 'In my previous commits builds are failing because of this variable. ', 'comment_created': datetime.datetime(2020, 7, 18, 15, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456799131, 'comment_body': 'I am using this loop to set values of `saved_labels` but in other cases I am directly trying to copy local variable `label`. I am trying to make use of less variables.', 'comment_created': datetime.datetime(2020, 7, 18, 15, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456801942, 'comment_body': 'So what change did you make so, that builds no longer fail? What was it previously and what is it now?', 'comment_created': datetime.datetime(2020, 7, 18, 15, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456802291, 'comment_body': 'Do you have a commit that shows the changes that were made?', 'comment_created': datetime.datetime(2020, 7, 18, 15, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456803166, 'comment_body': 'Yup I have saved them locally. \r\nI just removed the loop and did\r\n`saved_labels = labels` which causing failure', 'comment_created': datetime.datetime(2020, 7, 18, 16, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456803371, 'comment_body': ""I don't think that is the problem. "", 'comment_created': datetime.datetime(2020, 7, 18, 16, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456815534, 'comment_body': 'Could you rename this to `trainLabels`? Seems difficult to distinguish between `labels` and `label`', 'comment_created': datetime.datetime(2020, 7, 18, 18, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456821621, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 18, 19, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456881390, 'comment_body': 'can you remove `arma::mat` from here? ', 'comment_created': datetime.datetime(2020, 7, 19, 8, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456881960, 'comment_body': 'Is this loop required? Otherwise can you remove it?', 'comment_created': datetime.datetime(2020, 7, 19, 8, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456882034, 'comment_body': 'Also can you add the change in a separate commit (rather than force pushing) so, that I can see exactly what causes the build failure? ', 'comment_created': datetime.datetime(2020, 7, 19, 8, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456882465, 'comment_body': ""\r\n> can you remove `arma::mat` from here?\r\n\r\nI have changed only this.\r\n\r\n\r\n> Also can you add the change in a separate commit (rather than force pushing) so, that I can see exactly what causes the build failure?\r\n\r\nSure I just don't want extra commits I will take care of it next time :)"", 'comment_created': datetime.datetime(2020, 7, 19, 9, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456883181, 'comment_body': ""> Sure I just don't want extra commits I will take care of it next time :)\r\n\r\nYou could try to squash the previous commits using interactive rebase and clear the commit history. \r\nForce pushing makes it hard to see the changes. "", 'comment_created': datetime.datetime(2020, 7, 19, 9, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456912588, 'comment_body': 'could you add a comment for this as well?', 'comment_created': datetime.datetime(2020, 7, 19, 14, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456912735, 'comment_body': 'We could use `fitIntercept` with linear kernel as well right?', 'comment_created': datetime.datetime(2020, 7, 19, 14, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456913029, 'comment_body': 'use `size_t` instead of int.\r\nCould you please make this change everywhere else as well?', 'comment_created': datetime.datetime(2020, 7, 19, 14, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456913734, 'comment_body': '```suggestion\r\n            const KernelType kernel = KernelType());\r\n```', 'comment_created': datetime.datetime(2020, 7, 19, 14, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456913770, 'comment_body': '```suggestion\r\n            const KernelType kernel = KernelType());\r\n```', 'comment_created': datetime.datetime(2020, 7, 19, 14, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456919618, 'comment_body': 'Just replaced `fitintercept` with `fitKernel` actually I am using it for different purpose.', 'comment_created': datetime.datetime(2020, 7, 19, 15, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 456919743, 'comment_body': ""I don't think we should be using this. The user should specify only the kernel.\r\nAlso do we not need the `fitIntercept` boolean value. "", 'comment_created': datetime.datetime(2020, 7, 19, 15, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 456919825, 'comment_body': 'We do use `fitIntercept` with the `linearSVM` so IMO we should have it with the kernel_svm. Let me know what  you think. ', 'comment_created': datetime.datetime(2020, 7, 19, 15, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 457158070, 'comment_body': 'can we use camelcase names please?', 'comment_created': datetime.datetime(2020, 7, 20, 8, 9, 29, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 457300467, 'comment_body': '```suggestion\r\n        while (j == i)\r\n```\r\nI think what you previously had before was fine. Also you could add assertions like\r\n`assert(j < data.n_cols && j >= 0)` everywhere to check the range of the indices. If it is outside the range then the assertion would fail and throw an error. This would make it easier to debug. ', 'comment_created': datetime.datetime(2020, 7, 20, 11, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 457890293, 'comment_body': ""can you remove this fitKernel option? I don't think it should be necessary for the user to specify this."", 'comment_created': datetime.datetime(2020, 7, 21, 7, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 457890505, 'comment_body': 'Also can we add an option for `fitIntercept` similar to the one we have in `linearSVM`', 'comment_created': datetime.datetime(2020, 7, 21, 7, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 457890866, 'comment_body': '@himanshupathak21061998 can you make this change?', 'comment_created': datetime.datetime(2020, 7, 21, 7, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 457891783, 'comment_body': ""I don't think it makes a lot of sense for the user to specify an option such as `fitKernel`. Can you just remove that option and have `fitIntercept` instead?\r\nThe linear kernel should work similar to any other kernel."", 'comment_created': datetime.datetime(2020, 7, 21, 7, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 457891992, 'comment_body': '@himanshupathak21061998 can you make this change?', 'comment_created': datetime.datetime(2020, 7, 21, 7, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 457894195, 'comment_body': '@himanshupathak21061998 can you make this change first? Also run the tests locally once ', 'comment_created': datetime.datetime(2020, 7, 21, 7, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458031539, 'comment_body': 'Hey @saksham189 I have changed everything as suggested but when using `fitkernel` I was able to use this code.\r\n```\r\n    // Giving predictions for linear kernel.\r\n    scores = (data.t() * parameters.t() + intercept).t();\r\n```\r\nSo, when giving prediction with `linearkernel` It was faster.\r\nNow I am using\r\n```\r\n    scores = arma::zeros(1, data.n_cols);\r\n    for (size_t i = 0; i < data.n_cols; i++)\r\n    {\r\n      double  prediction = 0;\r\n      for (size_t j = 0; j < trainingData.n_cols; j++)\r\n      {\r\n        if (savedLabels(j) == 0)\r\n          continue;\r\n        prediction = prediction + alpha(j) *\r\n                     savedLabels(j) * kernel.Evaluate(data.col(i),\r\n                     trainingData.col(j));\r\n      }\r\n      scores(i) = prediction + intercept;\r\n    }\r\n```\r\nFor Every kernel and doing extra processing in case of linear kernel which not that much efficient . What do you suggest? ', 'comment_created': datetime.datetime(2020, 7, 21, 11, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 458234715, 'comment_body': '@himanshupathak21061998 can you remove this loop as well?', 'comment_created': datetime.datetime(2020, 7, 21, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458236352, 'comment_body': ""I think it's fine. "", 'comment_created': datetime.datetime(2020, 7, 21, 16, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458236936, 'comment_body': '@himanshupathak21061998 can you remove this loop?', 'comment_created': datetime.datetime(2020, 7, 21, 16, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458238456, 'comment_body': 'are these labels or coefficients?', 'comment_created': datetime.datetime(2020, 7, 21, 16, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458239313, 'comment_body': '`function`', 'comment_created': datetime.datetime(2020, 7, 21, 16, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458241062, 'comment_body': 'can you use camel case names please?', 'comment_created': datetime.datetime(2020, 7, 21, 16, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458245599, 'comment_body': 'can you change `alpha` to rowvec as well so, that we can avoid transposing it everywhere?', 'comment_created': datetime.datetime(2020, 7, 21, 16, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458246527, 'comment_body': '`changedAlphas++`', 'comment_created': datetime.datetime(2020, 7, 21, 16, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458246585, 'comment_body': '`count++`', 'comment_created': datetime.datetime(2020, 7, 21, 16, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458247749, 'comment_body': 'remove `arma::mat` from here as well', 'comment_created': datetime.datetime(2020, 7, 21, 16, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458266564, 'comment_body': '`Labels` is more suitable because using as label for every training sample.', 'comment_created': datetime.datetime(2020, 7, 21, 17, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 458267250, 'comment_body': ""Sorry about this one just copy pasted the previous code that's why it was still there"", 'comment_created': datetime.datetime(2020, 7, 21, 17, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 458274737, 'comment_body': 'no but how is it a label? -1 is not a label for a given data point ?', 'comment_created': datetime.datetime(2020, 7, 21, 17, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458275199, 'comment_body': 'and then what is 0 and 1 labels that we receive from the user?', 'comment_created': datetime.datetime(2020, 7, 21, 17, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458281928, 'comment_body': 'Ok, I will change it your point is more valid.', 'comment_created': datetime.datetime(2020, 7, 21, 17, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 458847877, 'comment_body': 'can you try to see the shape sizes of all these once and see if they match.\r\nAlso do we need to use `arma::as_scalar` here after taking the sum?', 'comment_created': datetime.datetime(2020, 7, 22, 14, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 458877804, 'comment_body': '@saksham189 Actually problem is not with this code because error occurs when the execution of all code present inside `train()` is finished.', 'comment_created': datetime.datetime(2020, 7, 22, 15, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 458983370, 'comment_body': 'Not sure why we have to transform the data here, but you can do this without a for loop: `trainCoefficients = labels * 2 - 1;`', 'comment_created': datetime.datetime(2020, 7, 22, 18, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 458985984, 'comment_body': 'Can you elaborate on the error you are referring to?', 'comment_created': datetime.datetime(2020, 7, 22, 18, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 458990097, 'comment_body': 'I added `std::cout` statement everywhere. So if you look at the builds here http://ci.mlpack.org/job/pull-requests%20mlpack%20memory/5870/console every statement inside the `train()` function is executed but as soon as the execution of `train()` complete we are getting a memory error.', 'comment_created': datetime.datetime(2020, 7, 22, 18, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 458991818, 'comment_body': 'Previously I tried it but I was getting a memory error but I should try this again.', 'comment_created': datetime.datetime(2020, 7, 22, 18, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 459070792, 'comment_body': 'That is convenient, can you comment out each test except `ConcentricCircleDataset`?', 'comment_created': datetime.datetime(2020, 7, 22, 20, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459075634, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 22, 20, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 459231874, 'comment_body': 'Can you check why the tests are failing?', 'comment_created': datetime.datetime(2020, 7, 23, 6, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 459371789, 'comment_body': ""Hm, at least we don't see a memory issue for this one, but maybe that's because the test failed?"", 'comment_created': datetime.datetime(2020, 7, 23, 11, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459465206, 'comment_body': ""By mistake I added a wrong `if` statement that's why it's failing now everything is fine with this 😄 "", 'comment_created': datetime.datetime(2020, 7, 23, 13, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 459520779, 'comment_body': ""I think the memory build is now fixed? and it's not showing any errors now?"", 'comment_created': datetime.datetime(2020, 7, 23, 15, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 459525226, 'comment_body': 'Yes I have solved the issue with memory builds', 'comment_created': datetime.datetime(2020, 7, 23, 15, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 459589585, 'comment_body': 'This is great!', 'comment_created': datetime.datetime(2020, 7, 23, 16, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459590352, 'comment_body': '```suggestion\r\n    KernelSVM<arma::mat, kernel::GaussianKernel> svm(\r\n        dataset, labels, 1.0, true, 10);\r\n```\r\n\r\nI think this should still fit?', 'comment_created': datetime.datetime(2020, 7, 23, 16, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459590579, 'comment_body': '```suggestion\r\n```\r\n\r\nRemove the extra line here.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459591553, 'comment_body': 'You could also use `arma::Row<size_t> labels = arma::zeros<arma::Row<size_t>(dataset.n_cols);` here since you set the other half later anyway.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459592434, 'comment_body': 'If the code passes the style check below, we should do the same for this block as well.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459592876, 'comment_body': 'You could use `arma::Row<size_t> labels = arma::zeros<arma::Row<size_t>(dataset.n_cols);` here and remove the for loop.', 'comment_created': datetime.datetime(2020, 7, 23, 16, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 459611525, 'comment_body': 'What was the issue @himanshupathak21061998 ?', 'comment_created': datetime.datetime(2020, 7, 23, 17, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 459622230, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 17, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 459622741, 'comment_body': 'Thanks for reviewing @zoq ', 'comment_created': datetime.datetime(2020, 7, 23, 17, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 459624278, 'comment_body': 'There were multiple problems with one was `trainCoefficient`(using the wrong way for loop to set values) and also a very dumb mistake of not returning any value in `train()`', 'comment_created': datetime.datetime(2020, 7, 23, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 459767194, 'comment_body': 'Awesome work @himanshupathak21061998, glad you got it figured out! :100:', 'comment_created': datetime.datetime(2020, 7, 23, 22, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 460234373, 'comment_body': 'May be You can quickly migrate the test from boost to catch in this pr itself in order to resolve #2523 , that would be one less test to migrate :) . Feel free to ignore if that is hectic for you. \r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 24, 19, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jeffin143', 'type': 'User'}, {'comment_id': 460235021, 'comment_body': 'Sure. :)', 'comment_created': datetime.datetime(2020, 7, 24, 19, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 463626833, 'comment_body': 'I am using `std::vector`  to store multiple binary classifiers', 'comment_created': datetime.datetime(2020, 7, 31, 13, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 463628454, 'comment_body': 'I am using `const arma::rowvec& labels` here but in `kernel_svm.hpp` I am using `arma::Row<size_t>` user will not directly access this function so I did it let me know if you want to change this.', 'comment_created': datetime.datetime(2020, 7, 31, 13, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 463629446, 'comment_body': 'While implementing this function I am using multiple `for`. If you have any better suggestion please let me know if I can remove them.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 463631605, 'comment_body': 'Here I am using `const arma::Row<size_t>& labels` this function will be directly accessed by user.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 463990553, 'comment_body': ""Fine for me, easy to iterate over the classifier, and I think people use the same kernel anyway, so they don't mix different kernel."", 'comment_created': datetime.datetime(2020, 8, 1, 19, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 463990819, 'comment_body': 'Hm, maybe a good idea to provide an interface for both?', 'comment_created': datetime.datetime(2020, 8, 1, 19, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 463991263, 'comment_body': 'Would it make sense to move the prediction part into the same loop as well?', 'comment_created': datetime.datetime(2020, 8, 1, 19, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 463991763, 'comment_body': 'I have a better idea I will push it in next commit.', 'comment_created': datetime.datetime(2020, 8, 1, 19, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}]","[{'commit_sha': '3b05978907e0dc31139d2ad0d8ce675cb0b8dab0', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3400f69784b96d77523eb58bb2d3094bda58a7', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48184e936b75f8417d725f27c1cb4d576b0cab37', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5625dc969543b487c3f68ad74195c02a7beaf8b3', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59794a7359fab4fa43e1f00f2a7b06f324f748b7', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc5ec1b619c2028df08d988890fcd832d0f2b1a0', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4a0050b51afc8032ece6d369a0c89c81f61fce8', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e01765914b4b6b569c77e49cb75b51eaac9868cc', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56796c5fe99d661c3ce0d15f12e47ed17ba7dceb', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8523478529e747ef1bee3dab0ce6a725c60fa258', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acd3f182a3fecc620ec0d4f5b683700c2aae2346', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9fb131365c6d52e5d4110c080d530caedae9715', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4555e6773aaab30c7121aff43b8cf63e087a2e4a', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa3822d8b88fe316013cbb11252e9030a024d48c', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65648f09fc11f9f49d7293a5bcaaac045093422', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa39edc8ee04c17a018015f8a545e31f5589c44', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66001d0bd7943af97025661497c294dfbc1c590b', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f4dd37c19cfa35e83f65ad8e898a753608439b', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '136df806e345722bc23f4dbd65f1551d30ea453f', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b5baa8ff87028518675b78e915ae8aff26b3762', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1495dfdd60f7d28c4ffacf99a308a06b8d4fe1', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454ed1b15c52edcda0331c3d39e37ece6421f2b3', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b26842ff6c13dca055fe4c650f931b3d286d2b34', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44dd399b5404f2437eec2e0b26351e23138009ed', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17b9028465f6c44df8c53a70d2ca396c99715d8c', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b73cfc67f1d87d9806cf3bc4707118136a238d7', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79802af42cc6ca1180909012f6fc7e3ae3addadc', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35fd66c9aabc55c4bfd88df1b8822888394eda08', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '211ab5fe84a7ff9f3886c0d9e07edcab072ea063', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aae033fc299fb0902ba3111d2f67c0a241c93960', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b408ef95961cb6dcc4df9632018399cd40f9c94', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '995aadf313e2d2b1bc92c126f0f15a0d6fb87e36', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9968fc06e7b4ec78ab3d363807ed5dd56dd6517f', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab8fe0a9cb53a9df2499676369516f36ce135567', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b33f7f033d3da38685ab09a69fb4506d74a218a', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c2b73ab79d335e44b542922636b7bb9bd40e9b5', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e10a64110bf0c252dd016f265bbc77c742fe18a9', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '918a1ad3d7ff23327573a8d193db50764bc3baf6', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10ce886b4655d452ded3cfad664f95e58e5551ee', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37bcefcf17362bb9e8cd0aa9616f0698886bc3c0', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1ef07b194ac9a02c2a5ad046d4343822eb18af6', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09bab5877bd490960bf9d2f632802e3c1ff8220', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79d9697635dd977c6f52f93afd19e22367ca94a9', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c17f20aeef2e50ef01e5dfad4d421fbc9ae1b7a7', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '751e61739b071e0074cc83344656be4e06725709', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04aa69671b89c9323b2c8255d30d4597e5cf4c60', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be4094b7b791b5cf8b7f7b20d40aec091a67f6d5', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f43ce6c2c3f8cc35e71bc7345bf860afe7082b', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '247edeba50b383e8d950513ae176cb64812e5a49', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62a6ea61acdbc57eb09113c3acad8ccd98d23096', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a29fb86a73a9a90bdc5fc295be6503fda663110', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd438470be07ab30789e79c58ae8d7fb78d59b9ad', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39bcc47e2061e44b09d8d6cc92d2e942ccd9c490', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5157a3316653f3fd8acbc311cdc887a7fd5ab3e2', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7a4ab1d0635fb4fa5b5261246fc6042d73dce3', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '294549ace284011cbef72eeeeb9ea4c6a220c7ad', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a64a6277cd849aac43465f04cc5175de277dd4', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10fcafb4e860347ec608b4e26edb3d9daa2521e5', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13434c89589c40e2f736f58a24fadfafdb490544', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bf313bd61c5c50603d84e78b38773375935a7ed', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7673af06a6e2c4e16432eab8daf5b88b21858c4', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f5588c7278bb150c9d85803d31fcca4f69a72b', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee6a1d08e21ba9aecf3912f660be2646e7e28c13', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84067841b4478305935ad9b618b57ec7bc68af99', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '831894de8f797a2fe677839a1b5f1f9b89b3f2bf', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21c2a6207312c052fc6fe96fecf061bcdb4a03c4', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f3c84cecd8d86946f8b50cecace0a97169c91bf', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9cdbf75a7a9715dd0cbe9cef9bec304482af6ab', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da5237400e925627d611ef7085f2026a82865f80', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb492f909f29c3cfec7f71c26a82434d38e0738e', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f6513a846b3202058385a469933ae8d20974376', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fec267dd4cc228e163485165344dd1b7a530e3e7', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4762ad0669c16c8c3f04336e6fdb310f3857c7bd', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '581112146116a92c8692e785d7e02e7269463090', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0633423a63ae46177d57e0ee79d0672ba90d7ae', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}]",Himanshu Pathak,37804981,,User,,44,,15,8
463657625,Implementation for Deep Belief Network.,I have just started my work on the implementation of DBN. I will update this explanation soon.,False,2555,https://api.github.com/repos/mlpack/mlpack/pulls/2555,https://github.com/mlpack/mlpack/pull/2555,closed,590,0,7,21,7,6,4,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-08-05 21:42:18+00:00,2021-10-13 01:37:07+00:00,37425289.0,"433 days, 3:54:49","[{'comment_id': 478276829, 'comment_body': 'could you add a paper reference?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 478284678, 'comment_body': 'Is this supposed to be an index from [0, network.size() - 1] ? ', 'comment_created': datetime.datetime(2020, 8, 27, 9, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 478284785, 'comment_body': ""shouldn't this be >= here?"", 'comment_created': datetime.datetime(2020, 8, 27, 9, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 478508656, 'comment_body': 'Changed', 'comment_created': datetime.datetime(2020, 8, 27, 15, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 478508701, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 27, 15, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}, {'comment_id': 478508771, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 8, 27, 15, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'geekypathak21', 'type': 'User'}]","[{'commit_sha': '0ffd04c5fd5a85b3e5639ca11922177d29438085', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d4aa5a98adc0b006220fa424e95c4eb6a4a17b3', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba812244bffd2471632f881a864fcf9f82687f21', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '058276a60d43776d910e73f67e9a93d384129318', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3cf280649a0dfad10026c787e31233bd8911287', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5644d5f6f646bfddc8a710c3b1017c06dac91061', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '936d65033002054f3903345e21b52492da50edc0', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12578c60436c09e6c08384365c3a921ed0887d4', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc1613086acb34aecd00a3534942f08ba4141f0e', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6183bb71a96bf05b6d0f3d3431039c00843900b4', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '012ebc0c0500023112b3aa395586547120f01d4b', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c4aa50a928068e4eb85b4eaff389d91286f5b94', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '482951d0f6b9792fa5377faa3eb50f84d9c7bf7c', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb3c6c23683c1657c202912d81181dcaa1e4580', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb7aa67cc96aaa05459444c0326f9f24a3f70cb', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0a03a559d0f774cd46877f21500e9faf18ba913', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b03163d62413de35366ee222f6e3d4e6637e3d6a', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d989f15dfc8d9d091732b51b1b69bbc149b8c7b', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f3e1a6ea0abd96f6585d3bc56182e8a9864b7db', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932f925c4fd2ce115239b0d4ab974fbafec5c17e', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'debf680e52178a70f55ff824b0331d6a00b090d6', 'committer_username': 'geekypathak21', 'committer_name': 'Himanshu Pathak', 'committer_email': None, 'commit_date': datetime.datetime(2018, 3, 26, 13, 52, 22, tzinfo=datetime.timezone.utc)}]",Himanshu Pathak,37804981,,User,,44,,15,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1591,4978,183,321,30199,24,11,15,"[{'id': 759131649, 'number': 3073, 'closed': datetime.datetime(2021, 11, 24, 17, 37, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 15, 11, 34, 5, tzinfo=datetime.timezone.utc), 'time_taken': 3477794.0, 'time_delta': '40 days, 6:03:14', 'additions': 674, 'deletions': 0, 'state': 'closed'}, {'id': 748354059, 'number': 3067, 'closed': datetime.datetime(2021, 10, 5, 3, 35, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 3, 16, 15, 33, tzinfo=datetime.timezone.utc), 'time_taken': 127226.0, 'time_delta': '1 day, 11:20:26', 'additions': 307, 'deletions': 0, 'state': 'closed'}, {'id': 497115253, 'number': 2651, 'closed': datetime.datetime(2020, 11, 12, 3, 24, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 2, 20, 15, 55, tzinfo=datetime.timezone.utc), 'time_taken': 3481714.0, 'time_delta': '40 days, 7:08:34', 'additions': 42, 'deletions': 0, 'state': 'closed'}, {'id': 473376899, 'number': 2583, 'closed': datetime.datetime(2020, 9, 19, 22, 59, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 18, 18, 37, tzinfo=datetime.timezone.utc), 'time_taken': 2176867.0, 'time_delta': '25 days, 4:41:07', 'additions': 168, 'deletions': 5, 'state': 'closed'}, {'id': 465200321, 'number': 2559, 'closed': datetime.datetime(2020, 8, 16, 13, 32, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 9, 20, 43, 7, tzinfo=datetime.timezone.utc), 'time_taken': 578973.0, 'time_delta': '6 days, 16:49:33', 'additions': 126, 'deletions': 130, 'state': 'closed'}, {'id': 463657625, 'number': 2555, 'closed': datetime.datetime(2021, 10, 13, 1, 37, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 21, 42, 18, tzinfo=datetime.timezone.utc), 'time_taken': 37425289.0, 'time_delta': '433 days, 3:54:49', 'additions': 590, 'deletions': 0, 'state': 'closed'}, {'id': 460562385, 'number': 2550, 'closed': datetime.datetime(2020, 9, 14, 19, 18, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 22, 13, 55, tzinfo=datetime.timezone.utc), 'time_taken': 3877502.0, 'time_delta': '44 days, 21:05:02', 'additions': 1508, 'deletions': 0, 'state': 'closed'}, {'id': 434218173, 'number': 2456, 'closed': datetime.datetime(2020, 11, 10, 21, 24, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 14, 23, 28, 24, tzinfo=datetime.timezone.utc), 'time_taken': 12866164.0, 'time_delta': '148 days, 21:56:04', 'additions': 988, 'deletions': 0, 'state': 'closed'}, {'id': 422330047, 'number': 2424, 'closed': datetime.datetime(2020, 6, 11, 21, 20, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 23, 21, 35, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1640716.0, 'time_delta': '18 days, 23:45:16', 'additions': 515, 'deletions': 0, 'state': 'closed'}, {'id': 406268648, 'number': 2377, 'closed': datetime.datetime(2020, 4, 28, 21, 1, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 19, 54, 18, tzinfo=datetime.timezone.utc), 'time_taken': 695216.0, 'time_delta': '8 days, 1:06:56', 'additions': 40, 'deletions': 6, 'state': 'closed'}, {'id': 392035431, 'number': 2324, 'closed': datetime.datetime(2020, 8, 25, 18, 20, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 22, 16, 42, 50, tzinfo=datetime.timezone.utc), 'time_taken': 13484238.0, 'time_delta': '156 days, 1:37:18', 'additions': 1134, 'deletions': 142, 'state': 'closed'}, {'id': 385010932, 'number': 2261, 'closed': datetime.datetime(2020, 6, 16, 15, 5, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 20, 37, 7, tzinfo=datetime.timezone.utc), 'time_taken': 8792897.0, 'time_delta': '101 days, 18:28:17', 'additions': 477, 'deletions': 3, 'state': 'closed'}, {'id': 374532439, 'number': 2203, 'closed': datetime.datetime(2020, 4, 9, 5, 35, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 12, 21, 4, 40, tzinfo=datetime.timezone.utc), 'time_taken': 4869028.0, 'time_delta': '56 days, 8:30:28', 'additions': 200, 'deletions': 0, 'state': 'closed'}, {'id': 372016120, 'number': 2183, 'closed': datetime.datetime(2020, 2, 14, 20, 48, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 17, 15, 10, tzinfo=datetime.timezone.utc), 'time_taken': 704003.0, 'time_delta': '8 days, 3:33:23', 'additions': 134, 'deletions': 0, 'state': 'closed'}, {'id': 368223441, 'number': 2164, 'closed': datetime.datetime(2020, 7, 27, 19, 7, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 28, 20, 51, 40, tzinfo=datetime.timezone.utc), 'time_taken': 15632128.0, 'time_delta': '180 days, 22:15:28', 'additions': 1789, 'deletions': 17, 'state': 'closed'}, {'id': 359101813, 'number': 2139, 'closed': datetime.datetime(2020, 3, 21, 15, 44, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 3, 19, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 6724676.0, 'time_delta': '77 days, 19:57:56', 'additions': 70, 'deletions': 12, 'state': 'closed'}, {'id': 347302264, 'number': 2102, 'closed': datetime.datetime(2019, 12, 23, 14, 34, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 1, 7, 49, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1925067.0, 'time_delta': '22 days, 6:44:27', 'additions': 71, 'deletions': 5, 'state': 'closed'}, {'id': 346433492, 'number': 2099, 'closed': datetime.datetime(2020, 2, 14, 1, 46, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 27, 21, 34, 33, tzinfo=datetime.timezone.utc), 'time_taken': 6754290.0, 'time_delta': '78 days, 4:11:30', 'additions': 257, 'deletions': 93, 'state': 'closed'}, {'id': 341668164, 'number': 2086, 'closed': datetime.datetime(2019, 12, 1, 7, 34, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 15, 22, 30, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1328620.0, 'time_delta': '15 days, 9:03:40', 'additions': 704, 'deletions': 153, 'state': 'closed'}]"
