pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1403107551,Add support for regions attribute,@tsmock,False,122,https://api.github.com/repos/JOSM/josm/pulls/122,https://github.com/JOSM/josm/pull/122,closed,137,8,4,8,10,26,0,1,[],2023-06-22 08:37:03+00:00,2023-12-19 16:11:11+00:00,15579248.0,"180 days, 7:34:08","[{'comment_id': 1238440667, 'comment_body': ""You aren't actually using this right now. But you probably will be."", 'comment_created': datetime.datetime(2023, 6, 22, 12, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1238445572, 'comment_body': ""Quick comment: Don't use `*` imports. In IntelliJ Settings, go to `Editor` -> `Code Style` -> `Java` -> `Imports` and change `Class count to use import with '*'` and `Names count to use static import with '*'` to `999`.\r\n\r\nWhile you are there, if you end up optimizing imports sometime, you should also change the `Import Layout` to be \r\n```\r\nimport static all other imports\r\n<blank line>\r\nimport java.*\r\n<blank line>\r\nimport javax.*\r\n<blank line>\r\nimport all other imports\r\n```\r\n\r\nThat really just minimizes the diff. It isn't wholly necessary, but it does avoid unnecessary code churn.\r\n\r\nRunning `ant pmd checkstyle` will find most of the code style issues.\r\n\r\n```suggestion\r\nimport org.openstreetmap.josm.data.osm.DataSet;\r\nimport org.openstreetmap.josm.data.osm.IPrimitive;\r\nimport org.openstreetmap.josm.data.osm.OsmData;\r\nimport org.openstreetmap.josm.data.osm.OsmDataManager;\r\nimport org.openstreetmap.josm.data.osm.OsmPrimitive;\r\nimport org.openstreetmap.josm.data.osm.Relation;\r\nimport org.openstreetmap.josm.data.osm.RelationMember;\r\nimport org.openstreetmap.josm.data.osm.Tag;\r\nimport org.openstreetmap.josm.data.osm.Tagged;\r\nimport org.openstreetmap.josm.data.osm.Way;\r\n```"", 'comment_created': datetime.datetime(2023, 6, 22, 12, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1238446265, 'comment_body': '```suggestion\r\n    private Set<String> regions;\r\n```\r\n\r\nWe want to use a `setRegions` here, since it will let us take a string and split it. If this is _not_ private, then the reflection code will try to use this field instead of the `setRegions` method.', 'comment_created': datetime.datetime(2023, 6, 22, 12, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1238447343, 'comment_body': '```suggestion\r\n        if (Utils.isEmpty(this.regions)) {\r\n```\r\nWe have a specific utility method for checking if a collection is `null` or `isEmpty`.', 'comment_created': datetime.datetime(2023, 6, 22, 12, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1238463386, 'comment_body': 'For this, I would look at how `isIso3166Code` is used elsewhere. If you right-click on the method name, one option is `Find Usages`. Use that and see how `Territories.isIso3166Code` is used elsewhere.', 'comment_created': datetime.datetime(2023, 6, 22, 12, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1238466033, 'comment_body': ""As was discussed on the call, we _want_ to allow users to apply presets that may not be valid outside of a specific region, but we do want to notify them of that. Returning `DIALOG_ANSWER_CANCEL` probably isn't the best decision for this."", 'comment_created': datetime.datetime(2023, 6, 22, 12, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1238467295, 'comment_body': '```suggestion\r\n```\r\nThis is unnecessary. This can be done _entirely_ in `TaggingPreset` by creating a new method `setRegions(String regions)`, e.g.\r\n\r\n```java\r\n    /**\r\n     * Get the regions for the preset\r\n     * @return The regions that the preset is valid for\r\n     * @apiNote This is not {@code getRegions} just in case we decide to make {@link TaggingPreset} a record class.\r\n     * @since xxx\r\n     */\r\n    public final Set<String> regions() {\r\n        return this.regions;\r\n    }\r\n\r\n    /**\r\n     * Set the regions for the preset\r\n     * @param regions The region list (comma delimited)\r\n     * @since xxx\r\n     */\r\n    public final void setRegions(String regions) {\r\n        this.regions = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(regions.split("",""))));\r\n    }\r\n```\r\n\r\nTip: You might want to ensure that the region(s) are valid. Use `Territories.getKnownIso3166Codes()`. Also, you _should_ intern the country code strings (`Utils.intern`).', 'comment_created': datetime.datetime(2023, 6, 22, 12, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1238471920, 'comment_body': 'This isn\'t actually limited to the United States and Canada. We\'ll have to remember to drop this prior to merge.\r\n```suggestion\r\n        <item name=""Charging Station"" icon=""presets/vehicle/charging_station.svg"" type=""node"" preset_name_label=""true"">\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 12, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1244296026, 'comment_body': 'Thank you for the tip. \r\n\r\nThe _checkstyle_ command is really helpful :)', 'comment_created': datetime.datetime(2023, 6, 27, 20, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1244296856, 'comment_body': 'I added this for testing purposes. Will remember to update this.', 'comment_created': datetime.datetime(2023, 6, 27, 20, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1244329456, 'comment_body': 'You could (/should) just change it locally without committing the change to git', 'comment_created': datetime.datetime(2023, 6, 27, 20, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Woazboat', 'type': 'User'}, {'comment_id': 1244333048, 'comment_body': 'Thank you for the suggestion, this seems like the better option.', 'comment_created': datetime.datetime(2023, 6, 27, 20, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1246871971, 'comment_body': 'No problem. It is something that I frequently have to run (and sometimes I run, change something, and forget to run it again...)', 'comment_created': datetime.datetime(2023, 6, 29, 16, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1252751934, 'comment_body': 'The easy solution for this is to use a custom preset for testing / dev purposes and simply disable the default preset.', 'comment_created': datetime.datetime(2023, 7, 5, 8, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'simonpoole', 'type': 'User'}, {'comment_id': 1275110503, 'comment_body': ""This is kind of pointless.\r\n\r\nWe need the _matching_ preset in order to do the testing. Earlier in the code (L671) we are getting matching presets.\r\n\r\nMy recommendation would be to do the following:\r\n* Pull that code out to a new line and put it in an `if` statement checking for `checkPresetTypes` or `checkRegions`. Example:\r\n```java\r\nfinal Collection<TaggingPreset> matchingPresets;\r\nif (checkPresetsType || checkRegions) matchingPresets = <copied code>;\r\nelse matchingPresets = null; // Force NPE if someone depends upon matchingPresets without updating the above if statement.\r\n```\r\n\r\nThere are a few other things you'll have to do that with, but you should just reuse the same `if` statement block."", 'comment_created': datetime.datetime(2023, 7, 26, 15, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1275120797, 'comment_body': ""```suggestion\r\n                } else {\r\n```\r\nAll other possibilities have `getBBox`, which is why you didn't have to cast in the next statement."", 'comment_created': datetime.datetime(2023, 7, 26, 15, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1275122935, 'comment_body': '```suggestion\r\n                }\r\n                if (preset.exclude_regions()) {\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 15, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1275124725, 'comment_body': 'Realistically, you could just do something like `check != preset.exclude_regions()`.', 'comment_created': datetime.datetime(2023, 7, 26, 15, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1275127353, 'comment_body': ""```suggestion\r\n                LatLon center;\r\n```\r\nYou really don't need to set `center` to `null` here, since we can cover all possibilities.\r\n\r\nAlso, please run `ant pmd checkstyle`. You've got some formatting issues."", 'comment_created': datetime.datetime(2023, 7, 26, 15, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1275132861, 'comment_body': ""You only need to call `tagChecker.startTest` once, and you really don't need to call `tagChecker.endTest`.\r\n\r\nAll `endTest` does is perform cleanup and tell the progress monitor that the task is finished, neither one of which is needed here.\r\n\r\nIf you are having problems getting errors to show up once you have fixed the `TaggingPreset preset = new TaggingPreset();` issue I pointed out elsewhere, make certain that you have enabled `Run data validator on user input` (JOSM Preferences -> `Tagging Presets`) and `Show informational level` (JOSM Preferences -> `Data validator`)."", 'comment_created': datetime.datetime(2023, 7, 26, 15, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1282257613, 'comment_body': 'I know you just copied and pasted, but have you considered _why_ `LinkedHashSet` is used instead of the more standard `ArrayList`?', 'comment_created': datetime.datetime(2023, 8, 2, 18, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1282258035, 'comment_body': ""I'd put the `tags` definition inside the `if` statement, much like `matchingPresets`."", 'comment_created': datetime.datetime(2023, 8, 2, 18, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1282681763, 'comment_body': ""One thing I know about `HashSet` is that it doesn't allow duplicate entries, which is not the case with `ArrayList`.\r\n\r\nI had to search for `LinkedHashSet`. It maintains the order of the inserted elements. Is this the reason why `LinkedHashSet` has been used?"", 'comment_created': datetime.datetime(2023, 8, 3, 5, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1282837665, 'comment_body': ""You are correct in that\r\n- List maintains insert order, but allows duplicates\r\n- Set doesn't allow duplicates, but doesn't guarantee that insertion order will be maintained\r\n\r\nLinkedHashSet does maintain insertion oder and provides deduplication, but that comes at the cost of internally being quite complex, so this should only be used when both qualities are actually required.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'simonpoole', 'type': 'User'}, {'comment_id': 1283227541, 'comment_body': 'I suspect that `LinkedHashSet` was used mostly for deduplication. It was initially added to the code in [r15788](https://josm.openstreetmap.de/changeset/15788/josm/).\r\n\r\nI don\'t believe any of the code written depends upon the _order_ of that list, so either a standard `List` class (with `.distinct()` in the stream) will work _or_ a standard `Set` class will work.\r\n\r\nIn this case, it isn\'t terribly important since we aren\'t passing the set around, but it is in code that can be run millions of times in a loop (if someone decides to validate a country, for example).\r\n\r\nIIRC, you are using IntelliJ. If you ever encounter code that you do not understand the purpose of, you can right-click in the ""gutter"" and enable annotations with `Annotate`. This will then let you click on a line in the gutter to see the commit information. You can also right-click on the line in the gutter to annotate a _previous_ revision, which can be really handy when someone decides to bulk edit stuff. ', 'comment_created': datetime.datetime(2023, 8, 3, 13, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308748644, 'comment_body': ""Can you reread this sentence. I don't think it flows well. Maybe replace the first `and` with `. `."", 'comment_created': datetime.datetime(2023, 8, 29, 12, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}]","[{'commit_sha': '737218350a89f608b3534b03e572ef33481ddf54', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '883358ff298048e06ac5151ae447ffae28d441d3', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae268c04a822f4eda18b465176500e564fdd85e5', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8520878229b33d61385358252feb98566d289b31', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f41c1c419fac19568a1a2db60158f6b65495995', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88cf51cb53ab34a397b13854cf58289f18879476', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efc8a4e68d12bdee871d03dd193ac7303ad51399', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a313e0036fc53570d7c8ba0db4c1c52a72766ea3', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}]",Sarabjeet Sodhi,63930480,,User,,27,,47,29
1443557637,Add support for deprecated attribute and update the presets search dialog,"@tsmock

I discussed this with Simon about having a filter for the added attributes. We can also have this for region attributes, although I think it is unnecessary in the case of _deprecated_.

I am having the same issue as with the regions attribute, the validate method in TaggingPresetValidation class is not adding the errors from the _check_ method in TagChecker class.",False,123,https://api.github.com/repos/JOSM/josm/pulls/123,https://github.com/JOSM/josm/pull/123,open,192,49,10,3,1,25,0,0,[],2023-07-20 20:25:07+00:00,,0.0,,"[{'comment_id': 1273420992, 'comment_body': ""At this point, I think we should start using an enum instead of a bunch of booleans.\r\n\r\nExample:\r\n```suggestion\r\n    public enum DisplayCheckboxes {\r\n        ONLY_APPLICABLE,\r\n        SEARCH_IN_TAGS,\r\n        DEPRECATED\r\n    }\r\n    public TaggingPresetSelector(boolean displayOnlyApplicable, boolean displaySearchInTags) {\r\n        this(displayOnlyApplicable ? ONLY_APPLICABLE : null, displaySearchInTags ? SEARCH_IN_TAGS : null);\r\n    }\r\n    public TaggingPresetSelector(DisplayCheckboxes... options) {\r\n    // Many if statements\r\n    }\r\n```\r\n\r\nI'll note that my code isn't properly organized, so the enum would go better elsewhere, and I didn't add the class reference in the constructor, but that should (largely) work."", 'comment_created': datetime.datetime(2023, 7, 25, 11, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273422752, 'comment_body': 'Going further on the enums, there are `EnumMap`s that we should start using, and the translated texts can be done via an enum field (e.g. `DEPRECATED(marktr(""Show deprecated tags""))` + `ck.setText(tr(DEPRECATED.getText())`).', 'comment_created': datetime.datetime(2023, 7, 25, 11, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273424412, 'comment_body': 'Moving on with the `EnumMap` idea, this could be done via that. For that matter, the checkbox could have a change listener that puts a boolean in an enum map.', 'comment_created': datetime.datetime(2023, 7, 25, 11, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273426282, 'comment_body': 'We should probably use an enum here. We could probably reuse the one I mentioned earlier (so `getMatchingPresets(String searchText, DisplayCheckboxes...`, so `DisplayCheckboxes` is probably the wrong name; see if you can find one yourself).', 'comment_created': datetime.datetime(2023, 7, 25, 12, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273428625, 'comment_body': ""I should probably mention (at this point) why I think we should start moving these booleans to an enum: easier readability. There are some other advantages, but `function(bool, bool, bool, bool, bool, bool)` start to get _really_ hard to wrap your mind around. Some IDEs will give hints as to what each bool is _supposed to be_, but not all IDEs will.\r\n\r\nAs a specific example, GitHub doesn't show what a boolean is supposed to be for, so the reviewer/editor has to know the function definition, or go find it."", 'comment_created': datetime.datetime(2023, 7, 25, 12, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273443237, 'comment_body': 'Should we add a checkbox for regions as well?', 'comment_created': datetime.datetime(2023, 7, 25, 12, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1273446814, 'comment_body': 'We could, yes. Realistically, the ""primary"" caller will probably just use `DisplayCheckboxes.values()` instead of hardcoding the current values.', 'comment_created': datetime.datetime(2023, 7, 25, 12, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1279027996, 'comment_body': 'how about `SearchStringFilters`?', 'comment_created': datetime.datetime(2023, 7, 31, 9, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1280638746, 'comment_body': 'That would probably work. But we have other locations where we have search strings. It might be better to have some more identifying information. Although this really depends upon where we put the `enum` -- if it is in its own file, it will need a much better identifier, such as `PresetSearchFilter`. If it remains in the `TaggingPresetSelector` class, then that would be part of the identifier (`TaggingPresetSelector.SearchStringFilters.DEPRECATED`).', 'comment_created': datetime.datetime(2023, 8, 1, 13, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1286422588, 'comment_body': '> Realistically, the ""primary"" caller will probably just use `DisplayCheckboxes.values()` instead of hardcoding the current values.\r\n\r\nDoes that mean we would use the preference for the checkbox associated with the filter like `ONLY_APPLICABLE.getPref()` instead of using `bool` value? (getPref will return boolean value)', 'comment_created': datetime.datetime(2023, 8, 7, 22, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1287498048, 'comment_body': ""This would be the equivalent of `new TaggingPresetSelector(true, true, true)`, which I don't _think_ you wanted. You probably wanted to just do `new TaggingPresetSelector()`."", 'comment_created': datetime.datetime(2023, 8, 8, 18, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287506549, 'comment_body': 'When I said, ""we should use an EnumMap"", this is not what I was thinking. I\'ll go find one of the methods using this enum and see if I can hack together something there as an example.\r\n\r\nGenerally speaking, `enum` classes should not have a state that can change. There are exceptions, _but_ they are _exceptions_.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287508412, 'comment_body': ""You shouldn't need/want to do this. Importing them statically would work, or you can just use the qualified name (`PresetSearchFilter.DEPREACATED_TAGS`). I only saw these used in a `switch` statement, where they aren't needed."", 'comment_created': datetime.datetime(2023, 8, 8, 18, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287509997, 'comment_body': 'You could use `option.getText()` here instead of calling the qualified name.\r\n\r\nWe want to have a map of option -> checkboxes, so `EnumMap<PresetSearchFilter, JCheckBox>` would work. Example:\r\n\r\n```java\r\nfinal Map<PresetSearchFilter, JCheckBox> checkboxes = new EnumMap<PresetSearchFilter, JCheckBox>(PresetSearchFilter.class);\r\nfor (PresetSearchFilterOption option : options) {\r\n    final JCheckBox box = new JCheckBox();\r\n    box.setText(tr(option));\r\n    box.addItemListener(e -> filterItems());\r\n    pnChecks.add(box);\r\n    switch (option) {\r\n    case SEARCH_IN_TAGS:\r\n        box.setSelected(PREF_SEARCH_IN_TAGS.get()); \r\n        break;\r\n        // Do other enum values\r\n    }\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 18, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287512563, 'comment_body': 'To avoid confusion, this should probably be `textToBeTranslated` or something; `translatedText` _implies_ it has already been translated.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287512947, 'comment_body': ""This would be the equivalent of new `TaggingPresetSelector(true, true, true)`, which I don't think you wanted. You probably wanted to just do new `TaggingPresetSelector()`.\r\n"", 'comment_created': datetime.datetime(2023, 8, 8, 18, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287517699, 'comment_body': 'This should be done via the standard `Config` interface _or_ one of the `Property` classes.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287527236, 'comment_body': 'Ideally, you would just use the same EnumMap from one of my other comments (`EnumMap<PresetSearchFilter, JCheckBox>`) instead.\r\n\r\nExample: `map.entrySet().stream().filter(entry -> entry.getValue().isSelected().map(Map.Entry::getKey).toArray(PresetSearchFilter[]::new)`.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308727505, 'comment_body': '```suggestion\r\n                Every item is one annotation set to select from. name is required, type and preset_name_label are recommended, deprecated, icon, and name_template are optional attributes.\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308730841, 'comment_body': '```suggestion\r\n     * @param deprecated if true the preset is deprecated\r\n     * @since xxx\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308737265, 'comment_body': 'We should probably keep the properties.\r\n\r\nRealistically, the map can be populated with `ckpreferences.computeIfAbsent(key, k -> PROPERTY.get())`.\r\n\r\nUsing (and saving) the preferences lets us keep the checkbox state between application restarts.', 'comment_created': datetime.datetime(2023, 8, 29, 12, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308741396, 'comment_body': 'I think we want to keep the PREFERENCE.put method calls.', 'comment_created': datetime.datetime(2023, 8, 29, 12, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308743778, 'comment_body': '```suggestion\r\n * @since xxx\r\n */\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308744626, 'comment_body': '```suggestion\r\n        selector = new TaggingPresetSelector(PresetSearchFilter.values());\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308745350, 'comment_body': '```suggestion\r\n     * @since xxx\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}]","[{'commit_sha': '915ce22c28846162771a67307e512d25e5b6320d', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cef4de6d398d9dee08a6946686f956ed335ecf4', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e6df3e53cb47c3a0a11646179e36649b60e94f9', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}]",Sarabjeet Sodhi,63930480,,User,,27,,47,29
1470832421,Add support for alternative tagging of the presets.,"Would it be better if we create two separate `List` for storing `PresetLink` objects with alternative=""true"" and the ones that don't have an alternative tag like presets under the ""Edit also"" section? 

The current implementation depends on the order in which `preset_link` is defined in the XML file. It does not work if the preset_link with the alternative attribute is defined before the non-alternative ones or between them. 

@tsmock",False,126,https://api.github.com/repos/JOSM/josm/pulls/126,https://github.com/JOSM/josm/pull/126,open,62,8,3,4,3,5,0,0,[],2023-08-10 18:59:02+00:00,,0.0,,"[{'comment_id': 1308717447, 'comment_body': ""I'm not quite certain what you are trying to say/change here."", 'comment_created': datetime.datetime(2023, 8, 29, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308721439, 'comment_body': 'We only use `createLabel` in one location. These two methods should probably be consolidated.\r\n```suggestion\r\n        if (!alternative) {\r\n            initializeLocaleText(tr(""Additional tags to edit""));\r\n            return new JLabel(locale_text);\r\n        }\r\n        initializeLocaleText(tr(""Similar but different tags""));\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308723977, 'comment_body': 'If you consolidate the `createLabel`/`createAlternativeLabel`, this could be done like so:\r\n```suggestion\r\n        for (List<PresetLink> linkList : Arrays.asList(alternativeTags, editAlsoTags)) {\r\n            if (!linkList.isEmpty()) {\r\n                PresetLink link = new PresetLink();\r\n                itemPanel.add(link.createLabel(), GBC.eol().insets(0, 8, 0, 0));\r\n                for (PresetLink links : linkList) {\r\n                    links.addToPanel(itemPanel, itemGuiSupport);\r\n                    p.hasElements = true;\r\n                }\r\n            }\r\n        }\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308725535, 'comment_body': 'You might want to add a comment for this (e.g. ""Not adding preset links to panel here since we want to order alternative tags and tags that users may want to use in addition"").', 'comment_created': datetime.datetime(2023, 8, 29, 12, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1313611312, 'comment_body': '`link.isAlternative()` is always `false`, therefore same label is being created for both preset alternative and editalso tags. We may want to create label based on the `links` of the `linkedList`', 'comment_created': datetime.datetime(2023, 9, 1, 22, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}]","[{'commit_sha': '3cf558f466cf01f3fb3a116f230c892821e8e2d1', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c572c6ee78547877b635cec8f38d578cfa66773f', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c692a4e0e46f7b79b7afe634fbb988a8977c8c3', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6b2b934f725eaf7e606989ecc46c5675bb1dc32', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}]",Sarabjeet Sodhi,63930480,,User,,27,,47,29
1443557637,Add support for deprecated attribute and update the presets search dialog,"@tsmock

I discussed this with Simon about having a filter for the added attributes. We can also have this for region attributes, although I think it is unnecessary in the case of _deprecated_.

I am having the same issue as with the regions attribute, the validate method in TaggingPresetValidation class is not adding the errors from the _check_ method in TagChecker class.",False,123,https://api.github.com/repos/JOSM/josm/pulls/123,https://github.com/JOSM/josm/pull/123,open,192,49,10,3,1,25,0,0,[],2023-07-20 20:25:07+00:00,,0.0,,"[{'comment_id': 1273420992, 'comment_body': ""At this point, I think we should start using an enum instead of a bunch of booleans.\r\n\r\nExample:\r\n```suggestion\r\n    public enum DisplayCheckboxes {\r\n        ONLY_APPLICABLE,\r\n        SEARCH_IN_TAGS,\r\n        DEPRECATED\r\n    }\r\n    public TaggingPresetSelector(boolean displayOnlyApplicable, boolean displaySearchInTags) {\r\n        this(displayOnlyApplicable ? ONLY_APPLICABLE : null, displaySearchInTags ? SEARCH_IN_TAGS : null);\r\n    }\r\n    public TaggingPresetSelector(DisplayCheckboxes... options) {\r\n    // Many if statements\r\n    }\r\n```\r\n\r\nI'll note that my code isn't properly organized, so the enum would go better elsewhere, and I didn't add the class reference in the constructor, but that should (largely) work."", 'comment_created': datetime.datetime(2023, 7, 25, 11, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273422752, 'comment_body': 'Going further on the enums, there are `EnumMap`s that we should start using, and the translated texts can be done via an enum field (e.g. `DEPRECATED(marktr(""Show deprecated tags""))` + `ck.setText(tr(DEPRECATED.getText())`).', 'comment_created': datetime.datetime(2023, 7, 25, 11, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273424412, 'comment_body': 'Moving on with the `EnumMap` idea, this could be done via that. For that matter, the checkbox could have a change listener that puts a boolean in an enum map.', 'comment_created': datetime.datetime(2023, 7, 25, 11, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273426282, 'comment_body': 'We should probably use an enum here. We could probably reuse the one I mentioned earlier (so `getMatchingPresets(String searchText, DisplayCheckboxes...`, so `DisplayCheckboxes` is probably the wrong name; see if you can find one yourself).', 'comment_created': datetime.datetime(2023, 7, 25, 12, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273428625, 'comment_body': ""I should probably mention (at this point) why I think we should start moving these booleans to an enum: easier readability. There are some other advantages, but `function(bool, bool, bool, bool, bool, bool)` start to get _really_ hard to wrap your mind around. Some IDEs will give hints as to what each bool is _supposed to be_, but not all IDEs will.\r\n\r\nAs a specific example, GitHub doesn't show what a boolean is supposed to be for, so the reviewer/editor has to know the function definition, or go find it."", 'comment_created': datetime.datetime(2023, 7, 25, 12, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1273443237, 'comment_body': 'Should we add a checkbox for regions as well?', 'comment_created': datetime.datetime(2023, 7, 25, 12, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1273446814, 'comment_body': 'We could, yes. Realistically, the ""primary"" caller will probably just use `DisplayCheckboxes.values()` instead of hardcoding the current values.', 'comment_created': datetime.datetime(2023, 7, 25, 12, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1279027996, 'comment_body': 'how about `SearchStringFilters`?', 'comment_created': datetime.datetime(2023, 7, 31, 9, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1280638746, 'comment_body': 'That would probably work. But we have other locations where we have search strings. It might be better to have some more identifying information. Although this really depends upon where we put the `enum` -- if it is in its own file, it will need a much better identifier, such as `PresetSearchFilter`. If it remains in the `TaggingPresetSelector` class, then that would be part of the identifier (`TaggingPresetSelector.SearchStringFilters.DEPRECATED`).', 'comment_created': datetime.datetime(2023, 8, 1, 13, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1286422588, 'comment_body': '> Realistically, the ""primary"" caller will probably just use `DisplayCheckboxes.values()` instead of hardcoding the current values.\r\n\r\nDoes that mean we would use the preference for the checkbox associated with the filter like `ONLY_APPLICABLE.getPref()` instead of using `bool` value? (getPref will return boolean value)', 'comment_created': datetime.datetime(2023, 8, 7, 22, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Sarabjeet108', 'type': 'User'}, {'comment_id': 1287498048, 'comment_body': ""This would be the equivalent of `new TaggingPresetSelector(true, true, true)`, which I don't _think_ you wanted. You probably wanted to just do `new TaggingPresetSelector()`."", 'comment_created': datetime.datetime(2023, 8, 8, 18, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287506549, 'comment_body': 'When I said, ""we should use an EnumMap"", this is not what I was thinking. I\'ll go find one of the methods using this enum and see if I can hack together something there as an example.\r\n\r\nGenerally speaking, `enum` classes should not have a state that can change. There are exceptions, _but_ they are _exceptions_.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287508412, 'comment_body': ""You shouldn't need/want to do this. Importing them statically would work, or you can just use the qualified name (`PresetSearchFilter.DEPREACATED_TAGS`). I only saw these used in a `switch` statement, where they aren't needed."", 'comment_created': datetime.datetime(2023, 8, 8, 18, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287509997, 'comment_body': 'You could use `option.getText()` here instead of calling the qualified name.\r\n\r\nWe want to have a map of option -> checkboxes, so `EnumMap<PresetSearchFilter, JCheckBox>` would work. Example:\r\n\r\n```java\r\nfinal Map<PresetSearchFilter, JCheckBox> checkboxes = new EnumMap<PresetSearchFilter, JCheckBox>(PresetSearchFilter.class);\r\nfor (PresetSearchFilterOption option : options) {\r\n    final JCheckBox box = new JCheckBox();\r\n    box.setText(tr(option));\r\n    box.addItemListener(e -> filterItems());\r\n    pnChecks.add(box);\r\n    switch (option) {\r\n    case SEARCH_IN_TAGS:\r\n        box.setSelected(PREF_SEARCH_IN_TAGS.get()); \r\n        break;\r\n        // Do other enum values\r\n    }\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 18, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287512563, 'comment_body': 'To avoid confusion, this should probably be `textToBeTranslated` or something; `translatedText` _implies_ it has already been translated.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287512947, 'comment_body': ""This would be the equivalent of new `TaggingPresetSelector(true, true, true)`, which I don't think you wanted. You probably wanted to just do new `TaggingPresetSelector()`.\r\n"", 'comment_created': datetime.datetime(2023, 8, 8, 18, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287517699, 'comment_body': 'This should be done via the standard `Config` interface _or_ one of the `Property` classes.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1287527236, 'comment_body': 'Ideally, you would just use the same EnumMap from one of my other comments (`EnumMap<PresetSearchFilter, JCheckBox>`) instead.\r\n\r\nExample: `map.entrySet().stream().filter(entry -> entry.getValue().isSelected().map(Map.Entry::getKey).toArray(PresetSearchFilter[]::new)`.', 'comment_created': datetime.datetime(2023, 8, 8, 18, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308727505, 'comment_body': '```suggestion\r\n                Every item is one annotation set to select from. name is required, type and preset_name_label are recommended, deprecated, icon, and name_template are optional attributes.\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308730841, 'comment_body': '```suggestion\r\n     * @param deprecated if true the preset is deprecated\r\n     * @since xxx\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308737265, 'comment_body': 'We should probably keep the properties.\r\n\r\nRealistically, the map can be populated with `ckpreferences.computeIfAbsent(key, k -> PROPERTY.get())`.\r\n\r\nUsing (and saving) the preferences lets us keep the checkbox state between application restarts.', 'comment_created': datetime.datetime(2023, 8, 29, 12, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308741396, 'comment_body': 'I think we want to keep the PREFERENCE.put method calls.', 'comment_created': datetime.datetime(2023, 8, 29, 12, 27, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308743778, 'comment_body': '```suggestion\r\n * @since xxx\r\n */\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308744626, 'comment_body': '```suggestion\r\n        selector = new TaggingPresetSelector(PresetSearchFilter.values());\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}, {'comment_id': 1308745350, 'comment_body': '```suggestion\r\n     * @since xxx\r\n```', 'comment_created': datetime.datetime(2023, 8, 29, 12, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'tsmock', 'type': 'User'}]","[{'commit_sha': '915ce22c28846162771a67307e512d25e5b6320d', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cef4de6d398d9dee08a6946686f956ed335ecf4', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e6df3e53cb47c3a0a11646179e36649b60e94f9', 'committer_username': 'Sarabjeet108', 'committer_name': 'Sarabjeet Sodhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 18, 20, 43, 7, tzinfo=datetime.timezone.utc)}]",Sarabjeet Sodhi,63930480,,User,,27,,47,29

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
641525,josm,JOSM/josm,Java,190,369,34,29,18867,23,2,23,"[{'id': 1470832421, 'number': 126, 'closed': None, 'created': datetime.datetime(2023, 8, 10, 18, 59, 2, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 62, 'deletions': 8, 'state': 'open'}, {'id': 1443557637, 'number': 123, 'closed': None, 'created': datetime.datetime(2023, 7, 20, 20, 25, 7, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 192, 'deletions': 49, 'state': 'open'}, {'id': 1403107551, 'number': 122, 'closed': datetime.datetime(2023, 12, 19, 16, 11, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 8, 37, 3, tzinfo=datetime.timezone.utc), 'time_taken': 15579248.0, 'time_delta': '180 days, 7:34:08', 'additions': 137, 'deletions': 8, 'state': 'closed'}, {'id': 1242466730, 'number': 113, 'closed': datetime.datetime(2023, 6, 22, 5, 30, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 15, 17, 45, 6, tzinfo=datetime.timezone.utc), 'time_taken': 10928701.0, 'time_delta': '126 days, 11:45:01', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
