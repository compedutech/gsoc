pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
441913431,Loop tiled matrix multiplication,"Parallel matrix multiplication based on loop tiling.
Adapted from [Chapel PRK DGEMM](https://github.com/chapel-lang/chapel/blob/master/test/studies/prk/DGEMM/dgemm.chpl)

- [x] Correctness Testing
- [x] Performance graph comparing reindexing overhead
~~Performance graphs against Naive approach~~ (not needed anymore as a local dot perf test already exists)",True,15976,https://api.github.com/repos/chapel-lang/chapel/pulls/15976,https://github.com/chapel-lang/chapel/pull/15976,closed,82,4,1,12,22,1,2,0,"[{'name': 'stat: Ready to Merge'}, {'name': 'stat: cla signed'}]",2020-06-30 09:50:02+00:00,2020-08-17 15:54:36+00:00,4169074.0,"48 days, 6:04:34","[{'comment_id': 452985473, 'comment_body': ""It could be nice to put these checks into a private helper function (I'm sure other functions will be using it down the road as well), so that this could read a little clearer, e.g.\r\n\r\n```chpl\r\n// I'm open to other names...\r\nif hasDefaultIndices(A, B) { \r\n  _matmatMultHelper(A, B, C);\r\n} else {\r\n   ...\r\n}\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 7, 10, 17, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}]","[{'commit_sha': '55139b05a90968b0e6559778c763a1ae97be784b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c397dfe6919a6d075c41c3c75d8ea1e82c7a3dda', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '201ddcbd328a667e98d45c7c71b8f5ac3b39bc14', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c0b812b27d93a93dbb80567f8945937467b08496', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b64d6605ab5de44670d2ffbafab2175c59d0c05b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8c1c19aca40345d1888434bec2965b7a52c2ff7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '73a668ee79dc166f1bcb13dee04df4818a527168', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a4c4327e4761a42dd9dd9f32c41b6443ffd9b2fc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6401079e6f037838dea065b4dec0984785a1b6b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1b4a73490a72898750d4d3d5911f72721179853a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '86501ac6249f8ff5664674930a1fc71144b12fb9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '32de27ed8a84bb8f485450f9f0b5523dafd1d9ee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45
449529036,LinearAlgebra.dot() test for nightly performance graphs,"Add local matrix-matrix multiplication performance test.

- [x] Add precomp file to check if on `cray-cs` or `cray-xc`
- [x] Change test to matrix-matrix mult
- [x] Add graph files for perf test",True,16077,https://api.github.com/repos/chapel-lang/chapel/pulls/16077,https://github.com/chapel-lang/chapel/pull/16077,closed,41,42,11,14,14,15,1,0,[{'name': 'stat: cla signed'}],2020-07-15 14:42:42+00:00,2020-07-24 00:51:11+00:00,727709.0,"8 days, 10:08:29","[{'comment_id': 457585060, 'comment_body': 'Lowercase ""native""', 'comment_created': datetime.datetime(2020, 7, 20, 17, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457594996, 'comment_body': 'Not for this PR, but we should think of ways to make sure that this call is not dead-code-eliminated. If we had an overload that took an output array, that should be used for example.', 'comment_created': datetime.datetime(2020, 7, 20, 18, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 457595153, 'comment_body': 'Any reason we dropped to 2048 from 4096?', 'comment_created': datetime.datetime(2020, 7, 20, 18, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 458275039, 'comment_body': '4096 was for distributed. This is for a single locale, so I thought 2048 would be a good size. Both the tests complete in about 30 seconds and 70 seconds respectively on swan (if I remember correctly).', 'comment_created': datetime.datetime(2020, 7, 21, 17, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 458275207, 'comment_body': 'Is there a pragma that can be used to ensure this?', 'comment_created': datetime.datetime(2020, 7, 21, 17, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 458277874, 'comment_body': ""Not that I am aware of, nor I would advocate for a pragma in a performance test. As long as we are not eliminating that right now, I think we are fine. We'll notice in the performance plots if it gets eliminated after a compiler change or something. I am not that worried. "", 'comment_created': datetime.datetime(2020, 7, 21, 17, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 458278316, 'comment_body': ""Ah, that's fine then"", 'comment_created': datetime.datetime(2020, 7, 21, 17, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 459126767, 'comment_body': ""Let's drop this size even lower. Note that correctness tests are compiled without fast and this is taking time in the order of minutes."", 'comment_created': datetime.datetime(2020, 7, 22, 22, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 459131609, 'comment_body': ""We should drop cs here because we need to adjust our config to load libsci in nightly testing. Moreover, as it is a single locale performance test with its current shape, this'll be only perf tested on a linux64 system.\r\n\r\n@ben-albrecht -- Should we still have the rest for XC, and create a distributed version of this test in the future, or do we want it to be distributed now?"", 'comment_created': datetime.datetime(2020, 7, 22, 23, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 459195699, 'comment_body': 'Should I add ml config files with 1 locale?', 'comment_created': datetime.datetime(2020, 7, 23, 3, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 459754559, 'comment_body': 'How about we continuously update `result`? The assignment to `result` could be considered part of the cost of doing the dot product.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 459755113, 'comment_body': 'How about we time this dot and do 1 less iteration below, making the correctness/performance paths more overlapped? E.g.,\r\n\r\n```chpl\r\nt.start();\r\nvar result = dot(BA, BA);\r\nt.stop();\r\n\r\nfor 1..<iters {\r\n  t.start();  \r\n  result = dot(BA, BA);\r\n  t.stop();\r\n}\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 23, 22, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 459761149, 'comment_body': '`--iters=1` would also be valid with my suggested change above.', 'comment_created': datetime.datetime(2020, 7, 23, 22, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 459761882, 'comment_body': "">  Should we still have the rest for XC, and create a distributed version of this test in the future, or do we want it to be distributed now?\r\n\r\nLet's do it later.\r\n\r\n> Should I add ml config files with 1 locale?\r\n\r\nI don't think that's necessary."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 459762640, 'comment_body': 'Sounds good to me', 'comment_created': datetime.datetime(2020, 7, 23, 22, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}]","[{'commit_sha': '04cf19ec5ec646721fa63f3ab673ec0eca8b7503', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e90d356994c8cbc95c0e6d296ac56cc596a472d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3320e113bbd82f6dc8fa804c93951a61369ec816', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5e47eed212a958122b45dca2d3fa74560033501', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3470b3e116b544ab25c603c41e88c0265ec5634a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '01b35437ce71f0a972093c7dad4be86fd96992c6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '686a53d25a2bce66f05be221f8baaf25fc8eff18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ca217dc3ec06b365dda685bc0aeaf9cfcbed8333', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '878a4d4be517fcf9e6e2f1fc6006e97507b1979a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8e52f33ee0e1ac55c0bea2d6fb03d6bc0feed5e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bd148b8ebaca68ffb6cbe6e5556e8403be05f843', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4322b56a62c4d46fd9be54bd0e19f23867e78760', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9856a7522db60ca2fff4f824f28ad56851fb5d36', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '74b77f330efbb83e17ec5fd39da378a9fbe3941f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45
433974923,Alternate implementation of Intel PRK DGEMM,"An alternate implementation of Intel PRK DGEMM

- [x] Add perf Testing
- [x] Add compopts for native and BLAS

NOTE - Currently does not perform pipelined communication, which is inherent to SUMMA",True,15835,https://api.github.com/repos/chapel-lang/chapel/pulls/15835,https://github.com/chapel-lang/chapel/pull/15835,closed,152,0,12,22,3,18,1,3,[{'name': 'stat: cla signed'}],2020-06-13 07:59:36+00:00,2020-07-20 23:40:49+00:00,3253273.0,"37 days, 15:41:13","[{'comment_id': 441194539, 'comment_body': ""This is not ideal for performance.\r\n\r\n`dot` creates an array, stores the result in it and then returns it. Then we do `+=` over an array slice and the returned array, which is essentially another `forall` after `dot`.\r\n\r\nFew things we can do to improve this line:\r\n1. Don't rely on `dot`\r\n2. Discuss whether we can add a new overload of `dot` in the LinearAlgebra module where you give the output array\r\n3. Leave it as-is for now.\r\n\r\nI think we should have a better-performing version soon. But OK with not having that in this PR. We can also envision a future where we have this and some other version that circumvents that overhead. It'd be cool to have them both and have an optimization for such cases and see the gap between two versions closing.\r\n\r\nAnother smaller note is the `localSlice` might be a better way to slice into C: https://chapel-lang.org/docs/master/builtins/ChapelArray.html?highlight=localslice#ChapelArray.localSlice"", 'comment_created': datetime.datetime(2020, 6, 16, 23, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 441195003, 'comment_body': 'You should probably add a header comment similar to the others, putting your name as the contributor.', 'comment_created': datetime.datetime(2020, 6, 16, 23, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 441195207, 'comment_body': ""AFAIK iterators are always inlined and you don't need `inline` here"", 'comment_created': datetime.datetime(2020, 6, 16, 23, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 441195839, 'comment_body': 'for the benchmarking purposes, I think we can drop `stride` logic here. It begs the question whether the rest of this logic is well adjusted for strides, alignments etc.', 'comment_created': datetime.datetime(2020, 6, 16, 23, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 441578861, 'comment_body': ""Regarding the unexpected communication pattern we discussed in the meeting, shouldn't `block` have the argument `localDomainA.dim(1)`? I believe this does some extra work, though I would kinda expect it to break validation??"", 'comment_created': datetime.datetime(2020, 6, 17, 14, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 443610513, 'comment_body': ""Isn't `subArrayA` and `subArrayB` being fetched synchronously? Also its being fetched entirely by locale 0? One potential improvement: perform blocks in parallel? I'm not even sure if bulk fetching that borders multiple locales is concurrent... is it? I.E. would there be sequential bulk GETs to each locale or is it a multi-locale PUT?"", 'comment_created': datetime.datetime(2020, 6, 22, 14, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'LouisJenkinsCS', 'type': 'User'}, {'comment_id': 443617265, 'comment_body': 'Woops, missed the `coforall` above.', 'comment_created': datetime.datetime(2020, 6, 22, 14, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'LouisJenkinsCS', 'type': 'User'}, {'comment_id': 444529716, 'comment_body': ""I also think that we should have the iteration loop outside of these coforalls and account for their cost, too. But I am aware that that's not the current DGEMM does, and the costs of those are small as the matrix size gets larger and larger."", 'comment_created': datetime.datetime(2020, 6, 23, 21, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 446830747, 'comment_body': 'Using a localSlice improved the performance a bunch', 'comment_created': datetime.datetime(2020, 6, 29, 7, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 450381130, 'comment_body': ""I have asked about using `A.domain.dim(1)` here before, and it still bugged me so I looked a bit closer to your implementation. It makes sense now.\r\n\r\nHowever, we need to note here that this is not full-blown SUMMA. In SUMMA, you are supposed to pipeline your neighboring locales data one by one instead of fetching full rows and columns. In that algorithm you do that to reduce the message sizes and contention on the system (because with your approach you have all-to-one or many different many-to-one communication). That pipelining is also prone to asynchrony and overlapping communication and computation. However, doing that in Chapel may not be very clean/performant today.\r\n\r\nI still think this is a good step and we should have this, but we need to be aware of this limitation. I expect this to hurt us at scale especially. i.e. what happens if you have 256 locales and not 16?\r\n\r\nI think for the PR's purposes we need a comment somewhere. Maybe in the header, or right next to this iteration here. "", 'comment_created': datetime.datetime(2020, 7, 6, 17, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 450385433, 'comment_body': ""drop this line: we don't have blas on the nightly testing system"", 'comment_created': datetime.datetime(2020, 7, 6, 17, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 450385537, 'comment_body': 'drop this, too', 'comment_created': datetime.datetime(2020, 7, 6, 17, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 450395211, 'comment_body': 'I want to use power-of-two sizes to avoid any noise due to load imbalance in our nightly performance testing. \r\n\r\nI have also observed a big performance drop going from 4096x4096 to 8192x8192 probably because we are allocating more than the cache per locale.\r\n\r\nFor nightly performance tracking purposes I think we should go with 4096x4096 and 10 iterations. It finishes under 30 seconds and doesn\'t have a lot of noise.\r\n\r\nNote that the main purpose of these nightly tests is not answering ""what is the DGEMM performance of Chapel?"" but more ""did we mess up DGEMM performance yesterday?"" So, while 4096 might be a bit small, it is not too small and I think is suitable for capturing any unforeseen performance regressions.\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 6, 18, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 456382470, 'comment_body': 'I thought both cray-xc and cray-cs had LibSci on them. Is that not true for the nightly systems? ', 'comment_created': datetime.datetime(2020, 7, 17, 11, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 456385643, 'comment_body': ""Nvm, this is for chapcs. I'll change it"", 'comment_created': datetime.datetime(2020, 7, 17, 11, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 456388078, 'comment_body': 'I have updated the top-level comment with a small note.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 456557858, 'comment_body': 'Have you pushed that commit to this branch? I am not seeing one?', 'comment_created': datetime.datetime(2020, 7, 17, 16, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 456657414, 'comment_body': 'Oh, I thought you meant on the pull request rather than the file itself. Done now', 'comment_created': datetime.datetime(2020, 7, 17, 20, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}]","[{'commit_sha': 'a59d2c34b674a4506afd8326cad1b08534ad7a61', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c18e887df0b908f2aefade122d55c1b74abf8a8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '28d092368f6bbd2105fbf1ee364d85b5c5d03715', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6ed6aba2ed418df779f6d3164abd46aed637b106', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '82d2649e33732f132094d25bb45a717fe098a2c4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '417108b8c155bd46a9d6e1f7f57580f11c495d8d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '926b1fae510988eb21911505feaaddf67f20ae6b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c8f62694c40087b4575921eef0353943a935b2ff', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8037cd331e268f57ad1ec5599d7eecef759ba6f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6dbbcbee0fb9586c242c8cec166886fe311233d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c565d961fa29527544e53c8779ee7de922a1030e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '34b5a83067c88addbeff900f9fd66add7dfe7cf9', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c79a1d21ac1dcc2e5c82059b5cf806bbf8b8a9', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ebe8123a7429b378c0e02a890bada81475598ef', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f4befa62d8ea23f0e6b315c1037194ac1e5be0', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3cc38af795d31114d487e2e8370aec9c4b3cb2', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72788c80b9844887680db8fac26e29932ed970dc', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0b049e177f6c351283b1ab6406e7c0142e8abd7', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '021230fbba8ffb7889cafb139653b92535ee0a19', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2ac4c7b7ce8ef898972b56fc4280a1833ad2d4a7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '878025a60d055ca6097610bb357b22873d3f8e32', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3bcad5f3dd3f18f7a9db1447533a208a49fee6c1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45
455098172,Distributed matrix-matrix multiplication,"A general distributed matrix-matrix multiplication procedure.

- [x] Works for multiple different distributions (Block, Cyclic, BlockCyclic)
- [x] Works if input matrices have different `targetLocales` or entirely different distributions
- [x] Multilocale testing - Correctness
- [x] Multilocale testing - Perf (is this needed if PRK DGEMM already exists)
- [ ] Perf test against MPI reference",False,16107,https://api.github.com/repos/chapel-lang/chapel/pulls/16107,https://github.com/chapel-lang/chapel/pull/16107,closed,122,5,11,18,12,6,3,1,"[{'name': 'post-release'}, {'name': 'stat: cla signed'}, {'name': 'stat: developed under CLA'}]",2020-07-22 12:49:59+00:00,2020-12-09 21:59:28+00:00,12128969.0,"140 days, 9:09:29","[{'comment_id': 462279269, 'comment_body': ""I don't think this is used anywhere."", 'comment_created': datetime.datetime(2020, 7, 29, 13, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dgarvit', 'type': 'User'}, {'comment_id': 462293212, 'comment_body': 'I think we should add a rank check.\r\n```\r\nif Adom.rank != 2 || Bdom.rank != 2 then\r\n    compilerError(""Ranks are not 2"");\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 13, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dgarvit', 'type': 'User'}, {'comment_id': 462298122, 'comment_body': 'For consistency, I\'d suggest using the standard error message used throughout the library for this situation: ""Mismatched shape in matrix-matrix multiplication""', 'comment_created': datetime.datetime(2020, 7, 29, 13, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dgarvit', 'type': 'User'}, {'comment_id': 462347764, 'comment_body': 'Yep, it rolled over from the older version of the implementation', 'comment_created': datetime.datetime(2020, 7, 29, 14, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 475901702, 'comment_body': 'config param', 'comment_created': datetime.datetime(2020, 8, 24, 21, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 475926582, 'comment_body': 'use BlockDist', 'comment_created': datetime.datetime(2020, 8, 24, 22, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}]","[{'commit_sha': 'a651e5a59f73d3b0559a1d60fd086185bcb3ec42', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '514a8b45dce7ecb26d35849557cbd6266cb19ed0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '01878f1cd59c3079c73119209be721ca35c95db7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3879e63a9d3773fa5138d6fb81b5a28f0d870786', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b366ee4f602d418907bcd06d61f82f65b7a3b9d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1b169a6ccf063fb58a07af24de9201afe86bbb70', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '61fbbaf3fd8aba5f85dfecfc4d9aa5e40bd4c25c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b7220092b72131f55c734320dc8f16bdd6240011', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b02967ef762fe436a0731043760577fc86af0f75', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '371f27bddbe4a243e5c766ae92256ef9903ed17b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '87dbf95358839439f114eb8d40ed80d4ca1dd660', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '80cca53fbbc96b21477bc4b59ce4977562937aed', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9f050c204716aafdf8c7fc0431c8a66aa41b2da1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6546ae877c272cd0e29370f957b870b559986dfa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3c12e597f3da85a332c521d128f8ef43c6710002', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '558a99f7595d8634a28f17d92ac31a1c5770ca3d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9eff8fd399f079dfed8427332f91d4de5da3b672', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd8a90d2b20b1d98c6d1d73b51f09dd467996ade8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45
455080647,Distributed linear algebra error,Throw errors when Linear Algebra function does not support distributed vectors/matrices,True,16106,https://api.github.com/repos/chapel-lang/chapel/pulls/16106,https://github.com/chapel-lang/chapel/pull/16106,closed,20,4,1,6,2,0,1,0,[{'name': 'stat: cla signed'}],2020-07-22 12:15:11+00:00,2020-08-17 17:28:54+00:00,2265223.0,"26 days, 5:13:43",[],"[{'commit_sha': '388ed3afc882da3d795acc495de567d2a4bd66ab', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c34ed902aca8aadc1b20865dd7f25bcb8854d7a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '73f1de60d7c2de7f12f25e81fdb39bd9e8f7c48b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3f7236688203f6c9e009bf36c19b6d4a85f35dae', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba54246f1b0224d95d63b0ef6803b186e00576c4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e0555cffd6ab483690a379515b30c5913006a23e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45
458291874,Change local diag to support domains with non-uniform dimensions,"Add diag support for matrices with different range offsets/strides.

- [x] Add further tests for non-square matrices",True,16160,https://api.github.com/repos/chapel-lang/chapel/pulls/16160,https://github.com/chapel-lang/chapel/pull/16160,closed,41,16,2,6,4,5,1,0,[{'name': 'stat: cla signed'}],2020-07-29 08:51:32+00:00,2020-08-19 16:21:38+00:00,1841406.0,"21 days, 7:30:06","[{'comment_id': 462273236, 'comment_body': '```suggestion\r\n  const diagSize = min(m, n);\r\n```', 'comment_created': datetime.datetime(2020, 7, 29, 12, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 462275669, 'comment_body': 'I think the new vector should inherit the domain from `A`. I would assume we inherit from the smaller dimension of `A`.', 'comment_created': datetime.datetime(2020, 7, 29, 12, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 462276632, 'comment_body': 'I would be OK with doing a reindex to handle stride and offsets', 'comment_created': datetime.datetime(2020, 7, 29, 12, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 463444055, 'comment_body': 'The stride is only called once, and the offset is only calculated once. Which is why I thought this might be better than reindexing', 'comment_created': datetime.datetime(2020, 7, 31, 7, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 473039490, 'comment_body': 'nit: this indentation style reads weirdly for me. How about we match what we did up on line 899?', 'comment_created': datetime.datetime(2020, 8, 19, 13, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}]","[{'commit_sha': '0b3dc0f2b3fd480f658f42e16f10c85998eec4d0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3d54d444a14f5b183d6a40ecabf5fdf2360c17c0', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4a3114889ee4bdb207e88c39b61e1dd6c6cf0d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f3144eb3d9dd0e726ca2a3972c5524bf9035678e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a1b9f791bc64c1060f60fab34cf6cda8ab1fcf5b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5abf99d7ef1ac3d8a25fe778f36570be5b75a8c1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45
457553733,LinearAlgebra Distributed diag,"- [x] Testing
- [x] Add logic for calculating distributed diagonal matrix from distributed vector
- [x] Add overload to pre-define distribution of output vector 
",False,16147,https://api.github.com/repos/chapel-lang/chapel/pulls/16147,https://github.com/chapel-lang/chapel/pull/16147,closed,211,0,4,22,3,0,3,0,"[{'name': 'post-release'}, {'name': 'stat: cla signed'}, {'name': 'stat: developed under CLA'}]",2020-07-28 04:55:05+00:00,2020-12-09 21:59:54+00:00,11639089.0,"134 days, 17:04:49",[],"[{'commit_sha': '3a19895392b2f2535b73a9600ca264809d09def7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '13cc34be1034ffe5b9723b3170934ffd62a276c1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f46747b7903315d600a9acf175749581aca03d25', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '31ab6211ccc218b11edbe93fc86af9bd8e85e284', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd63835d25ab0144ca51a3edbaaa01ed648e8ddf4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2b8586c99f652586c2d3ad033bd7c70e56da37b4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1a1aea7552c850c35fa73d16902e7008828403e7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4b6fd18f083c26388f890e7dee9af889ea2d1eb2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '695fb6c4bb58692de8bb14456b48135190fe8a80', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3b0eaa1735773d8e5c58b5dd2c2729b6508521df', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '34e93326f042c7e536bf2b3691949c84fe65e080', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5d65197d88cc9183e5fcaae618973d6076ca78a8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4228332febf9c762ef37e8b4161a23fb9fcefb25', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b16a0af4aa488937ab0b4a0f16d53bcbe10ec26b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c09bbaf8bb00d951b296b90571202ba86023a747', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c4d0664bca9cbf62382efa119ba519492f50993d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7109525c2ed23f66458e5004364e9145542b5983', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e252ee7c314751bfffd1278bef4c6a4451605622', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '76c473ffb7bc5fb76b2ba26587ad55bcff158a15', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3467418d5c97fb90655bc4c8f0739717171e2c60', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd49f8cb866614a5b29edb12aff75a89a7681e4b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e3db6a06974b84972a1ae1531897d1925dd025c5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45
464048520,Distributed transpose,,False,16206,https://api.github.com/repos/chapel-lang/chapel/pulls/16206,https://github.com/chapel-lang/chapel/pull/16206,closed,37,1,1,3,3,3,3,0,"[{'name': 'post-release'}, {'name': 'stat: cla signed'}, {'name': 'stat: developed under CLA'}]",2020-08-06 14:02:49+00:00,2020-12-09 21:57:55+00:00,10828506.0,"125 days, 7:55:06","[{'comment_id': 473243939, 'comment_body': 'Maybe `transposeDistribution` or `transposeDist` is a better name for this flag? Obivously, the default would be `false` in that case.\r\n\r\nThat argument can also be made `param`, but I do not have a strong preference one way or another.', 'comment_created': datetime.datetime(2020, 8, 19, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 473249310, 'comment_body': ""Both out of principle and consistency, I'd make this a `const`.\r\n\r\nFYI: we are working on finding ways of exploiting constness of domains to do some performance optimizations. I don't think it matters for this case, but in general there might be some benefits of using const domains in the future if that makes sense for the specific application."", 'comment_created': datetime.datetime(2020, 8, 19, 18, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 473250201, 'comment_body': 'I believe this is a TODO? Are you hoping to do that in this PR, if not maybe add an error for now.', 'comment_created': datetime.datetime(2020, 8, 19, 18, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}]","[{'commit_sha': '0de17ce59e20e9acccf3b58fc1be7fd440f0ebe9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7394e96254da5df1540a5f0ea83e7da9a7ec6533', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3b7c21861f761e172e74d1b153cf82bb7b48a411', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45
464036196,Native svd,- [x] Add tests,False,16205,https://api.github.com/repos/chapel-lang/chapel/pulls/16205,https://github.com/chapel-lang/chapel/pull/16205,closed,282,0,4,11,2,9,4,0,"[{'name': 'stat: Waiting on Contributor'}, {'name': 'post-release'}, {'name': 'stat: cla signed'}, {'name': 'stat: developed under CLA'}]",2020-08-06 13:42:34+00:00,2020-12-09 21:57:12+00:00,10829678.0,"125 days, 8:14:38","[{'comment_id': 470755829, 'comment_body': 'Good initial tests. I think it would be beneficial to cover some of the edge cases (over/under-determined matrices, singular matrices).\r\n\r\nThe [`scipy.linalg`](https://github.com/scipy/scipy/blob/master/scipy/linalg/tests/test_decomp.py#L1041-L1086) has some example cases to check against.\r\n\r\nIf we end up not adding complex support for this PR, we ought to add a future for it (let me know if you have any questions about that process).', 'comment_created': datetime.datetime(2020, 8, 14, 17, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 470758253, 'comment_body': ""Can this be written as something like this? (note: I didn't try this myself)\r\n\r\n```suggestion\r\n      scale = + reduce (abs(U[1..<m, i]));\r\n```"", 'comment_created': datetime.datetime(2020, 8, 14, 17, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 470758903, 'comment_body': 'Also, a performance test would be great, since we intend to optimize this implementation going forward.\r\n\r\nIn fact, getting LAPACK svd vs. Chapel svd on the same nightly performance-tracking plot could be really cool', 'comment_created': datetime.datetime(2020, 8, 14, 17, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 470759870, 'comment_body': 'This applies to a bunch of reductions below as well.', 'comment_created': datetime.datetime(2020, 8, 14, 17, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 470763978, 'comment_body': 'Even private helper functions deserve doc strings IMO.', 'comment_created': datetime.datetime(2020, 8, 14, 17, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 470765489, 'comment_body': ""These news args will need to be documented. Maybe we want 2 separate documented functions for svd since their interface doesn't 100% match."", 'comment_created': datetime.datetime(2020, 8, 14, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 471822446, 'comment_body': 'I would be in favor of having separate documentations until both interfaces can be unified', 'comment_created': datetime.datetime(2020, 8, 17, 23, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 471823397, 'comment_body': ""I did that because Damian mentioned something about it in the mailing lists - explicit forall loops performing better for reductions than array slicing. I'll double check the emails and perform some local testing as well to confirm"", 'comment_created': datetime.datetime(2020, 8, 17, 23, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 471823512, 'comment_body': ""I'll add those ASAP"", 'comment_created': datetime.datetime(2020, 8, 17, 23, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}]","[{'commit_sha': '3b85ab5520609f7ca108f390fadc5007e24846f9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e9551ab21e78db91b2a59520be0725aed47d7d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ae4c4ce2a0122496027e96b82074a827813f2b42', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2c3ece97c2ebb1eadbd073107ad3c5dd830f5bfe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e7234ed2922b50bba5a3d939c79b43636795c083', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2f0f41e502c2d1f7f45333a65b3772c654252075', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cb99a791e8ead1c0157d77dc7281bcb160a56acb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cc3c2c919705e928dab11c3736ebc9a1c120eef8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '243a02403e2b09c93786a571b6d43b93a39deb5f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b1761f5aaaf75e9ea2d7683b82429009b0709e2c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4d3fa823d6d019d643c0d116d5bce9a2a300533d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45
470176805,Add native implementation of inv (Gauss-Jordan Elimination),"- [ ] Add inplace implementation
- [x] Testing",False,16255,https://api.github.com/repos/chapel-lang/chapel/pulls/16255,https://github.com/chapel-lang/chapel/pull/16255,closed,104,0,4,23,3,8,3,0,"[{'name': 'post-release'}, {'name': 'stat: cla signed'}, {'name': 'stat: developed under CLA'}]",2020-08-19 13:47:27+00:00,2020-12-09 21:58:07+00:00,9706240.0,"112 days, 8:10:40","[{'comment_id': 477321810, 'comment_body': 'This can be a `compilerError`', 'comment_created': datetime.datetime(2020, 8, 26, 13, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 477321908, 'comment_body': 'This can be a compilerError', 'comment_created': datetime.datetime(2020, 8, 26, 13, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 477322274, 'comment_body': 'I believe `isSquare` covers this requirement as well, so we could drop this check.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 477322779, 'comment_body': 'Does this not work?\r\n\r\n```suggestion\r\n  var ACopy = A;\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 13, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 477322961, 'comment_body': '`Math` is always used by default.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 479865427, 'comment_body': ""compilerError doesn't work if the argument to inv is a call to another function that returns a 2-D matrix. halt does"", 'comment_created': datetime.datetime(2020, 8, 31, 3, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rahulghangas', 'type': 'User'}, {'comment_id': 482097425, 'comment_body': '```suggestion\r\n      This procedure is used when `lapackImpl=off` is used and currently\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 14, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}, {'comment_id': 482159573, 'comment_body': 'That seems like a bug in the compiler to me... Do you have a short example demonstrating this?', 'comment_created': datetime.datetime(2020, 9, 2, 15, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ben-albrecht', 'type': 'User'}]","[{'commit_sha': '9ee0b0de4eb7a0baae7151f913a5536deaed03a3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd118985d6db63b2ac323acc62ee00432b3f5117', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3cc0213a1401b3ea582d38689b788fc554727f56', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1a744fe4881b336c0a8ae25c88da5f8c85c22d8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6e352a956f78e6db004f01b48eec3ca5553f7c7d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4f9063dba219d149eff110003911faa5ae9f00e3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5c6c9cf13f0bcd3654646eed2303353a0a9be48', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3182cdccf75101fb65cab5e9ca53a2f964b37293', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8da04a61c7830fd991e0349ab1b1c357a5e71e8e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f5766c67777aa7d3863fda2e4b21503a1e967ae1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0e72ba446824dfda1b6fcf15f81ad7a5db079046', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fbe3e1372f26e7ac46c72ee1ae45e15da9dbe6c5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '31d186260539cd7c70e3d655078af26d9c2ca5de', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '32ab7cef319d2f20c9f1c1f7db39728dcf1fa51e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a8276ce3017b44de135f570586db1c2b651ed0a7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '07efdbecbb9f9c1324a51d56946774c83eff9671', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8510fcbde0080312c03ed30b271d4ef466f26954', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3b1744be9a22e14f1cd2738d6d61aa0e535383b8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f709ae78fd2cba4dfe75186040b193e2a6f47b0c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '34adb2da54960119a32f8546218dd093bcb443b7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5ebd1af713b0b0515a55e43373a59abbb64c79b6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4c6b855eff72fe7ef457a0793457a5b0cc0fcdfa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fcbc6f88fa76bce9976fd12b43b63e6a95f3e0fe', 'committer_username': 'rahulghangas', 'committer_name': 'Rahul Ghangas', 'committer_email': 'rahul@aeriuslabs.org', 'commit_date': datetime.datetime(2016, 9, 26, 11, 5, 41, tzinfo=datetime.timezone.utc)}]",Rahul Ghangas,22446515,rahul@aeriuslabs.org,User,,105,,40,45

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
21663285,chapel,chapel-lang/chapel,Chapel,415,1764,63,280,102377,2812,46,104,"[{'id': 470176805, 'number': 16255, 'closed': datetime.datetime(2020, 12, 9, 21, 58, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 13, 47, 27, tzinfo=datetime.timezone.utc), 'time_taken': 9706240.0, 'time_delta': '112 days, 8:10:40', 'additions': 104, 'deletions': 0, 'state': 'closed'}, {'id': 464048520, 'number': 16206, 'closed': datetime.datetime(2020, 12, 9, 21, 57, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 14, 2, 49, tzinfo=datetime.timezone.utc), 'time_taken': 10828506.0, 'time_delta': '125 days, 7:55:06', 'additions': 37, 'deletions': 1, 'state': 'closed'}, {'id': 464036196, 'number': 16205, 'closed': datetime.datetime(2020, 12, 9, 21, 57, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 13, 42, 34, tzinfo=datetime.timezone.utc), 'time_taken': 10829678.0, 'time_delta': '125 days, 8:14:38', 'additions': 282, 'deletions': 0, 'state': 'closed'}, {'id': 460440478, 'number': 16184, 'closed': datetime.datetime(2020, 12, 16, 18, 4, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 19, 42, 20, tzinfo=datetime.timezone.utc), 'time_taken': 11917346.0, 'time_delta': '137 days, 22:22:26', 'additions': 42, 'deletions': 3, 'state': 'closed'}, {'id': 458291874, 'number': 16160, 'closed': datetime.datetime(2020, 8, 19, 16, 21, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 8, 51, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1841406.0, 'time_delta': '21 days, 7:30:06', 'additions': 41, 'deletions': 16, 'state': 'closed'}, {'id': 457553733, 'number': 16147, 'closed': datetime.datetime(2020, 12, 9, 21, 59, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 4, 55, 5, tzinfo=datetime.timezone.utc), 'time_taken': 11639089.0, 'time_delta': '134 days, 17:04:49', 'additions': 211, 'deletions': 0, 'state': 'closed'}, {'id': 455098172, 'number': 16107, 'closed': datetime.datetime(2020, 12, 9, 21, 59, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 12, 49, 59, tzinfo=datetime.timezone.utc), 'time_taken': 12128969.0, 'time_delta': '140 days, 9:09:29', 'additions': 122, 'deletions': 5, 'state': 'closed'}, {'id': 455080647, 'number': 16106, 'closed': datetime.datetime(2020, 8, 17, 17, 28, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 12, 15, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2265223.0, 'time_delta': '26 days, 5:13:43', 'additions': 20, 'deletions': 4, 'state': 'closed'}, {'id': 449529036, 'number': 16077, 'closed': datetime.datetime(2020, 7, 24, 0, 51, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 14, 42, 42, tzinfo=datetime.timezone.utc), 'time_taken': 727709.0, 'time_delta': '8 days, 10:08:29', 'additions': 41, 'deletions': 42, 'state': 'closed'}, {'id': 443929895, 'number': 16005, 'closed': datetime.datetime(2020, 7, 21, 0, 5, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 8, 36, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1524527.0, 'time_delta': '17 days, 15:28:47', 'additions': 0, 'deletions': 2, 'state': 'closed'}, {'id': 443260675, 'number': 15996, 'closed': datetime.datetime(2020, 12, 14, 18, 32, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 4, 7, 57, tzinfo=datetime.timezone.utc), 'time_taken': 14307879.0, 'time_delta': '165 days, 14:24:39', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 441917785, 'number': 15977, 'closed': datetime.datetime(2020, 7, 1, 8, 2, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 9, 57, 34, tzinfo=datetime.timezone.utc), 'time_taken': 79481.0, 'time_delta': '22:04:41', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 441913431, 'number': 15976, 'closed': datetime.datetime(2020, 8, 17, 15, 54, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 9, 50, 2, tzinfo=datetime.timezone.utc), 'time_taken': 4169074.0, 'time_delta': '48 days, 6:04:34', 'additions': 82, 'deletions': 4, 'state': 'closed'}, {'id': 433974923, 'number': 15835, 'closed': datetime.datetime(2020, 7, 20, 23, 40, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 7, 59, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3253273.0, 'time_delta': '37 days, 15:41:13', 'additions': 152, 'deletions': 0, 'state': 'closed'}, {'id': 432855248, 'number': 15813, 'closed': datetime.datetime(2020, 6, 11, 11, 34, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 5, 51, 46, tzinfo=datetime.timezone.utc), 'time_taken': 20568.0, 'time_delta': '5:42:48', 'additions': 15, 'deletions': 15, 'state': 'closed'}, {'id': 406233902, 'number': 15557, 'closed': datetime.datetime(2020, 4, 21, 21, 44, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 18, 42, 59, tzinfo=datetime.timezone.utc), 'time_taken': 97318.0, 'time_delta': '1 day, 3:01:58', 'additions': 28, 'deletions': 1, 'state': 'closed'}, {'id': 384765581, 'number': 15109, 'closed': datetime.datetime(2020, 6, 30, 18, 41, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 11, 12, 55, tzinfo=datetime.timezone.utc), 'time_taken': 10049292.0, 'time_delta': '116 days, 7:28:12', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 383111113, 'number': 15063, 'closed': datetime.datetime(2020, 6, 15, 21, 3, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 3, 18, 39, 13, tzinfo=datetime.timezone.utc), 'time_taken': 8994285.0, 'time_delta': '104 days, 2:24:45', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 383088320, 'number': 15062, 'closed': datetime.datetime(2020, 6, 9, 1, 42, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 3, 17, 45, 27, tzinfo=datetime.timezone.utc), 'time_taken': 8409409.0, 'time_delta': '97 days, 7:56:49', 'additions': 67, 'deletions': 0, 'state': 'closed'}, {'id': 363713559, 'number': 14764, 'closed': datetime.datetime(2020, 3, 4, 17, 54, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 16, 15, 45, 54, tzinfo=datetime.timezone.utc), 'time_taken': 4154940.0, 'time_delta': '48 days, 2:09:00', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 363109263, 'number': 14754, 'closed': datetime.datetime(2020, 3, 3, 18, 21, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 12, 17, 58, tzinfo=datetime.timezone.utc), 'time_taken': 4168991.0, 'time_delta': '48 days, 6:03:11', 'additions': 21, 'deletions': 0, 'state': 'closed'}]"
