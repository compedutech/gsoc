pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
395811882,"Fix #7590: Python, HTML, CSS, Js/Ts lint tests","## Overview
<!--
READ ME FIRST: Please answer *both* questions below and check off every point from the essential checklist!
-->

1. This PR fixes #7590 
2. This PR does the following: Adds tests for lint checks in `pre_commit_linter.py`

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,8947,https://api.github.com/repos/oppia/oppia/pulls/8947,https://github.com/oppia/oppia/pull/8947,closed,6531,167,117,113,48,222,1,1,[{'name': 'PR: Affects datastore layer'}],2020-03-30 18:07:30+00:00,2020-06-30 20:22:38+00:00,7956908.0,"92 days, 2:15:08","[{'comment_id': 436273309, 'comment_body': 'Move this above line 238, also update the method docstring accordingly. Can you explain why are we excluding this dir here?', 'comment_created': datetime.datetime(2020, 6, 6, 14, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436273490, 'comment_body': 'Update docstring', 'comment_created': datetime.datetime(2020, 6, 6, 14, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436274217, 'comment_body': 'Ditto as above. [I would also suggest to create a method in test_utils for this and use it in all the places.]', 'comment_created': datetime.datetime(2020, 6, 6, 14, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436274452, 'comment_body': 'Any specific reason to place these files here? [COnsidering this is not related to the ""core"" project, right?]', 'comment_created': datetime.datetime(2020, 6, 6, 14, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436274494, 'comment_body': 'Either use `scripts.pre_commit_linter_test` or `scripts/pre_commit_linter_test.py`', 'comment_created': datetime.datetime(2020, 6, 6, 14, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436274584, 'comment_body': 'The file name should explain that this file contain invalid docstring? [not sure!]', 'comment_created': datetime.datetime(2020, 6, 6, 14, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436274609, 'comment_body': ""I don't think this is a valid docstring pattern."", 'comment_created': datetime.datetime(2020, 6, 6, 14, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436274648, 'comment_body': 'I was expecting this to be an invalid case [as per the filename.]', 'comment_created': datetime.datetime(2020, 6, 6, 14, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436274744, 'comment_body': 'Are we expecting to have subtypes of the tuple elements in the docstring?', 'comment_created': datetime.datetime(2020, 6, 6, 14, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436274803, 'comment_body': 'is this test file use for specific type of lint tests? If yes, then please include it in the filename and the fileoverview docstring! [Ditto here and elsewhere]', 'comment_created': datetime.datetime(2020, 6, 6, 14, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436275985, 'comment_body': 'Can we make this a small file? [not sure!]', 'comment_created': datetime.datetime(2020, 6, 6, 15, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436276063, 'comment_body': 'Fix the pattern of the fileoverview here. [Also, use 80 spaces whereever possible.]', 'comment_created': datetime.datetime(2020, 6, 6, 15, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436276447, 'comment_body': 'Do we need `*` here', 'comment_created': datetime.datetime(2020, 6, 6, 15, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436276612, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 6, 6, 15, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436276622, 'comment_body': 'Ditto here and elsewhere', 'comment_created': datetime.datetime(2020, 6, 6, 15, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436276678, 'comment_body': 'Do we need to add a proper docstring here and elsewwhere? [Like a newline before Args]', 'comment_created': datetime.datetime(2020, 6, 6, 15, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436276726, 'comment_body': 'Add proper docstring*', 'comment_created': datetime.datetime(2020, 6, 6, 15, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436276841, 'comment_body': 'Start with `I` (caps), also include more info like for whcih kinda test this file is used (here and in all other similar files)', 'comment_created': datetime.datetime(2020, 6, 6, 15, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436276899, 'comment_body': 'Move this to the line above*', 'comment_created': datetime.datetime(2020, 6, 6, 15, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436276960, 'comment_body': 'Unable to understand the useage of this file with the given filename*', 'comment_created': datetime.datetime(2020, 6, 6, 15, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436277198, 'comment_body': 'Fliename is not very explanatory', 'comment_created': datetime.datetime(2020, 6, 6, 15, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436277531, 'comment_body': ""`'IMPORT_STATEMENT'`"", 'comment_created': datetime.datetime(2020, 6, 6, 15, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436277803, 'comment_body': 'Can we avoid generating test for these files instead of ignoring the coverage report?', 'comment_created': datetime.datetime(2020, 6, 6, 15, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436277852, 'comment_body': ""I don't think we should assume that the parent dir to be opensource"", 'comment_created': datetime.datetime(2020, 6, 6, 15, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436277930, 'comment_body': 'Add a newline above', 'comment_created': datetime.datetime(2020, 6, 6, 15, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436278035, 'comment_body': 'Define this before mock_print maybe?', 'comment_created': datetime.datetime(2020, 6, 6, 15, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436278130, 'comment_body': 'Do we need to assert to verify that thise execution takes place.', 'comment_created': datetime.datetime(2020, 6, 6, 15, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436278255, 'comment_body': 'Any specific reason for this change?', 'comment_created': datetime.datetime(2020, 6, 6, 15, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436278299, 'comment_body': 'Update docstring accordingly! [I was expecting linte test tof ial, is taht correct?]', 'comment_created': datetime.datetime(2020, 6, 6, 15, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436278330, 'comment_body': 'Thanks for these changes! :)', 'comment_created': datetime.datetime(2020, 6, 6, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436278389, 'comment_body': 'codeowner_pattern_check_failed*', 'comment_created': datetime.datetime(2020, 6, 6, 15, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436278528, 'comment_body': ""Do we need to kwwp this ins sync with CODEOWNER file? [I don't think so still if yes the add a comment heraeand in the CODEOWNER file asking users to keep this in sync.]"", 'comment_created': datetime.datetime(2020, 6, 6, 15, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436384401, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384451, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384465, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384544, 'comment_body': 'This (as well as the other two files) search for all the python files in core/ or extensions/, so we have to ignore linter_tests since it contains ""mock"" python files used for testing.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384613, 'comment_body': 'It is instructed in the issue to place files here.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384654, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384706, 'comment_body': 'Fixed the docstring.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384720, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384736, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384781, 'comment_body': 'Added subtypes.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384804, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384831, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384849, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384868, 'comment_body': 'Added *', 'comment_created': datetime.datetime(2020, 6, 7, 17, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384881, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384901, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384920, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384956, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384962, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436384977, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385017, 'comment_body': 'This file contain `browsed.explore()` which is prohibited to use in the codebase.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385027, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385123, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385212, 'comment_body': 'I have no idea about this, maybe @marianazangrossi suggest something.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385227, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385251, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385269, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385287, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385413, 'comment_body': 'we are using a global variable across modules, I think that may not be the best practice to use a variable like that. Tests are also not running with that configuration.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385439, 'comment_body': ""Done. I didn't understand the last line. Sorry:)"", 'comment_created': datetime.datetime(2020, 6, 7, 17, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385473, 'comment_body': 'No problem :)', 'comment_created': datetime.datetime(2020, 6, 7, 17, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385504, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436385541, 'comment_body': 'No it is not necessary.', 'comment_created': datetime.datetime(2020, 6, 7, 17, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436387458, 'comment_body': ""```suggestion\r\nif (not (directory.startswith('./core/') or\r\n         directory.startswith('./extensions/'))):\r\n    continue\r\nelif directory.startswith('./core/tests/linter_tests/'):\r\n    continue"", 'comment_created': datetime.datetime(2020, 6, 7, 18, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 436877462, 'comment_body': 'Could we please add what is invalid here -- `there should be line break between two constants declaration`?\r\n\r\n(Ditto for all invalid files)', 'comment_created': datetime.datetime(2020, 6, 8, 17, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 436877680, 'comment_body': 'Missing copyright?', 'comment_created': datetime.datetime(2020, 6, 8, 17, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 436879866, 'comment_body': 'We also have a file `invalid_constant.ajs.ts` and this is `invalid_constant.constants.ajs.ts`. Is this intentional?', 'comment_created': datetime.datetime(2020, 6, 8, 17, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 438745342, 'comment_body': 'I think file names are self-explanatory (except one or two files :) -- will fix them in next commit)', 'comment_created': datetime.datetime(2020, 6, 11, 12, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 438745525, 'comment_body': ""I don't think we have copyright for HTML files"", 'comment_created': datetime.datetime(2020, 6, 11, 12, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 438745601, 'comment_body': 'This is intentional', 'comment_created': datetime.datetime(2020, 6, 11, 12, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 441985331, 'comment_body': 'There must be some intent behind that configuration can you please git blame that line and talk to the author about this changes? ', 'comment_created': datetime.datetime(2020, 6, 18, 5, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 441988092, 'comment_body': 'I am the one who added that line when I splitted the linter in different modules. I was trying to reduce number of arguments passed, so I used it as a global variable.', 'comment_created': datetime.datetime(2020, 6, 18, 6, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 443215025, 'comment_body': 'What is wrong in this file? ', 'comment_created': datetime.datetime(2020, 6, 21, 12, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 443215048, 'comment_body': '(Include that in a comment)', 'comment_created': datetime.datetime(2020, 6, 21, 12, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 443215064, 'comment_body': 'Okay got it.', 'comment_created': datetime.datetime(2020, 6, 21, 12, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 443215130, 'comment_body': '(Also, add a top comment what is wrong in this file too)', 'comment_created': datetime.datetime(2020, 6, 21, 12, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 443403746, 'comment_body': ""Is there any issue with moving all these lint related test files to be inside `core/linter/tests/`? Basically I'm trying not to add anything related to lint inside the `/core` folder. [Core folder has only the things related to the core project/app]"", 'comment_created': datetime.datetime(2020, 6, 22, 8, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443404358, 'comment_body': 'Add `*` at the beginning', 'comment_created': datetime.datetime(2020, 6, 22, 8, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443409831, 'comment_body': ""Can you please add specific invalid syntax i.e, which kind of syntax error we expect from this file? This will help anyone writing a new test to understand the expectation of this test file. As of now I completely don't understand the exact usage of this file. (Change the filename and file overview to make it explicit. You can add a comment above the line which you expect to through lint errors to make it more specific.)\r\n\r\n@ankita240796 Do you have any suggestions on what pattern should we follow for these files to make these test files more informative about the expected issue in the file? (Asking you as you have added such test before in the release script)\r\n\r\nFollow this pattern in all other files."", 'comment_created': datetime.datetime(2020, 6, 22, 8, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443780382, 'comment_body': 'Please make it clear throgh the fileoverview and an inline (or on top of the line) comment around the line which is going to fail', 'comment_created': datetime.datetime(2020, 6, 22, 19, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443782247, 'comment_body': ""I've suggested a way above i.e, to move lnt related test files to linetr foolder, will that be helpful?"", 'comment_created': datetime.datetime(2020, 6, 22, 19, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443782864, 'comment_body': 'Add type of the variable', 'comment_created': datetime.datetime(2020, 6, 22, 19, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443783882, 'comment_body': ""Why can't we aseert the whole output?"", 'comment_created': datetime.datetime(2020, 6, 22, 19, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443785315, 'comment_body': ""Write a seperate test class for `TaskThread` and write unit test for each method in this class. (Can you please check the test coverage for this file it doesn't seems 100% to me? If it's 100% then I don't think it covers all possible cases in the test.)  "", 'comment_created': datetime.datetime(2020, 6, 22, 19, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443785952, 'comment_body': 'Are we expecting the first arg to be a function?', 'comment_created': datetime.datetime(2020, 6, 22, 19, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443790157, 'comment_body': 'Why `-1`?', 'comment_created': datetime.datetime(2020, 6, 22, 19, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443792087, 'comment_body': ""Can you please follow the guiedlines to write test function name? (I'm not sure what are we testing here)\r\nhttps://github.com/oppia/oppia/wiki/Writing-backend-tests#guidelines-for-writing-good-tests\r\n\r\n(Follow the guideline pattern here and elsewhere)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 22, 19, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443793621, 'comment_body': 'are we using the original codeowner file here?', 'comment_created': datetime.datetime(2020, 6, 22, 20, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443799712, 'comment_body': 'This looks like a duplicate function, can we use assertSetEqual or assertSequenceEqual? If no, then change the name of this function to assert_same_list_elements and move it to test_utils.', 'comment_created': datetime.datetime(2020, 6, 22, 20, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443800076, 'comment_body': 'Why these changes?', 'comment_created': datetime.datetime(2020, 6, 22, 20, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443800132, 'comment_body': 'Ditto?', 'comment_created': datetime.datetime(2020, 6, 22, 20, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443800311, 'comment_body': 'Can you please explain this changes?', 'comment_created': datetime.datetime(2020, 6, 22, 20, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443800543, 'comment_body': ""Please follow the general pattern for the return's doc string"", 'comment_created': datetime.datetime(2020, 6, 22, 20, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443801005, 'comment_body': 'Why this changes?', 'comment_created': datetime.datetime(2020, 6, 22, 20, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443801316, 'comment_body': 'Please change this to follow the general docstring pattern', 'comment_created': datetime.datetime(2020, 6, 22, 20, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 443801945, 'comment_body': 'Is this the same fileCache shared among all the linters?', 'comment_created': datetime.datetime(2020, 6, 22, 20, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 444331225, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 6, 23, 15, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444336526, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444336828, 'comment_body': 'This is bug introduced by me in a past PR, which is fixed here.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444338278, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444339108, 'comment_body': 'This check was not catching anything before, now I changed it to catch `map` if it found a pattern like `something(map())`)', 'comment_created': datetime.datetime(2020, 6, 23, 16, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444340065, 'comment_body': 'This is a python method, before linter is checking it in every file but now it will be checked in python files only.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444340657, 'comment_body': '__author__ tag is only used in python only, so I moved it to python regexes', 'comment_created': datetime.datetime(2020, 6, 23, 16, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444363080, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444363427, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2020, 6, 23, 16, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444365214, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444365498, 'comment_body': 'This is to remove one important pattern from the important path list', 'comment_created': datetime.datetime(2020, 6, 23, 16, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444365597, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2020, 6, 23, 16, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444367381, 'comment_body': 'All cases are covered already', 'comment_created': datetime.datetime(2020, 6, 23, 16, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444367734, 'comment_body': ""No, we can't assert the whole output because time is printed with it which is variable."", 'comment_created': datetime.datetime(2020, 6, 23, 16, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444368494, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444368693, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444431518, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 18, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444432932, 'comment_body': 'The way you suggested they will still be in `/core` folder.', 'comment_created': datetime.datetime(2020, 6, 23, 18, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444455736, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 19, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444529858, 'comment_body': 'Ah sorry I mean `scripts/linter/tests/*` or `scripts/linter/test_files/*`', 'comment_created': datetime.datetime(2020, 6, 23, 21, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 444699290, 'comment_body': 'Done.\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 7, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444966120, 'comment_body': 'Please indent hanging lines of arg docs by 4 spaces.', 'comment_created': datetime.datetime(2020, 6, 24, 15, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 445115770, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 24, 19, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445392381, 'comment_body': '>  (Change the filename and file overview to make it explicit. You can add a comment above the line which you expect to through lint errors to make it more specific.)\r\n\r\nThis is not yet resolved!', 'comment_created': datetime.datetime(2020, 6, 25, 8, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445393654, 'comment_body': ""No, I don't see a test for the TaskThread class. Can you please add an explicit unit test class for the TaskThread class?"", 'comment_created': datetime.datetime(2020, 6, 25, 8, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445394039, 'comment_body': ""Then why `test_function('unused_arg')`? I mean that's the output of the function not the function, right?"", 'comment_created': datetime.datetime(2020, 6, 25, 8, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445394804, 'comment_body': '`test_extra_important_patterns_in_the_codeowner_file`, the name of the test function contains ""extra"" and we are removing the existing files, I don\'t understand, can you explain?', 'comment_created': datetime.datetime(2020, 6, 25, 8, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445396205, 'comment_body': ""Should we avoid using the original file for the lint test? Can you explain why can't we use the dummy CODEOWNER file to test the success message? [I mean this would again be like running the CODEOWNER checks using test files isn't it?]"", 'comment_created': datetime.datetime(2020, 6, 25, 8, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445396666, 'comment_body': 'Which you have used `assertSetEqual or assertSequenceEqual` or a separate function? If the later one then why, can you explain?', 'comment_created': datetime.datetime(2020, 6, 25, 8, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445397167, 'comment_body': 'Why regex, earlier it was a simple string check right? Which is comparatively faster, right?', 'comment_created': datetime.datetime(2020, 6, 25, 8, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445397503, 'comment_body': ""I've left a follow up comment above, PTAL!  "", 'comment_created': datetime.datetime(2020, 6, 25, 8, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445405992, 'comment_body': '@Hudda is this resolved?', 'comment_created': datetime.datetime(2020, 6, 25, 8, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445410000, 'comment_body': ""Why you are fixing it here, We should have created a separate PR to fix it and  get it merged quickly! (It's creating a problem on develop isn't it)?"", 'comment_created': datetime.datetime(2020, 6, 25, 8, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445416737, 'comment_body': 'There must be a builtin method for this in UnitTest class, have you checked?', 'comment_created': datetime.datetime(2020, 6, 25, 9, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445417327, 'comment_body': 'add correct file path', 'comment_created': datetime.datetime(2020, 6, 25, 9, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445417609, 'comment_body': 'do we still need these?', 'comment_created': datetime.datetime(2020, 6, 25, 9, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445418935, 'comment_body': 'rename this as per wiki guidelines (ditto eleswhere)', 'comment_created': datetime.datetime(2020, 6, 25, 9, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445421464, 'comment_body': 'do you think this should be more specific to lint class instead of lint function ?', 'comment_created': datetime.datetime(2020, 6, 25, 9, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445423954, 'comment_body': 'As mentioned before (in multiple comments),  please add a proper return docstring! (I would suggest you to take a slef-review pass after pusing any new changes and before assigning reviewers!)', 'comment_created': datetime.datetime(2020, 6, 25, 9, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445426386, 'comment_body': 'Should we print this only when the verbose mode enabled?', 'comment_created': datetime.datetime(2020, 6, 25, 9, 25, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445428189, 'comment_body': 'Any specific reason for defining these globally? Can we define this in the setUp?', 'comment_created': datetime.datetime(2020, 6, 25, 9, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445430942, 'comment_body': ""I see this same as the one defined in codeowner_linter.py file, co can you confirm taht we don't need to do any changes here if we change `CODEOWNER_IMPORTANT_PATHS` in the codeowner_linter file?"", 'comment_created': datetime.datetime(2020, 6, 25, 9, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445432626, 'comment_body': ""Are we testing the real CODEOWNER file here? If yes, then I think the scope of this test is to test the function not the CODEOWNER files so I would sugest you to use mock CODEOWNER file so that if we add a remove new important files we don't have to change here!"", 'comment_created': datetime.datetime(2020, 6, 25, 9, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445433341, 'comment_body': 'Please use remove(item) to make it explicit which filepath you are removing and it should sync with the failure message.', 'comment_created': datetime.datetime(2020, 6, 25, 9, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445438968, 'comment_body': ""The setup section for this test doesn't make sense, I'm not sure what `MOCK_CODEOWNER_FILEPATH` contains, can you please make it more explicit, like change the filename from invalid_codeowner to codeowner_with_duplicate_patterns and also change the `MOCK_CODEOWNER_FILEPATH` to `MOCK_CODEOWNER_WITH_DUPLICATE_PATTERN_FILEPATH` (or somthing around that line)"", 'comment_created': datetime.datetime(2020, 6, 25, 9, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445440641, 'comment_body': ""There is just one item in the list why can't we use assertEqual?"", 'comment_created': datetime.datetime(2020, 6, 25, 9, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445442598, 'comment_body': ""Ditto why can't we use assrtEqual or assertRegexp or assertTrue with string.contains?"", 'comment_created': datetime.datetime(2020, 6, 25, 9, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445443210, 'comment_body': 'Ditto as above create a seperate test file for each cases with more explicit file names. ', 'comment_created': datetime.datetime(2020, 6, 25, 9, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445444478, 'comment_body': ""Make it:\r\n```\r\n test_utils.assert_same_list_elements([\r\n    '.....'\r\n    '....'])\r\n\r\n```\r\nDito else where.(Following break line after parenthesis if the params are spraded in multilines)"", 'comment_created': datetime.datetime(2020, 6, 25, 9, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445456816, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445460865, 'comment_body': 'We need to use it, else frontend checks coverage is failing', 'comment_created': datetime.datetime(2020, 6, 25, 10, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445461665, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445463040, 'comment_body': ""We can't test TaskThread class directly, we need to test it through execute_tasks method. That's what I have done."", 'comment_created': datetime.datetime(2020, 6, 25, 10, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445463856, 'comment_body': 'Here we are passing the function and testing it is output, if it runs successfully then we receive the expected output, else the test fails.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445464412, 'comment_body': 'I have changed the name, here we are testing if the critical section in critical section file have the same files as the important_patterns list in codeowner_linter.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445467219, 'comment_body': ""Why can't we do `self.assert_same_list_elements`? Also, why we have two nested assert?"", 'comment_created': datetime.datetime(2020, 6, 25, 10, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445468074, 'comment_body': ""Can you follow the pattern I've mentioned above throught this file?"", 'comment_created': datetime.datetime(2020, 6, 25, 10, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445468382, 'comment_body': 'Why this param? Please avoid using param', 'comment_created': datetime.datetime(2020, 6, 25, 10, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445468896, 'comment_body': 'Any specific reason for having this as a global contant? Can we move this to the setUp section? ', 'comment_created': datetime.datetime(2020, 6, 25, 10, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445469693, 'comment_body': 'Used dummy file.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445469800, 'comment_body': 'Looks like this method is used in multiple places. Should we move this to GenericTestBase or create a new LinterTestBase and use it (this will also include self.linter_out)?', 'comment_created': datetime.datetime(2020, 6, 25, 10, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445471462, 'comment_body': ""Because we are not checking just checking a sequence, we are checking parts of a message.\r\nFor example: `home/opensource/oppia/scripts\\n 18:16 x This line has an error    error-name`\r\nwe are only checking parts, we are passing a list and checking that list `['18:16', 'This line has an error']`"", 'comment_created': datetime.datetime(2020, 6, 25, 10, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445471822, 'comment_body': 'Please follow the test function name pattern provided in the wiki page.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445472009, 'comment_body': 'Yeah but before it is checking all the files including HTML, CSS, TS etc, which is taking extra time, now it will only check python file.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445472116, 'comment_body': 'before it is checking all the files including HTML, CSS, TS etc, which is taking extra time, now it will only check python file.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445472830, 'comment_body': 'No, it is not creating problems on develop, it will only cause problem if we have TODO as the last of the comment. I fixed it here becuase I found this while writing test for TODO check.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445473000, 'comment_body': 'Can we write this bfore `with` block?', 'comment_created': datetime.datetime(2020, 6, 25, 10, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445475793, 'comment_body': ""break after parenthesis, follow the patterns I've suggested in the above file. (Ditto elaswhere in this file.)"", 'comment_created': datetime.datetime(2020, 6, 25, 10, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445476418, 'comment_body': ""I'm unable to understand this can you please explain?"", 'comment_created': datetime.datetime(2020, 6, 25, 11, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445717040, 'comment_body': ""I see, that's a goof inding, thanks for moving it."", 'comment_created': datetime.datetime(2020, 6, 25, 17, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445717419, 'comment_body': 'Can you add a link to the line which this failed to check? I just wanted to see!', 'comment_created': datetime.datetime(2020, 6, 25, 17, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445717599, 'comment_body': 'Use type in the arg', 'comment_created': datetime.datetime(2020, 6, 25, 17, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445717870, 'comment_body': 'I see thanks for the explanation.', 'comment_created': datetime.datetime(2020, 6, 25, 17, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445718282, 'comment_body': 'Ditto as above add type not variable name. see other docstring for references. ', 'comment_created': datetime.datetime(2020, 6, 25, 17, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445719655, 'comment_body': 'Why is this file excluded?', 'comment_created': datetime.datetime(2020, 6, 25, 17, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445720389, 'comment_body': 'This is confusing please add a better name for `temp and tmp`', 'comment_created': datetime.datetime(2020, 6, 25, 17, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445778536, 'comment_body': 'Yep, but there is not any method for this.', 'comment_created': datetime.datetime(2020, 6, 25, 19, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445780140, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 25, 19, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445780226, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 6, 25, 19, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445781763, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 25, 19, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445782816, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 25, 19, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445788747, 'comment_body': ""I found that there isn't any link class for codeowner so ignore this comment!"", 'comment_created': datetime.datetime(2020, 6, 25, 19, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446016974, 'comment_body': 'No, this is an important part of the testing, we are storing these print messages in a list and then checking if the test has failed or not.', 'comment_created': datetime.datetime(2020, 6, 26, 7, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446025825, 'comment_body': 'I think it is better to have file paths and important_paths at the top of file, it will be easy to add more paths in the future if needed.', 'comment_created': datetime.datetime(2020, 6, 26, 7, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446026679, 'comment_body': ""no, we don't need to do any changes here if we change `CODEOWNER_IMPORTANT_PATHS`"", 'comment_created': datetime.datetime(2020, 6, 26, 7, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446037155, 'comment_body': ""We have the same pattern in all test files, so I don't want to change it. In other files, there are more than 60 files. we can't move that much files to the setUp()."", 'comment_created': datetime.datetime(2020, 6, 26, 8, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446037307, 'comment_body': 'Used a mock file.', 'comment_created': datetime.datetime(2020, 6, 26, 8, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446037358, 'comment_body': 'It is not possible to do that, it will remove that item from the main list and we need it at many places', 'comment_created': datetime.datetime(2020, 6, 26, 8, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446042557, 'comment_body': 'Because this file contains the regexes for bad patterns, if we run those checks on this files, then we get too many positives.', 'comment_created': datetime.datetime(2020, 6, 26, 8, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446044722, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 8, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446045795, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 8, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446045903, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 8, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446049611, 'comment_body': ""Sorry my mistake here, I don't why I change it, changed back to original, it is working fine"", 'comment_created': datetime.datetime(2020, 6, 26, 8, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446050262, 'comment_body': 'This is to check if a file path does not exist, then we are checking if it fail or not', 'comment_created': datetime.datetime(2020, 6, 26, 8, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446112219, 'comment_body': 'I used a comment to specify which element we are removing', 'comment_created': datetime.datetime(2020, 6, 26, 10, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446113977, 'comment_body': 'Becuase we get message like this `[u""/home/jaat/opensource/oppia/scripts/linters/test_files/valid_codeowners --> Rule /.github/stale.yml is not present in the CODEOWNER_IMPORTANT_PATHS list in scripts/linters/pre_commit_linter.py. Please add this rule in the mentioned list or remove this rule from the \'Critical files\' section."", u\'FAILED  CODEOWNERS file coverage check failed, see messages above for files that need to be added or patterns that need to be fixed.\']` and we need to check just some parts of it.', 'comment_created': datetime.datetime(2020, 6, 26, 10, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446131674, 'comment_body': ""and it's just one example, sometime we get more"", 'comment_created': datetime.datetime(2020, 6, 26, 11, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446131725, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 11, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446131877, 'comment_body': 'I have answered it above\r\n', 'comment_created': datetime.datetime(2020, 6, 26, 11, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446131927, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 11, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446132440, 'comment_body': 'Because we need to check if assert_same_list_file function returned true or not', 'comment_created': datetime.datetime(2020, 6, 26, 11, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446133961, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 11, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446134132, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 11, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446134400, 'comment_body': ""We can't avoid this, I have checked it, even Ankita has used it like this."", 'comment_created': datetime.datetime(2020, 6, 26, 11, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446134668, 'comment_body': ""Yes, in future there might be many other files, we can't fit that many files in setUp, that looks kinda bad."", 'comment_created': datetime.datetime(2020, 6, 26, 11, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446135318, 'comment_body': ""This method is not related to Linter, it is used in most of the test files(also, in files other than linter), but in a modified way at every place, so we can't transfer it in lnter_utils."", 'comment_created': datetime.datetime(2020, 6, 26, 11, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446135409, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 11, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446137314, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 11, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446137362, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 11, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446503736, 'comment_body': 'Move tis method to GenericTest class also this method should assert value instead of returning a boolean value.', 'comment_created': datetime.datetime(2020, 6, 27, 9, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446504517, 'comment_body': 'My questions is why we need to generate coverage for this file? Can we avoid doing that?', 'comment_created': datetime.datetime(2020, 6, 27, 9, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446997228, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 6, 29, 14, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446998629, 'comment_body': 'Because tmp directory was not being deleted before if that has some files in it.', 'comment_created': datetime.datetime(2020, 6, 29, 14, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446999475, 'comment_body': 'I have fixed it already.', 'comment_created': datetime.datetime(2020, 6, 29, 14, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447000163, 'comment_body': ""This looks like a random code, why tests are handling this? Can you explain what's going on here? Can we move this to setUp section (if required in the worst case)?"", 'comment_created': datetime.datetime(2020, 6, 29, 14, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447000552, 'comment_body': ""We do not have a GenericTest class we have this: GenericTestBase = AppEngineTestBase, that's why i moved it to AppEngineTestBase"", 'comment_created': datetime.datetime(2020, 6, 29, 14, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447002179, 'comment_body': ""Our linter is compiling all files at ones and due to that we had slow running tests, now I mocked that function to compile only that file which we need. and we need to delete that compiled temp file after tests that's why we need it."", 'comment_created': datetime.datetime(2020, 6, 29, 14, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447002210, 'comment_body': 'Sorry this was an old comment* [Marking resolved!]', 'comment_created': datetime.datetime(2020, 6, 29, 14, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447003020, 'comment_body': ""Then change the `clean.delete_directory_tree` if that's not working as expected?"", 'comment_created': datetime.datetime(2020, 6, 29, 14, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447004453, 'comment_body': 'That file is being used in many places, even we have this same code before David changed the structure.', 'comment_created': datetime.datetime(2020, 6, 29, 14, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447005491, 'comment_body': ""No, these files are generated by the third party import and if we want to avoid generate coverage then we have to add all these files in `NOT_FULLY_COVERED_FILENAMES` list which I don't think is a good idea."", 'comment_created': datetime.datetime(2020, 6, 29, 14, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447011063, 'comment_body': 'SetUp works like that:\r\n\r\n> The setUp() and tearDown() methods allow you to define instructions that will be executed before and after each test method. They are covered in more detail in the section Organizing test code.\r\n\r\n\r\nmaybe you can use tearDown to reduce code duplication?', 'comment_created': datetime.datetime(2020, 6, 29, 14, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447012999, 'comment_body': 'Okay, I will take a look at the documentation.', 'comment_created': datetime.datetime(2020, 6, 29, 14, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447055976, 'comment_body': ""Hi all, I think a way to avoid it is to include these files in `combined-tests.spec.ts`. You can include it on the regex and then run frontend tests and check if it's being reported."", 'comment_created': datetime.datetime(2020, 6, 29, 15, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'marianadasilvadev', 'type': 'User'}]","[{'commit_sha': 'dc4488f13219d2d20b0ef40b90db8d509eddbf20', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebe8e41db1f0180789ff9efbe4c389983425939c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd887289168472932d483fc53fa1ed3740a3a3763', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc31b3e6918d4a09a669b13a7c8ac0398be561d0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85e2478c66024c21fc384921417c047cbaaaeb2e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f14bcf29317aac51c7ed21e71558e3e58fb32cdb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c446a6f69990ca41a6b520a665a1c34089da13', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3543d3cf7461c8af03f92b85b07a3193a24ea8e5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '576c1875e0539801dbc591d032c5ccf6b3361378', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e238d2295763f17d56f1b4c62f51b32ebaaa4726', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bafccd9d1d74694a47a02bec0b46b497e02fdc0c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6884a7b268b93bf402f2ef313bdee8429d0f2ea3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26379a2f03f9a95dc6bfb506f7bf6a3a6f6253fe', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d07d2c0e7576d2afa2cc6b2133fe603cbd8fe24', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f551bc5bdcd0ccaab84633a08c43c7ec2120bae0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7134e819aeabc62a1128effbc181eb3acc40c022', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dff3c39b1cc854ce8affec5f8019ee7abf6c33d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f3a74f6e9c130a0adf459f72369159a9d7e7705', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46ded4c27cac62aff24dc800bb810007669316a7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2cdbb277c06cda31893ad8ae6e88576900df156', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a04b52b8df47ae3b8a1b8b32484fc3434b4d50', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8eaea2c61bfcd5126885e7214f49d8a1eceeb5d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '243e999a93b3199af0e8e196b68b0e36fdd2e201', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bb90f0172a101c9db11e839f814a3406a9676b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c218b110ffabb8029a416af2c8bf1332b4a1088', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1ec35e12147a8fe9c95f70a940d2a6192af2d5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e2aa60e3f489ccafee0c7dc2a803640395cbc03', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dbace72961d59bf02fa89cb4b19d7a9e67d534d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd7e7b38a31e24d048b981f56d3b4271a543be5b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4808d3eeff5ef6f4557c08db25d2ba4ecf9ff5e1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc4b803b2961bce76ecf0c991ce9f49969758e9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ed726646aa31626b591d2f5116c362b33ba27a3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc88e60a27008e49fc6eb9782309dd0d133290f9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e29f6058aeeab822fb396c939ad866112a826f69', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0894cac5cc595bbacb2adbca04b08039d789d663', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e42b5632b97b69e36094bbe243fdc96a328ab286', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0383bbcd476f263ae36f65501524ccfeb5f6b52', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca181be22852208abf5289d7b7fcd34fdc8ba78e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '567a188314f0a8aadc428d7719426f8cfc1cc2e1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ef16480de15ec669d59c2747a12a05e65f6039a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96d7bd44d54e480ef4b660a27e0db59a4893dc3a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '231ef2d102ce4f5c464a7ff300522e7b9e188615', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd1478ac3ca5acf339069bb66e5c97c7d33d6c68', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8840a0f5c18a7e998061fc6dce4aabcd128b5b7d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f4bd980a6b8624dd87f350c5a7fe7da88fb41be', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391f0a738e103938a8ee4a5c8bb0a133761803f7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2904fafbff4af2d582f9e3708a70859d2e119686', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4770c00e703895659a54dc8cd405b883eaf1e93', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67fea7e402a2720cb3655bc5895f998e6b236dae', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a81ddd77010a2674cccf6f72a86075f4edb7b3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fe77dff58a536c0158b5b98dcd42439360dcee1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffb3e9ff632de3bc9f848b61304b2be4e09ea0a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '987892e46b3473f8487c4b991b43b8c3cdc71035', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89c7a2d4ecae0979925575aec453a7530897c876', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39146ea5f888a13fcb8bed1716a78d7e42cf5d26', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '562abe11848dcf46172252617ec8c70d8bcf3a7e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6866796ff3d852ac3a0eafd86c0ae7596b74eed7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f77dc05c67794822744500b9ccbb12aae9b66356', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88bb66f2bbe3fe4f2dc2c8b8764f6bcc5933380d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe84c6383d69ccd2ca910d7cd5ecb2893f98a68', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb674dc67b4566bcba01e30ac24c00618a1eab85', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a036c95397e1a65ffbf7e146b42c1871231153', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f2ffc81469db4c6f4ce7ca6281f2ca7431ab56', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a08a198584ef318692a81ce85631f775099c354f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f90db31b0301dcabcf5dff160d6f3eba0a489dd', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc1d7c3c15940bdbe87e370a62d598cb5ac410c9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8cc23db297c296356d4428e50a56bc26ddefcf4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b05f06b0fc019a78be7e69f1af30aa8c24dbd2dc', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '465b4f3176ccbd99347ae3a531460986ec603ead', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '474e4b8e5283d6e8f047e426e2fd68d631bc7f3b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35f7e632a5ddb8d3f68d53c01e57cae108cff06b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f221009bc1ec0bf4beec73d2e22bdd4d49fa87d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c4c54b140b510bad6c4ba158b1393c99e8d2923', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91166ed4bee1e845883e115b04e629be2ea69c0f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26111682207e7f120fee96160034f596875e7644', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e34577870903c22a897015b03f6aa63b450a360', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '911f138c5e2988a4a3e372a1ca22a1fa90cb6a3d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab7f4d8ce6eaa54f77ac2dd01720bd46db2a1829', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd0158f1888376e15f99cd9b9a005ebf945fcee8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bdcaf0ae065c7e062221208637cbe0c076cbceb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d8f523f1f35151c784f75aeb719f8b0a4dc82e3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81371325256592b93697f4d6bb007182626d921a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f4b4e60596f1f23e97bf992f51c1624383be2af', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b51ed67d64910aaad775c5a48815cb616bef4a9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65fca217b651cf7e80ec28e53f206a5e38922d3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c5806fb033f39216b3218d9510d85ecf9b8ea05', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3c3e5954fd7b75bd99bb8b6df44b674eb08e923', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35591c20b3a8e0d5c046a3693c5762ca1c539c5f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc183d44e8e1a0c650c175b2f1345823092757d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5970f74ce31238cdbd638e39b8312b3a12d1e8f6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed57fdec8bde839312d89b3f3cce2bc928b15000', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '255c73bd4de09a6ad9cc5192daaac3a05fe166f9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84244510384b6e06613ede1bb74c18ec871ff3ab', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adff8671457df023819143ee1adf9e94d5ffba73', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e7fe811b4e7f9b0652eea27fe6056003792f856', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c6fd890404e5dcf0b17c8df7b1cefb499f06b83', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a49144ad3f1d2cc35bafe79c04268887a25790b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23611ba73f70fda83166a776c12a270134c101c4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4fc3ef52ace2ed3e08e3b9863f4a8f31e3bd425', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acd129dd9031430086cb30a315597408eaad66f2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ee737afdec209fd5922260a8d0d948958a3c5b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfa0a61439d14467e7d6857c482af48791a5553b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b1a0964e8cbdf1ff9e108ce9b3ac96bccdbf607', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b4544d5fe743cdbce9b3ea121f58fdf6cc42606', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead463b99996dd94a42d60b08d822b2b75f3d395', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a7da6ea3bb3a6af07428f229a18a70fdd55dad6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b20d9198d5419514949814830dcf84f06ced266', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce8a758d232b5ae8d57bbf8ed3c64856c7e4711', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '509c91bf6d4aad4a946854509cd2f1dbea58ff51', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4131c33c1062f15579fb23d05489667395ebc52b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fa2585c9159310a19cc225627ca0f230858c5b8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbc1682b92dd872fd27723c0fefe54d354b768b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe08c30589302c894342ab52b069fba461965e3b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
428609672,Lint output is cleaner and less verbose.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #N/A.
2. This PR does the following: Extra bits from the linter output have been trimmed and now output looks cleaner, less verbose, and more readable.

**HTML**
**Before**
![Screenshot from 2020-06-05 22-48-29](https://user-images.githubusercontent.com/29057268/83906087-83604b80-a780-11ea-9e9f-7beed4facb31.png)
**After**
![Screenshot from 2020-06-05 22-49-01](https://user-images.githubusercontent.com/29057268/83906097-89562c80-a780-11ea-9952-6e533c5ba6d6.png)
**PYTHON**
**Before**
![Screenshot from 2020-06-05 22-49-21](https://user-images.githubusercontent.com/29057268/83906110-9246fe00-a780-11ea-8a5b-e22e0226a8fd.png)
**After**
![Screenshot from 2020-06-05 22-49-28](https://user-images.githubusercontent.com/29057268/83906126-9ffc8380-a780-11ea-9c60-ac25c98d3052.png)
**CSS**
**Before**
![Screenshot from 2020-06-05 22-49-40](https://user-images.githubusercontent.com/29057268/83906139-a7239180-a780-11ea-8671-aafb682b0e6a.png)
**After**
![Screenshot from 2020-06-05 22-49-50](https://user-images.githubusercontent.com/29057268/83906146-abe84580-a780-11ea-9dbc-d6cf57eb90bb.png)
**Js/Ts**
**Before**
![Screenshot from 2020-06-05 22-50-06](https://user-images.githubusercontent.com/29057268/83906164-b30f5380-a780-11ea-9302-2db7c125d938.png)
**After**
![Screenshot from 2020-06-05 22-49-57](https://user-images.githubusercontent.com/29057268/83906169-b571ad80-a780-11ea-994c-7a701207cc93.png)
**FINAL OUTPUT**
![Screenshot from 2020-06-05 22-51-47](https://user-images.githubusercontent.com/29057268/83906180-b73b7100-a780-11ea-8455-1b9ea6f84aae.png)


## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9438,https://api.github.com/repos/oppia/oppia/pulls/9438,https://github.com/oppia/oppia/pull/9438,closed,198,16,5,34,21,259,0,2,[],2020-06-05 17:36:15+00:00,2020-07-02 13:27:04+00:00,2317849.0,"26 days, 19:50:49","[{'comment_id': 436289580, 'comment_body': 'Why do we add these logs in the lint_message if we are about to exculde it?', 'comment_created': datetime.datetime(2020, 6, 6, 18, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436289783, 'comment_body': 'I think we should output the success report as well so that users are aware of all the test the changes passed.', 'comment_created': datetime.datetime(2020, 6, 6, 18, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436837301, 'comment_body': 'We need these to check if all the tests are passing or not.', 'comment_created': datetime.datetime(2020, 6, 8, 16, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436837612, 'comment_body': 'The user always has the option to scroll up.', 'comment_created': datetime.datetime(2020, 6, 8, 16, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436887702, 'comment_body': ""I still get your answer @Hudda -- shouldn't we remove these from lint messages rather than removing it from here?"", 'comment_created': datetime.datetime(2020, 6, 8, 17, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 437071325, 'comment_body': '> We need these to check if all the tests are passing or not.\r\n\r\nIn that case why not a flag (or boolean value) instead of relying on a string and removing it later?', 'comment_created': datetime.datetime(2020, 6, 9, 0, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 437071710, 'comment_body': 'Can you share the screenshot of the success case on develop and on this branch?', 'comment_created': datetime.datetime(2020, 6, 9, 0, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 438747760, 'comment_body': ""SUCCESS and FAILURE messages are still going to be printed. Just not under the 'Fix below errors' section, as Sean finds it inappropriate to have some SUCCESS messages under this section as this section only prints error messages. So that users do not have to scroll up frequently."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 438751505, 'comment_body': ""**Before we had this**\r\n![Screenshot from 2020-06-11 18-06-38](https://user-images.githubusercontent.com/29057268/84386091-5c859780-ac0e-11ea-8761-8fe8030dd3d8.png)\r\n**Now we have this**\r\n![Screenshot from 2020-06-11 18-08-13](https://user-images.githubusercontent.com/29057268/84386207-8d65cc80-ac0e-11ea-9e22-8b8f62b0518e.png)\r\n\r\nThe summary is: Now we do not have 'Summary of Errors' section if all the tests are passing."", 'comment_created': datetime.datetime(2020, 6, 11, 12, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444950486, 'comment_body': ""I think we had a discussion on this i.e, we planned on scope the message trimming on linter classes. I don't see any such changes. Can you please explain what's the status on that?"", 'comment_created': datetime.datetime(2020, 6, 24, 14, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 444957502, 'comment_body': '@DubeySandeep If we move the trimmer function to the respective files, then we are having the following problems:\r\n1. We still going to need the trimming method in the main linter file(pre_commit_linter.py) to remove parts such as `started`, `ended`, and timestamps.\r\n2. Moving method to respective files leads to the printing of linter messages twice, once trimmed and once without trimming. So it is not feasible to use this method there.\r\nI think it is best to use this method here.', 'comment_created': datetime.datetime(2020, 6, 24, 14, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444973110, 'comment_body': ""> We still going to need the trimming method in the main linter file(pre_commit_linter.py) to remove parts such as started, ended, and timestamps.\r\n\r\nyeah, that's what I'm asking for i.e, each linter will filter out their own message, so in this case, pre_commit_liter will filter out its own message (in the case where we want it to filter the message).\r\n\r\n> Moving method to respective files leads to the printing of linter messages twice, once trimmed and once without trimming. So it is not feasible to use this method there.\r\n\r\nAny specific reason for this? Have you found why this is happening?"", 'comment_created': datetime.datetime(2020, 6, 24, 15, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 444982269, 'comment_body': '@DubeySandeep This is somehow related to multithreading. concurrent_utils_task is appending messages in the PRINT() function to the linter_messages list.', 'comment_created': datetime.datetime(2020, 6, 24, 15, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447218948, 'comment_body': 'If this is used for trimming thrid_party linter messages then move it to the same class.  Rename it to get_trimmed_summary_message', 'comment_created': datetime.datetime(2020, 6, 29, 19, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447219238, 'comment_body': 'Ditto move it to the class and rename this to the same name.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447219499, 'comment_body': 'Ditto!', 'comment_created': datetime.datetime(2020, 6, 29, 20, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447430985, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 6, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447431021, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 6, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447431067, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 6, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447588576, 'comment_body': 'Please leave a code comment explaining why we need to strip this value and from where it comes!', 'comment_created': datetime.datetime(2020, 6, 30, 10, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447589068, 'comment_body': 'Please explain these random numbers, add code comments!', 'comment_created': datetime.datetime(2020, 6, 30, 10, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447589594, 'comment_body': 'This is repeated in both if and else condition please avoid duplicate codes.', 'comment_created': datetime.datetime(2020, 6, 30, 10, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447589817, 'comment_body': 'Why do we need `self` here?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447590511, 'comment_body': 'is this only contains the error messages? if yes then rename the function to highlight this!', 'comment_created': datetime.datetime(2020, 6, 30, 10, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447590917, 'comment_body': 'Ditto as above, why do we need `self`` here?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447591255, 'comment_body': 'Add a detailed comments about why and what we are doing here!', 'comment_created': datetime.datetime(2020, 6, 30, 10, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447591611, 'comment_body': 'Ditto as above, is this only for the error messages?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447592182, 'comment_body': 'Invalid type?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447592217, 'comment_body': 'Invalid type?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447592377, 'comment_body': 'invalid type?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447592631, 'comment_body': 'Explain the random number 4 and add code comment explaining why we need this. ', 'comment_created': datetime.datetime(2020, 6, 30, 10, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447592775, 'comment_body': 'Ditto!', 'comment_created': datetime.datetime(2020, 6, 30, 10, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447593268, 'comment_body': 'This looks like a duplicate code (From line 1098 to 1102) can we create a function in linter_utils to avoid duplication?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447593443, 'comment_body': 'Duplicated in both if and else condition*', 'comment_created': datetime.datetime(2020, 6, 30, 10, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447593676, 'comment_body': 'Ditto as above, is this only for error messages?', 'comment_created': datetime.datetime(2020, 6, 30, 10, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447594361, 'comment_body': 'Why we are filtering this here? Are we using these messages anywhere in this file, if not why these messages end uptil here if they are of no use? ', 'comment_created': datetime.datetime(2020, 6, 30, 10, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447594690, 'comment_body': 'This method only prints error messages, right? if yes please rename it accordingly!', 'comment_created': datetime.datetime(2020, 6, 30, 10, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447595355, 'comment_body': ""Move this to linter_utils, maybe? Also why we didn't use the stdout (As it was earlier)? Can you explain?"", 'comment_created': datetime.datetime(2020, 6, 30, 10, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447595749, 'comment_body': ""What's st? Add proper param name also I don't see the complete docstring, please add one!"", 'comment_created': datetime.datetime(2020, 6, 30, 10, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447595987, 'comment_body': ""How big this can go, do you think this it's a good idea to store the whole message here?"", 'comment_created': datetime.datetime(2020, 6, 30, 10, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447596162, 'comment_body': 'Invalid type!', 'comment_created': datetime.datetime(2020, 6, 30, 10, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447596343, 'comment_body': 'Explain the random number `5`, add proper reasoning!', 'comment_created': datetime.datetime(2020, 6, 30, 10, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447596617, 'comment_body': 'Why we need this where it comes from? ', 'comment_created': datetime.datetime(2020, 6, 30, 10, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447596919, 'comment_body': ""Do we still need `stdout = python_utils.string_io()` if no, why we haven't removed it?"", 'comment_created': datetime.datetime(2020, 6, 30, 10, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447597225, 'comment_body': 'Ditto is this only for error message? if yes please highlight this in the function name!', 'comment_created': datetime.datetime(2020, 6, 30, 11, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447597470, 'comment_body': ""Follow all the comments I've left above for this case!"", 'comment_created': datetime.datetime(2020, 6, 30, 11, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447617474, 'comment_body': ""We have spaces at the beginning and we want to remove those spaces to match with regex that's why I removed them."", 'comment_created': datetime.datetime(2020, 6, 30, 11, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447620181, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 11, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447620374, 'comment_body': 'We need it at both places.', 'comment_created': datetime.datetime(2020, 6, 30, 11, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447632050, 'comment_body': 'Because it is a method in a class.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447635250, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447635496, 'comment_body': 'Because it is inside a class.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447636663, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447636728, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447636824, 'comment_body': 'Changed to list.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447637590, 'comment_body': 'It is correct.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447639767, 'comment_body': 'Changed to list.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447639817, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447640534, 'comment_body': ""but it doesn't need the self, right? can this be a static method for the class? or should we move the lint messages as a class property?"", 'comment_created': datetime.datetime(2020, 6, 30, 12, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447640560, 'comment_body': 'No, both are different.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447640664, 'comment_body': 'We need both.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447640736, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447641373, 'comment_body': 'We need it, to check if all checks are passing or failing.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447641567, 'comment_body': ""> Please leave a code comment\r\n\r\nPlease leave a code comment to explain this! Also, if it's space then why do I see \\d: in the regex? can you please explain the regex as well?"", 'comment_created': datetime.datetime(2020, 6, 30, 12, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447641684, 'comment_body': 'Not,  just errors, success messages as well.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447642946, 'comment_body': 'Because stdout was reading all output from the console and appending that in the list, which is causing the duplication of linter output.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447643107, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447643677, 'comment_body': 'This list can grow depending on the error messages. More the error messages, more the length of the list.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447644031, 'comment_body': 'changed to list.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447644218, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447644546, 'comment_body': 'Added in the comment.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447644952, 'comment_body': 'Yes, we still need it to print the full output of the linter.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447644999, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447645326, 'comment_body': ""But I see this method is only called when there is lint failure, is that true? if yes, can you explain what's going on?"", 'comment_created': datetime.datetime(2020, 6, 30, 12, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447667755, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447668772, 'comment_body': 'we used lstrip() to remove the spaces', 'comment_created': datetime.datetime(2020, 6, 30, 13, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447669512, 'comment_body': 'I am not seeing anything wrong with it. What will be the advantage of static method or property over this?', 'comment_created': datetime.datetime(2020, 6, 30, 13, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447669949, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447670444, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447671386, 'comment_body': ""We can't move it to linter_utils because it's code is specific to this linter only and not shared by other linters."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447678281, 'comment_body': ""If we expect only one string in this variable then why not just have the string as a param? I'm not sure why we are passing list here if we will deal with the first element only? "", 'comment_created': datetime.datetime(2020, 6, 30, 13, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447681826, 'comment_body': 'Add the type of the element inside the list*', 'comment_created': datetime.datetime(2020, 6, 30, 13, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447682094, 'comment_body': 'The error messages*', 'comment_created': datetime.datetime(2020, 6, 30, 13, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447683331, 'comment_body': ""Why the regex for the line number is  '^\\d+:\\d+'?"", 'comment_created': datetime.datetime(2020, 6, 30, 13, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447683554, 'comment_body': 'Repeated `we`', 'comment_created': datetime.datetime(2020, 6, 30, 13, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447685139, 'comment_body': 'Can we do remove the message.replace(""X"", \' \')? (Ditto for other cases) This will make it more readable, right?', 'comment_created': datetime.datetime(2020, 6, 30, 13, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447686474, 'comment_body': 'This is still not resolved, why repeat if we need to do this in both if and else condition?', 'comment_created': datetime.datetime(2020, 6, 30, 13, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447687483, 'comment_body': 'The variable names in this function are confusing I see lint_messages, message_lint, messages, please have a better naming for the variables.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447688316, 'comment_body': 'error messages*', 'comment_created': datetime.datetime(2020, 6, 30, 13, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447689020, 'comment_body': 'Why this method has different type of param in different lint script classes for the same method? Please make it consistent.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447690656, 'comment_body': 'Capitalize the first character after the period. Also, just have this pattern `Extracting number of file..... from the end of lint message.` (Something around this)', 'comment_created': datetime.datetime(2020, 6, 30, 13, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447692526, 'comment_body': ""Can we change this to '\\n'.join(message)?"", 'comment_created': datetime.datetime(2020, 6, 30, 13, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447692906, 'comment_body': 'Change the method name as you have done above!', 'comment_created': datetime.datetime(2020, 6, 30, 13, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447693499, 'comment_body': 'Explain why we need to remove the last four lines*', 'comment_created': datetime.datetime(2020, 6, 30, 13, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447694875, 'comment_body': ""Sorry for the misunderstanding I'm talking about the lines 81-85 in css_linter file. is this a duplicate of that? "", 'comment_created': datetime.datetime(2020, 6, 30, 13, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447695369, 'comment_body': ""Follow the comments I've left in the css_linter file for a similar code."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447695537, 'comment_body': 'This is still repeated.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447695922, 'comment_body': ""I don't think this is resolved yet, PTAL!(Please do a self-review after pushing cahnges!)"", 'comment_created': datetime.datetime(2020, 6, 30, 13, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447698918, 'comment_body': 'hmmm... this is weird. Have you thought of the idea I had shared i.e, each linter class should return LintResult instance which will have three properties status (either ""Success"" or ""failed""), error_messages_summary, lint_message (the last one if we need this). I think we had planned to do it that way, right? We didn\'t have to do a hacky fix here in that way! ', 'comment_created': datetime.datetime(2020, 6, 30, 13, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447701449, 'comment_body': ""> Because stdout was reading all output from the console and appending that in the list, which is causing the duplication of linter output.\r\n\r\n\r\nBut we had stdout in a separate context, right? Why this isn't a case for other linters, also why can't we do it the way other linter does? Just wanted to check why can't we have a consitent structure and wanted to check the cause of the issue we had earlier."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447701667, 'comment_body': 'PylintReport*', 'comment_created': datetime.datetime(2020, 6, 30, 13, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447702289, 'comment_body': 'This is not a stream, right? (not sure!)', 'comment_created': datetime.datetime(2020, 6, 30, 13, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447703516, 'comment_body': 'Can you explain ` coverage report from the end of the message.`? Also, can you explain the number five?', 'comment_created': datetime.datetime(2020, 6, 30, 13, 57, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447705232, 'comment_body': ""What's message-id here? is it related to pylint message-id? I think that it can be useful for readers to do search and fix issues, right? Should we leave that as-is?"", 'comment_created': datetime.datetime(2020, 6, 30, 13, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447706324, 'comment_body': ""Why print messages? (I don't expect this function to print something)"", 'comment_created': datetime.datetime(2020, 6, 30, 14, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447706901, 'comment_body': 'This is better and more readable!', 'comment_created': datetime.datetime(2020, 6, 30, 14, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447708095, 'comment_body': 'Remove unwanted parenthesis', 'comment_created': datetime.datetime(2020, 6, 30, 14, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447708150, 'comment_body': 'Remove unwanted parenthesis', 'comment_created': datetime.datetime(2020, 6, 30, 14, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447708728, 'comment_body': ""So I'm not sure whether the pylint is reporting to the `pylint_output` or to stdout?"", 'comment_created': datetime.datetime(2020, 6, 30, 14, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447708980, 'comment_body': 'pylint_error_messages', 'comment_created': datetime.datetime(2020, 6, 30, 14, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447709538, 'comment_body': 'pylint_report*', 'comment_created': datetime.datetime(2020, 6, 30, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447711055, 'comment_body': 'pylint_report', 'comment_created': datetime.datetime(2020, 6, 30, 14, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447711372, 'comment_body': 'error messages*', 'comment_created': datetime.datetime(2020, 6, 30, 14, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447765582, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447765876, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447766170, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447766879, 'comment_body': 'because this is what linter returns.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447767196, 'comment_body': 'starting with `num:num`', 'comment_created': datetime.datetime(2020, 6, 30, 15, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447768542, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 6, 30, 15, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447768817, 'comment_body': 'that is message_list not message_lint.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447769148, 'comment_body': 'no, because it is a Unicode character.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447769684, 'comment_body': 'Is there any other way because I am not seeing one.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447770358, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447770961, 'comment_body': 'because we are using third party linters and each one has a different format.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447773964, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447774592, 'comment_body': 'NO, we need a newline in the end.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447775011, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447777186, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447777845, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447779344, 'comment_body': 'Yeah, they are the same and I think duplicacy of just 4 lines is normal. You are the one who suggested to move all these in different modules.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447779441, 'comment_body': 'We need it.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447779888, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447780438, 'comment_body': 'Yes but that is not in the scope of this PR, we can do that in a future PR.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447780926, 'comment_body': 'I think we had a discussion about this.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447781583, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447781840, 'comment_body': 'This is a stream of string outputs', 'comment_created': datetime.datetime(2020, 6, 30, 15, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447786235, 'comment_body': ""We need to print message-ids as well that's why we need it. This line will print full messages."", 'comment_created': datetime.datetime(2020, 6, 30, 15, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447786400, 'comment_body': 'Answered this above.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447787040, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447787141, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447790198, 'comment_body': 'We still need to print what pylint is running at the stdout.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447790309, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447790707, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 15, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447797592, 'comment_body': 'Just pass the string if the list is going to have only one element!', 'comment_created': datetime.datetime(2020, 6, 30, 16, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447798332, 'comment_body': 'Add what each num represent and why these are used for catching as a code comment!', 'comment_created': datetime.datetime(2020, 6, 30, 16, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447798963, 'comment_body': ""So you can write Unicode in this file, isn't it?(not sure!)"", 'comment_created': datetime.datetime(2020, 6, 30, 16, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447799431, 'comment_body': ""I think there's a way to remove code duplication like this can you please check how we can do it! (I cannot recall)"", 'comment_created': datetime.datetime(2020, 6, 30, 16, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447805111, 'comment_body': 'Try to have the same function name and same param in all the methods. for consistency as well as we may have a base linter class in the future, so it would be easier to move these to the base class.', 'comment_created': datetime.datetime(2020, 6, 30, 16, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447805820, 'comment_body': 'still this will be much simpler and we can add `\\n` at the end, right?', 'comment_created': datetime.datetime(2020, 6, 30, 16, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447807026, 'comment_body': 'I think you can do something to remove this kinda duplicate code. ', 'comment_created': datetime.datetime(2020, 6, 30, 16, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447807500, 'comment_body': '@Hudda, is this comment resolved? ', 'comment_created': datetime.datetime(2020, 6, 30, 16, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447808071, 'comment_body': 'Can you please add the link to the comment as I cannot find one?', 'comment_created': datetime.datetime(2020, 6, 30, 16, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447808626, 'comment_body': 'Then do it in the method which is calling this why printing through a` _get_` message?', 'comment_created': datetime.datetime(2020, 6, 30, 16, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447808841, 'comment_body': 'is this resolved?', 'comment_created': datetime.datetime(2020, 6, 30, 16, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447813978, 'comment_body': ""Okay I'm confused StringIO also have read and write function, why are we using two objects to collect string stream, have you tried using stdout for the reporter? (If we don't understand how it's working we can't write it!)"", 'comment_created': datetime.datetime(2020, 6, 30, 16, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447815055, 'comment_body': ""> do you think this it's a good idea to store the whole message here?\r\n\r\nAny thoughts?"", 'comment_created': datetime.datetime(2020, 6, 30, 16, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447815904, 'comment_body': ""No, I still don't have any clarification on what you had said! Can you please explain it here?"", 'comment_created': datetime.datetime(2020, 6, 30, 16, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447816870, 'comment_body': 'Yeah we can do it .. but considering we have to solve a problem and for that problem, this design is a good fit, right?', 'comment_created': datetime.datetime(2020, 6, 30, 16, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447817283, 'comment_body': ""I agree we need this in both cases but we can do it without writing it twice isn't it?"", 'comment_created': datetime.datetime(2020, 6, 30, 16, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447818764, 'comment_body': ""Yeah because it wasn't making sense there and it was hard to understand which output was coming from which linter now it's way better, right? \r\n\r\nOver here I was thinking to write a common method _trim_cross_unicode_from_message and use it in both the places. What do you think?"", 'comment_created': datetime.datetime(2020, 6, 30, 16, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447820749, 'comment_body': "">  What will be the advantage of static method or property over this?\r\n\r\n1. It will indicate that this message doesn't change any internal property of the object.\r\n2. We will avoid adding unwanted params.\r\n\r\nLet me know what you think, I'm fine with either!\r\n"", 'comment_created': datetime.datetime(2020, 6, 30, 16, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447821350, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 16, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447821954, 'comment_body': 'I agree we need to use this in both the places but can we find a way to avoid duplicate code? ', 'comment_created': datetime.datetime(2020, 6, 30, 16, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 447822355, 'comment_body': ""I don't think it is a good idea to add Unicode here."", 'comment_created': datetime.datetime(2020, 6, 30, 16, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447829368, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 16, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447832501, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 16, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447833668, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 16, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447836915, 'comment_body': ""No, I don't think it is a good idea to write a new method for just 4 lines of code"", 'comment_created': datetime.datetime(2020, 6, 30, 16, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447837251, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 16, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447838280, 'comment_body': 'No, it is not a good fit right now, because we are using these messages in the tests also.', 'comment_created': datetime.datetime(2020, 6, 30, 16, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447839088, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2020, 6, 30, 16, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447842397, 'comment_body': ""I don't know where that comment go. So I am explaining again. We are printing messages here as well for the same reason if someone want to know what is the message-id they can scroll up. And I removed the message id because Sean doesn't want that in the ouput."", 'comment_created': datetime.datetime(2020, 6, 30, 17, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447844157, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447845045, 'comment_body': 'I think static method is fine.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447851023, 'comment_body': 'We are calling all other linters using subprocess while we are running linter using a library of pylint, which has a different mechanism of giving output. Other linters are not reading the output from the stdout but the subprocess is returning that output.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447851498, 'comment_body': ""Why can't we store it here?"", 'comment_created': datetime.datetime(2020, 6, 30, 17, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447852421, 'comment_body': 'StringIO read and write from the console, but this object is reading the output from the linter directly and sending it to a list.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447852802, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447855184, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 447855358, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 6, 30, 17, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448115729, 'comment_body': ""Doesn't seem changed to me.\r\n\r\nThat said -- it does seem to be a string. @Hudda, the problem here is that you've named it as a plural, which suggests it is a list. It is important to be careful with naming. In this case, perhaps you could call it css_lint_output or something like that.\r\n\r\nOr perhaps better -- why don't you have the method being called actually return the messages as a list? That seems like it would make more sense semantically, if the string really is just a collection of messages separated by newline characters."", 'comment_created': datetime.datetime(2020, 7, 1, 4, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448116057, 'comment_body': 'You cannot say that a ""lint messages"" consists of multiple ""message""s.\r\n\r\nAlso I am a bit confused by the naming. Is every line actually a valid message? If not, then what you have here is wrong and you should use something like ""lines"" or ""css_output_lines"" instead.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448116194, 'comment_body': 'By cross(x) do you mean the single character ""x""?\r\n\r\nIf so, just say that (`""x""`).', 'comment_created': datetime.datetime(2020, 7, 1, 5, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448116246, 'comment_body': '""because"" is misspelled.\r\n\r\nstart --> starts', 'comment_created': datetime.datetime(2020, 7, 1, 5, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448116378, 'comment_body': ""Instead of doing that, perhaps include it in the regex and use a capture group to extract the part you're interested in."", 'comment_created': datetime.datetime(2020, 7, 1, 5, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448116721, 'comment_body': ""Now I have no clue what is going on here. You have message_list, lint_messages, etc. and this is really confusing. It sounds like lint_messages splits into multiple messages and each of those is tokenized into a message_list ... the names don't really make sense.\r\n\r\nI think you need a name that conveys more clearly what each item of the list is."", 'comment_created': datetime.datetime(2020, 7, 1, 5, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448124677, 'comment_body': ""Why not? Use 'coding: utf-8' at the top and then go ahead and use it. Unicode characters are perfectly valid."", 'comment_created': datetime.datetime(2020, 7, 1, 5, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448124938, 'comment_body': ""Better to have error_messages be a list, and then to return '\\n'.join(error_messages) if you need to return a string."", 'comment_created': datetime.datetime(2020, 7, 1, 5, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448125092, 'comment_body': 'See comments above on confusing naming -- they apply here too.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448125211, 'comment_body': '""Because we last two lines like this"" does not make sense as an English sentence. Please reword.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448125308, 'comment_body': 'Before doing this, assert that the last two lines are what you expect them to be.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448125575, 'comment_body': ""See above -- have this as a list and return `'\\n'.join(error_messages) + '\\n'` or similar.\r\n\r\nIn general, plural names indicate lists."", 'comment_created': datetime.datetime(2020, 7, 1, 5, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448125802, 'comment_body': 'Btw does all this stuff hold in the case of successful linting? Ditto for the other classes above too.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448125915, 'comment_body': 'See above re naming, asserting conditions for removed lines, etc.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448126064, 'comment_body': ""Comments above apply here too.\r\n\r\nI don't think you necessarily need a new method if you can encode all the necessary information in the regex. In general you shouldn't be doing stuff with `:1`, `2:-1`, etc. -- hard to understand what the numbers mean."", 'comment_created': datetime.datetime(2020, 7, 1, 5, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448126263, 'comment_body': 'See above.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 39, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448126408, 'comment_body': 'Why [0]? Needs justification and perhaps better naming to explain what result_list[0] actually is.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448127204, 'comment_body': 'missing args', 'comment_created': datetime.datetime(2020, 7, 1, 5, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448127516, 'comment_body': 'I actually don\'t really have any idea what a ""pylint report"" object is. Can you maybe give a bit more explanation about what it is, what it does, what it\'s used for, etc.?', 'comment_created': datetime.datetime(2020, 7, 1, 5, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448127692, 'comment_body': 'This docstring is a bit unhelpful. Maybe explain what the message is being written to (a docstring would typically say something like ""Writes the given message to ..."").', 'comment_created': datetime.datetime(2020, 7, 1, 5, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448127730, 'comment_body': 'Same thing, no idea what ""for pylint"" means.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448127990, 'comment_body': 'Assert that lines are as expected before removing them.\r\n\r\nYou might be able to do some of this stuff using a regex and capture group instead.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448128370, 'comment_body': 'When you say ""Sean doesn\'t want that in the output"", could you please add a reference? (Do this any time you quote me -- or anyone else.)', 'comment_created': datetime.datetime(2020, 7, 1, 5, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448128566, 'comment_body': 'When you say ""if it is true"", what does ""it"" refer to?\r\n\r\nIf you mean ""whether the pylint message has a message id"", doesn\'t that contradict your earlier statement that ""every pylint message has a message id""?', 'comment_created': datetime.datetime(2020, 7, 1, 5, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448128884, 'comment_body': ""What's last_string? I don't know what that means semantically. If it's the error code, then say so.\r\n\r\nBetter still, use a regex to get rid of it. That way, you can verify the format of what you're removing. (The reason I keep asking you to do this is so that we can be sure that you haven't missed any cases in your analysis. If anything errors out, devs will start telling you fairly quickly.)"", 'comment_created': datetime.datetime(2020, 7, 1, 5, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448129585, 'comment_body': 'Looking at where this is used -- this is just a report stream, right? If so, you can call it something generic like StringMessageStream. The variable name can still be pylint_message_stream or similar.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448148684, 'comment_body': 'Changed the name to css_lint_output', 'comment_created': datetime.datetime(2020, 7, 1, 6, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448150187, 'comment_body': 'Changed to css_output_lines', 'comment_created': datetime.datetime(2020, 7, 1, 6, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448151281, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 6, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448151449, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 6, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448300083, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448300305, 'comment_body': 'Changed names.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448300496, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448300621, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448305925, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448311615, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448326665, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 12, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448326826, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 12, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448327973, 'comment_body': 'We are not printing anything in case of successful linting. This function is called only if there is a linting error.', 'comment_created': datetime.datetime(2020, 7, 1, 12, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448570508, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448571213, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448571336, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448574407, 'comment_body': 'Because of eslint return output as a list with length 1.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448575536, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448576187, 'comment_body': 'We are using it to get the linter messages from the pylint and storing those messages in a list. Changed the name', 'comment_created': datetime.datetime(2020, 7, 1, 19, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448578277, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448578503, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448585217, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448585496, 'comment_body': ""Actually, that was in the my proposal and I think I've resolved that comment by now."", 'comment_created': datetime.datetime(2020, 7, 1, 19, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448585736, 'comment_body': 'But I will keep in mind to add reference in the future.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448585826, 'comment_body': 'Changed to regex.', 'comment_created': datetime.datetime(2020, 7, 1, 19, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448605494, 'comment_body': '@Hudda is this done?', 'comment_created': datetime.datetime(2020, 7, 1, 20, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 448609103, 'comment_body': 'Yes, this is done, forgot to comment.', 'comment_created': datetime.datetime(2020, 7, 1, 20, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448622555, 'comment_body': 'Why not do: ""for result in result_list: summary_messages.append(self._get_trimmed_error_messages(result))""? That keeps the code general.\r\n\r\nIt seems to me that what you are doing here is to only handle the first filepath, if I\'m reading correctly (since one line is added to result_list for each filepath, above).', 'comment_created': datetime.datetime(2020, 7, 1, 21, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448623528, 'comment_body': ""Let's call this trimmed_error_messages. Ditto for other functions.\r\n\r\n(In general, what you are processing is error messages, so being clear about the distinction seems useful.)"", 'comment_created': datetime.datetime(2020, 7, 1, 21, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448625285, 'comment_body': 'Does this replace all instances of unicode_x or just the first occurrence?\r\n\r\nAlso, does this replace all instances of message_id or just the last occurrence?\r\n\r\nIf the answer is ""all"" to any of the above, please either fix them to replace just one occurrence, or assert that there is only one occurrence before doing any mutations to the string, so that you don\'t end up with mangled messages.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448625537, 'comment_body': 'Same comment as above, to make sure just the key occurrence is replaced.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448626951, 'comment_body': ""If you're returning a string, call this get_trimmed_output() or get_trimmed_error_output(). Remember I mentioned that when you name something plural, it suggests a list.\r\n\r\nDitto elsewhere."", 'comment_created': datetime.datetime(2020, 7, 1, 21, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448627481, 'comment_body': ""I'm not sure I follow. Isn't the for loop above called once per filepath? So result_list.append() would be called once per filepath, right? So you should have a for loop here instead?"", 'comment_created': datetime.datetime(2020, 7, 1, 21, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448627636, 'comment_body': 'errors --> the errors', 'comment_created': datetime.datetime(2020, 7, 1, 21, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448628065, 'comment_body': 'Save and return an output stream.\r\n\r\nAlso, for the docstrings for write() and read(), rephrase them to avoid mention of pylint.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448628433, 'comment_body': 'Same thing, make sure to remove only the last occurrence.', 'comment_created': datetime.datetime(2020, 7, 1, 21, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448628514, 'comment_body': 'Same thing re naming (see above).', 'comment_created': datetime.datetime(2020, 7, 1, 21, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448761161, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 5, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448761199, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 5, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448761333, 'comment_body': 'Changed to replace only one occurrence', 'comment_created': datetime.datetime(2020, 7, 2, 5, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448761376, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 5, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448761410, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 5, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448761487, 'comment_body': 'Used loop', 'comment_created': datetime.datetime(2020, 7, 2, 5, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448761539, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 5, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448761609, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 5, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448761664, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 5, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448761700, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 5, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448768381, 'comment_body': 'This is confusing, because ""the method"" seems to refer to write(). Please be clearer and write from the perspective of this class. Perhaps ""The message to be written.""', 'comment_created': datetime.datetime(2020, 7, 2, 6, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448768415, 'comment_body': 'Returns the --> The\r\n\r\nPerhaps a better phrasing: The list of output messages.', 'comment_created': datetime.datetime(2020, 7, 2, 6, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 448770218, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 6, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448770264, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 2, 6, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 448835684, 'comment_body': 'File an issue to check why pylint stdout is printing messages twice to stdout. (This is important as currently it looks weird to see two-stream catching pytlint logs.)', 'comment_created': datetime.datetime(2020, 7, 2, 8, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 448927402, 'comment_body': 'Done. Issue [#9765](https://github.com/oppia/oppia/issues/9765)', 'comment_created': datetime.datetime(2020, 7, 2, 11, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '66599434e7248aafbe505d0e06d8f35e6746803b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '104a3353f923b9a64800932983d51c0a090163fb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a36d915513ccb0e2a255b37084f6a949ee110f53', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd601819cd3ed0c65849a77395c99215beedda8a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98dc8a0d6ad794bd3cda333f3e6b6cbfda6e3658', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e6240808428853c77617bfd5e792b92642543b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d726555a45c6a2305731d733c712aa6a50f9c0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03b958befee8772f6ec09285fe29b3bf8478b5f0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bf95d44187e84cfcf46e0aa30452bce89e6ddac', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '245e900db17e75b26ae7c86306d1e5cae7c576cc', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e75d83ef6fb80b8f56a110f831dace5a5e02451e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '256a15da518bc0ef60716c1aa6161d3365e0ca5d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f2abe08f58f9e5ba0630cc8e59bf50a99835808', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '547cd669623852c74a0f1b3ecb719dabcf8188e2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72450b4f7eec774bf9ad51aa464a751c15da8421', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '429381cbb60dea50dd382b44406dac4d66a36d99', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e7d8c3f7aa39e8a85fca4181855987fd7d5153', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d23386fe57a4e4d5543fb93b4a6833f80e4a52', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab6b273115666ad626be382ab86bde44668a628', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69f4e4ef19a11e60e4a0941c5b641dad31f13024', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e80edd50456408f1ffaa77daf068cb2655f3f54d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '609b7230d450202a988ffce935319a41c8317d50', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58bf27bdbb61247e9410323a90c77c1e4609fc56', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33dd4014d74b11a0bd294da2e1a5742facd37401', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fb13ca0ed9eeecd867f7c7dece68022c8d46c9a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90bbabb230e80c47c64b4d71f420bc4716bd85cb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '312f8d841ca8a7e5f8a6373fb112a89a988495a6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2530ea172fc908f9cfd8dcd2de161923567992e5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10edf274ef633d2b39994e807efd374ca24f4e0d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3c77bd450671f0b094cafe6a17dab523317dfe9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4c2f2c1a722bb321fb3b1f3f591e7f7c2461301', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '503a2aa8b95cb8b21f8af8a1ae9a03131bf89100', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f3fcc10fb784f37fb2574b0c1f9535e9eb33e39', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6bbe6f990c129792f3d662cfae86c14885354ea', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
415518188,Exception handling is used to handle unexpected errors,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: Use try-except block to catch any unexpected error during the linter execution.
Screenshot of errors:
![Screenshot from 2020-05-09 11-09-36](https://user-images.githubusercontent.com/29057268/81465332-fbba0800-91e6-11ea-9319-3820cc34c9fa.png)


## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9273,https://api.github.com/repos/oppia/oppia/pulls/9273,https://github.com/oppia/oppia/pull/9273,closed,45,15,2,14,18,51,0,1,[],2020-05-09 05:17:47+00:00,2020-05-23 04:41:56+00:00,1207449.0,"13 days, 23:24:09","[{'comment_id': 423025446, 'comment_body': ""I'm not sure about the naming here, all_message will contain success and failure messages, right? is there any chance of all_messgaes to contain lint error message as well (not failure or exception messages)?\r\n\r\nWe should find a better way to name this either make all_message to be a dict with success, failure and error keys. or find a better name for the `all_messages`. (maybe lint_messages?)\r\n\r\nSee line 421 also deals with error message which is confusing*"", 'comment_created': datetime.datetime(2020, 5, 11, 13, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 423053147, 'comment_body': 'Break after `(`', 'comment_created': datetime.datetime(2020, 5, 11, 13, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 423053565, 'comment_body': 'make it error_messages (for consistency)', 'comment_created': datetime.datetime(2020, 5, 11, 13, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 423057449, 'comment_body': ""I'm not sure whether we should see the exception message during execution or in the `_get_task_output`? Can you please explain?"", 'comment_created': datetime.datetime(2020, 5, 11, 13, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 423142024, 'comment_body': 'Thanks for pointing it out, I forgot to add before. I have added it now.', 'comment_created': datetime.datetime(2020, 5, 11, 15, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 423142199, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 11, 15, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 423142875, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 11, 15, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 423148745, 'comment_body': 'I am planning to add lint error messages as well in a later PR. As of now we only have Success and Failure messages in it.\r\n\r\nChanged the all_messages to lint_messages.', 'comment_created': datetime.datetime(2020, 5, 11, 16, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 424586458, 'comment_body': ""Why are we adding try-except here? I mean it's not executing the code right? (I think it's just appending the output of the task into the list, right?)"", 'comment_created': datetime.datetime(2020, 5, 13, 16, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 424586969, 'comment_body': 'Why do we need the sempahore.release over here? I see TaskThread.run method already does this, right?', 'comment_created': datetime.datetime(2020, 5, 13, 16, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 424588888, 'comment_body': ""Why we need a try-expect block here? I tried looking into the `concurrent_task_utils.py` and I found we already handle exceptions while running tread \r\n![image](https://user-images.githubusercontent.com/16653571/81841605-572e2200-9568-11ea-95a2-0b97a0cf6240.png)\r\n\r\nis this what we are doing here^? If yes, why don't we use concurrent_task_utils.ALL_ERRORS?"", 'comment_created': datetime.datetime(2020, 5, 13, 16, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 424850835, 'comment_body': 'The reason is if there is some error during a lint check execution then we have `None` as `task.output` and we can not concatenate a `None` to a list. So it will raise an exception and we know that an error has happened somewhere.', 'comment_created': datetime.datetime(2020, 5, 14, 3, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 424851691, 'comment_body': 'Because we used semaphore one more time in Line  568 and 572, and we need to release it. And we used semaphore here because without using it the message of one file sometimes showed under another file.', 'comment_created': datetime.datetime(2020, 5, 14, 3, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 424856643, 'comment_body': ""I used try-except block for `task_execute` method not for TaskThread. If there is an error during execution of this function it will be caught by this try-except block.\r\n\r\nWe can't use ALL_ERRORS because it does not give us full stack trace of the errors. ALL_ERRORS only return what has happend i.e. errors like `index out of range` not full stack trace."", 'comment_created': datetime.datetime(2020, 5, 14, 3, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 425460592, 'comment_body': ""I have two questions:\r\n1. Why we are using semaphores here? (I'm assuming this code is not running in multi-thread, right?)\r\n2. Why we are acquiring semaphore in one method and releasing it in another method? (This looks like a random `release`)"", 'comment_created': datetime.datetime(2020, 5, 14, 22, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 425461003, 'comment_body': 'In that case, we can have `if-else` check, instead of try-catch, right?', 'comment_created': datetime.datetime(2020, 5, 14, 22, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 425466230, 'comment_body': ""> I used try-except block for task_execute method not for TaskThread\r\n\r\nBy `task_execute` you mean `concurrent_task_utils.execute_tasks`, right? if yes, then `execute_tasks` is internally ruuning tasks (made of TaskThread class).\r\n\r\n> If there is an error during execution of this function it will be caught by this try-except block.\r\n\r\nWe aren't expecting to have an error in the `execute_tasks` method (though there can be inside the `task.start` but we have already handled it, right?)\r\n\r\n> We can't use ALL_ERRORS because it does not give us full stack trace of the errors. ALL_ERRORS only return what has happend i.e. errors like index out of range not full stack trace.\r\n\r\nIn that case, can we make changes such that ALL_ERRORS reports all the errors? [I think this will be a more general approach and we don't have to add  try-except block everywhere!]\r\n"", 'comment_created': datetime.datetime(2020, 5, 14, 22, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 425811991, 'comment_body': 'Used if-else', 'comment_created': datetime.datetime(2020, 5, 15, 13, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 425818927, 'comment_body': '1. We used semaphore because we needed a locking mechanism, sot that lint errors of one file do not get printed under another file.\r\n2. We are acquiring semaphore in one method and releasing it in another so that the function doesn’t even get put on the memory heap.([see comment](https://github.com/oppia/oppia/pull/9195#discussion_r418910232))', 'comment_created': datetime.datetime(2020, 5, 15, 13, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 425819304, 'comment_body': 'Removed try-except from here and used ALL_ERRORS.', 'comment_created': datetime.datetime(2020, 5, 15, 13, 56, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426198623, 'comment_body': 'This is a way better place for this, thanks for looking into it! :)', 'comment_created': datetime.datetime(2020, 5, 16, 23, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426214267, 'comment_body': ""> sot that lint errors of one file do not get printed under another file.\r\n\r\nBut as I can see this _get_task_output call**s** doesn't runs on multi-thread so I'm not sure for which resource interlocking we need the semaphores here? Can you please explain? "", 'comment_created': datetime.datetime(2020, 5, 17, 3, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426214373, 'comment_body': ""Add a newline above* (We have a linter for it isn't it?)"", 'comment_created': datetime.datetime(2020, 5, 17, 3, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426214467, 'comment_body': 'Why `if any`? I mean this method will print some logs irrespective of any condition right? (The caller method is doing the check for whether to print the message or not, right?)', 'comment_created': datetime.datetime(2020, 5, 17, 3, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426214483, 'comment_body': 'caught during*', 'comment_created': datetime.datetime(2020, 5, 17, 3, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426214496, 'comment_body': 'List of _error messages_', 'comment_created': datetime.datetime(2020, 5, 17, 3, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426214636, 'comment_body': 'The messages below are going to be a stack trace, right? Should we explain this to the user around the lines of ""Unable to run the complete lint test, please check the following stack trace and fix the errors:"" (Something around that line?)', 'comment_created': datetime.datetime(2020, 5, 17, 4, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426214742, 'comment_body': 'Should we call this errors_stacktrace? (Just to be more clear about the internals of this variable)', 'comment_created': datetime.datetime(2020, 5, 17, 4, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426241156, 'comment_body': 'Done. We do not have a check for this yet. Added in #8423 ', 'comment_created': datetime.datetime(2020, 5, 17, 9, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426241227, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 5, 17, 9, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426241242, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 17, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426241248, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 17, 9, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426241262, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 17, 9, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426241286, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 17, 9, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426243199, 'comment_body': ""Actually, I'm not too sure. What are your thoughts on this?"", 'comment_created': datetime.datetime(2020, 5, 17, 10, 17, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426312329, 'comment_body': 'I think we should relook into it, can you please create an issue and talk to Kevin on this (I think he was the one who has introduced this, right?)? [Make sure to assign the issue to yourself and it would be great if we can resolve it soon!] ', 'comment_created': datetime.datetime(2020, 5, 17, 22, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426312393, 'comment_body': 'I think we should relook into it, can you please create an issue and talk to Kevin on this (I think he was the one who has introduced this, right?)? [Make sure to assign the issue to yourself and it would be great if we can resolve it soon!] ', 'comment_created': datetime.datetime(2020, 5, 17, 22, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426312621, 'comment_body': 'This entire function doesn\'t make sense to me as it starts with `get` and docstring says it ""Returns ..."" but it does not return anything! [Make sure to cover this in the issue where we are thinking to remove the semaphore from this method] ', 'comment_created': datetime.datetime(2020, 5, 17, 22, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 426535480, 'comment_body': 'Okay, I will keep that in mind.', 'comment_created': datetime.datetime(2020, 5, 18, 10, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426538294, 'comment_body': ""This isn't suggested by the Kevin, it was in the GSoC follow up doc\r\n![Screenshot from 2020-05-18 16-18-52](https://user-images.githubusercontent.com/29057268/82205045-8c00f700-9923-11ea-8fee-94cd5527f679.png)\r\n"", 'comment_created': datetime.datetime(2020, 5, 18, 10, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 426770420, 'comment_body': '@Hudda, should we add `self.name` in the log to give info about which linter test is failing?  ', 'comment_created': datetime.datetime(2020, 5, 18, 17, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427063722, 'comment_body': ""I don't think if that's necessary as stack trace is showing which file has errors. And even if we use `self.name` then `custom` or `third_party` as linter names isn't particularly useful."", 'comment_created': datetime.datetime(2020, 5, 19, 6, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 427670919, 'comment_body': 'Yeah, I had realized that after adding the comments. Thanks for the clarification! :)\r\n', 'comment_created': datetime.datetime(2020, 5, 20, 0, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427671278, 'comment_body': 'Add a newline after `(`', 'comment_created': datetime.datetime(2020, 5, 20, 0, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427671976, 'comment_body': 'lint execution faliure.*', 'comment_created': datetime.datetime(2020, 5, 20, 0, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427672951, 'comment_body': '`if not errors_stacktrace` is more pythonic. (Ditto below)', 'comment_created': datetime.datetime(2020, 5, 20, 0, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 427673460, 'comment_body': ""Can you please add this in the issue thread so that we don't forget?"", 'comment_created': datetime.datetime(2020, 5, 20, 0, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 428627569, 'comment_body': 'I think it is `if errors_stacktrace`', 'comment_created': datetime.datetime(2020, 5, 21, 12, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 428627746, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 21, 12, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 428627791, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 21, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 428630107, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 5, 21, 12, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': 'd8c3c93f867fceb74cfba06c8a865f059f205b1a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3cf691f3285553af454b3a4ab9574fbe6171f04', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6baff316f8e76478298cd8d9fdf8e2e6914dd5b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae2837957dcf30258ef2adff3099c5dcd12d35a1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ae1531a8fb6609829c3c143d10b7ba2bca6ede6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df914556e4e306886fb554e5c88e60f1a4f20126', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b1b84861a1005cdace7c292cc2ba76446c670b5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '750dea688aa0a582f90ccf2594443b984047425b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea04fe72b48fa46644e9ddbde55452b0e57eb600', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb7fe1982c120f18a632c185a1d8901bd0f86d23', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1dd42ef2230f7af9463ac1f5aaa99ff2227cd4d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea925f315d5227b4e48d9432fd2517b693c7b329', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a029b72fcb4d14d981d70306d7a7e93c3df0811c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df70a5aeefa595d2121d5ac1b25930b9e7233bf6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
429288309,Fix part of #8423: Added check to ensure that all lines in skip_files in app.yaml reference valid files in the repository,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Added check to ensure that all lines in skip_files in app.yaml reference valid files in the repository.
**Note: Backend tests won't pass until #8947 gets merged.**

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9451,https://api.github.com/repos/oppia/oppia/pulls/9451,https://github.com/oppia/oppia/pull/9451,closed,157,2,4,11,8,35,0,1,[],2020-06-06 16:10:34+00:00,2020-07-01 08:31:08+00:00,2132434.0,"24 days, 16:20:34","[{'comment_id': 436281111, 'comment_body': ""If this going to run in multithread then don't print one line at a time."", 'comment_created': datetime.datetime(2020, 6, 6, 16, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436281506, 'comment_body': 'Add a comment above explaining that this line is used for testing so do not remove also add a newlineto seperate two different comments', 'comment_created': datetime.datetime(2020, 6, 6, 16, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436281596, 'comment_body': 'is this a somewhat duplicate of line 64, if yes then print it once! ', 'comment_created': datetime.datetime(2020, 6, 6, 16, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436281770, 'comment_body': ""Maybe:\r\n`if not stripped_line or stripped_line[0] == '#:`\r\n`    continue`\r\n"", 'comment_created': datetime.datetime(2020, 6, 6, 16, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436281856, 'comment_body': ""Explain th reasonn for this random number 2 or use len('- ') and say all the skipped file lines start with `- `."", 'comment_created': datetime.datetime(2020, 6, 6, 16, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436282080, 'comment_body': '`""""""Tests for the app_dev_linter.py.""""""`', 'comment_created': datetime.datetime(2020, 6, 6, 16, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436282129, 'comment_body': 'Can we avoid this pragma?', 'comment_created': datetime.datetime(2020, 6, 6, 16, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436282203, 'comment_body': ""Don't use/mock private methods*"", 'comment_created': datetime.datetime(2020, 6, 6, 16, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436282279, 'comment_body': 'Assert the length of summary messg', 'comment_created': datetime.datetime(2020, 6, 6, 16, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436282631, 'comment_body': 'Add a newline above for code sepratoin and readability', 'comment_created': datetime.datetime(2020, 6, 6, 16, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 436652785, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 12, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436652843, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 12, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436652928, 'comment_body': 'No, we need both lines', 'comment_created': datetime.datetime(2020, 6, 8, 12, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436656838, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 12, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436656982, 'comment_body': ""Used len('- ')"", 'comment_created': datetime.datetime(2020, 6, 8, 12, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436657050, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 12, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436657321, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436657398, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 12, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436657486, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 8, 12, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 436658269, 'comment_body': 'This is temporary, will be removed once #8947 merged.', 'comment_created': datetime.datetime(2020, 6, 8, 12, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 437058800, 'comment_body': 'But if this test will run in multithread then there can be a message between these two print statement, will it be okay to print the two messages at once?', 'comment_created': datetime.datetime(2020, 6, 8, 23, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 437061820, 'comment_body': 'Can you please assert the failure message as well?', 'comment_created': datetime.datetime(2020, 6, 8, 23, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 437062007, 'comment_body': 'Use ""assert equal"" for better readability', 'comment_created': datetime.datetime(2020, 6, 8, 23, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 437063166, 'comment_body': 'Is there any plan on when we are going to move these 3 (And more to come) tests into ""other lint"" part and run these in multi-thread like other lint tests?', 'comment_created': datetime.datetime(2020, 6, 8, 23, 55, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 437063562, 'comment_body': 'How are we tracking this? [Adfd a way to track this and mark this comment resolved!@]', 'comment_created': datetime.datetime(2020, 6, 8, 23, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 438730360, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 11, 11, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 438730443, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 11, 11, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 438731161, 'comment_body': 'Will move these to a separate folder after #8947 merge as if I do it now, this will mess up that PR.', 'comment_created': datetime.datetime(2020, 6, 11, 11, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 438731315, 'comment_body': 'Only have that problem with pylint.\r\n', 'comment_created': datetime.datetime(2020, 6, 11, 11, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 438731962, 'comment_body': 'This PR will not merge util #8947 is merged as backend tests will not pass. I will remove this line once that PR merged.', 'comment_created': datetime.datetime(2020, 6, 11, 11, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 439562779, 'comment_body': 'Change this*', 'comment_created': datetime.datetime(2020, 6, 12, 17, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439563283, 'comment_body': 'app_dev.yaml, right?', 'comment_created': datetime.datetime(2020, 6, 12, 17, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439697774, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 13, 1, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 439697789, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 13, 1, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 439716251, 'comment_body': 'I think there could be problem that Sandeep mentioned that is messages could come up between these two print statements.', 'comment_created': datetime.datetime(2020, 6, 13, 7, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}]","[{'commit_sha': 'a169570ae0f871f3fefda92c4dc92426dfebd33e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f8bfe921b072e47d08da31f718c5b8e52738bf7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60a652cc1230a6e4acaf6b8a3640f2bd085ad07d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c38793e5455bd3eeb8d28b2f42c356d2a448a43', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a620264fa827a3d4a3ae3913b0fbaaf97196af8f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fb5418a442e5a698ed213c07d72b621ae6de7dc', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d3ce465a022ba4146bb28de97a163ce4de3267f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ac539cd2514932d767229e9c92600724e1d409', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b485367b34bdec881b4da49c2a1f026ed4c7a20', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22bb40b09ae31d2ad99d86b6a8ff58b7c7c597f8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d06443ef35a25e9ebc8a5393999b0c18aa2169a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
431242334,Added newline check at end of file,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Ensure that every file (of any type) ends with exactly one newline character.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9459,https://api.github.com/repos/oppia/oppia/pulls/9459,https://github.com/oppia/oppia/pull/9459,closed,145,123,26,13,10,16,0,1,[],2020-06-08 16:00:49+00:00,2020-06-14 15:48:36+00:00,517667.0,"5 days, 23:47:47","[{'comment_id': 437083375, 'comment_body': 'Use this value defined in linter utils (As we are expecting this to be same throughout the lint test)', 'comment_created': datetime.datetime(2020, 6, 9, 1, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 437083786, 'comment_body': 'Space after ""SUCCESS"" is not same everywhere, should we define a succes_message_prefix (""SUCCESS  "")  in inter_utills and use it everywhere?', 'comment_created': datetime.datetime(2020, 6, 9, 1, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 437083973, 'comment_body': 'As this test will run in multithread, will it be fine to have any random message between the print on line 765 and 777? If no, then print them together once!\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 9, 1, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 437085488, 'comment_body': 'it will allow a line with `\\t\\n`, right? [Not sure whether we want this check to be that much strict!]', 'comment_created': datetime.datetime(2020, 6, 9, 1, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 437315082, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 437315315, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 437316163, 'comment_body': 'it will be fine, we have this problem of random messages only with pylint.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 437316608, 'comment_body': 'we have another check to catch `\\t` so I think we do not need this.', 'comment_created': datetime.datetime(2020, 6, 9, 10, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 438079820, 'comment_body': 'Break line after `(`', 'comment_created': datetime.datetime(2020, 6, 10, 12, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 438514491, 'comment_body': 'Maybe change this to SUCCESS_MESSAGE_PREFIX?', 'comment_created': datetime.datetime(2020, 6, 11, 2, 55, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 438721347, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 11, 11, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 438721397, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 11, 11, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 439715262, 'comment_body': 'Why this checked is needed `file_length >=2`?', 'comment_created': datetime.datetime(2020, 6, 13, 6, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 439745601, 'comment_body': 'This is needed to check if the file is not empty. Changed it to `file_length >=1`', 'comment_created': datetime.datetime(2020, 6, 13, 15, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 439751310, 'comment_body': 'What is the change here?', 'comment_created': datetime.datetime(2020, 6, 13, 16, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 439751487, 'comment_body': 'Newline is added after Ruth. Now it is: `Ruth\\n`', 'comment_created': datetime.datetime(2020, 6, 13, 16, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '152d6941ecb3f3c2478d9cd81236344335c1cd5d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3845d32c472896e7e7afd51d3870c1fce526c4a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7d0123e43c1bd8c5444aa7e00c22db1ec82f684', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee91f1ed6275a10a750d98af73897186c23901b8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9815b05091117ab15a27c457d4002b7583eca527', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9cb8526fd52c9727c239bdf7c93b8b64697c916', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f81f7ce486ba4575501f0741a593919ca4e9b8a0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bfa14d72e9c660ac088731003968e8a0ab96d02', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b7eaf7c237812026b015cc51dbe022e1290461a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60926ff0af85064b5d5214af661c7d2ab78bf286', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c2bd036ee29bb47846aa812b61dd21208b4efcc', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8284e6e3083d8a934c19167e40943159a324ad1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f331dd3f2afe1c9028b342a6bdec0a7c1fca6b0b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
433745279,#Fix part of #8423: Added lint check to ensure that there are valid spaces and newlines,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Fixes already implemented to catch invalid newlines(\r) and invalid spaces(\t). For more info on what I did in **python_utils.py** file, please check this [link](https://stackoverflow.com/questions/20350305/python-read-crlf-text-file-as-is-with-crlf)

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9507,https://api.github.com/repos/oppia/oppia/pulls/9507,https://github.com/oppia/oppia/pull/9507,closed,384,377,5,8,7,9,0,1,[],2020-06-12 15:24:53+00:00,2020-06-17 19:32:35+00:00,446862.0,"5 days, 4:07:42","[{'comment_id': 439496309, 'comment_body': ""Should we make `''` as a default value? Considering we are only using that as of now (not sure!)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 12, 15, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439498961, 'comment_body': 'As per our discussion, change the BAD_PATTERN lint function to print the line number instead of moving it as a regex check.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439500928, 'comment_body': 'None | str.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439547804, 'comment_body': '+1', 'comment_created': datetime.datetime(2020, 6, 12, 17, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 439696947, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 13, 1, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 439696956, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 13, 1, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 439697136, 'comment_body': ""We can't use `''` as a default value because `byte('b')` mode does not allow the use of newline argument with it and we are using `byte` mode at several places in codebase."", 'comment_created': datetime.datetime(2020, 6, 13, 1, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 441010416, 'comment_body': 'Are we expecting to have a new bad pattern in BAD_PATTERNS?', 'comment_created': datetime.datetime(2020, 6, 16, 17, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 441014732, 'comment_body': ""@DubeySandeep Sorry, but I didn't get your comment."", 'comment_created': datetime.datetime(2020, 6, 16, 17, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': 'fd1f8358d643b78c898799fdfd41a02476c1a075', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ff47cb715d1195c242b1f089e60c781019f0851', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6080650ae19f427c0c16f8f0da842e5dba3259e6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17561f2394f540baa3daa565325aad415087a060', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4eca61cb2cbc85db07ce440d8383a098b960edf', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa8f25e1b6ee55c750feb93d616b679c2d3937e4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba701547dda7daea2e8a73843c0b19018fe87184', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cba234b4202234a98a21034fc46cd783f9ba3eb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
437259329,Fixes part of #8423: Added check to ensure if the instances of HtmlWebpackPlugin in webpack.common.config.ts contains all needed keys,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Added a lint check that will check if the instances of HtmlWebpackPlugin in  _webpack.common.config.ts_ contains all needed keys (`chunks, filename, meta, template, minify, inject`)

**NOTE: This backend tests won't pass until #8947 is merged**

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9590,https://api.github.com/repos/oppia/oppia/pulls/9590,https://github.com/oppia/oppia/pull/9590,closed,213,0,4,5,7,28,0,1,[],2020-06-19 19:16:38+00:00,2020-07-01 15:53:17+00:00,1024599.0,"11 days, 20:36:39","[{'comment_id': 445694726, 'comment_body': ""Define this on top so that it's easy to add/remove items in this list in future! (Also  good for readability and we should not define consytants inside for loop!)"", 'comment_created': datetime.datetime(2020, 6, 25, 16, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445695565, 'comment_body': 'Define the file name in a contant and use it here and elswhere in the file.', 'comment_created': datetime.datetime(2020, 6, 25, 16, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445702523, 'comment_body': ""This check will happen to any line after `plugins:`, right? So this will trigger even if we have `})` in the module section? if yes, then should we use  `htmlwebpackplugin_section_found and stripped_line.startswith('}),')`?"", 'comment_created': datetime.datetime(2020, 6, 25, 16, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445704197, 'comment_body': 'Can you please write it like one line at a time? Also, make sure to add `spaces at the beggining to make a kinda real sutuation for tetsing (or create a dummy webpack config file). ', 'comment_created': datetime.datetime(2020, 6, 25, 16, 58, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445705438, 'comment_body': 'Can we move line 53 to 55 out of the `with` block?', 'comment_created': datetime.datetime(2020, 6, 25, 17, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445706624, 'comment_body': 'Add a seperate test for dict with few keys maybe?', 'comment_created': datetime.datetime(2020, 6, 25, 17, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445707136, 'comment_body': 'Ditto as above move this out of `with` block!', 'comment_created': datetime.datetime(2020, 6, 25, 17, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445707938, 'comment_body': ""I don't think this is a good description for a console error page, @vojtechjelinek, is this expected? "", 'comment_created': datetime.datetime(2020, 6, 25, 17, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445708628, 'comment_body': 'Why is this named as AppDev, any specific reason?', 'comment_created': datetime.datetime(2020, 6, 25, 17, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445709205, 'comment_body': 'Is this used anywhere?', 'comment_created': datetime.datetime(2020, 6, 25, 17, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445709457, 'comment_body': 'Any specific reason for this newline?', 'comment_created': datetime.datetime(2020, 6, 25, 17, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445709938, 'comment_body': 'Any specific reason for defining this gobally? Can we move this to the setup section of the test?', 'comment_created': datetime.datetime(2020, 6, 25, 17, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445710771, 'comment_body': 'Why do we need this pragma?', 'comment_created': datetime.datetime(2020, 6, 25, 17, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445712409, 'comment_body': 'Instead of passing the whole file_cache can we just pass the specific file? (not sure!)\r\n\r\nAlso, considering this file is only checked by this test can we remove this param and webpack_config_linter can directly fetch it like the way its done in other two test above?', 'comment_created': datetime.datetime(2020, 6, 25, 17, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446191981, 'comment_body': 'We need it to be here because we remove elements from this list at line 72', 'comment_created': datetime.datetime(2020, 6, 26, 13, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446193621, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 13, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446194379, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 13, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446244008, 'comment_body': 'codeowner_linter also use FILE_CACHE, this is fast in multiprocessing instead of opening file directly.', 'comment_created': datetime.datetime(2020, 6, 26, 15, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446244346, 'comment_body': 'No, Will remove once #8947 merge', 'comment_created': datetime.datetime(2020, 6, 26, 15, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446245187, 'comment_body': 'No, I just did it for readability.', 'comment_created': datetime.datetime(2020, 6, 26, 15, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446251655, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446254233, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 15, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446260567, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 15, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446260659, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 15, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446262423, 'comment_body': 'Sorry my bad Changed it to WebpackConfigLinterTests', 'comment_created': datetime.datetime(2020, 6, 26, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446262724, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 6, 26, 15, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446266130, 'comment_body': 'Done. Moved to setup section', 'comment_created': datetime.datetime(2020, 6, 26, 15, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446303644, 'comment_body': 'THe console page is only used for the e2e tests AFAIK, maybe a comment regarding this can be added.', 'comment_created': datetime.datetime(2020, 6, 26, 17, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}]","[{'commit_sha': '6953c18bf56541b5f2af6f9ba6dbed09341f803f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40d08c7248b613b2e4a7b806b7ba17f7170a995c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c6e88c49599d41201a8f944838c6a411d68811c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f69dedbbe9a0808f1b26c8f33d3dfe5e72be3ad0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a348c36eaf642335166dc7928a37ef702e938d0f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
435873428,Fix part of #8423: Added check to ensure that all TODO messages start with a capital letter,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 .
2. This PR does the following: Checks if all TODO messages start with a capital letter.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9573,https://api.github.com/repos/oppia/oppia/pulls/9573,https://github.com/oppia/oppia/pull/9573,closed,31,31,24,5,4,0,0,2,[],2020-06-17 14:01:59+00:00,2020-06-19 02:47:47+00:00,132348.0,"1 day, 12:45:48",[],"[{'commit_sha': '31de66babb2d40d20d6016d0a7f33cd27c1733f5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68d9bac7ca5100bb8086593f8a9127c28caac36d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bafc433334411b637bfe017ad1e1e934b8741fa', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bfd345de6833bec48df1f11c2e9e8eb536cd26', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2e7c8d254ea56fe9905c83b14cfc525cca4b1b7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
435992675,Fix part of #8423: Added check for proper comment style for JS files,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423
2. This PR does the following: Added lint check for proper comment style for JS files
The comment should have space after **//**, must start with a capital letter and must have a valid punctuation at the end of the comment.
`// This is a multi-line XXXXXX`
`// XXXXXXXXX comment.`

**NOTE: This check is already implemented for Python**


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9574,https://api.github.com/repos/oppia/oppia/pulls/9574,https://github.com/oppia/oppia/pull/9574,closed,667,555,188,30,22,47,0,1,[],2020-06-17 17:25:04+00:00,2020-06-28 16:23:12+00:00,946688.0,"10 days, 22:58:08","[{'comment_id': 442685659, 'comment_body': '@Hudda Any specific reason this was not added via eslint new rule/extension like the way we do for pylint? I think the eslint approach would be faster, right? (not sure!)', 'comment_created': datetime.datetime(2020, 6, 19, 7, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 442933060, 'comment_body': 'Done. We only have a rule for Capital letter in eslint and not for a period at the end of comment. So we still need a custom check for that.', 'comment_created': datetime.datetime(2020, 6, 19, 16, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 443095082, 'comment_body': 'I\'m not sure the pattern enforced by the linter makes sense here. This is a heading, not a sentence, so it doesn\'t make sense to require punctuation. We could require that all comments be complete sentences, but that seems overly prescriptive, as this comment looks perfectly clear and well-formatted to me. I actually think writing it as a complete sentence, e.g. ""Below we define functions that work with interactions"", would be less readable.', 'comment_created': datetime.datetime(2020, 6, 20, 2, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 443211301, 'comment_body': '@U8NWXD Then I think it is better to ignore comments like this. What do you think?\r\n', 'comment_created': datetime.datetime(2020, 6, 21, 11, 45, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 443214395, 'comment_body': ""We are missing one thing here. Comments like this:\r\n`https://github.com/oppia/oppia/pull/9574/files%20is%20a%20useful%20link.` will be bypassed because it has `https` keyword in it which is added in `excluded_phrases`.\r\n\r\nThough, most of the time link gets bigger in length so we've to shift into the next line while commenting.\r\n\r\nWhat are your thoughts? @DubeySandeep "", 'comment_created': datetime.datetime(2020, 6, 21, 12, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 444238288, 'comment_body': ""@Hudda do you mean by adding `@ts-ignore` to these comments? If so then I worry that we'll have to add `@ts-ignore` all over the place, which defeats the purpose of the linter. I think the core issue here is that the rule itself:\r\n\r\n> The comment should have space after //, must start with a capital letter and must have a valid punctuation at the end of the comment.\r\n\r\nis too narrow. What if we decided on a format for header comments and then enforced that? Here are some ideas:\r\n\r\n1. Add hyphens before and after the comment like this: `// ----- INTERACTIONS -----`\r\n2. All headers are in all-caps like `// INTERACTIONS`\r\n3. Headers are followed by a line of hyphens:\r\n   ```\r\n   // INTERACTIONS\r\n   // ------------\r\n   ```\r\n4. There are many more ..."", 'comment_created': datetime.datetime(2020, 6, 23, 13, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 444244211, 'comment_body': '@U8NWXD No, I am thinking of excluding comments with only two words in them\r\nIn that way we also exclude comments like these `// Paragraph Separator`', 'comment_created': datetime.datetime(2020, 6, 23, 13, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444358526, 'comment_body': 'Ping @DubeySandeep.\r\n\r\nCould you please prioritise this? We are close to the milestone deadlines.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 444623138, 'comment_body': '@Hudda Why two words? I think we can have header-like comments with more than two words. For example:\r\n\r\n```\r\n// ----- Options to be passed to cucumber -----\r\n```\r\n\r\nfrom [here](https://github.com/oppia/oppia/pull/9574/files?file-filters%5B%5D=.js&file-filters%5B%5D=.py&file-filters%5B%5D=.ts&file-filters%5B%5D=dotfile&owned-by%5B%5D=U8NWXD#diff-be9307c112ba8cb518cbee7579fe85b4L351)?', 'comment_created': datetime.datetime(2020, 6, 24, 3, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 444686620, 'comment_body': '> Add hyphens before and after the comment like this: // ----- INTERACTIONS -----\r\n\r\n@U8NWXD Then, this option seems best. What do you think?', 'comment_created': datetime.datetime(2020, 6, 24, 7, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445022750, 'comment_body': ""@Hudda sounds good to me! Let me know when you've made the change and I'll take another pass"", 'comment_created': datetime.datetime(2020, 6, 24, 16, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 445023488, 'comment_body': ""@U8NWXD I've already made the changes PTAL!"", 'comment_created': datetime.datetime(2020, 6, 24, 16, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445024981, 'comment_body': '```suggestion\r\n      // TODO(Jacob): Add test for image RTE component.\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 16, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 445026732, 'comment_body': 'Should the linter cover these kinds of comments as well?', 'comment_created': datetime.datetime(2020, 6, 24, 16, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 445027908, 'comment_body': ""I think the right place for the period is actually inside the parentheses since we're wrapping the whole sentence in parentheses. However, I think the parentheses don't really serve any purpose here, so we could also remove them."", 'comment_created': datetime.datetime(2020, 6, 24, 16, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 445028347, 'comment_body': 'This looks like a heading', 'comment_created': datetime.datetime(2020, 6, 24, 16, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 445029898, 'comment_body': 'NO', 'comment_created': datetime.datetime(2020, 6, 24, 16, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445048277, 'comment_body': ""Why don't we write our own custom rules (like the way we write for pylint?) I think that would really be fast, any specific reason for not writing a custom eslint rule for this?\r\n\r\nHelpful link: https://flexport.engineering/writing-custom-lint-rules-for-your-picky-developers-67732afa1803"", 'comment_created': datetime.datetime(2020, 6, 24, 17, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445052601, 'comment_body': 'Right now, it is just one rule, we will add this if we need more rules, Probably in the 3rd milestone.', 'comment_created': datetime.datetime(2020, 6, 24, 17, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445105030, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 24, 18, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445105074, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 24, 18, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445105475, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 24, 18, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445362745, 'comment_body': 'Explain in a comment why these need to be ignored.', 'comment_created': datetime.datetime(2020, 6, 25, 7, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 445362976, 'comment_body': 'Explain clearly what ""correct style"" means.', 'comment_created': datetime.datetime(2020, 6, 25, 7, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 445490215, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 25, 11, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445490274, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 25, 11, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446130266, 'comment_body': 'Can you please add a period after each line above?', 'comment_created': datetime.datetime(2020, 6, 26, 11, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446139431, 'comment_body': 'Can you explain the use of these patterns? Can you show where we have used it in the codebase?', 'comment_created': datetime.datetime(2020, 6, 26, 11, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446189414, 'comment_body': '**fall-through** is used here(https://github.com/oppia/oppia/blob/b3be90d330db7974fdb90e45b33ddd7fcfa1d189/extensions/interactions/FractionInput/directives/fraction-input-validation.service.ts#L175)\r\n**disable-bad-pattern-check** is used to disable custom lint checks. So it used at many places.', 'comment_created': datetime.datetime(2020, 6, 26, 13, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446189513, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 26, 13, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446206344, 'comment_body': 'Thanks for the info, @Hudda!', 'comment_created': datetime.datetime(2020, 6, 26, 14, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446494088, 'comment_body': 'I think you need to explain more clearly what ""ignored"" means in this context. Are we stipulating that these cannot occur at the end of a comment? Or that comments that contain any of these phrases are ignored? Or that individual lines which contain these phrases are ignored? Or something else? Please be explicit about what this means. You\'re not actually ignoring the phrases -- what ""ignore phrase"" means is that you treat the original comment as though that particular phrase was deleted, and process the rest of the comment accordingly.\r\n\r\nAlso, isn\'t this too broad a check, especially if all you want to do is to not check for a period at the end? I think you should make this check more specific so that this becomes something like allowed_comment_endings_without_period, rather than a broad exclusion. Or, if some phrases need a broad exclusion, then have two or more separate lists and apply the relevant specific check for each list.', 'comment_created': datetime.datetime(2020, 6, 27, 6, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 446494153, 'comment_body': ""This variable name seems wrong -- shouldn't it be comment_includes_excluded_phrase (or similar)? (Though please note discussion above.)"", 'comment_created': datetime.datetime(2020, 6, 27, 6, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 446497152, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 27, 7, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446497159, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 27, 7, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446500851, 'comment_body': 'The variable name you have chosen does not match how you are handling it.\r\n\r\nIf you are just checking whether it is at the end of the comment, then presumably you would be using endswith() or similar.', 'comment_created': datetime.datetime(2020, 6, 27, 8, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 446500884, 'comment_body': ""I thought you didn't want to put periods on the end of URLs? (which I agree with)"", 'comment_created': datetime.datetime(2020, 6, 27, 8, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 446501040, 'comment_body': 'Ah sorry, I have put it here by mistake. I will remove it\r\n', 'comment_created': datetime.datetime(2020, 6, 27, 8, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446501136, 'comment_body': ""It is not guaranteed that these phrases always come at the end. That's why I didn't use endswith()"", 'comment_created': datetime.datetime(2020, 6, 27, 8, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446501430, 'comment_body': 'Then why are you picking that variable name?\r\n\r\nMake sure your variable names, your meaning, etc. are all consistent with each other.', 'comment_created': datetime.datetime(2020, 6, 27, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 446501630, 'comment_body': '`allowed_phrases_in_the_comment` is it good?', 'comment_created': datetime.datetime(2020, 6, 27, 8, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446503775, 'comment_body': 'Per discussion, please make sure your variable names are precise, and that the checks catch exactly what they are supposed to catch, and do not catch what they are not supposed to catch.', 'comment_created': datetime.datetime(2020, 6, 27, 9, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 446542141, 'comment_body': ""I used `in` here instead of `startswith` because some urls have quotes around them\r\n\r\nExample: // Ref: 'https://oppia.org'"", 'comment_created': datetime.datetime(2020, 6, 27, 16, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446567176, 'comment_body': 'Wrong punctuation at end. (But actually, I think this comment may have gotten truncated somehow -- see other files.)', 'comment_created': datetime.datetime(2020, 6, 27, 21, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 446567349, 'comment_body': 'This should be added as a comment within the PR itself, so that other devs can understand the rationale too.', 'comment_created': datetime.datetime(2020, 6, 27, 21, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 446606424, 'comment_body': ""One line was missing, I've added it now."", 'comment_created': datetime.datetime(2020, 6, 28, 6, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446606533, 'comment_body': 'Done. Added an inline comment.', 'comment_created': datetime.datetime(2020, 6, 28, 6, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '50dc9af02f358a55838bb991b24777a9225352d6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '984bab4b9c2bb80881d68ca65ed736c7c04d12d4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35d102dbb3197e5c64882eb08c5500a33dbb4607', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3d9d665936ca6c6212b722fa53532d6ab74840', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9322800afcf067c396dd6ed272319919f6b387ea', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee8d1be4c2e77c79240673b39f53010240e574a7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39e38e1deba5bad5e7f60c767d84ba61467c6ec6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93eefd96867e9b30a5fc1c1e0bfd9accf26d1c62', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae9f8e091beceadcf0b3a7ec334075c243ed82a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49fd33bdcd22227304acdc47e1cb3bbc238769d6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83c0fa5139161633373f2dbffec898947bddf971', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62647dc947b72fd153999e007a9d0eeb78cf77a8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67fde8f09fd974598477b8546487000bbc84a53e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efbe94fae2784534056a1ec4c04e4b5617fc0e27', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a44e7cc54c91a9bce0aa7d864da518f68ed1b20', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '712afcd1abdcf34f30a2a7a7c483dd9682fe9165', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d4a393e12c813f83d84aec1dd7e5e42f3a6857d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d9df54b27114a488619f4a36cd6e846f3e1ba7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbb7ca9d36da1b69b4ac18ff1dd1d4834e9b933e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '194a823cf489f188f43e22dc94bcadbed285713b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a463cee32cf03a82780d90e71deb5e68d0ffa5c5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24a6b762ebf9b9ea3a1bd570cdd646b03451ec38', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c578ac513c37d22b0b1df6c0ffc76192807de40', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00b27d49e62b8910ebfcb29c09ae68381bf97c65', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f967dca817b20ec9676fc8e3ee2f2eb686ca5c2b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '876255417088acdc1bdf3440c19303ae9743cc59', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '512ba0d7a01452a6083eb56bb10bc30dd883365f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ae2dcbe24b323d7a819a76c2e7cca4040634818', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d192fff3d73d2f86f8334d6b5231cf2cc3adcb3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a5ec0f05b08320da8c9b1074ab870a4fd800aa3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
434028443,Fix part of #8423: Add lint check for alphabetized list in CSS,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Sort the css properties in alphabetical order. [stylelint-order](https://www.npmjs.com/package/stylelint-order) plugin is used for this purpose
## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9522,https://api.github.com/repos/oppia/oppia/pulls/9522,https://github.com/oppia/oppia/pull/9522,closed,476,449,86,6,12,8,1,2,[{'name': 'PR: LGTM'}],2020-06-13 16:42:30+00:00,2020-06-25 19:42:40+00:00,1047610.0,"12 days, 3:00:10","[{'comment_id': 439790263, 'comment_body': 'Do we expect to have changes in yarn.lock file? (not sure!)', 'comment_created': datetime.datetime(2020, 6, 14, 4, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 439790542, 'comment_body': 'Yes, all package changes within `package.json` should result to `yarn.lock` changes. Please run `yarn install`.', 'comment_created': datetime.datetime(2020, 6, 14, 4, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kevinlee12', 'type': 'User'}, {'comment_id': 443214612, 'comment_body': 'Add the same plugin in html stylelintrc as well.', 'comment_created': datetime.datetime(2020, 6, 21, 12, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 444194838, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 444194976, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445043063, 'comment_body': ""Do we need to do similar changes in `core/templates/css/.stylelintrc`? [I'll approve this PR once  this comment is resolved!]"", 'comment_created': datetime.datetime(2020, 6, 24, 17, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 445048254, 'comment_body': 'I have already made this change there.', 'comment_created': datetime.datetime(2020, 6, 24, 17, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 445352933, 'comment_body': 'Ah, I see!', 'comment_created': datetime.datetime(2020, 6, 25, 7, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}]","[{'commit_sha': 'c56d7ee7eb224c2a8ed06053b5d97573847600f4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19da25c0a7ea1c3a8387c928c3aecc939465ae2a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ffc47caab4a4ace4adcac2405dcd6715edae7d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9bcb9c81b03cf9f9f9c1063d4a91a4841d0c74', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d5b22da0ee0b7f06773a7346b6b9fce858cb8a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8d45f18f81899fac1dd643ff9cd342c4083fad3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
440883332,Fix part of #8423: Added lint check to ensure that there is one blank newline below each class docstring.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: This PR implements a custom pylint check, which checks if there is a single newline below the class docstring.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9687,https://api.github.com/repos/oppia/oppia/pulls/9687,https://github.com/oppia/oppia/pull/9687,closed,672,3,142,27,27,114,0,1,[],2020-06-27 08:45:14+00:00,2020-07-03 19:03:07+00:00,555473.0,"6 days, 10:17:53","[{'comment_id': 446508863, 'comment_body': 'LGTM!', 'comment_created': datetime.datetime(2020, 6, 27, 10, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Showtim3', 'type': 'User'}, {'comment_id': 446546883, 'comment_body': 'Not an expected change right? (Please make sure to do a self review first!)', 'comment_created': datetime.datetime(2020, 6, 27, 17, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446547349, 'comment_body': 'Use `for line_num, line in enumerate(file_content):` for consitency throught this file.', 'comment_created': datetime.datetime(2020, 6, 27, 17, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446548207, 'comment_body': 'Can you please follow the pattern used in `ExcessiveEmptyLinesChecker`? I think that willmake it more simpler and consistent. ', 'comment_created': datetime.datetime(2020, 6, 27, 17, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446548491, 'comment_body': ""Can youplease explain this change? Also, there can be a constant defined just after the class defination, are we considering that case? \r\n\r\nCurrently I'm unable to understand this function can you please add a code comment before every chck and I would suggest you to make it more readable. "", 'comment_created': datetime.datetime(2020, 6, 27, 17, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446548783, 'comment_body': 'Make this name more specific maybe `no_newline_below_class_docstring`', 'comment_created': datetime.datetime(2020, 6, 27, 17, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446548918, 'comment_body': 'why the param is `Class`? (Ditto elsewhere)', 'comment_created': datetime.datetime(2020, 6, 27, 17, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446549215, 'comment_body': ""We already have this check isn't it? (not sure!)"", 'comment_created': datetime.datetime(2020, 6, 27, 17, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446549647, 'comment_body': ""Don't we expect to have a newline before the function in this case?"", 'comment_created': datetime.datetime(2020, 6, 27, 17, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446549839, 'comment_body': ""Is this a correct python file, this will raise an error, isn't it?"", 'comment_created': datetime.datetime(2020, 6, 27, 17, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446549931, 'comment_body': 'two newlines in between classes*', 'comment_created': datetime.datetime(2020, 6, 27, 17, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446550419, 'comment_body': ""The error message will be `'No single newline below class docstring.`? If yes the I don't think this is a correct message* "", 'comment_created': datetime.datetime(2020, 6, 27, 17, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446550767, 'comment_body': ""\r\n- Add test for a decorated function just after class docstring\r\n- Add test for inline comment jsut after class's docstring (This can be for explaianing a contants define below docstring of a class)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 27, 17, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446551894, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446552163, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446552253, 'comment_body': ""I've tried that but think the check is not that simple, It will fail on several cases if I try that."", 'comment_created': datetime.datetime(2020, 6, 27, 18, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446553029, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446553126, 'comment_body': 'We are following the same pattern in all the checks i.e. node in the beginning.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446553173, 'comment_body': 'This is just a dummy class so I used class here. Just random.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446553283, 'comment_body': 'No, that was for excessive newline between the functions.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446553327, 'comment_body': 'No, because this class has no docstring.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446553383, 'comment_body': 'No, this will not raise any error, except what we want, because this will run on only one check.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446553568, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446556345, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446556392, 'comment_body': 'Changed to `Missing single newline below class docstring.`', 'comment_created': datetime.datetime(2020, 6, 27, 18, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446556441, 'comment_body': 'changed it to object.', 'comment_created': datetime.datetime(2020, 6, 27, 18, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446557347, 'comment_body': 'not a correct fix, right? I was expecting this to fail on pre-push checks, can you confirm that your pre-push checks are working fine?', 'comment_created': datetime.datetime(2020, 6, 27, 19, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446557582, 'comment_body': 'Still, we need a newline after the class, right? Like the way you have written the setUp function for this test class.', 'comment_created': datetime.datetime(2020, 6, 27, 19, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446557711, 'comment_body': 'I mean you cannot compile this file, right? (By compile I mean it will fail on lexical analysis phase.) Have you tried running a python file with this code?', 'comment_created': datetime.datetime(2020, 6, 27, 19, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446557776, 'comment_body': 'Use real situation make it @staticmethod', 'comment_created': datetime.datetime(2020, 6, 27, 19, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446557992, 'comment_body': ""Add a test for correct cases for decorators (ditto for other cases)\r\n\r\nThis is important as if this test will fail then we won't know whether the function is working as expected for the correct cases!"", 'comment_created': datetime.datetime(2020, 6, 27, 19, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446558207, 'comment_body': 'Ditto add test for correct case', 'comment_created': datetime.datetime(2020, 6, 27, 19, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446558635, 'comment_body': 'Note: I see a similar change below.', 'comment_created': datetime.datetime(2020, 6, 27, 19, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446605956, 'comment_body': 'Could you please update this comment? \r\n\r\n`Skips the check for the class if it does not have a body. @ here is for the decorator.`', 'comment_created': datetime.datetime(2020, 6, 28, 6, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 446606003, 'comment_body': '`Checks if we are in a docstring`', 'comment_created': datetime.datetime(2020, 6, 28, 6, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 446606037, 'comment_body': 'Check -> Checks', 'comment_created': datetime.datetime(2020, 6, 28, 6, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 446606099, 'comment_body': 'This line check -> Checks...', 'comment_created': datetime.datetime(2020, 6, 28, 6, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 446606335, 'comment_body': ""Change it to `Checks if we reached to a non-empty line. If that's true it sets the variable blank_line_counter to zero and sets the variable class_has_docstring to false so that we can skip further lines until we find a next class.`"", 'comment_created': datetime.datetime(2020, 6, 28, 6, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 446617882, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446617891, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446617936, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446618095, 'comment_body': 'I have taken this example from the codebase. There are some files having classes like this i.e. without a body.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446619083, 'comment_body': 'All classes have docstring except few Tests classes, I think we have lint check to have docstring for all classes in the future. That will solve this problem.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 26, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446619092, 'comment_body': '@Hudda -- please add an explicit pointer to a specific example and include it in a comment in the code so that other developers who have the same question as @DubeySandeep can understand the reasoning here, too. Do this for all other similar comments that you are not addressing. Thanks!', 'comment_created': datetime.datetime(2020, 6, 28, 8, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 446619221, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446619231, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446619248, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446619253, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446619263, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 6, 28, 8, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446619603, 'comment_body': '> Can you please explain this change? Also, there can be a constant defined just after the class definition, are we considering that case\r\n\r\nYes we are considering that case also', 'comment_created': datetime.datetime(2020, 6, 28, 8, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446631013, 'comment_body': 'Fixed now.', 'comment_created': datetime.datetime(2020, 6, 28, 10, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446632371, 'comment_body': ""My question still persists do we expect a newline after class defination even if the class deosn't have the docstring?"", 'comment_created': datetime.datetime(2020, 6, 28, 10, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446632405, 'comment_body': ""My question still persists do we expect a newline after class defination even if the class deosn't have the docstring?"", 'comment_created': datetime.datetime(2020, 6, 28, 10, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446632691, 'comment_body': 'No, we just need a newline after the class docstring.', 'comment_created': datetime.datetime(2020, 6, 28, 10, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446632962, 'comment_body': 'This is still not correct should we through a different error for this case? Please check `BlankLineBelowFileOverviewChecker` for reference!', 'comment_created': datetime.datetime(2020, 6, 28, 10, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446633067, 'comment_body': 'Have you read the `BlankLineBelowFileOverviewChecker` checks? will that be helpful?', 'comment_created': datetime.datetime(2020, 6, 28, 10, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446633611, 'comment_body': 'That check was just to check if there are more than 2 lines between two function definitions, but here we are also checking if there is not even a single newline between class docstring and rest of the class body', 'comment_created': datetime.datetime(2020, 6, 28, 10, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446633757, 'comment_body': ""Yep, I've tried that also, this check is more complicated than any of the existing ones and I can say this because last 7 or 8 checks in that file are implemented by me."", 'comment_created': datetime.datetime(2020, 6, 28, 10, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446635521, 'comment_body': '@seanlip @DubeySandeep  See this link(https://github.com/oppia/oppia/blob/22cbfdef8d321d6798cc21036aa2324180f9aec3/core/controllers/base.py#L107) for example.', 'comment_created': datetime.datetime(2020, 6, 28, 10, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446635565, 'comment_body': 'I have also added a dummy example in the inline comment.', 'comment_created': datetime.datetime(2020, 6, 28, 10, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446778312, 'comment_body': ""This is still not resolved and the lint test are passing, I don't think your lint test is working as expected! Can you please check what's going on? (Even you made changes in this file in the last commit and I don't know why this wasn't caught during the pre-push checks, can you please explain?)"", 'comment_created': datetime.datetime(2020, 6, 29, 5, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446802090, 'comment_body': 'This happened because we have a blank line between the docstring and class name, So our lint check considered it as a class with a docstring and skipped the check for this class.', 'comment_created': datetime.datetime(2020, 6, 29, 6, 37, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446830605, 'comment_body': ""> So our lint check considered it as a class with a docstring and skipped the check for this class.\r\n\r\nBut there isn't any newline after the docstring and the lint test passes successfully which isn't expected right?"", 'comment_created': datetime.datetime(2020, 6, 29, 7, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446831602, 'comment_body': ""Yes, but we need a separate lint to check if there is newline between docstring and class name. As we don't want to have two different lint checks in a single function. This check is working as expected."", 'comment_created': datetime.datetime(2020, 6, 29, 7, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446833948, 'comment_body': 'My question still persists, in any case, do we expect the lint test to fail if there is no newline after the class docstring? I don\'t think the lint test should pass this:\r\n```\r\nClass A():\r\n\r\n    """"""Some docstring.""""""\r\n    def __init__():\r\n        ....\r\n```', 'comment_created': datetime.datetime(2020, 6, 29, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446835061, 'comment_body': 'yes, this check do not pass on this one. But I think this for this we need a different lint check to check if the docstring is correctly placed. ', 'comment_created': datetime.datetime(2020, 6, 29, 7, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446836034, 'comment_body': 'This check is working as expected because docstring must be placed just after the class name and it is working fine on all those cases.', 'comment_created': datetime.datetime(2020, 6, 29, 7, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 446836560, 'comment_body': ""On this commit: https://github.com/oppia/oppia/pull/9687/commits/a3040c70d4cbbb3cd9ae6be7315b072529941eb9 the lint test passes though we have a similar case on around line 66 of `scripts/install_third_party_libs_test.py`, can you please check why the lint test didn't fail locally or on CI?"", 'comment_created': datetime.datetime(2020, 6, 29, 7, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446885202, 'comment_body': '@Hudda, extra newline? Please do a self-review before assigning reviewers. Also, are we expecting pre-push lint checks to fail on this line?', 'comment_created': datetime.datetime(2020, 6, 29, 11, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 446894807, 'comment_body': ""Okay, I will keep that in mind. I'll self-review first from next time. I think we don't have a check for this."", 'comment_created': datetime.datetime(2020, 6, 29, 11, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449248111, 'comment_body': 'lineno --> line_number', 'comment_created': datetime.datetime(2020, 7, 2, 20, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 449248202, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2020, 7, 2, 20, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 449362116, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 3, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449362136, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 3, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449366058, 'comment_body': 'has -> have', 'comment_created': datetime.datetime(2020, 7, 3, 4, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 449475776, 'comment_body': 'Incorrect docstring explanation? ', 'comment_created': datetime.datetime(2020, 7, 3, 9, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449476068, 'comment_body': 'Incorrect arg type and description?', 'comment_created': datetime.datetime(2020, 7, 3, 9, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449483052, 'comment_body': 'Do we need this?', 'comment_created': datetime.datetime(2020, 7, 3, 9, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449483358, 'comment_body': 'Can we do this on top:\r\n\r\nif node.doc is None:\r\n  return', 'comment_created': datetime.datetime(2020, 7, 3, 9, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449484009, 'comment_body': 'first_line_after_doc (and second_line_after_doc)', 'comment_created': datetime.datetime(2020, 7, 3, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449485581, 'comment_body': 'Can we move this to the line above?', 'comment_created': datetime.datetime(2020, 7, 3, 9, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449485663, 'comment_body': 'Can we move this to the line above?', 'comment_created': datetime.datetime(2020, 7, 3, 9, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449486725, 'comment_body': 'Why do we have to specify the `visit_classdef` in the tests? I think test should be unaware of how this is written internally, right?', 'comment_created': datetime.datetime(2020, 7, 3, 9, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449488388, 'comment_body': 'test_multiline_class_argument_with_correct_style* (Also add another test test_multiline_class_argument_with_incorrect_style)', 'comment_created': datetime.datetime(2020, 7, 3, 9, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449490351, 'comment_body': 'Add test for class with:\r\n!. No doc\r\n2. A newline above docstring and newline after doc string\r\n3.  A newline above docstring and no newline after doc string', 'comment_created': datetime.datetime(2020, 7, 3, 9, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449518477, 'comment_body': 'Corrected.', 'comment_created': datetime.datetime(2020, 7, 3, 10, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449518543, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 3, 10, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449518685, 'comment_body': 'Removed this logic.', 'comment_created': datetime.datetime(2020, 7, 3, 10, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449518787, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 7, 3, 10, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449518863, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 10, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449522540, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 10, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449523179, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 10, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449523241, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 11, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449523630, 'comment_body': 'For pylint check, we need to use the method we used when writing check.', 'comment_created': datetime.datetime(2020, 7, 3, 11, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449530101, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 11, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449530159, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 11, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449539100, 'comment_body': 'Remove `.` after ClassDef*', 'comment_created': datetime.datetime(2020, 7, 3, 11, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449539495, 'comment_body': 'Make sure that we only count triple quote as a docstring*', 'comment_created': datetime.datetime(2020, 7, 3, 11, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449540942, 'comment_body': 'I think it should be nodes not scoped_nodes, can you please check? (not sure!)', 'comment_created': datetime.datetime(2020, 7, 3, 11, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449543328, 'comment_body': 'I see, thanks for the info. I think this will help us to write a unit tests for each block. Thanks!', 'comment_created': datetime.datetime(2020, 7, 3, 11, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449551630, 'comment_body': 'We need this here. This is a check I need to implement in the second milestone', 'comment_created': datetime.datetime(2020, 7, 3, 12, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449551748, 'comment_body': 'I checked it is scoped_nodes', 'comment_created': datetime.datetime(2020, 7, 3, 12, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449551974, 'comment_body': ""@DubeySandeep I don't get this comment of yours can you please explain?"", 'comment_created': datetime.datetime(2020, 7, 3, 12, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449553478, 'comment_body': 'Oh yeah! Thanks for the info!', 'comment_created': datetime.datetime(2020, 7, 3, 12, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449554213, 'comment_body': 'A doc string can be like this:\r\n\r\n```\r\nclass A:\r\n    \'\'\'Some Docstring!\'\'\'\r\n\r\n    pass\r\n```\r\n\r\n(and in other different forms right?) So I wasn\'t you to check whether we are sure that the docstrings are going to be of form `""""""`?', 'comment_created': datetime.datetime(2020, 7, 3, 12, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449554518, 'comment_body': ""Can you please add a reference? (I'm writing doc for pylint extensions and I'll use this link there!)"", 'comment_created': datetime.datetime(2020, 7, 3, 12, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449556030, 'comment_body': ""Sorry, my mistake, I've checked it from older implemented checks, but after checking the official documentation I found that it is node. http://pylint.pycqa.org/projects/astroid/en/latest/api/astroid.nodes.html?highlight=visit_classdef#astroid.nodes.ClassDef"", 'comment_created': datetime.datetime(2020, 7, 3, 12, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449561785, 'comment_body': '@DubeySandeep We already have a check for this which only allow docstring starting with` """"""`', 'comment_created': datetime.datetime(2020, 7, 3, 12, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449568794, 'comment_body': ""Are we sure that this check will run before that check? Also, what will happen if the docsting is written with `'''` will this check will run, if yes then when the `while` loop will terminate?"", 'comment_created': datetime.datetime(2020, 7, 3, 12, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449569675, 'comment_body': 'No, but I am thinking of checking all the possible cases, i.e.  `\'`, `""`, `\'\'\'`, `""""""`', 'comment_created': datetime.datetime(2020, 7, 3, 12, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449569809, 'comment_body': 'Thanks for the link, can you please update the type here? :)', 'comment_created': datetime.datetime(2020, 7, 3, 12, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449570983, 'comment_body': 'hmmm.. that can be done! I wanted to check why we removed the earlier `):` check?  ', 'comment_created': datetime.datetime(2020, 7, 3, 12, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 449571801, 'comment_body': 'Because if we used that then the check will fail if there are newlines between the class definition and docstring.', 'comment_created': datetime.datetime(2020, 7, 3, 13, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 449581294, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 3, 13, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '2f115bd47fc03d42d99d117ca33a6b67ac1e80cc', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '370480be8c3aa3df9185fe5332b4e8eed1313c4d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a2fd81fafc5d9947d33b511ec20d17391b33b4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f5b7a8d11a3eed18d7454a1910c45a9b3c2278d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4fe818e98970f984eea97aa07cd5e2fbef4707f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '284d2684c51cec2b2b7a24a046cd430947b608ad', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '904b46de35feabb98b7df45625a15c0a58ff8c87', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cda50b80f63a6e3198ea6eb399f1586d2b51e7e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0f4bb9ffb9b9f386372d4991b325e5f8f1e337b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0372cbbcfdc8a4335ba4724a03741c74b03f6229', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3040c70d4cbbb3cd9ae6be7315b072529941eb9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94e168e9d73648dab2acfd9aebd69828d503ddc1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd510529a98da74014ce6b26f6a60563c31e5f568', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aac060e799404797a70f2382896b33723d02d33', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d59cedd566e89dfd1000523e64e71f3acb79d35', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0725d8fb6f8751c63dd51168c19c24bbbad0c44b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ef572eaf525e96de0c8e5f3a10a90e4334daab2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57cebde295111cc5147ebd54eb0f9fbd36caef2f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08429eaffcb7e6b76943e41d0eb15544a34f8d2b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06bbc0cc84d13d9f95c9c088455d482d3a493e79', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36fc4c1825c61d8ae38e2f6a6eccf0917b9816ba', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73a4e9c8e7c7f72257d1659bef522c458365db8c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f1b3aa43348c78519a38830ad48590d31d7f24b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3624ec48f7a663b811e9d1792d23031a2e3a8907', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c27990b10f2a2af394da67b9111b8f27ca6203f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9738193a758bf81aeccf5347d6d165b7f0e046f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bc6f17abc9bcfc68dcdf08e5da70f495a4b70de', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
450094734,Fix formatting of linter messages,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

__1. This PR fixes or fixes part of #[fill_in_number_here].__
2. This PR does the following: Fix the formatting of linter messages and remove the printing of messages as a list.

**Linter messages**
**Before**
![Screenshot from 2020-07-16 15-41-22](https://user-images.githubusercontent.com/29057268/87662341-ae768b80-c77f-11ea-970d-a38e0e525700.png)
![Screenshot from 2020-07-16 15-54-12](https://user-images.githubusercontent.com/29057268/87662551-feede900-c77f-11ea-83f3-4a23debe5ac2.png)

**After**
![Screenshot from 2020-07-16 15-27-19](https://user-images.githubusercontent.com/29057268/87662584-0a411480-c780-11ea-82c9-3992a1ae75fd.png)
![Screenshot from 2020-07-16 15-44-11](https://user-images.githubusercontent.com/29057268/87662606-12994f80-c780-11ea-98dd-e941e1cce830.png)

**Before**
![Screenshot from 2020-07-16 15-08-18](https://user-images.githubusercontent.com/29057268/87662960-af5bed00-c780-11ea-8c8a-c5c864ad7a0d.png)


**After**
![Screenshot from 2020-07-16 15-27-50](https://user-images.githubusercontent.com/29057268/87662895-93f0e200-c780-11ea-92b2-e6cdf91e3f03.png)



## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9925,https://api.github.com/repos/oppia/oppia/pulls/9925,https://github.com/oppia/oppia/pull/9925,closed,2801,3213,26,56,39,192,1,1,[{'name': 'PR: LGTM'}],2020-07-16 10:47:44+00:00,2020-09-01 04:10:22+00:00,4036958.0,"46 days, 17:22:38","[{'comment_id': 455745470, 'comment_body': 'Why are you removing this? This is a general logger for concurrent tasks, see if you can fix the issue without changing this? ', 'comment_created': datetime.datetime(2020, 7, 16, 12, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 455748259, 'comment_body': ""We don't need this now, because we are printing where we are running it, I tried to fix this by checking if we are getting a list of messages and ignore if we are getting a list but @seanlip disapproved that solution as that was not conceptually right(Sorry, I do not have the proof now, as the comment was resolved.)"", 'comment_created': datetime.datetime(2020, 7, 16, 12, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 457391773, 'comment_body': '>  ignore if we are getting a list but @seanlip disapproved that solution as that was not conceptually right\r\n\r\nYeah, type checking is really not a good thing to do here!\r\n\r\nI had a discussion with @bansalnitish on this today and we though this:\r\n\r\n1. Have a function in linter class which will return a list of the linter functions.\r\n2. In the pre_commit linter, file create a full list of these returned linter functions\r\n3. Create a TaskThread object for each of these linter functions.\r\n4. Run all the tasks in parallel.\r\n\r\n(This way all the linter methods won\'t have to manage logging!)\r\n\r\nNote: We have to find a way to run run ""js_ts validator, parser"" before running the lint test (not sure!)\r\n\r\nYou can discuss this with @bansalnitish in detail.\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 13, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 458214749, 'comment_body': ""Hi @Hudda,\r\n\r\nI think what Sandeep's said is fine (I know it would not be easy and would take some time to implement such stuff).\r\n\r\nLet me explain the problem with the example. We will consider the `check _check_non_test_files` mentioned here: https://github.com/oppia/oppia/blob/develop/scripts/linters/python_linter.py#L108.\r\n\r\nIn my opinion, I see the following problem with this:\r\n\r\n1. We have self.verbose and then the print statement saying this check is started. We would have to write the same three four lines while we write any other check. \r\nI would like to see this being removed from each of the check and added it somewhere in common (basically somehow use concurrent utils).\r\n\r\n2. We see two `PRINT` statement in this check -- once while the error is caught and once during the end of the check. Do we really want these PRINT statements? In addition, we are returning the summary_messages which we will be printed at the last + message list would also be printed for checks in these functions while tasks are created via concurrent_utils. So, in total an error in this message would be seen four times. Do you see this as a problem?\r\nI would like to have two messages being printed out of this test. Once while the entire list of messages is printed at the end by passing summary_messages (we won't touch that flow). Once, we could list the errors that this check caught at the end of this check. The check should have not have any PRINT statement.\r\n\r\n\r\nThis is how I think could be done (we can discuss in detail and this will require some design analysis):\r\n\r\n1. We can remove all the PRINT statements from the check\r\n2. Create a task thread of all functions. We can change this line: https://github.com/oppia/oppia/blob/develop/scripts/linters/python_linter.py#L599 to return all functions basically change it to\r\n\r\n```\r\nreturn custom_linter.get_linter_functions(), third_party_linter.get_linter_functions\r\n```\r\n\r\n3. Accumulate all these function in pre_commit_linter or wherever suitable. Execute them parallelly using concurrent utils, which we print the output of each test once it is completed (In addition, we can convert these private check functions to public and we will be able to execute all the checks in parallel rather than executing classes in parallel -- I might be wrong because I don't understand why these functions are marked private).\r\n\r\nThis would fix both the problems.\r\n\r\nSo, two questions for you:\r\n1. Do you see removing all print statements which are scattered in each check, do not help much in debugging, addition of 4 lines at the start to check verbose condition etc is a problem (as mentioned in points 1-2 above) and should be solved (let us not consider how it would be implemented)?\r\n2. Do you think we can achieve the approach that I mentioned?\r\n\r\nTagging @seanlip @DubeySandeep too for there thoughts!"", 'comment_created': datetime.datetime(2020, 7, 21, 16, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 458574283, 'comment_body': ""I agree with the printing part, but running every method in parallel, I don't think this is a good idea to run each method in parallel as most of the methods depends on each other in class."", 'comment_created': datetime.datetime(2020, 7, 22, 6, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458606729, 'comment_body': 'This was discussed in the most recent meeting with @bansalnitish and @Hudda.\r\n\r\nCould one of you please add a clear, full summary of the plan of action and the results of the discussion, so that @DubeySandeep can take a look and comment?', 'comment_created': datetime.datetime(2020, 7, 22, 7, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458912925, 'comment_body': 'OK, I can take this up.\r\n\r\nAs per our meeting:\r\n1. We all agreed that the problems I posted above are genuine.\r\n2. We decided to eradicate all the PRINT statements from the checks.\r\n3. The checks would remain private and hence classes would be executed in parallel.\r\n4. There would be no verbose statement too at the start of each check, it would be covered by concurrent_utils.\r\n5. Each check would log two times, once while the checks run via concurrent_utils and once when the full list of summary_messages is printed at the end.\r\n6. The API exposed by concurrent_utils should be such that it takes type from both the backend tests and the linter. Currently, the linter passed a list of string and backend tests pass strings. We will make this consistent so that both of them pass a similar object(it could be anything). \r\n7. If time allows (or may be in next milestone), we will even convert the summary_message that is returned from each check to a domain object with properties like check_name, status, errors, etc.\r\n\r\n@Hudda could you please add if I missed something? \r\n\r\nAlso, @DubeySandeep does this sounds good to you?', 'comment_created': datetime.datetime(2020, 7, 22, 16, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 459551937, 'comment_body': '@DubeySandeep ping!', 'comment_created': datetime.datetime(2020, 7, 23, 15, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459827922, 'comment_body': '> Also, @DubeySandeep does this sounds good to you?\r\n\r\n\r\nThis sounds awesome! Thanks for discussing this with others and finalizing it! :)', 'comment_created': datetime.datetime(2020, 7, 24, 2, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459828586, 'comment_body': '> The checks would remain private and hence classes would be executed in parallel.\r\n\r\nWe had planned to run each linter function in parallel, right?', 'comment_created': datetime.datetime(2020, 7, 24, 2, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460199254, 'comment_body': ""Yes, I agree. Though, this is more of design decision I would say. \r\n\r\nAnshul say's its fine to use classes in parallel. I'm fine with both to be honest, but I'm more inclined towards running functions in parallel. @Hudda can you please enlist why you don't want the functions to be converted to public?\r\n\r\nThanks!"", 'comment_created': datetime.datetime(2020, 7, 24, 17, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 463156577, 'comment_body': 'full_messages is not initialised.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 463228533, 'comment_body': 'Initialised', 'comment_created': datetime.datetime(2020, 7, 30, 19, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 465210978, 'comment_body': 'Since the output stream would be returned after the check runs -- why have we written this as ""check currently running""?', 'comment_created': datetime.datetime(2020, 8, 4, 17, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 465212073, 'comment_body': 'file -> files', 'comment_created': datetime.datetime(2020, 8, 4, 17, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 465247492, 'comment_body': 'Why is this comment removed?', 'comment_created': datetime.datetime(2020, 8, 4, 18, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 465248022, 'comment_body': ""This line should be printed when the verbose mode is not enabled in the original code. However, you're printing it each time this check runs. Any reason?"", 'comment_created': datetime.datetime(2020, 8, 4, 18, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 465249296, 'comment_body': 'Can we please follow some convention for naming the tests too? \r\n\r\nOne way would be converting this camelcase `_check_ts_ignore` to `TS Ignore` -- start with capital when it has dash before it.', 'comment_created': datetime.datetime(2020, 8, 4, 18, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 465249590, 'comment_body': 'Why are these checks not made public unlike other linter files?', 'comment_created': datetime.datetime(2020, 8, 4, 18, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 465252798, 'comment_body': 'The name of this files is not good. Can you please change this? \r\n\r\nSuggestion: Can we keep the original files instead of merging these three checks together and naming it other_linter? We can have a class in each of those original files similar to what you did for codeowner linter.', 'comment_created': datetime.datetime(2020, 8, 4, 18, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 465252933, 'comment_body': 'Ditto for this file too.', 'comment_created': datetime.datetime(2020, 8, 4, 18, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 465782835, 'comment_body': 'removed currently.', 'comment_created': datetime.datetime(2020, 8, 5, 14, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 465784550, 'comment_body': 'It should be file instead of files because we have a single file only', 'comment_created': datetime.datetime(2020, 8, 5, 14, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 465785924, 'comment_body': 'It was duplicate we have all these listed in __init__() method.', 'comment_created': datetime.datetime(2020, 8, 5, 14, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 465791598, 'comment_body': 'I think it will be useful to know that we are parsing the files in both cases before we are printing the name of each file in verbose mode since we are not doing that anymore so it will be helpful to print this in both cases.', 'comment_created': datetime.datetime(2020, 8, 5, 14, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 465803642, 'comment_body': 'I tried doing this and it looks very weird to have letter in caps in the middle. Example: `SUCCESS Ts Ignore checks passed`', 'comment_created': datetime.datetime(2020, 8, 5, 15, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 465810487, 'comment_body': 'Because in this linter we have to parse and compile all files before using them in any of the checks, in other words, the checks are dependent, we make these public and test these independently then this will create the problems. Plus, we will migrate all of these to custom eslint checks, therefore I am not seeing any benefit in making these checks public.', 'comment_created': datetime.datetime(2020, 8, 5, 15, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 465812106, 'comment_body': 'Changed the name to other_file_linter, I did this because all the linter files are named by the file types, for example, python_linter, css_linter, etc. And we have other file types for all the remaining file types, so I think it is better to have this name', 'comment_created': datetime.datetime(2020, 8, 5, 15, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 465812360, 'comment_body': 'Changed to other_file _linter_test.py', 'comment_created': datetime.datetime(2020, 8, 5, 15, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 466069905, 'comment_body': 'Considering this represents result/output of the task so should we call this TaskOutput or TaskResult (The later one sounds more like a class name.)?', 'comment_created': datetime.datetime(2020, 8, 6, 0, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 466070431, 'comment_body': ""I'm confused with the properties `messages`, `full_messages` & `all_messages`, can you please add a better name? (Let me know what each represents I can help you find a better name)"", 'comment_created': datetime.datetime(2020, 8, 6, 0, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 466071472, 'comment_body': 'This is not true, right? by this stage the checks have already run, right? If yes then either remove this or change it to `Completed running <name> check`', 'comment_created': datetime.datetime(2020, 8, 6, 0, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 466072148, 'comment_body': 'On the terminal, there can be a log from another task in between these for loop, right? If yes, then please add a `get_task_report` (or anything similar) in the TaskResult class which will return the big string which you can print in one call. Do you think this would be fine?', 'comment_created': datetime.datetime(2020, 8, 6, 0, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 466072433, 'comment_body': 'For which case, we are doing this?', 'comment_created': datetime.datetime(2020, 8, 6, 0, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 466083094, 'comment_body': 'is this only going to store the error messages? if so then call it error_messages* [Ditto elsewhere!]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 6, 0, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 466083219, 'comment_body': 'Why repeated values `summary_messages`?', 'comment_created': datetime.datetime(2020, 8, 6, 0, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 466086049, 'comment_body': 'Why removing these?', 'comment_created': datetime.datetime(2020, 8, 6, 1, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 468014350, 'comment_body': 'Changed to TaskResult.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 468020291, 'comment_body': '`messages` contains the messages after stripped by the stripper functions.\r\n`full_messages` conatin unstripped messages.\r\n`all_messages` all pass or fail status.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 468022814, 'comment_body': 'I think it is better to keep as it is because it gives the user a indication that the check is running as the output is going to be printed under this statement. And if we do what you suggested then it will show `Completed running <name> check` and then `Finished <check name>`. I think this is not a good idea.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 468028822, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 468029040, 'comment_body': 'This will print backend tests result.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 468029708, 'comment_body': 'These are duplicates we have these in `__init__` method.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 468034949, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 468036410, 'comment_body': 'the second last summary message is used to pass stripped messages in case if the current linter has a stripper method to strip the messages. but in this linter we do not have such method so we are passing the summary_message twice.', 'comment_created': datetime.datetime(2020, 8, 10, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 470644041, 'comment_body': 'So, this statement should be there in each check right?  I mean all the checks should be consistent.', 'comment_created': datetime.datetime(2020, 8, 14, 14, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 470644593, 'comment_body': ""Oh yes, you're right thanks!"", 'comment_created': datetime.datetime(2020, 8, 14, 14, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 470645262, 'comment_body': '@DubeySandeep ping!', 'comment_created': datetime.datetime(2020, 8, 14, 14, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 470647043, 'comment_body': ""I don't agree with you on this. A check that is finished cannot print saying `Starting check`."", 'comment_created': datetime.datetime(2020, 8, 14, 14, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 470648112, 'comment_body': 'We can change it to something ""Printing errors from XYZ check"".', 'comment_created': datetime.datetime(2020, 8, 14, 14, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 470648798, 'comment_body': 'Can we please add a comment telling the first section is for lint and the other is for backend?', 'comment_created': datetime.datetime(2020, 8, 14, 14, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 470650464, 'comment_body': 'Can we use the same terminology to pass the messages? Like create full_messages in this check too and assign it equal to summary_messages and pass that? \r\n\r\nI would love to hear other suggestions too. Though, seeing two summary_messages would be really weird for anyone.', 'comment_created': datetime.datetime(2020, 8, 14, 14, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 471965657, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 8, 18, 7, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 471966768, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 18, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 471973327, 'comment_body': ""No, This method will run just once at the beginning of JsTs linter and this is not a check, this is for parsing all files. So, I don't think we need to be consistent here."", 'comment_created': datetime.datetime(2020, 8, 18, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 472062006, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 18, 9, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473966141, 'comment_body': 'Currently running task? The task would have been finished right while we print these results?', 'comment_created': datetime.datetime(2020, 8, 20, 13, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 473968016, 'comment_body': 'How would anyone know what is summary messages here? Please make it clear.\r\n\r\nSomething like:  `List of error messages that are stripped to keep XYZ in the message`.', 'comment_created': datetime.datetime(2020, 8, 20, 13, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 473970467, 'comment_body': 'Returns a list of message for the current check', 'comment_created': datetime.datetime(2020, 8, 20, 13, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 473974563, 'comment_body': 'Could we name error_messages to may be `stripped_error_messages`? Then it would be easy to differentiate between full vs stripped. Though, there could be some other better name. ', 'comment_created': datetime.datetime(2020, 8, 20, 13, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 473981073, 'comment_body': 'Is this lint check for codeowner file only? I can see the codeowner_linter.py. \r\n\r\nThough I see you have deleted the app_dev_linter and have added checks from that file to this one. ', 'comment_created': datetime.datetime(2020, 8, 20, 13, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 474736812, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 474736875, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 474736914, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 474736967, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 474738266, 'comment_body': 'Sorry, the file docstring was wrong changed now.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475048482, 'comment_body': ""`all_messages all pass or fail status.`\r\n\r\nSorry, I didn't get this can you please rephrase it?\r\n\r\nAlso, can you explain how these messages are generated and how it's used? [Asking this as I'm unable to understand these things with the variable name!]"", 'comment_created': datetime.datetime(2020, 8, 22, 5, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475048532, 'comment_body': 'Are we expecting to use `FAILED_MESSAGE_PREFIX` to use anywhere in the linter file, if no then move this constant in this file!', 'comment_created': datetime.datetime(2020, 8, 22, 5, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475048641, 'comment_body': 'property name should not start with get*', 'comment_created': datetime.datetime(2020, 8, 22, 5, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475048683, 'comment_body': 'Change the docstring of the class as per the class name*', 'comment_created': datetime.datetime(2020, 8, 22, 5, 22, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475048804, 'comment_body': ""The object from this class are created after the test completes, right? So let's change this to `The boolean value representing whether the task failed.` "", 'comment_created': datetime.datetime(2020, 8, 22, 5, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475048886, 'comment_body': 'self.task_results*', 'comment_created': datetime.datetime(2020, 8, 22, 5, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475049323, 'comment_body': '`                for task_result in self.task_results:`\r\n', 'comment_created': datetime.datetime(2020, 8, 22, 5, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475050103, 'comment_body': ""Don't use `log` thrice, create a variable message_to_log and append data in that. In the end, use log(message_to_log)"", 'comment_created': datetime.datetime(2020, 8, 22, 5, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475050267, 'comment_body': 'May be `Report from <check-name> check`?', 'comment_created': datetime.datetime(2020, 8, 22, 5, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475050294, 'comment_body': 'Ditto as above use `log` once*', 'comment_created': datetime.datetime(2020, 8, 22, 5, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475051968, 'comment_body': 'Why this change? I would suggest you have a separate test for verbose mode disabled?', 'comment_created': datetime.datetime(2020, 8, 22, 6, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475052136, 'comment_body': 'Add this to setUp method to avoid duplicates*', 'comment_created': datetime.datetime(2020, 8, 22, 6, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475052277, 'comment_body': 'Can we assert the whole output? (If date time is the issue, can we mock the log function and try?)', 'comment_created': datetime.datetime(2020, 8, 22, 6, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475052874, 'comment_body': 'As these functions are now in the same class, I would suggest having self.failed and self.error_messages (instead of returning these values)', 'comment_created': datetime.datetime(2020, 8, 22, 6, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475052912, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475052955, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475053292, 'comment_body': '`messages` contain all the stripped error messages, these messages are those which we get after removing the extra part from the error messages. We are going to use these messages for non-verbose mode.\r\n`full_messages` contain messages without any stripped part. These messages are going to be used for verbose mode.\r\n`all_messages` here, we add pass or fail status to the full_messages. these are also used to verbose mode.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475053388, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475053485, 'comment_body': 'removed get.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475053539, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475053611, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475053740, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475053805, 'comment_body': 'Update the docstring correctly*', 'comment_created': datetime.datetime(2020, 8, 22, 6, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475053860, 'comment_body': 'Are we expecting to test the full log now?', 'comment_created': datetime.datetime(2020, 8, 22, 6, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475053900, 'comment_body': 'are we still keeping these functions private?', 'comment_created': datetime.datetime(2020, 8, 22, 6, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475053926, 'comment_body': ""I don't get this comment. In some messages we are logging time as well, If we use just a single log, then we have to either use show_time in all or don't use at all. And if we try to use show_time in all, then it won't look good with a line containing dashes(----) only."", 'comment_created': datetime.datetime(2020, 8, 22, 6, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475053954, 'comment_body': ""I don't get this comment. In some messages we are logging time as well, If we use just a single log, then we have to either use show_time in all or don't use at all. And if we try to use show_time in all, then it won't look good with a line containing dashes(----) only."", 'comment_created': datetime.datetime(2020, 8, 22, 6, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475054102, 'comment_body': 'Should we remove this function form the LinterTest class?', 'comment_created': datetime.datetime(2020, 8, 22, 6, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475054265, 'comment_body': 'This will return a TaskReport  object? If yes then rename the variables to lint_task_report and validate all the parts of the taskReport object*', 'comment_created': datetime.datetime(2020, 8, 22, 6, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475054325, 'comment_body': 'This assertion looks great! :)', 'comment_created': datetime.datetime(2020, 8, 22, 6, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475055451, 'comment_body': ""I'm talking about the next three lines, if you log them as one message with show_time=True it will be same as before, right? + it will ensure us that there won't be any other message in between, right?"", 'comment_created': datetime.datetime(2020, 8, 22, 6, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475079004, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475079838, 'comment_body': ""I've already added tests with verbose mode enabled at line 123."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475080872, 'comment_body': ""Both HelperTests classes have different codes, so can't add it in setUp method."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475080943, 'comment_body': ""We can do that, but we also have dashes in the output. So I don't that it is a good idea to match the whole output"", 'comment_created': datetime.datetime(2020, 8, 22, 11, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475081097, 'comment_body': ""I don't think there is a need to make code owner files function public as these are connected to each other, although I made functions public in all other files."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 30, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475081736, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475083119, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475083185, 'comment_body': 'We still have filename at the beginning of the message, which differs on every machine. So not matching the full path for now.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475083226, 'comment_body': ""We still need it. So, can't remove it for now. But may remove after I migrate all custom js/ts linter checks to eslint checks."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475088697, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 13, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475245593, 'comment_body': 'Can we please replicate the same comments of the `codeowner_linter.py` to everywhere else? (Make this self.failed etc.)', 'comment_created': datetime.datetime(2020, 8, 23, 17, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 475795422, 'comment_body': ""I've already replicated the codeowner_linter.py changes everywhere except self.failed and self.messages as in codeowner linter we have checks related to each other, while in other linters all checks are independent so we can't do that here."", 'comment_created': datetime.datetime(2020, 8, 24, 17, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475796461, 'comment_body': 'An -> A', 'comment_created': datetime.datetime(2020, 8, 24, 18, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 475797230, 'comment_body': 'Ditto here and elsewhere.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 475804100, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475804194, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 24, 18, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475819210, 'comment_body': 'The name of the task. (This is the task report so the task must be completed till this object is created!)', 'comment_created': datetime.datetime(2020, 8, 24, 18, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475820235, 'comment_body': 'Change the variable name similarly: Should we have this: `full_messages` & `trimmed_messages`?', 'comment_created': datetime.datetime(2020, 8, 24, 18, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475826148, 'comment_body': 'Is it expected to change the full_message property here? IF yes, then why do we have these two property `full_message` and all_message?', 'comment_created': datetime.datetime(2020, 8, 24, 18, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475826453, 'comment_body': ""Let's not have the name of the class and it's property be kinda same. I would suggest doing the join inline instead of having a separate property for it."", 'comment_created': datetime.datetime(2020, 8, 24, 18, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475828964, 'comment_body': '`all_messages` is a list, right? is it expected to print a list here? ', 'comment_created': datetime.datetime(2020, 8, 24, 18, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475832087, 'comment_body': 'optional: Have an init function to configure the object as needed.', 'comment_created': datetime.datetime(2020, 8, 24, 19, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475833325, 'comment_body': 'CodeownerLint...*', 'comment_created': datetime.datetime(2020, 8, 24, 19, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475833764, 'comment_body': '```suggestion\r\n        """"""Constructs a CodeOwnerLintChecksManager object.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475835281, 'comment_body': 'Assert the full output* (You can use assertRegex if required!) Also, try avoiding logics (if-else) in tests!', 'comment_created': datetime.datetime(2020, 8, 24, 19, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475836274, 'comment_body': 'Ditto*', 'comment_created': datetime.datetime(2020, 8, 24, 19, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475838926, 'comment_body': '```suggestion\r\n            TaskResult. A TaskResult object representing the reslut of the lint check.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475840989, 'comment_body': 'why you have created a variable on line 296? is that of any use?', 'comment_created': datetime.datetime(2020, 8, 24, 19, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475841520, 'comment_body': '```suggestion\r\n            list(TaskResult). A list of TaskResult objects representing the results of the lint checks.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475841927, 'comment_body': 'Please assert the full log! You can use assertRegex if required!', 'comment_created': datetime.datetime(2020, 8, 24, 19, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475842243, 'comment_body': 'Please remove this function we had added this for temporary and thought of removing it completely in this PR!', 'comment_created': datetime.datetime(2020, 8, 24, 19, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475842970, 'comment_body': '```suggestion\r\n    """"""TUnit test for the CodeOwnerLintChecksManager class.""""""\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475843935, 'comment_body': 'assert lint_task_report.failed is True. (Also, assert the other property of lint_task_report)\r\n\r\nDitto elsewhere!', 'comment_created': datetime.datetime(2020, 8, 24, 19, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475853701, 'comment_body': ""Let's try avoiding using log functions in these files. Can we return a taskResult object with the same message:\r\n`return [concurrent_task_utils.TaskResult('CSS lint', False, 'There are no HTML or CSS files to lint.', '')]`"", 'comment_created': datetime.datetime(2020, 8, 24, 19, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475855804, 'comment_body': 'Are we expecting to call `perform_all_lint_checks` function here?', 'comment_created': datetime.datetime(2020, 8, 24, 19, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475856891, 'comment_body': ""Remove `print_swap` from all the places where it's not needed! (Do the clean-up thoroughly as these will create confusions later.)"", 'comment_created': datetime.datetime(2020, 8, 24, 19, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475858440, 'comment_body': 'Should these functions return taskResult? This will help us to avoid another big rework when lint function will run as a taskThread (Currently we run the class)', 'comment_created': datetime.datetime(2020, 8, 24, 19, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475860774, 'comment_body': 'is this assignment necessary?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475862325, 'comment_body': '```suggestion\r\n        linter_stdout = [\r\n        self.check_mandatory_patterns(),\r\n        self.check_bad_patterns(),\r\n        self.check_newline_at_eof()]\r\n```\r\n\r\nShould we do it this way^? (Fine with either!)', 'comment_created': datetime.datetime(2020, 8, 24, 20, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475862735, 'comment_body': 'task_results*', 'comment_created': datetime.datetime(2020, 8, 24, 20, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475864319, 'comment_body': 'Why this file have JSTSLintTest?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475866388, 'comment_body': 'As mentioned above, please remove these `assert_same_list_elements` & `assert_failed_messages_count` and assert the complete message and other values of the taskResult*', 'comment_created': datetime.datetime(2020, 8, 24, 20, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475867876, 'comment_body': 'If someone adds new bad_pattern without any test the backend test will fail for coverage? If no, do you have any suggestions on how we can enforce having tests for such cases?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475870860, 'comment_body': 'Do we ned `error_summary`?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476569469, 'comment_body': ""Hi @DubeySandeep, I don't think this was supposed to be done in this PR. It will be done in separate PR where we will match the complete logs. Refer: https://github.com/oppia/oppia/pull/9925#discussion_r458912925"", 'comment_created': datetime.datetime(2020, 8, 25, 16, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 476576038, 'comment_body': ""We are changing the private linter functions to the public so that we can also write tests for each function and assert the complete error log reported by the function, that was the expectation, right? Are we thinking of doing this in a separate PR? I'm fine with that but I think the main expectations from these public functions are that we can run them separately and can have test complete logs and remove `assert_same_list_elements` function from the codebase completely!"", 'comment_created': datetime.datetime(2020, 8, 25, 16, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476576984, 'comment_body': 'Yes, the expectation is totally correct.\r\n\r\nYup, we plan to do it in a separate PR.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 476578607, 'comment_body': ""> Yup, we plan to do it in a separate PR.\r\n\r\nI'm fine with that, but please make sure to remove the `assert_same_list_elements` from the codebase before we start using it in other places! [It would be great if you can prioritize that PR, I think that was the major expectation from this PR.] \r\n\r\nEDIT:\r\n\r\nThat was = removing `assert_same_list_elements` and asserting the full log (This is the major issue in our linter test)."", 'comment_created': datetime.datetime(2020, 8, 25, 16, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476590838, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 477211408, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477212522, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477215606, 'comment_body': 'We have to add the pass or fail status to the the full_message list, for that we need all_messages property', 'comment_created': datetime.datetime(2020, 8, 26, 11, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477221499, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477223429, 'comment_body': 'No, backend tests do not return a list, but a string.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477236579, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477237823, 'comment_body': 'The output is too big here, so it is not possible to assert full message.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477238266, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477240277, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2020, 8, 26, 11, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477240588, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477241776, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477242010, 'comment_body': 'NO, removed.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 54, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477243149, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 11, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477283138, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477287662, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477293835, 'comment_body': 'We need it here, in case if there is an error while running the linter, we are printing the error and exiting the css linter. so to catch that message we need print_swap here.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477299873, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477300971, 'comment_body': 'No, this is a helper function of the main function we do not need to return taskresult here.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477301223, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477302900, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477305959, 'comment_body': 'Because we have some JSTS lint checks in this file. Similarly, we have CSS, HTML and Python lint checks in general_purpose_linter.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477322777, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 13, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477324763, 'comment_body': ""No, backend tests won't fail if anyone add a new bad pattern, we have to keep track of it in the code review. \r\n\r\nSorry, I do not know how to enforce having tests for such cases."", 'comment_created': datetime.datetime(2020, 8, 26, 14, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477382778, 'comment_body': 'removed.', 'comment_created': datetime.datetime(2020, 8, 26, 15, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479368381, 'comment_body': ""I don't see any changes, I think you haven't changed the `self.message` to `self.trimmed_message`"", 'comment_created': datetime.datetime(2020, 8, 28, 15, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479409780, 'comment_body': 'full_messages should be of one type, change it in the backend test to return a list or change it in linters to return a string* (I would prefer the first one, as the name of the variable is plural.)', 'comment_created': datetime.datetime(2020, 8, 28, 16, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479411102, 'comment_body': ""change this to get_report (or something around that) [And it should not be a property!]\r\nalso, don't change the full_message property here!"", 'comment_created': datetime.datetime(2020, 8, 28, 16, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479411433, 'comment_body': 'The default value should be empty list*', 'comment_created': datetime.datetime(2020, 8, 28, 16, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479411744, 'comment_body': 'Make it return a list as suggest above in a comment*', 'comment_created': datetime.datetime(2020, 8, 28, 16, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479415146, 'comment_body': 'Instead of running the third_party checks, we should much subprocces and assert the subprocces was called with a given command. [The moto of this file is to have  unit test for the linter script.]\r\n\r\nThis needs a bit of audit, I would suggest creating an issue and leave it as later work!', 'comment_created': datetime.datetime(2020, 8, 28, 16, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479417475, 'comment_body': 'Do we really need this message? [Considering this can come between any different logs and it can be messy!]\r\n\r\nCan you please create an issue to check whether this is needed and remove it if not required. [Make sure to add a `TODO(#<issue-id>): ....` message on line 109]', 'comment_created': datetime.datetime(2020, 8, 28, 16, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479424413, 'comment_body': 'status_message', 'comment_created': datetime.datetime(2020, 8, 28, 16, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479435699, 'comment_body': 'Instead of relying on this field to decide how to print the message, create another filed report_enabled (with True default value of keyword param) and disable it for the backed tests. (Let me know if you need more info on this!)', 'comment_created': datetime.datetime(2020, 8, 28, 17, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479449371, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 17, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479457375, 'comment_body': 'Changed now.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479459218, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479460367, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479460777, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479467054, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479467126, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 28, 18, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479620240, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 29, 7, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479621629, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 29, 7, 38, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479669241, 'comment_body': 'This should be a property of the `TaskThread` object instead of `TaskResult`.', 'comment_created': datetime.datetime(2020, 8, 29, 17, 4, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479801085, 'comment_body': '@DubeySandeep If I do this then it would not be possible to add the status message in get_report function because this boolean help to decide if it has to add pass/fail status or not', 'comment_created': datetime.datetime(2020, 8, 30, 18, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479808120, 'comment_body': 'If the `report_enabled` is true for taskThread object then log using `get_report` else log the `self.messages`, is that helpful?', 'comment_created': datetime.datetime(2020, 8, 30, 19, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480047389, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 10, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '10f63165a17f11fb3fa3702da9ec91c0cbcf3466', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b747d6ac40a9f88ad165c4bb68b7d987352d824b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c62829671947f376b3bd45b4becef4e7963cc4a3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db0e93d0388f20b44cee98a5511907604c5c2d6a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96154f81dc127ad1e1fbc7cc961b16456ed48a9c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e368156f2f19c5d8c6b334f9a48b5c3038016abe', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '460f5e4ea4f9650d60537a9f0294d5c0417f48b7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd139ee0f498c2d43b6fef75abb49ccbf217d2e72', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eebb46005464ac207ea02eb2a77975f4c4abc305', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d15c291789293efc9c8bad6f5cfced268457c48', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '689faea839b2182fcc506ab0008bcc2f048c0363', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd719880146a050245951ed40371dd01ad8282c8a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e800032269fb856e78ad695a328f3ce49b22a5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e396ae90605d220979d0237c0201416e0dc6fc53', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37b01ff2654d455e0c9f5dfa2b721a8771ed3743', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8e6f254f2c01d18d10cbd499d9e60a2e4e2cdc5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbfbee45d39bea34e69a6bc6ce89e4040a36850a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da508255e259b63ea8f567c517c94d31844b4e57', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4abd2bffe0a90e1450e5c1a2e69f91335286b825', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb9be10dd8d4cb53c425ab5bc8f7c30166f736ac', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67457ca9a96f1d07aa159fb26eb16d307285b22d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5f580573fb9b901137335be24b41d9c5c8fe796', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f8663939f1549fff48bf86d9b9bbee6ec0e741', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a7038ac53926b6f5d38e3026c9826ad50a8426c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e6749868e84b7efa1bd483e591c7c782c278b8c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541cb456c26ef2c9edd8dbd50ceedff5a8313164', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f3d2ee982ea91f2df5983ff65867fd5eb4a6ab9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '463788efd33e621bc7da0d06ee0164909411ee79', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f5b20cfe4a20deaac6e3d4e3790a14530d2fa9a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e857feadc2896a388ded17afe73925ace503ffc9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c438162f0efdd76be43adb954767c267ec3fefb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e594c54db46696bca15693366c7ab7ec11d245', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51a24bfea5f634f0dccd8d6be8dd971d693a4efd', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f53d560c63e1ce5373a1dc311c6ccecd09f81c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea7d15d3a9baf39485dd47191eb88635009e60f3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73947fd46fbb97f1877e773a482b5be567796798', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd303fc51d8e4a3f49736e3143fd068501912018b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '795b5ecdc70bf9986917c0dee089c71a65731cf7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de30051c8f44c092dc790a3aadcf5815796650eb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c70e2265c38b0d33ec596a73f0179b26e5687f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f9fb76c024283025a63e7c71df4a5d18fe9313e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8410a0ab5d47a57d04209d1088df47222bfe036a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7c0e0b619472d6c897fc39c530015fb3f1c199b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a06f7f8ae2215b727a6e36aebfee833e7f098b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9accd7512e637535e870add82cea09e8019b422', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83aafeade15acb0792150e4484922e33caff76cf', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ac470d78f27d4828b5206795429d7899f72ed92', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c12da2dd2ab42dbd8c68aa62fdd6618947aa89', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32275257d3c566d4535a7ead03aeecf0180961a2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f58a7d19efdc23b92ab46ea38856f4cd9d321c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69672ef353ee7a0a8520f766387690a6ccbc9959', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dde99b6491aa9ebfca7f4bb1460e25e86dc9d08', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35f2365bf2bc55edbd6de9baf4cb5e2b1d0136be', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98827af2a00ee1650e8fb2ef72a5befe46ccb4e9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6394875ee847b7a9e2026775dc961f27cb7ad400', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f273fc1f5b7c7484567a73a6dc87225a99176233', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
452582224,Fix part of #9766: Inherited from a new class named LinterTestBase,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #9766 
2. This PR does the following: Created a new class in test_utils.py and used it as a base class, the class is named as LintTestBase

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9959,https://api.github.com/repos/oppia/oppia/pulls/9959,https://github.com/oppia/oppia/pull/9959,closed,389,174,15,7,14,10,0,1,[],2020-07-19 14:07:06+00:00,2020-07-25 22:00:44+00:00,546818.0,"6 days, 7:53:38","[{'comment_id': 458226335, 'comment_body': ""Why do we have this function? \r\n\r\nIs it kept to check one error from the list of all errors? If yes, to check the output of one test while all tests are run you are using this to see if from the entire logs,  does the check that I'm running added its error message, right?"", 'comment_created': datetime.datetime(2020, 7, 21, 16, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 458572005, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2020, 7, 22, 6, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459204647, 'comment_body': 'This says python file with valid syntax, however the name suggests it is invalid file? Can you please check this here and everywhere else?', 'comment_created': datetime.datetime(2020, 7, 23, 4, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 459204686, 'comment_body': 'Ditto here.', 'comment_created': datetime.datetime(2020, 7, 23, 4, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 459546934, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 15, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459547067, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 15, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460206356, 'comment_body': 'Any specific reason for this to be a base from **AppEngine**TestBase ?', 'comment_created': datetime.datetime(2020, 7, 24, 18, 0, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460211317, 'comment_body': 'Any specific reason for these changes?', 'comment_created': datetime.datetime(2020, 7, 24, 18, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460415581, 'comment_body': 'Yes because that class is inheriting from `unittest.TestCase` and also has `swap()` method and many other methods like checking for the use of `assertRaisesRegexp()`\r\n', 'comment_created': datetime.datetime(2020, 7, 25, 15, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460415674, 'comment_body': 'Yes, with those changes linter was raising two errors, as the line break is not at the right place, so to fix that error, I had to make this change. ', 'comment_created': datetime.datetime(2020, 7, 25, 15, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': 'ce87a5de1707ecafd6dbb6b5e7c21671465daebe', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44051ddb89b5c062e4cff0f7732ec53c11cd396a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7f91353589a8d7767a916900f1ebce9721e77b4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29305adf2ff107c1274de6eb9c2a007ecefe46c3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bbd673a811cb295f173a5d81096dbded503025b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55bec30e7d38edf0d2d81d1af8ab7f5fd740be45', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b83243c8ad9d2891c775e3291c8abea784244627', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
458526141,Fix part of #8423: Added lint check to check for correctly formated typeinfo.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Added lint check to check for correct typeinfo in the docstring.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10107,https://api.github.com/repos/oppia/oppia/pulls/10107,https://github.com/oppia/oppia/pull/10107,closed,1222,897,122,18,21,160,0,1,[],2020-07-29 15:48:17+00:00,2020-08-02 06:59:50+00:00,313893.0,"3 days, 15:11:33","[{'comment_id': 462425936, 'comment_body': 'It is not good to see line break at the half stage of the line -- could you please move the part of below lines above?', 'comment_created': datetime.datetime(2020, 7, 29, 16, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462426282, 'comment_body': 'Is this intentional?', 'comment_created': datetime.datetime(2020, 7, 29, 16, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462426736, 'comment_body': 'dic -> dict', 'comment_created': datetime.datetime(2020, 7, 29, 16, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462427293, 'comment_body': 'The model object is not a good explanation of this. Please reword it.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462429911, 'comment_body': 'Required string to be converted into bytes.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462432083, 'comment_body': 'I was fine with the original code too!', 'comment_created': datetime.datetime(2020, 7, 29, 16, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462436988, 'comment_body': ""This regex looks very hard to interpret -- I'm not able to guess much from this. "", 'comment_created': datetime.datetime(2020, 7, 29, 16, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462437079, 'comment_body': 'Ditto here.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462464900, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462464989, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462465053, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462465113, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462465209, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462465438, 'comment_body': 'We are not using `:` in return section anymore.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462466132, 'comment_body': ""I've taken this regex from the `docstring_checks` file and modify it, which in turn is taken from the pylint codebase. This is the basic structure we need to check docstring parameters."", 'comment_created': datetime.datetime(2020, 7, 29, 17, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462466208, 'comment_body': ""I've taken this regex from the `docstring_checks` file and modify it, which in turn is taken from the pylint codebase. This is the basic structure we need to check docstring parameters."", 'comment_created': datetime.datetime(2020, 7, 29, 17, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462474594, 'comment_body': 'Can you please add a comment on top of both of these regex linking to the pylint codebase from where it was taken?', 'comment_created': datetime.datetime(2020, 7, 29, 17, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462476384, 'comment_body': 'Are we not adding a dot at the end of the description in case of both return and args? I see both the cases (ending with dot and not ending with dot).', 'comment_created': datetime.datetime(2020, 7, 29, 17, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462526129, 'comment_body': 'Again -- we should end all descriptions with a dot.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462529720, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462531756, 'comment_body': 'Changed the regex to catch dot at the end of description.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462545218, 'comment_body': 'and are modified according to our need.', 'comment_created': datetime.datetime(2020, 7, 29, 19, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462711693, 'comment_body': 'I don\'t think ""Error"" is the correct typeinfo.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462711865, 'comment_body': ""Don't just restate the typeinfo. Instead: The exploration to fetch tasks for."", 'comment_created': datetime.datetime(2020, 7, 30, 3, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462711939, 'comment_body': 'Ditto: The exploration to fetch the history page for.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462712504, 'comment_body': ""No, please don't just restate the typeinfo. /cc @brianrodri who might be able to help you figure out the correct docstring description.\r\n\r\nDitto for the arg below."", 'comment_created': datetime.datetime(2020, 7, 30, 3, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462712689, 'comment_body': 'A list of output.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462712780, 'comment_body': 'The domain object corresponding to the given question summary model.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462712879, 'comment_body': '`dict. A dict ...`\r\n\r\nSpeaking of which -- please add to your check that the part of the comment following the typeinfo should start with a capital letter.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 28, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713066, 'comment_body': 'The collection summary model to check.\r\n\r\n(Btw, please fix this throughout your PR. Docstrings that just restate the typeinfo are not very useful -- provide the context instead.)', 'comment_created': datetime.datetime(2020, 7, 30, 3, 29, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713194, 'comment_body': 'system_user is not a type. Please fix. Also the description should be capitalized.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713283, 'comment_body': 'The user settings object to be saved.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713404, 'comment_body': 'The model to be converted.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713567, 'comment_body': ""function_return is not a valid type. Just use `*` for the typeinfo in this case, since it's arbitrary."", 'comment_created': datetime.datetime(2020, 7, 30, 3, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713624, 'comment_body': 'The list of model instances to be stored.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713645, 'comment_body': 'The list of model instances to be stored.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713673, 'comment_body': 'The list of model instances to be deleted.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713806, 'comment_body': 'This is not a list. Please try to understand the function and write an appropriate description.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713851, 'comment_body': 'The model instance to revert.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462713903, 'comment_body': 'list(ClassifierTrainingJobModel).\r\n\r\nIn general, if the typeinfo contains `list`, please ensure that it is `list(...)` instead.', 'comment_created': datetime.datetime(2020, 7, 30, 3, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462714035, 'comment_body': ""Just `str` (for the typeinfo). url(str) isn't a valid type."", 'comment_created': datetime.datetime(2020, 7, 30, 3, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462891130, 'comment_body': 'Changed to str.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462892319, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462892749, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462894935, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462898514, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462901608, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462901685, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462904093, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462914319, 'comment_body': 'CHanged to UserActionsInfo', 'comment_created': datetime.datetime(2020, 7, 30, 10, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462914638, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462914872, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462915801, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462916511, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462916747, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462917121, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 10, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462917933, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 30, 10, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462919164, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462919842, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462920389, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462920791, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 5, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462925091, 'comment_body': 'The keyword arguments..', 'comment_created': datetime.datetime(2020, 7, 30, 11, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462925908, 'comment_body': 'Why is the check not catching this? The description should start with a capital letter. \r\n\r\nA list of....', 'comment_created': datetime.datetime(2020, 7, 30, 11, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462926837, 'comment_body': 'Can we move this up in a single line?', 'comment_created': datetime.datetime(2020, 7, 30, 11, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 462929859, 'comment_body': 'The checks are still running on the codebase when, that is complete I will change all these to start with a capital letter.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462968201, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462968582, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462969089, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 30, 12, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463150023, 'comment_body': 'In that case -- You should not request for a review until your PR is ready.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 463334964, 'comment_body': ""Isn't this supposed to be a period (after the error type)? This should be consistent with what we do for args and I think it was correct before."", 'comment_created': datetime.datetime(2020, 7, 30, 23, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463335164, 'comment_body': 'Add comma at EOL', 'comment_created': datetime.datetime(2020, 7, 31, 0, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463335203, 'comment_body': 'Add comma at EOL', 'comment_created': datetime.datetime(2020, 7, 31, 0, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463335243, 'comment_body': 'Add comma at EOL', 'comment_created': datetime.datetime(2020, 7, 31, 0, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463335326, 'comment_body': ""Add comma at EOL, ditto above. Do this for lists, since now you're adding a period to the end."", 'comment_created': datetime.datetime(2020, 7, 31, 0, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463335450, 'comment_body': 'The value of `strict` is True ...', 'comment_created': datetime.datetime(2020, 7, 31, 0, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463335485, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 7, 31, 0, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463335554, 'comment_body': 'The value of `strict` is True and ...', 'comment_created': datetime.datetime(2020, 7, 31, 0, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463335645, 'comment_body': 'The value of feconf.EMAIL_SERVICE_PROVIDER ...', 'comment_created': datetime.datetime(2020, 7, 31, 0, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463335802, 'comment_body': 'The value of `strict` is True, and ...', 'comment_created': datetime.datetime(2020, 7, 31, 0, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463336025, 'comment_body': 'The value of `strict` is True and ...', 'comment_created': datetime.datetime(2020, 7, 31, 0, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 463541750, 'comment_body': 'Changed to period.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463542311, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463542463, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463542697, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463542809, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463544458, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463544568, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463544938, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463545132, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463545374, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 10, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463546161, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 11, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463611640, 'comment_body': 'Remove additional `Keyword arguments.`', 'comment_created': datetime.datetime(2020, 7, 31, 13, 30, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463612093, 'comment_body': 'This does not make sense - we are defining `x` as `the arguments in x`. Maybe just change to `The arguments`', 'comment_created': datetime.datetime(2020, 7, 31, 13, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463613455, 'comment_body': 'a ActivityReference -> an ActivityReference\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 13, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463613836, 'comment_body': 'Should this be `tuple(list(str), list(str))`?', 'comment_created': datetime.datetime(2020, 7, 31, 13, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463616154, 'comment_body': 'Can we specify what does not match the version?', 'comment_created': datetime.datetime(2020, 7, 31, 13, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463617496, 'comment_body': '`list(tuple(str, str, list, str, list)` -> `list(tuple(str, str, list, str, list))`', 'comment_created': datetime.datetime(2020, 7, 31, 13, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463620405, 'comment_body': ""Not clear what is being returned. Isn't the function returning a list of str and change the description to `a list of output messages generated by the job`."", 'comment_created': datetime.datetime(2020, 7, 31, 13, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463621899, 'comment_body': 'they -> the', 'comment_created': datetime.datetime(2020, 7, 31, 13, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463623629, 'comment_body': 'Should this be indented? (Not sure, ignore if not)', 'comment_created': datetime.datetime(2020, 7, 31, 13, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463623995, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 7, 31, 13, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463624333, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 7, 31, 13, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463625710, 'comment_body': '`tuple(Topic, dict, list(int), list(int), list(SubtopicPageChange))`', 'comment_created': datetime.datetime(2020, 7, 31, 13, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463626681, 'comment_body': 'list(*)', 'comment_created': datetime.datetime(2020, 7, 31, 13, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463626897, 'comment_body': 'Is args a valid type?', 'comment_created': datetime.datetime(2020, 7, 31, 13, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463629144, 'comment_body': 'a list -> A list', 'comment_created': datetime.datetime(2020, 7, 31, 14, 1, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463629556, 'comment_body': 'You removed the first part of docstring: a list of values and corresponding error messages', 'comment_created': datetime.datetime(2020, 7, 31, 14, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463631438, 'comment_body': ""The comment says `Variable length argument list` and type says `str`. Also, we have different type for `*args` everywhere - shouldn't there be a single type everywhere and shouldn't we have a check for that?"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463632081, 'comment_body': 'Why are the comments spaced?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463632974, 'comment_body': 'A dict which has key as filepath and value as content of js and ts files after validating and parsing the files.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463633060, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463633406, 'comment_body': ""Isn't this returning a function?"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463634014, 'comment_body': 'It should be `exception_name.`, right?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463634450, 'comment_body': 'Exc ->Exception', 'comment_created': datetime.datetime(2020, 7, 31, 14, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463634718, 'comment_body': 'Any specific reason for this formatting (sorry, a bit new to this)?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463634925, 'comment_body': 'Can we add a comment that we do we required protected access?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463635035, 'comment_body': 'Here and everywhere below.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463635439, 'comment_body': 'Change to descriptive names - which reflect what is the purpose of the message.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463635617, 'comment_body': 'Here and everywhere below.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463636104, 'comment_body': 'containing -> consisting', 'comment_created': datetime.datetime(2020, 7, 31, 14, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463636478, 'comment_body': 'Why hashed_value?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463694380, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 15, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463694924, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 15, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463695127, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 15, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463696170, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463696771, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463696909, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463697964, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463700489, 'comment_body': 'Changed to version of exploration does not ...', 'comment_created': datetime.datetime(2020, 7, 31, 16, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463701520, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463702528, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463704273, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463705010, 'comment_body': 'Return sections are not indented, but I thought they should be because then it will be easy to differentiate between two different returns, same for the yield statements docstrings. What do you think?', 'comment_created': datetime.datetime(2020, 7, 31, 16, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463706263, 'comment_body': 'Return sections are not indented, but I thought they should be because then it will be easy to differentiate between two different returns, same for the yield statements docstrings. What do you think?', 'comment_created': datetime.datetime(2020, 7, 31, 16, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463706506, 'comment_body': 'Ditto as above, I think there should be.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463707136, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463707817, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463707878, 'comment_body': 'Changed to `*`', 'comment_created': datetime.datetime(2020, 7, 31, 16, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463709212, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463709671, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463711781, 'comment_body': 'We should go with the `list(*)`. Added the lint check in the list of #8423', 'comment_created': datetime.datetime(2020, 7, 31, 16, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463712613, 'comment_body': 'These regexes are taken from the pylint code and then modified according to our needs. This is the pattern they used there.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463713345, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463714420, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463715090, 'comment_body': 'Changed to `function(*)`', 'comment_created': datetime.datetime(2020, 7, 31, 16, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463715963, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463716381, 'comment_body': 'Removed raises section, as this left there by mistake.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463718834, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463722306, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 31, 16, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463724822, 'comment_body': 'Doen.', 'comment_created': datetime.datetime(2020, 7, 31, 17, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463725309, 'comment_body': 'Changed to `*`', 'comment_created': datetime.datetime(2020, 7, 31, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463730932, 'comment_body': ""This is taken from the pylint codebase, the formatting was same there, so I didn't changed the formatting, just modified it according to our use."", 'comment_created': datetime.datetime(2020, 7, 31, 17, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463922238, 'comment_body': 'I am fine with whatever you decide - it should just be consistent.', 'comment_created': datetime.datetime(2020, 8, 1, 4, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463922282, 'comment_body': 'I am fine with whatever you decide - it should just be consistent.\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 1, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463922377, 'comment_body': 'Great, Thanks - are you planning to do it later, not sure if it was in your task list.\r\n\\cc @bansalnitish ', 'comment_created': datetime.datetime(2020, 8, 1, 4, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463936989, 'comment_body': ""I've discussed this with @bansalnitish. It is supposed to be like this(without indentation). So, leaving this as it is."", 'comment_created': datetime.datetime(2020, 8, 1, 8, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463937004, 'comment_body': 'Ditto as above.', 'comment_created': datetime.datetime(2020, 8, 1, 8, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463937027, 'comment_body': ""I've included it in this check."", 'comment_created': datetime.datetime(2020, 8, 1, 8, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 463950273, 'comment_body': 'Cool, sg.', 'comment_created': datetime.datetime(2020, 8, 1, 10, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 463950280, 'comment_body': 'Ok, great!', 'comment_created': datetime.datetime(2020, 8, 1, 10, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}]","[{'commit_sha': 'e400121560c8a3c347d57b79f59e1151e9fd75f1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5c2a47d3590d2addbf4483226da33c729f1283d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da06c7042661a17be46279eba50f2e44e25b1db0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe2fc3c1c736e2a59cea4932c47c827b7726e859', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '491e294f62b9e4f8733dd2f479b03880c87d9c1f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6dccb7cbb3bf59b172b6fe72cab630d96df2e4e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bd54d99c1d5fd1561955fe9d1486985d1ab29fb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfe2b54975771323fe412a64c12acf9de53164ee', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25ba7b09b9f8c7b939ff09638055cfed0ea1c544', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346848896f623a65d5a748541a2523f4a78c23e0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c10e3bb372d6042af00a99269ca5f9303d89da5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c85b16745c1bad9d7407ab5c0d3ce4ab2c5c47bd', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98904f6218a09a80f119d77c655e61eeadb72fea', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11353c231adb02104d8faa1b035baf17e4bdfe6d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c6b3f92824fbdfd94ab2c1c99f299dd13bc53de', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb36ae299eaabefc8b63ef49748d60398384e8d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16674de998b6114957a32b539c7d6f1f21aa95e0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e02636e46d7b684aa8ad484aa3778fcbfebbb4cd', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
457606211,Converted docstring checks to IAstroidChecker and merged all docstring checks.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: Convert docstring checks to use IAstroidChecker and merge all docstring checks.

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10084,https://api.github.com/repos/oppia/oppia/pulls/10084,https://github.com/oppia/oppia/pull/10084,closed,1933,2274,5,11,9,30,0,1,[],2020-07-28 07:18:40+00:00,2020-07-29 09:22:07+00:00,93807.0,"1 day, 2:03:27","[{'comment_id': 461489680, 'comment_body': 'Move this check as well to the DocstringParamterChecker class.', 'comment_created': datetime.datetime(2020, 7, 28, 10, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461493040, 'comment_body': 'This is also related to Docstring. This should also be moved to DocstringParameterChecker, right?', 'comment_created': datetime.datetime(2020, 7, 28, 10, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461511071, 'comment_body': 'Why is this converted to `elif`? It should be `if`, right?', 'comment_created': datetime.datetime(2020, 7, 28, 11, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461514100, 'comment_body': 'Please remove the last line of the comment. There is no other class now. (The rest of the docstring section checks are in DocstringChecker.)', 'comment_created': datetime.datetime(2020, 7, 28, 11, 37, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461515309, 'comment_body': ""Shouldn't these be elif? (This and below, the previous code had elif)"", 'comment_created': datetime.datetime(2020, 7, 28, 11, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461518800, 'comment_body': 'What is a valid style? It looks too general. Can we please make the check name more precise and also change the docstring to say something like `it fetches a node.... which is passed to check_docstring_structure which checks  whether the docstring has a space at the beginning and a period at the end`. ', 'comment_created': datetime.datetime(2020, 7, 28, 11, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461518972, 'comment_body': 'at the beginning', 'comment_created': datetime.datetime(2020, 7, 28, 11, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461663087, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 15, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461663147, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 15, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461664913, 'comment_body': 'Changed to if', 'comment_created': datetime.datetime(2020, 7, 28, 15, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461665110, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 28, 15, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461665195, 'comment_body': 'Changed to elif', 'comment_created': datetime.datetime(2020, 7, 28, 15, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461665262, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 15, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461665329, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 15, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461743184, 'comment_body': 'Why we have not written in a way similar to other checks and called it from visit_functiondef?', 'comment_created': datetime.datetime(2020, 7, 28, 17, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461743897, 'comment_body': 'check_new_line_above_args', 'comment_created': datetime.datetime(2020, 7, 28, 17, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461751315, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 17, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461751576, 'comment_body': 'Because this check is only for class docstring', 'comment_created': datetime.datetime(2020, 7, 28, 17, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461754098, 'comment_body': 'Could you please add what check it is performing in the docstring as well?', 'comment_created': datetime.datetime(2020, 7, 28, 17, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 461763277, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 28, 17, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462136727, 'comment_body': 'Duplicate ""and"". OK to fix in next PR, but please keep track. /cc @Hudda @bansalnitish ', 'comment_created': datetime.datetime(2020, 7, 29, 8, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462137785, 'comment_body': 'Aren\'t we supposed to have a lint check for ""methods within a class should be separated by 1 newline, not 2""?\r\n\r\n(Again, OK to fix in follow-up PR.)', 'comment_created': datetime.datetime(2020, 7, 29, 8, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462138838, 'comment_body': 'Could you explain why this changed?', 'comment_created': datetime.datetime(2020, 7, 29, 8, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462150677, 'comment_body': ""I changed this because we are using `node` instead of the `line number` in the messages.\r\nBefore:\r\n`self.add_message('newline-below-class-docstring', line_num=line_number)`\r\n\r\nNow:\r\n`self.add_message('newline-below-class-docstring', node=node)`\r\n\r\nThis will give the line number from where the node starts."", 'comment_created': datetime.datetime(2020, 7, 29, 9, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462151343, 'comment_body': 'We already have this check listed in #8423 ', 'comment_created': datetime.datetime(2020, 7, 29, 9, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462151572, 'comment_body': 'Okay, I will fix this in my next PR.', 'comment_created': datetime.datetime(2020, 7, 29, 9, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 462153837, 'comment_body': 'OK. You should still fix this instance of it (in your next PR).', 'comment_created': datetime.datetime(2020, 7, 29, 9, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462154299, 'comment_body': 'I see, thanks for the explanation.', 'comment_created': datetime.datetime(2020, 7, 29, 9, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462154579, 'comment_body': 'Please file an issue for this and the next comment, and assign it to yourself (standard procedure for any deferred changes). Once you post the issue link here, I will merge this PR.', 'comment_created': datetime.datetime(2020, 7, 29, 9, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 462159372, 'comment_body': ""I've created the issue https://github.com/oppia/oppia/issues/10102"", 'comment_created': datetime.datetime(2020, 7, 29, 9, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': 'e57d0b80067c17bb88934f32cc23a7341c76c0d5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ecc7841360f1014118e92eb42c11db0cb8fde65', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '239b1cf5bcf48f1dc08ff6af81747d017e4d847c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621a9a69b29acb68f8af349a658c2bc2fdc9820e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c300fef176e04bf51041fb07960be18dc7bb57b7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c09e06242d660ac4767c3817592da94fcf9f906', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '220b81eba1d054894f0107f0af26b96c3efad66b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c31353f49f6bcc46172be6d42c5b755b30d16c81', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeecdacfb3df4e6e9b6ccd06749eee91a9f52e63', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9d1657f2e58cc985db816b4830309eae0678079', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ad61bd3f0c5d5672b119cd285c38a7bfb5768b3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
454665087,Used IAstroidChecker for DivisionOperatorChecker and SingleSpaceAfterYieldChecker,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

__1. This PR fixes or fixes part of #[fill_in_number_here].__
2. This PR does the following: Used IAstroidChecker for DivisionOperatorChecker and SingleSpaceAfterYieldChecker instead of IRawChecker.
## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9991,https://api.github.com/repos/oppia/oppia/pulls/9991,https://github.com/oppia/oppia/pull/9991,closed,61,224,2,8,9,16,0,2,[],2020-07-21 18:10:38+00:00,2020-07-26 04:12:36+00:00,381718.0,"4 days, 10:01:58","[{'comment_id': 459208506, 'comment_body': ""Will it catch `print('%d', 2/5)`?"", 'comment_created': datetime.datetime(2020, 7, 23, 4, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459208853, 'comment_body': 'There are some `.left` `.right` properties in NoneNG object can we use it here (not sure!) ', 'comment_created': datetime.datetime(2020, 7, 23, 4, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459208999, 'comment_body': 'I think you can find a better node to catch this, maybe BinOP?', 'comment_created': datetime.datetime(2020, 7, 23, 4, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459209090, 'comment_body': 'Is this an expected change?', 'comment_created': datetime.datetime(2020, 7, 23, 4, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459209106, 'comment_body': 'Is this an expected change?', 'comment_created': datetime.datetime(2020, 7, 23, 4, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459209121, 'comment_body': 'Is this an expected change?', 'comment_created': datetime.datetime(2020, 7, 23, 4, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459209458, 'comment_body': 'Can you please explain the regex used here?', 'comment_created': datetime.datetime(2020, 7, 23, 4, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460109716, 'comment_body': 'Changed to BinOP', 'comment_created': datetime.datetime(2020, 7, 24, 15, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460110201, 'comment_body': ""Thanks for the suggestion, but we don't need these here."", 'comment_created': datetime.datetime(2020, 7, 24, 15, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460111277, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 24, 15, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460111334, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 24, 15, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460111402, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 24, 15, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460112216, 'comment_body': 'Here we are checking if the yield is at the beginning and then a space after that and then either no word after that or some nonspace variables.', 'comment_created': datetime.datetime(2020, 7, 24, 15, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460116354, 'comment_body': '@Hudda Why are we still relying on the string, I think we can do it without parsing the string, can you please check? (Read the doc, maybe that will help? :))\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 24, 15, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460122482, 'comment_body': 'Thanks. Done.', 'comment_created': datetime.datetime(2020, 7, 24, 15, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '883714233df34bc1c55fff48611b0d3eaf4cadb5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '247ef38b45f03cc0959e9396088f081b116e1bf8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e5d41cac79c0af6bcf1da2c4205d11e43116fa', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdf403a8fb1c9d989f731d0b84b5740e8ffe8287', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '365bda9ab3b7f216d1eb95ecb9e7af9b9327389a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4de60d49424d334d16509c5f22512977baa0919', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dd8d0aa769c64966f78578366fe60ef099be162', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b726def8a70ca4e994a704de456199689c066cf4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
456754110,Fix part of #8423: Added a lint check to ensure a newline after bracket,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Added lint check to ensure break after newline in case of hanging indentation

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10048,https://api.github.com/repos/oppia/oppia/pulls/10048,https://github.com/oppia/oppia/pull/10048,closed,1308,916,119,12,11,52,0,0,[],2020-07-26 14:03:47+00:00,2020-07-27 23:49:52+00:00,121565.0,"1 day, 9:46:05","[{'comment_id': 460558332, 'comment_body': 'Is this OK to break after the dot? (Here and everywhere)', 'comment_created': datetime.datetime(2020, 7, 26, 18, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460558578, 'comment_body': 'Is this expected -- to add an angular bracket at the last or? ', 'comment_created': datetime.datetime(2020, 7, 26, 18, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460558650, 'comment_body': 'Can we move this bracket to previous line? (May be try out putting 745 and 746 to line 744?', 'comment_created': datetime.datetime(2020, 7, 26, 18, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460558676, 'comment_body': 'Ditto here', 'comment_created': datetime.datetime(2020, 7, 26, 18, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460559525, 'comment_body': 'Can you please modify this comment a bit? It is not clear.', 'comment_created': datetime.datetime(2020, 7, 26, 18, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460560915, 'comment_body': ""If we don't use these then we have to use pylint pragmas, so instead of using pylint pragma, I think it is better to do this."", 'comment_created': datetime.datetime(2020, 7, 26, 18, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460561073, 'comment_body': 'yes, we can use the bracket here.', 'comment_created': datetime.datetime(2020, 7, 26, 18, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460561343, 'comment_body': 'Done moved to line 744 and 745', 'comment_created': datetime.datetime(2020, 7, 26, 18, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460561374, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 26, 18, 58, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460561857, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 26, 19, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460569246, 'comment_body': 'Why we are modifying the first line here? It is OK to break all the last angular bracket.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460569830, 'comment_body': 'Can we please move line 776 here and move the angular bracket at the start of line 777 to on line 745? \r\n\r\n(Ditto here and else where) \r\n\r\nIn general, if a comment is given for a particular line, please replicate it over all the changes. ', 'comment_created': datetime.datetime(2020, 7, 26, 20, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460569855, 'comment_body': 'Ditto here (this is another example -- there a quite a few such cases)', 'comment_created': datetime.datetime(2020, 7, 26, 20, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460569981, 'comment_body': 'a -> an', 'comment_created': datetime.datetime(2020, 7, 26, 20, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460570030, 'comment_body': 'next character -> the next character', 'comment_created': datetime.datetime(2020, 7, 26, 20, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460570355, 'comment_body': ""I don't think we need an explanation of why we are not flipping the in_string here. Also, if you think it is good to add it here then please change this line to: 'The boolean in_string is not set to false because we are still inside a string'. Example...\r\n\r\nIt is really upto you to keep this comment :). "", 'comment_created': datetime.datetime(2020, 7, 26, 20, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460570738, 'comment_body': 'Yes it is fine to break after the dot.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460571682, 'comment_body': 'Just a note -- the original reason for having the ""break after ("" is so that we don\'t have all the subsequent lines being forced to live in a small space on the right. That makes it hard to read.\r\n\r\nHowever, that reason doesn\'t really apply for cases like this, and so, if you like, it is fine to exclude `if (`, `if not (`,  `while (`, `elif (` and `elif not (` from the check. It is up to you whether or not to do this; pick whatever option you think results in code that is more readable. I personally think excluding these cases from the check (and reverting the relevant file changes) would be better.\r\n\r\nAlso, in general, if you see that a check results in more changes than you expect, feel free to ask about it (write an email/doc showing examples and confirm that your understanding is right). Typically a check should not require huge changes to the codebase (assuming most usages are compliant), so it\'s worth double-checking.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460572025, 'comment_body': 'Here is another way you can write this:\r\n\r\n```\r\nexpected_invalid_tags = [(\r\n    \'<oppia-noninteractive-math raw_latex-with-value=""+,-,-,+""></op\'\r\n    \'pia-noninteractive-math>\'\r\n), (\r\n    ...\r\n), (\r\n    ...\r\n)]\r\n```\r\n\r\nDitto below. Again, the aim behind the change is to reduce unnecessary right-indentation.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460572054, 'comment_body': 'You can just remove the unnecessary extra parens ... right?', 'comment_created': datetime.datetime(2020, 7, 26, 20, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460572506, 'comment_body': 'Probably better:\r\n\r\n```\r\n              raise utils.ValidationError(\r\n                  \'Invalid audio filename: it should have one of \'\r\n                  \'the following extensions: %s. Received: %s\' % (\r\n                      list(feconf.ACCEPTED_AUDIO_EXTENSIONS.keys()),\r\n                      self.filename))\r\n```\r\n\r\nBasically, try to have full ""clauses"" on the same line if possible.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460572642, 'comment_body': ""Maybe put `'',` on its own line?"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460572657, 'comment_body': ""Don't need outer paren"", 'comment_created': datetime.datetime(2020, 7, 26, 20, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460572854, 'comment_body': 'I wonder if you can move this to the previous line and remove the outer parens. That should enable it to be more readable and also enable the ""BEFORE MIGRATION"" clause to fit on one line.', 'comment_created': datetime.datetime(2020, 7, 26, 20, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460572916, 'comment_body': 'Probably can move to previous line and drop outer paren?\r\n\r\n(As an aside, there should have been a space after ""if"" and before that paren. Was there a lint check for it?', 'comment_created': datetime.datetime(2020, 7, 26, 21, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460573117, 'comment_body': ""```\r\nyield ((\r\n    'found %d ... '\r\n    'having no SVG'\r\n) % len(final_values), final_values)\r\n```\r\n    "", 'comment_created': datetime.datetime(2020, 7, 26, 21, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460573315, 'comment_body': ""For cases like this (where it's a bit awkward because the clause is too long to fit in one line), just declare a new variable above it:\r\n\r\n```\r\nowner_subscriptions_model = user_models.UserSubscriptionsModel.get(self.owner_id)\r\nself.assertEqual(len(owner_subscriptions_model.activity_ids), 0)\r\n```\r\n\r\nDitto elsewhere."", 'comment_created': datetime.datetime(2020, 7, 26, 21, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460573393, 'comment_body': ""You don't need the outer parens."", 'comment_created': datetime.datetime(2020, 7, 26, 21, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460573758, 'comment_body': 'Can probably move to previous line and drop outer parens', 'comment_created': datetime.datetime(2020, 7, 26, 21, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460644695, 'comment_body': 'I strongly encourage for the second part -- write an email/doc showing examples and confirm that your understanding is right. This will save ample amount of time IMO. ', 'comment_created': datetime.datetime(2020, 7, 27, 4, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460656229, 'comment_body': ""I did this because in the past I've asked many times to break after the `if (` by @DubeySandeep so I was thinking that we also want this check for `if` and `elif` as well, but I think you are right I will exclude these `if`, `else` and `while` from this check."", 'comment_created': datetime.datetime(2020, 7, 27, 5, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460662377, 'comment_body': 'Changed as before.', 'comment_created': datetime.datetime(2020, 7, 27, 5, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460673695, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 27, 6, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460680740, 'comment_body': 'This is not a good idea, if we do this then we have to match the identation of `[`\r\n```\r\nexpected_invalid_tags = [(\r\n                         \'<oppia-noninteractive-math raw_latex-with-value=""+,-,-,+""></op\'\r\n                          \'pia-noninteractive-math>\'\r\n                          ), (\r\n                                ...\r\n                                ), (\r\n                                       ...\r\n                                      )]\r\n\r\n```\r\n\r\nAlso with every `(` we have to increase one level of indentation', 'comment_created': datetime.datetime(2020, 7, 27, 6, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460682399, 'comment_body': 'REmoved.', 'comment_created': datetime.datetime(2020, 7, 27, 6, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460687740, 'comment_body': 'Fixed, here and everywhere else.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460687792, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460701456, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460702722, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460703991, 'comment_body': 'REmoved.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460707761, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 7, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460710169, 'comment_body': ""Done.\r\n\r\n(No, we don't have a lint check to check for space after if, added in #8423 )"", 'comment_created': datetime.datetime(2020, 7, 27, 7, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460713491, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 8, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460716910, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 8, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460719477, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 27, 8, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460726751, 'comment_body': 'Removed the comment.', 'comment_created': datetime.datetime(2020, 7, 27, 8, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460726899, 'comment_body': 'Removed the comment.', 'comment_created': datetime.datetime(2020, 7, 27, 8, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460727024, 'comment_body': 'Removed the comemtn.', 'comment_created': datetime.datetime(2020, 7, 27, 8, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460802669, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 27, 10, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460803944, 'comment_body': 'Reverted the changes as well.', 'comment_created': datetime.datetime(2020, 7, 27, 10, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460811503, 'comment_body': ""No you don't need to increase one level of indentation. Why would you?\r\n\r\nThe indentation would be exactly as I wrote in my previous comment.\r\n\r\nPlease recheck."", 'comment_created': datetime.datetime(2020, 7, 27, 11, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460822891, 'comment_body': 'Fixed, I must have made some mistake the first time.', 'comment_created': datetime.datetime(2020, 7, 27, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '11074b6a99802fef92eae7c263a78962582e28e6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67691a6b0dbe37e02b99e5fff7463b01e7aed6b9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e182e54b039b5bbf6d43b5009af2771044103506', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af4624e44e4d0ea24712e811bc012a3e256626fc', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5412a95558f10ef3f798eda0dff434459b313de', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2067cd80d0bd24ab91c2f0c15d3876e71c0f1e4d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68cdd374caa04b4574bca7faf5160f7a2d36f4ee', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1dc181d55a5faba88b1fa43e174d54b384b1773', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff3dfd39929632008c6b3b28bd4afa1e1fc7be83', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46a0d9cc2d43858e584c6325bfb38668ca7e2b1c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c07ea627ca1f4418eed5135f5eb7d930d1a7f08', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca911528b6d36ee4c3c0cce4c86dd31fc9df736f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
453349932,Fix part of #8423: Add lint check to multiline expressions ensuring line break after '(',"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Added a pylint check using ITokenChecker to check if there is break after bracket('(') in multiline expressions.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",False,9968,https://api.github.com/repos/oppia/oppia/pulls/9968,https://github.com/oppia/oppia/pull/9968,closed,4952,3580,239,12,11,10,1,2,"[{'name': ""PR: don't merge - HAS MERGE CONFLICTS""}]",2020-07-20 11:28:01+00:00,2020-07-25 15:34:47+00:00,446806.0,"5 days, 4:06:46","[{'comment_id': 457572306, 'comment_body': ""It is great to see this being changed to TokenChecker.\r\n\r\nHowever, I'm curious -- it looks the check was already there but it wasn't catching the line breaks needed. Do you know why?"", 'comment_created': datetime.datetime(2020, 7, 20, 17, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 457572814, 'comment_body': 'Could you please add some relevant comments in the below section (not everywhere)?', 'comment_created': datetime.datetime(2020, 7, 20, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 458066023, 'comment_body': 'Because before it is checking only those parentheses which has a comma in them\r\nExample: func(1, 2,3)\r\nand ignoring this type of functions\r\nfunc(abc(def))', 'comment_created': datetime.datetime(2020, 7, 21, 12, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458066077, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 21, 12, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460104911, 'comment_body': ""Is there any issue with the old code? are was expecting that to pass the test? (I think yes!, but I'm not sure!)\r\n\r\n@bansalnitish & @Hudda Can you please check with the author of the issue or with other developers about the expected behavior for this check?\r\n"", 'comment_created': datetime.datetime(2020, 7, 24, 14, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460363832, 'comment_body': 'Confirming that the changed version is a bit nicer, but the old behaviour should pass the test.', 'comment_created': datetime.datetime(2020, 7, 25, 4, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460363849, 'comment_body': '@Hudda please could you confirm whether the previous formatting would have passed the lint check you implemented?', 'comment_created': datetime.datetime(2020, 7, 25, 4, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460363907, 'comment_body': ""Actually this is interesting -- I have a feeling something is wrong here. All these cases are fine and don't need to be corrected."", 'comment_created': datetime.datetime(2020, 7, 25, 4, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460369074, 'comment_body': 'No, the tests implemented by Hudda would not allow the old behaviour to pass. ', 'comment_created': datetime.datetime(2020, 7, 25, 5, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460379130, 'comment_body': 'Then I think this PR is incorrect and the best option might just be to redo it (as discussed in the meeting).', 'comment_created': datetime.datetime(2020, 7, 25, 7, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': 'e0723ac57b2066a91b632bb2cdb3d7917d16c418', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e60d06a5a0d720de44f6840436e2b932b7306979', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c6fd12bb2a27dc6ef5a76ff3f8bfc72f4d4e3bf', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d3dd25572c1c833c578790c151524a3af5554e1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc3ff119ebcbdada9dfc7d72d055705229bc2e50', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d3755c59cdd1f6ab0e4c21a87e9a14a6e7f65a2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ce411b6eb4560c8aeafa7766cf22458d1d9d6b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cba34fcfa1711ca657ef3f9c6c33f62332a20109', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9924ddcc0239d842b72d5b0bc1a8574a8821329', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f456ef8dbf73264894580021594c5545146eb4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06480656c244802fbbc7608528939a88aeb17570', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97eb6ef4947c128e68cb52ba5766d036f156a54e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
447061632,Fix part of #8423: Added lint check to forbid usage of assertRaises and to use assertRaisesRegexp instead,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: ADded lint  check to forbid the usage of assertRaises and enforce the use of assertRaisesRegexp

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9860,https://api.github.com/repos/oppia/oppia/pulls/9860,https://github.com/oppia/oppia/pull/9860,closed,1355,605,70,16,12,110,0,1,[],2020-07-09 19:53:01+00:00,2020-07-25 10:20:57+00:00,1348076.0,"15 days, 14:27:56","[{'comment_id': 452568675, 'comment_body': '`Please do not use assertRaises method. `', 'comment_created': datetime.datetime(2020, 7, 10, 1, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452569880, 'comment_body': ""> This method has been deprecated. \r\n\r\nI don't think this is the reason to avoid asserRaises, as per my understanding we should use assertRaisesRegexp because it also tests that regexp matches on the string representation of the raised exception and with this we make sure that a specific exception is raised. "", 'comment_created': datetime.datetime(2020, 7, 10, 1, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452569935, 'comment_body': 'Remove self*', 'comment_created': datetime.datetime(2020, 7, 10, 1, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452570191, 'comment_body': 'is this (`1`) the whole exception message?', 'comment_created': datetime.datetime(2020, 7, 10, 1, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452701356, 'comment_body': 'This looks an unexpected error message and some kind of failure, can you please check!', 'comment_created': datetime.datetime(2020, 7, 10, 8, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452705630, 'comment_body': 'Why `r` first?', 'comment_created': datetime.datetime(2020, 7, 10, 8, 38, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452706759, 'comment_body': ""This doesn't look like an expected error. @aks681 can you please check whether this is an expected error?"", 'comment_created': datetime.datetime(2020, 7, 10, 8, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452707170, 'comment_body': 'Ditto as above *\r\n\r\n/cc @aks681 ', 'comment_created': datetime.datetime(2020, 7, 10, 8, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452707528, 'comment_body': 'Why is this an empty string?', 'comment_created': datetime.datetime(2020, 7, 10, 8, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452708396, 'comment_body': 'Why is this empty?', 'comment_created': datetime.datetime(2020, 7, 10, 8, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452709143, 'comment_body': ""Ditto elsewhere, you can write comments for these cases so that codeowners doesn't have to ask and then you wait for their another pass! (This will help to get your PR merged quickly!)"", 'comment_created': datetime.datetime(2020, 7, 10, 8, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452710038, 'comment_body': 'Can we use `subtopic_page_id` instead of `\\w+-\\w+`?', 'comment_created': datetime.datetime(2020, 7, 10, 8, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452710130, 'comment_body': 'Ditto*', 'comment_created': datetime.datetime(2020, 7, 10, 8, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 452710689, 'comment_body': 'Why are these empty please add reasons here and elsewhere!', 'comment_created': datetime.datetime(2020, 7, 10, 8, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 453273448, 'comment_body': 'Yes, this is the whole message, I ran backend tests with random string in the assertRaisesRegexp these are the messages I got.', 'comment_created': datetime.datetime(2020, 7, 12, 6, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273471, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 7, 12, 6, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273554, 'comment_body': 'Because here we used a regex expression and we need r before a regex expression', 'comment_created': datetime.datetime(2020, 7, 12, 6, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273601, 'comment_body': 'Ditto this is the message I got when ran backend test with a random string.', 'comment_created': datetime.datetime(2020, 7, 12, 6, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273609, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 7, 12, 6, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273625, 'comment_body': 'Ditto as above', 'comment_created': datetime.datetime(2020, 7, 12, 6, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273637, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 7, 12, 6, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273641, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 7, 12, 6, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273666, 'comment_body': 'because string here is random so we need to use a regex', 'comment_created': datetime.datetime(2020, 7, 12, 6, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273685, 'comment_body': 'Random string is there', 'comment_created': datetime.datetime(2020, 7, 12, 6, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453273766, 'comment_body': 'Added reasons above.', 'comment_created': datetime.datetime(2020, 7, 12, 6, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453274945, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 6, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453274977, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 6, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453366778, 'comment_body': 'I\'m sorry but this will not do. There is no point in introducing this lint check if devs are going to bypass it anyway with an empty string.\r\n\r\nPlease make sure all strings are nonempty and have a reasonable chunk of the error message. Please also add a self.assertRaisesRegexp() method in the base test class which checks that the second arg is nonempty, and that warns the developers and raises a breaking exception if it is, and then calls its superclass method.\r\n\r\nEDIT: it looks like @DubeySandeep [commented](https://github.com/oppia/oppia/pull/9860#discussion_r452707170) on this already, but the only response I can see (to his first comment about that) was ""Ditto"", so I still don\'t understand the root issue. If the problem is that there\'s no actual exception message defined, then please update the code to provide a proper exception message that makes sense in context.', 'comment_created': datetime.datetime(2020, 7, 12, 21, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 453367300, 'comment_body': 'This docstring needs to be clearer.\r\n\r\nPlease do not use the assertRaises method. Instead, use assertRaisesRegexp and provide a sufficiently strong regexp string to validate that the correct error is being raised.', 'comment_created': datetime.datetime(2020, 7, 12, 21, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 454427260, 'comment_body': ""If you found error while adding these checks then you'll have to at least look into it, try to solve it if you aren't able to do it ask anyone for help (use git blame to check the author and ask them politely for help). These workarounds won't help, if you don't know what's to do for these kinda case then raise a comment before assigning reviews so that they can reply/help/suggest to your comment while reviewing it instead of they spending time to understand it, raising questions and wait for follow up! (This will help your PR to get merged quickly!)"", 'comment_created': datetime.datetime(2020, 7, 14, 15, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454427805, 'comment_body': ""Can't we use the exact id here? instead of regex?"", 'comment_created': datetime.datetime(2020, 7, 14, 15, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454428194, 'comment_body': 'Follow this comment: https://github.com/oppia/oppia/pull/9860#discussion_r454427260', 'comment_created': datetime.datetime(2020, 7, 14, 15, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454428503, 'comment_body': 'Ditto as what? Can you explain it?', 'comment_created': datetime.datetime(2020, 7, 14, 15, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454429661, 'comment_body': 'The random string is the id, right? so can we use the id?', 'comment_created': datetime.datetime(2020, 7, 14, 15, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454430401, 'comment_body': ""I don't see any reason above which explains the reason behind the empty string. Can you please add a link?"", 'comment_created': datetime.datetime(2020, 7, 14, 15, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 454799743, 'comment_body': 'Fixed the message here.', 'comment_created': datetime.datetime(2020, 7, 15, 5, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454800166, 'comment_body': ""Done, Added the full message here and everywhere else.\r\n\r\n> Please also add a self.assertRaisesRegexp() method in the base test class which checks that the second arg is nonempty, and that warns the developers and raises a breaking exception if it is, and then calls its superclass method.\r\n\r\nThis part causing a problem, I've created a doc for this part. [link](https://docs.google.com/document/d/1r2qhWDChYcr-blySephHT_eMgKgpQSIbC_zZ11Oc6_Q/edit?usp=sharing)"", 'comment_created': datetime.datetime(2020, 7, 15, 5, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454800691, 'comment_body': 'No, the id was different every time.', 'comment_created': datetime.datetime(2020, 7, 15, 5, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454800905, 'comment_body': 'We have same type of message at line 480, I think this is expected.', 'comment_created': datetime.datetime(2020, 7, 15, 5, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454801475, 'comment_body': 'We have same message on line 917, I think this is expected.', 'comment_created': datetime.datetime(2020, 7, 15, 5, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454801604, 'comment_body': 'Added the message here and everywhere else.', 'comment_created': datetime.datetime(2020, 7, 15, 5, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454801672, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 15, 5, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454801718, 'comment_body': 'Fix.', 'comment_created': datetime.datetime(2020, 7, 15, 5, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454801866, 'comment_body': ""The id was different every time, that's why I used regex here."", 'comment_created': datetime.datetime(2020, 7, 15, 5, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454802391, 'comment_body': 'Added message here.', 'comment_created': datetime.datetime(2020, 7, 15, 5, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 454805794, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 15, 5, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455516623, 'comment_body': 'Why are we not checking if the expected_exception is null?', 'comment_created': datetime.datetime(2020, 7, 16, 5, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455525626, 'comment_body': ""We don't need that one because in that case expected_regexp won't match expected_exception's message and the test will fail automatically."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455754791, 'comment_body': ""@Hudda I don't see this fixed, can you please verify before assigning reviewers!\r\n\r\n/cc @bansalnitish @ankita240796 "", 'comment_created': datetime.datetime(2020, 7, 16, 12, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 455755659, 'comment_body': 'I think you can guess that id!\r\n\r\n/cc @bansalnitish, Can you please help him? ', 'comment_created': datetime.datetime(2020, 7, 16, 12, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 455759042, 'comment_body': 'Look again and please try to see the file carefully before leaving a comment because this increases the time of the review process. (I am saying this because it is not the first time this is happening.) And in the GSoC, we have a very short time available.', 'comment_created': datetime.datetime(2020, 7, 16, 12, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455759198, 'comment_body': ""I don't think we should raise this kinda errors, @aks681 Do you think we should have a type check in the update_question method?"", 'comment_created': datetime.datetime(2020, 7, 16, 12, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 455761219, 'comment_body': ""I don't see this fixed!"", 'comment_created': datetime.datetime(2020, 7, 16, 12, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 455762001, 'comment_body': ""I don't see any changes here! (Can you please add an explanation on why you think ut's fixed?)"", 'comment_created': datetime.datetime(2020, 7, 16, 12, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 455762266, 'comment_body': '> The random string is the id, right? so can we use the id?\r\n\r\nCan you reply to this?', 'comment_created': datetime.datetime(2020, 7, 16, 12, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 455762783, 'comment_body': ""I don't see any changes here!\r\n\r\n/cc @bansalnitish "", 'comment_created': datetime.datetime(2020, 7, 16, 12, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 455927422, 'comment_body': 'Changed the message', 'comment_created': datetime.datetime(2020, 7, 16, 16, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455934008, 'comment_body': ""We can't guess a random string."", 'comment_created': datetime.datetime(2020, 7, 16, 16, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455934317, 'comment_body': 'Look again', 'comment_created': datetime.datetime(2020, 7, 16, 16, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455934407, 'comment_body': 'Look again', 'comment_created': datetime.datetime(2020, 7, 16, 16, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455934755, 'comment_body': 'Already answered, Try to look at the code.', 'comment_created': datetime.datetime(2020, 7, 16, 16, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455934893, 'comment_body': 'Look again.', 'comment_created': datetime.datetime(2020, 7, 16, 16, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456067586, 'comment_body': ""I think this is expected. We have a 'try.. catch' in `apply_change_list`, where if the changelist isn't valid, the exception is caught and printed, so the error case is taken care of in normal usage.\r\n\r\nAlso @Hudda, when a review comment is there asking the reason behind something, try to dig into the origin of the error message and then explain a bit more why you think the error is coming. Just telling, this is what is used elsewhere with no reason for it isn't the right way to go, just a tip!"", 'comment_created': datetime.datetime(2020, 7, 16, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 456143974, 'comment_body': 'is it going to be same as the value stored in `question_id_2`?', 'comment_created': datetime.datetime(2020, 7, 17, 0, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456145312, 'comment_body': 'This looks like an unexpected python error, can you please check whether this is in an expected error?', 'comment_created': datetime.datetime(2020, 7, 17, 0, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456146087, 'comment_body': ""You haven't answered my question! The question still exists! (Note: The id is stored in `subtopic_page_id`.)"", 'comment_created': datetime.datetime(2020, 7, 17, 0, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456146325, 'comment_body': 'Please see[ above comment](https://github.com/oppia/oppia/pull/9860/files#r456146087)', 'comment_created': datetime.datetime(2020, 7, 17, 0, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456147353, 'comment_body': 'Change `bad_usernames` to `bad_usernames_with_expected_error_message` and create a list of tuple (usernmae, error_message), loop through the ist and test specific expected error for each username!', 'comment_created': datetime.datetime(2020, 7, 17, 0, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456147468, 'comment_body': 'Ditto*', 'comment_created': datetime.datetime(2020, 7, 17, 0, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456151425, 'comment_body': 'Please add test for these new methods*', 'comment_created': datetime.datetime(2020, 7, 17, 0, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456152414, 'comment_body': 'Add one space after `:`', 'comment_created': datetime.datetime(2020, 7, 17, 0, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456155919, 'comment_body': ""The docstring says it should be a TypeError, can you please check whether that's true? Also, can you make the error message for each invalid item to be deterministic? i.e, test each invalid item with one expected error!"", 'comment_created': datetime.datetime(2020, 7, 17, 0, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456156104, 'comment_body': 'Ditto as above (follow this in other places as well)', 'comment_created': datetime.datetime(2020, 7, 17, 0, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456156829, 'comment_body': 'This is not a test for filename, right? Change the error message to explain the assertion error for type-check!', 'comment_created': datetime.datetime(2020, 7, 17, 0, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456157182, 'comment_body': 'Can we also add the error messages raised through the line `import pip`?', 'comment_created': datetime.datetime(2020, 7, 17, 0, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456157759, 'comment_body': 'Do we still need this?', 'comment_created': datetime.datetime(2020, 7, 17, 0, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456157963, 'comment_body': 'Should we raise ImportError?', 'comment_created': datetime.datetime(2020, 7, 17, 0, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456160800, 'comment_body': 'Invalid value for GCS_RESOURCE_BUCKET_NAME in %s common.CONSTANTS_FILE_PATH\r\n\r\n(Change other assertion error messages similarly)', 'comment_created': datetime.datetime(2020, 7, 17, 1, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456161271, 'comment_body': ""Do we still need this file, considering we aren't having any lint test for this, right?"", 'comment_created': datetime.datetime(2020, 7, 17, 1, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456161676, 'comment_body': ""Don't add pragma, can we do this without adding pragma? "", 'comment_created': datetime.datetime(2020, 7, 17, 1, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456162052, 'comment_body': 'Make it specific kinda: exception raised from parse_script(\r\n\r\n[Ditto in other similar places]', 'comment_created': datetime.datetime(2020, 7, 17, 1, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456162264, 'comment_body': 'Do we still need this line? (Ditto in other similar places in this file!)', 'comment_created': datetime.datetime(2020, 7, 17, 1, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456162432, 'comment_body': 'Do we need this?', 'comment_created': datetime.datetime(2020, 7, 17, 1, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456218046, 'comment_body': 'Thanks, @aks681 I will keep this in mind.', 'comment_created': datetime.datetime(2020, 7, 17, 4, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456374090, 'comment_body': 'For these, let\'s do: ""The _get_external_id_relationships() method is missing from the derived class. It should be implemented in the derived class.""\r\n\r\nPlease fix similarly for the other ones as well. (You can keep the Raises docstring as-is.)', 'comment_created': datetime.datetime(2020, 7, 17, 11, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456381035, 'comment_body': ""@Hudda, Sorry I was looking through the filename link of the comment thread and ended up looking through an old commit changes, I hope you understand. I'll make sure to check the commit id in the link before commenting, I think that will help me to avoid this problem and I won't repeat it! :)   (I've also mentioned this [here](https://github.com/oppia/oppia/pull/9860#pullrequestreview-450305239))"", 'comment_created': datetime.datetime(2020, 7, 17, 11, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 456383414, 'comment_body': ""@Hudda, Sorry I was looking through the filename link of the comment thread and ended up looking through an old commit changes, I hope you understand. I'll make sure to check the commit id in the link before commenting, I think that will help me to avoid this problem and I won't repeat it! :) \r\n\r\n>  this increases the time of the review process. (I am saying this because it is not the first time this is happening.)\r\n\r\nAlso, I try my best to unblock you asap, sorry if have blocked you before! (I'll try my best to review PRs within 24 hrs. and unblock PRs!)"", 'comment_created': datetime.datetime(2020, 7, 17, 11, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 458809729, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 13, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458814803, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458819071, 'comment_body': 'Yes, this is expected as we need an integer for the version number but here we are passing None. So this is expected.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458820747, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458821800, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458822045, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458831525, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458838456, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458906427, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 16, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458906539, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 16, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459048549, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 22, 20, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459311428, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 9, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459486963, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459492494, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459493275, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459496308, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459496462, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2020, 7, 23, 14, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459499230, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459502260, 'comment_body': ""This is a keyword argument, so this won't work without `comment`."", 'comment_created': datetime.datetime(2020, 7, 23, 14, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459503149, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459506506, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459510472, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459757888, 'comment_body': 'Nice fix, this is an elegant way of representing it :)', 'comment_created': datetime.datetime(2020, 7, 23, 22, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': '002b7c121267979529756780581a62db733a91ad', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3612d972da02e8c791728ccc9b67d63e2a010e2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '861b1a5bf71a007991c62a7f9badb860936cc5f6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90e9faab4b3d669798764f6c8e49de6874349f03', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '444b6077e6022e1bb8542ac8a77e648fe6be62ff', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aa7b124de20a4e3e98a84b40a0f7cf6c9924ff7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3339c0bcb8aa9f7106b15d7ac26aed1627cb8bc4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d42fcadc1b1ddd367ec47f54b0ab634a4b6382c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a722ad69344b1eb9f67112018970f685684f1f0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4795360f7332adda3ad6a283d4c2d069ccc1081', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e862363902e51874a3259915e221f9a1b5907b94', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bc70a8b687d9cc9d1015524083a0362bf61885e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08212e72c58e40c1fec1da4a11c853d0b7672226', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d073eff0425920910356bfa914f6656877793ee', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '525196b834a4a0627130872defe358f2212e0eb0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ed5dbbe8c553e7a59102909f50c69735f4bd46e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
449702848,Fix part of #8423: Added lint check for args-name for a non-keyword argument,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 .
2. This PR does the following: Added a lint check for checking if a non-keyword argument is used as the keyword argument in the function call.

I've ignored the constructors in this check because if we remove the keywords in function call then it is reducing readability drastically. It is very clear in the below screenshot if we remove keywords from here, then the readability will be reduced.
![Screenshot from 2020-07-16 00-14-57](https://user-images.githubusercontent.com/29057268/87590151-fd7edb00-c703-11ea-9cab-8ad43c5900be.png)


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9915,https://api.github.com/repos/oppia/oppia/pulls/9915,https://github.com/oppia/oppia/pull/9915,closed,600,459,56,18,23,54,0,2,[],2020-07-15 20:01:01+00:00,2020-07-26 05:08:02+00:00,896821.0,"10 days, 9:07:01","[{'comment_id': 455509154, 'comment_body': ""We need to use filename here else backend tests are failing for this module, that's why I used pylint pragma to disable the warning. This is happening because we are using swap_with_checks() in the test file to swap url_retrieve with a mock function but we need the argument filename here because swap_with_checks() use *args and **kwargs and we must need argument names with it."", 'comment_created': datetime.datetime(2020, 7, 16, 4, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455525250, 'comment_body': 'I do not get why we are by passing function with **kwargs? \r\n\r\nAlso, this check is just checking for `kwargs` and not when the argument is `args` as mentioned in the comment, right?', 'comment_created': datetime.datetime(2020, 7, 16, 5, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455525471, 'comment_body': ""Didn't get this `Since each node may differ, multiple blocks have been used.`"", 'comment_created': datetime.datetime(2020, 7, 16, 5, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455525546, 'comment_body': 'functin -> function', 'comment_created': datetime.datetime(2020, 7, 16, 5, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455526391, 'comment_body': ""Why don't we add a keyword argument in url_retrieve function? I'm not sure about the right way, but I posted my concern."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455528958, 'comment_body': 'Because if there is  *args or **kwargs in the function definition, then we can use keyword arguments in the function call even if we do not have any keyword argument in the function definition. For example\r\n```\r\ndef func(*args, **kwargs):\r\n\r\n\r\nfunc(a=1, b=2, c=3)\r\n```\r\n\r\n> Also, this check is just checking for kwargs and not when the argument is args as mentioned in the comment, right?\r\n\r\nBecause we do not have a way to check if we used *args because elements of *args will present with other args in a list. Also, we use *args and **kwargs together, so if a there is **kwargs then there must be a *args.', 'comment_created': datetime.datetime(2020, 7, 16, 6, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455531345, 'comment_body': ""Here we are using a position argument as a keyword argument `filename` but we don't use it then the backend tests are failing."", 'comment_created': datetime.datetime(2020, 7, 16, 6, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455535842, 'comment_body': ""Sorry, this is just saying we used two blocks here, i.e. try and except. I'll remove these lines as this is creating confusion"", 'comment_created': datetime.datetime(2020, 7, 16, 6, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455535895, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 16, 6, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455556395, 'comment_body': ""Still not answered: Why don't we add a keyword argument in url_retrieve function? I'm not sure about the right way, but I posted my concern."", 'comment_created': datetime.datetime(2020, 7, 16, 7, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455557718, 'comment_body': ""So, should we make this check this broad? Can't it be a specific? For example functions like:\r\n\r\n```\r\ndef func(entity_id, *args, **kwargs):\r\n\r\nfunc(entity_id='1', a=1, b=2, c=3)\r\n\r\n```\r\n\r\nShouldn't we remove `entity_id=` from such functions?"", 'comment_created': datetime.datetime(2020, 7, 16, 7, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455628518, 'comment_body': 'Yes, we should, but there is not a way to identify those, because it will all be mixed. Following your example here.\r\nby parsing calling method we get keyword_arguments = entity_id, a, b, c.\r\nBut from the function call, we will get keyword_arguments = []\r\nnow we do not have a way to identify which one is a keyword argument and which one is not.', 'comment_created': datetime.datetime(2020, 7, 16, 8, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455766739, 'comment_body': 'I don\'t see this fixed, please do a self-review before commenting ""Done""! I see this pattern in lots of your PRs!', 'comment_created': datetime.datetime(2020, 7, 16, 13, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 455924930, 'comment_body': ""Look again, it is there. Please try to look carefully before leaving any comments. As we don't get a lot of time for GSoC and we can't waste our time in reviewing PRs without looking the code file."", 'comment_created': datetime.datetime(2020, 7, 16, 16, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 455968888, 'comment_body': 'I see, got it. ', 'comment_created': datetime.datetime(2020, 7, 16, 17, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455969804, 'comment_body': 'Please move this comment below the list variable that you have declared. It looks off.', 'comment_created': datetime.datetime(2020, 7, 16, 17, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455970318, 'comment_body': 'Also, write a comment above this explaining what this variable will hold.', 'comment_created': datetime.datetime(2020, 7, 16, 17, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455971029, 'comment_body': ""I get it. Don't you think a contributor would not understand much reading your comment? \r\n\r\nMay be extend it a bit and include an example? "", 'comment_created': datetime.datetime(2020, 7, 16, 17, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 456919330, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 19, 15, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456919347, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 19, 15, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456919872, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 19, 15, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456919885, 'comment_body': 'Added the keyword argument', 'comment_created': datetime.datetime(2020, 7, 19, 15, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 457214686, 'comment_body': 'fucntion -> function', 'comment_created': datetime.datetime(2020, 7, 20, 9, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 457215054, 'comment_body': 'now -> Now', 'comment_created': datetime.datetime(2020, 7, 20, 9, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 457572635, 'comment_body': 'Done\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 17, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 457572710, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 457573920, 'comment_body': 'from -> From\r\n\r\nRemove but from the previous line.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 457574047, 'comment_body': 'by -> By', 'comment_created': datetime.datetime(2020, 7, 20, 17, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 457575498, 'comment_body': 'Oh wait -- why are we changing unused_filename to filename?\r\n\r\nPlease revert this. Ditto below', 'comment_created': datetime.datetime(2020, 7, 20, 17, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 457576987, 'comment_body': 'Because in python_utils file I changed filename to a keyword argument and now we need to use its original name every where', 'comment_created': datetime.datetime(2020, 7, 20, 17, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 457578804, 'comment_body': 'Can you please revert this? This has to be unused_filename since it makes more sense.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 457582523, 'comment_body': 'Add separate tests for each case. (Follow the [wiki guidelines on writing tests](https://github.com/oppia/oppia/wiki/Writing-backend-tests))', 'comment_created': datetime.datetime(2020, 7, 20, 17, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 457583852, 'comment_body': ""We can use filename because this is a keyword argument and we can't use this with an unused prefix. This has to be the same as the keyword argument of the original method."", 'comment_created': datetime.datetime(2020, 7, 20, 17, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 457584230, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 457584291, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 20, 17, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 457590271, 'comment_body': 'This function looks very big to mee, should we divide each cheks into separate functions?  maybe _check_argname_for_nonkeyword_arg and maybe a similar method for the existing check (if possible)!', 'comment_created': datetime.datetime(2020, 7, 20, 17, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 457599610, 'comment_body': ""Do you think this way it will be harder for anyone to find the next id for the new lint test they are going to add? If yes, do you have any idea how we can make it better? (I can't think of a way to make it simpler.)"", 'comment_created': datetime.datetime(2020, 7, 20, 18, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 457609633, 'comment_body': ""Do we want developers to do this i.e, use keyword arg in place of **kwargs? If yes then it's okay to skip this else we should not skip these cases. DO you see this pattern in the codebase anywhere?"", 'comment_created': datetime.datetime(2020, 7, 20, 18, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 457975486, 'comment_body': 'May be have a top level comment at the top of the file indicating the next ID.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 458264216, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 21, 17, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458265218, 'comment_body': ""I've added _check_argname_for_nonkeyword_arg but not existing check because we need name of keyword args of function call from the existing check."", 'comment_created': datetime.datetime(2020, 7, 21, 17, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458265327, 'comment_body': 'Added a top level comment.', 'comment_created': datetime.datetime(2020, 7, 21, 17, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458266304, 'comment_body': 'Yes, it is used in many places, it is mostly used for third party libraries, see example below https://github.com/oppia/oppia/blob/61c354ed294946775e49d65813b2c8fada4d5ca7/scripts/linters/pre_commit_linter.py#L82', 'comment_created': datetime.datetime(2020, 7, 21, 17, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458311544, 'comment_body': '@Hudda, I had a discussion with @bansalnitish on this, can you please work with him to discuss this and get it resolved? ', 'comment_created': datetime.datetime(2020, 7, 21, 18, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 458527585, 'comment_body': ""I'm not getting why the other is not moved out of this? You can create all the variables in the visit_call and call the other check too, similarly as to how you've done for _check_argname_for_nonkeyword_arg. Am I missing something?"", 'comment_created': datetime.datetime(2020, 7, 22, 4, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 458577698, 'comment_body': ""I've discussed this with @bansalnitish and I agree that this is a problem. But we have a problem in implementation. Let's see an example:\r\n\r\n```\r\ndef function(arg1, *args, **kwargs)\r\n\r\ncaller function(arg1='x', a='1')\r\n```\r\nby parsing calling method we get keyword_arguments = [arg1, a].\r\nBut from the function call, we will get keyword_arguments = []\r\nnow we do not have a way to identify which one is a keyword argument and which one is not. "", 'comment_created': datetime.datetime(2020, 7, 22, 7, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458697269, 'comment_body': 'Done. Added a new method.', 'comment_created': datetime.datetime(2020, 7, 22, 10, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459003377, 'comment_body': ""@Hudda, Thanks for the explanation! You can follow these steps:\r\n1. Considering keyword_arguments are generated in the visit_call, I'm assuming you have checked how these values are generated, if not maybe you can check and see if we can do something?\r\n2. Try implementing it (ask mentor for help if required) if you still see it's not possible, create an issue and leave a TODO comment!"", 'comment_created': datetime.datetime(2020, 7, 22, 18, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459581273, 'comment_body': '@Hudda can you please take this up?', 'comment_created': datetime.datetime(2020, 7, 23, 16, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 460400965, 'comment_body': 'Added the todo comment.', 'comment_created': datetime.datetime(2020, 7, 25, 12, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460449665, 'comment_body': 'The correct format for TODOs is `TODO(#10038)`. Please fix this in your next PR.', 'comment_created': datetime.datetime(2020, 7, 25, 21, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460449733, 'comment_body': ""Also please reply here with a link to the change when it's done."", 'comment_created': datetime.datetime(2020, 7, 25, 21, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 461383870, 'comment_body': 'The todo comment is changed now. Here is the link to the change https://github.com/oppia/oppia/blob/f4b140265d8d0c65e9887b393558325a6c3bd624/scripts/linters/pylint_extensions.py#L148', 'comment_created': datetime.datetime(2020, 7, 28, 7, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 461385280, 'comment_body': 'Thanks, @Hudda! Appreciate the follow-up.', 'comment_created': datetime.datetime(2020, 7, 28, 7, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': '085d30bc691f447b8781c68fd7ddfec5990a6ba3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e832fad3312106f3d142d7c99df08cc2df2ec1c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fa53888c94c9995e645c17d93f023cb275420fa', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21b670d7776aa4dd3fa2a6a5aa1e400850aa2155', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1c4ec31ac7de88c3bb0134826c09f51be2c8535', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '227d4d808fb145bd8d9ad20335851e1abf67ab46', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cda76f90e23ee672c37811b24809f8a152764bac', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2413362329e15c52f30e46af67f9d9f002c17e46', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8af0303f0a524d334b8c956fd122ce97d5057cc', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91399df3fabb5ecd84a032822e8ec4f9b8603f54', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53eea82f48e0e1b15fc9a4e491d4152b49364a9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '790f1b318b1ed90ba2ede111da2e5e6251e611a5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f1817d2f2ed17dde948ca2682d9947c4a0ec77c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30cd0656ebffd653387068ac779530a79acbfe36', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef125bb59b5f6a8ccf46b6604b13fded93660f65', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90f0a44f285c4cc5251a7637e004f2f7be62cce0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a4907fd73e7fd5c9963e646a15b33df6fc2fae', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74bd3a378cfcf8f2f81280d1798f05115e6a4fd3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
450005051,Fix part of #8423: Added check to ensure that pylint pragmas are used to disable any rule for a single line,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Added a lint check to ensure that pylint pragmas should only be used for disabling rule for a single line only


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9922,https://api.github.com/repos/oppia/oppia/pulls/9922,https://github.com/oppia/oppia/pull/9922,closed,502,571,55,16,19,144,0,1,[],2020-07-16 08:28:27+00:00,2020-07-26 03:41:51+00:00,846804.0,"9 days, 19:13:24","[{'comment_id': 455974380, 'comment_body': 'Why do we have unused argument though?', 'comment_created': datetime.datetime(2020, 7, 16, 18, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455975238, 'comment_body': 'Why is this changed to lower case?', 'comment_created': datetime.datetime(2020, 7, 16, 18, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455982808, 'comment_body': 'Could you please change this Example to an example that is in codebase like `#pylint: enable:multi-line, single-line-pragma` and then explain it will enable this check. Once this check is enabled it will see pylint as the only comment in the line and hence raise an error/', 'comment_created': datetime.datetime(2020, 7, 16, 18, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455990306, 'comment_body': 'It is possible for..', 'comment_created': datetime.datetime(2020, 7, 16, 18, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 455990657, 'comment_body': ""I didn't get how multiline cannot be at the start of the line?"", 'comment_created': datetime.datetime(2020, 7, 16, 18, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 456930909, 'comment_body': ""This is a test function and we are defining this method for swapping, so most of its arguments won't be needed."", 'comment_created': datetime.datetime(2020, 7, 19, 16, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456930988, 'comment_body': 'Because these are defined inside at local method and variable with capital letters are only allowed at the global level.', 'comment_created': datetime.datetime(2020, 7, 19, 16, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456931505, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 19, 17, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456931518, 'comment_body': 'Removed this line', 'comment_created': datetime.datetime(2020, 7, 19, 17, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456931540, 'comment_body': 'Removed this line', 'comment_created': datetime.datetime(2020, 7, 19, 17, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456931573, 'comment_body': 'Removed this line', 'comment_created': datetime.datetime(2020, 7, 19, 17, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456931581, 'comment_body': 'Removed this line', 'comment_created': datetime.datetime(2020, 7, 19, 17, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456938019, 'comment_body': 'Change it to single-line-pragma.', 'comment_created': datetime.datetime(2020, 7, 19, 18, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 456938098, 'comment_body': 'multi-line-pragma -> single-line-pragma', 'comment_created': datetime.datetime(2020, 7, 19, 18, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 456938777, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 19, 18, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456938780, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 19, 18, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 456990411, 'comment_body': ""Let's not do this -- let's try to fix it properly. E.g.:\r\n\r\n- Combine the if blocks for StateHitEventLogEntryModel, StartExplorationEventLogEntryModel, CompleteExplorationEventLogEntryModel since the formats of the return values are almost the same\r\n- Combine the if blocks for SolutionHitEventLogEntryModel, ExplorationActualStartEventLogEntryModel for the same reason\r\n\r\nThat should reduce the number of returns and obviate the need for this pragma -- right?"", 'comment_created': datetime.datetime(2020, 7, 20, 1, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456990488, 'comment_body': 'Same thing. Figure out a way to remove this altogether.', 'comment_created': datetime.datetime(2020, 7, 20, 1, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 456990623, 'comment_body': ""Can this go on the right of row 909 instead? If not, it's OK."", 'comment_created': datetime.datetime(2020, 7, 20, 2, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 457212976, 'comment_body': 'I think we should move this check to `SingleLineCommentChecker`? \r\n\r\nThis way we would all the checks related to single line comments under one class.\r\n\r\n```\r\ndef _check_inline_pragma (self, tokens, ..)\r\n// Single line pragma code\r\n\r\ndef process_tokens()\r\n  for (token_type, _, (line_num, _), _, line) in tokens:\r\n     if token_type == tokenize.COMMENT:\r\n       call _check_inline_praga()\r\n       call _check_other checks\r\n\r\n\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 9, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 458068417, 'comment_body': 'SingleLineCommentChecker is still in RawChecker and will be converted to ITokenChecker in milestone 3, once that will happen I will merge these two checks.', 'comment_created': datetime.datetime(2020, 7, 21, 12, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458214274, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 21, 16, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458214463, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 21, 16, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458214923, 'comment_body': ""I tried moving it to line 909 but that didn't work. So I left it as it is."", 'comment_created': datetime.datetime(2020, 7, 21, 16, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458349591, 'comment_body': ""No -- don't have two parallel if/elses, please, otherwise it's hard to maintain. Treat each case exactly once, just like it was done before. \r\n\r\nThe point is that you can group some of the cases together. I know the dicts differ slightly but you can decide the event type based on the specific instance type, construct the dict, and return it."", 'comment_created': datetime.datetime(2020, 7, 21, 19, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458350108, 'comment_body': 'This isn\'t a clear name. Please describe more clearly what it represents, so that it\'s clear from the name itself what a value of ""False"" or ""True"" means. You might want to chat with @bansalnitish about this if you are not sure.', 'comment_created': datetime.datetime(2020, 7, 21, 19, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458350706, 'comment_body': 'OK, thanks for checking. Sounds good.', 'comment_created': datetime.datetime(2020, 7, 21, 19, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458528769, 'comment_body': 'It can be `user_query_ criteria`.', 'comment_created': datetime.datetime(2020, 7, 22, 4, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 458605983, 'comment_body': ""That doesn't sound like something that is False or True, either.\r\n\r\nCould someone please explain clearly, in words, what the value stored in that variable actually represents? If you can do so, I can help you find a name (though you'll probably find that that exercise will make it easier for you to find a name)."", 'comment_created': datetime.datetime(2020, 7, 22, 7, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458706313, 'comment_body': 'Not just `event_type` but every key differ in each instance type because they get their values from instance `item`, therefore we need at least two if/elses. If I use nested if/else, would that work for you?', 'comment_created': datetime.datetime(2020, 7, 22, 10, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458709060, 'comment_body': 'You do not need to combine all the groups into a single thing. I gave you a suggested grouping in a previous comment, which tries to match dicts of the same format.', 'comment_created': datetime.datetime(2020, 7, 22, 10, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458712443, 'comment_body': ""I don't mean that, Let's suppose we have this dictionary, then the values corresponding to each key will change with every instance type, so we can combine all the groups into a single thing, we can be easily done. But for event_type type even the variable change every time, so to assign that value to event_type we need a nested if to check the instance type and assign the needed value.\r\n\r\n```\r\n{\r\n                    'event_type': feconf.EVENT_TYPE_ANSWER_SUBMITTED,\r\n                    'version': item.exp_version,\r\n                    'state_name': item.state_name,\r\n                    'id': item.id,\r\n                    'created_on': python_utils.UNICODE(item.created_on),\r\n                    'is_feedback_useful': item.is_feedback_useful\r\n                })\r\n```"", 'comment_created': datetime.datetime(2020, 7, 22, 11, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458714130, 'comment_body': 'Here we are checking if the user satisfy the query criteria, so maybe we can name it as `query_criteria_satisfied`?', 'comment_created': datetime.datetime(2020, 7, 22, 11, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458716343, 'comment_body': 'Yes. I agree with that, or alternatively you can create a dict mapping the instance type to the event type and just read off of it.', 'comment_created': datetime.datetime(2020, 7, 22, 11, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458717571, 'comment_body': ""Yes, a name along those lines sounds good (well done!). One note: be very careful to check that the logic is preserved correctly when you do the refactor; don't rely on the automated tests."", 'comment_created': datetime.datetime(2020, 7, 22, 11, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 458718535, 'comment_body': "">  be very careful to check that the logic is preserved correctly when you do the refactor; don't rely on the automated tests.\r\n\r\nThanks, I will keep it in mind."", 'comment_created': datetime.datetime(2020, 7, 22, 11, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458739981, 'comment_body': ""I've made the changes, PTAL if they are alright."", 'comment_created': datetime.datetime(2020, 7, 22, 12, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 458740326, 'comment_body': 'Changed variable `query_criteria_satisfied`', 'comment_created': datetime.datetime(2020, 7, 22, 12, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459165660, 'comment_body': 'elif\r\n\r\nand drop the newline above this one.', 'comment_created': datetime.datetime(2020, 7, 23, 1, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459165908, 'comment_body': ""Figure out the event type first, then construct the event_dict in one go. Don't construct a dict and modify it.\r\n\r\nAlso, I actually would highly recommend making a dict mapping instance type to event type. The code would end up being simpler and more declarative."", 'comment_created': datetime.datetime(2020, 7, 23, 1, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459165978, 'comment_body': 'Same note as above.', 'comment_created': datetime.datetime(2020, 7, 23, 1, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459167164, 'comment_body': ""Semantically, this seems wrong to me. Please read the function carefully, make sure you really understand what it's doing, and make sure that the variable name matches what is being represented here.\r\n\r\nIn your next review request, please also include a clear explanation of what this function is doing, conceptually. This may require multiple sentences: be clear and precise. This is important because, if I'm reading your code correctly, I think the logic of the change you have made is wrong.\r\n\r\nFinally, note that you can use |= and &= to simplify the implementation."", 'comment_created': datetime.datetime(2020, 7, 23, 1, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459233495, 'comment_body': ""Why can't we move this to the line where we are accessing protected properties/methods?"", 'comment_created': datetime.datetime(2020, 7, 23, 6, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459234000, 'comment_body': 'Use unsed_recipent_id ... and remove pragma!', 'comment_created': datetime.datetime(2020, 7, 23, 6, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459234793, 'comment_body': ""Why can't we move this to the line where we are accessing protected properties/methods?"", 'comment_created': datetime.datetime(2020, 7, 23, 6, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459235922, 'comment_body': 'Why we have this pragma? Can you please check whether this is required?', 'comment_created': datetime.datetime(2020, 7, 23, 6, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459236149, 'comment_body': 'Use `unused_` and remove pragma*', 'comment_created': datetime.datetime(2020, 7, 23, 6, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459236201, 'comment_body': 'Ditto*', 'comment_created': datetime.datetime(2020, 7, 23, 6, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459236413, 'comment_body': 'Should we import this on top? Will it fix the issue? (not sure!)', 'comment_created': datetime.datetime(2020, 7, 23, 6, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459236503, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 7, 23, 6, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459237918, 'comment_body': 'Have you tested this? \r\nIf we are removing this then should we close https://github.com/oppia/oppia/issues/7307?\r\n\r\n/cc @ankita240796 ', 'comment_created': datetime.datetime(2020, 7, 23, 6, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459238181, 'comment_body': ""Can you explain this change? (Sorry, I'm unable to understand)"", 'comment_created': datetime.datetime(2020, 7, 23, 6, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459239086, 'comment_body': 'Use `unsed_*`  param name (if possible)', 'comment_created': datetime.datetime(2020, 7, 23, 6, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459239235, 'comment_body': 'Ditto here elsewhere! (if possible)', 'comment_created': datetime.datetime(2020, 7, 23, 6, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459240034, 'comment_body': 'pylint and isort both are used for import lint? ', 'comment_created': datetime.datetime(2020, 7, 23, 6, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459240546, 'comment_body': 'unused_args? will it work here and elsewhere in this file?', 'comment_created': datetime.datetime(2020, 7, 23, 6, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459240725, 'comment_body': 'Maybe add a docstring here?', 'comment_created': datetime.datetime(2020, 7, 23, 6, 36, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459240858, 'comment_body': 'Moving this to the top will help avoiding pragma??', 'comment_created': datetime.datetime(2020, 7, 23, 6, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459241237, 'comment_body': 'Can we move this `build` import to line 34?', 'comment_created': datetime.datetime(2020, 7, 23, 6, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459248855, 'comment_body': 'I was expecting pylint to internally manage this check, (not sure!) can you please check?', 'comment_created': datetime.datetime(2020, 7, 23, 6, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459250270, 'comment_body': 'Just as an FYI, you can have a tuple for implementation i.e, it can be (IRawChecker, ITokenChecker,)', 'comment_created': datetime.datetime(2020, 7, 23, 7, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459250547, 'comment_body': 'Any specific reason for this change?', 'comment_created': datetime.datetime(2020, 7, 23, 7, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459251215, 'comment_body': 'Add a test for this case:\r\n\r\n`# pylint: disable=invalid-name, single-line-pragma`', 'comment_created': datetime.datetime(2020, 7, 23, 7, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459252046, 'comment_body': 'Can we move this to top?  ', 'comment_created': datetime.datetime(2020, 7, 23, 7, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459252442, 'comment_body': 'Maybe add docstring?', 'comment_created': datetime.datetime(2020, 7, 23, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459806451, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459806478, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459807602, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459808960, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459809263, 'comment_body': 'Yes, it managed internally, but the checks enable from the line `# pylint: enable=` not from the next line, so we have to ignore enable line.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459809298, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459809412, 'comment_body': 'Yes, Done.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459809437, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459809820, 'comment_body': ""Can't do this as `args` is a keyword argument so we have to keep this one."", 'comment_created': datetime.datetime(2020, 7, 24, 1, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459809894, 'comment_body': 'Yes, both are used for import lint.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459809962, 'comment_body': 'Not, possible as these are keyword arguments.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810012, 'comment_body': 'Not, possible as these are keyword arguments.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810109, 'comment_body': 'Fixed all invalid names and removed the pragmas', 'comment_created': datetime.datetime(2020, 7, 24, 1, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810214, 'comment_body': 'There are no errors after removing this, if it is fine with you I will close the #7307.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810481, 'comment_body': 'Worked without moving to top', 'comment_created': datetime.datetime(2020, 7, 24, 1, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810532, 'comment_body': 'Worked without moving to top', 'comment_created': datetime.datetime(2020, 7, 24, 1, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810603, 'comment_body': ""Can't, as these are keyword arguments."", 'comment_created': datetime.datetime(2020, 7, 24, 1, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810660, 'comment_body': ""Can't as these are keyword arguments"", 'comment_created': datetime.datetime(2020, 7, 24, 1, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810734, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810787, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810822, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459810850, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 1, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459857545, 'comment_body': ""> I actually would highly recommend making a dict mapping instance type to event type\r\n\r\n@seanlip I don't get this comment, could you please elaborate a little more?"", 'comment_created': datetime.datetime(2020, 7, 24, 5, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459858141, 'comment_body': ""```\r\nclass_name_to_event_type = {\r\n    'StateHitEventLogEntryModel': feconf.EVENT_TYPE_STATE_HIT,\r\n    ...\r\n}\r\n\r\n```\r\nthen when you return the object, do:\r\n\r\n```\r\nevent_dict = {\r\n    'event_type': class_name_to_event_type[...],\r\n    ...\r\n}\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 7, 24, 5, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459872793, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 6, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459872813, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 6, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459873637, 'comment_body': 'Used |= and the variable name changed to `query_criteria_not_satisfied`\r\n\r\nThe logic of method: In this method we are checking if user satisfies query criteria. If the user satisfies the query criteria, then yield a tuple (query_id, user_id) else return without a value.', 'comment_created': datetime.datetime(2020, 7, 24, 6, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459873833, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 24, 6, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459881243, 'comment_body': ""Could we do query_criteria_satisfied and `&=` (while preserving the functionality)? Otherwise it's confusing because there is a double negative and the reader has to think quite carefully about what is going on."", 'comment_created': datetime.datetime(2020, 7, 24, 6, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459881963, 'comment_body': ""Not done. The point of what I suggested above is not to have nested if/else. With the dictionary, you can have just a single `event_dict = ...` and you don't need to duplicate the code."", 'comment_created': datetime.datetime(2020, 7, 24, 6, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459883989, 'comment_body': ""I've tried to do that, but I didn't find a way to extract the info from `item` to use as a key, because if I use `type(item)` then it will return a lot of other info with the classname. Am I missing something here?"", 'comment_created': datetime.datetime(2020, 7, 24, 7, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459888570, 'comment_body': '`.__classname__` perhaps. \r\n\r\nDid you try searching? Getting the class name of an object is a standard operation.', 'comment_created': datetime.datetime(2020, 7, 24, 7, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459905296, 'comment_body': ""`&=` won't work, because if all of the conditions are turned out to be True then the method won't stop execution by returning nothing but it will yield a value even if the conditions are still failing.\r\n\r\n```\r\n        query_criteria_satisfied = True\r\n        if query_model.edited_at_least_n_exps is not None:\r\n            query_criteria_satisfied &= (\r\n                len(user_contributions.edited_exploration_ids) <\r\n                query_model.edited_at_least_n_exps)\r\n\r\n        if query_model.edited_fewer_than_n_exps is not None:\r\n            query_criteria_satisfied &= (\r\n                len(user_contributions.edited_exploration_ids) >=\r\n                query_model.edited_fewer_than_n_exps)\r\n\r\n        if not query_criteria_satisfied:\r\n            return\r\n```"", 'comment_created': datetime.datetime(2020, 7, 24, 7, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459905718, 'comment_body': 'I tried searching but I think I again used the wrong keyword.', 'comment_created': datetime.datetime(2020, 7, 24, 7, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459920539, 'comment_body': ""I think I have given you enough information, and with the info you're giving me, I don't know enough about what you have done in order to advise you further."", 'comment_created': datetime.datetime(2020, 7, 24, 8, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459922913, 'comment_body': ""> I tried searching but I think I again used the wrong keyword.\r\n\r\nNo, You got me wrong, I found the solution to get the class name, I was just telling you the reason why I didn't find it the first time. Sorry for the misunderstanding."", 'comment_created': datetime.datetime(2020, 7, 24, 8, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459923429, 'comment_body': 'I have read the method and I do not understand what you are trying to convey here. What is the issue exactly? Your description does not seem to match the code snippet -- if all conditions are True then doesn\'t it go past the bottom ""return""?', 'comment_created': datetime.datetime(2020, 7, 24, 8, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459923587, 'comment_body': '@seanlip I think you missed this comment.', 'comment_created': datetime.datetime(2020, 7, 24, 8, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459923931, 'comment_body': ""So why this doesn't look like a keyword argument here? i.e, why not stdin=<something>? Can we do that?"", 'comment_created': datetime.datetime(2020, 7, 24, 8, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459924193, 'comment_body': 'Both linter performs the same check?', 'comment_created': datetime.datetime(2020, 7, 24, 8, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 459925232, 'comment_body': ""No, I didn't, though we might have replied at the same time :)"", 'comment_created': datetime.datetime(2020, 7, 24, 8, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459926514, 'comment_body': ""Yes if all the conditions are True it won't go past the bottom return.\r\nFYI, the conditions here are checking if the query_criteria is failing or not, not the other way around.\r\n\r\nmaybe the correct name of variable here is `query_criteria_failed`"", 'comment_created': datetime.datetime(2020, 7, 24, 8, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459927500, 'comment_body': 'Yes, but isort also shows the correct order in output.', 'comment_created': datetime.datetime(2020, 7, 24, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459927755, 'comment_body': 'Why won\'t it go past the bottom return? Won\'t query_criteria_satisfied be True just before the final ""if"" check?', 'comment_created': datetime.datetime(2020, 7, 24, 8, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459929727, 'comment_body': ""Sorry, I mistyped in the last comment, It will go past the bottom return check, but we don't want that, because if we got true then one of the condition is failing and it must not go beyond the final if check."", 'comment_created': datetime.datetime(2020, 7, 24, 8, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 459931481, 'comment_body': 'Then fix the conditions. Please try to find a solution rather than explain why the method handed to you directly does not work, without thinking further.', 'comment_created': datetime.datetime(2020, 7, 24, 8, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 459990656, 'comment_body': ""Here we are checking if one of the conditions is True from many, for that it is recommended to use OR condition.\r\n\r\nBut AND condition is for checking if all the conditions are True, I don't think that will work here, because here we are checking if any of all or all conditions are true."", 'comment_created': datetime.datetime(2020, 7, 24, 11, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460364488, 'comment_body': 'Move this to just above line 85.', 'comment_created': datetime.datetime(2020, 7, 25, 4, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460364504, 'comment_body': 'Use >= rather than ""not"".\r\n\r\nDitto below for all cases.', 'comment_created': datetime.datetime(2020, 7, 25, 4, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460364626, 'comment_body': 'Does `item.__class__.__name__` work? If so, use that, since we do it elsewhere too.\r\n\r\nDitto below.', 'comment_created': datetime.datetime(2020, 7, 25, 4, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460364731, 'comment_body': 'Yes, please close it, and give a clear reason on that issue.', 'comment_created': datetime.datetime(2020, 7, 25, 4, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460364833, 'comment_body': ""+1 to @DubeySandeep's comment, here and elsewhere. \r\n\r\nThat said, this can be deferred to a separate PR. Feel free to create an issue for it if you like and link it here. But make sure to have a very clear description of the issue."", 'comment_created': datetime.datetime(2020, 7, 25, 4, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460365025, 'comment_body': 'If there is a future TODO here, please file an issue and add a TODO comment pointing to that issue, otherwise this thread cannot be considered resolved.', 'comment_created': datetime.datetime(2020, 7, 25, 4, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460372203, 'comment_body': 'Agreed, also add a ss of the test with no errors on the issue before closing.', 'comment_created': datetime.datetime(2020, 7, 25, 6, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 460373692, 'comment_body': 'Do we allow `# <something> pylint: disable/enable`? (I see `# isort=skip pylint: disable`, so wanted to check!) If yes then we should not expect the line to start with # pylint? (not sure!)', 'comment_created': datetime.datetime(2020, 7, 25, 6, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460373723, 'comment_body': 'I see, thanks for the explanation!', 'comment_created': datetime.datetime(2020, 7, 25, 6, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460373982, 'comment_body': 'multi* (here and elsewhere)', 'comment_created': datetime.datetime(2020, 7, 25, 6, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460374112, 'comment_body': 'moving this to top will fix the issue?', 'comment_created': datetime.datetime(2020, 7, 25, 6, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460374137, 'comment_body': 'ditto?', 'comment_created': datetime.datetime(2020, 7, 25, 6, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460374186, 'comment_body': 'Can you please check this one as well? (as above)', 'comment_created': datetime.datetime(2020, 7, 25, 6, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 460402108, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 25, 12, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460402287, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 25, 12, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460403993, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 25, 13, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460404569, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 25, 13, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460405456, 'comment_body': ""Sorry, but I don't understand what I need to do here. Do I need to create an issue to make these look like keyword arguments or prefix these with unused_?\r\n\r\nFYI, we can't prefix these with unused_ because these are keyword arguments and I tried to do what @DubeySandeep  suggested, i.e., used `stdin=None` and same for other arguments but the lint error was still there. So, we can rule out this as a suggestion."", 'comment_created': datetime.datetime(2020, 7, 25, 13, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460406413, 'comment_body': ""> Do we allow `# <something> pylint: disable/enable`\r\n\r\nNo, we don't allow this. The reason I chose to check only those lines starting with `# pylint: ` because on a multiline comment we generally use just this line instead of prefixing it with some other random comment. But I am open to suggestion, if you think this is not the right way to do it, then I can change it to check if a line start with `#` and contain `pylint: disable=` or `pylint: enable=` in it."", 'comment_created': datetime.datetime(2020, 7, 25, 13, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460406665, 'comment_body': 'Actually, we have this todo in our milestone tracker, do I still need to file an issue for this?', 'comment_created': datetime.datetime(2020, 7, 25, 13, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460406868, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 25, 13, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460408075, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 25, 14, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460408259, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 25, 14, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460408528, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 25, 14, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460451147, 'comment_body': ""Ah, I see. Thanks for the explanation; I agree that a solution is not obvious. Let's leave it for now."", 'comment_created': datetime.datetime(2020, 7, 25, 22, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460451295, 'comment_body': 'I think how you have it is OK, but I wonder if the check on this line is too narrow. Is it worth catching cases like `#pylint` and `#   pylint` as well?\r\n\r\n(If so, please do this in a separate follow-up PR.)', 'comment_created': datetime.datetime(2020, 7, 25, 22, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460451392, 'comment_body': 'Yes.\r\n\r\nFollow this procedure, **always**: for any deferred work, (a) file an issue, (b) add a link to that issue in this comment thread, and, (c) if the issue relates to a specific part of the code, add a TODO comment pointing to that issue (if applicable). Make sure the comment is of the form `TODO(#...):` where the part in the parentheses is the issue number.', 'comment_created': datetime.datetime(2020, 7, 25, 22, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460482596, 'comment_body': 'We already have plans to check for correct format of comments, i.e. if every comment has a single space after `#`. That will solve this issue automatically.', 'comment_created': datetime.datetime(2020, 7, 26, 5, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460483097, 'comment_body': 'Created the issue (https://github.com/oppia/oppia/issues/10042)', 'comment_created': datetime.datetime(2020, 7, 26, 5, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460483321, 'comment_body': 'But is this check in place yet? If not, then please still fix this.', 'comment_created': datetime.datetime(2020, 7, 26, 6, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 460483865, 'comment_body': 'Ok, I will create a follow-up PR to fix this by today.', 'comment_created': datetime.datetime(2020, 7, 26, 6, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 460547364, 'comment_body': 'Created the PR https://github.com/oppia/oppia/pull/10050 to make the check broader and check if there are no or more than one space between `#` and `pylint:`. Example: `#pylint:`, `#          pylint:`', 'comment_created': datetime.datetime(2020, 7, 26, 16, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '9048d3c58e4ff4bacb04e69dd6410dd63b2b5007', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c25919a89bc98a6f5c4159883401b50ad84e8a0c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '774e3993b5c01ff5621841e7aa7c09c01d14f469', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f41eeedbc92f8cbd9eae98b9fd2cb20c6334cdb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac6b0b889b1fd1c85e8d1ce006b5fcfc57d25211', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b379d8eddb87e37d886593a93f4ed40c2ed3751d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3001163e89c1c79e3524d14af5de14ad2525208', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5473c091f7ee8709bf547a753a4453d4bd5ba76d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42b95afaf1eb1c3b703c4886f861efad3dd873b5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '035657a29237fd60c4ea573b57a7598768d48ffb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f603f33ad3ddba6c2d1b652a0ae6a87c350f778a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f79ffed7b13a392be695a1b505178fa9f173b34e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64274eef6add371c162cd98af4360edbecee7683', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4972509a98c6d633d4090167dd7d58d919245242', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3279d1ec4435906b2fc5f3989d8295b74ca5254', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '317a5d19746c3d773e0046776625d16deead05cb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
445537648,Fix part of #8423: Add lint check for unused imports,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Enable check for unused imports for Js and Ts files.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,9826,https://api.github.com/repos/oppia/oppia/pulls/9826,https://github.com/oppia/oppia/pull/9826,closed,254,85,59,16,17,30,0,1,[],2020-07-07 16:57:32+00:00,2020-07-14 11:00:21+00:00,583369.0,"6 days, 18:02:49","[{'comment_id': 451017365, 'comment_body': 'I read here for the options of this: https://eslint.org/docs/rules/no-unused-vars#options. By default for `args` it is `""args"": ""after-used""`. Why are we not using `""args"": ""all""`?', 'comment_created': datetime.datetime(2020, 7, 7, 17, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 451041167, 'comment_body': 'OK, so we\'ve certain terms like `$scope.$on(EVENT_NEW_CARD_OPENED, function(evt, newCard)` where evt is never used but by default it would be the first argument.\r\n\r\nSo, let\'s proceed with the default behaviour. Could you please also add `""args"": ""after-used""` as an option in this rule?', 'comment_created': datetime.datetime(2020, 7, 7, 17, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 452315704, 'comment_body': ""Isn't this used in this file in line 103 and 127?"", 'comment_created': datetime.datetime(2020, 7, 9, 15, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 452333851, 'comment_body': '@aks681 I was thinking that it is defined here https://github.com/oppia/oppia/blob/7a88ec6c1e1f29058c7abcb0f640afaf89303ff9/core/templates/pages/exploration-editor-page/services/learner-answer-details-data.service.spec.ts#L38', 'comment_created': datetime.datetime(2020, 7, 9, 16, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 452490859, 'comment_body': ""I think it's because it is imported in UpgradedServices and 'provided' here, but the tests are passing!"", 'comment_created': datetime.datetime(2020, 7, 9, 21, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 453218455, 'comment_body': ""Please d a self-review of all the changes, I see extra newlines in lots of files? (I've only reviewed top 5-6 files and I see this pattern)"", 'comment_created': datetime.datetime(2020, 7, 11, 17, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 453271657, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 5, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453310829, 'comment_body': 'This line should not be removed. There should be a line break between angular imports and oppia imports.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 453310853, 'comment_body': 'Ditto here. ', 'comment_created': datetime.datetime(2020, 7, 12, 12, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 453310925, 'comment_body': 'Ditto here.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 453310931, 'comment_body': 'Ditto here.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 453310943, 'comment_body': 'Ditto here.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 453313373, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453313381, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453313394, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453313405, 'comment_body': 'We do not have angular import in this file.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453313415, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453313661, 'comment_body': 'Please remove this.', 'comment_created': datetime.datetime(2020, 7, 12, 13, 0, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 453313996, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 12, 13, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453373048, 'comment_body': 'Why removing this line?', 'comment_created': datetime.datetime(2020, 7, 12, 22, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 453373114, 'comment_body': 'Ditto?', 'comment_created': datetime.datetime(2020, 7, 12, 22, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 453373162, 'comment_body': 'Only remove one line*', 'comment_created': datetime.datetime(2020, 7, 12, 22, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 453414863, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 13, 3, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453414896, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 13, 3, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453414929, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 13, 3, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453555860, 'comment_body': 'space before `}` ', 'comment_created': datetime.datetime(2020, 7, 13, 10, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 453566011, 'comment_body': ""This check is not checking if we have unwanted requires in my opinion. I don't think we can have such check right now since there are require statements added in many files due to webpack compilation. After the angular migration is done we would not have requires anywhere but just in the e2e tests files. Then we will have a check to ensure no unused require is added.\r\n\r\nHowever, I also think the unwanted requires might be removed when we add `unused-var` plugin because in the e2e tests we have variables like var waitFor = require('./waitFor'). So, if waitFor is not used we can remove that require.\r\n\r\n@Hudda could you please add this check in the issue itself `remove unnecessary require from the codebase` and link this comment there? "", 'comment_created': datetime.datetime(2020, 7, 13, 10, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 453657626, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453659571, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 453823346, 'comment_body': ':D', 'comment_created': datetime.datetime(2020, 7, 13, 17, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}]","[{'commit_sha': '3eeb69922a41c47c68befd92c1e9f9c3ff4e628a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd39fee2b41f8d6e690762b8242012ce3dea0e5bb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8794566d9419717f2502899350475393b53b2421', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '142e084109d15a07ed759a90aa2886f07eee5912', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5c619e8add0539c234a9c7d88557628b9ec0089', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a88ec6c1e1f29058c7abcb0f640afaf89303ff9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe5c047aaf545ba6df0ad652445a57c2ed34c8d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc51cfff954b3a72726622e8ddc779dc8aa562c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da617e85b946502f508d26e6353066586d3757e5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9708b4b938fff09d9c58ede242a7b34e18628153', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d9db488a4e6551b6f715aa3f43f2473d0827dc8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2597bfa13393293df825a67044e04d862cf94716', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdd1567b3d5973dc9c5da04ec81248d335d60f20', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc887197dc7087c9f635b0b7549710350cbae75b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30a1fb4b2319c6375ed7f3560327c4ded1afe843', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8bdd2553c7eacf377b994c4d0e4d83d976af0f7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
468479222,Fix part of #8423: Added custom eslint check to ensure line break after parenthesis,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423
2. This PR does the following: Added basic structure for custom eslint checks. Added a custom eslint check to ensure that there is a break after '(' in case of multiline.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10363,https://api.github.com/repos/oppia/oppia/pulls/10363,https://github.com/oppia/oppia/pull/10363,closed,2524,1727,311,54,29,199,0,3,[],2020-08-16 18:31:07+00:00,2020-08-30 08:25:35+00:00,1173268.0,"13 days, 13:54:28","[{'comment_id': 472279184, 'comment_body': ""I'm sorry but I'm personally not liking the line break here. I've seen few examples online and the directive name is mentioned in the same line itself. Same for all other examples on directives/controllers.\r\n\r\nWhat do you say @srijanreddy98 @DubeySandeep ?"", 'comment_created': datetime.datetime(2020, 8, 18, 15, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472281202, 'comment_body': 'Also, @Hudda I see not all examples are having break after `.directive(`.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472281840, 'comment_body': 'Can we move this to above line now?', 'comment_created': datetime.datetime(2020, 8, 18, 15, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472282092, 'comment_body': 'The indentation looks wrong here.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472282550, 'comment_body': 'Can we move these all now?', 'comment_created': datetime.datetime(2020, 8, 18, 15, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472282740, 'comment_body': 'Can we move this to above line?', 'comment_created': datetime.datetime(2020, 8, 18, 15, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472284145, 'comment_body': 'Move this above.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472284502, 'comment_body': 'Check if this can be moved to above line.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472284668, 'comment_body': 'Move this to above line.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472284792, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472284929, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2020, 8, 18, 15, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472285180, 'comment_body': 'Basically ditto everywhere where you can move the line above.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472294021, 'comment_body': 'Indentation issue.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472294278, 'comment_body': 'Fix it here and everywhere.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472297251, 'comment_body': 'Remove this line brek.', 'comment_created': datetime.datetime(2020, 8, 18, 15, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472297616, 'comment_body': 'What are these comments?', 'comment_created': datetime.datetime(2020, 8, 18, 15, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472299070, 'comment_body': 'We do not have to update this file each time while we add the test right?', 'comment_created': datetime.datetime(2020, 8, 18, 15, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472300650, 'comment_body': ""Haven't we ignored `else if`?"", 'comment_created': datetime.datetime(2020, 8, 18, 15, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 473114588, 'comment_body': 'Fixed the changes.', 'comment_created': datetime.datetime(2020, 8, 19, 15, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473129513, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 19, 15, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473132948, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 15, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473133431, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 19, 15, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473134852, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 15, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473135164, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 15, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473139835, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 16, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473141360, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 16, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473141543, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 16, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473142109, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 16, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473142217, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 16, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473150385, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 16, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473150670, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 19, 16, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473244065, 'comment_body': ""No, we don't need to change this file in the future. We might never touch this file again."", 'comment_created': datetime.datetime(2020, 8, 19, 18, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473244659, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 19, 18, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473244940, 'comment_body': 'These are to specify if there is any helper method it will go here.', 'comment_created': datetime.datetime(2020, 8, 19, 18, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 474107083, 'comment_body': 'Please move such lines above. I left this comment before too, please take a thorough look over all your changes.', 'comment_created': datetime.datetime(2020, 8, 20, 16, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 474744094, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 21, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475039303, 'comment_body': 'Should we call this eslint-extensions? (To match our pylint_extensions naming?)', 'comment_created': datetime.datetime(2020, 8, 22, 3, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475039494, 'comment_body': 'Do we need this check here? (not sure, any specific reason for having it here?)', 'comment_created': datetime.datetime(2020, 8, 22, 3, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475039538, 'comment_body': 'Is it running the lint check or the test for eslint plugins?', 'comment_created': datetime.datetime(2020, 8, 22, 3, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475039603, 'comment_body': ""hmmm... why can't we download the required modules in on place i.e, at /oppia/node_modules?"", 'comment_created': datetime.datetime(2020, 8, 22, 3, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475039878, 'comment_body': 'This is not the plugin file, right? Can please add what this file does? also, end the fileoverview with period*', 'comment_created': datetime.datetime(2020, 8, 22, 3, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475039946, 'comment_body': 'We have already mentioned the author on top (Try following the general pattern we have used in .ts/.js files.) .', 'comment_created': datetime.datetime(2020, 8, 22, 3, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475040178, 'comment_body': 'Should we make it one inline comment? (I think that would be more cleaner and the one we have right now seems like a template instead of code comment.)  ', 'comment_created': datetime.datetime(2020, 8, 22, 3, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475040411, 'comment_body': ""Extra newline above? Also, remove this template comment, I think we follow the same structure for writing js module so it's not needed!)"", 'comment_created': datetime.datetime(2020, 8, 22, 3, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475040577, 'comment_body': 'Can you please mention the cases where we are going to have this check? (This will be helpful for me to review the new checks!)', 'comment_created': datetime.datetime(2020, 8, 22, 3, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475040837, 'comment_body': 'How much time does it take to run the eslint checks? Also, any specific reason for not running this with unit tests?', 'comment_created': datetime.datetime(2020, 8, 22, 3, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475041060, 'comment_body': 'Unexpected indentation?', 'comment_created': datetime.datetime(2020, 8, 22, 3, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475041280, 'comment_body': 'Why is this considered as a valid line?', 'comment_created': datetime.datetime(2020, 8, 22, 3, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475041357, 'comment_body': 'Any specific reason for this dir structure?', 'comment_created': datetime.datetime(2020, 8, 22, 3, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475049157, 'comment_body': ""it takes 1 or 2 seconds to run. We can't run this with unit tests because it has it's own output and if this test fails we do not be able to know where the test fail"", 'comment_created': datetime.datetime(2020, 8, 22, 5, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051101, 'comment_body': ""I think this is how everyone does it, you can see some examples above, 'angular', 'html', 'unused-imports'. I think these are consistent with how other plugins are written."", 'comment_created': datetime.datetime(2020, 8, 22, 5, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051115, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 22, 5, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051122, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 22, 5, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051128, 'comment_body': ""We don't need it here, removed. "", 'comment_created': datetime.datetime(2020, 8, 22, 5, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051132, 'comment_body': 'Yes, this is a plugin file as it manages all rules under this plugin. Added the period', 'comment_created': datetime.datetime(2020, 8, 22, 5, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051154, 'comment_body': 'Removed author', 'comment_created': datetime.datetime(2020, 8, 22, 5, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051159, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 5, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051172, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 22, 5, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051185, 'comment_body': 'Done. Added it in the file overview.', 'comment_created': datetime.datetime(2020, 8, 22, 5, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051207, 'comment_body': 'No, this is expected.', 'comment_created': datetime.datetime(2020, 8, 22, 5, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051215, 'comment_body': 'We are ignoring all the directives, factories, constants, controller and other like these.', 'comment_created': datetime.datetime(2020, 8, 22, 5, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475051222, 'comment_body': 'This is the basic structure for custom eslint checks. This is how every plugin is structured I have seen on the web.', 'comment_created': datetime.datetime(2020, 8, 22, 5, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475055078, 'comment_body': 'Why is this not moved up? ', 'comment_created': datetime.datetime(2020, 8, 22, 6, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 475055183, 'comment_body': 'Ditto for this. Please check if the below line can be moved up once more. I can see some examples around this still not fixed.', 'comment_created': datetime.datetime(2020, 8, 22, 6, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 475102481, 'comment_body': 'moved.', 'comment_created': datetime.datetime(2020, 8, 22, 15, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475102615, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 22, 15, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475109026, 'comment_body': 'This should be moved up. This is my third time giving the same comment.', 'comment_created': datetime.datetime(2020, 8, 22, 16, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 475118496, 'comment_body': 'Sorry, there are a lot of files. I have iterated over it almost 4 times, but still, some of them miss the eye.', 'comment_created': datetime.datetime(2020, 8, 22, 18, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475122802, 'comment_body': 'Why is this not moved up? Could you please pass over all your code changes? It will hardly take 5 mins to figure out these issues.', 'comment_created': datetime.datetime(2020, 8, 22, 19, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 475232243, 'comment_body': ""I didn't move it up intentionally, as it looks good like this, i.e. every variable on a separate line. I have seen several others like it in the codebase. So I didn't find a good reason to move this up."", 'comment_created': datetime.datetime(2020, 8, 23, 15, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475380487, 'comment_body': 'So why the file name is index.js?', 'comment_created': datetime.datetime(2020, 8, 24, 6, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475381068, 'comment_body': '>  we do not be able to know where the test fail\r\n\r\nSo how the user will fix the test issues in eslint_tests?', 'comment_created': datetime.datetime(2020, 8, 24, 7, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475381937, 'comment_body': 'Because this is the basic syntax for writing any eslint plugin, it is standard.', 'comment_created': datetime.datetime(2020, 8, 24, 7, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475382482, 'comment_body': 'This is the case if we run this eslint tests with other python unit tests, if we run it separately as we are doing right now, it will show all errors, you can check the GithubCLI for example.', 'comment_created': datetime.datetime(2020, 8, 24, 7, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475383085, 'comment_body': ""Can you please mention (here in this thread) all the places where we are asking the user to break-line after parenthesis? (if it's not implemented to handle all the cases.)\r\n\r\nI need this to review the later part of this file!"", 'comment_created': datetime.datetime(2020, 8, 24, 7, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475385438, 'comment_body': ""We need line break after parenthesis in case of multiline line hanging indentation, except for -- `while`, `if`, `for`, `else if`, any line starting with `angular.module('oppia')`, `it` and `describe`."", 'comment_created': datetime.datetime(2020, 8, 24, 7, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475879167, 'comment_body': 'File overview should have the info about the file, maybe: Indexes all the custom eslint rules.', 'comment_created': datetime.datetime(2020, 8, 24, 20, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475880284, 'comment_body': ""@bansalnitish, I'm not sure whether we had thought of excluding `it` and `describe`. Can you please confirm?"", 'comment_created': datetime.datetime(2020, 8, 24, 20, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475880691, 'comment_body': ""But why it doesn't show when running with other tests?"", 'comment_created': datetime.datetime(2020, 8, 24, 20, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475881966, 'comment_body': 'To start as line with two extra spaces? Do we need var at the beginning? Also, do we need semicolon on line 25?\r\n\r\nCan you please confirm whether linters are working on these files?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475882426, 'comment_body': 'Is this being demanded by the Angular migration team?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475882953, 'comment_body': 'This is how the eslint project is structure, but do they recommend having the same structure for the custom rules?', 'comment_created': datetime.datetime(2020, 8, 24, 20, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476196669, 'comment_body': 'Yes, you can check it here(https://eslint.org/docs/developer-guide/working-with-rules#applying-fixes)', 'comment_created': datetime.datetime(2020, 8, 25, 6, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476196948, 'comment_body': 'Yep, it is demanded by angular migration team.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476197276, 'comment_body': 'Lint checks are working on these files. Eslint show error if I do what you suggested.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476198210, 'comment_body': ""Unit tests does not show the output of a test, they just show the status of pass or fail.\r\n\r\nFYI, this is a testing mechanism in itself, that's why we needed it separately. I did what you suggested at my first try, but it doesn't work there. It just showed tests failed but not which one, because this is a completely different tests suite, it is cannot be worked as part of our current unittests."", 'comment_created': datetime.datetime(2020, 8, 25, 6, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476208151, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476543770, 'comment_body': ""errr... Can you try this:\r\n```\r\nvar rule = require('../../../lib/rules/break-after-parens');\r\nvar RuleTester = require('eslint').RuleTester;\r\n```"", 'comment_created': datetime.datetime(2020, 8, 25, 15, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476546838, 'comment_body': ""I don't see it. Can you please share a screenshot highlighting the recommendation text?"", 'comment_created': datetime.datetime(2020, 8, 25, 15, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476547988, 'comment_body': 'Check here(https://eslint.org/docs/developer-guide/working-with-rules)', 'comment_created': datetime.datetime(2020, 8, 25, 15, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476552539, 'comment_body': 'This is how it is supposed to be https://github.com/eslint/eslint/blob/4111d21a046b73892e2c84f92815a21ef4db63e1/tests/lib/rules/accessor-pairs.js#L12', 'comment_created': datetime.datetime(2020, 8, 25, 15, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476561105, 'comment_body': ""Have you tried, what I've suggested above? is it still throwing error on eslint?\r\n\r\nFYI, we don't follow that pattern for defining multiple variables!"", 'comment_created': datetime.datetime(2020, 8, 25, 16, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476562462, 'comment_body': 'Yes, we did thought of excluding.  ', 'comment_created': datetime.datetime(2020, 8, 25, 16, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 476568235, 'comment_body': ""IIRC, we had finalized to consider `it` and `describe` as a function call and don't consider it as a special case, do whatever we do for function calls, just to have consistency style for all the function calls. Anyway, I'm fine with excluding these if you all have decided. Thanks for confirming! :)"", 'comment_created': datetime.datetime(2020, 8, 25, 16, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477111043, 'comment_body': 'Yes, now it starts throwing relative import error', 'comment_created': datetime.datetime(2020, 8, 26, 8, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477142126, 'comment_body': 'Done. changed to recommended code.', 'comment_created': datetime.datetime(2020, 8, 26, 8, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477164342, 'comment_body': 'Which part of this doc?', 'comment_created': datetime.datetime(2020, 8, 26, 9, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477166415, 'comment_body': ""Why we have another package.json here? Can't we use the one in the root dir?"", 'comment_created': datetime.datetime(2020, 8, 26, 9, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477166964, 'comment_body': 'Move this to the scripts dir (This is a driver script right?)', 'comment_created': datetime.datetime(2020, 8, 26, 9, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477185208, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477185955, 'comment_body': ""We need it here, because this whole directory will be copied to node_modules when we run the yarn install at the beginning, without it the checks won't work."", 'comment_created': datetime.datetime(2020, 8, 26, 10, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477186666, 'comment_body': ""The first part. I've added the screenshot.\r\n\r\n![Screenshot from 2020-08-26 15-33-58](https://user-images.githubusercontent.com/29057268/91290744-a3b50a80-e7b1-11ea-8a11-0f7611da5110.png)\r\n"", 'comment_created': datetime.datetime(2020, 8, 26, 10, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477204749, 'comment_body': 'This is the structure for the eslint codebase, right? Do we need to have the same structure? (Considering we are only going to write a few rules files.)', 'comment_created': datetime.datetime(2020, 8, 26, 10, 39, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477208112, 'comment_body': ""What wrong with this structure? If this is the standard structure and every plugin you see on the web is following the same structure, why we shouldn't follow it? "", 'comment_created': datetime.datetime(2020, 8, 26, 10, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477219867, 'comment_body': ""```suggestion\r\n  $provide.decorator('$log', [\r\n      '$delegate', 'DEV_MODE', ...\r\n```\r\nThis should be an accepted patter^, right? If yes, then I think we should follow this pattern!\r\n\r\nThis would work for `it`, `describe` & `angular.module('oppia')....` functions, we don't have to count them as exception*\r\n\r\n/cc @bansalnitish \r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 26, 11, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477233808, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 8, 26, 11, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477237249, 'comment_body': ""```\r\n                element.name !== 'p' && element.children.length > 0 && (\r\n                 .....) \r\n```\r\n\r\nOR\r\n\r\n\r\n```\r\nelement.name !== 'p' && \r\nelement.children.length > 0 && \r\n ....\r\n``` \r\nCan we do this^? If yes please follow this pattern in other places*"", 'comment_created': datetime.datetime(2020, 8, 26, 11, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477239209, 'comment_body': 'Are we expecting a break after `[` here? If yes, then are we expecting checks to fail here?', 'comment_created': datetime.datetime(2020, 8, 26, 11, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477240649, 'comment_body': ""Considering this to be `contentIds.some(function(contentId) {` I think it's fine to have it as-is? [This is the issue with regex check!]\r\n\r\n//cc @bansalnitish "", 'comment_created': datetime.datetime(2020, 8, 26, 11, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477253150, 'comment_body': ""Consider this as multiline params and break line after `factory(`. [I know you have added oppia.module as an exception but I've left a comment above which explain how that's expected and not exception*]"", 'comment_created': datetime.datetime(2020, 8, 26, 12, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477254452, 'comment_body': 'If this is acceptable then I think the existing code is also good!', 'comment_created': datetime.datetime(2020, 8, 26, 12, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477264168, 'comment_body': 'are we considering the old pattern also correct?', 'comment_created': datetime.datetime(2020, 8, 26, 12, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477265378, 'comment_body': 'I see multiline param here but no newline after `(`, is that expected?', 'comment_created': datetime.datetime(2020, 8, 26, 12, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477265894, 'comment_body': 'The indentation looks bit weird here, is that passing the tests?', 'comment_created': datetime.datetime(2020, 8, 26, 12, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477268546, 'comment_body': ""```suggestion\r\n    super(arg !== null ? (arg + ' has type ' + actualType + ' which') : (\r\n        'Type ' + actualType does not match expected type ' + expectedType);\r\n```\r\n\r\nThis looks much better? wdyt?"", 'comment_created': datetime.datetime(2020, 8, 26, 12, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477271673, 'comment_body': ""```suggestion\r\nrequire(\r\n  'pages/contributor-dashboard-page/contributor-dashboard-page.component.ts');   \r\n```"", 'comment_created': datetime.datetime(2020, 8, 26, 12, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477281007, 'comment_body': 'Can we move this to the line above?', 'comment_created': datetime.datetime(2020, 8, 26, 13, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477284516, 'comment_body': 'Do we need the extra parenthesis at the end?', 'comment_created': datetime.datetime(2020, 8, 26, 13, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477284630, 'comment_body': 'Ditto as above*', 'comment_created': datetime.datetime(2020, 8, 26, 13, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477328865, 'comment_body': 'Is there any issue with the old code?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477329821, 'comment_body': 'The indentation look weird here!', 'comment_created': datetime.datetime(2020, 8, 26, 14, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477330413, 'comment_body': 'Can we move this to the line above? [Check in other places as well.]', 'comment_created': datetime.datetime(2020, 8, 26, 14, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477332348, 'comment_body': ""is there any issue with the old code? can't we break after || if it's already in parenthesis (line 62)?"", 'comment_created': datetime.datetime(2020, 8, 26, 14, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477335721, 'comment_body': 'expected indentation?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477337620, 'comment_body': ""I'm not sure whether the old code is an unexpected pattern? @bansalnitish can you please confirm?"", 'comment_created': datetime.datetime(2020, 8, 26, 14, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477339648, 'comment_body': 'The old code is also in an acceptable style, right?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477343562, 'comment_body': ""Write about the file here! I'm not sure what's `which` here? I think I had suggested a better fileoverview for this file earlier, can you please use that or something around that? "", 'comment_created': datetime.datetime(2020, 8, 26, 14, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477343665, 'comment_body': 'Add newline above*', 'comment_created': datetime.datetime(2020, 8, 26, 14, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477345001, 'comment_body': 'Why is this false?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477347610, 'comment_body': 'This is incomplete, you can use the part of file overview!', 'comment_created': datetime.datetime(2020, 8, 26, 14, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477353239, 'comment_body': 'Do we need the function name there?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477355324, 'comment_body': ""We are again using tokens for non-comment stuff! I see we are mostly using it for \r\n- function calls and expressions\r\n- assignment operator\r\n- list and dict.\r\n\r\nWhy aren't we doing it through nodes? The tokens are later read as a string/regex which looks bad!"", 'comment_created': datetime.datetime(2020, 8, 26, 14, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477357760, 'comment_body': ""What if the function name is `iterateItem`? What if the line is like:\r\na = (\r\n`dasdasdasdasd\r\n   it...` + ('something'))\r\n"", 'comment_created': datetime.datetime(2020, 8, 26, 14, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477359511, 'comment_body': ""I would suggest taking `it` block as a function call and it should be fine to do this:\r\n\r\nCorrect:\r\n```\r\nit('....', function() {\r\n\r\n});\r\n```\r\nIncorrect:\r\n\r\n```\r\nit('....',\r\n  function(){\r\n\r\n});\r\n```\r\n\r\nI've left similar comment above*"", 'comment_created': datetime.datetime(2020, 8, 26, 14, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477360850, 'comment_body': ""This is bad we are excluding this using string check, it would be simple to exclude these using node i.e, don't visit these kinda nodes."", 'comment_created': datetime.datetime(2020, 8, 26, 14, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477361600, 'comment_body': 'The code is not readable can you please add code comments?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477362859, 'comment_body': 'Why maintain two package.json file? Can you please find a way to move the required dependencies in the main package file? ', 'comment_created': datetime.datetime(2020, 8, 26, 14, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477363861, 'comment_body': 'Please add correct fileoverview here!', 'comment_created': datetime.datetime(2020, 8, 26, 14, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477364427, 'comment_body': 'Unwanted newline*', 'comment_created': datetime.datetime(2020, 8, 26, 14, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477366027, 'comment_body': 'Do we need newline here?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477367163, 'comment_body': 'What will be the `tests_stdout` if test passes?', 'comment_created': datetime.datetime(2020, 8, 26, 14, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477435148, 'comment_body': ""It is not necessary that this pattern will be followed every where, what if there are too many arguments before the square bracket then we can not be able to what you suggested, the same case for other examples you have given. right?\r\n\r\nFYI, I've allowed to have `[`, `{` at the end of any line"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477435729, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 26, 16, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477438531, 'comment_body': 'Okay, but how will we check if there are other brackets inside a return statement as sometimes it becomes necessary to use bracket. How do we keep track of that? See line 167. Just a single example, there might be many other cses where we have to use brackets.\r\n', 'comment_created': datetime.datetime(2020, 8, 26, 16, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477439856, 'comment_body': ""Yes, a break is required after the square bracket. We have a check for square bracket `[` and `{` bracket. So we do not have to implement that. I'll create a separate PR for these."", 'comment_created': datetime.datetime(2020, 8, 26, 16, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477442876, 'comment_body': ""What's wrong with it, we can easily all => in allow suffix if you want it like this"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477445733, 'comment_body': ""@bansalnitish told me to keep it like this. We do not need a line break after '(' here."", 'comment_created': datetime.datetime(2020, 8, 26, 16, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477446202, 'comment_body': ""No, we need a line break after '('"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477452636, 'comment_body': 'Fixed the check.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477454119, 'comment_body': 'Yes, the tests were passing, eslint allow strings to have this type of indentation. Added the indentation.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477455667, 'comment_body': 'Changed to the suggestion', 'comment_created': datetime.datetime(2020, 8, 26, 17, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477457865, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477458315, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477460885, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477461267, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477461991, 'comment_body': ""Yes we need a break after '(' in case of multi-line hanging indentaion"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477462367, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477462690, 'comment_body': 'NO, do not fit on a single line.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477463269, 'comment_body': 'We can allow || at the end if you want.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477464152, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477465176, 'comment_body': ""I think that was expected as we need break after '('"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477465718, 'comment_body': 'yes.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477468042, 'comment_body': 'Changed to what you suggested.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477468207, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477469601, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477469732, 'comment_body': 'changed to true.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477470306, 'comment_body': 'Yes, else syntax error arise.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477472490, 'comment_body': ""because nodes do not cover all the cases, I've tried what you are suggesting on my first try but that doesn't work as we do not have nodes for some cases. For example, cases where it is not a function call or expression.\r\n`constructor(`\r\n\r\nAlso, we do not have node to access return statements. \r\n\r\nTherefore I used tokens after there was no other options left.\r\n\r\nAlso there might be other cases which are not coming to mind now. but might cause problem later.\r\n\r\nwhat do you think @bansalnitish ?"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477473102, 'comment_body': 'Added bracket after it and describe.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477473554, 'comment_body': ""We can't use nodes as we do not have nodes for all the cases."", 'comment_created': datetime.datetime(2020, 8, 26, 17, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477474558, 'comment_body': 'If we have nodes for all cases that will be great, for example we do not have node for while.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477474995, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477475402, 'comment_body': ""I've tried but didn't find a way, we have to keep two package.json"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477476183, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477476358, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477476941, 'comment_body': 'REmoved.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477478698, 'comment_body': ""```\r\n  break-after-parens\r\n    valid\r\n      ✓ var a = (true); (41ms)\r\n      ✓ if (true ||\r\n      false) {\r\n        var a = 1 + 2;\r\n      }\r\n      ✓ it('should' +\r\n    'happen')\r\n      ✓ angular.module('oppia').constant('default',\r\n    false);\r\n    invalid\r\n      ✓ var a = (true ||\r\n        true);\r\n\r\n\r\n  5 passing (65ms)\r\n```"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477497567, 'comment_body': '> what if there are too many arguments before the square bracket then we can not be able to what you suggested, the same case for other examples you have given. right?\r\n\r\nIf there are too many arguments before square bracket and they can fit on one line then you can still break after `[` but fi the two may args before `[` are in multiline then you have to do the break after `(` of the function call!\r\n\r\n> the same case for other examples you have given. right?\r\n\r\nCan you please explain this?', 'comment_created': datetime.datetime(2020, 8, 26, 18, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477498663, 'comment_body': ""Why the lint didn't catch this issue? (Just wanted to check!)"", 'comment_created': datetime.datetime(2020, 8, 26, 18, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477499544, 'comment_body': '> If there are too many arguments before square bracket and they can fit on one line then you can still break after [ but fi the two may args before [ are in multiline then you have to do the break after ( of the function call!\r\n\r\nThe check I implemented allows the pattern you are suggesting, there will be no error on your suggested code.', 'comment_created': datetime.datetime(2020, 8, 26, 18, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477500020, 'comment_body': ""Why? We use anonymous function everywhere in the codebase, why it's failing just here?"", 'comment_created': datetime.datetime(2020, 8, 26, 18, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477500306, 'comment_body': 'This is a string, eslint allow these types of indentation for strings.', 'comment_created': datetime.datetime(2020, 8, 26, 18, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477501709, 'comment_body': 'Oh, sorry I misunderstood your comment, I was thinking that you want me to remove `function`. Fixed now.', 'comment_created': datetime.datetime(2020, 8, 26, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478261542, 'comment_body': ' scripts/linters/custom_eslint_checks/rules/break-after-parens.js \r\n scripts/linters/custom_eslint_checks/rules/break-after-parens.spec.js ', 'comment_created': datetime.datetime(2020, 8, 27, 8, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478263752, 'comment_body': 'Try not to have a second package.json file if possible.', 'comment_created': datetime.datetime(2020, 8, 27, 8, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478945170, 'comment_body': '```\r\nsomeFunction(parame1, param2, [\r\n   <list of items>],\r\n   Param4, param5)\r\n```\r\n\r\n@seanlip I and @DubeySandeep are having a confusion about this case, so just want to confirm with you if the above example is a valid case or an invalid case for break after a bracket.\r\n\r\nAlso, please consider if there is a `(` or `{` after 2nd argument, if that is a valid case or not?', 'comment_created': datetime.datetime(2020, 8, 28, 8, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478949129, 'comment_body': '```\r\nsomeFunction(parame1, param2, [\r\n   <list of items>\r\n], Param4, param5)\r\n```\r\n\r\nwould be the preferred approach. The idea is to have the indentation level match for both ""["" and ""]"".\r\n\r\nThe same holds for ( and {. In general there is no difference between how we treat the three types of ""brackets"".\r\n\r\nDoes this answer your question?', 'comment_created': datetime.datetime(2020, 8, 28, 8, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478952192, 'comment_body': '@seanlip Yes, It answers the question, thanks for the confirmation.', 'comment_created': datetime.datetime(2020, 8, 28, 8, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479373286, 'comment_body': 'Changed to the recommended directory structure and removed second package.json', 'comment_created': datetime.datetime(2020, 8, 28, 15, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479678732, 'comment_body': 'End with `.`', 'comment_created': datetime.datetime(2020, 8, 29, 18, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479678856, 'comment_body': 'Do we still need this?', 'comment_created': datetime.datetime(2020, 8, 29, 18, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479679104, 'comment_body': 'These checks only work where a newline is required after `(`, right? (Just wanted to confirm else this message can be misleading!)', 'comment_created': datetime.datetime(2020, 8, 29, 18, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479679123, 'comment_body': 'Add newline above*', 'comment_created': datetime.datetime(2020, 8, 29, 18, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479679192, 'comment_body': 'Update this comment as per new dir structure*', 'comment_created': datetime.datetime(2020, 8, 29, 18, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479680200, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 29, 19, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479680209, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 29, 19, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479680213, 'comment_body': 'Right', 'comment_created': datetime.datetime(2020, 8, 29, 19, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479680226, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 29, 19, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479680230, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 29, 19, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '51df0ea677f9f28ab02dea2290593c5ac03709ae', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b21d46237296693cd1ef9b3215e6723b82fed5f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa435f7730bc1ba3e96367cc72058f8cbf7d94f1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cbe07cacf6e61e3ece8b7cd3f24c71ff8bd60a6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '052c9700047d04901df7e7474e0a12a8a8e7f2ad', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c707132fbc15dc57cc71690c210bdfae0dd695b4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c490f8f7c9cb8f8d3672513fb08c492ce0e0f9b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d77e2426b9bd1debc6d444b763397c120ac6aff', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '186e7217ab4a22257ca1ce9490cb5ab987d7b924', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcff0cf9b968a736cfcb516123f1db2866fc979c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce51b2c67e68d66e9d3ad0e370419c30de773041', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ddf0a5497762f6ece4668e7477df3fef0091d30', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ae14621633a7058e9d53a8f5d217e6f5ebff16b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b67358ab0cae87dc9c6af97f76a64e84666cac2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e2bbd9a2ead227e2e125f7ba5f2f3a4f728262', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89bd870d366413eb52dd4df8f77edacc1b2cf2fb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2a8c74e6a1975013f605b501601488ec0cedaa', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61e31a05bf0e46e12e0212d3a0403f80304ad535', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '697c7a3b8b6f07a19d1efa0957a2742c295c11ab', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b78d3074aaf0a1a6f00a9dcc8eb7048d34d8fdbc', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a8b99d2b23e89f3f01d22e733f104f87d238833', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d57593e53bff7c112093284aa042c4ee90048be', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c94ea26afa35225e2b700d0f529f881917245d4c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90fb4d2ac94dbda29fc4bf7a5730ff22ecee38d6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30f647eb3377e399c8f1ff0d8b3c3773d64bc17a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5118cb5b6b1d8002c81ba0af6549acaaecfdfe21', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '996ff068a9ddbfe77bb05bf0ac5700231810dbc7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fce55da0c763fc328be0bfbbe893ff5d51d44338', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92244a1160c377619ee06b66ff38502d9f053300', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7229758bea1fbab20e4f32ea29349cef8b1b00', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb9d25824f375061ec06d3baf190a5db922bca3e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ed9036af6e10459e14f22558322cae7e3a29846', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ee92dc8004a2d5c9b5f86d7afc8efd404d5659', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0157cda06f34ff545dfb91d89517084f8099a1b4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982cbf0da49c1948ffdb870a5167cd0b2d5e7ab8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043c308b48eac38c4f9066960b54a4d71c4f58eb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5e5b1f2e554aa74d9750664de8dcdd88ad175ef', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d48b97b1ac20c123f5b80c79fc2706b17e8e9ab', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f90b9dc66b93314bc34d5d20d5cc8e9ed864566', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94be1d5aa5bb9e3827b0edc6c8204b8da0de17fd', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '204304570965b4ac5ae5e4f59a168824de3171af', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f7e31a320d3c459df651c8661effed82908f66', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64abaf8d43c5771088833d25b4433a6a6270427c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13c51eb5f3641eb4130737d29d7aba6955dd4bab', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cdb8f07af95e8390ac4221e0ea0ab9c170db7cf', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7089acf174f07779758ed11cf98a10045566da45', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6acbd8e57bb8003b6ac8fe9ac9b17b90b08f4465', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16712d72033faa937c310c64ac0c67c80fdce1f5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3891e9abd518ccb9638bf808cec8e168486d3400', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a9727b266e4262b21ccd4d063e0845ee4be82af', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6be1da427ae089598f2db074f2cf9cd625846c3f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db2cc7e8aa345f0a2af50078d443e111f204d8dd', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b7a61e629612bba31ce1d5cf6de31ad07cf6e04', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ba1be4dc774d6c38dc1195f4037e6b1e1ff52cf', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
469648583,Migrated BlankLineBelowFileoverview from IRawChecker to IAstroidChecker,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: Used IAstroidChecker instead of IRawChecker for fileoverviewchecker

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10376,https://api.github.com/repos/oppia/oppia/pulls/10376,https://github.com/oppia/oppia/pull/10376,closed,47,47,2,4,8,8,1,1,[{'name': 'PR: LGTM'}],2020-08-18 17:51:52+00:00,2020-08-25 00:50:31+00:00,543519.0,"6 days, 6:58:39","[{'comment_id': 472416393, 'comment_body': 'This check is weird. Why do we have a check testing `""""""` or `""`? The first one would be automatically covered in the later part.\r\n\r\nAlso, what if we have a string that gets captured by this check and is not a docstring?', 'comment_created': datetime.datetime(2020, 8, 18, 19, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 472720513, 'comment_body': ""Why not use node.doc to find the number of lines in a docstring (docstring_lines) and then check `node.fromlineno + docstring_lines`? Will that be simpler? OR that's not possible?\r\n\r\nEDIT: I don't think node.fileno will return the line number of the docstring*\r\n\r\nalso, using linenumber of the first child node in the model can be helpful?"", 'comment_created': datetime.datetime(2020, 8, 19, 5, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 472726054, 'comment_body': 'This looks good, see if we can find better way to find the line number of completion of docstring!', 'comment_created': datetime.datetime(2020, 8, 19, 5, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 473289397, 'comment_body': ""doc is not a node so we can't find the docstring line number directly, but there's an another way but I'm not sure about that -- we can get the line number of first import statement and then we can check if there is only one blank line above it. What do you think?"", 'comment_created': datetime.datetime(2020, 8, 19, 20, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473291455, 'comment_body': ""No we can't as this is not a node."", 'comment_created': datetime.datetime(2020, 8, 19, 20, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473292110, 'comment_body': 'Done. No the string will not be captured by this, because there is nothing above file overview except comments.', 'comment_created': datetime.datetime(2020, 8, 19, 20, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 473561524, 'comment_body': ""hmmm.. that won't work if someone has added some code tO add python path for the third party imports, right? Can you please check whether we can make it simple using first child node of the module? (Else let's keep it as is!)"", 'comment_created': datetime.datetime(2020, 8, 20, 3, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 474749391, 'comment_body': ""@DubeySandeep first child node is import node and as you suggested there might be maybe many complications in using that, I tried finding another way but didn't find a way to do this by any other method."", 'comment_created': datetime.datetime(2020, 8, 21, 14, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '1e5ad05f20c8cee54f0f1dfd42dfd3aafd83edb4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db7fac329b4398ac33ab72041430caf81f5473b7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '359c4039e5431be4a799a7b90b0f6bef00fafd80', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eae33b86055a98977e9165427d378e05440e23d1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
466743501,Used pycodestyle instead of custom pylint check,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: Implement check to check for excessive lines anywhere in the file

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10292,https://api.github.com/repos/oppia/oppia/pulls/10292,https://github.com/oppia/oppia/pull/10292,closed,1,266,67,4,10,3,1,1,[{'name': 'PR: LGTM'}],2020-08-12 12:37:12+00:00,2020-08-16 06:24:23+00:00,323231.0,"3 days, 17:47:11","[{'comment_id': 469662371, 'comment_body': 'Are we expecting to have two newlines between two class defination?', 'comment_created': datetime.datetime(2020, 8, 13, 2, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 469739459, 'comment_body': ""No, as these classes are nested, so we don't need two newlines here. This is similar to functions if they are inside a class we need a single line between them and if they are not inside a class, we need two newlines between them."", 'comment_created': datetime.datetime(2020, 8, 13, 7, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 470846570, 'comment_body': 'Awesome, thanks for the explanation!', 'comment_created': datetime.datetime(2020, 8, 14, 20, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}]","[{'commit_sha': 'e94202ac31698ca624e5359e32bdd935055ab5b3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96f4321498f49cc5c2f86fe9e80f2732f9225d9a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b7b1f71150affdb00d7fbb7181a26fca683c94b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bfcc064561776ca336586d2a72e8c81ed4ba85a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
466878038,Fix part of #8423: Added lint check to check for any extra space in parenthesis,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423
2. This PR does the following: [Checks space after '(' and before ')'

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10295,https://api.github.com/repos/oppia/oppia/pulls/10295,https://github.com/oppia/oppia/pull/10295,closed,18,14,14,3,4,0,0,1,[],2020-08-12 16:24:13+00:00,2020-08-14 18:01:05+00:00,178612.0,"2 days, 1:36:52",[],"[{'commit_sha': 'bd867b990c94865deaa4fd57b425f552286bab8b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'deb09b3f00ef8519fb0196c2e3083d606e9def80', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2cf0e9320940b644e28b10ea3e7f49eba0d53fb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
466873216,Fix part of #8423: Added a lint check to ensure a space after semicolon,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423
2. This PR does the following: [Checks if there is a space after the semicolon

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10294,https://api.github.com/repos/oppia/oppia/pulls/10294,https://github.com/oppia/oppia/pull/10294,closed,1,0,1,2,3,3,0,1,[],2020-08-12 16:15:19+00:00,2020-08-14 18:03:01+00:00,179262.0,"2 days, 1:47:42","[{'comment_id': 470636192, 'comment_body': 'We do not have any errors with this in our codebase? ', 'comment_created': datetime.datetime(2020, 8, 14, 13, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 470708425, 'comment_body': 'No, we do not have any errors. Further checked if check is working correctly by introducing an error and it caught that successfully.', 'comment_created': datetime.datetime(2020, 8, 14, 15, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 470775001, 'comment_body': 'That is great!', 'comment_created': datetime.datetime(2020, 8, 14, 18, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}]","[{'commit_sha': 'd5dbe5f1dc750bc95011d4de6808513f93575251', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b59a7d550728d547bffc566998be34c544bbd7db', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
470025119,Fix #10383: Migrated comment checker to ITokenChecker,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: Migrated comment checker to ITokenChecker

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10383,https://api.github.com/repos/oppia/oppia/pulls/10383,https://github.com/oppia/oppia/pull/10383,closed,135,113,3,23,12,75,1,1,[{'name': 'PR: LGTM'}],2020-08-19 09:04:08+00:00,2020-09-03 17:16:01+00:00,1325513.0,"15 days, 8:11:53","[{'comment_id': 473960450, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 8, 20, 13, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 474751852, 'comment_body': 'Before, we were checking the whole comment for the excluded phrase, but now we are just checking the first word and first word in this type of comment will be coding.\r\n\r\nExample: `# coding: utf:8`', 'comment_created': datetime.datetime(2020, 8, 21, 14, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475036026, 'comment_body': 'create `_check_space_at_beginning_of_comment` and move these code there*', 'comment_created': datetime.datetime(2020, 8, 22, 2, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475036209, 'comment_body': 'Move this to _check_no_capital_letter_at_beginning*', 'comment_created': datetime.datetime(2020, 8, 22, 2, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475231998, 'comment_body': 'Can we move this to the .pylintrc file as an option to configure the linter? (This will help us to have all the configurations in one place and easier for anyone to add/remove.)', 'comment_created': datetime.datetime(2020, 8, 23, 15, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475233841, 'comment_body': '`split_line` sounds like a function name (Starts with a verb).\r\n\r\nShould we do this maybe:\r\non line 1681:\r\n```\r\ncomment = line[1:].strip()\r\n\r\nAnd later do:\r\n\r\ncomment.startswith(word) for phrase in  EXCLUDED_PHRASES\r\n\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 23, 15, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475267831, 'comment_body': 'Why we need this?', 'comment_created': datetime.datetime(2020, 8, 23, 21, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475267896, 'comment_body': 'When do we expect to have the previous line > 1?', 'comment_created': datetime.datetime(2020, 8, 23, 21, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475268067, 'comment_body': ""Why are we checking punctuations in previous line? I'm finding it complicated to understand the structure of the code! :( Can you please explain the basic structure?"", 'comment_created': datetime.datetime(2020, 8, 23, 21, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 475830434, 'comment_body': ""I've checked we can't move it to .pylintrc. It didn't worked there."", 'comment_created': datetime.datetime(2020, 8, 24, 19, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475834570, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 24, 19, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475836088, 'comment_body': 'There are some comments at the beginning of the file that have just hash character.\r\n\r\nExample: \r\n```\r\n# coding: utf-8\r\n#\r\n# Copyright 2018 The Oppia Authors. All Rights Reserved.\r\n#\r\n# Licensed under the Apache License, Version 2.0 (the ""License"");\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475836521, 'comment_body': 'to check for `pylint` at the beginning of comment, we do not use a period in that case.', 'comment_created': datetime.datetime(2020, 8, 24, 19, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475837596, 'comment_body': 'We are only checking the first and the last line of a comment block. So we get to the starting of a new comment block, we have to check if the last line ended with proper punctuation.\r\n\r\nExample:\r\n```\r\n# Comment.\r\n\r\n# Comment.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 19, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475842891, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 24, 19, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 475845664, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 24, 19, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476551863, 'comment_body': '> I\'ve checked\r\n\r\nI\'m not sure what you have checked! Can you please share the doc where it\'s written ""we can\'t move it to .pylintrc.""?\r\n\r\nHow does we configure other checkers using the .pylintrc file?', 'comment_created': datetime.datetime(2020, 8, 25, 15, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476556440, 'comment_body': ""If only the first and last line matters, then do you think this structure will be more readable and clear:\r\n\r\n```\r\nCreate a list of (one-line and multiline) comments in the file\r\nusing the token: [[online-comment-token],\r\n[1st-linecomment-token, 2nd-line-comment-token], ...]\r\n\r\nFor each comments:\r\n   Do all the required checks.\r\n   _check_somethin(comment)\r\n   _check_another_something(comment)\r\n```\r\n\r\nDo you think this will be more clear and readable? i.e, we won't have to create lots of variables to track the previous line and the previous line comments? what do you think?"", 'comment_created': datetime.datetime(2020, 8, 25, 15, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476557745, 'comment_body': ""Move this to the top as it's validating the first part of the comments and it will make it readable!"", 'comment_created': datetime.datetime(2020, 8, 25, 15, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476558853, 'comment_body': 'Can we move this to the configuration file (.pylintrc)? ', 'comment_created': datetime.datetime(2020, 8, 25, 15, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477191932, 'comment_body': 'You can check here, .pylintrc file is used to configure properties not for adding variables or constants to it.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477203936, 'comment_body': 'I think it will make it more complicated, as we have to separate single-line comments and multiline comments then and then run checks on those comments.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477207654, 'comment_body': ""Can't move it above then it will check if comment for a capital letter. We have to keep it here so that other validations are done first and this check is done at last."", 'comment_created': datetime.datetime(2020, 8, 26, 10, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477208531, 'comment_body': ""Can't move this to .pylintrc as that file only contains properties not variables or constants."", 'comment_created': datetime.datetime(2020, 8, 26, 10, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 477453677, 'comment_body': 'Yeah, we are configuring the linter here. How do we have max-len=80, regex-patterns for function name etc? I think there must be some way to do it. \r\n\r\nThis is important because it will allow us to re-use these custorm_linters in other oppia projects. We just have to change the .pylintrc file!', 'comment_created': datetime.datetime(2020, 8, 26, 17, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477456037, 'comment_body': ""We have lots of variables to update and compute here (like prev_line, prev_line_no etc.) and it's throughout this function. \r\n\r\n> as we have to separate single-line comments and multiline comments then and then run checks on those comments.\r\n\r\nWe will just do it once on top and we don't have to trace previous line related things. Once the comments token variable is ready we just have to focus on each comment. Let me know what you think?"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477457034, 'comment_body': ""> Can't move it above then it will check if comment for a capital letter.\r\n\r\nI'm not sure what's the issue with this, I think I didn't get it, can you please rephrase this?"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 477457564, 'comment_body': ""I think you can do this I've left some hint in the below comment PTAL!"", 'comment_created': datetime.datetime(2020, 8, 26, 17, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479298753, 'comment_body': ""I've changed the method."", 'comment_created': datetime.datetime(2020, 8, 28, 13, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479300446, 'comment_body': 'No longer using it here.', 'comment_created': datetime.datetime(2020, 8, 28, 13, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479317200, 'comment_body': ""I tried but didn't find the option for type: list option. Can you  help me here?"", 'comment_created': datetime.datetime(2020, 8, 28, 13, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479642813, 'comment_body': 'I appended line_num and line here instead of token because token is not available at this point, see line 1734.', 'comment_created': datetime.datetime(2020, 8, 29, 12, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479716785, 'comment_body': 'Marking this resolved (As per our offline discussions!)', 'comment_created': datetime.datetime(2020, 8, 30, 3, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479716836, 'comment_body': 'the default should be empty list*', 'comment_created': datetime.datetime(2020, 8, 30, 3, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479716961, 'comment_body': 'Are we expecting to check space at the beginning of each comment?', 'comment_created': datetime.datetime(2020, 8, 30, 3, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479717152, 'comment_body': 'Line 1734 is an empty line! Maybe you can try explaining it? (Though correct line number will also be very helpful)', 'comment_created': datetime.datetime(2020, 8, 30, 3, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479717226, 'comment_body': ""I think we had thought of doing:\r\n\r\n```\r\nif token_type != tokenize.COMMENT or not line.startswith('#'):\r\n    continue\r\n```\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 30, 3, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479717525, 'comment_body': 'Good work on simplifying this driver function!', 'comment_created': datetime.datetime(2020, 8, 30, 3, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479717564, 'comment_body': 'Why is this check needed?', 'comment_created': datetime.datetime(2020, 8, 30, 3, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480058774, 'comment_body': ""If I leave the list empty here, then tests won't pass, as while testing it does not load configuration from pylint. I've tested it by printing the `self.config.allowed_comment_prefix`. It prints an empty list while testing. But if I run linter normally, all configuration was loaded and full list print."", 'comment_created': datetime.datetime(2020, 8, 31, 11, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480059301, 'comment_body': 'Sorry, I mistyped, the line was 1742.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480063476, 'comment_body': 'This approach has a problem because there are other types of tokens also like newline, they will be processed also if I use this line. But I tried to do it similarly PTAL!', 'comment_created': datetime.datetime(2020, 8, 31, 11, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480065191, 'comment_body': 'We needed to check if the comment is properly formatted, only then we apply other checks to that comment. Like it should not be like this, `#`, `#sldkf`.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480069572, 'comment_body': 'Fixed the check.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480069776, 'comment_body': 'Thanks :)', 'comment_created': datetime.datetime(2020, 8, 31, 11, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480360295, 'comment_body': 'As per offline discussion @Hudda is going to resolve this comment!', 'comment_created': datetime.datetime(2020, 8, 31, 19, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480361158, 'comment_body': 'Create `_check_space_at_beginning_of_comments` and avoid Duplicate codes!', 'comment_created': datetime.datetime(2020, 8, 31, 19, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480361729, 'comment_body': 'Avoid these checks! (Pass lastComment token to `_check_punctuation` function)', 'comment_created': datetime.datetime(2020, 8, 31, 19, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480362310, 'comment_body': 'These checks are not required! (As per offline discussion)', 'comment_created': datetime.datetime(2020, 8, 31, 19, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480364483, 'comment_body': '```suggestion\r\n        for token_info in tokens:\r\n```\r\n\r\nMaybe use this and append tokens in the list*', 'comment_created': datetime.datetime(2020, 8, 31, 19, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480364677, 'comment_body': 'List(Token). ....*', 'comment_created': datetime.datetime(2020, 8, 31, 19, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480366921, 'comment_body': '_check_comment_starts_with_capital_letter', 'comment_created': datetime.datetime(2020, 8, 31, 20, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480368791, 'comment_body': 'Maybe `[a-z].*`', 'comment_created': datetime.datetime(2020, 8, 31, 20, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480369090, 'comment_body': 'starts_with_underscore*', 'comment_created': datetime.datetime(2020, 8, 31, 20, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480370251, 'comment_body': '`excluded_phrase_is_present`', 'comment_created': datetime.datetime(2020, 8, 31, 20, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481318868, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 17, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481319712, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 17, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481320896, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 17, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481321263, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 17, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481321512, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 17, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481959877, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 10, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481959981, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 10, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481960045, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 10, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481960890, 'comment_body': 'tokens is a tuple here, We still have to unpack tokens at a later stage that too multiple times so I find it to unpack these here.', 'comment_created': datetime.datetime(2020, 9, 2, 10, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482356435, 'comment_body': 'Remove extra `g` at the end!', 'comment_created': datetime.datetime(2020, 9, 2, 19, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482365233, 'comment_body': 'As per offline discussion, we are going to use ste_config decorator to set the config options for testing*', 'comment_created': datetime.datetime(2020, 9, 2, 19, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482366784, 'comment_body': 'Check what will happen if there are two spaces at the beginning!', 'comment_created': datetime.datetime(2020, 9, 2, 19, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482379587, 'comment_body': '```suggestion\r\n        for comments in comments_group_list:\r\n```', 'comment_created': datetime.datetime(2020, 9, 2, 19, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482381462, 'comment_body': '```suggestion\r\n            # Checking first line of the comment starts with capital letter.\r\n            self._check_comment_starts_with_capital_letter(*comments[0])\r\n```\r\n\r\nDitto below*', 'comment_created': datetime.datetime(2020, 9, 2, 20, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482760949, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 3, 7, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482765688, 'comment_body': 'It is not checking if there are two spaces. Actually we are using multiple spaces at several places, so I am not sure if we want this check. Ex: https://github.com/oppia/oppia/blob/3064a03bf2fdbb0b55bc0451c4a8b939f36c7584/scripts/linters/python_linter.py#L9', 'comment_created': datetime.datetime(2020, 9, 3, 7, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482776006, 'comment_body': ""set_config do not work with `unittest.TestCase` which we are using to run tests. It is compatible with `testutils.CheckerTestCase`.  I don't think we can use it for now."", 'comment_created': datetime.datetime(2020, 9, 3, 7, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482778689, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 3, 7, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482778743, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 3, 7, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483102544, 'comment_body': 'Thanks for checking, LGTM!', 'comment_created': datetime.datetime(2020, 9, 3, 16, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}]","[{'commit_sha': '16aefa86e628d26e6d9ecaf94b7a84cce8ec5c5e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '420a80cea20e4ae5ccf6e235080b425f48186464', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76e44dee907ad532bf0b19b5f63b936528f9489a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a68020363e43527765618b90ea2952ed2f9da5a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '935593c1996814fa6ca1a8672e78d1acfac6c44f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60155ac26087e4321dcc7a6136f0f9314690f6f4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e364ffd793bf77f3c62461d41a190c007a137c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e0fa9db9dce2c603c9a660632f8b2477bde313', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6413ed21214e1b924d9bdb76e327c6716f857608', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be340e85130965efac1cfa30731a292ff68bafd6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94fa58bae8a0e4b9220b11e5d34e38030114acfd', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b59d9d626fb7220ad2eec9c72c4d27725290dd68', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8bd66ff354db97ad610e78407159d0a852cc86', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fa66d9150ef0a7ebb0442fecae43850c55eab83', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2819b77a9aa2188cdd0fc5380f9f492a054c3c9e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27563ea34f55a81a9830804b07715ebc7adc9025', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20cc840947e00a9aa29a11cd2833333455caf7d3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '112b126b587812f8fff1b56098acffbcef4ceabd', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab29936755cd085361de3fcedf6e30cedc9a4280', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '000b748b9d96d11853de2e35927ede9c0e01b8c6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9bf92a2db47b1710de4ba4a7eb22edbd85f79e8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25c3f6143943c066769da513946328864e88537b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f258cb22b8c66e012d1c09f864839ff6516de815', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
472677954,Removed inline styling,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

~~1. This PR fixes or fixes part of #[fill_in_number_here].~~
2. This PR does the following: Remove inline styling

**[Link ](https://docs.google.com/document/d/1u_bsd6e2SBy-bPG3SqenTuJbcbiolLYXl6Y1HErc7EM/edit?usp=sharing)to the screenshots**

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10430,https://api.github.com/repos/oppia/oppia/pulls/10430,https://github.com/oppia/oppia/pull/10430,closed,1088,733,50,20,9,62,0,1,[],2020-08-24 18:01:41+00:00,2020-09-02 19:10:47+00:00,781746.0,"9 days, 1:09:06","[{'comment_id': 475933711, 'comment_body': 'I don\'t think it\'s appropriate to call the contents of this an ""rte component"" -- it looks more like the form for editing the customization arg specs of an RTE component. Please pick a better name.', 'comment_created': datetime.datetime(2020, 8, 24, 22, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475934015, 'comment_body': 'Similarly, this (conceptually) contains the editor for a customization arg, and not just the schema-based editor, so the class name seems a bit ""off"" here as well.', 'comment_created': datetime.datetime(2020, 8, 24, 22, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 475934260, 'comment_body': 'Remember that, in each class, some kind of prefix is needed so that the classes don\'t ""spill out"" to other directives/components.', 'comment_created': datetime.datetime(2020, 8, 24, 22, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476208536, 'comment_body': ""I don't think this will do. Does it actually work? You might need to use ng-style instead. /cc @srijanreddy98 "", 'comment_created': datetime.datetime(2020, 8, 25, 6, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476208592, 'comment_body': 'Ditto here and below.', 'comment_created': datetime.datetime(2020, 8, 25, 6, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476209044, 'comment_body': ""Why is this added here? Shouldn't it be in its corresponding directive?"", 'comment_created': datetime.datetime(2020, 8, 25, 6, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476209508, 'comment_body': ""No, don't use !important. Use a more specific CSS selector if you need to."", 'comment_created': datetime.datetime(2020, 8, 25, 6, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 476303233, 'comment_body': '```suggestion\r\n      <div class=""oppia-form-error oppia-form-error-text"" \r\n           ng-if=""invalidImageWarningIsShown"" \r\n           translate=""I18N_PREFERENCES_PROFILE_PICTURE_ERROR"">\r\n      </div>\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476304043, 'comment_body': '```suggestion\r\n          <iframe title=""Meet Oppia\'s Contributors"" \r\n                  width=""100%""\r\n                  height=""100%"" \r\n                  src=""https://www.youtube.com/embed/OConyxG7HaM?rel=0&cc_lang_pref=en&cc_load_policy=1""\r\n                  frameborder=""0"" \r\n                  allowfullscreen\r\n                  class=""position-absolute w-100 h-100 oppia-meet-contributors-iframe"">\r\n          </iframe>\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476304457, 'comment_body': '```suggestion\r\n    <button class=""btn btn-success protractor-test-photo-upload-submit"" \r\n            ng-click=""confirm()""\r\n            ng-disabled=""!uploadedImage"" \r\n            translate=""I18N_PREFERENCES_PROFILE_PICTURE_ADD"">\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476304618, 'comment_body': '```suggestion\r\n          <div class=""oppia-editable-section oppia-profile-picture-container"" \r\n               title=""<[\'I18N_PREFERENCES_CHANGE_PICTURE\' | translate]>"">\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476304966, 'comment_body': '```suggestion\r\n        <span class=""form-text oppia-form-text"" \r\n              translate=""I18N_PREFERENCES_SUBJECT_INTERESTS_HELP_BLOCK""></span>\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476305299, 'comment_body': '```suggestion\r\n        <span class=""form-text oppia-form-text"" \r\n              translate=""I18N_PREFERENCES_PREFERRED_EXPLORATION_LANGUAGE_EXPLAIN"">\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476305590, 'comment_body': '```suggestion\r\n        <span class=""form-text oppia-form-text"" \r\n              translate=""I18N_PREFERENCES_PREFERRED_SITE_LANGUAGE_EXPLAIN"">\r\n        </span>\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476305771, 'comment_body': '```suggestion\r\n        <span class=""form-text oppia-form-text"" \r\n              translate=""I18N_PREFERENCES_PREFERRED_AUDIO_LANGUAGE_EXPLAIN"">\r\n        </span>\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 9, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 476584850, 'comment_body': 'Changed the name.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476584916, 'comment_body': 'Changed the name.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476587123, 'comment_body': 'Added the prefix.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 476688908, 'comment_body': 'Please use ng-style. Ditto below.', 'comment_created': datetime.datetime(2020, 8, 25, 19, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 476765379, 'comment_body': 'Why this change?', 'comment_created': datetime.datetime(2020, 8, 25, 21, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ankita240796', 'type': 'User'}, {'comment_id': 476787645, 'comment_body': 'whether ml-0 works here?', 'comment_created': datetime.datetime(2020, 8, 25, 22, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476793025, 'comment_body': 'Use #fff*', 'comment_created': datetime.datetime(2020, 8, 25, 22, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476793398, 'comment_body': 'Add tag name in the beginning!', 'comment_created': datetime.datetime(2020, 8, 25, 22, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476793682, 'comment_body': 'ml-0 will work here?', 'comment_created': datetime.datetime(2020, 8, 25, 22, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476794793, 'comment_body': 'ANy specific reason for using extra div container? (For finding elements can we use the directive/tag-name?)', 'comment_created': datetime.datetime(2020, 8, 25, 22, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 476795417, 'comment_body': 'Avoid using `important`, as suggested [in the wiki page](https://github.com/oppia/oppia/wiki/Coding-style-guide#css).', 'comment_created': datetime.datetime(2020, 8, 25, 22, 21, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 478172017, 'comment_body': 'It is required to used directive or component before a class so that the properties of this file do not leak to other files.', 'comment_created': datetime.datetime(2020, 8, 27, 6, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478191553, 'comment_body': 'Changed.\r\n', 'comment_created': datetime.datetime(2020, 8, 27, 6, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478191610, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 6, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478202188, 'comment_body': 'I was under impression that this might be used at several places, but moved to corresponding directive as it is just used here.', 'comment_created': datetime.datetime(2020, 8, 27, 7, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478379007, 'comment_body': 'Changed to ml-0', 'comment_created': datetime.datetime(2020, 8, 27, 12, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478381077, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478382232, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478382593, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478384953, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478394058, 'comment_body': 'Changed to id', 'comment_created': datetime.datetime(2020, 8, 27, 12, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478395125, 'comment_body': 'Used id.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478397208, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478397781, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478398710, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478399219, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478399446, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478399742, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 12, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478400159, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478400364, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 478419389, 'comment_body': 'arg-customization --> customization-arg', 'comment_created': datetime.datetime(2020, 8, 27, 13, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478420030, 'comment_body': 'Why not call this oppia-background-banner? It is a better description -- this should be a noun that describes the thing, not a ""position"".', 'comment_created': datetime.datetime(2020, 8, 27, 13, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478420786, 'comment_body': 'Why are you using id? We try not to do this since it is hard to guarantee a single id per page.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478421569, 'comment_body': 'Here and elsewhere, do not use ID (or !Important). As mentioned, use a specific CSS selector if necessary, so that the appropriate rule gets triggered based on the CSS specificity rules. You may need to read up on how CSS selection works.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478421983, 'comment_body': 'Drop the id.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 478448315, 'comment_body': ""Sean has suggested a way to avoid using id: [comment link](https://github.com/oppia/oppia/pull/10430#discussion_r478421569)\r\n\r\nYou can follow that comment and remove the `id` attribute. [I'll approve this PR once it's done as other codeowner files LGTM!] "", 'comment_created': datetime.datetime(2020, 8, 27, 14, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479530670, 'comment_body': 'Use #666, we use only three values if the values are repetetive since they mean the same.', 'comment_created': datetime.datetime(2020, 8, 28, 20, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Showtim3', 'type': 'User'}, {'comment_id': 479530713, 'comment_body': 'We only use hex so do #000', 'comment_created': datetime.datetime(2020, 8, 28, 20, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Showtim3', 'type': 'User'}, {'comment_id': 479530794, 'comment_body': 'Use #FFF', 'comment_created': datetime.datetime(2020, 8, 28, 20, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Showtim3', 'type': 'User'}, {'comment_id': 481926566, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481927031, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481930770, 'comment_body': 'Removed id', 'comment_created': datetime.datetime(2020, 9, 2, 9, 25, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481931319, 'comment_body': 'Removed id.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481934151, 'comment_body': 'removed id.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481934524, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481934932, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481935160, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': '4559b7d76d4345f8a3d11febe4130775994e1f66', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ccecf5556a61d85d248012293c68ed0a8b855fc', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b3270480038e1c7f47e199542576214e41d66d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a221364f4d665084c387cf58770c75d306476dcf', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e32460f3966942483ea0c980f0dd1dc9b08e216', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f75592b75009a288eb15cced095c396610bb9b8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63a3131b31a5536e4c1623a4bb1653681b6870e2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eda0dd1f053dac17fd0601879286184d96c52b3c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74db0eb589d4a6c39dfc5cc2adb23a9f723c1560', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02be528af219ac3d2e82a32ca6f319e5004f6f78', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f19553d672a51f5c11107323a611061f75e00cb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c6dfa271aa9c7658c80d077ba41740a75208611', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70915747b1e84e5aac725b80451d21062edf8323', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbd74750c636f5b65d1883c7a59a58f09444e117', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef266d766d694b274291e8556cbb85010a27182d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98eae8e40e8b86cc8563069231dbf01454e04a05', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '032e3284a66ea6a7e0032843cbcedd310644c92c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '661ac704ce4b578cf98d6dffdae895919818804f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c12975f223dd77e408760188a7d0e484853d7579', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15171213d510373a5fc8d3c771840fcbad5c475c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
472986013,Fixed part of #8423: Added lint check to check for unused variables ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Add lint check to check for unused variables.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10441,https://api.github.com/repos/oppia/oppia/pulls/10441,https://github.com/oppia/oppia/pull/10441,closed,49,724,169,40,19,71,1,1,[{'name': 'PR: LGTM'}],2020-08-25 06:53:18+00:00,2020-09-04 16:11:36+00:00,897498.0,"10 days, 9:18:18","[{'comment_id': 479612812, 'comment_body': 'Oh, is this plugin checking unwanted imports too? \r\n\r\nOr have you removed the variables below and then checked these imports are not needed?', 'comment_created': datetime.datetime(2020, 8, 29, 5, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 479613091, 'comment_body': 'If we do not need the UrlInterpolationService, please remove it from require too above.\r\n\r\nDitto everywhere -- remove all the unneeded requires/imports when you remove the corresponding variables.', 'comment_created': datetime.datetime(2020, 8, 29, 6, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 479613147, 'comment_body': 'For example: ChangeListService is not needed here and hence its require is not needed. (Apply it everywhere)', 'comment_created': datetime.datetime(2020, 8, 29, 6, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 479613425, 'comment_body': 'The plugin also catches variables like these -- where we always assign a value to a variable and it is never used, right?', 'comment_created': datetime.datetime(2020, 8, 29, 6, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 479613479, 'comment_body': ""Why do we need this? Do we not need the below variable? If we don't need why not remove it?"", 'comment_created': datetime.datetime(2020, 8, 29, 6, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 479613524, 'comment_body': 'Can we find some other way to check it there is some property in object rather than using for loop and than adding a eslint disable statement?', 'comment_created': datetime.datetime(2020, 8, 29, 6, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 479643231, 'comment_body': 'Removed function.', 'comment_created': datetime.datetime(2020, 8, 29, 12, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479644106, 'comment_body': ""I've removed the variables below and then removed the imports."", 'comment_created': datetime.datetime(2020, 8, 29, 12, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479645036, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 29, 12, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479645280, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 29, 12, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479645406, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 29, 12, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479645471, 'comment_body': 'yes, right.', 'comment_created': datetime.datetime(2020, 8, 29, 12, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479665731, 'comment_body': ""(Again) Looks like you don't need the undo-redo service. Why haven't you removed this from the require? (Ditto for all other test files)"", 'comment_created': datetime.datetime(2020, 8, 29, 16, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 479728863, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 30, 6, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479745099, 'comment_body': ""Why we don't check args?"", 'comment_created': datetime.datetime(2020, 8, 30, 9, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 479749095, 'comment_body': 'I will enable this check in a separate PR. Thanks!', 'comment_created': datetime.datetime(2020, 8, 30, 10, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 479814076, 'comment_body': 'Make sure that we have something to track this task! (Maybe any existing github issue or a new one!)', 'comment_created': datetime.datetime(2020, 8, 30, 20, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479814299, 'comment_body': 'Is this incorrect?  Have you tested this change?', 'comment_created': datetime.datetime(2020, 8, 30, 20, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479948431, 'comment_body': 'Why do we need this?', 'comment_created': datetime.datetime(2020, 8, 31, 7, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479951900, 'comment_body': 'If we are not requiring the output of this, then we might as well remove this statement.', 'comment_created': datetime.datetime(2020, 8, 31, 7, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479952123, 'comment_body': 'If we are not requiring the output of this, then we might as well remove this statement.', 'comment_created': datetime.datetime(2020, 8, 31, 7, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479953276, 'comment_body': 'If we are not requiring the output of this, then we might as well remove this statement.', 'comment_created': datetime.datetime(2020, 8, 31, 7, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479953994, 'comment_body': 'Why remove this entirely?', 'comment_created': datetime.datetime(2020, 8, 31, 7, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479954230, 'comment_body': 'This was used in L124, right?', 'comment_created': datetime.datetime(2020, 8, 31, 7, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479956915, 'comment_body': 'Oh, actually, I think this test needs these statements. It adds a collection node, then tries to ""get"" the nodes. In L135, we then check if there were any issues when trying to ""get"" the nodes. Please add back all the `_getCollectionNode` statements. You don\'t need to assign it to a dummy variable.\r\n\r\neg.\r\n```ts\r\n_getCollectionNode(\'exp_id0\');\t\r\n_getCollectionNode(\'exp_id1\');\r\n```\r\n\r\nDitto below in this file.', 'comment_created': datetime.datetime(2020, 8, 31, 7, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479961812, 'comment_body': 'Hm, can we remove these lines as well, in that case?\r\n\r\nhttps://github.com/oppia/oppia/blob/b1ba8d11e81b968cddaaa66180f8b787e7c72372/core/templates/pages/exploration-editor-page/editor-tab/templates/modal-templates/teach-oppia-modal.controller.spec.ts#L150-L153', 'comment_created': datetime.datetime(2020, 8, 31, 7, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479962669, 'comment_body': 'Maybe we can remove ContextService from this directive too? It does not seem to be used anywhere.', 'comment_created': datetime.datetime(2020, 8, 31, 8, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479964504, 'comment_body': 'Maybe these lines can be removed too:\r\n\r\nhttps://github.com/oppia/oppia/blob/b1ba8d11e81b968cddaaa66180f8b787e7c72372/core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-data-editor-panel.service.spec.ts#L30-L35', 'comment_created': datetime.datetime(2020, 8, 31, 8, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479965028, 'comment_body': 'Can we remove these lines too?\r\n\r\nhttps://github.com/oppia/oppia/blob/b1ba8d11e81b968cddaaa66180f8b787e7c72372/core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-data.service.spec.ts#L102-L107', 'comment_created': datetime.datetime(2020, 8, 31, 8, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479965520, 'comment_body': 'Can we remove this?\r\n\r\nhttps://github.com/oppia/oppia/blob/b1ba8d11e81b968cddaaa66180f8b787e7c72372/core/templates/pages/exploration-editor-page/editor-tab/unresolved-answers-overview/unresolved-answers-overview.component.spec.ts#L56-L58', 'comment_created': datetime.datetime(2020, 8, 31, 8, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479967670, 'comment_body': ""Let's remove this as well:\r\n\r\nhttps://github.com/oppia/oppia/blob/b1ba8d11e81b968cddaaa66180f8b787e7c72372/core/templates/pages/exploration-editor-page/translation-tab/audio-translation-bar/audio-translation-bar.directive.spec.ts#L117-L120"", 'comment_created': datetime.datetime(2020, 8, 31, 8, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479970461, 'comment_body': 'Is this (code below) still relevant after this change?\r\n\r\nhttps://github.com/oppia/oppia/blob/b1ba8d11e81b968cddaaa66180f8b787e7c72372/core/templates/pages/exploration-player-page/services/exploration-player-state.service.spec.ts#L74-L84', 'comment_created': datetime.datetime(2020, 8, 31, 8, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 479971440, 'comment_body': 'Hm, then maybe we can remove the require statement for UrlInterpolationService as well.\r\n\r\nhttps://github.com/oppia/oppia/blob/b1ba8d11e81b968cddaaa66180f8b787e7c72372/core/templates/pages/exploration-player-page/services/exploration-player-state.service.ts#L29', 'comment_created': datetime.datetime(2020, 8, 31, 8, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 480075346, 'comment_body': 'We already have an existing issue for it.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480076182, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480079217, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480080161, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480081600, 'comment_body': 'Readded.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480081668, 'comment_body': 'Readded.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480082373, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 8, 31, 11, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480083241, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480084186, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480084562, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480084938, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480085608, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480085846, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480086279, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480086359, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480086382, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480087432, 'comment_body': 'I added this because it seems like the below function might be useful(not sure!)', 'comment_created': datetime.datetime(2020, 8, 31, 12, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480166865, 'comment_body': 'Thanks for the info. Can you please share the issue link here so that we can mark this thread resolved! \r\n\r\n[For this kinda comments always reply with the issue link else the review will ask for the link and it will take time to resolve a thread!]', 'comment_created': datetime.datetime(2020, 8, 31, 14, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480167235, 'comment_body': '> Have you tested this change?\r\n\r\n\r\nHave you tested the new changes?', 'comment_created': datetime.datetime(2020, 8, 31, 14, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480303258, 'comment_body': 'Yes, tests are passing now.', 'comment_created': datetime.datetime(2020, 8, 31, 18, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480303689, 'comment_body': 'This is the https://github.com/oppia/oppia/issues/8423. It is the third check under JS/TS section.', 'comment_created': datetime.datetime(2020, 8, 31, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480339022, 'comment_body': 'Should we do it this way: `Object.keys(object).length !== 0`? [For better readability]', 'comment_created': datetime.datetime(2020, 8, 31, 19, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480366120, 'comment_body': ""Yes, but I'm assuming that the linter reported some unused var(s) here. What are those?"", 'comment_created': datetime.datetime(2020, 8, 31, 19, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 480912071, 'comment_body': '_getTopicElements is the unused var here.', 'comment_created': datetime.datetime(2020, 9, 1, 7, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481284630, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 16, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482041638, 'comment_body': 'Just to check, have you verified that this interaction still works correctly, since there seem to be a lot of changes here?', 'comment_created': datetime.datetime(2020, 9, 2, 12, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 482042715, 'comment_body': 'Oh no, this is required. The errors thrown in `fromRawInputString()` function is caught by the try catch statement. Maybe the variable is not used but the function absolutely is.\r\nPlease make sure you verify all changes you do and make sure they are actually not used at all.', 'comment_created': datetime.datetime(2020, 9, 2, 12, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 482154802, 'comment_body': 'Readded it after removing the variable.', 'comment_created': datetime.datetime(2020, 9, 2, 15, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482158704, 'comment_body': 'Fixed it and other files ', 'comment_created': datetime.datetime(2020, 9, 2, 15, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482211043, 'comment_body': ""Please address the entire comment, you did not mention whether you verified all changes.\r\n\r\nIf you did not, then this PR will be inevitably rolled back. Please save the trouble for future testers, and yourself, by diligently ensuring none of this is causing breaking changes. @aks681's review suggests that this would have broken develop, so please make sure it still doesn't even with this new fix."", 'comment_created': datetime.datetime(2020, 9, 2, 16, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brianrodri', 'type': 'User'}, {'comment_id': 482267074, 'comment_body': '@brianrodri  @aks681 How should I test the changes?', 'comment_created': datetime.datetime(2020, 9, 2, 18, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482377672, 'comment_body': ""You can create a interaction with number with input interaction. Then open the learner view. If you type invalid input like 10m///s instead of 10m/s (basically units that don't exist), then an error should be shown below the text box."", 'comment_created': datetime.datetime(2020, 9, 2, 19, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 482380409, 'comment_body': ""I did not mean for you to revert these changes. Having an element.find() without any variable doesn't seem useful at all.\r\nI was just asking with your previous version (removing these  lines) that the interaction was working as expected."", 'comment_created': datetime.datetime(2020, 9, 2, 19, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 482821582, 'comment_body': ""@aks681 I've reverted the changes and tested. The error message is there as expected."", 'comment_created': datetime.datetime(2020, 9, 3, 9, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482821847, 'comment_body': 'This interaction is working the same as before removing the unused vars', 'comment_created': datetime.datetime(2020, 9, 3, 9, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482853704, 'comment_body': 'Does this line do anything without being assigned to any variable? If not, remove it.', 'comment_created': datetime.datetime(2020, 9, 3, 9, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 482859232, 'comment_body': 'Removed the line.', 'comment_created': datetime.datetime(2020, 9, 3, 9, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482860294, 'comment_body': 'Lgtm!', 'comment_created': datetime.datetime(2020, 9, 3, 10, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}]","[{'commit_sha': '03d5e210d0585a123db74b918fb9cc8f26b48a33', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2affdb576f79d95fcddde80ced526fddb3bf155f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b28f0a52079a95421a8975cbbd0be3c948541bab', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db1aac93d81715d5c44c383bfdd59787b1c0314c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0872a68c327943aea0ca88a75129c678a93337eb', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9167b345a7ab7058267e73f5bada83f7356b7fe8', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47d021b70f6be9eb8f498629c049aa8811fb02f5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00eae40e3710ff6b8e8f57a31466f6d1dfd0af04', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a365d3925cd1119ff2b40807a25e25408029b1ab', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d0c50fac7e566a8371d7e527e9ea13d36d5db94', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12135ffb57640c77e73a4cd537a818b786ee00b4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1307cf901585dd8fa83cd562603f3557d1be7703', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8893838abd6a8256aaf37df1283a9a1567e7d0c5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f7e8323315661015810454bb1a172aeb7ed790a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca12f681ee9cacc14fa374d837f45fd4b78da0f6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3197d3f5d8d5aee705f0af948c043160be3a9933', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01117fa38dde131b18449c8fef16a584e9e87bb5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47da570365ccfc2cd9e900a3b6ff10959ce76967', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1ba8d11e81b968cddaaa66180f8b787e7c72372', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caf3dfa2e460e3f33d224897258d6dcd4ff8dc61', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e9095e91081076f7aa81f2d0c37ee9ca425eafe', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaf5c564c27db217edc9120ad2a40e5d3c93aa9b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cc56b48629e7df1738a863a19b76f8efb112ecf', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8db2652c1bd3d3b57598fb11253933362722ad9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b6e83f3f0b8cebe5302758c2056729720845af6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bb56b1e2e11283307fc9fd4fbd71a89882bbb2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91ce21d6113427843e5102a90c3162885211a2e1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '014134b5710150e99535ceffd117a47477835d71', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cda04da4db437fb2916c192f4d86355097a94f7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb6c59b0f01d208ed18f842844d5a7a5cc82ad8d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9925bd6225b4af7fe88b56018a6a9925598a5b97', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35344ae6b8181a1857c210a7ba9287b62d5b1684', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29c2b759e55c5f91d87c60eb6def4adab04f3ac6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff0e218d73f5fdafc52472d8ecb60592cb82bd87', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a29c4177a06359bafb86a07b787014e1074a500', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b768553600c3d84497db519cfaeb1a58c08cd8e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f328eaee91768cbfa130907ea67c5c77a7c03f0f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd396efb6f161f28b9a2b09aec939482dacc28e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3f38e2bfadce2d6a6c6d50ca2a6ad3c860451e7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34e340f174ce02c088316dc7189ad69638e2828f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
473028552,Fix part of #8423: Added check to enusre imports are alphabetically sorted.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: Adds new custom eslint for sorted imports.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",False,10442,https://api.github.com/repos/oppia/oppia/pulls/10442,https://github.com/oppia/oppia/pull/10442,closed,4953,3864,720,12,9,9,1,1,"[{'name': ""PR: don't merge - HAS MERGE CONFLICTS""}]",2020-08-25 08:20:14+00:00,2020-09-03 18:47:20+00:00,815226.0,"9 days, 10:27:06","[{'comment_id': 479455939, 'comment_body': 'Why is this kept here?', 'comment_created': datetime.datetime(2020, 8, 28, 17, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 479461352, 'comment_body': 'Why is this together with `Subscription`?', 'comment_created': datetime.datetime(2020, 8, 28, 18, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 479462116, 'comment_body': 'Why are these here and `UrlInterpolationService` is at the top?', 'comment_created': datetime.datetime(2020, 8, 28, 18, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 480156082, 'comment_body': '@vojtechjelinek All of these are grouped in this order `[""builtin"", ""external"", ""parent"", ""sibling"", ""index""]`. You can see the configuration here (https://github.com/benmosher/eslint-plugin-import/blob/HEAD/docs/rules/order.md)', 'comment_created': datetime.datetime(2020, 8, 31, 14, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480157225, 'comment_body': '@vojtechjelinek All of these are grouped in this order [""builtin"", ""external"", ""parent"", ""sibling"", ""index""]. You can see the configuration here (https://github.com/benmosher/eslint-plugin-import/blob/HEAD/docs/rules/order.md)', 'comment_created': datetime.datetime(2020, 8, 31, 14, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480157271, 'comment_body': '@vojtechjelinek All of these are grouped in this order [""builtin"", ""external"", ""parent"", ""sibling"", ""index""]. You can see the configuration here (https://github.com/benmosher/eslint-plugin-import/blob/HEAD/docs/rules/order.md)', 'comment_created': datetime.datetime(2020, 8, 31, 14, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 480196128, 'comment_body': 'Sure but then it seems that `rxjs` should belong to builtin or external? An stuff from `services` should belong to internal.', 'comment_created': datetime.datetime(2020, 8, 31, 15, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 480196216, 'comment_body': 'Sure but then it seems that stuff from `domain` folder is evaluated as builtin which is wrong on the other note stuff from `services` is evaluated as internal (I guess).  ', 'comment_created': datetime.datetime(2020, 8, 31, 15, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 480196527, 'comment_body': 'These link might be useful https://github.com/benmosher/eslint-plugin-import/blob/227d9a25098b359c11cce3c95d6168acdb87eb99/README.md#importinternal-regex\r\nhttps://github.com/benmosher/eslint-plugin-import/blob/227d9a25098b359c11cce3c95d6168acdb87eb99/README.md#importexternal-module-folders', 'comment_created': datetime.datetime(2020, 8, 31, 15, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}]","[{'commit_sha': 'dd146b2f4aef80082ce5497e4e359c5c6bc23ab4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa34be2d0ff7fc0632b550960e89f18c96371d70', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b55de468bf59cc47e59d6f94d8542de7e000d06b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed33fdb8fcbf2b26b7aed872ea67a7f90130e1e4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9092b735dd7d6911a1f4c0bccbff3044e659d5ce', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f42a9f1720fe928c35e8d3d3a9801b383aee35e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19b9ce6f4c73141133bcf982d84b4a89b5fc6557', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '600329e7fac346198f6fbf8ea6bbaa6c138dc3ad', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1548e14b41e13d0cd71088b203198d431e165ea0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4cb37af561b5d9c30cdad56e27ed547a2b7104f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0483ae21893bb72c564709b4ef441dc6e75a33a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b6f308bd1b8dc3b2356e04e05896ce7eec70370', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
475923120,Fix part of #8423: Added lint check to remove any unused dependency,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423
2. This PR does the following: Check for unused dependencies and raise a lint error.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10493,https://api.github.com/repos/oppia/oppia/pulls/10493,https://github.com/oppia/oppia/pull/10493,closed,910,845,149,25,11,26,0,8,[],2020-08-30 15:08:48+00:00,2020-09-03 22:42:32+00:00,372824.0,"4 days, 7:33:44","[{'comment_id': 480295828, 'comment_body': 'Can we sort these dependencies too? $ terms would come first, followed by the services, followed by the constants. ', 'comment_created': datetime.datetime(2020, 8, 31, 18, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 480348550, 'comment_body': '`no-unused-dependency`*', 'comment_created': datetime.datetime(2020, 8, 31, 19, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480349782, 'comment_body': 'General comment: Remove the `require` imports for the DIs you have removed here! [Ditto everywhere!]', 'comment_created': datetime.datetime(2020, 8, 31, 19, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480352536, 'comment_body': ""Add 2 spaces here (Check why this wasn't caught via linters!)"", 'comment_created': datetime.datetime(2020, 8, 31, 19, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480353052, 'comment_body': 'CHange file name as per the new rules name [See top comment]', 'comment_created': datetime.datetime(2020, 8, 31, 19, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480353365, 'comment_body': 'Update this to `code`', 'comment_created': datetime.datetime(2020, 8, 31, 19, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480353732, 'comment_body': 'Update this as per the fileoverview*', 'comment_created': datetime.datetime(2020, 8, 31, 19, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480354109, 'comment_body': 'Update this as per the above comments!', 'comment_created': datetime.datetime(2020, 8, 31, 19, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 480355004, 'comment_body': ""specify that it's an DI, maybe:\r\n`'{{dependencyName}} is injected but never used.'`"", 'comment_created': datetime.datetime(2020, 8, 31, 19, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481077723, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 11, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481077874, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 11, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481078156, 'comment_body': 'Changed to `problem` (ref: https://github.com/eslint/eslint/blob/8ddeda01afdb1e9656a43853b8e25c9c4582e6ad/lib/rules/no-unused-vars.js#L32)', 'comment_created': datetime.datetime(2020, 9, 1, 11, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481078406, 'comment_body': 'Changed to variables.', 'comment_created': datetime.datetime(2020, 9, 1, 11, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481079600, 'comment_body': 'Done. It seems like eslint do not check for indentation in case of multiline if statements', 'comment_created': datetime.datetime(2020, 9, 1, 11, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481080904, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 11, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481090211, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 12, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481148458, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 13, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481148494, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 13, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481149322, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 13, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482274259, 'comment_body': ""Is this an expected change? Generally, we don't expect any changes this file from non-upgrade PR!"", 'comment_created': datetime.datetime(2020, 9, 2, 18, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482274524, 'comment_body': 'Please undo this change*', 'comment_created': datetime.datetime(2020, 9, 2, 18, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482283191, 'comment_body': 'Can you please create an issue so that we track this and fix it whenever possible? [Add a link in the comment once done!]', 'comment_created': datetime.datetime(2020, 9, 2, 18, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482283934, 'comment_body': 'Thanks for the info and link. sg!', 'comment_created': datetime.datetime(2020, 9, 2, 18, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482286781, 'comment_body': ""@DubeySandeep without chromium it is not possible to print anything while using console.log() on the console while writing custom eslint checks, I've added it so that developers do not face any problem while trying to debug or write a new linter"", 'comment_created': datetime.datetime(2020, 9, 2, 18, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482831297, 'comment_body': 'Removed as per offline discussion', 'comment_created': datetime.datetime(2020, 9, 3, 9, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482841453, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 3, 9, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': 'cbf8ee926a75776868449312643f6a7f4fe55911', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5b6271afb0e0d3d1cdc0421aa24b0f33427305', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '451dfef090ff81324d45b0322178592a10fa479b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f78adb49e063abab368cc4faf00f1c50e57e1dd9', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb0e46c3b5e669902b38a68f8f2b7489d01f52a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bb0c104d8d85427c00819588e4f0ed4901e4d65', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef11aabc56a6aee90dc78fb6cc45ea06ce417e7c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '428677f76ca18a0ea434ae8b34fe56f7be2c4f89', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '965593425d396e2a0c4491987c3323c6c7c8b63d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '642a34c5e7c3b09fa39b9676a62b62ba21cc85a0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cb724419ed42e240d186e1bcb07981fca54e88e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e304017746332392574472a66e10ca3e7a83671a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2b50bfd5f3171e5d4be048b16f7c1af7b6513d4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9644a67d297c1df95bd108856ec1c70fd2dd5323', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a031823ff1079b95f55cd27364e0bccbd1f60a0f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '895a8b9af01665f4328c4c126add5b3869a5cd35', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f48a91cf0a8e3295b7cc90a44c1a63396e89b10', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87d849125e6c7b6a5509c9edd14286f5fb4d467a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fcd7af872071866febbaf1e7d9153d6f2aa6a10', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b0f5bbb0c18ef6bc10bd529886ab37f7bebca27', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '122fd91f52c52c13158f047d1c3ebdb9d5e58f07', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f7f7a1244be0a57813df148663e6d4b47200a0e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bbc682d29d46f2875cc73a98268c8dc52afef45', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f6be8844fb6f5c15d05b2844f9d2324eaaa4046', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e3b4e636d59aef3af187e50896a31e96a37513', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
475925503,Fix part of #8423: Added new lint check to ensure correct frontend-tests message styling,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423 
2. This PR does the following: 

- Every test message should start with 'should'
- There shouldn't be multiple consecutive spaces in the test messages
- There shouldn't be any space at the end of test message.

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10494,https://api.github.com/repos/oppia/oppia/pulls/10494,https://github.com/oppia/oppia/pull/10494,closed,448,232,59,26,29,76,1,1,[{'name': 'PR: LGTM'}],2020-08-30 15:27:03+00:00,2020-09-11 13:46:35+00:00,1030772.0,"11 days, 22:19:32","[{'comment_id': 481312817, 'comment_body': ""I don't know why it was not visible. I left one comment. Please change the file overview of this file. It is mismatched."", 'comment_created': datetime.datetime(2020, 9, 1, 17, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 481315453, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 17, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481342229, 'comment_body': ""`Use 'should' ...` OR the test message should start with `should`"", 'comment_created': datetime.datetime(2020, 9, 1, 18, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481343016, 'comment_body': 'checkMessageStartsWithShould*', 'comment_created': datetime.datetime(2020, 9, 1, 18, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481344345, 'comment_body': 'checkSpacesInMessage', 'comment_created': datetime.datetime(2020, 9, 1, 18, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481344566, 'comment_body': '....EndOfMessage*', 'comment_created': datetime.datetime(2020, 9, 1, 18, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481345668, 'comment_body': 'The naming of this function is confusing (Considering we have checkNoSpaceAtEnd above). Can you explain where is this used?', 'comment_created': datetime.datetime(2020, 9, 1, 18, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481346155, 'comment_body': ""Will it work fine for `'a' + 'b' + 'c'` message?"", 'comment_created': datetime.datetime(2020, 9, 1, 18, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481346658, 'comment_body': 'Space before `+`', 'comment_created': datetime.datetime(2020, 9, 1, 18, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481346998, 'comment_body': ""I'm considering this to be a correct style, why is this an error?"", 'comment_created': datetime.datetime(2020, 9, 1, 18, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481348702, 'comment_body': ""I'm surprised to see that there isn't any existing lint issue in the codebase for this check! Can you please do an audit and confirm that it's true? "", 'comment_created': datetime.datetime(2020, 9, 1, 18, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481355079, 'comment_body': ""Just as an FYI, I tried running `git grep 'it(.[^s]'` and I see this log:\r\n![image](https://user-images.githubusercontent.com/16653571/91892586-8cde4e80-ecb0-11ea-88d6-f718d659037c.png)\r\n\r\nThere are many more in the codebase, can you please check why this new check didn't catch any error!"", 'comment_created': datetime.datetime(2020, 9, 1, 18, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481355261, 'comment_body': ""Yes, there aren't any existing lint issues in the codebase, I've checked it by making an error intentionally and the lint check failed there."", 'comment_created': datetime.datetime(2020, 9, 1, 18, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481356855, 'comment_body': 'haha... we added opposite comment around the same time! Can you please check my 2nd comment in this thread?', 'comment_created': datetime.datetime(2020, 9, 1, 18, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481358053, 'comment_body': 'Working on it', 'comment_created': datetime.datetime(2020, 9, 1, 18, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481361601, 'comment_body': '@DubeySandeep The check is working fine, If I run lint check on a single file in which a lint error exists, it is catching that error successfully. But while running on whole codebase it is not catching errors. Strange! seems like an error in eslint', 'comment_created': datetime.datetime(2020, 9, 1, 18, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481364503, 'comment_body': ""the correct style would be `it('should transform all key value ' + 'pairs to angular constants',`"", 'comment_created': datetime.datetime(2020, 9, 1, 18, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481364950, 'comment_body': ""> seems like an error in eslint\r\n\r\nIs it an issue with any other checks? If not, then it's more specific to the new check we have written!  "", 'comment_created': datetime.datetime(2020, 9, 1, 18, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481365122, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 1, 18, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481380283, 'comment_body': ""I don't think the problem is with a check because I tried changing some files and running linter on them. The check is reporting all errors successfully. But when the linter run over all files it is not catching errors. I've also seen this with no-unused-vars and import-order where I had to run linter almost 30 or 40 times"", 'comment_created': datetime.datetime(2020, 9, 1, 19, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 481380622, 'comment_body': ""FYI, ESLint is throwing error on CI:\r\n![image](https://user-images.githubusercontent.com/16653571/91896984-49d3a980-ecb7-11ea-8c67-b8ccefb0d627.png)\r\n\r\n\r\nCan you please check what's going on and why it didn't result in a failure of the lint test? \r\nCI build link: https://github.com/oppia/oppia/runs/1057625733#step:6:201"", 'comment_created': datetime.datetime(2020, 9, 1, 19, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481385083, 'comment_body': 'I will investing what might be causing this error. Thanks for the info', 'comment_created': datetime.datetime(2020, 9, 1, 19, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482287295, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482287422, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 18, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482287512, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 18, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482287622, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 18, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482288309, 'comment_body': ""It checks for space at the end of message if the concatenation is used: `'message ' + 'message'`"", 'comment_created': datetime.datetime(2020, 9, 2, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482288467, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 9, 2, 18, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482288784, 'comment_body': 'Fixed the error', 'comment_created': datetime.datetime(2020, 9, 2, 18, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482293891, 'comment_body': ""I still don't see any changes in existing test messages which are not correct! Am I missing something here? "", 'comment_created': datetime.datetime(2020, 9, 2, 18, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482296661, 'comment_body': 'The error are being reported now, I will fix the errors tomorrow', 'comment_created': datetime.datetime(2020, 9, 2, 18, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482308885, 'comment_body': ""@Hudda, I'll take a quick look but I would suggest you fix the issue asap so that I can do a full review!"", 'comment_created': datetime.datetime(2020, 9, 2, 18, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482309268, 'comment_body': 'Can you please add a test for the same?', 'comment_created': datetime.datetime(2020, 9, 2, 18, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482332157, 'comment_body': 'Can we try to have this pattern to avoid duplicate checks and readable code? (If it takes time to implement this then please leave a code comment explaining the current structure!) \r\n\r\n```\r\ncheckMessageInBinExp (node):\r\n   checkMessageNode(left)\r\n   checkMessageNode(rigt)\r\n\r\ncheckMessageInLinteral(node):\r\n   ....\r\n   ....\r\n\r\n\r\ncheckMessageNode(node)\r\nif node is liter:\r\n checkMessageInLinteral\r\nif node is BEx:\r\n checkMessageInBinExp\r\n```\r\n', 'comment_created': datetime.datetime(2020, 9, 2, 19, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482398678, 'comment_body': 'This looks very complicated, can we simplify the checks to:\r\n1. The message starts with should\r\n2. The message no multi spaces\r\n3. no spaces at start/end of the message.', 'comment_created': datetime.datetime(2020, 9, 2, 20, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482758922, 'comment_body': 'Changed structure.', 'comment_created': datetime.datetime(2020, 9, 3, 7, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482790322, 'comment_body': 'Do you really need all of eval() for just this use case? Can you do this without importing a new package? If so, it would be better.\r\n\r\nAsking this for two reasons:\r\n(a) trying to avoid adding new packages to our already-large dependency tree\r\n(b) having a package named ""eval"" is not a great idea -- if anything, we should forbid the use of ""eval("" due to security vulnerabilities. Although this specific package which we are using this with should be OK, I don\'t want to set a precedent here.', 'comment_created': datetime.datetime(2020, 9, 3, 8, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 482806356, 'comment_body': '@seanlip Yes, this can be implemented without using eval(). I used the package so that we can use this in future if needed but I will remove it now', 'comment_created': datetime.datetime(2020, 9, 3, 8, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482814340, 'comment_body': ""Thanks! Sounds good, and happy to approve once it's dropped."", 'comment_created': datetime.datetime(2020, 9, 3, 8, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 482931833, 'comment_body': 'Done, removed the package.', 'comment_created': datetime.datetime(2020, 9, 3, 12, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482932103, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 3, 12, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482932324, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 3, 12, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483268150, 'comment_body': ""if the node.type is binaryExp and it's addition, can't we compute the message string and just call the checkMessage on the full string?"", 'comment_created': datetime.datetime(2020, 9, 3, 21, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483432937, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 4, 7, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483908971, 'comment_body': ""Should we do it this way?\r\n\r\n```\r\n    var extractMessage = function(node) {\r\n      if (node.type === 'Literal') {\r\n        return node.value;\r\n      } else if (node.type === 'BinaryExpression') {\r\n        return extractMessage(node.left) + extractMessage(node.right);\r\n      }\r\n    };\r\n\r\n\r\n    return {\r\n      CallExpression(node) {\r\n        if (node.callee.name === 'it') {\r\n          const testMessageNode = node.arguments[0];\r\n          testMessage = extractMessage(testMessageNode);\r\n          checkMessage(testMessage);\r\n        }\r\n      }\r\n```\r\n\r\nReason for suggesting this structure:\r\n1. The current structure has a function named `extractMessage` which is not extracting the message correctly + it's also running the checks which are unexpected.\r\n2. `extractMessage` is populating a non-local variable that is being used by other checker functions (i.e, all checker functions are using non-local variable).\r\n3. The logic inside `extractMessage` function around on line 82 doesn't seem simple and clear.\r\n"", 'comment_created': datetime.datetime(2020, 9, 5, 4, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483930697, 'comment_body': ""```suggestion\r\n    it('should correctly initialize the service', function() {\r\n```"", 'comment_created': datetime.datetime(2020, 9, 5, 9, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 483930807, 'comment_body': ""```suggestion\r\n  it('should correctly fetch recommended explorations', fakeAsync(() => {\r\n```"", 'comment_created': datetime.datetime(2020, 9, 5, 9, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 483930855, 'comment_body': ""```suggestion\r\n    it('should check if the value is available in cache', () => {\r\n```"", 'comment_created': datetime.datetime(2020, 9, 5, 9, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 483930863, 'comment_body': ""```suggestion\r\n    it('should reset the cache', () => {\r\n```"", 'comment_created': datetime.datetime(2020, 9, 5, 9, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 483931069, 'comment_body': 'Can you add a more descriptive message here?', 'comment_created': datetime.datetime(2020, 9, 5, 9, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 483931088, 'comment_body': ""```suggestion\r\n      it('should callback when a new state is added', function() {\r\n```"", 'comment_created': datetime.datetime(2020, 9, 5, 9, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 483931091, 'comment_body': 'here and below', 'comment_created': datetime.datetime(2020, 9, 5, 9, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nithusha21', 'type': 'User'}, {'comment_id': 483966968, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 5, 16, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483967018, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 5, 16, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483967139, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 5, 16, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483967169, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 5, 16, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483967330, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 5, 16, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483967409, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 5, 16, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483967547, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 5, 16, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 484117182, 'comment_body': 'should return the correct value for the getter functions*', 'comment_created': datetime.datetime(2020, 9, 6, 21, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 484117538, 'comment_body': 'Add a test for triple string concatenation (`a` + `b` + `c`). (This will help up to test the recursive function.)', 'comment_created': datetime.datetime(2020, 9, 6, 21, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 484117739, 'comment_body': 'Please remove multiple consecutive spaces in the test message\r\nPlease remove space from the end of the test message', 'comment_created': datetime.datetime(2020, 9, 6, 21, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 484117783, 'comment_body': 'Why is this still the same? I had asked earlier to update this, right?', 'comment_created': datetime.datetime(2020, 9, 6, 21, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 484117807, 'comment_body': 'true*', 'comment_created': datetime.datetime(2020, 9, 6, 21, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 484118252, 'comment_body': ""> Can you please check what's going on and why it didn't result in a failure of the lint test?\r\n\r\nThis thread is still not resolved! Can you please reply to this comment^?"", 'comment_created': datetime.datetime(2020, 9, 6, 21, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 485789224, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 9, 17, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 485789344, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 9, 17, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 485789396, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 9, 17, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 485789443, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 9, 17, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 485789505, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 9, 17, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 485789804, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 9, 17, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 485792115, 'comment_body': 'We are using sys.exit(1) to exit if there is an error with the linter. We need to return the TaskResult object as well to show the error. But I think this can be done in a separate PR. What do you think?', 'comment_created': datetime.datetime(2020, 9, 9, 17, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 486233172, 'comment_body': ""This doesn't explain why the lint test passed when there is some error in lint test execution! I was expecting the lint test to fail if we do sys.exit(1).\r\n\r\n"", 'comment_created': datetime.datetime(2020, 9, 10, 10, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 486445536, 'comment_body': 'because js_ts_linter is a sublinter to the main linter even if we exit from a sublinter the other sublinters continue to work and the linter pass.', 'comment_created': datetime.datetime(2020, 9, 10, 15, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 486539039, 'comment_body': ""hmmm... I don't think this is a case for other linter. This way our lint test will never fail if there's an error in any of the linter, right? I think we have a structure to fail the test if some linter error happens, can you please check? (Create a separate issue and assign it to yourself and let's fix this asap!)\r\n\r\nAnd get this PR merged!"", 'comment_created': datetime.datetime(2020, 9, 10, 18, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 487117139, 'comment_body': 'Created the issue https://github.com/oppia/oppia/issues/10633', 'comment_created': datetime.datetime(2020, 9, 11, 15, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': 'a8efc83936d86a761f0f692efda7f18102c91cce', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45066f22b3e1eaf3cf4b0d42cf1c0599aaf936db', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2efd6e4e7caa3e96467219762cb025f57609c98', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b15c9ef1b8f7cdf64eb609e3794c4358591fee87', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19f5a81a7708b8e9e12536fa58b7f509e26f06b2', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e32ea89a12f52d9a4660ecb8e206a929332eaa6', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08240c72d9d2f8a590c37fda13142e538dc42bf1', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb0d14a1ee38e8b7fd0391b43155c7c5959951f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b61eee98befc945bbdcaa1e87db491196c14f57', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec94af30049684b20fe3a6612fb0d5319ac27bf5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0122d7b942b76d43fca0969f2e0748992374e47a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5382898189cf00656a1d387a1c15f411ef7e3972', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9444aecb3a059b11e20928ff4298b8e09eabf896', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '220c5993e47aa29f3cb7d191857afe5269a70107', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfadd65cdaa0f2fe86b292cf4877129c06f1772a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ad3a3374701ba28940126ef88918cd68f2f8e0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '424bba658b717ceb3dc1e25a5b3f6f8c6ab5c66a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6be61721f478b39f65f6d6e9196ce27c093c3948', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3b5228f3a0a8b6ee50631c476add849ec64847f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33a181ef04adff5e58753baadb26abfcaff105b0', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53cbbd9de7aec5bc8d1ac6e1ea92e971e0dbd328', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d72ed5ceb2357e264cf06591d3dd7cfbf20151e', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '729297154d1e2042b0b26f470c1ab2f61089a3d3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88024c8752ef41b30cb5576fc56d228bb0e7173a', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8beff2c5a295d99c179b2d1c1dbde30121baad50', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00124c89c07b526f39b1b5ba4f8755d8890079e7', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
475945288,Fix part of #8423: Added lint check to disable multiline eslint-disable comments,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423
2. This PR does the following: Do not allow multiline eslint-disable statements

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",True,10497,https://api.github.com/repos/oppia/oppia/pulls/10497,https://github.com/oppia/oppia/pull/10497,closed,1031,725,55,22,28,95,1,3,[{'name': 'PR: LGTM'}],2020-08-30 18:19:14+00:00,2020-09-18 22:27:46+00:00,1656512.0,"19 days, 4:08:32","[{'comment_id': 479809474, 'comment_body': 'Hmmm.. I think this is copy-pasta :p fix this and do a self-review of this PR. :) (It helps you get your PR merged quickly.)', 'comment_created': datetime.datetime(2020, 8, 30, 19, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479809523, 'comment_body': 'Is this a correct type?', 'comment_created': datetime.datetime(2020, 8, 30, 19, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479809545, 'comment_body': 'Not a stylistic issue, right?', 'comment_created': datetime.datetime(2020, 8, 30, 20, 0, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479809882, 'comment_body': 'This is the check function, right? Maybe rename it to `_checkNotMultilineDisableComment(comment)`?', 'comment_created': datetime.datetime(2020, 8, 30, 20, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479810248, 'comment_body': 'can we use `comment.value` here? [Just to avoid using the non-local scope value here. I was not sure where this `lines` coming from on the first glance!]', 'comment_created': datetime.datetime(2020, 8, 30, 20, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479810320, 'comment_body': 'This looks so clean. Great! :)', 'comment_created': datetime.datetime(2020, 8, 30, 20, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479810381, 'comment_body': 'Update this*', 'comment_created': datetime.datetime(2020, 8, 30, 20, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 479810561, 'comment_body': 'Are we expecting to have test for this check? [What should we do to ensure the coverage is 100% or at least we have test files for each rules, any idea?]', 'comment_created': datetime.datetime(2020, 8, 30, 20, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 481245182, 'comment_body': '+1', 'comment_created': datetime.datetime(2020, 9, 1, 15, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bansalnitish', 'type': 'User'}, {'comment_id': 482209843, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 16, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482211920, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2020, 9, 2, 16, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482212021, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2020, 9, 2, 16, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482212135, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 9, 2, 16, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482212178, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 9, 2, 16, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482213354, 'comment_body': 'No, as it will return only comment value but we have to check the whole line to check if there is any code before it or not.', 'comment_created': datetime.datetime(2020, 9, 2, 16, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482213499, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 2, 16, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482335001, 'comment_body': '>  [What should we do to ensure the coverage is 100% or at least we have test files for each rules, any idea?]\r\n\r\nAny thoughts on this?', 'comment_created': datetime.datetime(2020, 9, 2, 19, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482338410, 'comment_body': ""As per our offline discussion, the eslint disable doesn't work for inline comments. So we can use the local value. @Hudda is working on fixing this!"", 'comment_created': datetime.datetime(2020, 9, 2, 19, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482339241, 'comment_body': 'This is not resolved?', 'comment_created': datetime.datetime(2020, 9, 2, 19, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482348356, 'comment_body': 'Undo these changes! [Why is this happening automatically?]', 'comment_created': datetime.datetime(2020, 9, 2, 19, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 482960337, 'comment_body': ""We need to this in at least one PR because in the first PR there was a separate package.json file for eslint-checks which then removed on a later stage, but I didn't updated the yarn file. So we need to do it in one of the new PRs"", 'comment_created': datetime.datetime(2020, 9, 3, 13, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482960467, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 9, 3, 13, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482961425, 'comment_body': ""I've checked from the eslint codebase, it will come under Stylistic issue."", 'comment_created': datetime.datetime(2020, 9, 3, 13, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 482962093, 'comment_body': 'We are using mocha for tests, we can use nyc with mocha to get the codecoverage.', 'comment_created': datetime.datetime(2020, 9, 3, 13, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483106190, 'comment_body': ""Can you please create an issue to find whether we can pass eslint plugins directly instead of using package.json file? [I think this will help us avoid auto-update packages because of eslint.]\r\n\r\nAlso, I'm fine with these changes for this PR!"", 'comment_created': datetime.datetime(2020, 9, 3, 16, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483106633, 'comment_body': 'Any specific reason for this change?', 'comment_created': datetime.datetime(2020, 9, 3, 16, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483108346, 'comment_body': ""I've created the issue https://github.com/oppia/oppia/issues/10551"", 'comment_created': datetime.datetime(2020, 9, 3, 16, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483109358, 'comment_body': 'Also, add a valid check for:\r\n\r\neslint-disable no-multiline-disable\r\neslint-disable max-len\r\n', 'comment_created': datetime.datetime(2020, 9, 3, 16, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483110400, 'comment_body': 'Thanks for the info. Add the link for other reviewers!', 'comment_created': datetime.datetime(2020, 9, 3, 16, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483110947, 'comment_body': 'Create an issue to add test coverage for the eslint tests*', 'comment_created': datetime.datetime(2020, 9, 3, 16, 34, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483115533, 'comment_body': ""I've removed this by mistake at first then re-added it."", 'comment_created': datetime.datetime(2020, 9, 3, 16, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483129701, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 3, 17, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483130328, 'comment_body': 'Link: https://github.com/eslint/eslint/blob/89292084bf91ba5ae5bf966c6c56fa3da139ce57/lib/rules/capitalized-comments.js#L108', 'comment_created': datetime.datetime(2020, 9, 3, 17, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483132072, 'comment_body': 'Opened the issue https://github.com/oppia/oppia/issues/10552', 'comment_created': datetime.datetime(2020, 9, 3, 17, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483406758, 'comment_body': ""@Hudda what is this? We should not be disabling our disable checks, that kind of defeats the whole point. I don't think you even need to break the max-len convention at all here, it is not required that each line of the template be on a single line right?"", 'comment_created': datetime.datetime(2020, 9, 4, 6, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 483406819, 'comment_body': 'Ditto.', 'comment_created': datetime.datetime(2020, 9, 4, 6, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 483407384, 'comment_body': 'Why do we need this disable at all?', 'comment_created': datetime.datetime(2020, 9, 4, 6, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 483407453, 'comment_body': 'Ditto, please do not do this.', 'comment_created': datetime.datetime(2020, 9, 4, 6, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 483407874, 'comment_body': ""Why is this check needed at all?\r\n\r\n(In general try to remove checks that aren't needed.)"", 'comment_created': datetime.datetime(2020, 9, 4, 6, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 483407980, 'comment_body': ""Couldn't the next line just be AppConstants.INVALID_NAME_CHARS, and similarly elsewhere?"", 'comment_created': datetime.datetime(2020, 9, 4, 6, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 483952461, 'comment_body': ""I'm not sure whether it's done? Can you please check?"", 'comment_created': datetime.datetime(2020, 9, 5, 13, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483953129, 'comment_body': ""I don't see a `fix` function, is this check fixable?"", 'comment_created': datetime.datetime(2020, 9, 5, 13, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483953208, 'comment_body': 'No this rule is important as it can lead to an unknown problem later on in the same file. So add this as ""problem""', 'comment_created': datetime.datetime(2020, 9, 5, 13, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483953532, 'comment_body': 'The rule link you have shared is not similar to what you have implemented here. Should we change the category to ""Possible Errors""?', 'comment_created': datetime.datetime(2020, 9, 5, 13, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 483969634, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 5, 17, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483969652, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 5, 17, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483969766, 'comment_body': 'Doen.', 'comment_created': datetime.datetime(2020, 9, 5, 17, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 483986022, 'comment_body': ""Shouldn't this also be single line disable and why are you disabling the check you just added?"", 'comment_created': datetime.datetime(2020, 9, 5, 20, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aks681', 'type': 'User'}, {'comment_id': 488782081, 'comment_body': 'Done. sorry, I forgot to push the changes last time.', 'comment_created': datetime.datetime(2020, 9, 15, 15, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 488798702, 'comment_body': ""I've done this because the code on lines below is on two separate lines i.e. 39 and 40 so we need to disable the `quotes` for both lines and have to used eslint-disable. So in order to use the eslint-disable we need to disable our new rule."", 'comment_created': datetime.datetime(2020, 9, 15, 16, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 488799725, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 15, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 488804557, 'comment_body': ""We needed eslint-disable statement here else there are 761 such lines below it where we have to use eslint-disabe-next-line dot notation. Also I've tried to change the expression to dot notations but that didn't worked. Here is an sample error `Property 'AdminRouterService' does not exist on type '{}'.`"", 'comment_created': datetime.datetime(2020, 9, 15, 16, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 488807272, 'comment_body': ""We need it here for `top`. This is the error: `Unnecessarily quoted property 'top' found`"", 'comment_created': datetime.datetime(2020, 9, 15, 16, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 488811961, 'comment_body': 'If I remove it then this error show up `.catch is a syntax error `', 'comment_created': datetime.datetime(2020, 9, 15, 16, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 488817374, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 15, 16, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 488818099, 'comment_body': 'REmoved.', 'comment_created': datetime.datetime(2020, 9, 15, 16, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 488848746, 'comment_body': 'Seems like someone else fixed it already', 'comment_created': datetime.datetime(2020, 9, 15, 17, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 488968192, 'comment_body': 'OK, maybe add a comment explaining the rationale (similar to what @nishantwrp does for typescript checks)?', 'comment_created': datetime.datetime(2020, 9, 15, 20, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 488969107, 'comment_body': ""Ah ok -- understood. Perhaps add this info as a comment. It might be OK for this file since @srijanreddy98 is going to get rid of it, but let's double-check with him.\r\n\r\n@srijanreddy98: do you know when this file is planned to be removed, and (b) is there a way to write it by which we can avoid the lint errors here?"", 'comment_created': datetime.datetime(2020, 9, 15, 20, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 488969736, 'comment_body': '(Is it possible to drop this?)', 'comment_created': datetime.datetime(2020, 9, 15, 20, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 488986953, 'comment_body': ""are we expecting `oppia/no-multiline-disable` here? OR it's oppia-linters context-specific test?"", 'comment_created': datetime.datetime(2020, 9, 15, 21, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 488987364, 'comment_body': 'Please move it to the same place!', 'comment_created': datetime.datetime(2020, 9, 15, 21, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'DubeySandeep', 'type': 'User'}, {'comment_id': 489106431, 'comment_body': ""For every place you use this, please leave a comment explaining why it is needed. If possible, don't use it at all, and have per-line disables instead."", 'comment_created': datetime.datetime(2020, 9, 16, 1, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 489106637, 'comment_body': 'Why do we even need this -- can we get rid of it? Ideally, try to remove pragmas where possible.', 'comment_created': datetime.datetime(2020, 9, 16, 1, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 489107008, 'comment_body': 'Could you help me understand this one more? Looking at https://eslint.org/docs/rules/dot-notation#rule-details, this seems like an example of ""correct"" usage because the property name is a variable.', 'comment_created': datetime.datetime(2020, 9, 16, 1, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 489581574, 'comment_body': ""I don't think so becuase the disabled rules are used at least on 5000 lines. So I don't think if it is practical to use eslint-disable-next-line before each of them."", 'comment_created': datetime.datetime(2020, 9, 16, 16, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 489581848, 'comment_body': 'Removed the eslint-disable statements', 'comment_created': datetime.datetime(2020, 9, 16, 16, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 489581968, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 9, 16, 16, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 489591165, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 9, 16, 17, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 489594149, 'comment_body': 'Added the explanation.', 'comment_created': datetime.datetime(2020, 9, 16, 17, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 489594810, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 16, 17, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 489596634, 'comment_body': 'I depend on what we are using as a rule name on line 25. If we use `oppia/no-multiline-disable` there, then we have to use it in the tests below. Else we can just use `no-multiline-disable`', 'comment_created': datetime.datetime(2020, 9, 16, 17, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 489597379, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 16, 17, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490740804, 'comment_body': 'Here and below: I think you can indent these strings so that the left edge matches the previous line?\r\n\r\nDitto elsewhere in this file.', 'comment_created': datetime.datetime(2020, 9, 18, 6, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490742690, 'comment_body': 'Put quotes around ""eslint disable next line""\r\n\r\nThat said, I\'m confused. I think @srijanreddy98 has already solved this by adding a max-len exclusion for ""import"". Can you check? If so, you should be able to fix this and drop the multiline-disable.', 'comment_created': datetime.datetime(2020, 9, 18, 7, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490743173, 'comment_body': 'Same thing, here and elsewhere, you don\'t need the disabling I think. You could perhaps put everything on the same line as the import if dropping it as-is doesn\'t work.\r\n\r\nThat said, for this one and the files below, it\'s optional. Happy to leave it as you have it, too, though it might be nice to move more eslint-disables so it doesn\'t become too much of a ""standard pattern"".', 'comment_created': datetime.datetime(2020, 9, 18, 7, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490743810, 'comment_body': 'Spelling: suppress', 'comment_created': datetime.datetime(2020, 9, 18, 7, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490745410, 'comment_body': 'Add the explanation that you have in the comment below (about what happens when you\'ve changed the expression to dot notation). Don\'t just say ""not possible"" -- try not to use that phrase. Always explain why.', 'comment_created': datetime.datetime(2020, 9, 18, 7, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490746898, 'comment_body': 'I don\'t think I quite understand what is going on with these tests. Could you change the ""it"" descriptions to be more explanatory about what is being tested?', 'comment_created': datetime.datetime(2020, 9, 18, 7, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490747062, 'comment_body': 'Put quotes around ""eslint disable next line""', 'comment_created': datetime.datetime(2020, 9, 18, 7, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490758353, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 18, 7, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490758641, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 18, 7, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490760028, 'comment_body': 'The exclusion only works if the import is on a single line. Also, in this file, there are also cases where max-line property is violated and is not an import statement. ', 'comment_created': datetime.datetime(2020, 9, 18, 7, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490760744, 'comment_body': 'Done. Removed eslint-disable statement', 'comment_created': datetime.datetime(2020, 9, 18, 7, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490763626, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 18, 7, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490765139, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 18, 7, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490768829, 'comment_body': ""Here 'it' is used for only testing purposes. It is an example in a string format."", 'comment_created': datetime.datetime(2020, 9, 18, 7, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490776498, 'comment_body': 'for each of them. Also, we can\'t use dot notation either because...\r\n\r\n(Note also: spelling of ""can\'t"", ""because"")', 'comment_created': datetime.datetime(2020, 9, 18, 8, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490777007, 'comment_body': '> The exclusion only works if the import is on a single line. Also, in this file, there are also cases where max-line property is violated and is not an import statement.\r\n\r\nThen please put all the imports in a single line each, and have a per-line eslint check for the non-import lines which violate (or try to find some way to break the line if doing so makes sense).', 'comment_created': datetime.datetime(2020, 9, 18, 8, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490777440, 'comment_body': 'Yup, but you can make the string anything you want, right? So, use them to explain what the test is about.', 'comment_created': datetime.datetime(2020, 9, 18, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490816495, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 18, 9, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490816565, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 18, 9, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490816632, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 9, 18, 9, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}, {'comment_id': 490818515, 'comment_body': ""Break after '(', and indent the following line by 2.\r\n\r\nOr alternatively, just leave it as it was."", 'comment_created': datetime.datetime(2020, 9, 18, 9, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 490822667, 'comment_body': 'Reverted it to as it was.', 'comment_created': datetime.datetime(2020, 9, 18, 9, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hudda', 'type': 'User'}]","[{'commit_sha': 'db71ffe70811bb8a407fa50c87ec92401f39f4d4', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c28aed1f3a36485cb9af99894271e50b7872ef66', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe090706fbb2a092e63f3756dcafa8bb928c8d7c', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15ddebbb4ede86000167a69b8b40decc12b92ea3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d3861c93cf1c7339ffb864b80ff671bafccd64', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6f67aa4cf6edcf2dd66b42b2f3e02970586d331', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac59d40f7da86ba55d11ff77e27d5470b6f6d354', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cef63d14e2f434a741024d552548011666e9cef', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4d4cf3df5bec7fba2f4c5ff8d5bdea55f7a0572', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9068d4b545a173bd88d972731cdbe3340f2a4356', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09987be28c18ed5b2cb68eebce258a03b9eccab3', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09879037c82014699f538f59ddb556f582ecfcaa', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5624a94096368b31f3b308dea31e09c26de3203f', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '899b52dd2a455d39db1d2026643c1a895dbb4c1b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52914b696cb8d73fa8b834f0d020d0cea1c5e684', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd71a5a4962a1076c5afca9d78e2ab56ccf2c6de5', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b89486f3dc8da1a9ee591c9742efbdd144337ef', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17cad90ccacfce510254df0d637123c0b16a3122', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a066160e64ab3c075ea78a16ce22e8ed2cfa133d', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b414da9a7fe36f6b374dc7b63d700361bf5c4726', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c3535b9d9345aef449b6d552db9c443d5115800', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0587c4fd05cda1e1e55d1481ba8ac26224a5d4ba', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11
476075671,Fix part of #8423: Add lint check to ensure that filename is similar to service or directive name,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #8423
2. This PR does the following: Added new lint check to ensure that filename is similar to service or directive name

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## PR Pointers

- Oppiabot will notify you when you don't add a PR_CHANGELOG label. If you are unable to do so, please @-mention a code owner (who will be in the Reviewers list), or ask on [Gitter](https://gitter.im/oppia/oppia-chat).
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays
- Never force push. If you do, your PR will be closed.
",False,10508,https://api.github.com/repos/oppia/oppia/pulls/10508,https://github.com/oppia/oppia/pull/10508,closed,207,4,4,1,2,0,0,2,[],2020-08-31 06:12:53+00:00,2020-08-31 13:34:12+00:00,26479.0,7:21:19,[],"[{'commit_sha': '4ac592dbaba947e31fdcac27a5b2a5d19822e57b', 'committer_username': 'Hudda', 'committer_name': 'Anshul Hudda', 'committer_email': 'anshulhudda.ssap@gmail.com', 'commit_date': datetime.datetime(2017, 5, 30, 7, 20, 29, tzinfo=datetime.timezone.utc)}]",Anshul Hudda,29057268,anshulhudda.ssap@gmail.com,User,,11,,7,11

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3845,5717,241,775,15761,1411,420,20,"[{'id': 891377442, 'number': 15226, 'closed': datetime.datetime(2022, 4, 18, 14, 52, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 28, 6, 7, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1845948.0, 'time_delta': '21 days, 8:45:48', 'additions': 34, 'deletions': 2, 'state': 'closed'}, {'id': 839396991, 'number': 14849, 'closed': datetime.datetime(2022, 2, 15, 7, 15, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 3, 15, 6, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1008591.0, 'time_delta': '11 days, 16:09:51', 'additions': 26, 'deletions': 1, 'state': 'closed'}, {'id': 616222547, 'number': 12522, 'closed': datetime.datetime(2021, 5, 3, 20, 19, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 15, 17, 12, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1566446.0, 'time_delta': '18 days, 3:07:26', 'additions': 28, 'deletions': 1, 'state': 'closed'}, {'id': 613552775, 'number': 12501, 'closed': datetime.datetime(2021, 4, 13, 7, 1, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 12, 11, 41, 27, tzinfo=datetime.timezone.utc), 'time_taken': 69599.0, 'time_delta': '19:19:59', 'additions': 42, 'deletions': 14, 'state': 'closed'}, {'id': 589497865, 'number': 12154, 'closed': datetime.datetime(2021, 3, 17, 15, 11, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 10, 11, 45, 51, tzinfo=datetime.timezone.utc), 'time_taken': 617150.0, 'time_delta': '7 days, 3:25:50', 'additions': 13, 'deletions': 10, 'state': 'closed'}, {'id': 581015467, 'number': 12046, 'closed': datetime.datetime(2021, 3, 18, 16, 14, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 26, 17, 34, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1723156.0, 'time_delta': '19 days, 22:39:16', 'additions': 192, 'deletions': 158, 'state': 'closed'}, {'id': 568165686, 'number': 11864, 'closed': datetime.datetime(2021, 2, 17, 5, 52, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 5, 7, 43, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1030121.0, 'time_delta': '11 days, 22:08:41', 'additions': 49, 'deletions': 60, 'state': 'closed'}, {'id': 525117675, 'number': 11240, 'closed': datetime.datetime(2020, 11, 24, 5, 41, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 21, 11, 31, 51, tzinfo=datetime.timezone.utc), 'time_taken': 238194.0, 'time_delta': '2 days, 18:09:54', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 522555528, 'number': 11203, 'closed': datetime.datetime(2021, 2, 5, 6, 36, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 17, 16, 52, 9, tzinfo=datetime.timezone.utc), 'time_taken': 6875065.0, 'time_delta': '79 days, 13:44:25', 'additions': 143, 'deletions': 95, 'state': 'closed'}, {'id': 508078056, 'number': 11024, 'closed': datetime.datetime(2020, 11, 4, 12, 57, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 22, 7, 24, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1143230.0, 'time_delta': '13 days, 5:33:50', 'additions': 310, 'deletions': 53, 'state': 'closed'}, {'id': 498957146, 'number': 10895, 'closed': datetime.datetime(2020, 10, 10, 0, 58, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 7, 3, 43, 56, tzinfo=datetime.timezone.utc), 'time_taken': 249250.0, 'time_delta': '2 days, 21:14:10', 'additions': 17, 'deletions': 23, 'state': 'closed'}, {'id': 497835979, 'number': 10878, 'closed': datetime.datetime(2020, 10, 7, 2, 38, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 5, 12, 59, 29, tzinfo=datetime.timezone.utc), 'time_taken': 135569.0, 'time_delta': '1 day, 13:39:29', 'additions': 21, 'deletions': 38, 'state': 'closed'}, {'id': 497816906, 'number': 10877, 'closed': datetime.datetime(2020, 10, 7, 2, 39, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 5, 12, 26, 50, tzinfo=datetime.timezone.utc), 'time_taken': 137543.0, 'time_delta': '1 day, 14:12:23', 'additions': 24, 'deletions': 120, 'state': 'closed'}, {'id': 493919845, 'number': 10803, 'closed': datetime.datetime(2020, 9, 30, 3, 33, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 28, 6, 47, 40, tzinfo=datetime.timezone.utc), 'time_taken': 161169.0, 'time_delta': '1 day, 20:46:09', 'additions': 10, 'deletions': 20, 'state': 'closed'}, {'id': 489080171, 'number': 10710, 'closed': datetime.datetime(2020, 9, 25, 5, 24, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 18, 5, 24, 6, tzinfo=datetime.timezone.utc), 'time_taken': 604799.0, 'time_delta': '6 days, 23:59:59', 'additions': 20, 'deletions': 10, 'state': 'closed'}, {'id': 488841747, 'number': 10705, 'closed': datetime.datetime(2020, 10, 22, 4, 58, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 17, 18, 6, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2976676.0, 'time_delta': '34 days, 10:51:16', 'additions': 41, 'deletions': 11, 'state': 'closed'}, {'id': 485086067, 'number': 10632, 'closed': datetime.datetime(2020, 10, 25, 23, 56, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 11, 13, 40, 31, tzinfo=datetime.timezone.utc), 'time_taken': 3838547.0, 'time_delta': '44 days, 10:15:47', 'additions': 26, 'deletions': 26, 'state': 'closed'}, {'id': 481521609, 'number': 10580, 'closed': datetime.datetime(2020, 9, 8, 0, 10, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 7, 16, 16, 20, tzinfo=datetime.timezone.utc), 'time_taken': 28447.0, 'time_delta': '7:54:07', 'additions': 308, 'deletions': 93, 'state': 'closed'}, {'id': 481076700, 'number': 10577, 'closed': datetime.datetime(2020, 9, 10, 0, 44, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 7, 6, 6, 54, tzinfo=datetime.timezone.utc), 'time_taken': 239846.0, 'time_delta': '2 days, 18:37:26', 'additions': 876, 'deletions': 568, 'state': 'closed'}, {'id': 479932847, 'number': 10565, 'closed': datetime.datetime(2020, 9, 4, 20, 33, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 4, 17, 58, 36, tzinfo=datetime.timezone.utc), 'time_taken': 9313.0, 'time_delta': '2:35:13', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 478738052, 'number': 10550, 'closed': datetime.datetime(2020, 9, 4, 6, 5, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 3, 16, 7, 42, tzinfo=datetime.timezone.utc), 'time_taken': 50285.0, 'time_delta': '13:58:05', 'additions': 204, 'deletions': 0, 'state': 'closed'}, {'id': 476453342, 'number': 10512, 'closed': datetime.datetime(2020, 9, 4, 10, 19, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 18, 13, 16, tzinfo=datetime.timezone.utc), 'time_taken': 317168.0, 'time_delta': '3 days, 16:06:08', 'additions': 10, 'deletions': 4, 'state': 'closed'}, {'id': 476075671, 'number': 10508, 'closed': datetime.datetime(2020, 8, 31, 13, 34, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 6, 12, 53, tzinfo=datetime.timezone.utc), 'time_taken': 26479.0, 'time_delta': '7:21:19', 'additions': 207, 'deletions': 4, 'state': 'closed'}, {'id': 475945288, 'number': 10497, 'closed': datetime.datetime(2020, 9, 18, 22, 27, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 18, 19, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1656512.0, 'time_delta': '19 days, 4:08:32', 'additions': 1031, 'deletions': 725, 'state': 'closed'}, {'id': 475925503, 'number': 10494, 'closed': datetime.datetime(2020, 9, 11, 13, 46, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 15, 27, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1030772.0, 'time_delta': '11 days, 22:19:32', 'additions': 448, 'deletions': 232, 'state': 'closed'}, {'id': 475923120, 'number': 10493, 'closed': datetime.datetime(2020, 9, 3, 22, 42, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 30, 15, 8, 48, tzinfo=datetime.timezone.utc), 'time_taken': 372824.0, 'time_delta': '4 days, 7:33:44', 'additions': 910, 'deletions': 845, 'state': 'closed'}, {'id': 473028552, 'number': 10442, 'closed': datetime.datetime(2020, 9, 3, 18, 47, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 8, 20, 14, tzinfo=datetime.timezone.utc), 'time_taken': 815226.0, 'time_delta': '9 days, 10:27:06', 'additions': 4953, 'deletions': 3864, 'state': 'closed'}, {'id': 472986013, 'number': 10441, 'closed': datetime.datetime(2020, 9, 4, 16, 11, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 6, 53, 18, tzinfo=datetime.timezone.utc), 'time_taken': 897498.0, 'time_delta': '10 days, 9:18:18', 'additions': 49, 'deletions': 724, 'state': 'closed'}, {'id': 472677954, 'number': 10430, 'closed': datetime.datetime(2020, 9, 2, 19, 10, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 18, 1, 41, tzinfo=datetime.timezone.utc), 'time_taken': 781746.0, 'time_delta': '9 days, 1:09:06', 'additions': 1088, 'deletions': 733, 'state': 'closed'}, {'id': 470025119, 'number': 10383, 'closed': datetime.datetime(2020, 9, 3, 17, 16, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 9, 4, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1325513.0, 'time_delta': '15 days, 8:11:53', 'additions': 135, 'deletions': 113, 'state': 'closed'}, {'id': 469648583, 'number': 10376, 'closed': datetime.datetime(2020, 8, 25, 0, 50, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 17, 51, 52, tzinfo=datetime.timezone.utc), 'time_taken': 543519.0, 'time_delta': '6 days, 6:58:39', 'additions': 47, 'deletions': 47, 'state': 'closed'}, {'id': 468479222, 'number': 10363, 'closed': datetime.datetime(2020, 8, 30, 8, 25, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 16, 18, 31, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1173268.0, 'time_delta': '13 days, 13:54:28', 'additions': 2524, 'deletions': 1727, 'state': 'closed'}, {'id': 466897018, 'number': 10297, 'closed': datetime.datetime(2020, 8, 14, 5, 30, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 17, 3, 4, tzinfo=datetime.timezone.utc), 'time_taken': 131218.0, 'time_delta': '1 day, 12:26:58', 'additions': 770, 'deletions': 578, 'state': 'closed'}, {'id': 466884022, 'number': 10296, 'closed': datetime.datetime(2020, 8, 25, 5, 48, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 16, 35, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1084379.0, 'time_delta': '12 days, 13:12:59', 'additions': 31, 'deletions': 244, 'state': 'closed'}, {'id': 466878038, 'number': 10295, 'closed': datetime.datetime(2020, 8, 14, 18, 1, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 16, 24, 13, tzinfo=datetime.timezone.utc), 'time_taken': 178612.0, 'time_delta': '2 days, 1:36:52', 'additions': 18, 'deletions': 14, 'state': 'closed'}, {'id': 466873216, 'number': 10294, 'closed': datetime.datetime(2020, 8, 14, 18, 3, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 16, 15, 19, tzinfo=datetime.timezone.utc), 'time_taken': 179262.0, 'time_delta': '2 days, 1:47:42', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 466743501, 'number': 10292, 'closed': datetime.datetime(2020, 8, 16, 6, 24, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 12, 37, 12, tzinfo=datetime.timezone.utc), 'time_taken': 323231.0, 'time_delta': '3 days, 17:47:11', 'additions': 1, 'deletions': 266, 'state': 'closed'}, {'id': 466550718, 'number': 10287, 'closed': datetime.datetime(2020, 8, 21, 7, 27, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 6, 34, 54, tzinfo=datetime.timezone.utc), 'time_taken': 780752.0, 'time_delta': '9 days, 0:52:32', 'additions': 760, 'deletions': 462, 'state': 'closed'}, {'id': 458526141, 'number': 10107, 'closed': datetime.datetime(2020, 8, 2, 6, 59, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 15, 48, 17, tzinfo=datetime.timezone.utc), 'time_taken': 313893.0, 'time_delta': '3 days, 15:11:33', 'additions': 1222, 'deletions': 897, 'state': 'closed'}, {'id': 457606211, 'number': 10084, 'closed': datetime.datetime(2020, 7, 29, 9, 22, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 7, 18, 40, tzinfo=datetime.timezone.utc), 'time_taken': 93807.0, 'time_delta': '1 day, 2:03:27', 'additions': 1933, 'deletions': 2274, 'state': 'closed'}, {'id': 457378381, 'number': 10074, 'closed': datetime.datetime(2020, 7, 27, 23, 26, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 20, 13, 58, tzinfo=datetime.timezone.utc), 'time_taken': 11548.0, 'time_delta': '3:12:28', 'additions': 18, 'deletions': 9, 'state': 'closed'}, {'id': 456773154, 'number': 10050, 'closed': datetime.datetime(2020, 7, 26, 20, 18, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 16, 30, 16, tzinfo=datetime.timezone.utc), 'time_taken': 13720.0, 'time_delta': '3:48:40', 'additions': 31, 'deletions': 1, 'state': 'closed'}, {'id': 456754110, 'number': 10048, 'closed': datetime.datetime(2020, 7, 27, 23, 49, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 14, 3, 47, tzinfo=datetime.timezone.utc), 'time_taken': 121565.0, 'time_delta': '1 day, 9:46:05', 'additions': 1308, 'deletions': 916, 'state': 'closed'}, {'id': 456707992, 'number': 10043, 'closed': datetime.datetime(2020, 7, 26, 6, 24, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 26, 6, 17, 45, tzinfo=datetime.timezone.utc), 'time_taken': 428.0, 'time_delta': '0:07:08', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 454665087, 'number': 9991, 'closed': datetime.datetime(2020, 7, 26, 4, 12, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 18, 10, 38, tzinfo=datetime.timezone.utc), 'time_taken': 381718.0, 'time_delta': '4 days, 10:01:58', 'additions': 61, 'deletions': 224, 'state': 'closed'}, {'id': 453349932, 'number': 9968, 'closed': datetime.datetime(2020, 7, 25, 15, 34, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 11, 28, 1, tzinfo=datetime.timezone.utc), 'time_taken': 446806.0, 'time_delta': '5 days, 4:06:46', 'additions': 4952, 'deletions': 3580, 'state': 'closed'}, {'id': 452582224, 'number': 9959, 'closed': datetime.datetime(2020, 7, 25, 22, 0, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 14, 7, 6, tzinfo=datetime.timezone.utc), 'time_taken': 546818.0, 'time_delta': '6 days, 7:53:38', 'additions': 389, 'deletions': 174, 'state': 'closed'}, {'id': 450094734, 'number': 9925, 'closed': datetime.datetime(2020, 9, 1, 4, 10, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 10, 47, 44, tzinfo=datetime.timezone.utc), 'time_taken': 4036958.0, 'time_delta': '46 days, 17:22:38', 'additions': 2801, 'deletions': 3213, 'state': 'closed'}, {'id': 450005051, 'number': 9922, 'closed': datetime.datetime(2020, 7, 26, 3, 41, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 16, 8, 28, 27, tzinfo=datetime.timezone.utc), 'time_taken': 846804.0, 'time_delta': '9 days, 19:13:24', 'additions': 502, 'deletions': 571, 'state': 'closed'}, {'id': 449702848, 'number': 9915, 'closed': datetime.datetime(2020, 7, 26, 5, 8, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 20, 1, 1, tzinfo=datetime.timezone.utc), 'time_taken': 896821.0, 'time_delta': '10 days, 9:07:01', 'additions': 600, 'deletions': 459, 'state': 'closed'}, {'id': 447789959, 'number': 9882, 'closed': datetime.datetime(2020, 7, 14, 15, 35, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 16, 42, 54, tzinfo=datetime.timezone.utc), 'time_taken': 255182.0, 'time_delta': '2 days, 22:53:02', 'additions': 129, 'deletions': 74, 'state': 'closed'}, {'id': 447061632, 'number': 9860, 'closed': datetime.datetime(2020, 7, 25, 10, 20, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 19, 53, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1348076.0, 'time_delta': '15 days, 14:27:56', 'additions': 1355, 'deletions': 605, 'state': 'closed'}, {'id': 445537648, 'number': 9826, 'closed': datetime.datetime(2020, 7, 14, 11, 0, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 16, 57, 32, tzinfo=datetime.timezone.utc), 'time_taken': 583369.0, 'time_delta': '6 days, 18:02:49', 'additions': 254, 'deletions': 85, 'state': 'closed'}, {'id': 440883332, 'number': 9687, 'closed': datetime.datetime(2020, 7, 3, 19, 3, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 8, 45, 14, tzinfo=datetime.timezone.utc), 'time_taken': 555473.0, 'time_delta': '6 days, 10:17:53', 'additions': 672, 'deletions': 3, 'state': 'closed'}, {'id': 437259329, 'number': 9590, 'closed': datetime.datetime(2020, 7, 1, 15, 53, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 19, 16, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1024599.0, 'time_delta': '11 days, 20:36:39', 'additions': 213, 'deletions': 0, 'state': 'closed'}, {'id': 437111828, 'number': 9589, 'closed': datetime.datetime(2020, 8, 7, 18, 45, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 13, 47, 26, tzinfo=datetime.timezone.utc), 'time_taken': 4251468.0, 'time_delta': '49 days, 4:57:48', 'additions': 2625, 'deletions': 769, 'state': 'closed'}, {'id': 435992675, 'number': 9574, 'closed': datetime.datetime(2020, 6, 28, 16, 23, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 17, 25, 4, tzinfo=datetime.timezone.utc), 'time_taken': 946688.0, 'time_delta': '10 days, 22:58:08', 'additions': 667, 'deletions': 555, 'state': 'closed'}, {'id': 435873428, 'number': 9573, 'closed': datetime.datetime(2020, 6, 19, 2, 47, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 17, 14, 1, 59, tzinfo=datetime.timezone.utc), 'time_taken': 132348.0, 'time_delta': '1 day, 12:45:48', 'additions': 31, 'deletions': 31, 'state': 'closed'}, {'id': 434028443, 'number': 9522, 'closed': datetime.datetime(2020, 6, 25, 19, 42, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 16, 42, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1047610.0, 'time_delta': '12 days, 3:00:10', 'additions': 476, 'deletions': 449, 'state': 'closed'}, {'id': 433745279, 'number': 9507, 'closed': datetime.datetime(2020, 6, 17, 19, 32, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 15, 24, 53, tzinfo=datetime.timezone.utc), 'time_taken': 446862.0, 'time_delta': '5 days, 4:07:42', 'additions': 384, 'deletions': 377, 'state': 'closed'}, {'id': 431242334, 'number': 9459, 'closed': datetime.datetime(2020, 6, 14, 15, 48, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 16, 0, 49, tzinfo=datetime.timezone.utc), 'time_taken': 517667.0, 'time_delta': '5 days, 23:47:47', 'additions': 145, 'deletions': 123, 'state': 'closed'}, {'id': 429288309, 'number': 9451, 'closed': datetime.datetime(2020, 7, 1, 8, 31, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 6, 16, 10, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2132434.0, 'time_delta': '24 days, 16:20:34', 'additions': 157, 'deletions': 2, 'state': 'closed'}, {'id': 428609672, 'number': 9438, 'closed': datetime.datetime(2020, 7, 2, 13, 27, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 17, 36, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2317849.0, 'time_delta': '26 days, 19:50:49', 'additions': 198, 'deletions': 16, 'state': 'closed'}, {'id': 425063872, 'number': 9393, 'closed': datetime.datetime(2020, 6, 7, 6, 30, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 12, 4, 38, tzinfo=datetime.timezone.utc), 'time_taken': 757568.0, 'time_delta': '8 days, 18:26:08', 'additions': 146, 'deletions': 42, 'state': 'closed'}, {'id': 415669499, 'number': 9285, 'closed': datetime.datetime(2020, 5, 19, 2, 57, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 10, 5, 2, 39, tzinfo=datetime.timezone.utc), 'time_taken': 770062.0, 'time_delta': '8 days, 21:54:22', 'additions': 70, 'deletions': 29, 'state': 'closed'}, {'id': 415518188, 'number': 9273, 'closed': datetime.datetime(2020, 5, 23, 4, 41, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 9, 5, 17, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1207449.0, 'time_delta': '13 days, 23:24:09', 'additions': 45, 'deletions': 15, 'state': 'closed'}, {'id': 411744558, 'number': 9195, 'closed': datetime.datetime(2020, 5, 2, 16, 37, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 30, 17, 52, 31, tzinfo=datetime.timezone.utc), 'time_taken': 168309.0, 'time_delta': '1 day, 22:45:09', 'additions': 20, 'deletions': 2, 'state': 'closed'}, {'id': 404129067, 'number': 9101, 'closed': datetime.datetime(2020, 4, 18, 22, 2, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 16, 5, 37, 55, tzinfo=datetime.timezone.utc), 'time_taken': 231868.0, 'time_delta': '2 days, 16:24:28', 'additions': 47, 'deletions': 39, 'state': 'closed'}, {'id': 395811882, 'number': 8947, 'closed': datetime.datetime(2020, 6, 30, 20, 22, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 30, 18, 7, 30, tzinfo=datetime.timezone.utc), 'time_taken': 7956908.0, 'time_delta': '92 days, 2:15:08', 'additions': 6531, 'deletions': 167, 'state': 'closed'}, {'id': 395091895, 'number': 8937, 'closed': datetime.datetime(2020, 3, 28, 16, 20, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 28, 12, 50, 46, tzinfo=datetime.timezone.utc), 'time_taken': 12585.0, 'time_delta': '3:29:45', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 385415173, 'number': 8792, 'closed': datetime.datetime(2020, 3, 12, 2, 3, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 6, 53, 19, tzinfo=datetime.timezone.utc), 'time_taken': 241807.0, 'time_delta': '2 days, 19:10:07', 'additions': 38, 'deletions': 17, 'state': 'closed'}, {'id': 375850158, 'number': 8656, 'closed': datetime.datetime(2020, 3, 23, 7, 18, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 16, 17, 21, 40, tzinfo=datetime.timezone.utc), 'time_taken': 3074229.0, 'time_delta': '35 days, 13:57:09', 'additions': 3693, 'deletions': 3302, 'state': 'closed'}, {'id': 361827953, 'number': 8410, 'closed': datetime.datetime(2020, 1, 13, 1, 20, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 12, 13, 2, 9, tzinfo=datetime.timezone.utc), 'time_taken': 44320.0, 'time_delta': '12:18:40', 'additions': 346, 'deletions': 176, 'state': 'closed'}, {'id': 361007942, 'number': 8378, 'closed': datetime.datetime(2020, 2, 16, 10, 43, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 9, 15, 10, 49, tzinfo=datetime.timezone.utc), 'time_taken': 3267175.0, 'time_delta': '37 days, 19:32:55', 'additions': 38, 'deletions': 21, 'state': 'closed'}, {'id': 356196917, 'number': 8267, 'closed': datetime.datetime(2020, 2, 23, 18, 7, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 23, 6, 20, 50, tzinfo=datetime.timezone.utc), 'time_taken': 5399222.0, 'time_delta': '62 days, 11:47:02', 'additions': 706, 'deletions': 270, 'state': 'closed'}, {'id': 344805647, 'number': 8066, 'closed': datetime.datetime(2019, 11, 28, 3, 50, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 23, 12, 41, 50, tzinfo=datetime.timezone.utc), 'time_taken': 400111.0, 'time_delta': '4 days, 15:08:31', 'additions': 302, 'deletions': 90, 'state': 'closed'}, {'id': 342227814, 'number': 8034, 'closed': datetime.datetime(2019, 11, 20, 3, 17, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 18, 15, 54, 51, tzinfo=datetime.timezone.utc), 'time_taken': 127354.0, 'time_delta': '1 day, 11:22:34', 'additions': 167, 'deletions': 55, 'state': 'closed'}, {'id': 337152465, 'number': 7929, 'closed': datetime.datetime(2019, 11, 12, 5, 26, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 6, 3, 46, 55, tzinfo=datetime.timezone.utc), 'time_taken': 524355.0, 'time_delta': '6 days, 1:39:15', 'additions': 405, 'deletions': 2, 'state': 'closed'}, {'id': 336014945, 'number': 7902, 'closed': datetime.datetime(2019, 11, 6, 3, 28, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 3, 11, 18, 46, tzinfo=datetime.timezone.utc), 'time_taken': 230987.0, 'time_delta': '2 days, 16:09:47', 'additions': 204, 'deletions': 2, 'state': 'closed'}, {'id': 334384982, 'number': 7881, 'closed': datetime.datetime(2019, 11, 3, 2, 4, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 30, 16, 49, 7, tzinfo=datetime.timezone.utc), 'time_taken': 292541.0, 'time_delta': '3 days, 9:15:41', 'additions': 157, 'deletions': 1, 'state': 'closed'}, {'id': 332038308, 'number': 7837, 'closed': datetime.datetime(2019, 10, 26, 10, 24, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 24, 13, 6, 59, tzinfo=datetime.timezone.utc), 'time_taken': 163051.0, 'time_delta': '1 day, 21:17:31', 'additions': 46, 'deletions': 56, 'state': 'closed'}, {'id': 331120663, 'number': 7824, 'closed': datetime.datetime(2019, 10, 25, 17, 23, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 22, 17, 51, 56, tzinfo=datetime.timezone.utc), 'time_taken': 257504.0, 'time_delta': '2 days, 23:31:44', 'additions': 27, 'deletions': 17, 'state': 'closed'}, {'id': 325039832, 'number': 7749, 'closed': datetime.datetime(2019, 10, 24, 5, 3, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 6, 14, 37, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1520804.0, 'time_delta': '17 days, 14:26:44', 'additions': 46, 'deletions': 56, 'state': 'closed'}, {'id': 325036857, 'number': 7748, 'closed': datetime.datetime(2019, 10, 6, 14, 25, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 6, 14, 4, 21, tzinfo=datetime.timezone.utc), 'time_taken': 1270.0, 'time_delta': '0:21:10', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
